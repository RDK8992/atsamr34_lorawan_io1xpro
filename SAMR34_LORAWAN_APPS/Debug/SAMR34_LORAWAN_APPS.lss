
SAMR34_LORAWAN_APPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b55c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001b55c  0001b55c  0002b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20000000  0001b564  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000309e8  2**0
                  CONTENTS
  4 .bss          000012a4  200009e8  0001bf50  000309e8  2**3
                  ALLOC
  5 .stack        00002004  20001c8c  0001d1f4  000309e8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY
  8 .debug_info   00083ddf  00000000  00000000  00030a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c88f  00000000  00000000  000b487b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018413  00000000  00000000  000c110a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001558  00000000  00000000  000d951d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ce8  00000000  00000000  000daa75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f736  00000000  00000000  000dc75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f7b7  00000000  00000000  0010be93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b0fc0  00000000  00000000  0013b64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004c58  00000000  00000000  001ec60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
	
	return fine_temp;
}

void get_temp_sensor_data(uint8_t *data)
{
       0:	90 3c 00 20 d9 38 00 00 d5 38 00 00 d5 38 00 00     .<. .8...8...8..
	...
	hot_int1v_val = (int8_t)((val2 & FUSES_HOT_INT1V_VAL_Msk) >> FUSES_HOT_INT1V_VAL_Pos);
      2c:	d5 38 00 00 00 00 00 00 00 00 00 00 d5 38 00 00     .8...........8..
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
      3c:	d5 38 00 00 d5 38 00 00 d5 38 00 00 39 13 00 00     .8...8...8..9...
      4c:	1d 0b 00 00 d5 38 00 00 d5 38 00 00 d5 38 00 00     .....8...8...8..
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
      5c:	d5 38 00 00 f1 20 00 00 01 21 00 00 11 21 00 00     .8... ...!...!..
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
      6c:	21 21 00 00 31 21 00 00 41 21 00 00 d5 38 00 00     !!..1!..A!...8..
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
      7c:	d5 38 00 00 d5 38 00 00 91 34 00 00 a1 34 00 00     .8...8...4...4..
      8c:	b1 34 00 00 c1 34 00 00 d1 34 00 00 69 08 00 00     .4...4...4..i...
      9c:	d5 38 00 00 d5 38 00 00 d5 38 00 00 d5 38 00 00     .8...8...8...8..
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
      ac:	d5 38 00 00 00 00 00 00                             .8......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009e8 	.word	0x200009e8
      d4:	00000000 	.word	0x00000000
      d8:	0001b564 	.word	0x0001b564

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>

	while (adc_is_syncing(module_inst)) {
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     100:	00000000 	.word	0x00000000
     104:	200009ec 	.word	0x200009ec
     108:	0001b564 	.word	0x0001b564

	while (adc_is_syncing(module_inst)) {
     10c:	0001b564 	.word	0x0001b564
	if (int_flags & ADC_INTFLAG_RESRDY) {
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000031c1 	.word	0x000031c1
     140:	000109bd 	.word	0x000109bd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	20000a04 	.word	0x20000a04
     1e4:	20000a08 	.word	0x20000a08
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	20000a04 	.word	0x20000a04
     214:	20000a08 	.word	0x20000a08
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2501      	movs	r5, #1
     228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     22a:	2300      	movs	r3, #0
     22c:	4698      	mov	r8, r3
     22e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     232:	0021      	movs	r1, r4
     234:	2013      	movs	r0, #19
     236:	4e12      	ldr	r6, [pc, #72]	; (280 <system_board_init+0x64>)
     238:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23a:	4f12      	ldr	r7, [pc, #72]	; (284 <system_board_init+0x68>)
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     242:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     244:	0021      	movs	r1, r4
     246:	2012      	movs	r0, #18
     248:	47b0      	blx	r6
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	02db      	lsls	r3, r3, #11
     24e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     250:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     252:	0021      	movs	r1, r4
     254:	200d      	movs	r0, #13
     256:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     258:	2380      	movs	r3, #128	; 0x80
     25a:	019b      	lsls	r3, r3, #6
     25c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     25e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	2009      	movs	r0, #9
     264:	47b0      	blx	r6
     266:	2380      	movs	r3, #128	; 0x80
     268:	009b      	lsls	r3, r3, #2
     26a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26c:	4643      	mov	r3, r8
     26e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     270:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     272:	0021      	movs	r1, r4
     274:	201c      	movs	r0, #28
     276:	47b0      	blx	r6
		
}
     278:	b002      	add	sp, #8
     27a:	bc04      	pop	{r2}
     27c:	4690      	mov	r8, r2
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	0000102d 	.word	0x0000102d
     284:	40002800 	.word	0x40002800

00000288 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     288:	b530      	push	{r4, r5, lr}
     28a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     28c:	aa01      	add	r2, sp, #4
     28e:	2364      	movs	r3, #100	; 0x64
     290:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     292:	4b21      	ldr	r3, [pc, #132]	; (318 <at30tse_init+0x90>)
     294:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     296:	2300      	movs	r3, #0
     298:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     29a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     29c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     29e:	2180      	movs	r1, #128	; 0x80
     2a0:	0389      	lsls	r1, r1, #14
     2a2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     2a4:	2101      	movs	r1, #1
     2a6:	4249      	negs	r1, r1
     2a8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     2aa:	3125      	adds	r1, #37	; 0x25
     2ac:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     2ae:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     2b0:	3108      	adds	r1, #8
     2b2:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     2b4:	3101      	adds	r1, #1
     2b6:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     2b8:	3101      	adds	r1, #1
     2ba:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     2bc:	33d7      	adds	r3, #215	; 0xd7
     2be:	8613      	strh	r3, [r2, #48]	; 0x30
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     2c0:	4b16      	ldr	r3, [pc, #88]	; (31c <at30tse_init+0x94>)
     2c2:	82d3      	strh	r3, [r2, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <at30tse_init+0x98>)
     2c6:	61d3      	str	r3, [r2, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     2c8:	4b16      	ldr	r3, [pc, #88]	; (324 <at30tse_init+0x9c>)
     2ca:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     2cc:	4c16      	ldr	r4, [pc, #88]	; (328 <at30tse_init+0xa0>)
     2ce:	4917      	ldr	r1, [pc, #92]	; (32c <at30tse_init+0xa4>)
     2d0:	0020      	movs	r0, r4
     2d2:	4b17      	ldr	r3, [pc, #92]	; (330 <at30tse_init+0xa8>)
     2d4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2d6:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2d8:	2207      	movs	r2, #7
     2da:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     2dc:	421a      	tst	r2, r3
     2de:	d1fc      	bne.n	2da <at30tse_init+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	2202      	movs	r2, #2
     2e4:	4313      	orrs	r3, r2
     2e6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2e8:	4d0f      	ldr	r5, [pc, #60]	; (328 <at30tse_init+0xa0>)
     2ea:	6828      	ldr	r0, [r5, #0]
     2ec:	4b11      	ldr	r3, [pc, #68]	; (334 <at30tse_init+0xac>)
     2ee:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2f0:	231f      	movs	r3, #31
     2f2:	4018      	ands	r0, r3
     2f4:	3b1e      	subs	r3, #30
     2f6:	4083      	lsls	r3, r0
     2f8:	4a0f      	ldr	r2, [pc, #60]	; (338 <at30tse_init+0xb0>)
     2fa:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2fc:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     2fe:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     300:	2110      	movs	r1, #16
     302:	8b62      	ldrh	r2, [r4, #26]
     304:	420a      	tst	r2, r1
     306:	d104      	bne.n	312 <at30tse_init+0x8a>
		timeout_counter++;
     308:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     30a:	4283      	cmp	r3, r0
     30c:	d3f9      	bcc.n	302 <at30tse_init+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     30e:	2310      	movs	r3, #16
     310:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&dev_inst_at30tse75x);
}
     312:	b00f      	add	sp, #60	; 0x3c
     314:	bd30      	pop	{r4, r5, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000d48 	.word	0x00000d48
     31c:	00002710 	.word	0x00002710
     320:	00100002 	.word	0x00100002
     324:	00110002 	.word	0x00110002
     328:	20000f84 	.word	0x20000f84
     32c:	42000400 	.word	0x42000400
     330:	00001409 	.word	0x00001409
     334:	000020c1 	.word	0x000020c1
     338:	e000e100 	.word	0xe000e100

0000033c <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     33c:	b570      	push	{r4, r5, r6, lr}
     33e:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     340:	ad07      	add	r5, sp, #28
     342:	4308      	orrs	r0, r1
     344:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
     346:	2300      	movs	r3, #0
     348:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     34a:	a904      	add	r1, sp, #16
     34c:	204f      	movs	r0, #79	; 0x4f
     34e:	8008      	strh	r0, [r1, #0]
     350:	2401      	movs	r4, #1
     352:	804c      	strh	r4, [r1, #2]
     354:	604d      	str	r5, [r1, #4]
     356:	720b      	strb	r3, [r1, #8]
     358:	724b      	strb	r3, [r1, #9]
     35a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     35c:	ac01      	add	r4, sp, #4
     35e:	8020      	strh	r0, [r4, #0]
     360:	8062      	strh	r2, [r4, #2]
     362:	9502      	str	r5, [sp, #8]
     364:	7223      	strb	r3, [r4, #8]
     366:	7263      	strb	r3, [r4, #9]
     368:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     36a:	4e07      	ldr	r6, [pc, #28]	; (388 <at30tse_read_register+0x4c>)
     36c:	0030      	movs	r0, r6
     36e:	4b07      	ldr	r3, [pc, #28]	; (38c <at30tse_read_register+0x50>)
     370:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     372:	0021      	movs	r1, r4
     374:	0030      	movs	r0, r6
     376:	4b06      	ldr	r3, [pc, #24]	; (390 <at30tse_read_register+0x54>)
     378:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     37a:	782b      	ldrb	r3, [r5, #0]
     37c:	021b      	lsls	r3, r3, #8
     37e:	7868      	ldrb	r0, [r5, #1]
     380:	4318      	orrs	r0, r3
}
     382:	b008      	add	sp, #32
     384:	bd70      	pop	{r4, r5, r6, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	20000f84 	.word	0x20000f84
     38c:	00001a49 	.word	0x00001a49
     390:	00001a25 	.word	0x00001a25

00000394 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     394:	b5d0      	push	{r4, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     396:	2202      	movs	r2, #2
     398:	2100      	movs	r1, #0
     39a:	2000      	movs	r0, #0
     39c:	4b1f      	ldr	r3, [pc, #124]	; (41c <at30tse_read_temperature+0x88>)
     39e:	4798      	blx	r3
     3a0:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
     3a2:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     3a4:	0402      	lsls	r2, r0, #16
     3a6:	d40c      	bmi.n	3c2 <at30tse_read_temperature+0x2e>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     3a8:	4a1d      	ldr	r2, [pc, #116]	; (420 <at30tse_read_temperature+0x8c>)
     3aa:	7816      	ldrb	r6, [r2, #0]
     3ac:	2e01      	cmp	r6, #1
     3ae:	d016      	beq.n	3de <at30tse_read_temperature+0x4a>
     3b0:	2e00      	cmp	r6, #0
     3b2:	d00a      	beq.n	3ca <at30tse_read_temperature+0x36>
     3b4:	2e02      	cmp	r6, #2
     3b6:	d01c      	beq.n	3f2 <at30tse_read_temperature+0x5e>
     3b8:	2e03      	cmp	r6, #3
     3ba:	d025      	beq.n	408 <at30tse_read_temperature+0x74>
	double temperature = 0;
     3bc:	2000      	movs	r0, #0
     3be:	2100      	movs	r1, #0
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
	}
	return temperature;
     3c0:	e00c      	b.n	3dc <at30tse_read_temperature+0x48>
		data &= ~(1 << 15);
     3c2:	0440      	lsls	r0, r0, #17
     3c4:	0c43      	lsrs	r3, r0, #17
		sign *= -1;
     3c6:	3f02      	subs	r7, #2
     3c8:	e7ee      	b.n	3a8 <at30tse_read_temperature+0x14>
			data = (data >> 7);
     3ca:	09db      	lsrs	r3, r3, #7
			temperature = data * sign * 0.5;
     3cc:	b298      	uxth	r0, r3
     3ce:	4378      	muls	r0, r7
     3d0:	4b14      	ldr	r3, [pc, #80]	; (424 <at30tse_read_temperature+0x90>)
     3d2:	4798      	blx	r3
     3d4:	2200      	movs	r2, #0
     3d6:	4b14      	ldr	r3, [pc, #80]	; (428 <at30tse_read_temperature+0x94>)
     3d8:	4c14      	ldr	r4, [pc, #80]	; (42c <at30tse_read_temperature+0x98>)
     3da:	47a0      	blx	r4
}
     3dc:	bdd0      	pop	{r4, r6, r7, pc}
			data = (data >> 6);
     3de:	099b      	lsrs	r3, r3, #6
			temperature = data * sign * 0.25;
     3e0:	b298      	uxth	r0, r3
     3e2:	4378      	muls	r0, r7
     3e4:	4b0f      	ldr	r3, [pc, #60]	; (424 <at30tse_read_temperature+0x90>)
     3e6:	4798      	blx	r3
     3e8:	2200      	movs	r2, #0
     3ea:	4b11      	ldr	r3, [pc, #68]	; (430 <at30tse_read_temperature+0x9c>)
     3ec:	4c0f      	ldr	r4, [pc, #60]	; (42c <at30tse_read_temperature+0x98>)
     3ee:	47a0      	blx	r4
			break;
     3f0:	e7f4      	b.n	3dc <at30tse_read_temperature+0x48>
			data = (data >> 5);
     3f2:	095b      	lsrs	r3, r3, #5
			temperature = data * sign * 0.125;
     3f4:	b298      	uxth	r0, r3
     3f6:	4378      	muls	r0, r7
     3f8:	4b0a      	ldr	r3, [pc, #40]	; (424 <at30tse_read_temperature+0x90>)
     3fa:	4798      	blx	r3
     3fc:	2200      	movs	r2, #0
     3fe:	23ff      	movs	r3, #255	; 0xff
     400:	059b      	lsls	r3, r3, #22
     402:	4c0a      	ldr	r4, [pc, #40]	; (42c <at30tse_read_temperature+0x98>)
     404:	47a0      	blx	r4
			break;
     406:	e7e9      	b.n	3dc <at30tse_read_temperature+0x48>
			data = (data >> 4);
     408:	091b      	lsrs	r3, r3, #4
			temperature = data * sign * 0.0625;
     40a:	b298      	uxth	r0, r3
     40c:	4378      	muls	r0, r7
     40e:	4b05      	ldr	r3, [pc, #20]	; (424 <at30tse_read_temperature+0x90>)
     410:	4798      	blx	r3
     412:	2200      	movs	r2, #0
     414:	4b07      	ldr	r3, [pc, #28]	; (434 <at30tse_read_temperature+0xa0>)
     416:	4c05      	ldr	r4, [pc, #20]	; (42c <at30tse_read_temperature+0x98>)
     418:	47a0      	blx	r4
			break;
     41a:	e7df      	b.n	3dc <at30tse_read_temperature+0x48>
     41c:	0000033d 	.word	0x0000033d
     420:	20000a09 	.word	0x20000a09
     424:	000135a5 	.word	0x000135a5
     428:	3fe00000 	.word	0x3fe00000
     42c:	00012a11 	.word	0x00012a11
     430:	3fd00000 	.word	0x3fd00000
     434:	3fb00000 	.word	0x3fb00000

00000438 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     438:	2000      	movs	r0, #0
     43a:	4770      	bx	lr

0000043c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     43c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     43e:	2300      	movs	r3, #0
     440:	2200      	movs	r2, #0
     442:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     444:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     446:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     448:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     44a:	2100      	movs	r1, #0
     44c:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     44e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     450:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     452:	2406      	movs	r4, #6
     454:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     456:	24c0      	movs	r4, #192	; 0xc0
     458:	0164      	lsls	r4, r4, #5
     45a:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     45c:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     45e:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     460:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     462:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     464:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     466:	242a      	movs	r4, #42	; 0x2a
     468:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     46a:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     46c:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     46e:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     470:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     472:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     474:	3c06      	subs	r4, #6
     476:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     478:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     47a:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     47c:	7541      	strb	r1, [r0, #21]
}
     47e:	bd10      	pop	{r4, pc}

00000480 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	46ce      	mov	lr, r9
     484:	b500      	push	{lr}
     486:	b098      	sub	sp, #96	; 0x60
     488:	0005      	movs	r5, r0
     48a:	000c      	movs	r4, r1
     48c:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     48e:	0008      	movs	r0, r1
     490:	4bb2      	ldr	r3, [pc, #712]	; (75c <adc_init+0x2dc>)
     492:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     494:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     496:	4ab2      	ldr	r2, [pc, #712]	; (760 <adc_init+0x2e0>)
     498:	6a13      	ldr	r3, [r2, #32]
     49a:	2108      	movs	r1, #8
     49c:	430b      	orrs	r3, r1
     49e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     4a0:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     4a2:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     4a4:	07d2      	lsls	r2, r2, #31
     4a6:	d504      	bpl.n	4b2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     4a8:	0018      	movs	r0, r3
     4aa:	b018      	add	sp, #96	; 0x60
     4ac:	bc04      	pop	{r2}
     4ae:	4691      	mov	r9, r2
     4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Adc *const adc_module = module_inst->hw;
     4b2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4b4:	8c13      	ldrh	r3, [r2, #32]
     4b6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4b8:	2b00      	cmp	r3, #0
     4ba:	d1fb      	bne.n	4b4 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     4bc:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     4be:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     4c0:	0792      	lsls	r2, r2, #30
     4c2:	d4f1      	bmi.n	4a8 <adc_init+0x28>
	module_inst->reference = config->reference;
     4c4:	7873      	ldrb	r3, [r6, #1]
     4c6:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     4c8:	2b00      	cmp	r3, #0
     4ca:	d104      	bne.n	4d6 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     4cc:	4aa5      	ldr	r2, [pc, #660]	; (764 <adc_init+0x2e4>)
     4ce:	69d3      	ldr	r3, [r2, #28]
     4d0:	2104      	movs	r1, #4
     4d2:	430b      	orrs	r3, r1
     4d4:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     4d6:	2300      	movs	r3, #0
     4d8:	60ab      	str	r3, [r5, #8]
     4da:	60eb      	str	r3, [r5, #12]
     4dc:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     4de:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     4e0:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     4e2:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     4e4:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     4e6:	0080      	lsls	r0, r0, #2
     4e8:	4b9f      	ldr	r3, [pc, #636]	; (768 <adc_init+0x2e8>)
     4ea:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     4ec:	232a      	movs	r3, #42	; 0x2a
     4ee:	5cf3      	ldrb	r3, [r6, r3]
     4f0:	2b00      	cmp	r3, #0
     4f2:	d105      	bne.n	500 <adc_init+0x80>
     4f4:	7b33      	ldrb	r3, [r6, #12]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d102      	bne.n	500 <adc_init+0x80>
		module_inst->software_trigger = true;
     4fa:	3301      	adds	r3, #1
     4fc:	776b      	strb	r3, [r5, #29]
     4fe:	e001      	b.n	504 <adc_init+0x84>
		module_inst->software_trigger = false;
     500:	2300      	movs	r3, #0
     502:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     504:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     506:	7833      	ldrb	r3, [r6, #0]
     508:	466a      	mov	r2, sp
     50a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     50c:	4669      	mov	r1, sp
     50e:	201e      	movs	r0, #30
     510:	4b96      	ldr	r3, [pc, #600]	; (76c <adc_init+0x2ec>)
     512:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     514:	201e      	movs	r0, #30
     516:	4b96      	ldr	r3, [pc, #600]	; (770 <adc_init+0x2f0>)
     518:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     51a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     51c:	2258      	movs	r2, #88	; 0x58
     51e:	4995      	ldr	r1, [pc, #596]	; (774 <adc_init+0x2f4>)
     520:	a802      	add	r0, sp, #8
     522:	4b95      	ldr	r3, [pc, #596]	; (778 <adc_init+0x2f8>)
     524:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     526:	2c13      	cmp	r4, #19
     528:	d90b      	bls.n	542 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     52a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     52c:	2258      	movs	r2, #88	; 0x58
     52e:	4991      	ldr	r1, [pc, #580]	; (774 <adc_init+0x2f4>)
     530:	a802      	add	r0, sp, #8
     532:	4b91      	ldr	r3, [pc, #580]	; (778 <adc_init+0x2f8>)
     534:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     536:	2c13      	cmp	r4, #19
     538:	d911      	bls.n	55e <adc_init+0xde>
     53a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     53c:	4b8e      	ldr	r3, [pc, #568]	; (778 <adc_init+0x2f8>)
     53e:	4699      	mov	r9, r3
     540:	e01e      	b.n	580 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     542:	00a4      	lsls	r4, r4, #2
     544:	ab02      	add	r3, sp, #8
     546:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     548:	a901      	add	r1, sp, #4
     54a:	2300      	movs	r3, #0
     54c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     54e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     550:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     552:	3301      	adds	r3, #1
     554:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     556:	b2c0      	uxtb	r0, r0
     558:	4b88      	ldr	r3, [pc, #544]	; (77c <adc_init+0x2fc>)
     55a:	4798      	blx	r3
     55c:	e7e5      	b.n	52a <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     55e:	00a4      	lsls	r4, r4, #2
     560:	ab02      	add	r3, sp, #8
     562:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     564:	a901      	add	r1, sp, #4
     566:	2300      	movs	r3, #0
     568:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     56a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     56c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     56e:	3301      	adds	r3, #1
     570:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     572:	b2c0      	uxtb	r0, r0
     574:	4b81      	ldr	r3, [pc, #516]	; (77c <adc_init+0x2fc>)
     576:	4798      	blx	r3
     578:	e7df      	b.n	53a <adc_init+0xba>
     57a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     57c:	2c14      	cmp	r4, #20
     57e:	d018      	beq.n	5b2 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     580:	2301      	movs	r3, #1
     582:	40a3      	lsls	r3, r4
     584:	6932      	ldr	r2, [r6, #16]
     586:	421a      	tst	r2, r3
     588:	d0f7      	beq.n	57a <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     58a:	2258      	movs	r2, #88	; 0x58
     58c:	4979      	ldr	r1, [pc, #484]	; (774 <adc_init+0x2f4>)
     58e:	a802      	add	r0, sp, #8
     590:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     592:	2c13      	cmp	r4, #19
     594:	d8f1      	bhi.n	57a <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     596:	00a3      	lsls	r3, r4, #2
     598:	aa02      	add	r2, sp, #8
     59a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     59c:	a901      	add	r1, sp, #4
     59e:	2300      	movs	r3, #0
     5a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     5a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5a6:	3301      	adds	r3, #1
     5a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5aa:	b2c0      	uxtb	r0, r0
     5ac:	4b73      	ldr	r3, [pc, #460]	; (77c <adc_init+0x2fc>)
     5ae:	4798      	blx	r3
     5b0:	e7e3      	b.n	57a <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     5b2:	7b73      	ldrb	r3, [r6, #13]
     5b4:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     5b6:	7bb2      	ldrb	r2, [r6, #14]
     5b8:	01d2      	lsls	r2, r2, #7
     5ba:	4313      	orrs	r3, r2
     5bc:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     5be:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     5c0:	7d33      	ldrb	r3, [r6, #20]
     5c2:	01db      	lsls	r3, r3, #7
			| (config->reference);
     5c4:	7872      	ldrb	r2, [r6, #1]
     5c6:	4313      	orrs	r3, r2
     5c8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     5ca:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     5cc:	78f3      	ldrb	r3, [r6, #3]
     5ce:	2b34      	cmp	r3, #52	; 0x34
     5d0:	d900      	bls.n	5d4 <adc_init+0x154>
     5d2:	e140      	b.n	856 <adc_init+0x3d6>
     5d4:	009b      	lsls	r3, r3, #2
     5d6:	4a6a      	ldr	r2, [pc, #424]	; (780 <adc_init+0x300>)
     5d8:	58d3      	ldr	r3, [r2, r3]
     5da:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     5dc:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     5de:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     5e0:	2102      	movs	r1, #2
     5e2:	e01a      	b.n	61a <adc_init+0x19a>
		adjres = config->divide_result;
     5e4:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     5e6:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     5e8:	2010      	movs	r0, #16
     5ea:	e016      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     5ec:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     5ee:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     5f0:	2101      	movs	r1, #1
     5f2:	e012      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     5f4:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     5f6:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     5f8:	2100      	movs	r1, #0
     5fa:	e00e      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     5fc:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     5fe:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     600:	2100      	movs	r1, #0
     602:	e00a      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     604:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     606:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     608:	2100      	movs	r1, #0
     60a:	e006      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     60c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     60e:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     610:	2100      	movs	r1, #0
     612:	e002      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     614:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     616:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     618:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     61a:	0109      	lsls	r1, r1, #4
     61c:	2370      	movs	r3, #112	; 0x70
     61e:	400b      	ands	r3, r1
     620:	4313      	orrs	r3, r2
     622:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     624:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     626:	8c13      	ldrh	r3, [r2, #32]
     628:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     62a:	2b00      	cmp	r3, #0
     62c:	d1fb      	bne.n	626 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     62e:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     630:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     632:	2a3f      	cmp	r2, #63	; 0x3f
     634:	d900      	bls.n	638 <adc_init+0x1b8>
     636:	e737      	b.n	4a8 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     638:	7bf3      	ldrb	r3, [r6, #15]
     63a:	01db      	lsls	r3, r3, #7
     63c:	431a      	orrs	r2, r3
     63e:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     640:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     642:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     644:	8c13      	ldrh	r3, [r2, #32]
     646:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     648:	2b00      	cmp	r3, #0
     64a:	d1fb      	bne.n	644 <adc_init+0x1c4>
			config->clock_prescaler;
     64c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     64e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     650:	2324      	movs	r3, #36	; 0x24
     652:	5cf3      	ldrb	r3, [r6, r3]
     654:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     656:	7b32      	ldrb	r2, [r6, #12]
     658:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65a:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     65c:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65e:	4313      	orrs	r3, r2
     660:	7ab2      	ldrb	r2, [r6, #10]
     662:	0052      	lsls	r2, r2, #1
     664:	4313      	orrs	r3, r2
     666:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     668:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     66a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     66c:	8c13      	ldrh	r3, [r2, #32]
     66e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     670:	2b00      	cmp	r3, #0
     672:	d1fb      	bne.n	66c <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     674:	8b32      	ldrh	r2, [r6, #24]
     676:	2a00      	cmp	r2, #0
     678:	d020      	beq.n	6bc <adc_init+0x23c>
		switch (resolution) {
     67a:	2810      	cmp	r0, #16
     67c:	d100      	bne.n	680 <adc_init+0x200>
     67e:	e0c9      	b.n	814 <adc_init+0x394>
     680:	d800      	bhi.n	684 <adc_init+0x204>
     682:	e083      	b.n	78c <adc_init+0x30c>
     684:	2820      	cmp	r0, #32
     686:	d100      	bne.n	68a <adc_init+0x20a>
     688:	e0a3      	b.n	7d2 <adc_init+0x352>
     68a:	2830      	cmp	r0, #48	; 0x30
     68c:	d116      	bne.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     68e:	7af3      	ldrb	r3, [r6, #11]
     690:	2b00      	cmp	r3, #0
     692:	d00a      	beq.n	6aa <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     694:	69f1      	ldr	r1, [r6, #28]
     696:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     698:	2317      	movs	r3, #23
			if (config->differential_mode &&
     69a:	29ff      	cmp	r1, #255	; 0xff
     69c:	d900      	bls.n	6a0 <adc_init+0x220>
     69e:	e703      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     6a0:	6a31      	ldr	r1, [r6, #32]
     6a2:	3180      	adds	r1, #128	; 0x80
     6a4:	29ff      	cmp	r1, #255	; 0xff
     6a6:	d900      	bls.n	6aa <adc_init+0x22a>
     6a8:	e6fe      	b.n	4a8 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     6aa:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     6ac:	69f1      	ldr	r1, [r6, #28]
     6ae:	29ff      	cmp	r1, #255	; 0xff
     6b0:	dd00      	ble.n	6b4 <adc_init+0x234>
     6b2:	e6f9      	b.n	4a8 <adc_init+0x28>
     6b4:	6a31      	ldr	r1, [r6, #32]
     6b6:	29ff      	cmp	r1, #255	; 0xff
     6b8:	dd00      	ble.n	6bc <adc_init+0x23c>
     6ba:	e6f5      	b.n	4a8 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     6bc:	897b      	ldrh	r3, [r7, #10]
     6be:	431a      	orrs	r2, r3
     6c0:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     6c2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6c4:	8c13      	ldrh	r3, [r2, #32]
     6c6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6c8:	2b00      	cmp	r3, #0
     6ca:	d1fb      	bne.n	6c4 <adc_init+0x244>
	adc_module->WINLT.reg =
     6cc:	8bb3      	ldrh	r3, [r6, #28]
     6ce:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     6d0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6d2:	8c13      	ldrh	r3, [r2, #32]
     6d4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6d6:	2b00      	cmp	r3, #0
     6d8:	d1fb      	bne.n	6d2 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     6da:	8c33      	ldrh	r3, [r6, #32]
     6dc:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     6de:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6e0:	8c13      	ldrh	r3, [r2, #32]
     6e2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6e4:	2b00      	cmp	r3, #0
     6e6:	d1fb      	bne.n	6e0 <adc_init+0x260>
			config->positive_input;
     6e8:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     6ea:	88f2      	ldrh	r2, [r6, #6]
     6ec:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     6ee:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     6f0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6f2:	8c13      	ldrh	r3, [r2, #32]
     6f4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6f6:	2b00      	cmp	r3, #0
     6f8:	d1fb      	bne.n	6f2 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     6fa:	332a      	adds	r3, #42	; 0x2a
     6fc:	5cf3      	ldrb	r3, [r6, r3]
     6fe:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     700:	2307      	movs	r3, #7
     702:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     704:	331d      	adds	r3, #29
     706:	5cf3      	ldrb	r3, [r6, r3]
     708:	2b00      	cmp	r3, #0
     70a:	d01b      	beq.n	744 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     70c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     70e:	491d      	ldr	r1, [pc, #116]	; (784 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     710:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     712:	428a      	cmp	r2, r1
     714:	d900      	bls.n	718 <adc_init+0x298>
     716:	e6c7      	b.n	4a8 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     718:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     71a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     71c:	8c13      	ldrh	r3, [r2, #32]
     71e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     720:	2b00      	cmp	r3, #0
     722:	d1fb      	bne.n	71c <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     724:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     726:	2380      	movs	r3, #128	; 0x80
     728:	011b      	lsls	r3, r3, #4
     72a:	18ca      	adds	r2, r1, r3
     72c:	4815      	ldr	r0, [pc, #84]	; (784 <adc_init+0x304>)
     72e:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     730:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     732:	4282      	cmp	r2, r0
     734:	d900      	bls.n	738 <adc_init+0x2b8>
     736:	e6b7      	b.n	4a8 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     738:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     73a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     73c:	8c13      	ldrh	r3, [r2, #32]
     73e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     740:	2b00      	cmp	r3, #0
     742:	d1fb      	bne.n	73c <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <adc_init+0x308>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	021a      	lsls	r2, r3, #8
     74a:	21e0      	movs	r1, #224	; 0xe0
     74c:	00c9      	lsls	r1, r1, #3
     74e:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     750:	069b      	lsls	r3, r3, #26
     752:	0f5b      	lsrs	r3, r3, #29
			) |
     754:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     756:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     758:	2300      	movs	r3, #0
     75a:	e6a5      	b.n	4a8 <adc_init+0x28>
     75c:	00000439 	.word	0x00000439
     760:	40000400 	.word	0x40000400
     764:	40001400 	.word	0x40001400
     768:	20000fac 	.word	0x20000fac
     76c:	0000329d 	.word	0x0000329d
     770:	0000322d 	.word	0x0000322d
     774:	0001a2b8 	.word	0x0001a2b8
     778:	00013ba5 	.word	0x00013ba5
     77c:	00003399 	.word	0x00003399
     780:	0001a1e4 	.word	0x0001a1e4
     784:	00000fff 	.word	0x00000fff
     788:	00806020 	.word	0x00806020
		switch (resolution) {
     78c:	2800      	cmp	r0, #0
     78e:	d195      	bne.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     790:	7af3      	ldrb	r3, [r6, #11]
     792:	2b00      	cmp	r3, #0
     794:	d012      	beq.n	7bc <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     796:	69f3      	ldr	r3, [r6, #28]
     798:	2080      	movs	r0, #128	; 0x80
     79a:	0100      	lsls	r0, r0, #4
     79c:	4684      	mov	ip, r0
     79e:	4463      	add	r3, ip
     7a0:	0019      	movs	r1, r3
			if (config->differential_mode &&
     7a2:	482e      	ldr	r0, [pc, #184]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7a4:	2317      	movs	r3, #23
			if (config->differential_mode &&
     7a6:	4281      	cmp	r1, r0
     7a8:	d900      	bls.n	7ac <adc_init+0x32c>
     7aa:	e67d      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     7ac:	6a33      	ldr	r3, [r6, #32]
     7ae:	4463      	add	r3, ip
     7b0:	0019      	movs	r1, r3
     7b2:	482a      	ldr	r0, [pc, #168]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7b4:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     7b6:	4281      	cmp	r1, r0
     7b8:	d900      	bls.n	7bc <adc_init+0x33c>
     7ba:	e675      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     7bc:	4927      	ldr	r1, [pc, #156]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7be:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     7c0:	69f0      	ldr	r0, [r6, #28]
     7c2:	4288      	cmp	r0, r1
     7c4:	dd00      	ble.n	7c8 <adc_init+0x348>
     7c6:	e66f      	b.n	4a8 <adc_init+0x28>
     7c8:	6a30      	ldr	r0, [r6, #32]
     7ca:	4288      	cmp	r0, r1
     7cc:	dd00      	ble.n	7d0 <adc_init+0x350>
     7ce:	e66b      	b.n	4a8 <adc_init+0x28>
     7d0:	e774      	b.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     7d2:	7af3      	ldrb	r3, [r6, #11]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d012      	beq.n	7fe <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     7d8:	69f3      	ldr	r3, [r6, #28]
     7da:	2080      	movs	r0, #128	; 0x80
     7dc:	0080      	lsls	r0, r0, #2
     7de:	4684      	mov	ip, r0
     7e0:	4463      	add	r3, ip
     7e2:	0019      	movs	r1, r3
			if (config->differential_mode &&
     7e4:	481e      	ldr	r0, [pc, #120]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     7e6:	2317      	movs	r3, #23
			if (config->differential_mode &&
     7e8:	4281      	cmp	r1, r0
     7ea:	d900      	bls.n	7ee <adc_init+0x36e>
     7ec:	e65c      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     7ee:	6a33      	ldr	r3, [r6, #32]
     7f0:	4463      	add	r3, ip
     7f2:	0019      	movs	r1, r3
     7f4:	481a      	ldr	r0, [pc, #104]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     7f6:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     7f8:	4281      	cmp	r1, r0
     7fa:	d900      	bls.n	7fe <adc_init+0x37e>
     7fc:	e654      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     7fe:	4918      	ldr	r1, [pc, #96]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     800:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     802:	69f0      	ldr	r0, [r6, #28]
     804:	4288      	cmp	r0, r1
     806:	dd00      	ble.n	80a <adc_init+0x38a>
     808:	e64e      	b.n	4a8 <adc_init+0x28>
     80a:	6a30      	ldr	r0, [r6, #32]
     80c:	4288      	cmp	r0, r1
     80e:	dd00      	ble.n	812 <adc_init+0x392>
     810:	e64a      	b.n	4a8 <adc_init+0x28>
     812:	e753      	b.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     814:	7af3      	ldrb	r3, [r6, #11]
     816:	2b00      	cmp	r3, #0
     818:	d012      	beq.n	840 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     81a:	69f3      	ldr	r3, [r6, #28]
     81c:	2080      	movs	r0, #128	; 0x80
     81e:	0200      	lsls	r0, r0, #8
     820:	4684      	mov	ip, r0
     822:	4463      	add	r3, ip
     824:	0019      	movs	r1, r3
			if (config->differential_mode &&
     826:	480f      	ldr	r0, [pc, #60]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     828:	2317      	movs	r3, #23
			if (config->differential_mode &&
     82a:	4281      	cmp	r1, r0
     82c:	d900      	bls.n	830 <adc_init+0x3b0>
     82e:	e63b      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     830:	6a33      	ldr	r3, [r6, #32]
     832:	4463      	add	r3, ip
     834:	0019      	movs	r1, r3
     836:	480b      	ldr	r0, [pc, #44]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     838:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     83a:	4281      	cmp	r1, r0
     83c:	d900      	bls.n	840 <adc_init+0x3c0>
     83e:	e633      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     840:	4908      	ldr	r1, [pc, #32]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     842:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     844:	69f0      	ldr	r0, [r6, #28]
     846:	4288      	cmp	r0, r1
     848:	dd00      	ble.n	84c <adc_init+0x3cc>
     84a:	e62d      	b.n	4a8 <adc_init+0x28>
     84c:	6a30      	ldr	r0, [r6, #32]
     84e:	4288      	cmp	r0, r1
     850:	dd00      	ble.n	854 <adc_init+0x3d4>
     852:	e629      	b.n	4a8 <adc_init+0x28>
     854:	e732      	b.n	6bc <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     856:	2317      	movs	r3, #23
     858:	e626      	b.n	4a8 <adc_init+0x28>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00000fff 	.word	0x00000fff
     860:	000003ff 	.word	0x000003ff
     864:	0000ffff 	.word	0x0000ffff

00000868 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     868:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     86a:	4b2f      	ldr	r3, [pc, #188]	; (928 <ADC_Handler+0xc0>)
     86c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     86e:	6823      	ldr	r3, [r4, #0]
     870:	799a      	ldrb	r2, [r3, #6]
     872:	795d      	ldrb	r5, [r3, #5]
     874:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     876:	07ea      	lsls	r2, r5, #31
     878:	d52a      	bpl.n	8d0 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     87a:	2201      	movs	r2, #1
     87c:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     87e:	6962      	ldr	r2, [r4, #20]
     880:	1c93      	adds	r3, r2, #2
     882:	6163      	str	r3, [r4, #20]
     884:	6823      	ldr	r3, [r4, #0]
     886:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     888:	b29b      	uxth	r3, r3
     88a:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     88c:	8b23      	ldrh	r3, [r4, #24]
     88e:	3b01      	subs	r3, #1
     890:	b29b      	uxth	r3, r3
     892:	8323      	strh	r3, [r4, #24]
     894:	2b00      	cmp	r3, #0
     896:	d015      	beq.n	8c4 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     898:	7f63      	ldrb	r3, [r4, #29]
     89a:	2b00      	cmp	r3, #0
     89c:	d018      	beq.n	8d0 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     89e:	6822      	ldr	r2, [r4, #0]
     8a0:	79d3      	ldrb	r3, [r2, #7]
     8a2:	b25b      	sxtb	r3, r3
     8a4:	2b00      	cmp	r3, #0
     8a6:	db13      	blt.n	8d0 <ADC_Handler+0x68>
     8a8:	8c13      	ldrh	r3, [r2, #32]
     8aa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fb      	bne.n	8a8 <ADC_Handler+0x40>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     8b0:	7e13      	ldrb	r3, [r2, #24]
     8b2:	2102      	movs	r1, #2
     8b4:	430b      	orrs	r3, r1
     8b6:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     8b8:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     8ba:	8c13      	ldrh	r3, [r2, #32]
     8bc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     8be:	2b00      	cmp	r3, #0
     8c0:	d1fb      	bne.n	8ba <ADC_Handler+0x52>
     8c2:	e005      	b.n	8d0 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     8c4:	2301      	movs	r3, #1
     8c6:	6822      	ldr	r2, [r4, #0]
     8c8:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     8ca:	7f23      	ldrb	r3, [r4, #28]
     8cc:	2b05      	cmp	r3, #5
     8ce:	d016      	beq.n	8fe <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     8d0:	076b      	lsls	r3, r5, #29
     8d2:	d508      	bpl.n	8e6 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     8d4:	2304      	movs	r3, #4
     8d6:	6822      	ldr	r2, [r4, #0]
     8d8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     8da:	7ee3      	ldrb	r3, [r4, #27]
     8dc:	079b      	lsls	r3, r3, #30
     8de:	d502      	bpl.n	8e6 <ADC_Handler+0x7e>
     8e0:	7ea3      	ldrb	r3, [r4, #26]
     8e2:	079b      	lsls	r3, r3, #30
     8e4:	d417      	bmi.n	916 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     8e6:	07ab      	lsls	r3, r5, #30
     8e8:	d508      	bpl.n	8fc <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     8ea:	2302      	movs	r3, #2
     8ec:	6822      	ldr	r2, [r4, #0]
     8ee:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     8f0:	7ee3      	ldrb	r3, [r4, #27]
     8f2:	075b      	lsls	r3, r3, #29
     8f4:	d502      	bpl.n	8fc <ADC_Handler+0x94>
     8f6:	7ea3      	ldrb	r3, [r4, #26]
     8f8:	075b      	lsls	r3, r3, #29
     8fa:	d410      	bmi.n	91e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     8fc:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     8fe:	2300      	movs	r3, #0
     900:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     902:	7ee3      	ldrb	r3, [r4, #27]
     904:	07db      	lsls	r3, r3, #31
     906:	d5e3      	bpl.n	8d0 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     908:	7ea3      	ldrb	r3, [r4, #26]
     90a:	07db      	lsls	r3, r3, #31
     90c:	d5e0      	bpl.n	8d0 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     90e:	0020      	movs	r0, r4
     910:	68a3      	ldr	r3, [r4, #8]
     912:	4798      	blx	r3
     914:	e7dc      	b.n	8d0 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     916:	0020      	movs	r0, r4
     918:	68e3      	ldr	r3, [r4, #12]
     91a:	4798      	blx	r3
     91c:	e7e3      	b.n	8e6 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     91e:	6923      	ldr	r3, [r4, #16]
     920:	0020      	movs	r0, r4
     922:	4798      	blx	r3
}
     924:	e7ea      	b.n	8fc <ADC_Handler+0x94>
     926:	46c0      	nop			; (mov r8, r8)
     928:	20000fac 	.word	0x20000fac

0000092c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     92c:	2301      	movs	r3, #1
     92e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     930:	2300      	movs	r3, #0
     932:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     934:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     936:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     938:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     93a:	220f      	movs	r2, #15
     93c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     93e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     940:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     942:	7203      	strb	r3, [r0, #8]
}
     944:	4770      	bx	lr

00000946 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     946:	6802      	ldr	r2, [r0, #0]
     948:	6813      	ldr	r3, [r2, #0]
     94a:	2102      	movs	r1, #2
     94c:	430b      	orrs	r3, r1
     94e:	6013      	str	r3, [r2, #0]

}
     950:	4770      	bx	lr

00000952 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     952:	2303      	movs	r3, #3
     954:	6802      	ldr	r2, [r0, #0]
     956:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     958:	6802      	ldr	r2, [r0, #0]
     95a:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     95c:	6802      	ldr	r2, [r0, #0]
     95e:	6813      	ldr	r3, [r2, #0]
     960:	2102      	movs	r1, #2
     962:	438b      	bics	r3, r1
     964:	6013      	str	r3, [r2, #0]
}
     966:	4770      	bx	lr

00000968 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     968:	b570      	push	{r4, r5, r6, lr}
     96a:	0004      	movs	r4, r0
     96c:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     96e:	78d3      	ldrb	r3, [r2, #3]
     970:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     972:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     974:	7853      	ldrb	r3, [r2, #1]
     976:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     978:	7913      	ldrb	r3, [r2, #4]
     97a:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     97c:	7813      	ldrb	r3, [r2, #0]
     97e:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     980:	7891      	ldrb	r1, [r2, #2]
     982:	02c9      	lsls	r1, r1, #11
     984:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     986:	7851      	ldrb	r1, [r2, #1]
     988:	0209      	lsls	r1, r1, #8
     98a:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     98c:	78d1      	ldrb	r1, [r2, #3]
     98e:	0089      	lsls	r1, r1, #2
     990:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     992:	7911      	ldrb	r1, [r2, #4]
     994:	0149      	lsls	r1, r1, #5
     996:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     998:	7991      	ldrb	r1, [r2, #6]
     99a:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     99c:	79d0      	ldrb	r0, [r2, #7]
     99e:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     9a0:	4301      	orrs	r1, r0
     9a2:	7a10      	ldrb	r0, [r2, #8]
     9a4:	0300      	lsls	r0, r0, #12
     9a6:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     9a8:	7952      	ldrb	r2, [r2, #5]
     9aa:	0412      	lsls	r2, r2, #16
     9ac:	20f0      	movs	r0, #240	; 0xf0
     9ae:	0300      	lsls	r0, r0, #12
     9b0:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     9b2:	430a      	orrs	r2, r1
     9b4:	4313      	orrs	r3, r2
     9b6:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     9b8:	682b      	ldr	r3, [r5, #0]
     9ba:	079b      	lsls	r3, r3, #30
     9bc:	d401      	bmi.n	9c2 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     9be:	602e      	str	r6, [r5, #0]
	}
}
     9c0:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     9c2:	0020      	movs	r0, r4
     9c4:	4b03      	ldr	r3, [pc, #12]	; (9d4 <aes_set_config+0x6c>)
     9c6:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     9c8:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     9ca:	0020      	movs	r0, r4
     9cc:	4b02      	ldr	r3, [pc, #8]	; (9d8 <aes_set_config+0x70>)
     9ce:	4798      	blx	r3
     9d0:	e7f6      	b.n	9c0 <aes_set_config+0x58>
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	00000953 	.word	0x00000953
     9d8:	00000947 	.word	0x00000947

000009dc <aes_init>:
{
     9dc:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
     9de:	4c05      	ldr	r4, [pc, #20]	; (9f4 <aes_init+0x18>)
     9e0:	69e5      	ldr	r5, [r4, #28]
     9e2:	2380      	movs	r3, #128	; 0x80
     9e4:	019b      	lsls	r3, r3, #6
     9e6:	432b      	orrs	r3, r5
     9e8:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     9ea:	2301      	movs	r3, #1
     9ec:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     9ee:	4b02      	ldr	r3, [pc, #8]	; (9f8 <aes_init+0x1c>)
     9f0:	4798      	blx	r3
}
     9f2:	bd70      	pop	{r4, r5, r6, pc}
     9f4:	40000400 	.word	0x40000400
     9f8:	00000969 	.word	0x00000969

000009fc <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     9fc:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     9fe:	7943      	ldrb	r3, [r0, #5]
     a00:	2b01      	cmp	r3, #1
     a02:	d005      	beq.n	a10 <aes_write_key+0x14>
     a04:	2b00      	cmp	r3, #0
     a06:	d010      	beq.n	a2a <aes_write_key+0x2e>
     a08:	2b02      	cmp	r3, #2
     a0a:	d10d      	bne.n	a28 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     a0c:	2508      	movs	r5, #8
     a0e:	e000      	b.n	a12 <aes_write_key+0x16>
		key_length = 6;
     a10:	2506      	movs	r5, #6
{
     a12:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     a14:	c910      	ldmia	r1!, {r4}
     a16:	1c9a      	adds	r2, r3, #2
     a18:	0092      	lsls	r2, r2, #2
     a1a:	6806      	ldr	r6, [r0, #0]
     a1c:	46b4      	mov	ip, r6
     a1e:	4462      	add	r2, ip
     a20:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     a22:	3301      	adds	r3, #1
     a24:	42ab      	cmp	r3, r5
     a26:	d3f5      	bcc.n	a14 <aes_write_key+0x18>
		key++;
	}
}
     a28:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     a2a:	2504      	movs	r5, #4
     a2c:	e7f1      	b.n	a12 <aes_write_key+0x16>
	...

00000a30 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     a30:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     a32:	2300      	movs	r3, #0
     a34:	6802      	ldr	r2, [r0, #0]
     a36:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     a38:	4b0f      	ldr	r3, [pc, #60]	; (a78 <aes_write_input_data+0x48>)
     a3a:	6842      	ldr	r2, [r0, #4]
     a3c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     a3e:	4a0f      	ldr	r2, [pc, #60]	; (a7c <aes_write_input_data+0x4c>)
     a40:	4293      	cmp	r3, r2
     a42:	d00a      	beq.n	a5a <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     a44:	7903      	ldrb	r3, [r0, #4]
     a46:	2b03      	cmp	r3, #3
     a48:	d00e      	beq.n	a68 <aes_write_input_data+0x38>
     a4a:	000c      	movs	r4, r1
     a4c:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     a4e:	6803      	ldr	r3, [r0, #0]
     a50:	c904      	ldmia	r1!, {r2}
     a52:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     a54:	428c      	cmp	r4, r1
     a56:	d1fa      	bne.n	a4e <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     a58:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     a5a:	6803      	ldr	r3, [r0, #0]
     a5c:	680a      	ldr	r2, [r1, #0]
     a5e:	639a      	str	r2, [r3, #56]	; 0x38
     a60:	6803      	ldr	r3, [r0, #0]
     a62:	684a      	ldr	r2, [r1, #4]
     a64:	639a      	str	r2, [r3, #56]	; 0x38
     a66:	e7f7      	b.n	a58 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     a68:	7983      	ldrb	r3, [r0, #6]
     a6a:	3b02      	subs	r3, #2
     a6c:	2b01      	cmp	r3, #1
     a6e:	d8ec      	bhi.n	a4a <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     a70:	6803      	ldr	r3, [r0, #0]
     a72:	680a      	ldr	r2, [r1, #0]
     a74:	639a      	str	r2, [r3, #56]	; 0x38
     a76:	e7ef      	b.n	a58 <aes_write_input_data+0x28>
     a78:	00ff00ff 	.word	0x00ff00ff
     a7c:	00010003 	.word	0x00010003

00000a80 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     a80:	2300      	movs	r3, #0
     a82:	6802      	ldr	r2, [r0, #0]
     a84:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     a86:	4b10      	ldr	r3, [pc, #64]	; (ac8 <aes_read_output_data+0x48>)
     a88:	6842      	ldr	r2, [r0, #4]
     a8a:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     a8c:	4a0f      	ldr	r2, [pc, #60]	; (acc <aes_read_output_data+0x4c>)
     a8e:	4293      	cmp	r3, r2
     a90:	d00a      	beq.n	aa8 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     a92:	7903      	ldrb	r3, [r0, #4]
     a94:	2b03      	cmp	r3, #3
     a96:	d00e      	beq.n	ab6 <aes_read_output_data+0x36>
     a98:	000a      	movs	r2, r1
     a9a:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     a9c:	6803      	ldr	r3, [r0, #0]
     a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     aa0:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     aa2:	428a      	cmp	r2, r1
     aa4:	d1fa      	bne.n	a9c <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     aa6:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     aa8:	6803      	ldr	r3, [r0, #0]
     aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     aac:	600b      	str	r3, [r1, #0]
     aae:	6803      	ldr	r3, [r0, #0]
     ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     ab2:	604b      	str	r3, [r1, #4]
     ab4:	e7f7      	b.n	aa6 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     ab6:	7983      	ldrb	r3, [r0, #6]
     ab8:	3b02      	subs	r3, #2
     aba:	2b01      	cmp	r3, #1
     abc:	d8ec      	bhi.n	a98 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     abe:	6803      	ldr	r3, [r0, #0]
     ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     ac2:	600b      	str	r3, [r1, #0]
     ac4:	e7ef      	b.n	aa6 <aes_read_output_data+0x26>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00ff00ff 	.word	0x00ff00ff
     acc:	00010003 	.word	0x00010003

00000ad0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ad0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     ad2:	2a00      	cmp	r2, #0
     ad4:	d001      	beq.n	ada <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     ad6:	0018      	movs	r0, r3
     ad8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     ada:	008b      	lsls	r3, r1, #2
     adc:	4a06      	ldr	r2, [pc, #24]	; (af8 <extint_register_callback+0x28>)
     ade:	589b      	ldr	r3, [r3, r2]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d003      	beq.n	aec <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     ae4:	4283      	cmp	r3, r0
     ae6:	d005      	beq.n	af4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     ae8:	231d      	movs	r3, #29
     aea:	e7f4      	b.n	ad6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     aec:	0089      	lsls	r1, r1, #2
     aee:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     af0:	2300      	movs	r3, #0
     af2:	e7f0      	b.n	ad6 <extint_register_callback+0x6>
		return STATUS_OK;
     af4:	2300      	movs	r3, #0
     af6:	e7ee      	b.n	ad6 <extint_register_callback+0x6>
     af8:	20000fb4 	.word	0x20000fb4

00000afc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     afc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     afe:	2900      	cmp	r1, #0
     b00:	d001      	beq.n	b06 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     b02:	0018      	movs	r0, r3
     b04:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b06:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     b08:	281f      	cmp	r0, #31
     b0a:	d800      	bhi.n	b0e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     b0c:	4a02      	ldr	r2, [pc, #8]	; (b18 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     b0e:	2301      	movs	r3, #1
     b10:	4083      	lsls	r3, r0
     b12:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     b14:	2300      	movs	r3, #0
     b16:	e7f4      	b.n	b02 <extint_chan_enable_callback+0x6>
     b18:	40002400 	.word	0x40002400

00000b1c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b1c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b1e:	2200      	movs	r2, #0
     b20:	4b10      	ldr	r3, [pc, #64]	; (b64 <EIC_Handler+0x48>)
     b22:	701a      	strb	r2, [r3, #0]
     b24:	2300      	movs	r3, #0
     b26:	4910      	ldr	r1, [pc, #64]	; (b68 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b28:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b2a:	4e10      	ldr	r6, [pc, #64]	; (b6c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b2c:	4c0d      	ldr	r4, [pc, #52]	; (b64 <EIC_Handler+0x48>)
     b2e:	e00a      	b.n	b46 <EIC_Handler+0x2a>
		return eics[eic_index];
     b30:	490d      	ldr	r1, [pc, #52]	; (b68 <EIC_Handler+0x4c>)
     b32:	e008      	b.n	b46 <EIC_Handler+0x2a>
     b34:	7823      	ldrb	r3, [r4, #0]
     b36:	3301      	adds	r3, #1
     b38:	b2db      	uxtb	r3, r3
     b3a:	7023      	strb	r3, [r4, #0]
     b3c:	2b0f      	cmp	r3, #15
     b3e:	d810      	bhi.n	b62 <EIC_Handler+0x46>
		return NULL;
     b40:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     b42:	2b1f      	cmp	r3, #31
     b44:	d9f4      	bls.n	b30 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     b46:	0028      	movs	r0, r5
     b48:	4018      	ands	r0, r3
     b4a:	2201      	movs	r2, #1
     b4c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     b4e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     b50:	4210      	tst	r0, r2
     b52:	d0ef      	beq.n	b34 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     b54:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b56:	009b      	lsls	r3, r3, #2
     b58:	599b      	ldr	r3, [r3, r6]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d0ea      	beq.n	b34 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     b5e:	4798      	blx	r3
     b60:	e7e8      	b.n	b34 <EIC_Handler+0x18>
			}
		}
	}
}
     b62:	bd70      	pop	{r4, r5, r6, pc}
     b64:	20000fb0 	.word	0x20000fb0
     b68:	40002400 	.word	0x40002400
     b6c:	20000fb4 	.word	0x20000fb4

00000b70 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     b70:	4a06      	ldr	r2, [pc, #24]	; (b8c <_extint_enable+0x1c>)
     b72:	7813      	ldrb	r3, [r2, #0]
     b74:	2102      	movs	r1, #2
     b76:	430b      	orrs	r3, r1
     b78:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     b7a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     b7c:	6853      	ldr	r3, [r2, #4]
     b7e:	4219      	tst	r1, r3
     b80:	d1fc      	bne.n	b7c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     b82:	6853      	ldr	r3, [r2, #4]
     b84:	4218      	tst	r0, r3
     b86:	d1f9      	bne.n	b7c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     b88:	4770      	bx	lr
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	40002400 	.word	0x40002400

00000b90 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     b90:	4a06      	ldr	r2, [pc, #24]	; (bac <_extint_disable+0x1c>)
     b92:	7813      	ldrb	r3, [r2, #0]
     b94:	2102      	movs	r1, #2
     b96:	438b      	bics	r3, r1
     b98:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     b9a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     b9c:	6853      	ldr	r3, [r2, #4]
     b9e:	4219      	tst	r1, r3
     ba0:	d1fc      	bne.n	b9c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     ba2:	6853      	ldr	r3, [r2, #4]
     ba4:	4218      	tst	r0, r3
     ba6:	d1f9      	bne.n	b9c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     ba8:	4770      	bx	lr
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	40002400 	.word	0x40002400

00000bb0 <_system_extint_init>:
{
     bb0:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     bb2:	4a12      	ldr	r2, [pc, #72]	; (bfc <_system_extint_init+0x4c>)
     bb4:	6951      	ldr	r1, [r2, #20]
     bb6:	2380      	movs	r3, #128	; 0x80
     bb8:	009b      	lsls	r3, r3, #2
     bba:	430b      	orrs	r3, r1
     bbc:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     bbe:	4a10      	ldr	r2, [pc, #64]	; (c00 <_system_extint_init+0x50>)
     bc0:	7813      	ldrb	r3, [r2, #0]
     bc2:	2101      	movs	r1, #1
     bc4:	430b      	orrs	r3, r1
     bc6:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     bc8:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     bca:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     bcc:	6853      	ldr	r3, [r2, #4]
     bce:	4219      	tst	r1, r3
     bd0:	d1fc      	bne.n	bcc <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     bd2:	6853      	ldr	r3, [r2, #4]
     bd4:	4218      	tst	r0, r3
     bd6:	d1f9      	bne.n	bcc <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     bd8:	4a09      	ldr	r2, [pc, #36]	; (c00 <_system_extint_init+0x50>)
     bda:	7813      	ldrb	r3, [r2, #0]
     bdc:	2110      	movs	r1, #16
     bde:	430b      	orrs	r3, r1
     be0:	7013      	strb	r3, [r2, #0]
     be2:	4b08      	ldr	r3, [pc, #32]	; (c04 <_system_extint_init+0x54>)
     be4:	0019      	movs	r1, r3
     be6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     be8:	2200      	movs	r2, #0
     bea:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     bec:	428b      	cmp	r3, r1
     bee:	d1fc      	bne.n	bea <_system_extint_init+0x3a>
     bf0:	2208      	movs	r2, #8
     bf2:	4b05      	ldr	r3, [pc, #20]	; (c08 <_system_extint_init+0x58>)
     bf4:	601a      	str	r2, [r3, #0]
	_extint_enable();
     bf6:	4b05      	ldr	r3, [pc, #20]	; (c0c <_system_extint_init+0x5c>)
     bf8:	4798      	blx	r3
}
     bfa:	bd10      	pop	{r4, pc}
     bfc:	40000400 	.word	0x40000400
     c00:	40002400 	.word	0x40002400
     c04:	20000fb4 	.word	0x20000fb4
     c08:	e000e100 	.word	0xe000e100
     c0c:	00000b71 	.word	0x00000b71

00000c10 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     c10:	2300      	movs	r3, #0
     c12:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     c14:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     c16:	2201      	movs	r2, #1
     c18:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     c1a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     c1c:	3201      	adds	r2, #1
     c1e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     c20:	7243      	strb	r3, [r0, #9]
}
     c22:	4770      	bx	lr

00000c24 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     c24:	b5f0      	push	{r4, r5, r6, r7, lr}
     c26:	b083      	sub	sp, #12
     c28:	0005      	movs	r5, r0
     c2a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     c2c:	4b1c      	ldr	r3, [pc, #112]	; (ca0 <extint_chan_set_config+0x7c>)
     c2e:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c30:	a901      	add	r1, sp, #4
     c32:	2300      	movs	r3, #0
     c34:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c36:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c38:	7923      	ldrb	r3, [r4, #4]
     c3a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c3c:	7a23      	ldrb	r3, [r4, #8]
     c3e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     c40:	7820      	ldrb	r0, [r4, #0]
     c42:	4b18      	ldr	r3, [pc, #96]	; (ca4 <extint_chan_set_config+0x80>)
     c44:	4798      	blx	r3
		return NULL;
     c46:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     c48:	2d1f      	cmp	r5, #31
     c4a:	d800      	bhi.n	c4e <extint_chan_set_config+0x2a>
		return eics[eic_index];
     c4c:	4916      	ldr	r1, [pc, #88]	; (ca8 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     c4e:	2207      	movs	r2, #7
     c50:	402a      	ands	r2, r5
     c52:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     c54:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     c56:	7aa3      	ldrb	r3, [r4, #10]
     c58:	2b00      	cmp	r3, #0
     c5a:	d001      	beq.n	c60 <extint_chan_set_config+0x3c>
     c5c:	2308      	movs	r3, #8
     c5e:	431f      	orrs	r7, r3
     c60:	08eb      	lsrs	r3, r5, #3
     c62:	009b      	lsls	r3, r3, #2
     c64:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     c66:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c68:	260f      	movs	r6, #15
     c6a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     c6c:	43b0      	bics	r0, r6
			(new_config << config_pos);
     c6e:	4097      	lsls	r7, r2
     c70:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     c72:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     c74:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     c76:	7a63      	ldrb	r3, [r4, #9]
     c78:	2b00      	cmp	r3, #0
     c7a:	d10b      	bne.n	c94 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     c7c:	698a      	ldr	r2, [r1, #24]
     c7e:	2301      	movs	r3, #1
     c80:	40ab      	lsls	r3, r5
     c82:	43db      	mvns	r3, r3
     c84:	041b      	lsls	r3, r3, #16
     c86:	0c1b      	lsrs	r3, r3, #16
     c88:	4013      	ands	r3, r2
     c8a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     c8c:	4b07      	ldr	r3, [pc, #28]	; (cac <extint_chan_set_config+0x88>)
     c8e:	4798      	blx	r3
}
     c90:	b003      	add	sp, #12
     c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     c94:	698a      	ldr	r2, [r1, #24]
     c96:	2301      	movs	r3, #1
     c98:	40ab      	lsls	r3, r5
     c9a:	4313      	orrs	r3, r2
     c9c:	618b      	str	r3, [r1, #24]
     c9e:	e7f5      	b.n	c8c <extint_chan_set_config+0x68>
     ca0:	00000b91 	.word	0x00000b91
     ca4:	00003399 	.word	0x00003399
     ca8:	40002400 	.word	0x40002400
     cac:	00000b71 	.word	0x00000b71

00000cb0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     cb0:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
     cb2:	4a1e      	ldr	r2, [pc, #120]	; (d2c <nvm_set_config+0x7c>)
     cb4:	6993      	ldr	r3, [r2, #24]
     cb6:	2104      	movs	r1, #4
     cb8:	430b      	orrs	r3, r1
     cba:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     cbc:	4b1c      	ldr	r3, [pc, #112]	; (d30 <nvm_set_config+0x80>)
     cbe:	2220      	movs	r2, #32
     cc0:	32ff      	adds	r2, #255	; 0xff
     cc2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     cc4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     cc6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     cc8:	07d2      	lsls	r2, r2, #31
     cca:	d401      	bmi.n	cd0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     ccc:	0018      	movs	r0, r3
     cce:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     cd0:	7803      	ldrb	r3, [r0, #0]
     cd2:	021b      	lsls	r3, r3, #8
     cd4:	22c0      	movs	r2, #192	; 0xc0
     cd6:	0092      	lsls	r2, r2, #2
     cd8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     cda:	7841      	ldrb	r1, [r0, #1]
     cdc:	01c9      	lsls	r1, r1, #7
     cde:	22ff      	movs	r2, #255	; 0xff
     ce0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     ce2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     ce4:	7881      	ldrb	r1, [r0, #2]
     ce6:	0049      	lsls	r1, r1, #1
     ce8:	221e      	movs	r2, #30
     cea:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     cec:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     cee:	78c2      	ldrb	r2, [r0, #3]
     cf0:	0492      	lsls	r2, r2, #18
     cf2:	2180      	movs	r1, #128	; 0x80
     cf4:	02c9      	lsls	r1, r1, #11
     cf6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     cf8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     cfa:	7902      	ldrb	r2, [r0, #4]
     cfc:	0412      	lsls	r2, r2, #16
     cfe:	21c0      	movs	r1, #192	; 0xc0
     d00:	0289      	lsls	r1, r1, #10
     d02:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     d04:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     d06:	4a0a      	ldr	r2, [pc, #40]	; (d30 <nvm_set_config+0x80>)
     d08:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     d0a:	6893      	ldr	r3, [r2, #8]
     d0c:	035b      	lsls	r3, r3, #13
     d0e:	0f5b      	lsrs	r3, r3, #29
     d10:	4908      	ldr	r1, [pc, #32]	; (d34 <nvm_set_config+0x84>)
     d12:	2408      	movs	r4, #8
     d14:	409c      	lsls	r4, r3
     d16:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     d18:	6893      	ldr	r3, [r2, #8]
     d1a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     d1c:	7843      	ldrb	r3, [r0, #1]
     d1e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     d20:	8b13      	ldrh	r3, [r2, #24]
     d22:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     d24:	0fdb      	lsrs	r3, r3, #31
     d26:	011b      	lsls	r3, r3, #4
     d28:	e7d0      	b.n	ccc <nvm_set_config+0x1c>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	40000400 	.word	0x40000400
     d30:	41004000 	.word	0x41004000
     d34:	20000a0c 	.word	0x20000a0c

00000d38 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     d38:	b530      	push	{r4, r5, lr}
     d3a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     d3c:	4a25      	ldr	r2, [pc, #148]	; (dd4 <nvm_execute_command+0x9c>)
     d3e:	8810      	ldrh	r0, [r2, #0]
     d40:	8853      	ldrh	r3, [r2, #2]
     d42:	4343      	muls	r3, r0
     d44:	428b      	cmp	r3, r1
     d46:	d20b      	bcs.n	d60 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     d48:	2280      	movs	r2, #128	; 0x80
     d4a:	0192      	lsls	r2, r2, #6
     d4c:	4b22      	ldr	r3, [pc, #136]	; (dd8 <nvm_execute_command+0xa0>)
     d4e:	18cb      	adds	r3, r1, r3
     d50:	4293      	cmp	r3, r2
     d52:	d905      	bls.n	d60 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     d54:	4a21      	ldr	r2, [pc, #132]	; (ddc <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     d56:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     d58:	4b21      	ldr	r3, [pc, #132]	; (de0 <nvm_execute_command+0xa8>)
     d5a:	18cb      	adds	r3, r1, r3
     d5c:	4293      	cmp	r3, r2
     d5e:	d80e      	bhi.n	d7e <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     d60:	4b20      	ldr	r3, [pc, #128]	; (de4 <nvm_execute_command+0xac>)
     d62:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     d64:	2280      	movs	r2, #128	; 0x80
     d66:	02d2      	lsls	r2, r2, #11
     d68:	432a      	orrs	r2, r5
     d6a:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     d6c:	2220      	movs	r2, #32
     d6e:	32ff      	adds	r2, #255	; 0xff
     d70:	831a      	strh	r2, [r3, #24]
     d72:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     d74:	07db      	lsls	r3, r3, #31
     d76:	d403      	bmi.n	d80 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     d78:	4b1a      	ldr	r3, [pc, #104]	; (de4 <nvm_execute_command+0xac>)
     d7a:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     d7c:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     d7e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     d80:	2c45      	cmp	r4, #69	; 0x45
     d82:	d822      	bhi.n	dca <nvm_execute_command+0x92>
     d84:	00a3      	lsls	r3, r4, #2
     d86:	4a18      	ldr	r2, [pc, #96]	; (de8 <nvm_execute_command+0xb0>)
     d88:	58d3      	ldr	r3, [r2, r3]
     d8a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     d8c:	4b15      	ldr	r3, [pc, #84]	; (de4 <nvm_execute_command+0xac>)
     d8e:	8b1b      	ldrh	r3, [r3, #24]
     d90:	05db      	lsls	r3, r3, #23
     d92:	d503      	bpl.n	d9c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
     d94:	4b13      	ldr	r3, [pc, #76]	; (de4 <nvm_execute_command+0xac>)
     d96:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     d98:	2010      	movs	r0, #16
     d9a:	e7f0      	b.n	d7e <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     d9c:	0889      	lsrs	r1, r1, #2
     d9e:	0049      	lsls	r1, r1, #1
     da0:	4b10      	ldr	r3, [pc, #64]	; (de4 <nvm_execute_command+0xac>)
     da2:	61d9      	str	r1, [r3, #28]
			break;
     da4:	e003      	b.n	dae <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     da6:	0889      	lsrs	r1, r1, #2
     da8:	0049      	lsls	r1, r1, #1
     daa:	4b0e      	ldr	r3, [pc, #56]	; (de4 <nvm_execute_command+0xac>)
     dac:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     dae:	20a5      	movs	r0, #165	; 0xa5
     db0:	0200      	lsls	r0, r0, #8
     db2:	4304      	orrs	r4, r0
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <nvm_execute_command+0xac>)
     db6:	801c      	strh	r4, [r3, #0]
     db8:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     dba:	2201      	movs	r2, #1
     dbc:	7d0b      	ldrb	r3, [r1, #20]
     dbe:	4213      	tst	r3, r2
     dc0:	d0fc      	beq.n	dbc <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
     dc2:	4b08      	ldr	r3, [pc, #32]	; (de4 <nvm_execute_command+0xac>)
     dc4:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     dc6:	2000      	movs	r0, #0
     dc8:	e7d9      	b.n	d7e <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
     dca:	4b06      	ldr	r3, [pc, #24]	; (de4 <nvm_execute_command+0xac>)
     dcc:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     dce:	2017      	movs	r0, #23
     dd0:	e7d5      	b.n	d7e <nvm_execute_command+0x46>
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20000a0c 	.word	0x20000a0c
     dd8:	ff7fc000 	.word	0xff7fc000
     ddc:	00001fff 	.word	0x00001fff
     de0:	ffc00000 	.word	0xffc00000
     de4:	41004000 	.word	0x41004000
     de8:	0001a310 	.word	0x0001a310

00000dec <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     dee:	4b2f      	ldr	r3, [pc, #188]	; (eac <nvm_write_buffer+0xc0>)
     df0:	881c      	ldrh	r4, [r3, #0]
     df2:	885b      	ldrh	r3, [r3, #2]
     df4:	4363      	muls	r3, r4
	if (destination_address >
     df6:	4283      	cmp	r3, r0
     df8:	d207      	bcs.n	e0a <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     dfa:	4e2d      	ldr	r6, [pc, #180]	; (eb0 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     dfc:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     dfe:	4b2d      	ldr	r3, [pc, #180]	; (eb4 <nvm_write_buffer+0xc8>)
     e00:	18c3      	adds	r3, r0, r3
     e02:	42b3      	cmp	r3, r6
     e04:	d806      	bhi.n	e14 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
     e06:	2601      	movs	r6, #1
     e08:	e000      	b.n	e0c <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
     e0a:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     e0c:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     e0e:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
     e10:	4218      	tst	r0, r3
     e12:	d001      	beq.n	e18 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     e14:	0028      	movs	r0, r5
     e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     e18:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     e1a:	4294      	cmp	r4, r2
     e1c:	d3fa      	bcc.n	e14 <nvm_write_buffer+0x28>
     e1e:	4b26      	ldr	r3, [pc, #152]	; (eb8 <nvm_write_buffer+0xcc>)
     e20:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     e22:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     e24:	07db      	lsls	r3, r3, #31
     e26:	d5f5      	bpl.n	e14 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     e28:	4c24      	ldr	r4, [pc, #144]	; (ebc <nvm_write_buffer+0xd0>)
     e2a:	4b23      	ldr	r3, [pc, #140]	; (eb8 <nvm_write_buffer+0xcc>)
     e2c:	801c      	strh	r4, [r3, #0]
     e2e:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     e30:	2401      	movs	r4, #1
     e32:	7d2b      	ldrb	r3, [r5, #20]
     e34:	4223      	tst	r3, r4
     e36:	d0fc      	beq.n	e32 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     e38:	2420      	movs	r4, #32
     e3a:	34ff      	adds	r4, #255	; 0xff
     e3c:	4b1e      	ldr	r3, [pc, #120]	; (eb8 <nvm_write_buffer+0xcc>)
     e3e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     e40:	2a00      	cmp	r2, #0
     e42:	d02c      	beq.n	e9e <nvm_write_buffer+0xb2>
     e44:	2301      	movs	r3, #1
     e46:	0005      	movs	r5, r0
     e48:	439d      	bics	r5, r3
     e4a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     e4c:	1e54      	subs	r4, r2, #1
     e4e:	46a4      	mov	ip, r4
     e50:	e009      	b.n	e66 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
     e52:	18cf      	adds	r7, r1, r3
     e54:	787f      	ldrb	r7, [r7, #1]
     e56:	023f      	lsls	r7, r7, #8
     e58:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
     e5a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     e5c:	3302      	adds	r3, #2
     e5e:	b29b      	uxth	r3, r3
     e60:	3502      	adds	r5, #2
     e62:	429a      	cmp	r2, r3
     e64:	d904      	bls.n	e70 <nvm_write_buffer+0x84>
		data = buffer[i];
     e66:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     e68:	4563      	cmp	r3, ip
     e6a:	dbf2      	blt.n	e52 <nvm_write_buffer+0x66>
		data = buffer[i];
     e6c:	b2a4      	uxth	r4, r4
     e6e:	e7f4      	b.n	e5a <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     e70:	4b0e      	ldr	r3, [pc, #56]	; (eac <nvm_write_buffer+0xc0>)
     e72:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     e74:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     e76:	2b00      	cmp	r3, #0
     e78:	d1cc      	bne.n	e14 <nvm_write_buffer+0x28>
     e7a:	2a3f      	cmp	r2, #63	; 0x3f
     e7c:	d8ca      	bhi.n	e14 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
     e7e:	2e00      	cmp	r6, #0
     e80:	d106      	bne.n	e90 <nvm_write_buffer+0xa4>
     e82:	2200      	movs	r2, #0
     e84:	0001      	movs	r1, r0
     e86:	2004      	movs	r0, #4
     e88:	4b0d      	ldr	r3, [pc, #52]	; (ec0 <nvm_write_buffer+0xd4>)
     e8a:	4798      	blx	r3
     e8c:	0005      	movs	r5, r0
     e8e:	e7c1      	b.n	e14 <nvm_write_buffer+0x28>
     e90:	2200      	movs	r2, #0
     e92:	0001      	movs	r1, r0
     e94:	201c      	movs	r0, #28
     e96:	4b0a      	ldr	r3, [pc, #40]	; (ec0 <nvm_write_buffer+0xd4>)
     e98:	4798      	blx	r3
     e9a:	0005      	movs	r5, r0
     e9c:	e7ba      	b.n	e14 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     e9e:	4b03      	ldr	r3, [pc, #12]	; (eac <nvm_write_buffer+0xc0>)
     ea0:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     ea2:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     ea4:	2b00      	cmp	r3, #0
     ea6:	d0ea      	beq.n	e7e <nvm_write_buffer+0x92>
     ea8:	e7b4      	b.n	e14 <nvm_write_buffer+0x28>
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	20000a0c 	.word	0x20000a0c
     eb0:	00001fff 	.word	0x00001fff
     eb4:	ffc00000 	.word	0xffc00000
     eb8:	41004000 	.word	0x41004000
     ebc:	ffffa544 	.word	0xffffa544
     ec0:	00000d39 	.word	0x00000d39

00000ec4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     ec6:	4b1b      	ldr	r3, [pc, #108]	; (f34 <nvm_read_buffer+0x70>)
     ec8:	881c      	ldrh	r4, [r3, #0]
     eca:	885b      	ldrh	r3, [r3, #2]
     ecc:	4363      	muls	r3, r4
	if (source_address >
     ece:	4283      	cmp	r3, r0
     ed0:	d205      	bcs.n	ede <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     ed2:	4e19      	ldr	r6, [pc, #100]	; (f38 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     ed4:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     ed6:	4b19      	ldr	r3, [pc, #100]	; (f3c <nvm_read_buffer+0x78>)
     ed8:	18c3      	adds	r3, r0, r3
     eda:	42b3      	cmp	r3, r6
     edc:	d803      	bhi.n	ee6 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
     ede:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     ee0:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
     ee2:	4218      	tst	r0, r3
     ee4:	d001      	beq.n	eea <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     ee6:	0028      	movs	r0, r5
     ee8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
     eea:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     eec:	4294      	cmp	r4, r2
     eee:	d3fa      	bcc.n	ee6 <nvm_read_buffer+0x22>
     ef0:	4b13      	ldr	r3, [pc, #76]	; (f40 <nvm_read_buffer+0x7c>)
     ef2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     ef4:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     ef6:	07db      	lsls	r3, r3, #31
     ef8:	d5f5      	bpl.n	ee6 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     efa:	2420      	movs	r4, #32
     efc:	34ff      	adds	r4, #255	; 0xff
     efe:	4b10      	ldr	r3, [pc, #64]	; (f40 <nvm_read_buffer+0x7c>)
     f00:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     f02:	2a00      	cmp	r2, #0
     f04:	d014      	beq.n	f30 <nvm_read_buffer+0x6c>
     f06:	2301      	movs	r3, #1
     f08:	4398      	bics	r0, r3
     f0a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     f0c:	1e56      	subs	r6, r2, #1
     f0e:	e004      	b.n	f1a <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
     f10:	3302      	adds	r3, #2
     f12:	b29b      	uxth	r3, r3
     f14:	3002      	adds	r0, #2
     f16:	429a      	cmp	r2, r3
     f18:	d908      	bls.n	f2c <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
     f1a:	8804      	ldrh	r4, [r0, #0]
     f1c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     f1e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     f20:	42b3      	cmp	r3, r6
     f22:	daf5      	bge.n	f10 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
     f24:	18cd      	adds	r5, r1, r3
     f26:	0a24      	lsrs	r4, r4, #8
     f28:	706c      	strb	r4, [r5, #1]
     f2a:	e7f1      	b.n	f10 <nvm_read_buffer+0x4c>
	return STATUS_OK;
     f2c:	2500      	movs	r5, #0
     f2e:	e7da      	b.n	ee6 <nvm_read_buffer+0x22>
     f30:	2500      	movs	r5, #0
     f32:	e7d8      	b.n	ee6 <nvm_read_buffer+0x22>
     f34:	20000a0c 	.word	0x20000a0c
     f38:	00001fff 	.word	0x00001fff
     f3c:	ffc00000 	.word	0xffc00000
     f40:	41004000 	.word	0x41004000

00000f44 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     f44:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     f46:	4a1b      	ldr	r2, [pc, #108]	; (fb4 <nvm_erase_row+0x70>)
     f48:	8813      	ldrh	r3, [r2, #0]
     f4a:	8852      	ldrh	r2, [r2, #2]
     f4c:	435a      	muls	r2, r3
	if (row_address >
     f4e:	4282      	cmp	r2, r0
     f50:	d207      	bcs.n	f62 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     f52:	4c19      	ldr	r4, [pc, #100]	; (fb8 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     f54:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     f56:	4919      	ldr	r1, [pc, #100]	; (fbc <nvm_erase_row+0x78>)
     f58:	1841      	adds	r1, r0, r1
     f5a:	42a1      	cmp	r1, r4
     f5c:	d807      	bhi.n	f6e <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
     f5e:	2101      	movs	r1, #1
     f60:	e000      	b.n	f64 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
     f62:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     f64:	009b      	lsls	r3, r3, #2
     f66:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     f68:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     f6a:	4218      	tst	r0, r3
     f6c:	d001      	beq.n	f72 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     f6e:	0010      	movs	r0, r2
     f70:	bd10      	pop	{r4, pc}
     f72:	4b13      	ldr	r3, [pc, #76]	; (fc0 <nvm_erase_row+0x7c>)
     f74:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     f76:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
     f78:	07db      	lsls	r3, r3, #31
     f7a:	d5f8      	bpl.n	f6e <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     f7c:	4b10      	ldr	r3, [pc, #64]	; (fc0 <nvm_erase_row+0x7c>)
     f7e:	2220      	movs	r2, #32
     f80:	32ff      	adds	r2, #255	; 0xff
     f82:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     f84:	0880      	lsrs	r0, r0, #2
     f86:	0040      	lsls	r0, r0, #1
     f88:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     f8a:	2900      	cmp	r1, #0
     f8c:	d10f      	bne.n	fae <nvm_erase_row+0x6a>
     f8e:	4a0d      	ldr	r2, [pc, #52]	; (fc4 <nvm_erase_row+0x80>)
     f90:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <nvm_erase_row+0x7c>)
     f92:	801a      	strh	r2, [r3, #0]
     f94:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     f96:	2201      	movs	r2, #1
     f98:	7d0b      	ldrb	r3, [r1, #20]
     f9a:	4213      	tst	r3, r2
     f9c:	d0fc      	beq.n	f98 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <nvm_erase_row+0x7c>)
     fa0:	8b1a      	ldrh	r2, [r3, #24]
     fa2:	201c      	movs	r0, #28
     fa4:	4002      	ands	r2, r0
	return STATUS_OK;
     fa6:	1e50      	subs	r0, r2, #1
     fa8:	4182      	sbcs	r2, r0
     faa:	0092      	lsls	r2, r2, #2
     fac:	e7df      	b.n	f6e <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     fae:	4a06      	ldr	r2, [pc, #24]	; (fc8 <nvm_erase_row+0x84>)
     fb0:	e7ee      	b.n	f90 <nvm_erase_row+0x4c>
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	20000a0c 	.word	0x20000a0c
     fb8:	00001fff 	.word	0x00001fff
     fbc:	ffc00000 	.word	0xffc00000
     fc0:	41004000 	.word	0x41004000
     fc4:	0000a502 	.word	0x0000a502
     fc8:	0000a51a 	.word	0x0000a51a

00000fcc <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     fcc:	4b15      	ldr	r3, [pc, #84]	; (1024 <nvm_get_parameters+0x58>)
     fce:	2220      	movs	r2, #32
     fd0:	32ff      	adds	r2, #255	; 0xff
     fd2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     fd4:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     fd6:	0359      	lsls	r1, r3, #13
     fd8:	0f49      	lsrs	r1, r1, #29
     fda:	3a18      	subs	r2, #24
     fdc:	3aff      	subs	r2, #255	; 0xff
     fde:	408a      	lsls	r2, r1
	parameters->page_size =
     fe0:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     fe2:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
     fe4:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
     fe6:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     fe8:	4b0f      	ldr	r3, [pc, #60]	; (1028 <nvm_get_parameters+0x5c>)
     fea:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
     fec:	065b      	lsls	r3, r3, #25
     fee:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     ff0:	2b07      	cmp	r3, #7
     ff2:	d010      	beq.n	1016 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     ff4:	2206      	movs	r2, #6
     ff6:	1ad2      	subs	r2, r2, r3
     ff8:	2304      	movs	r3, #4
     ffa:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
     ffc:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     ffe:	4b0a      	ldr	r3, [pc, #40]	; (1028 <nvm_get_parameters+0x5c>)
    1000:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    1002:	2207      	movs	r2, #7
    1004:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    1006:	2b07      	cmp	r3, #7
    1008:	d008      	beq.n	101c <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    100a:	2207      	movs	r2, #7
    100c:	1ad2      	subs	r2, r2, r3
    100e:	2304      	movs	r3, #4
    1010:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    1012:	6083      	str	r3, [r0, #8]
	}
}
    1014:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    1016:	2300      	movs	r3, #0
    1018:	6043      	str	r3, [r0, #4]
    101a:	e7f0      	b.n	ffe <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    101c:	2300      	movs	r3, #0
    101e:	6083      	str	r3, [r0, #8]
    1020:	e7f8      	b.n	1014 <nvm_get_parameters+0x48>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	41004000 	.word	0x41004000
    1028:	00804000 	.word	0x00804000

0000102c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    102c:	b500      	push	{lr}
    102e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1030:	ab01      	add	r3, sp, #4
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1036:	780a      	ldrb	r2, [r1, #0]
    1038:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    103a:	784a      	ldrb	r2, [r1, #1]
    103c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    103e:	788a      	ldrb	r2, [r1, #2]
    1040:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1042:	0019      	movs	r1, r3
    1044:	4b01      	ldr	r3, [pc, #4]	; (104c <port_pin_set_config+0x20>)
    1046:	4798      	blx	r3
}
    1048:	b003      	add	sp, #12
    104a:	bd00      	pop	{pc}
    104c:	00003399 	.word	0x00003399

00001050 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1050:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    1052:	6918      	ldr	r0, [r3, #16]
    1054:	1e43      	subs	r3, r0, #1
    1056:	4198      	sbcs	r0, r3
    1058:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    105a:	4770      	bx	lr

0000105c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    105c:	b570      	push	{r4, r5, r6, lr}
    105e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1060:	6806      	ldr	r6, [r0, #0]
    1062:	2204      	movs	r2, #4
    1064:	4b08      	ldr	r3, [pc, #32]	; (1088 <rtc_count_enable+0x2c>)
    1066:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    1068:	4d08      	ldr	r5, [pc, #32]	; (108c <rtc_count_enable+0x30>)
    106a:	0020      	movs	r0, r4
    106c:	47a8      	blx	r5
    106e:	2800      	cmp	r0, #0
    1070:	d1fb      	bne.n	106a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1072:	8833      	ldrh	r3, [r6, #0]
    1074:	2202      	movs	r2, #2
    1076:	4313      	orrs	r3, r2
    1078:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    107a:	4d04      	ldr	r5, [pc, #16]	; (108c <rtc_count_enable+0x30>)
    107c:	0020      	movs	r0, r4
    107e:	47a8      	blx	r5
    1080:	2800      	cmp	r0, #0
    1082:	d1fb      	bne.n	107c <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    1084:	bd70      	pop	{r4, r5, r6, pc}
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	e000e100 	.word	0xe000e100
    108c:	00001051 	.word	0x00001051

00001090 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1094:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1096:	2104      	movs	r1, #4
    1098:	2380      	movs	r3, #128	; 0x80
    109a:	4a0a      	ldr	r2, [pc, #40]	; (10c4 <rtc_count_disable+0x34>)
    109c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    109e:	4d0a      	ldr	r5, [pc, #40]	; (10c8 <rtc_count_disable+0x38>)
    10a0:	0020      	movs	r0, r4
    10a2:	47a8      	blx	r5
    10a4:	2800      	cmp	r0, #0
    10a6:	d1fb      	bne.n	10a0 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    10a8:	4b08      	ldr	r3, [pc, #32]	; (10cc <rtc_count_disable+0x3c>)
    10aa:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    10ac:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    10ae:	8833      	ldrh	r3, [r6, #0]
    10b0:	2202      	movs	r2, #2
    10b2:	4393      	bics	r3, r2
    10b4:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    10b6:	4d04      	ldr	r5, [pc, #16]	; (10c8 <rtc_count_disable+0x38>)
    10b8:	0020      	movs	r0, r4
    10ba:	47a8      	blx	r5
    10bc:	2800      	cmp	r0, #0
    10be:	d1fb      	bne.n	10b8 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	e000e100 	.word	0xe000e100
    10c8:	00001051 	.word	0x00001051
    10cc:	ffff81ff 	.word	0xffff81ff

000010d0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    10d0:	b570      	push	{r4, r5, r6, lr}
    10d2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10d4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    10d6:	4b0a      	ldr	r3, [pc, #40]	; (1100 <rtc_count_reset+0x30>)
    10d8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    10da:	2300      	movs	r3, #0
    10dc:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    10de:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    10e0:	4d08      	ldr	r5, [pc, #32]	; (1104 <rtc_count_reset+0x34>)
    10e2:	0020      	movs	r0, r4
    10e4:	47a8      	blx	r5
    10e6:	2800      	cmp	r0, #0
    10e8:	d1fb      	bne.n	10e2 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    10ea:	8833      	ldrh	r3, [r6, #0]
    10ec:	2201      	movs	r2, #1
    10ee:	4313      	orrs	r3, r2
    10f0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    10f2:	4d04      	ldr	r5, [pc, #16]	; (1104 <rtc_count_reset+0x34>)
    10f4:	0020      	movs	r0, r4
    10f6:	47a8      	blx	r5
    10f8:	2800      	cmp	r0, #0
    10fa:	d1fb      	bne.n	10f4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    10fc:	bd70      	pop	{r4, r5, r6, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	00001091 	.word	0x00001091
    1104:	00001051 	.word	0x00001051

00001108 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    1108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    110a:	0004      	movs	r4, r0
    110c:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    110e:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    1110:	4d0c      	ldr	r5, [pc, #48]	; (1144 <rtc_count_set_count+0x3c>)
    1112:	0020      	movs	r0, r4
    1114:	47a8      	blx	r5
    1116:	2800      	cmp	r0, #0
    1118:	d1fb      	bne.n	1112 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    111a:	7923      	ldrb	r3, [r4, #4]
    111c:	2b00      	cmp	r3, #0
    111e:	d009      	beq.n	1134 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1120:	2017      	movs	r0, #23
	switch(module->mode){
    1122:	2b01      	cmp	r3, #1
    1124:	d105      	bne.n	1132 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    1126:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    1128:	4d06      	ldr	r5, [pc, #24]	; (1144 <rtc_count_set_count+0x3c>)
    112a:	0020      	movs	r0, r4
    112c:	47a8      	blx	r5
    112e:	2800      	cmp	r0, #0
    1130:	d1fb      	bne.n	112a <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    1132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    1136:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    1138:	429e      	cmp	r6, r3
    113a:	d8fa      	bhi.n	1132 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    113c:	b2b6      	uxth	r6, r6
    113e:	833e      	strh	r6, [r7, #24]
			break;
    1140:	e7f2      	b.n	1128 <rtc_count_set_count+0x20>
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	00001051 	.word	0x00001051
    1148:	0000ffff 	.word	0x0000ffff

0000114c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    114c:	b570      	push	{r4, r5, r6, lr}
    114e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1150:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    1152:	4d08      	ldr	r5, [pc, #32]	; (1174 <rtc_count_get_count+0x28>)
    1154:	0020      	movs	r0, r4
    1156:	47a8      	blx	r5
    1158:	2800      	cmp	r0, #0
    115a:	d1fb      	bne.n	1154 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    115c:	7923      	ldrb	r3, [r4, #4]
    115e:	2b00      	cmp	r3, #0
    1160:	d004      	beq.n	116c <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    1162:	2000      	movs	r0, #0
	switch (module->mode) {
    1164:	2b01      	cmp	r3, #1
    1166:	d100      	bne.n	116a <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    1168:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    116a:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    116c:	8b30      	ldrh	r0, [r6, #24]
    116e:	b280      	uxth	r0, r0
			break;
    1170:	e7fb      	b.n	116a <rtc_count_get_count+0x1e>
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	00001051 	.word	0x00001051

00001178 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    1178:	b5f0      	push	{r4, r5, r6, r7, lr}
    117a:	b083      	sub	sp, #12
    117c:	0004      	movs	r4, r0
    117e:	9101      	str	r1, [sp, #4]
    1180:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1182:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    1184:	4f13      	ldr	r7, [pc, #76]	; (11d4 <rtc_count_set_compare+0x5c>)
    1186:	0020      	movs	r0, r4
    1188:	47b8      	blx	r7
    118a:	2800      	cmp	r0, #0
    118c:	d1fb      	bne.n	1186 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    118e:	7923      	ldrb	r3, [r4, #4]
    1190:	2b00      	cmp	r3, #0
    1192:	d00e      	beq.n	11b2 <rtc_count_set_compare+0x3a>
    1194:	2b01      	cmp	r3, #1
    1196:	d119      	bne.n	11cc <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    1198:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    119a:	2d01      	cmp	r5, #1
    119c:	d817      	bhi.n	11ce <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    119e:	3508      	adds	r5, #8
    11a0:	00ad      	lsls	r5, r5, #2
    11a2:	9b01      	ldr	r3, [sp, #4]
    11a4:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    11a6:	4d0b      	ldr	r5, [pc, #44]	; (11d4 <rtc_count_set_compare+0x5c>)
    11a8:	0020      	movs	r0, r4
    11aa:	47a8      	blx	r5
    11ac:	2800      	cmp	r0, #0
    11ae:	d1fb      	bne.n	11a8 <rtc_count_set_compare+0x30>
    11b0:	e00d      	b.n	11ce <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    11b2:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    11b4:	2d02      	cmp	r5, #2
    11b6:	d80a      	bhi.n	11ce <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    11b8:	4b07      	ldr	r3, [pc, #28]	; (11d8 <rtc_count_set_compare+0x60>)
    11ba:	9a01      	ldr	r2, [sp, #4]
    11bc:	429a      	cmp	r2, r3
    11be:	d806      	bhi.n	11ce <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    11c0:	466b      	mov	r3, sp
    11c2:	889b      	ldrh	r3, [r3, #4]
    11c4:	3510      	adds	r5, #16
    11c6:	006d      	lsls	r5, r5, #1
    11c8:	53ab      	strh	r3, [r5, r6]
			break;
    11ca:	e7ec      	b.n	11a6 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    11cc:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    11ce:	b003      	add	sp, #12
    11d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00001051 	.word	0x00001051
    11d8:	0000ffff 	.word	0x0000ffff

000011dc <rtc_count_init>:
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	0004      	movs	r4, r0
    11e0:	0015      	movs	r5, r2
	module->hw = hw;
    11e2:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    11e4:	4a1f      	ldr	r2, [pc, #124]	; (1264 <rtc_count_init+0x88>)
    11e6:	6951      	ldr	r1, [r2, #20]
    11e8:	2380      	movs	r3, #128	; 0x80
    11ea:	005b      	lsls	r3, r3, #1
    11ec:	430b      	orrs	r3, r1
    11ee:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    11f0:	2205      	movs	r2, #5
    11f2:	4b1d      	ldr	r3, [pc, #116]	; (1268 <rtc_count_init+0x8c>)
    11f4:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    11f6:	4b1d      	ldr	r3, [pc, #116]	; (126c <rtc_count_init+0x90>)
    11f8:	4798      	blx	r3
	module->mode                = config->mode;
    11fa:	78ab      	ldrb	r3, [r5, #2]
    11fc:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    11fe:	4b1c      	ldr	r3, [pc, #112]	; (1270 <rtc_count_init+0x94>)
    1200:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1202:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    1204:	792b      	ldrb	r3, [r5, #4]
    1206:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    1208:	8829      	ldrh	r1, [r5, #0]
    120a:	430b      	orrs	r3, r1
    120c:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    120e:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    1210:	78ab      	ldrb	r3, [r5, #2]
    1212:	2b00      	cmp	r3, #0
    1214:	d013      	beq.n	123e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    1216:	2017      	movs	r0, #23
	switch (config->mode) {
    1218:	2b01      	cmp	r3, #1
    121a:	d10f      	bne.n	123c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    121c:	8813      	ldrh	r3, [r2, #0]
    121e:	b29b      	uxth	r3, r3
    1220:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    1222:	78eb      	ldrb	r3, [r5, #3]
    1224:	2b00      	cmp	r3, #0
    1226:	d003      	beq.n	1230 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    1228:	8813      	ldrh	r3, [r2, #0]
    122a:	2180      	movs	r1, #128	; 0x80
    122c:	430b      	orrs	r3, r1
    122e:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    1230:	68a9      	ldr	r1, [r5, #8]
    1232:	2200      	movs	r2, #0
    1234:	0020      	movs	r0, r4
    1236:	4b0f      	ldr	r3, [pc, #60]	; (1274 <rtc_count_init+0x98>)
    1238:	4798      	blx	r3
	return STATUS_OK;
    123a:	2000      	movs	r0, #0
}
    123c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    123e:	8813      	ldrh	r3, [r2, #0]
    1240:	2104      	movs	r1, #4
    1242:	430b      	orrs	r3, r1
    1244:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    1246:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    1248:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    124a:	2b00      	cmp	r3, #0
    124c:	d1f6      	bne.n	123c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    124e:	2200      	movs	r2, #0
    1250:	68a9      	ldr	r1, [r5, #8]
    1252:	0020      	movs	r0, r4
    1254:	4e07      	ldr	r6, [pc, #28]	; (1274 <rtc_count_init+0x98>)
    1256:	47b0      	blx	r6
    1258:	68e9      	ldr	r1, [r5, #12]
    125a:	2201      	movs	r2, #1
    125c:	0020      	movs	r0, r4
    125e:	47b0      	blx	r6
	return STATUS_OK;
    1260:	2000      	movs	r0, #0
    1262:	e7eb      	b.n	123c <rtc_count_init+0x60>
    1264:	40000400 	.word	0x40000400
    1268:	40001000 	.word	0x40001000
    126c:	000010d1 	.word	0x000010d1
    1270:	20000ff4 	.word	0x20000ff4
    1274:	00001179 	.word	0x00001179

00001278 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    1278:	2a0a      	cmp	r2, #10
    127a:	d009      	beq.n	1290 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    127c:	2a07      	cmp	r2, #7
    127e:	d907      	bls.n	1290 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    1280:	7903      	ldrb	r3, [r0, #4]
    1282:	2b00      	cmp	r3, #0
    1284:	d010      	beq.n	12a8 <rtc_count_register_callback+0x30>
    1286:	2b01      	cmp	r3, #1
    1288:	d112      	bne.n	12b0 <rtc_count_register_callback+0x38>
    128a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    128c:	2a09      	cmp	r2, #9
    128e:	d809      	bhi.n	12a4 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    1290:	1c93      	adds	r3, r2, #2
    1292:	009b      	lsls	r3, r3, #2
    1294:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    1296:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    1298:	2101      	movs	r1, #1
    129a:	4091      	lsls	r1, r2
    129c:	430b      	orrs	r3, r1
    129e:	b29b      	uxth	r3, r3
    12a0:	8683      	strh	r3, [r0, #52]	; 0x34
    12a2:	2300      	movs	r3, #0
	}

	return status;
}
    12a4:	0018      	movs	r0, r3
    12a6:	4770      	bx	lr
    12a8:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    12aa:	2a0a      	cmp	r2, #10
    12ac:	d8fa      	bhi.n	12a4 <rtc_count_register_callback+0x2c>
    12ae:	e7ef      	b.n	1290 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    12b0:	2317      	movs	r3, #23
    12b2:	e7f7      	b.n	12a4 <rtc_count_register_callback+0x2c>

000012b4 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    12b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    12b6:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    12b8:	290a      	cmp	r1, #10
    12ba:	d011      	beq.n	12e0 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    12bc:	2907      	cmp	r1, #7
    12be:	d912      	bls.n	12e6 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    12c0:	2380      	movs	r3, #128	; 0x80
    12c2:	005b      	lsls	r3, r3, #1
    12c4:	000c      	movs	r4, r1
    12c6:	3c08      	subs	r4, #8
    12c8:	40a3      	lsls	r3, r4
    12ca:	24c0      	movs	r4, #192	; 0xc0
    12cc:	00a4      	lsls	r4, r4, #2
    12ce:	4023      	ands	r3, r4
    12d0:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    12d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    12d4:	2201      	movs	r2, #1
    12d6:	408a      	lsls	r2, r1
    12d8:	4313      	orrs	r3, r2
    12da:	b29b      	uxth	r3, r3
    12dc:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    12de:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    12e0:	4b04      	ldr	r3, [pc, #16]	; (12f4 <rtc_count_enable_callback+0x40>)
    12e2:	8153      	strh	r3, [r2, #10]
    12e4:	e7f5      	b.n	12d2 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    12e6:	2401      	movs	r4, #1
    12e8:	408c      	lsls	r4, r1
    12ea:	23ff      	movs	r3, #255	; 0xff
    12ec:	4023      	ands	r3, r4
    12ee:	8153      	strh	r3, [r2, #10]
    12f0:	e7ef      	b.n	12d2 <rtc_count_enable_callback+0x1e>
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	ffff8000 	.word	0xffff8000

000012f8 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    12f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    12fa:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    12fc:	290a      	cmp	r1, #10
    12fe:	d010      	beq.n	1322 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1300:	2907      	cmp	r1, #7
    1302:	d911      	bls.n	1328 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1304:	2380      	movs	r3, #128	; 0x80
    1306:	005b      	lsls	r3, r3, #1
    1308:	000c      	movs	r4, r1
    130a:	3c08      	subs	r4, #8
    130c:	40a3      	lsls	r3, r4
    130e:	24c0      	movs	r4, #192	; 0xc0
    1310:	00a4      	lsls	r4, r4, #2
    1312:	4023      	ands	r3, r4
    1314:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    1316:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    1318:	2201      	movs	r2, #1
    131a:	408a      	lsls	r2, r1
    131c:	4393      	bics	r3, r2
    131e:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    1320:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <rtc_count_disable_callback+0x3c>)
    1324:	8113      	strh	r3, [r2, #8]
    1326:	e7f6      	b.n	1316 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    1328:	2401      	movs	r4, #1
    132a:	408c      	lsls	r4, r1
    132c:	23ff      	movs	r3, #255	; 0xff
    132e:	4023      	ands	r3, r4
    1330:	8113      	strh	r3, [r2, #8]
    1332:	e7f0      	b.n	1316 <rtc_count_disable_callback+0x1e>
    1334:	ffff8000 	.word	0xffff8000

00001338 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    133a:	46de      	mov	lr, fp
    133c:	4657      	mov	r7, sl
    133e:	464e      	mov	r6, r9
    1340:	4645      	mov	r5, r8
    1342:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    1344:	4b2b      	ldr	r3, [pc, #172]	; (13f4 <RTC_Handler+0xbc>)
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    134a:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    134c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    134e:	4652      	mov	r2, sl
    1350:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    1352:	401a      	ands	r2, r3
    1354:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    1356:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    1358:	8973      	ldrh	r3, [r6, #10]
    135a:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    135c:	b21a      	sxth	r2, r3
    135e:	2a00      	cmp	r2, #0
    1360:	db08      	blt.n	1374 <RTC_Handler+0x3c>
    1362:	27ff      	movs	r7, #255	; 0xff
    1364:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    1366:	d02a      	beq.n	13be <RTC_Handler+0x86>
    1368:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    136a:	2301      	movs	r3, #1
    136c:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    136e:	33fe      	adds	r3, #254	; 0xfe
    1370:	469b      	mov	fp, r3
    1372:	e014      	b.n	139e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    1374:	4643      	mov	r3, r8
    1376:	055b      	lsls	r3, r3, #21
    1378:	d407      	bmi.n	138a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    137a:	4b1f      	ldr	r3, [pc, #124]	; (13f8 <RTC_Handler+0xc0>)
    137c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    137e:	bc3c      	pop	{r2, r3, r4, r5}
    1380:	4690      	mov	r8, r2
    1382:	4699      	mov	r9, r3
    1384:	46a2      	mov	sl, r4
    1386:	46ab      	mov	fp, r5
    1388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    138a:	4653      	mov	r3, sl
    138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    138e:	4798      	blx	r3
    1390:	e7f3      	b.n	137a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    1392:	465b      	mov	r3, fp
    1394:	401d      	ands	r5, r3
    1396:	81b5      	strh	r5, [r6, #12]
    1398:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    139a:	2c08      	cmp	r4, #8
    139c:	d0ef      	beq.n	137e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    139e:	0023      	movs	r3, r4
    13a0:	464d      	mov	r5, r9
    13a2:	40a5      	lsls	r5, r4
    13a4:	422f      	tst	r7, r5
    13a6:	d0f4      	beq.n	1392 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    13a8:	4642      	mov	r2, r8
    13aa:	4122      	asrs	r2, r4
    13ac:	4649      	mov	r1, r9
    13ae:	4211      	tst	r1, r2
    13b0:	d0ef      	beq.n	1392 <RTC_Handler+0x5a>
				module->callbacks[i]();
    13b2:	3302      	adds	r3, #2
    13b4:	009b      	lsls	r3, r3, #2
    13b6:	4652      	mov	r2, sl
    13b8:	589b      	ldr	r3, [r3, r2]
    13ba:	4798      	blx	r3
    13bc:	e7e9      	b.n	1392 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    13be:	05da      	lsls	r2, r3, #23
    13c0:	d50a      	bpl.n	13d8 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    13c2:	4643      	mov	r3, r8
    13c4:	05db      	lsls	r3, r3, #23
    13c6:	d403      	bmi.n	13d0 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    13c8:	2380      	movs	r3, #128	; 0x80
    13ca:	005b      	lsls	r3, r3, #1
    13cc:	81b3      	strh	r3, [r6, #12]
    13ce:	e7d6      	b.n	137e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    13d0:	4653      	mov	r3, sl
    13d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13d4:	4798      	blx	r3
    13d6:	e7f7      	b.n	13c8 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    13d8:	059b      	lsls	r3, r3, #22
    13da:	d5d0      	bpl.n	137e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    13dc:	4643      	mov	r3, r8
    13de:	059b      	lsls	r3, r3, #22
    13e0:	d403      	bmi.n	13ea <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    13e2:	2380      	movs	r3, #128	; 0x80
    13e4:	009b      	lsls	r3, r3, #2
    13e6:	81b3      	strh	r3, [r6, #12]
}
    13e8:	e7c9      	b.n	137e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    13ea:	4653      	mov	r3, sl
    13ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13ee:	4798      	blx	r3
    13f0:	e7f7      	b.n	13e2 <RTC_Handler+0xaa>
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	20000ff4 	.word	0x20000ff4
    13f8:	ffff8000 	.word	0xffff8000

000013fc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    13fc:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13fe:	2207      	movs	r2, #7
    1400:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1402:	421a      	tst	r2, r3
    1404:	d1fc      	bne.n	1400 <_i2c_master_wait_for_sync+0x4>
}
    1406:	4770      	bx	lr

00001408 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1408:	b5f0      	push	{r4, r5, r6, r7, lr}
    140a:	46d6      	mov	lr, sl
    140c:	464f      	mov	r7, r9
    140e:	4646      	mov	r6, r8
    1410:	b5c0      	push	{r6, r7, lr}
    1412:	b08a      	sub	sp, #40	; 0x28
    1414:	0007      	movs	r7, r0
    1416:	000e      	movs	r6, r1
    1418:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    141a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    141c:	0008      	movs	r0, r1
    141e:	4ba5      	ldr	r3, [pc, #660]	; (16b4 <i2c_master_init+0x2ac>)
    1420:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1422:	2805      	cmp	r0, #5
    1424:	d100      	bne.n	1428 <i2c_master_init+0x20>
    1426:	e13d      	b.n	16a4 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1428:	0005      	movs	r5, r0
    142a:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    142c:	4aa2      	ldr	r2, [pc, #648]	; (16b8 <i2c_master_init+0x2b0>)
    142e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1430:	2301      	movs	r3, #1
    1432:	4083      	lsls	r3, r0
    1434:	430b      	orrs	r3, r1
    1436:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1438:	a909      	add	r1, sp, #36	; 0x24
    143a:	7b23      	ldrb	r3, [r4, #12]
    143c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    143e:	b2ed      	uxtb	r5, r5
    1440:	0028      	movs	r0, r5
    1442:	4b9e      	ldr	r3, [pc, #632]	; (16bc <i2c_master_init+0x2b4>)
    1444:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1446:	0028      	movs	r0, r5
    1448:	4b9d      	ldr	r3, [pc, #628]	; (16c0 <i2c_master_init+0x2b8>)
    144a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    144c:	7b20      	ldrb	r0, [r4, #12]
    144e:	2100      	movs	r1, #0
    1450:	4b9c      	ldr	r3, [pc, #624]	; (16c4 <i2c_master_init+0x2bc>)
    1452:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1454:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    1456:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1458:	079b      	lsls	r3, r3, #30
    145a:	d505      	bpl.n	1468 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    145c:	b00a      	add	sp, #40	; 0x28
    145e:	bc1c      	pop	{r2, r3, r4}
    1460:	4690      	mov	r8, r2
    1462:	4699      	mov	r9, r3
    1464:	46a2      	mov	sl, r4
    1466:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1468:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    146a:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    146c:	07db      	lsls	r3, r3, #31
    146e:	d4f5      	bmi.n	145c <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1470:	6838      	ldr	r0, [r7, #0]
    1472:	4b90      	ldr	r3, [pc, #576]	; (16b4 <i2c_master_init+0x2ac>)
    1474:	4699      	mov	r9, r3
    1476:	4798      	blx	r3
    1478:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    147a:	4993      	ldr	r1, [pc, #588]	; (16c8 <i2c_master_init+0x2c0>)
    147c:	4b93      	ldr	r3, [pc, #588]	; (16cc <i2c_master_init+0x2c4>)
    147e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1480:	00ad      	lsls	r5, r5, #2
    1482:	4b93      	ldr	r3, [pc, #588]	; (16d0 <i2c_master_init+0x2c8>)
    1484:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    1486:	2300      	movs	r3, #0
    1488:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    148a:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    148c:	2500      	movs	r5, #0
    148e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1490:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    1492:	2225      	movs	r2, #37	; 0x25
    1494:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    1496:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1498:	3314      	adds	r3, #20
    149a:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    149c:	683b      	ldr	r3, [r7, #0]
    149e:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    14a0:	0018      	movs	r0, r3
    14a2:	47c8      	blx	r9
    14a4:	4681      	mov	r9, r0
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	aa08      	add	r2, sp, #32
    14aa:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14ac:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14ae:	2301      	movs	r3, #1
    14b0:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    14b2:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    14b4:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    14b6:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    14b8:	2800      	cmp	r0, #0
    14ba:	d100      	bne.n	14be <i2c_master_init+0xb6>
    14bc:	e0af      	b.n	161e <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    14be:	ab08      	add	r3, sp, #32
    14c0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    14c2:	2302      	movs	r3, #2
    14c4:	aa08      	add	r2, sp, #32
    14c6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    14c8:	0c00      	lsrs	r0, r0, #16
    14ca:	b2c0      	uxtb	r0, r0
    14cc:	0011      	movs	r1, r2
    14ce:	4b81      	ldr	r3, [pc, #516]	; (16d4 <i2c_master_init+0x2cc>)
    14d0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    14d2:	2e00      	cmp	r6, #0
    14d4:	d100      	bne.n	14d8 <i2c_master_init+0xd0>
    14d6:	e0a7      	b.n	1628 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    14d8:	ab08      	add	r3, sp, #32
    14da:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    14dc:	2302      	movs	r3, #2
    14de:	aa08      	add	r2, sp, #32
    14e0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    14e2:	0c36      	lsrs	r6, r6, #16
    14e4:	b2f0      	uxtb	r0, r6
    14e6:	0011      	movs	r1, r2
    14e8:	4b7a      	ldr	r3, [pc, #488]	; (16d4 <i2c_master_init+0x2cc>)
    14ea:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    14ec:	8aa3      	ldrh	r3, [r4, #20]
    14ee:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    14f0:	8ae3      	ldrh	r3, [r4, #22]
    14f2:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    14f4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    14f6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    14f8:	2b00      	cmp	r3, #0
    14fa:	d104      	bne.n	1506 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14fc:	4b76      	ldr	r3, [pc, #472]	; (16d8 <i2c_master_init+0x2d0>)
    14fe:	789b      	ldrb	r3, [r3, #2]
    1500:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1502:	0fdb      	lsrs	r3, r3, #31
    1504:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1506:	68a1      	ldr	r1, [r4, #8]
    1508:	6923      	ldr	r3, [r4, #16]
    150a:	430b      	orrs	r3, r1
    150c:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    150e:	2224      	movs	r2, #36	; 0x24
    1510:	5ca2      	ldrb	r2, [r4, r2]
    1512:	2a00      	cmp	r2, #0
    1514:	d002      	beq.n	151c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1516:	2280      	movs	r2, #128	; 0x80
    1518:	05d2      	lsls	r2, r2, #23
    151a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    151c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    151e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1520:	222c      	movs	r2, #44	; 0x2c
    1522:	5ca2      	ldrb	r2, [r4, r2]
    1524:	2a00      	cmp	r2, #0
    1526:	d103      	bne.n	1530 <i2c_master_init+0x128>
    1528:	2280      	movs	r2, #128	; 0x80
    152a:	0492      	lsls	r2, r2, #18
    152c:	4291      	cmp	r1, r2
    152e:	d102      	bne.n	1536 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1530:	2280      	movs	r2, #128	; 0x80
    1532:	0512      	lsls	r2, r2, #20
    1534:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1536:	222d      	movs	r2, #45	; 0x2d
    1538:	5ca2      	ldrb	r2, [r4, r2]
    153a:	2a00      	cmp	r2, #0
    153c:	d002      	beq.n	1544 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    153e:	2280      	movs	r2, #128	; 0x80
    1540:	0412      	lsls	r2, r2, #16
    1542:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    1544:	222e      	movs	r2, #46	; 0x2e
    1546:	5ca2      	ldrb	r2, [r4, r2]
    1548:	2a00      	cmp	r2, #0
    154a:	d002      	beq.n	1552 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    154c:	2280      	movs	r2, #128	; 0x80
    154e:	03d2      	lsls	r2, r2, #15
    1550:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1552:	4642      	mov	r2, r8
    1554:	6812      	ldr	r2, [r2, #0]
    1556:	4313      	orrs	r3, r2
    1558:	4642      	mov	r2, r8
    155a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	005b      	lsls	r3, r3, #1
    1560:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1562:	464d      	mov	r5, r9
    1564:	3512      	adds	r5, #18
    1566:	b2e8      	uxtb	r0, r5
    1568:	4b5c      	ldr	r3, [pc, #368]	; (16dc <i2c_master_init+0x2d4>)
    156a:	4798      	blx	r3
    156c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    156e:	23fa      	movs	r3, #250	; 0xfa
    1570:	009b      	lsls	r3, r3, #2
    1572:	6822      	ldr	r2, [r4, #0]
    1574:	435a      	muls	r2, r3
    1576:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1578:	6863      	ldr	r3, [r4, #4]
    157a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    157c:	4d58      	ldr	r5, [pc, #352]	; (16e0 <i2c_master_init+0x2d8>)
    157e:	47a8      	blx	r5
    1580:	9000      	str	r0, [sp, #0]
    1582:	9101      	str	r1, [sp, #4]
    1584:	464b      	mov	r3, r9
    1586:	0058      	lsls	r0, r3, #1
    1588:	47a8      	blx	r5
    158a:	9002      	str	r0, [sp, #8]
    158c:	9103      	str	r1, [sp, #12]
    158e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    1590:	47a8      	blx	r5
    1592:	9004      	str	r0, [sp, #16]
    1594:	9105      	str	r1, [sp, #20]
    1596:	4f53      	ldr	r7, [pc, #332]	; (16e4 <i2c_master_init+0x2dc>)
    1598:	4a53      	ldr	r2, [pc, #332]	; (16e8 <i2c_master_init+0x2e0>)
    159a:	4b54      	ldr	r3, [pc, #336]	; (16ec <i2c_master_init+0x2e4>)
    159c:	9800      	ldr	r0, [sp, #0]
    159e:	9901      	ldr	r1, [sp, #4]
    15a0:	47b8      	blx	r7
    15a2:	0002      	movs	r2, r0
    15a4:	000b      	movs	r3, r1
    15a6:	9804      	ldr	r0, [sp, #16]
    15a8:	9905      	ldr	r1, [sp, #20]
    15aa:	47b8      	blx	r7
    15ac:	4e50      	ldr	r6, [pc, #320]	; (16f0 <i2c_master_init+0x2e8>)
    15ae:	2200      	movs	r2, #0
    15b0:	4b50      	ldr	r3, [pc, #320]	; (16f4 <i2c_master_init+0x2ec>)
    15b2:	47b0      	blx	r6
    15b4:	9004      	str	r0, [sp, #16]
    15b6:	9105      	str	r1, [sp, #20]
    15b8:	4648      	mov	r0, r9
    15ba:	47a8      	blx	r5
    15bc:	0002      	movs	r2, r0
    15be:	000b      	movs	r3, r1
    15c0:	9804      	ldr	r0, [sp, #16]
    15c2:	9905      	ldr	r1, [sp, #20]
    15c4:	47b8      	blx	r7
    15c6:	0002      	movs	r2, r0
    15c8:	000b      	movs	r3, r1
    15ca:	4d4b      	ldr	r5, [pc, #300]	; (16f8 <i2c_master_init+0x2f0>)
    15cc:	9800      	ldr	r0, [sp, #0]
    15ce:	9901      	ldr	r1, [sp, #4]
    15d0:	47a8      	blx	r5
    15d2:	9a02      	ldr	r2, [sp, #8]
    15d4:	9b03      	ldr	r3, [sp, #12]
    15d6:	47b0      	blx	r6
    15d8:	2200      	movs	r2, #0
    15da:	4b48      	ldr	r3, [pc, #288]	; (16fc <i2c_master_init+0x2f4>)
    15dc:	47a8      	blx	r5
    15de:	9a02      	ldr	r2, [sp, #8]
    15e0:	9b03      	ldr	r3, [sp, #12]
    15e2:	4d47      	ldr	r5, [pc, #284]	; (1700 <i2c_master_init+0x2f8>)
    15e4:	47a8      	blx	r5
    15e6:	4b47      	ldr	r3, [pc, #284]	; (1704 <i2c_master_init+0x2fc>)
    15e8:	4798      	blx	r3
    15ea:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    15ec:	2380      	movs	r3, #128	; 0x80
    15ee:	049b      	lsls	r3, r3, #18
    15f0:	68a2      	ldr	r2, [r4, #8]
    15f2:	429a      	cmp	r2, r3
    15f4:	d01e      	beq.n	1634 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15f6:	0003      	movs	r3, r0
    15f8:	2040      	movs	r0, #64	; 0x40
    15fa:	2dff      	cmp	r5, #255	; 0xff
    15fc:	d900      	bls.n	1600 <i2c_master_init+0x1f8>
    15fe:	e72d      	b.n	145c <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    1600:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1602:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1604:	25ff      	movs	r5, #255	; 0xff
    1606:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1608:	0624      	lsls	r4, r4, #24
    160a:	4325      	orrs	r5, r4
    160c:	0400      	lsls	r0, r0, #16
    160e:	23ff      	movs	r3, #255	; 0xff
    1610:	041b      	lsls	r3, r3, #16
    1612:	4018      	ands	r0, r3
    1614:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1616:	4643      	mov	r3, r8
    1618:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    161a:	2000      	movs	r0, #0
    161c:	e71e      	b.n	145c <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    161e:	2100      	movs	r1, #0
    1620:	4640      	mov	r0, r8
    1622:	4b39      	ldr	r3, [pc, #228]	; (1708 <i2c_master_init+0x300>)
    1624:	4798      	blx	r3
    1626:	e74a      	b.n	14be <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1628:	2101      	movs	r1, #1
    162a:	4640      	mov	r0, r8
    162c:	4b36      	ldr	r3, [pc, #216]	; (1708 <i2c_master_init+0x300>)
    162e:	4798      	blx	r3
    1630:	0006      	movs	r6, r0
    1632:	e751      	b.n	14d8 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1634:	26fa      	movs	r6, #250	; 0xfa
    1636:	00b6      	lsls	r6, r6, #2
    1638:	4653      	mov	r3, sl
    163a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    163c:	9800      	ldr	r0, [sp, #0]
    163e:	9901      	ldr	r1, [sp, #4]
    1640:	0002      	movs	r2, r0
    1642:	000b      	movs	r3, r1
    1644:	4c2a      	ldr	r4, [pc, #168]	; (16f0 <i2c_master_init+0x2e8>)
    1646:	47a0      	blx	r4
    1648:	9000      	str	r0, [sp, #0]
    164a:	9101      	str	r1, [sp, #4]
    164c:	0030      	movs	r0, r6
    164e:	4b24      	ldr	r3, [pc, #144]	; (16e0 <i2c_master_init+0x2d8>)
    1650:	4798      	blx	r3
    1652:	2200      	movs	r2, #0
    1654:	4b2d      	ldr	r3, [pc, #180]	; (170c <i2c_master_init+0x304>)
    1656:	47b8      	blx	r7
    1658:	0002      	movs	r2, r0
    165a:	000b      	movs	r3, r1
    165c:	9800      	ldr	r0, [sp, #0]
    165e:	9901      	ldr	r1, [sp, #4]
    1660:	4c27      	ldr	r4, [pc, #156]	; (1700 <i2c_master_init+0x2f8>)
    1662:	47a0      	blx	r4
    1664:	2200      	movs	r2, #0
    1666:	4b25      	ldr	r3, [pc, #148]	; (16fc <i2c_master_init+0x2f4>)
    1668:	4c23      	ldr	r4, [pc, #140]	; (16f8 <i2c_master_init+0x2f0>)
    166a:	47a0      	blx	r4
    166c:	4b25      	ldr	r3, [pc, #148]	; (1704 <i2c_master_init+0x2fc>)
    166e:	4798      	blx	r3
    1670:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    1672:	d00c      	beq.n	168e <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    1674:	0031      	movs	r1, r6
    1676:	9807      	ldr	r0, [sp, #28]
    1678:	4b25      	ldr	r3, [pc, #148]	; (1710 <i2c_master_init+0x308>)
    167a:	4798      	blx	r3
    167c:	3802      	subs	r0, #2
    167e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1680:	002b      	movs	r3, r5
    1682:	2dff      	cmp	r5, #255	; 0xff
    1684:	d80c      	bhi.n	16a0 <i2c_master_init+0x298>
    1686:	28ff      	cmp	r0, #255	; 0xff
    1688:	d9bc      	bls.n	1604 <i2c_master_init+0x1fc>
    168a:	2040      	movs	r0, #64	; 0x40
    168c:	e6e6      	b.n	145c <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    168e:	0071      	lsls	r1, r6, #1
    1690:	1e48      	subs	r0, r1, #1
    1692:	9b07      	ldr	r3, [sp, #28]
    1694:	469c      	mov	ip, r3
    1696:	4460      	add	r0, ip
    1698:	4b1d      	ldr	r3, [pc, #116]	; (1710 <i2c_master_init+0x308>)
    169a:	4798      	blx	r3
    169c:	3801      	subs	r0, #1
    169e:	e7ef      	b.n	1680 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    16a0:	2040      	movs	r0, #64	; 0x40
    16a2:	e6db      	b.n	145c <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    16a4:	4a04      	ldr	r2, [pc, #16]	; (16b8 <i2c_master_init+0x2b0>)
    16a6:	6a13      	ldr	r3, [r2, #32]
    16a8:	2102      	movs	r1, #2
    16aa:	430b      	orrs	r3, r1
    16ac:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    16ae:	2518      	movs	r5, #24
    16b0:	e6c2      	b.n	1438 <i2c_master_init+0x30>
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00002049 	.word	0x00002049
    16b8:	40000400 	.word	0x40000400
    16bc:	0000329d 	.word	0x0000329d
    16c0:	0000322d 	.word	0x0000322d
    16c4:	00001ea1 	.word	0x00001ea1
    16c8:	00001b3d 	.word	0x00001b3d
    16cc:	00002085 	.word	0x00002085
    16d0:	20000ff8 	.word	0x20000ff8
    16d4:	00003399 	.word	0x00003399
    16d8:	41002000 	.word	0x41002000
    16dc:	000032c1 	.word	0x000032c1
    16e0:	00013629 	.word	0x00013629
    16e4:	00012a11 	.word	0x00012a11
    16e8:	e826d695 	.word	0xe826d695
    16ec:	3e112e0b 	.word	0x3e112e0b
    16f0:	00011d89 	.word	0x00011d89
    16f4:	40240000 	.word	0x40240000
    16f8:	00012f11 	.word	0x00012f11
    16fc:	3ff00000 	.word	0x3ff00000
    1700:	000123a9 	.word	0x000123a9
    1704:	0001353d 	.word	0x0001353d
    1708:	00001eed 	.word	0x00001eed
    170c:	40080000 	.word	0x40080000
    1710:	000109bd 	.word	0x000109bd

00001714 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1714:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1716:	7e1a      	ldrb	r2, [r3, #24]
    1718:	0792      	lsls	r2, r2, #30
    171a:	d507      	bpl.n	172c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    171c:	2202      	movs	r2, #2
    171e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1720:	8b5b      	ldrh	r3, [r3, #26]
    1722:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1724:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1726:	17db      	asrs	r3, r3, #31
    1728:	4018      	ands	r0, r3
}
    172a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    172c:	8b5a      	ldrh	r2, [r3, #26]
    172e:	0752      	lsls	r2, r2, #29
    1730:	d506      	bpl.n	1740 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1732:	6859      	ldr	r1, [r3, #4]
    1734:	22c0      	movs	r2, #192	; 0xc0
    1736:	0292      	lsls	r2, r2, #10
    1738:	430a      	orrs	r2, r1
    173a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    173c:	2018      	movs	r0, #24
    173e:	e7f4      	b.n	172a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1740:	2000      	movs	r0, #0
    1742:	e7f2      	b.n	172a <_i2c_master_address_response+0x16>

00001744 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1744:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1746:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1748:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    174a:	2401      	movs	r4, #1
    174c:	2502      	movs	r5, #2
    174e:	7e11      	ldrb	r1, [r2, #24]
    1750:	4221      	tst	r1, r4
    1752:	d10b      	bne.n	176c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1754:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1756:	4229      	tst	r1, r5
    1758:	d106      	bne.n	1768 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    175a:	3301      	adds	r3, #1
    175c:	b29b      	uxth	r3, r3
    175e:	8901      	ldrh	r1, [r0, #8]
    1760:	4299      	cmp	r1, r3
    1762:	d8f4      	bhi.n	174e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1764:	2012      	movs	r0, #18
    1766:	e002      	b.n	176e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    1768:	2000      	movs	r0, #0
    176a:	e000      	b.n	176e <_i2c_master_wait_for_bus+0x2a>
    176c:	2000      	movs	r0, #0
}
    176e:	bd30      	pop	{r4, r5, pc}

00001770 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1770:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1772:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1774:	6862      	ldr	r2, [r4, #4]
    1776:	2380      	movs	r3, #128	; 0x80
    1778:	02db      	lsls	r3, r3, #11
    177a:	4313      	orrs	r3, r2
    177c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    177e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1780:	4b02      	ldr	r3, [pc, #8]	; (178c <_i2c_master_send_hs_master_code+0x1c>)
    1782:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1784:	2301      	movs	r3, #1
    1786:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001745 	.word	0x00001745

00001790 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1790:	b5f0      	push	{r4, r5, r6, r7, lr}
    1792:	46de      	mov	lr, fp
    1794:	4657      	mov	r7, sl
    1796:	464e      	mov	r6, r9
    1798:	4645      	mov	r5, r8
    179a:	b5e0      	push	{r5, r6, r7, lr}
    179c:	b083      	sub	sp, #12
    179e:	0006      	movs	r6, r0
    17a0:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    17a4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    17a6:	682b      	ldr	r3, [r5, #0]
    17a8:	011b      	lsls	r3, r3, #4
    17aa:	0fdb      	lsrs	r3, r3, #31
    17ac:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    17ae:	7a4b      	ldrb	r3, [r1, #9]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d12b      	bne.n	180c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    17b4:	686b      	ldr	r3, [r5, #4]
    17b6:	4a58      	ldr	r2, [pc, #352]	; (1918 <_i2c_master_read_packet+0x188>)
    17b8:	4013      	ands	r3, r2
    17ba:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    17bc:	464b      	mov	r3, r9
    17be:	7a1b      	ldrb	r3, [r3, #8]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d127      	bne.n	1814 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    17c4:	464b      	mov	r3, r9
    17c6:	881b      	ldrh	r3, [r3, #0]
    17c8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    17ca:	464a      	mov	r2, r9
    17cc:	7a52      	ldrb	r2, [r2, #9]
    17ce:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    17d0:	4313      	orrs	r3, r2
    17d2:	2201      	movs	r2, #1
    17d4:	4313      	orrs	r3, r2
    17d6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17d8:	0030      	movs	r0, r6
    17da:	4b50      	ldr	r3, [pc, #320]	; (191c <_i2c_master_read_packet+0x18c>)
    17dc:	4798      	blx	r3
    17de:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    17e0:	4653      	mov	r3, sl
    17e2:	2b00      	cmp	r3, #0
    17e4:	d003      	beq.n	17ee <_i2c_master_read_packet+0x5e>
    17e6:	464b      	mov	r3, r9
    17e8:	885b      	ldrh	r3, [r3, #2]
    17ea:	2b01      	cmp	r3, #1
    17ec:	d03b      	beq.n	1866 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    17ee:	686b      	ldr	r3, [r5, #4]
    17f0:	4a49      	ldr	r2, [pc, #292]	; (1918 <_i2c_master_read_packet+0x188>)
    17f2:	4013      	ands	r3, r2
    17f4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d03a      	beq.n	1872 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    17fc:	9801      	ldr	r0, [sp, #4]
    17fe:	b003      	add	sp, #12
    1800:	bc3c      	pop	{r2, r3, r4, r5}
    1802:	4690      	mov	r8, r2
    1804:	4699      	mov	r9, r3
    1806:	46a2      	mov	sl, r4
    1808:	46ab      	mov	fp, r5
    180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    180c:	7a89      	ldrb	r1, [r1, #10]
    180e:	4b44      	ldr	r3, [pc, #272]	; (1920 <_i2c_master_read_packet+0x190>)
    1810:	4798      	blx	r3
    1812:	e7cf      	b.n	17b4 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    1814:	464b      	mov	r3, r9
    1816:	881b      	ldrh	r3, [r3, #0]
    1818:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    181a:	464a      	mov	r2, r9
    181c:	7a52      	ldrb	r2, [r2, #9]
    181e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1820:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1822:	2280      	movs	r2, #128	; 0x80
    1824:	0212      	lsls	r2, r2, #8
    1826:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1828:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    182a:	0030      	movs	r0, r6
    182c:	4b3b      	ldr	r3, [pc, #236]	; (191c <_i2c_master_read_packet+0x18c>)
    182e:	4798      	blx	r3
    1830:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1832:	686b      	ldr	r3, [r5, #4]
    1834:	4a38      	ldr	r2, [pc, #224]	; (1918 <_i2c_master_read_packet+0x188>)
    1836:	4013      	ands	r3, r2
    1838:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    183a:	2800      	cmp	r0, #0
    183c:	d1de      	bne.n	17fc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    183e:	0030      	movs	r0, r6
    1840:	4b38      	ldr	r3, [pc, #224]	; (1924 <_i2c_master_read_packet+0x194>)
    1842:	4798      	blx	r3
    1844:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    1846:	2800      	cmp	r0, #0
    1848:	d1d8      	bne.n	17fc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    184a:	464b      	mov	r3, r9
    184c:	881b      	ldrh	r3, [r3, #0]
    184e:	0a1b      	lsrs	r3, r3, #8
    1850:	2278      	movs	r2, #120	; 0x78
    1852:	4313      	orrs	r3, r2
    1854:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1856:	464a      	mov	r2, r9
    1858:	7a52      	ldrb	r2, [r2, #9]
    185a:	0392      	lsls	r2, r2, #14
    185c:	2101      	movs	r1, #1
    185e:	430a      	orrs	r2, r1
    1860:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1862:	626b      	str	r3, [r5, #36]	; 0x24
    1864:	e7b8      	b.n	17d8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1866:	686a      	ldr	r2, [r5, #4]
    1868:	2380      	movs	r3, #128	; 0x80
    186a:	02db      	lsls	r3, r3, #11
    186c:	4313      	orrs	r3, r2
    186e:	606b      	str	r3, [r5, #4]
    1870:	e7c1      	b.n	17f6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    1872:	0030      	movs	r0, r6
    1874:	4b2b      	ldr	r3, [pc, #172]	; (1924 <_i2c_master_read_packet+0x194>)
    1876:	4798      	blx	r3
    1878:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    187a:	2800      	cmp	r0, #0
    187c:	d1be      	bne.n	17fc <_i2c_master_read_packet+0x6c>
    187e:	3c01      	subs	r4, #1
    1880:	b2a4      	uxth	r4, r4
    1882:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    1884:	4b28      	ldr	r3, [pc, #160]	; (1928 <_i2c_master_read_packet+0x198>)
    1886:	469b      	mov	fp, r3
    1888:	e015      	b.n	18b6 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    188a:	2c01      	cmp	r4, #1
    188c:	d020      	beq.n	18d0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    188e:	0030      	movs	r0, r6
    1890:	4b26      	ldr	r3, [pc, #152]	; (192c <_i2c_master_read_packet+0x19c>)
    1892:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    1894:	4643      	mov	r3, r8
    1896:	1c5f      	adds	r7, r3, #1
    1898:	b2bf      	uxth	r7, r7
    189a:	2328      	movs	r3, #40	; 0x28
    189c:	5ceb      	ldrb	r3, [r5, r3]
    189e:	464a      	mov	r2, r9
    18a0:	6852      	ldr	r2, [r2, #4]
    18a2:	4641      	mov	r1, r8
    18a4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    18a6:	0030      	movs	r0, r6
    18a8:	4b1c      	ldr	r3, [pc, #112]	; (191c <_i2c_master_read_packet+0x18c>)
    18aa:	4798      	blx	r3
    18ac:	3c01      	subs	r4, #1
    18ae:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    18b0:	2800      	cmp	r0, #0
    18b2:	d115      	bne.n	18e0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    18b4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    18b6:	455c      	cmp	r4, fp
    18b8:	d014      	beq.n	18e4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    18ba:	8b6b      	ldrh	r3, [r5, #26]
    18bc:	069b      	lsls	r3, r3, #26
    18be:	d527      	bpl.n	1910 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    18c0:	7af3      	ldrb	r3, [r6, #11]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d0e3      	beq.n	188e <_i2c_master_read_packet+0xfe>
    18c6:	4653      	mov	r3, sl
    18c8:	2b00      	cmp	r3, #0
    18ca:	d1de      	bne.n	188a <_i2c_master_read_packet+0xfa>
    18cc:	2c00      	cmp	r4, #0
    18ce:	d1de      	bne.n	188e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18d0:	686a      	ldr	r2, [r5, #4]
    18d2:	2380      	movs	r3, #128	; 0x80
    18d4:	02db      	lsls	r3, r3, #11
    18d6:	4313      	orrs	r3, r2
    18d8:	606b      	str	r3, [r5, #4]
    18da:	3c01      	subs	r4, #1
    18dc:	b2a4      	uxth	r4, r4
    18de:	e7ea      	b.n	18b6 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    18e0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    18e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    18e4:	7ab3      	ldrb	r3, [r6, #10]
    18e6:	2b00      	cmp	r3, #0
    18e8:	d109      	bne.n	18fe <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    18ea:	0030      	movs	r0, r6
    18ec:	4b0f      	ldr	r3, [pc, #60]	; (192c <_i2c_master_read_packet+0x19c>)
    18ee:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    18f0:	2328      	movs	r3, #40	; 0x28
    18f2:	5cea      	ldrb	r2, [r5, r3]
    18f4:	464b      	mov	r3, r9
    18f6:	685b      	ldr	r3, [r3, #4]
    18f8:	4641      	mov	r1, r8
    18fa:	545a      	strb	r2, [r3, r1]
    18fc:	e77e      	b.n	17fc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    18fe:	0030      	movs	r0, r6
    1900:	4b0a      	ldr	r3, [pc, #40]	; (192c <_i2c_master_read_packet+0x19c>)
    1902:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1904:	686a      	ldr	r2, [r5, #4]
    1906:	23c0      	movs	r3, #192	; 0xc0
    1908:	029b      	lsls	r3, r3, #10
    190a:	4313      	orrs	r3, r2
    190c:	606b      	str	r3, [r5, #4]
    190e:	e7ec      	b.n	18ea <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1910:	2341      	movs	r3, #65	; 0x41
    1912:	9301      	str	r3, [sp, #4]
    1914:	e772      	b.n	17fc <_i2c_master_read_packet+0x6c>
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	fffbffff 	.word	0xfffbffff
    191c:	00001745 	.word	0x00001745
    1920:	00001771 	.word	0x00001771
    1924:	00001715 	.word	0x00001715
    1928:	0000ffff 	.word	0x0000ffff
    192c:	000013fd 	.word	0x000013fd

00001930 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1930:	b5f0      	push	{r4, r5, r6, r7, lr}
    1932:	46de      	mov	lr, fp
    1934:	4657      	mov	r7, sl
    1936:	464e      	mov	r6, r9
    1938:	4645      	mov	r5, r8
    193a:	b5e0      	push	{r5, r6, r7, lr}
    193c:	b083      	sub	sp, #12
    193e:	0006      	movs	r6, r0
    1940:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1942:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1944:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    1946:	4b32      	ldr	r3, [pc, #200]	; (1a10 <_i2c_master_write_packet+0xe0>)
    1948:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    194a:	7a7b      	ldrb	r3, [r7, #9]
    194c:	2b00      	cmp	r3, #0
    194e:	d11d      	bne.n	198c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1950:	686b      	ldr	r3, [r5, #4]
    1952:	4a30      	ldr	r2, [pc, #192]	; (1a14 <_i2c_master_write_packet+0xe4>)
    1954:	4013      	ands	r3, r2
    1956:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1958:	7a3b      	ldrb	r3, [r7, #8]
    195a:	2b00      	cmp	r3, #0
    195c:	d01b      	beq.n	1996 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    195e:	883b      	ldrh	r3, [r7, #0]
    1960:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1962:	7a7a      	ldrb	r2, [r7, #9]
    1964:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1966:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1968:	2280      	movs	r2, #128	; 0x80
    196a:	0212      	lsls	r2, r2, #8
    196c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    196e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1970:	0030      	movs	r0, r6
    1972:	4b29      	ldr	r3, [pc, #164]	; (1a18 <_i2c_master_write_packet+0xe8>)
    1974:	4798      	blx	r3
    1976:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1978:	2800      	cmp	r0, #0
    197a:	d013      	beq.n	19a4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    197c:	9801      	ldr	r0, [sp, #4]
    197e:	b003      	add	sp, #12
    1980:	bc3c      	pop	{r2, r3, r4, r5}
    1982:	4690      	mov	r8, r2
    1984:	4699      	mov	r9, r3
    1986:	46a2      	mov	sl, r4
    1988:	46ab      	mov	fp, r5
    198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    198c:	7ab9      	ldrb	r1, [r7, #10]
    198e:	0030      	movs	r0, r6
    1990:	4b22      	ldr	r3, [pc, #136]	; (1a1c <_i2c_master_write_packet+0xec>)
    1992:	4798      	blx	r3
    1994:	e7dc      	b.n	1950 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1996:	883b      	ldrh	r3, [r7, #0]
    1998:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    199a:	7a7a      	ldrb	r2, [r7, #9]
    199c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    199e:	4313      	orrs	r3, r2
    19a0:	626b      	str	r3, [r5, #36]	; 0x24
    19a2:	e7e5      	b.n	1970 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    19a4:	0030      	movs	r0, r6
    19a6:	4b1e      	ldr	r3, [pc, #120]	; (1a20 <_i2c_master_write_packet+0xf0>)
    19a8:	4798      	blx	r3
    19aa:	1e03      	subs	r3, r0, #0
    19ac:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    19ae:	d1e5      	bne.n	197c <_i2c_master_write_packet+0x4c>
    19b0:	46a0      	mov	r8, r4
    19b2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    19b4:	3320      	adds	r3, #32
    19b6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    19b8:	4b15      	ldr	r3, [pc, #84]	; (1a10 <_i2c_master_write_packet+0xe0>)
    19ba:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    19bc:	4b16      	ldr	r3, [pc, #88]	; (1a18 <_i2c_master_write_packet+0xe8>)
    19be:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    19c0:	4544      	cmp	r4, r8
    19c2:	d015      	beq.n	19f0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    19c4:	8b6b      	ldrh	r3, [r5, #26]
    19c6:	464a      	mov	r2, r9
    19c8:	4213      	tst	r3, r2
    19ca:	d01d      	beq.n	1a08 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    19cc:	0030      	movs	r0, r6
    19ce:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	5d1a      	ldrb	r2, [r3, r4]
    19d4:	2328      	movs	r3, #40	; 0x28
    19d6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    19d8:	0030      	movs	r0, r6
    19da:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    19dc:	2800      	cmp	r0, #0
    19de:	d106      	bne.n	19ee <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    19e0:	8b6b      	ldrh	r3, [r5, #26]
    19e2:	3401      	adds	r4, #1
    19e4:	075b      	lsls	r3, r3, #29
    19e6:	d5eb      	bpl.n	19c0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    19e8:	231e      	movs	r3, #30
    19ea:	9301      	str	r3, [sp, #4]
    19ec:	e000      	b.n	19f0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    19ee:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    19f0:	7ab3      	ldrb	r3, [r6, #10]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d0c2      	beq.n	197c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    19f6:	0030      	movs	r0, r6
    19f8:	4b05      	ldr	r3, [pc, #20]	; (1a10 <_i2c_master_write_packet+0xe0>)
    19fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    19fc:	686a      	ldr	r2, [r5, #4]
    19fe:	23c0      	movs	r3, #192	; 0xc0
    1a00:	029b      	lsls	r3, r3, #10
    1a02:	4313      	orrs	r3, r2
    1a04:	606b      	str	r3, [r5, #4]
    1a06:	e7b9      	b.n	197c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1a08:	2341      	movs	r3, #65	; 0x41
    1a0a:	9301      	str	r3, [sp, #4]
    1a0c:	e7b6      	b.n	197c <_i2c_master_write_packet+0x4c>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	000013fd 	.word	0x000013fd
    1a14:	fffbffff 	.word	0xfffbffff
    1a18:	00001745 	.word	0x00001745
    1a1c:	00001771 	.word	0x00001771
    1a20:	00001715 	.word	0x00001715

00001a24 <i2c_master_read_packet_wait>:
{
    1a24:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    1a26:	8b83      	ldrh	r3, [r0, #28]
    1a28:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1a2a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d001      	beq.n	1a34 <i2c_master_read_packet_wait+0x10>
}
    1a30:	0010      	movs	r0, r2
    1a32:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1a34:	3301      	adds	r3, #1
    1a36:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1a38:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    1a3a:	4b02      	ldr	r3, [pc, #8]	; (1a44 <i2c_master_read_packet_wait+0x20>)
    1a3c:	4798      	blx	r3
    1a3e:	0002      	movs	r2, r0
    1a40:	e7f6      	b.n	1a30 <i2c_master_read_packet_wait+0xc>
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	00001791 	.word	0x00001791

00001a48 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1a48:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1a4a:	8b83      	ldrh	r3, [r0, #28]
    1a4c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1a4e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1a50:	2b00      	cmp	r3, #0
    1a52:	d001      	beq.n	1a58 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    1a54:	0010      	movs	r0, r2
    1a56:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    1a58:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1a5a:	3301      	adds	r3, #1
    1a5c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    1a5e:	4b02      	ldr	r3, [pc, #8]	; (1a68 <i2c_master_write_packet_wait_no_stop+0x20>)
    1a60:	4798      	blx	r3
    1a62:	0002      	movs	r2, r0
    1a64:	e7f6      	b.n	1a54 <i2c_master_write_packet_wait_no_stop+0xc>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	00001931 	.word	0x00001931

00001a6c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1a6c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1a6e:	2207      	movs	r2, #7
    1a70:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1a72:	421a      	tst	r2, r3
    1a74:	d1fc      	bne.n	1a70 <_i2c_master_wait_for_sync+0x4>
}
    1a76:	4770      	bx	lr

00001a78 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1a78:	b570      	push	{r4, r5, r6, lr}
    1a7a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a7c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1a7e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1a80:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1a82:	8b83      	ldrh	r3, [r0, #28]
    1a84:	1aed      	subs	r5, r5, r3
    1a86:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    1a88:	8b83      	ldrh	r3, [r0, #28]
    1a8a:	3b01      	subs	r3, #1
    1a8c:	b29b      	uxth	r3, r3
    1a8e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1a90:	0113      	lsls	r3, r2, #4
    1a92:	d51d      	bpl.n	1ad0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1a94:	7ac3      	ldrb	r3, [r0, #11]
    1a96:	2b00      	cmp	r3, #0
    1a98:	d003      	beq.n	1aa2 <_i2c_master_read+0x2a>
    1a9a:	8b83      	ldrh	r3, [r0, #28]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	2b01      	cmp	r3, #1
    1aa0:	d010      	beq.n	1ac4 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1aa2:	8ba3      	ldrh	r3, [r4, #28]
    1aa4:	b29b      	uxth	r3, r3
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	d102      	bne.n	1ab0 <_i2c_master_read+0x38>
		if (module->send_stop) {
    1aaa:	7aa3      	ldrb	r3, [r4, #10]
    1aac:	2b00      	cmp	r3, #0
    1aae:	d11c      	bne.n	1aea <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1ab0:	0020      	movs	r0, r4
    1ab2:	4b12      	ldr	r3, [pc, #72]	; (1afc <_i2c_master_read+0x84>)
    1ab4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1ab6:	6a23      	ldr	r3, [r4, #32]
    1ab8:	195d      	adds	r5, r3, r5
    1aba:	2328      	movs	r3, #40	; 0x28
    1abc:	5cf3      	ldrb	r3, [r6, r3]
    1abe:	b2db      	uxtb	r3, r3
    1ac0:	702b      	strb	r3, [r5, #0]
}
    1ac2:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ac4:	6872      	ldr	r2, [r6, #4]
    1ac6:	2380      	movs	r3, #128	; 0x80
    1ac8:	02db      	lsls	r3, r3, #11
    1aca:	4313      	orrs	r3, r2
    1acc:	6073      	str	r3, [r6, #4]
    1ace:	e7e8      	b.n	1aa2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1ad0:	7ac3      	ldrb	r3, [r0, #11]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d0e5      	beq.n	1aa2 <_i2c_master_read+0x2a>
    1ad6:	8b83      	ldrh	r3, [r0, #28]
    1ad8:	b29b      	uxth	r3, r3
    1ada:	2b00      	cmp	r3, #0
    1adc:	d1e1      	bne.n	1aa2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ade:	6872      	ldr	r2, [r6, #4]
    1ae0:	2380      	movs	r3, #128	; 0x80
    1ae2:	02db      	lsls	r3, r3, #11
    1ae4:	4313      	orrs	r3, r2
    1ae6:	6073      	str	r3, [r6, #4]
    1ae8:	e7db      	b.n	1aa2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1aea:	0020      	movs	r0, r4
    1aec:	4b03      	ldr	r3, [pc, #12]	; (1afc <_i2c_master_read+0x84>)
    1aee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1af0:	6872      	ldr	r2, [r6, #4]
    1af2:	23c0      	movs	r3, #192	; 0xc0
    1af4:	029b      	lsls	r3, r3, #10
    1af6:	4313      	orrs	r3, r2
    1af8:	6073      	str	r3, [r6, #4]
    1afa:	e7d9      	b.n	1ab0 <_i2c_master_read+0x38>
    1afc:	00001a6d 	.word	0x00001a6d

00001b00 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b04:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1b06:	8b6b      	ldrh	r3, [r5, #26]
    1b08:	075b      	lsls	r3, r3, #29
    1b0a:	d503      	bpl.n	1b14 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1b0c:	221e      	movs	r2, #30
    1b0e:	2325      	movs	r3, #37	; 0x25
    1b10:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1b12:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1b14:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1b16:	8b83      	ldrh	r3, [r0, #28]
    1b18:	1af6      	subs	r6, r6, r3
    1b1a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1b1c:	8b83      	ldrh	r3, [r0, #28]
    1b1e:	3b01      	subs	r3, #1
    1b20:	b29b      	uxth	r3, r3
    1b22:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1b24:	4b04      	ldr	r3, [pc, #16]	; (1b38 <_i2c_master_write+0x38>)
    1b26:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1b28:	6a23      	ldr	r3, [r4, #32]
    1b2a:	199e      	adds	r6, r3, r6
    1b2c:	7833      	ldrb	r3, [r6, #0]
    1b2e:	b2db      	uxtb	r3, r3
    1b30:	2228      	movs	r2, #40	; 0x28
    1b32:	54ab      	strb	r3, [r5, r2]
    1b34:	e7ed      	b.n	1b12 <_i2c_master_write+0x12>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	00001a6d 	.word	0x00001a6d

00001b3c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1b3e:	0080      	lsls	r0, r0, #2
    1b40:	4b75      	ldr	r3, [pc, #468]	; (1d18 <_i2c_master_interrupt_handler+0x1dc>)
    1b42:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b44:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1b46:	682b      	ldr	r3, [r5, #0]
    1b48:	011b      	lsls	r3, r3, #4
    1b4a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1b4c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1b4e:	7e26      	ldrb	r6, [r4, #24]
    1b50:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1b52:	8b63      	ldrh	r3, [r4, #26]
    1b54:	b29b      	uxth	r3, r3
    1b56:	2b00      	cmp	r3, #0
    1b58:	d103      	bne.n	1b62 <_i2c_master_interrupt_handler+0x26>
    1b5a:	8ba3      	ldrh	r3, [r4, #28]
    1b5c:	b29b      	uxth	r3, r3
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d123      	bne.n	1baa <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b62:	8b63      	ldrh	r3, [r4, #26]
    1b64:	b29b      	uxth	r3, r3
    1b66:	2b00      	cmp	r3, #0
    1b68:	d008      	beq.n	1b7c <_i2c_master_interrupt_handler+0x40>
    1b6a:	8ba3      	ldrh	r3, [r4, #28]
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d104      	bne.n	1b7c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1b72:	3325      	adds	r3, #37	; 0x25
    1b74:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1b76:	2b05      	cmp	r3, #5
    1b78:	d100      	bne.n	1b7c <_i2c_master_interrupt_handler+0x40>
    1b7a:	e06d      	b.n	1c58 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1b7c:	8b63      	ldrh	r3, [r4, #26]
    1b7e:	b29b      	uxth	r3, r3
    1b80:	2b00      	cmp	r3, #0
    1b82:	d024      	beq.n	1bce <_i2c_master_interrupt_handler+0x92>
    1b84:	8ba3      	ldrh	r3, [r4, #28]
    1b86:	b29b      	uxth	r3, r3
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d020      	beq.n	1bce <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1b8c:	8b6b      	ldrh	r3, [r5, #26]
    1b8e:	069b      	lsls	r3, r3, #26
    1b90:	d500      	bpl.n	1b94 <_i2c_master_interrupt_handler+0x58>
    1b92:	e081      	b.n	1c98 <_i2c_master_interrupt_handler+0x15c>
    1b94:	2a00      	cmp	r2, #0
    1b96:	d004      	beq.n	1ba2 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1b98:	8ba3      	ldrh	r3, [r4, #28]
    1b9a:	b29b      	uxth	r3, r3
    1b9c:	2b01      	cmp	r3, #1
    1b9e:	d100      	bne.n	1ba2 <_i2c_master_interrupt_handler+0x66>
    1ba0:	e07a      	b.n	1c98 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1ba2:	2241      	movs	r2, #65	; 0x41
    1ba4:	2325      	movs	r3, #37	; 0x25
    1ba6:	54e2      	strb	r2, [r4, r3]
    1ba8:	e011      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1baa:	7e2b      	ldrb	r3, [r5, #24]
    1bac:	07db      	lsls	r3, r3, #31
    1bae:	d507      	bpl.n	1bc0 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1bb0:	2301      	movs	r3, #1
    1bb2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1bb4:	8b6b      	ldrh	r3, [r5, #26]
    1bb6:	079b      	lsls	r3, r3, #30
    1bb8:	d52e      	bpl.n	1c18 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1bba:	2241      	movs	r2, #65	; 0x41
    1bbc:	2325      	movs	r3, #37	; 0x25
    1bbe:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1bc0:	8ba3      	ldrh	r3, [r4, #28]
    1bc2:	b29b      	uxth	r3, r3
    1bc4:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1bc6:	2325      	movs	r3, #37	; 0x25
    1bc8:	5ce3      	ldrb	r3, [r4, r3]
    1bca:	2b05      	cmp	r3, #5
    1bcc:	d038      	beq.n	1c40 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1bce:	8b63      	ldrh	r3, [r4, #26]
    1bd0:	b29b      	uxth	r3, r3
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d007      	beq.n	1be6 <_i2c_master_interrupt_handler+0xaa>
    1bd6:	8ba3      	ldrh	r3, [r4, #28]
    1bd8:	b29b      	uxth	r3, r3
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d103      	bne.n	1be6 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1bde:	3325      	adds	r3, #37	; 0x25
    1be0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1be2:	2b05      	cmp	r3, #5
    1be4:	d064      	beq.n	1cb0 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1be6:	2325      	movs	r3, #37	; 0x25
    1be8:	5ce3      	ldrb	r3, [r4, r3]
    1bea:	2b05      	cmp	r3, #5
    1bec:	d013      	beq.n	1c16 <_i2c_master_interrupt_handler+0xda>
    1bee:	2325      	movs	r3, #37	; 0x25
    1bf0:	5ce3      	ldrb	r3, [r4, r3]
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d00f      	beq.n	1c16 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1bf6:	2303      	movs	r3, #3
    1bf8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1bfa:	2300      	movs	r3, #0
    1bfc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1bfe:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1c00:	3325      	adds	r3, #37	; 0x25
    1c02:	5ce3      	ldrb	r3, [r4, r3]
    1c04:	2b41      	cmp	r3, #65	; 0x41
    1c06:	d003      	beq.n	1c10 <_i2c_master_interrupt_handler+0xd4>
    1c08:	7aa3      	ldrb	r3, [r4, #10]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d000      	beq.n	1c10 <_i2c_master_interrupt_handler+0xd4>
    1c0e:	e075      	b.n	1cfc <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1c10:	0773      	lsls	r3, r6, #29
    1c12:	d500      	bpl.n	1c16 <_i2c_master_interrupt_handler+0xda>
    1c14:	e07b      	b.n	1d0e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1c16:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1c18:	8b6b      	ldrh	r3, [r5, #26]
    1c1a:	075b      	lsls	r3, r3, #29
    1c1c:	d5d0      	bpl.n	1bc0 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1c1e:	2218      	movs	r2, #24
    1c20:	2325      	movs	r3, #37	; 0x25
    1c22:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1c24:	2300      	movs	r3, #0
    1c26:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1c28:	7aa3      	ldrb	r3, [r4, #10]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d0c8      	beq.n	1bc0 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1c2e:	0020      	movs	r0, r4
    1c30:	4b3a      	ldr	r3, [pc, #232]	; (1d1c <_i2c_master_interrupt_handler+0x1e0>)
    1c32:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c34:	686a      	ldr	r2, [r5, #4]
    1c36:	23c0      	movs	r3, #192	; 0xc0
    1c38:	029b      	lsls	r3, r3, #10
    1c3a:	4313      	orrs	r3, r2
    1c3c:	606b      	str	r3, [r5, #4]
    1c3e:	e7bf      	b.n	1bc0 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1c40:	331f      	adds	r3, #31
    1c42:	5ce3      	ldrb	r3, [r4, r3]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d003      	beq.n	1c50 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1c48:	0020      	movs	r0, r4
    1c4a:	4b35      	ldr	r3, [pc, #212]	; (1d20 <_i2c_master_interrupt_handler+0x1e4>)
    1c4c:	4798      	blx	r3
    1c4e:	e7be      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1c50:	0020      	movs	r0, r4
    1c52:	4b34      	ldr	r3, [pc, #208]	; (1d24 <_i2c_master_interrupt_handler+0x1e8>)
    1c54:	4798      	blx	r3
    1c56:	e7ba      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1c58:	331f      	adds	r3, #31
    1c5a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d000      	beq.n	1c62 <_i2c_master_interrupt_handler+0x126>
    1c60:	e78c      	b.n	1b7c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1c62:	3303      	adds	r3, #3
    1c64:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1c66:	2300      	movs	r3, #0
    1c68:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1c6a:	3325      	adds	r3, #37	; 0x25
    1c6c:	2200      	movs	r2, #0
    1c6e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1c70:	7aa3      	ldrb	r3, [r4, #10]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d107      	bne.n	1c86 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1c76:	2301      	movs	r3, #1
    1c78:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1c7a:	07f3      	lsls	r3, r6, #31
    1c7c:	d5a7      	bpl.n	1bce <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1c7e:	68e3      	ldr	r3, [r4, #12]
    1c80:	0020      	movs	r0, r4
    1c82:	4798      	blx	r3
    1c84:	e7a3      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1c86:	0020      	movs	r0, r4
    1c88:	4b24      	ldr	r3, [pc, #144]	; (1d1c <_i2c_master_interrupt_handler+0x1e0>)
    1c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c8c:	686a      	ldr	r2, [r5, #4]
    1c8e:	23c0      	movs	r3, #192	; 0xc0
    1c90:	029b      	lsls	r3, r3, #10
    1c92:	4313      	orrs	r3, r2
    1c94:	606b      	str	r3, [r5, #4]
    1c96:	e7f0      	b.n	1c7a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1c98:	2324      	movs	r3, #36	; 0x24
    1c9a:	5ce3      	ldrb	r3, [r4, r3]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d103      	bne.n	1ca8 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1ca0:	0020      	movs	r0, r4
    1ca2:	4b20      	ldr	r3, [pc, #128]	; (1d24 <_i2c_master_interrupt_handler+0x1e8>)
    1ca4:	4798      	blx	r3
    1ca6:	e792      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1ca8:	0020      	movs	r0, r4
    1caa:	4b1d      	ldr	r3, [pc, #116]	; (1d20 <_i2c_master_interrupt_handler+0x1e4>)
    1cac:	4798      	blx	r3
    1cae:	e78e      	b.n	1bce <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1cb0:	331f      	adds	r3, #31
    1cb2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1cb4:	2b01      	cmp	r3, #1
    1cb6:	d196      	bne.n	1be6 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1cb8:	7e2b      	ldrb	r3, [r5, #24]
    1cba:	079b      	lsls	r3, r3, #30
    1cbc:	d501      	bpl.n	1cc2 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1cbe:	2302      	movs	r3, #2
    1cc0:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1cc2:	2303      	movs	r3, #3
    1cc4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1cc6:	2300      	movs	r3, #0
    1cc8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1cca:	3325      	adds	r3, #37	; 0x25
    1ccc:	2200      	movs	r2, #0
    1cce:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1cd0:	07b3      	lsls	r3, r6, #30
    1cd2:	d503      	bpl.n	1cdc <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1cd4:	2324      	movs	r3, #36	; 0x24
    1cd6:	5ce3      	ldrb	r3, [r4, r3]
    1cd8:	2b01      	cmp	r3, #1
    1cda:	d00b      	beq.n	1cf4 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1cdc:	07f3      	lsls	r3, r6, #31
    1cde:	d400      	bmi.n	1ce2 <_i2c_master_interrupt_handler+0x1a6>
    1ce0:	e781      	b.n	1be6 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1ce2:	2324      	movs	r3, #36	; 0x24
    1ce4:	5ce3      	ldrb	r3, [r4, r3]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d000      	beq.n	1cec <_i2c_master_interrupt_handler+0x1b0>
    1cea:	e77c      	b.n	1be6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1cec:	68e3      	ldr	r3, [r4, #12]
    1cee:	0020      	movs	r0, r4
    1cf0:	4798      	blx	r3
    1cf2:	e778      	b.n	1be6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1cf4:	6923      	ldr	r3, [r4, #16]
    1cf6:	0020      	movs	r0, r4
    1cf8:	4798      	blx	r3
    1cfa:	e774      	b.n	1be6 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1cfc:	0020      	movs	r0, r4
    1cfe:	4b07      	ldr	r3, [pc, #28]	; (1d1c <_i2c_master_interrupt_handler+0x1e0>)
    1d00:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1d02:	686a      	ldr	r2, [r5, #4]
    1d04:	23e0      	movs	r3, #224	; 0xe0
    1d06:	02db      	lsls	r3, r3, #11
    1d08:	4313      	orrs	r3, r2
    1d0a:	606b      	str	r3, [r5, #4]
    1d0c:	e780      	b.n	1c10 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1d0e:	6963      	ldr	r3, [r4, #20]
    1d10:	0020      	movs	r0, r4
    1d12:	4798      	blx	r3
}
    1d14:	e77f      	b.n	1c16 <_i2c_master_interrupt_handler+0xda>
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	20000ff8 	.word	0x20000ff8
    1d1c:	00001a6d 	.word	0x00001a6d
    1d20:	00001a79 	.word	0x00001a79
    1d24:	00001b01 	.word	0x00001b01

00001d28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	46de      	mov	lr, fp
    1d2c:	4657      	mov	r7, sl
    1d2e:	464e      	mov	r6, r9
    1d30:	4645      	mov	r5, r8
    1d32:	b5e0      	push	{r5, r6, r7, lr}
    1d34:	b087      	sub	sp, #28
    1d36:	4680      	mov	r8, r0
    1d38:	9104      	str	r1, [sp, #16]
    1d3a:	0016      	movs	r6, r2
    1d3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1d3e:	2200      	movs	r2, #0
    1d40:	2300      	movs	r3, #0
    1d42:	2100      	movs	r1, #0
    1d44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1d46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1d48:	2001      	movs	r0, #1
    1d4a:	0021      	movs	r1, r4
    1d4c:	9600      	str	r6, [sp, #0]
    1d4e:	9701      	str	r7, [sp, #4]
    1d50:	465c      	mov	r4, fp
    1d52:	9403      	str	r4, [sp, #12]
    1d54:	4644      	mov	r4, r8
    1d56:	9405      	str	r4, [sp, #20]
    1d58:	e013      	b.n	1d82 <long_division+0x5a>
    1d5a:	2420      	movs	r4, #32
    1d5c:	1a64      	subs	r4, r4, r1
    1d5e:	0005      	movs	r5, r0
    1d60:	40e5      	lsrs	r5, r4
    1d62:	46a8      	mov	r8, r5
    1d64:	e014      	b.n	1d90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1d66:	9c00      	ldr	r4, [sp, #0]
    1d68:	9d01      	ldr	r5, [sp, #4]
    1d6a:	1b12      	subs	r2, r2, r4
    1d6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1d6e:	465c      	mov	r4, fp
    1d70:	464d      	mov	r5, r9
    1d72:	432c      	orrs	r4, r5
    1d74:	46a3      	mov	fp, r4
    1d76:	9c03      	ldr	r4, [sp, #12]
    1d78:	4645      	mov	r5, r8
    1d7a:	432c      	orrs	r4, r5
    1d7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1d7e:	3901      	subs	r1, #1
    1d80:	d325      	bcc.n	1dce <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1d82:	2420      	movs	r4, #32
    1d84:	4264      	negs	r4, r4
    1d86:	190c      	adds	r4, r1, r4
    1d88:	d4e7      	bmi.n	1d5a <long_division+0x32>
    1d8a:	0005      	movs	r5, r0
    1d8c:	40a5      	lsls	r5, r4
    1d8e:	46a8      	mov	r8, r5
    1d90:	0004      	movs	r4, r0
    1d92:	408c      	lsls	r4, r1
    1d94:	46a1      	mov	r9, r4
		r = r << 1;
    1d96:	1892      	adds	r2, r2, r2
    1d98:	415b      	adcs	r3, r3
    1d9a:	0014      	movs	r4, r2
    1d9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1d9e:	9e05      	ldr	r6, [sp, #20]
    1da0:	464f      	mov	r7, r9
    1da2:	403e      	ands	r6, r7
    1da4:	46b4      	mov	ip, r6
    1da6:	9e04      	ldr	r6, [sp, #16]
    1da8:	4647      	mov	r7, r8
    1daa:	403e      	ands	r6, r7
    1dac:	46b2      	mov	sl, r6
    1dae:	4666      	mov	r6, ip
    1db0:	4657      	mov	r7, sl
    1db2:	433e      	orrs	r6, r7
    1db4:	d003      	beq.n	1dbe <long_division+0x96>
			r |= 0x01;
    1db6:	0006      	movs	r6, r0
    1db8:	4326      	orrs	r6, r4
    1dba:	0032      	movs	r2, r6
    1dbc:	002b      	movs	r3, r5
		if (r >= d) {
    1dbe:	9c00      	ldr	r4, [sp, #0]
    1dc0:	9d01      	ldr	r5, [sp, #4]
    1dc2:	429d      	cmp	r5, r3
    1dc4:	d8db      	bhi.n	1d7e <long_division+0x56>
    1dc6:	d1ce      	bne.n	1d66 <long_division+0x3e>
    1dc8:	4294      	cmp	r4, r2
    1dca:	d8d8      	bhi.n	1d7e <long_division+0x56>
    1dcc:	e7cb      	b.n	1d66 <long_division+0x3e>
    1dce:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1dd0:	4658      	mov	r0, fp
    1dd2:	0019      	movs	r1, r3
    1dd4:	b007      	add	sp, #28
    1dd6:	bc3c      	pop	{r2, r3, r4, r5}
    1dd8:	4690      	mov	r8, r2
    1dda:	4699      	mov	r9, r3
    1ddc:	46a2      	mov	sl, r4
    1dde:	46ab      	mov	fp, r5
    1de0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001de2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1de2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1de4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1de6:	2340      	movs	r3, #64	; 0x40
    1de8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1dea:	4281      	cmp	r1, r0
    1dec:	d202      	bcs.n	1df4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1dee:	0018      	movs	r0, r3
    1df0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1df2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1df4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1df6:	1c63      	adds	r3, r4, #1
    1df8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1dfa:	4288      	cmp	r0, r1
    1dfc:	d9f9      	bls.n	1df2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1dfe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1e00:	2cff      	cmp	r4, #255	; 0xff
    1e02:	d8f4      	bhi.n	1dee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1e04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1e06:	2300      	movs	r3, #0
    1e08:	e7f1      	b.n	1dee <_sercom_get_sync_baud_val+0xc>
	...

00001e0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e0e:	b083      	sub	sp, #12
    1e10:	000f      	movs	r7, r1
    1e12:	0016      	movs	r6, r2
    1e14:	aa08      	add	r2, sp, #32
    1e16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e18:	0004      	movs	r4, r0
    1e1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1e1e:	42bc      	cmp	r4, r7
    1e20:	d902      	bls.n	1e28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1e22:	0010      	movs	r0, r2
    1e24:	b003      	add	sp, #12
    1e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d114      	bne.n	1e56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1e2c:	0002      	movs	r2, r0
    1e2e:	0008      	movs	r0, r1
    1e30:	2100      	movs	r1, #0
    1e32:	4c19      	ldr	r4, [pc, #100]	; (1e98 <_sercom_get_async_baud_val+0x8c>)
    1e34:	47a0      	blx	r4
    1e36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1e38:	003a      	movs	r2, r7
    1e3a:	2300      	movs	r3, #0
    1e3c:	2000      	movs	r0, #0
    1e3e:	4c17      	ldr	r4, [pc, #92]	; (1e9c <_sercom_get_async_baud_val+0x90>)
    1e40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1e42:	2200      	movs	r2, #0
    1e44:	2301      	movs	r3, #1
    1e46:	1a12      	subs	r2, r2, r0
    1e48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1e4a:	0c12      	lsrs	r2, r2, #16
    1e4c:	041b      	lsls	r3, r3, #16
    1e4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1e50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1e52:	2200      	movs	r2, #0
    1e54:	e7e5      	b.n	1e22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1e56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1e58:	2b01      	cmp	r3, #1
    1e5a:	d1f9      	bne.n	1e50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1e5c:	000a      	movs	r2, r1
    1e5e:	2300      	movs	r3, #0
    1e60:	2100      	movs	r1, #0
    1e62:	4c0d      	ldr	r4, [pc, #52]	; (1e98 <_sercom_get_async_baud_val+0x8c>)
    1e64:	47a0      	blx	r4
    1e66:	0002      	movs	r2, r0
    1e68:	000b      	movs	r3, r1
    1e6a:	9200      	str	r2, [sp, #0]
    1e6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1e6e:	0038      	movs	r0, r7
    1e70:	2100      	movs	r1, #0
    1e72:	4c0a      	ldr	r4, [pc, #40]	; (1e9c <_sercom_get_async_baud_val+0x90>)
    1e74:	47a0      	blx	r4
    1e76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1e78:	2380      	movs	r3, #128	; 0x80
    1e7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1e7e:	4298      	cmp	r0, r3
    1e80:	d8cf      	bhi.n	1e22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1e82:	0f79      	lsrs	r1, r7, #29
    1e84:	00f8      	lsls	r0, r7, #3
    1e86:	9a00      	ldr	r2, [sp, #0]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1e8c:	00ea      	lsls	r2, r5, #3
    1e8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1e90:	b2d2      	uxtb	r2, r2
    1e92:	0352      	lsls	r2, r2, #13
    1e94:	432a      	orrs	r2, r5
    1e96:	e7db      	b.n	1e50 <_sercom_get_async_baud_val+0x44>
    1e98:	00010d5d 	.word	0x00010d5d
    1e9c:	00001d29 	.word	0x00001d29

00001ea0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1ea0:	b510      	push	{r4, lr}
    1ea2:	b082      	sub	sp, #8
    1ea4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1ea6:	4b0e      	ldr	r3, [pc, #56]	; (1ee0 <sercom_set_gclk_generator+0x40>)
    1ea8:	781b      	ldrb	r3, [r3, #0]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d007      	beq.n	1ebe <sercom_set_gclk_generator+0x1e>
    1eae:	2900      	cmp	r1, #0
    1eb0:	d105      	bne.n	1ebe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1eb2:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <sercom_set_gclk_generator+0x40>)
    1eb4:	785b      	ldrb	r3, [r3, #1]
    1eb6:	4283      	cmp	r3, r0
    1eb8:	d010      	beq.n	1edc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1eba:	201d      	movs	r0, #29
    1ebc:	e00c      	b.n	1ed8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1ebe:	a901      	add	r1, sp, #4
    1ec0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1ec2:	2011      	movs	r0, #17
    1ec4:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <sercom_set_gclk_generator+0x44>)
    1ec6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1ec8:	2011      	movs	r0, #17
    1eca:	4b07      	ldr	r3, [pc, #28]	; (1ee8 <sercom_set_gclk_generator+0x48>)
    1ecc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1ece:	4b04      	ldr	r3, [pc, #16]	; (1ee0 <sercom_set_gclk_generator+0x40>)
    1ed0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1ed2:	2201      	movs	r2, #1
    1ed4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1ed6:	2000      	movs	r0, #0
}
    1ed8:	b002      	add	sp, #8
    1eda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1edc:	2000      	movs	r0, #0
    1ede:	e7fb      	b.n	1ed8 <sercom_set_gclk_generator+0x38>
    1ee0:	20000a14 	.word	0x20000a14
    1ee4:	0000329d 	.word	0x0000329d
    1ee8:	0000322d 	.word	0x0000322d

00001eec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1eec:	4b3c      	ldr	r3, [pc, #240]	; (1fe0 <_sercom_get_default_pad+0xf4>)
    1eee:	4298      	cmp	r0, r3
    1ef0:	d032      	beq.n	1f58 <_sercom_get_default_pad+0x6c>
    1ef2:	d90a      	bls.n	1f0a <_sercom_get_default_pad+0x1e>
    1ef4:	4b3b      	ldr	r3, [pc, #236]	; (1fe4 <_sercom_get_default_pad+0xf8>)
    1ef6:	4298      	cmp	r0, r3
    1ef8:	d04e      	beq.n	1f98 <_sercom_get_default_pad+0xac>
    1efa:	4b3b      	ldr	r3, [pc, #236]	; (1fe8 <_sercom_get_default_pad+0xfc>)
    1efc:	4298      	cmp	r0, r3
    1efe:	d055      	beq.n	1fac <_sercom_get_default_pad+0xc0>
    1f00:	4b3a      	ldr	r3, [pc, #232]	; (1fec <_sercom_get_default_pad+0x100>)
    1f02:	4298      	cmp	r0, r3
    1f04:	d038      	beq.n	1f78 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1f06:	2000      	movs	r0, #0
}
    1f08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1f0a:	2384      	movs	r3, #132	; 0x84
    1f0c:	05db      	lsls	r3, r3, #23
    1f0e:	4298      	cmp	r0, r3
    1f10:	d00c      	beq.n	1f2c <_sercom_get_default_pad+0x40>
    1f12:	4b37      	ldr	r3, [pc, #220]	; (1ff0 <_sercom_get_default_pad+0x104>)
    1f14:	4298      	cmp	r0, r3
    1f16:	d1f6      	bne.n	1f06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f18:	2901      	cmp	r1, #1
    1f1a:	d017      	beq.n	1f4c <_sercom_get_default_pad+0x60>
    1f1c:	2900      	cmp	r1, #0
    1f1e:	d057      	beq.n	1fd0 <_sercom_get_default_pad+0xe4>
    1f20:	2902      	cmp	r1, #2
    1f22:	d015      	beq.n	1f50 <_sercom_get_default_pad+0x64>
    1f24:	2903      	cmp	r1, #3
    1f26:	d015      	beq.n	1f54 <_sercom_get_default_pad+0x68>
	return 0;
    1f28:	2000      	movs	r0, #0
    1f2a:	e7ed      	b.n	1f08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f2c:	2901      	cmp	r1, #1
    1f2e:	d007      	beq.n	1f40 <_sercom_get_default_pad+0x54>
    1f30:	2900      	cmp	r1, #0
    1f32:	d04b      	beq.n	1fcc <_sercom_get_default_pad+0xe0>
    1f34:	2902      	cmp	r1, #2
    1f36:	d005      	beq.n	1f44 <_sercom_get_default_pad+0x58>
    1f38:	2903      	cmp	r1, #3
    1f3a:	d005      	beq.n	1f48 <_sercom_get_default_pad+0x5c>
	return 0;
    1f3c:	2000      	movs	r0, #0
    1f3e:	e7e3      	b.n	1f08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f40:	482c      	ldr	r0, [pc, #176]	; (1ff4 <_sercom_get_default_pad+0x108>)
    1f42:	e7e1      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f44:	482c      	ldr	r0, [pc, #176]	; (1ff8 <_sercom_get_default_pad+0x10c>)
    1f46:	e7df      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f48:	482c      	ldr	r0, [pc, #176]	; (1ffc <_sercom_get_default_pad+0x110>)
    1f4a:	e7dd      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f4c:	482c      	ldr	r0, [pc, #176]	; (2000 <STACK_SIZE>)
    1f4e:	e7db      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f50:	482c      	ldr	r0, [pc, #176]	; (2004 <STACK_SIZE+0x4>)
    1f52:	e7d9      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f54:	482c      	ldr	r0, [pc, #176]	; (2008 <STACK_SIZE+0x8>)
    1f56:	e7d7      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f58:	2901      	cmp	r1, #1
    1f5a:	d007      	beq.n	1f6c <_sercom_get_default_pad+0x80>
    1f5c:	2900      	cmp	r1, #0
    1f5e:	d039      	beq.n	1fd4 <_sercom_get_default_pad+0xe8>
    1f60:	2902      	cmp	r1, #2
    1f62:	d005      	beq.n	1f70 <_sercom_get_default_pad+0x84>
    1f64:	2903      	cmp	r1, #3
    1f66:	d005      	beq.n	1f74 <_sercom_get_default_pad+0x88>
	return 0;
    1f68:	2000      	movs	r0, #0
    1f6a:	e7cd      	b.n	1f08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f6c:	4827      	ldr	r0, [pc, #156]	; (200c <STACK_SIZE+0xc>)
    1f6e:	e7cb      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f70:	4827      	ldr	r0, [pc, #156]	; (2010 <STACK_SIZE+0x10>)
    1f72:	e7c9      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f74:	4827      	ldr	r0, [pc, #156]	; (2014 <STACK_SIZE+0x14>)
    1f76:	e7c7      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f78:	2901      	cmp	r1, #1
    1f7a:	d007      	beq.n	1f8c <_sercom_get_default_pad+0xa0>
    1f7c:	2900      	cmp	r1, #0
    1f7e:	d02b      	beq.n	1fd8 <_sercom_get_default_pad+0xec>
    1f80:	2902      	cmp	r1, #2
    1f82:	d005      	beq.n	1f90 <_sercom_get_default_pad+0xa4>
    1f84:	2903      	cmp	r1, #3
    1f86:	d005      	beq.n	1f94 <_sercom_get_default_pad+0xa8>
	return 0;
    1f88:	2000      	movs	r0, #0
    1f8a:	e7bd      	b.n	1f08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f8c:	4822      	ldr	r0, [pc, #136]	; (2018 <STACK_SIZE+0x18>)
    1f8e:	e7bb      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f90:	4822      	ldr	r0, [pc, #136]	; (201c <STACK_SIZE+0x1c>)
    1f92:	e7b9      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f94:	4822      	ldr	r0, [pc, #136]	; (2020 <STACK_SIZE+0x20>)
    1f96:	e7b7      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1f98:	2902      	cmp	r1, #2
    1f9a:	d003      	beq.n	1fa4 <_sercom_get_default_pad+0xb8>
    1f9c:	2903      	cmp	r1, #3
    1f9e:	d003      	beq.n	1fa8 <_sercom_get_default_pad+0xbc>
    1fa0:	2000      	movs	r0, #0
    1fa2:	e7b1      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fa4:	481f      	ldr	r0, [pc, #124]	; (2024 <STACK_SIZE+0x24>)
    1fa6:	e7af      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fa8:	481f      	ldr	r0, [pc, #124]	; (2028 <STACK_SIZE+0x28>)
    1faa:	e7ad      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fac:	2901      	cmp	r1, #1
    1fae:	d007      	beq.n	1fc0 <_sercom_get_default_pad+0xd4>
    1fb0:	2900      	cmp	r1, #0
    1fb2:	d013      	beq.n	1fdc <_sercom_get_default_pad+0xf0>
    1fb4:	2902      	cmp	r1, #2
    1fb6:	d005      	beq.n	1fc4 <_sercom_get_default_pad+0xd8>
    1fb8:	2903      	cmp	r1, #3
    1fba:	d005      	beq.n	1fc8 <_sercom_get_default_pad+0xdc>
	return 0;
    1fbc:	2000      	movs	r0, #0
    1fbe:	e7a3      	b.n	1f08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fc0:	481a      	ldr	r0, [pc, #104]	; (202c <STACK_SIZE+0x2c>)
    1fc2:	e7a1      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fc4:	481a      	ldr	r0, [pc, #104]	; (2030 <STACK_SIZE+0x30>)
    1fc6:	e79f      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fc8:	481a      	ldr	r0, [pc, #104]	; (2034 <STACK_SIZE+0x34>)
    1fca:	e79d      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fcc:	481a      	ldr	r0, [pc, #104]	; (2038 <STACK_SIZE+0x38>)
    1fce:	e79b      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fd0:	2003      	movs	r0, #3
    1fd2:	e799      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fd4:	4819      	ldr	r0, [pc, #100]	; (203c <STACK_SIZE+0x3c>)
    1fd6:	e797      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fd8:	4819      	ldr	r0, [pc, #100]	; (2040 <STACK_SIZE+0x40>)
    1fda:	e795      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fdc:	4819      	ldr	r0, [pc, #100]	; (2044 <STACK_SIZE+0x44>)
    1fde:	e793      	b.n	1f08 <_sercom_get_default_pad+0x1c>
    1fe0:	42000800 	.word	0x42000800
    1fe4:	42001000 	.word	0x42001000
    1fe8:	43000400 	.word	0x43000400
    1fec:	42000c00 	.word	0x42000c00
    1ff0:	42000400 	.word	0x42000400
    1ff4:	00050003 	.word	0x00050003
    1ff8:	00060003 	.word	0x00060003
    1ffc:	00070003 	.word	0x00070003
    2000:	00010003 	.word	0x00010003
    2004:	001e0003 	.word	0x001e0003
    2008:	001f0003 	.word	0x001f0003
    200c:	00090003 	.word	0x00090003
    2010:	000a0003 	.word	0x000a0003
    2014:	000b0003 	.word	0x000b0003
    2018:	00110003 	.word	0x00110003
    201c:	00120003 	.word	0x00120003
    2020:	00130003 	.word	0x00130003
    2024:	000e0003 	.word	0x000e0003
    2028:	000f0003 	.word	0x000f0003
    202c:	00170003 	.word	0x00170003
    2030:	00180003 	.word	0x00180003
    2034:	00190003 	.word	0x00190003
    2038:	00040003 	.word	0x00040003
    203c:	00080003 	.word	0x00080003
    2040:	00100003 	.word	0x00100003
    2044:	00160003 	.word	0x00160003

00002048 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2048:	b530      	push	{r4, r5, lr}
    204a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    204c:	4b0b      	ldr	r3, [pc, #44]	; (207c <_sercom_get_sercom_inst_index+0x34>)
    204e:	466a      	mov	r2, sp
    2050:	cb32      	ldmia	r3!, {r1, r4, r5}
    2052:	c232      	stmia	r2!, {r1, r4, r5}
    2054:	cb32      	ldmia	r3!, {r1, r4, r5}
    2056:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2058:	9b00      	ldr	r3, [sp, #0]
    205a:	4283      	cmp	r3, r0
    205c:	d00b      	beq.n	2076 <_sercom_get_sercom_inst_index+0x2e>
    205e:	2301      	movs	r3, #1
    2060:	009a      	lsls	r2, r3, #2
    2062:	4669      	mov	r1, sp
    2064:	5852      	ldr	r2, [r2, r1]
    2066:	4282      	cmp	r2, r0
    2068:	d006      	beq.n	2078 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    206a:	3301      	adds	r3, #1
    206c:	2b06      	cmp	r3, #6
    206e:	d1f7      	bne.n	2060 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2070:	2000      	movs	r0, #0
}
    2072:	b007      	add	sp, #28
    2074:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2076:	2300      	movs	r3, #0
			return i;
    2078:	b2d8      	uxtb	r0, r3
    207a:	e7fa      	b.n	2072 <_sercom_get_sercom_inst_index+0x2a>
    207c:	0001a428 	.word	0x0001a428

00002080 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2080:	4770      	bx	lr
	...

00002084 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2084:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2086:	4b0a      	ldr	r3, [pc, #40]	; (20b0 <_sercom_set_handler+0x2c>)
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	2b00      	cmp	r3, #0
    208c:	d10c      	bne.n	20a8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    208e:	4f09      	ldr	r7, [pc, #36]	; (20b4 <_sercom_set_handler+0x30>)
    2090:	4e09      	ldr	r6, [pc, #36]	; (20b8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2092:	4d0a      	ldr	r5, [pc, #40]	; (20bc <_sercom_set_handler+0x38>)
    2094:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2096:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2098:	195a      	adds	r2, r3, r5
    209a:	6014      	str	r4, [r2, #0]
    209c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    209e:	2b18      	cmp	r3, #24
    20a0:	d1f9      	bne.n	2096 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    20a2:	2201      	movs	r2, #1
    20a4:	4b02      	ldr	r3, [pc, #8]	; (20b0 <_sercom_set_handler+0x2c>)
    20a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    20a8:	0080      	lsls	r0, r0, #2
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <_sercom_set_handler+0x30>)
    20ac:	50c1      	str	r1, [r0, r3]
}
    20ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b0:	20000a16 	.word	0x20000a16
    20b4:	20000a18 	.word	0x20000a18
    20b8:	00002081 	.word	0x00002081
    20bc:	20000ff8 	.word	0x20000ff8

000020c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    20c0:	b500      	push	{lr}
    20c2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    20c4:	2308      	movs	r3, #8
    20c6:	466a      	mov	r2, sp
    20c8:	7013      	strb	r3, [r2, #0]
    20ca:	3301      	adds	r3, #1
    20cc:	7053      	strb	r3, [r2, #1]
    20ce:	3301      	adds	r3, #1
    20d0:	7093      	strb	r3, [r2, #2]
    20d2:	3301      	adds	r3, #1
    20d4:	70d3      	strb	r3, [r2, #3]
    20d6:	3301      	adds	r3, #1
    20d8:	7113      	strb	r3, [r2, #4]
    20da:	3301      	adds	r3, #1
    20dc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    20de:	4b03      	ldr	r3, [pc, #12]	; (20ec <_sercom_get_interrupt_vector+0x2c>)
    20e0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    20e2:	466b      	mov	r3, sp
    20e4:	5618      	ldrsb	r0, [r3, r0]
}
    20e6:	b003      	add	sp, #12
    20e8:	bd00      	pop	{pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	00002049 	.word	0x00002049

000020f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    20f0:	b510      	push	{r4, lr}
    20f2:	4b02      	ldr	r3, [pc, #8]	; (20fc <SERCOM0_Handler+0xc>)
    20f4:	681b      	ldr	r3, [r3, #0]
    20f6:	2000      	movs	r0, #0
    20f8:	4798      	blx	r3
    20fa:	bd10      	pop	{r4, pc}
    20fc:	20000a18 	.word	0x20000a18

00002100 <SERCOM1_Handler>:
    2100:	b510      	push	{r4, lr}
    2102:	4b02      	ldr	r3, [pc, #8]	; (210c <SERCOM1_Handler+0xc>)
    2104:	685b      	ldr	r3, [r3, #4]
    2106:	2001      	movs	r0, #1
    2108:	4798      	blx	r3
    210a:	bd10      	pop	{r4, pc}
    210c:	20000a18 	.word	0x20000a18

00002110 <SERCOM2_Handler>:
    2110:	b510      	push	{r4, lr}
    2112:	4b02      	ldr	r3, [pc, #8]	; (211c <SERCOM2_Handler+0xc>)
    2114:	689b      	ldr	r3, [r3, #8]
    2116:	2002      	movs	r0, #2
    2118:	4798      	blx	r3
    211a:	bd10      	pop	{r4, pc}
    211c:	20000a18 	.word	0x20000a18

00002120 <SERCOM3_Handler>:
    2120:	b510      	push	{r4, lr}
    2122:	4b02      	ldr	r3, [pc, #8]	; (212c <SERCOM3_Handler+0xc>)
    2124:	68db      	ldr	r3, [r3, #12]
    2126:	2003      	movs	r0, #3
    2128:	4798      	blx	r3
    212a:	bd10      	pop	{r4, pc}
    212c:	20000a18 	.word	0x20000a18

00002130 <SERCOM4_Handler>:
    2130:	b510      	push	{r4, lr}
    2132:	4b02      	ldr	r3, [pc, #8]	; (213c <SERCOM4_Handler+0xc>)
    2134:	691b      	ldr	r3, [r3, #16]
    2136:	2004      	movs	r0, #4
    2138:	4798      	blx	r3
    213a:	bd10      	pop	{r4, pc}
    213c:	20000a18 	.word	0x20000a18

00002140 <SERCOM5_Handler>:
    2140:	b510      	push	{r4, lr}
    2142:	4b02      	ldr	r3, [pc, #8]	; (214c <SERCOM5_Handler+0xc>)
    2144:	695b      	ldr	r3, [r3, #20]
    2146:	2005      	movs	r0, #5
    2148:	4798      	blx	r3
    214a:	bd10      	pop	{r4, pc}
    214c:	20000a18 	.word	0x20000a18

00002150 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2150:	b5f0      	push	{r4, r5, r6, r7, lr}
    2152:	46d6      	mov	lr, sl
    2154:	464f      	mov	r7, r9
    2156:	4646      	mov	r6, r8
    2158:	b5c0      	push	{r6, r7, lr}
    215a:	b08a      	sub	sp, #40	; 0x28
    215c:	0006      	movs	r6, r0
    215e:	000f      	movs	r7, r1
    2160:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2162:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2164:	680b      	ldr	r3, [r1, #0]
    2166:	079b      	lsls	r3, r3, #30
    2168:	d40a      	bmi.n	2180 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    216a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    216c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    216e:	07db      	lsls	r3, r3, #31
    2170:	d400      	bmi.n	2174 <spi_init+0x24>
    2172:	e097      	b.n	22a4 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2174:	b00a      	add	sp, #40	; 0x28
    2176:	bc1c      	pop	{r2, r3, r4}
    2178:	4690      	mov	r8, r2
    217a:	4699      	mov	r9, r3
    217c:	46a2      	mov	sl, r4
    217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    2180:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2182:	9305      	str	r3, [sp, #20]
    2184:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2186:	9306      	str	r3, [sp, #24]
    2188:	6b13      	ldr	r3, [r2, #48]	; 0x30
    218a:	9307      	str	r3, [sp, #28]
    218c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    218e:	9308      	str	r3, [sp, #32]
    2190:	2500      	movs	r5, #0
    2192:	e00a      	b.n	21aa <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2194:	0038      	movs	r0, r7
    2196:	4b9a      	ldr	r3, [pc, #616]	; (2400 <spi_init+0x2b0>)
    2198:	4798      	blx	r3
    219a:	e00e      	b.n	21ba <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    219c:	230f      	movs	r3, #15
    219e:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    21a0:	4581      	cmp	r9, r0
    21a2:	d130      	bne.n	2206 <spi_init+0xb6>
    21a4:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    21a6:	2d04      	cmp	r5, #4
    21a8:	d031      	beq.n	220e <spi_init+0xbe>
    21aa:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    21ac:	00ab      	lsls	r3, r5, #2
    21ae:	aa02      	add	r2, sp, #8
    21b0:	200c      	movs	r0, #12
    21b2:	1812      	adds	r2, r2, r0
    21b4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    21b6:	2800      	cmp	r0, #0
    21b8:	d0ec      	beq.n	2194 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    21ba:	1c43      	adds	r3, r0, #1
    21bc:	d0f2      	beq.n	21a4 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    21be:	0401      	lsls	r1, r0, #16
    21c0:	0c0b      	lsrs	r3, r1, #16
    21c2:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    21c4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    21c6:	b2c3      	uxtb	r3, r0
    21c8:	469c      	mov	ip, r3
		return NULL;
    21ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21cc:	0602      	lsls	r2, r0, #24
    21ce:	d405      	bmi.n	21dc <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    21d0:	4663      	mov	r3, ip
    21d2:	095b      	lsrs	r3, r3, #5
    21d4:	01db      	lsls	r3, r3, #7
    21d6:	4a8b      	ldr	r2, [pc, #556]	; (2404 <spi_init+0x2b4>)
    21d8:	4690      	mov	r8, r2
    21da:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    21dc:	221f      	movs	r2, #31
    21de:	4660      	mov	r0, ip
    21e0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    21e2:	1898      	adds	r0, r3, r2
    21e4:	3040      	adds	r0, #64	; 0x40
    21e6:	7800      	ldrb	r0, [r0, #0]
    21e8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    21ea:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    21ec:	4651      	mov	r1, sl
    21ee:	07c9      	lsls	r1, r1, #31
    21f0:	d5d6      	bpl.n	21a0 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    21f2:	0852      	lsrs	r2, r2, #1
    21f4:	189b      	adds	r3, r3, r2
    21f6:	3330      	adds	r3, #48	; 0x30
    21f8:	7818      	ldrb	r0, [r3, #0]
    21fa:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    21fc:	4663      	mov	r3, ip
    21fe:	07db      	lsls	r3, r3, #31
    2200:	d5cc      	bpl.n	219c <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    2202:	0900      	lsrs	r0, r0, #4
    2204:	e7cc      	b.n	21a0 <spi_init+0x50>
			module->hw = NULL;
    2206:	2300      	movs	r3, #0
    2208:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    220a:	201c      	movs	r0, #28
    220c:	e7b2      	b.n	2174 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    220e:	2011      	movs	r0, #17
    2210:	4b7d      	ldr	r3, [pc, #500]	; (2408 <spi_init+0x2b8>)
    2212:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2214:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    2216:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    2218:	2a01      	cmp	r2, #1
    221a:	d026      	beq.n	226a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    221c:	6863      	ldr	r3, [r4, #4]
    221e:	68a2      	ldr	r2, [r4, #8]
    2220:	4313      	orrs	r3, r2
    2222:	68e2      	ldr	r2, [r4, #12]
    2224:	4313      	orrs	r3, r2
    2226:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    2228:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    222a:	7c61      	ldrb	r1, [r4, #17]
    222c:	2900      	cmp	r1, #0
    222e:	d001      	beq.n	2234 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2230:	2180      	movs	r1, #128	; 0x80
    2232:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    2234:	7ca1      	ldrb	r1, [r4, #18]
    2236:	2900      	cmp	r1, #0
    2238:	d002      	beq.n	2240 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    223a:	2180      	movs	r1, #128	; 0x80
    223c:	0289      	lsls	r1, r1, #10
    223e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    2240:	7ce1      	ldrb	r1, [r4, #19]
    2242:	2900      	cmp	r1, #0
    2244:	d002      	beq.n	224c <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2246:	2180      	movs	r1, #128	; 0x80
    2248:	0089      	lsls	r1, r1, #2
    224a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    224c:	7d21      	ldrb	r1, [r4, #20]
    224e:	2900      	cmp	r1, #0
    2250:	d002      	beq.n	2258 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2252:	2180      	movs	r1, #128	; 0x80
    2254:	0189      	lsls	r1, r1, #6
    2256:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    2258:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    225a:	2002      	movs	r0, #2
    225c:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    225e:	428b      	cmp	r3, r1
    2260:	d017      	beq.n	2292 <spi_init+0x142>
	module->hw = NULL;
    2262:	2300      	movs	r3, #0
    2264:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    2266:	201c      	movs	r0, #28
    2268:	e784      	b.n	2174 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    226a:	aa04      	add	r2, sp, #16
    226c:	0001      	movs	r1, r0
    226e:	69a0      	ldr	r0, [r4, #24]
    2270:	4b66      	ldr	r3, [pc, #408]	; (240c <spi_init+0x2bc>)
    2272:	4798      	blx	r3
    2274:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2276:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2278:	2b00      	cmp	r3, #0
    227a:	d000      	beq.n	227e <spi_init+0x12e>
    227c:	e77a      	b.n	2174 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    227e:	7b3b      	ldrb	r3, [r7, #12]
    2280:	b2db      	uxtb	r3, r3
    2282:	aa04      	add	r2, sp, #16
    2284:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    2286:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    2288:	429a      	cmp	r2, r3
    228a:	d000      	beq.n	228e <spi_init+0x13e>
    228c:	e772      	b.n	2174 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    228e:	350c      	adds	r5, #12
    2290:	e7c4      	b.n	221c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    2292:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    2294:	4293      	cmp	r3, r2
    2296:	d1e4      	bne.n	2262 <spi_init+0x112>
		module->mode           = config->mode;
    2298:	7823      	ldrb	r3, [r4, #0]
    229a:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    229c:	7c23      	ldrb	r3, [r4, #16]
    229e:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    22a0:	2000      	movs	r0, #0
    22a2:	e767      	b.n	2174 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22a4:	0008      	movs	r0, r1
    22a6:	4b5a      	ldr	r3, [pc, #360]	; (2410 <spi_init+0x2c0>)
    22a8:	4798      	blx	r3
	if (sercom_index == 5) {
    22aa:	2805      	cmp	r0, #5
    22ac:	d100      	bne.n	22b0 <spi_init+0x160>
    22ae:	e09f      	b.n	23f0 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22b0:	0003      	movs	r3, r0
    22b2:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    22b4:	4957      	ldr	r1, [pc, #348]	; (2414 <spi_init+0x2c4>)
    22b6:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    22b8:	2201      	movs	r2, #1
    22ba:	4082      	lsls	r2, r0
    22bc:	432a      	orrs	r2, r5
    22be:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    22c0:	a909      	add	r1, sp, #36	; 0x24
    22c2:	2524      	movs	r5, #36	; 0x24
    22c4:	5d62      	ldrb	r2, [r4, r5]
    22c6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    22c8:	b2db      	uxtb	r3, r3
    22ca:	9301      	str	r3, [sp, #4]
    22cc:	0018      	movs	r0, r3
    22ce:	4b52      	ldr	r3, [pc, #328]	; (2418 <spi_init+0x2c8>)
    22d0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    22d2:	9801      	ldr	r0, [sp, #4]
    22d4:	4b51      	ldr	r3, [pc, #324]	; (241c <spi_init+0x2cc>)
    22d6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    22d8:	5d60      	ldrb	r0, [r4, r5]
    22da:	2100      	movs	r1, #0
    22dc:	4b50      	ldr	r3, [pc, #320]	; (2420 <spi_init+0x2d0>)
    22de:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    22e0:	7823      	ldrb	r3, [r4, #0]
    22e2:	2b01      	cmp	r3, #1
    22e4:	d019      	beq.n	231a <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    22e6:	6833      	ldr	r3, [r6, #0]
    22e8:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22ea:	ab04      	add	r3, sp, #16
    22ec:	2280      	movs	r2, #128	; 0x80
    22ee:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22f0:	2200      	movs	r2, #0
    22f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22f4:	2101      	movs	r1, #1
    22f6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    22f8:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    22fa:	7823      	ldrb	r3, [r4, #0]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d101      	bne.n	2304 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2300:	ab04      	add	r3, sp, #16
    2302:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2304:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2306:	9305      	str	r3, [sp, #20]
    2308:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    230a:	9306      	str	r3, [sp, #24]
    230c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    230e:	9307      	str	r3, [sp, #28]
    2310:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2312:	9308      	str	r3, [sp, #32]
    2314:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2316:	ad05      	add	r5, sp, #20
    2318:	e011      	b.n	233e <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    231a:	683b      	ldr	r3, [r7, #0]
    231c:	220c      	movs	r2, #12
    231e:	4313      	orrs	r3, r2
    2320:	603b      	str	r3, [r7, #0]
    2322:	e7e0      	b.n	22e6 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2324:	4640      	mov	r0, r8
    2326:	4b36      	ldr	r3, [pc, #216]	; (2400 <spi_init+0x2b0>)
    2328:	4798      	blx	r3
    232a:	e00d      	b.n	2348 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    232c:	a904      	add	r1, sp, #16
    232e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2330:	0c00      	lsrs	r0, r0, #16
    2332:	b2c0      	uxtb	r0, r0
    2334:	4b3b      	ldr	r3, [pc, #236]	; (2424 <spi_init+0x2d4>)
    2336:	4798      	blx	r3
    2338:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    233a:	2f04      	cmp	r7, #4
    233c:	d007      	beq.n	234e <spi_init+0x1fe>
    233e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2340:	00bb      	lsls	r3, r7, #2
    2342:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    2344:	2800      	cmp	r0, #0
    2346:	d0ed      	beq.n	2324 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    2348:	1c43      	adds	r3, r0, #1
    234a:	d1ef      	bne.n	232c <spi_init+0x1dc>
    234c:	e7f4      	b.n	2338 <spi_init+0x1e8>
	module->mode             = config->mode;
    234e:	7823      	ldrb	r3, [r4, #0]
    2350:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    2352:	7c23      	ldrb	r3, [r4, #16]
    2354:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    2356:	7ca3      	ldrb	r3, [r4, #18]
    2358:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    235a:	7d23      	ldrb	r3, [r4, #20]
    235c:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    235e:	2200      	movs	r2, #0
    2360:	ab02      	add	r3, sp, #8
    2362:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2364:	7823      	ldrb	r3, [r4, #0]
    2366:	2b01      	cmp	r3, #1
    2368:	d02a      	beq.n	23c0 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    236a:	6863      	ldr	r3, [r4, #4]
    236c:	68a2      	ldr	r2, [r4, #8]
    236e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    2370:	68e2      	ldr	r2, [r4, #12]
    2372:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    2374:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2376:	7c62      	ldrb	r2, [r4, #17]
    2378:	2a00      	cmp	r2, #0
    237a:	d103      	bne.n	2384 <spi_init+0x234>
    237c:	4a2a      	ldr	r2, [pc, #168]	; (2428 <spi_init+0x2d8>)
    237e:	7892      	ldrb	r2, [r2, #2]
    2380:	0792      	lsls	r2, r2, #30
    2382:	d501      	bpl.n	2388 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2384:	2280      	movs	r2, #128	; 0x80
    2386:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    2388:	7ca2      	ldrb	r2, [r4, #18]
    238a:	2a00      	cmp	r2, #0
    238c:	d002      	beq.n	2394 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    238e:	2280      	movs	r2, #128	; 0x80
    2390:	0292      	lsls	r2, r2, #10
    2392:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    2394:	7ce2      	ldrb	r2, [r4, #19]
    2396:	2a00      	cmp	r2, #0
    2398:	d002      	beq.n	23a0 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    239a:	2280      	movs	r2, #128	; 0x80
    239c:	0092      	lsls	r2, r2, #2
    239e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    23a0:	7d22      	ldrb	r2, [r4, #20]
    23a2:	2a00      	cmp	r2, #0
    23a4:	d002      	beq.n	23ac <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    23a6:	2280      	movs	r2, #128	; 0x80
    23a8:	0192      	lsls	r2, r2, #6
    23aa:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    23ac:	4642      	mov	r2, r8
    23ae:	6812      	ldr	r2, [r2, #0]
    23b0:	4313      	orrs	r3, r2
    23b2:	4642      	mov	r2, r8
    23b4:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    23b6:	6853      	ldr	r3, [r2, #4]
    23b8:	430b      	orrs	r3, r1
    23ba:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    23bc:	2000      	movs	r0, #0
    23be:	e6d9      	b.n	2174 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23c0:	6830      	ldr	r0, [r6, #0]
    23c2:	4b13      	ldr	r3, [pc, #76]	; (2410 <spi_init+0x2c0>)
    23c4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23c6:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    23c8:	b2c0      	uxtb	r0, r0
    23ca:	4b0f      	ldr	r3, [pc, #60]	; (2408 <spi_init+0x2b8>)
    23cc:	4798      	blx	r3
    23ce:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    23d0:	ab02      	add	r3, sp, #8
    23d2:	1d9a      	adds	r2, r3, #6
    23d4:	69a0      	ldr	r0, [r4, #24]
    23d6:	4b0d      	ldr	r3, [pc, #52]	; (240c <spi_init+0x2bc>)
    23d8:	4798      	blx	r3
    23da:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    23dc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    23de:	2b00      	cmp	r3, #0
    23e0:	d000      	beq.n	23e4 <spi_init+0x294>
    23e2:	e6c7      	b.n	2174 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    23e4:	ab02      	add	r3, sp, #8
    23e6:	3306      	adds	r3, #6
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	4642      	mov	r2, r8
    23ec:	7313      	strb	r3, [r2, #12]
    23ee:	e7bc      	b.n	236a <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    23f0:	4a08      	ldr	r2, [pc, #32]	; (2414 <spi_init+0x2c4>)
    23f2:	6a13      	ldr	r3, [r2, #32]
    23f4:	2102      	movs	r1, #2
    23f6:	430b      	orrs	r3, r1
    23f8:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    23fa:	2318      	movs	r3, #24
    23fc:	e760      	b.n	22c0 <spi_init+0x170>
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	00001eed 	.word	0x00001eed
    2404:	40002800 	.word	0x40002800
    2408:	000032c1 	.word	0x000032c1
    240c:	00001de3 	.word	0x00001de3
    2410:	00002049 	.word	0x00002049
    2414:	40000400 	.word	0x40000400
    2418:	0000329d 	.word	0x0000329d
    241c:	0000322d 	.word	0x0000322d
    2420:	00001ea1 	.word	0x00001ea1
    2424:	00003399 	.word	0x00003399
    2428:	41002000 	.word	0x41002000

0000242c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    242c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    242e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2430:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2432:	2c01      	cmp	r4, #1
    2434:	d001      	beq.n	243a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2436:	0018      	movs	r0, r3
    2438:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    243a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    243c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    243e:	2c00      	cmp	r4, #0
    2440:	d1f9      	bne.n	2436 <spi_select_slave+0xa>
		if (select) {
    2442:	2a00      	cmp	r2, #0
    2444:	d058      	beq.n	24f8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2446:	784b      	ldrb	r3, [r1, #1]
    2448:	2b00      	cmp	r3, #0
    244a:	d044      	beq.n	24d6 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    244c:	6803      	ldr	r3, [r0, #0]
    244e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2450:	07db      	lsls	r3, r3, #31
    2452:	d410      	bmi.n	2476 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2454:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2456:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2458:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    245a:	2900      	cmp	r1, #0
    245c:	d104      	bne.n	2468 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    245e:	0953      	lsrs	r3, r2, #5
    2460:	01db      	lsls	r3, r3, #7
    2462:	492e      	ldr	r1, [pc, #184]	; (251c <spi_select_slave+0xf0>)
    2464:	468c      	mov	ip, r1
    2466:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2468:	211f      	movs	r1, #31
    246a:	4011      	ands	r1, r2
    246c:	2201      	movs	r2, #1
    246e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2470:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2472:	2305      	movs	r3, #5
    2474:	e7df      	b.n	2436 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2476:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2478:	09d4      	lsrs	r4, r2, #7
		return NULL;
    247a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    247c:	2c00      	cmp	r4, #0
    247e:	d104      	bne.n	248a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2480:	0953      	lsrs	r3, r2, #5
    2482:	01db      	lsls	r3, r3, #7
    2484:	4c25      	ldr	r4, [pc, #148]	; (251c <spi_select_slave+0xf0>)
    2486:	46a4      	mov	ip, r4
    2488:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    248a:	241f      	movs	r4, #31
    248c:	4014      	ands	r4, r2
    248e:	2201      	movs	r2, #1
    2490:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    2492:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2494:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2496:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2498:	07d2      	lsls	r2, r2, #31
    249a:	d501      	bpl.n	24a0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    249c:	788a      	ldrb	r2, [r1, #2]
    249e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    24a0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    24a2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    24a4:	2a00      	cmp	r2, #0
    24a6:	d1c6      	bne.n	2436 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    24a8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    24aa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    24ac:	7e13      	ldrb	r3, [r2, #24]
    24ae:	420b      	tst	r3, r1
    24b0:	d0fc      	beq.n	24ac <spi_select_slave+0x80>
    24b2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    24b4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    24b6:	0749      	lsls	r1, r1, #29
    24b8:	d5bd      	bpl.n	2436 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24ba:	8b53      	ldrh	r3, [r2, #26]
    24bc:	075b      	lsls	r3, r3, #29
    24be:	d501      	bpl.n	24c4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    24c0:	2304      	movs	r3, #4
    24c2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24c4:	7983      	ldrb	r3, [r0, #6]
    24c6:	2b01      	cmp	r3, #1
    24c8:	d002      	beq.n	24d0 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24cc:	2300      	movs	r3, #0
    24ce:	e7b2      	b.n	2436 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24d2:	2300      	movs	r3, #0
    24d4:	e7af      	b.n	2436 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24d6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24d8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24dc:	2900      	cmp	r1, #0
    24de:	d104      	bne.n	24ea <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    24e0:	0953      	lsrs	r3, r2, #5
    24e2:	01db      	lsls	r3, r3, #7
    24e4:	490d      	ldr	r1, [pc, #52]	; (251c <spi_select_slave+0xf0>)
    24e6:	468c      	mov	ip, r1
    24e8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24ea:	211f      	movs	r1, #31
    24ec:	4011      	ands	r1, r2
    24ee:	2201      	movs	r2, #1
    24f0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    24f2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    24f4:	2300      	movs	r3, #0
    24f6:	e79e      	b.n	2436 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    24f8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24fa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24fe:	2900      	cmp	r1, #0
    2500:	d104      	bne.n	250c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2502:	0953      	lsrs	r3, r2, #5
    2504:	01db      	lsls	r3, r3, #7
    2506:	4905      	ldr	r1, [pc, #20]	; (251c <spi_select_slave+0xf0>)
    2508:	468c      	mov	ip, r1
    250a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    250c:	211f      	movs	r1, #31
    250e:	4011      	ands	r1, r2
    2510:	2201      	movs	r2, #1
    2512:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2514:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2516:	2300      	movs	r3, #0
    2518:	e78d      	b.n	2436 <spi_select_slave+0xa>
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	40002800 	.word	0x40002800

00002520 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2520:	b5f0      	push	{r4, r5, r6, r7, lr}
    2522:	46de      	mov	lr, fp
    2524:	4657      	mov	r7, sl
    2526:	464e      	mov	r6, r9
    2528:	4645      	mov	r5, r8
    252a:	b5e0      	push	{r5, r6, r7, lr}
    252c:	b091      	sub	sp, #68	; 0x44
    252e:	0005      	movs	r5, r0
    2530:	000c      	movs	r4, r1
    2532:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2534:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2536:	0008      	movs	r0, r1
    2538:	4bc6      	ldr	r3, [pc, #792]	; (2854 <usart_init+0x334>)
    253a:	4798      	blx	r3
    253c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    253e:	2805      	cmp	r0, #5
    2540:	d00d      	beq.n	255e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2542:	0007      	movs	r7, r0
    2544:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    2546:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2548:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    254a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    254c:	07c9      	lsls	r1, r1, #31
    254e:	d509      	bpl.n	2564 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2550:	b011      	add	sp, #68	; 0x44
    2552:	bc3c      	pop	{r2, r3, r4, r5}
    2554:	4690      	mov	r8, r2
    2556:	4699      	mov	r9, r3
    2558:	46a2      	mov	sl, r4
    255a:	46ab      	mov	fp, r5
    255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    255e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    2560:	2301      	movs	r3, #1
    2562:	e7f1      	b.n	2548 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2564:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    2566:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2568:	0789      	lsls	r1, r1, #30
    256a:	d4f1      	bmi.n	2550 <usart_init+0x30>
	if (sercom_index == 5) {
    256c:	2a05      	cmp	r2, #5
    256e:	d049      	beq.n	2604 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    2570:	49b9      	ldr	r1, [pc, #740]	; (2858 <usart_init+0x338>)
    2572:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    2574:	2201      	movs	r2, #1
    2576:	409a      	lsls	r2, r3
    2578:	0013      	movs	r3, r2
    257a:	4303      	orrs	r3, r0
    257c:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    257e:	a90f      	add	r1, sp, #60	; 0x3c
    2580:	232d      	movs	r3, #45	; 0x2d
    2582:	4698      	mov	r8, r3
    2584:	5cf3      	ldrb	r3, [r6, r3]
    2586:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2588:	b2ff      	uxtb	r7, r7
    258a:	0038      	movs	r0, r7
    258c:	4bb3      	ldr	r3, [pc, #716]	; (285c <usart_init+0x33c>)
    258e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2590:	0038      	movs	r0, r7
    2592:	4bb3      	ldr	r3, [pc, #716]	; (2860 <usart_init+0x340>)
    2594:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2596:	4643      	mov	r3, r8
    2598:	5cf0      	ldrb	r0, [r6, r3]
    259a:	2100      	movs	r1, #0
    259c:	4bb1      	ldr	r3, [pc, #708]	; (2864 <usart_init+0x344>)
    259e:	4798      	blx	r3
	module->character_size = config->character_size;
    25a0:	7af3      	ldrb	r3, [r6, #11]
    25a2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    25a4:	2324      	movs	r3, #36	; 0x24
    25a6:	5cf3      	ldrb	r3, [r6, r3]
    25a8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    25aa:	2325      	movs	r3, #37	; 0x25
    25ac:	5cf3      	ldrb	r3, [r6, r3]
    25ae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    25b0:	7ef3      	ldrb	r3, [r6, #27]
    25b2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    25b4:	7f33      	ldrb	r3, [r6, #28]
    25b6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25b8:	682b      	ldr	r3, [r5, #0]
    25ba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25bc:	0018      	movs	r0, r3
    25be:	4ba5      	ldr	r3, [pc, #660]	; (2854 <usart_init+0x334>)
    25c0:	4798      	blx	r3
	if (sercom_index == 5) {
    25c2:	2805      	cmp	r0, #5
    25c4:	d026      	beq.n	2614 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25c6:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    25c8:	2200      	movs	r2, #0
    25ca:	230e      	movs	r3, #14
    25cc:	a906      	add	r1, sp, #24
    25ce:	468c      	mov	ip, r1
    25d0:	4463      	add	r3, ip
    25d2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    25d4:	8a32      	ldrh	r2, [r6, #16]
    25d6:	9202      	str	r2, [sp, #8]
    25d8:	2380      	movs	r3, #128	; 0x80
    25da:	01db      	lsls	r3, r3, #7
    25dc:	429a      	cmp	r2, r3
    25de:	d100      	bne.n	25e2 <usart_init+0xc2>
    25e0:	e0ab      	b.n	273a <usart_init+0x21a>
    25e2:	d919      	bls.n	2618 <usart_init+0xf8>
    25e4:	23c0      	movs	r3, #192	; 0xc0
    25e6:	01db      	lsls	r3, r3, #7
    25e8:	9a02      	ldr	r2, [sp, #8]
    25ea:	429a      	cmp	r2, r3
    25ec:	d100      	bne.n	25f0 <usart_init+0xd0>
    25ee:	e09f      	b.n	2730 <usart_init+0x210>
    25f0:	2380      	movs	r3, #128	; 0x80
    25f2:	021b      	lsls	r3, r3, #8
    25f4:	429a      	cmp	r2, r3
    25f6:	d000      	beq.n	25fa <usart_init+0xda>
    25f8:	e127      	b.n	284a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    25fa:	2303      	movs	r3, #3
    25fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    25fe:	2300      	movs	r3, #0
    2600:	9307      	str	r3, [sp, #28]
    2602:	e012      	b.n	262a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    2604:	4994      	ldr	r1, [pc, #592]	; (2858 <usart_init+0x338>)
    2606:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2608:	3a04      	subs	r2, #4
    260a:	409a      	lsls	r2, r3
    260c:	0013      	movs	r3, r2
    260e:	4303      	orrs	r3, r0
    2610:	620b      	str	r3, [r1, #32]
    2612:	e7b4      	b.n	257e <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2614:	2018      	movs	r0, #24
    2616:	e7d7      	b.n	25c8 <usart_init+0xa8>
	switch (config->sample_rate) {
    2618:	2380      	movs	r3, #128	; 0x80
    261a:	019b      	lsls	r3, r3, #6
    261c:	429a      	cmp	r2, r3
    261e:	d000      	beq.n	2622 <usart_init+0x102>
    2620:	e113      	b.n	284a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2622:	2310      	movs	r3, #16
    2624:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2626:	3b0f      	subs	r3, #15
    2628:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    262a:	6833      	ldr	r3, [r6, #0]
    262c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    262e:	68f3      	ldr	r3, [r6, #12]
    2630:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2632:	6973      	ldr	r3, [r6, #20]
    2634:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2636:	7e33      	ldrb	r3, [r6, #24]
    2638:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    263a:	2326      	movs	r3, #38	; 0x26
    263c:	5cf3      	ldrb	r3, [r6, r3]
    263e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2640:	6873      	ldr	r3, [r6, #4]
    2642:	4699      	mov	r9, r3
	switch (transfer_mode)
    2644:	2b00      	cmp	r3, #0
    2646:	d100      	bne.n	264a <usart_init+0x12a>
    2648:	e09f      	b.n	278a <usart_init+0x26a>
    264a:	2380      	movs	r3, #128	; 0x80
    264c:	055b      	lsls	r3, r3, #21
    264e:	4599      	cmp	r9, r3
    2650:	d104      	bne.n	265c <usart_init+0x13c>
			if (!config->use_external_clock) {
    2652:	2327      	movs	r3, #39	; 0x27
    2654:	5cf3      	ldrb	r3, [r6, r3]
    2656:	2b00      	cmp	r3, #0
    2658:	d100      	bne.n	265c <usart_init+0x13c>
    265a:	e084      	b.n	2766 <usart_init+0x246>
	if(config->encoding_format_enable) {
    265c:	7e73      	ldrb	r3, [r6, #25]
    265e:	2b00      	cmp	r3, #0
    2660:	d002      	beq.n	2668 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2662:	7eb3      	ldrb	r3, [r6, #26]
    2664:	4642      	mov	r2, r8
    2666:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2668:	682a      	ldr	r2, [r5, #0]
    266a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    266c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    266e:	2b00      	cmp	r3, #0
    2670:	d1fc      	bne.n	266c <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    2672:	330e      	adds	r3, #14
    2674:	aa06      	add	r2, sp, #24
    2676:	4694      	mov	ip, r2
    2678:	4463      	add	r3, ip
    267a:	881b      	ldrh	r3, [r3, #0]
    267c:	4642      	mov	r2, r8
    267e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2680:	9b05      	ldr	r3, [sp, #20]
    2682:	9a03      	ldr	r2, [sp, #12]
    2684:	4313      	orrs	r3, r2
    2686:	9a04      	ldr	r2, [sp, #16]
    2688:	4313      	orrs	r3, r2
    268a:	464a      	mov	r2, r9
    268c:	4313      	orrs	r3, r2
    268e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2690:	465b      	mov	r3, fp
    2692:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2694:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2696:	4653      	mov	r3, sl
    2698:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    269a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    269c:	2327      	movs	r3, #39	; 0x27
    269e:	5cf3      	ldrb	r3, [r6, r3]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d101      	bne.n	26a8 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    26a4:	3304      	adds	r3, #4
    26a6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    26a8:	7e73      	ldrb	r3, [r6, #25]
    26aa:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    26ac:	7f32      	ldrb	r2, [r6, #28]
    26ae:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    26b0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    26b2:	7f72      	ldrb	r2, [r6, #29]
    26b4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    26b6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    26b8:	2224      	movs	r2, #36	; 0x24
    26ba:	5cb2      	ldrb	r2, [r6, r2]
    26bc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    26be:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    26c0:	2225      	movs	r2, #37	; 0x25
    26c2:	5cb2      	ldrb	r2, [r6, r2]
    26c4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    26c6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    26c8:	7ab1      	ldrb	r1, [r6, #10]
    26ca:	7af2      	ldrb	r2, [r6, #11]
    26cc:	4311      	orrs	r1, r2
    26ce:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    26d0:	8933      	ldrh	r3, [r6, #8]
    26d2:	2bff      	cmp	r3, #255	; 0xff
    26d4:	d07d      	beq.n	27d2 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    26d6:	2280      	movs	r2, #128	; 0x80
    26d8:	0452      	lsls	r2, r2, #17
    26da:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    26dc:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    26de:	232c      	movs	r3, #44	; 0x2c
    26e0:	5cf3      	ldrb	r3, [r6, r3]
    26e2:	2b00      	cmp	r3, #0
    26e4:	d103      	bne.n	26ee <usart_init+0x1ce>
    26e6:	4b60      	ldr	r3, [pc, #384]	; (2868 <usart_init+0x348>)
    26e8:	789b      	ldrb	r3, [r3, #2]
    26ea:	079b      	lsls	r3, r3, #30
    26ec:	d501      	bpl.n	26f2 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    26ee:	2380      	movs	r3, #128	; 0x80
    26f0:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    26f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26f6:	2b00      	cmp	r3, #0
    26f8:	d1fc      	bne.n	26f4 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    26fa:	4643      	mov	r3, r8
    26fc:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26fe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2700:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2702:	2b00      	cmp	r3, #0
    2704:	d1fc      	bne.n	2700 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    2706:	4643      	mov	r3, r8
    2708:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    270a:	ab0e      	add	r3, sp, #56	; 0x38
    270c:	2280      	movs	r2, #128	; 0x80
    270e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2710:	2200      	movs	r2, #0
    2712:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2714:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2716:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2718:	6b33      	ldr	r3, [r6, #48]	; 0x30
    271a:	930a      	str	r3, [sp, #40]	; 0x28
    271c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    271e:	930b      	str	r3, [sp, #44]	; 0x2c
    2720:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2722:	930c      	str	r3, [sp, #48]	; 0x30
    2724:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2726:	9302      	str	r3, [sp, #8]
    2728:	930d      	str	r3, [sp, #52]	; 0x34
    272a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    272c:	ae0a      	add	r6, sp, #40	; 0x28
    272e:	e05e      	b.n	27ee <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2730:	2308      	movs	r3, #8
    2732:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2734:	3b07      	subs	r3, #7
    2736:	9307      	str	r3, [sp, #28]
    2738:	e777      	b.n	262a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    273a:	6833      	ldr	r3, [r6, #0]
    273c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    273e:	68f3      	ldr	r3, [r6, #12]
    2740:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2742:	6973      	ldr	r3, [r6, #20]
    2744:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2746:	7e33      	ldrb	r3, [r6, #24]
    2748:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    274a:	2326      	movs	r3, #38	; 0x26
    274c:	5cf3      	ldrb	r3, [r6, r3]
    274e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2750:	6873      	ldr	r3, [r6, #4]
    2752:	4699      	mov	r9, r3
	switch (transfer_mode)
    2754:	2b00      	cmp	r3, #0
    2756:	d014      	beq.n	2782 <usart_init+0x262>
    2758:	2380      	movs	r3, #128	; 0x80
    275a:	055b      	lsls	r3, r3, #21
    275c:	4599      	cmp	r9, r3
    275e:	d100      	bne.n	2762 <usart_init+0x242>
    2760:	e777      	b.n	2652 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    2762:	2000      	movs	r0, #0
    2764:	e020      	b.n	27a8 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2766:	6a33      	ldr	r3, [r6, #32]
    2768:	001f      	movs	r7, r3
    276a:	b2c0      	uxtb	r0, r0
    276c:	4b3f      	ldr	r3, [pc, #252]	; (286c <usart_init+0x34c>)
    276e:	4798      	blx	r3
    2770:	0001      	movs	r1, r0
    2772:	220e      	movs	r2, #14
    2774:	ab06      	add	r3, sp, #24
    2776:	469c      	mov	ip, r3
    2778:	4462      	add	r2, ip
    277a:	0038      	movs	r0, r7
    277c:	4b3c      	ldr	r3, [pc, #240]	; (2870 <usart_init+0x350>)
    277e:	4798      	blx	r3
    2780:	e012      	b.n	27a8 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2782:	2308      	movs	r3, #8
    2784:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2786:	2300      	movs	r3, #0
    2788:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    278a:	2327      	movs	r3, #39	; 0x27
    278c:	5cf3      	ldrb	r3, [r6, r3]
    278e:	2b00      	cmp	r3, #0
    2790:	d00e      	beq.n	27b0 <usart_init+0x290>
				status_code =
    2792:	9b06      	ldr	r3, [sp, #24]
    2794:	9300      	str	r3, [sp, #0]
    2796:	9b07      	ldr	r3, [sp, #28]
    2798:	220e      	movs	r2, #14
    279a:	a906      	add	r1, sp, #24
    279c:	468c      	mov	ip, r1
    279e:	4462      	add	r2, ip
    27a0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    27a2:	6a30      	ldr	r0, [r6, #32]
    27a4:	4f33      	ldr	r7, [pc, #204]	; (2874 <usart_init+0x354>)
    27a6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    27a8:	2800      	cmp	r0, #0
    27aa:	d000      	beq.n	27ae <usart_init+0x28e>
    27ac:	e6d0      	b.n	2550 <usart_init+0x30>
    27ae:	e755      	b.n	265c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    27b0:	6a33      	ldr	r3, [r6, #32]
    27b2:	001f      	movs	r7, r3
    27b4:	b2c0      	uxtb	r0, r0
    27b6:	4b2d      	ldr	r3, [pc, #180]	; (286c <usart_init+0x34c>)
    27b8:	4798      	blx	r3
    27ba:	0001      	movs	r1, r0
				status_code =
    27bc:	9b06      	ldr	r3, [sp, #24]
    27be:	9300      	str	r3, [sp, #0]
    27c0:	9b07      	ldr	r3, [sp, #28]
    27c2:	220e      	movs	r2, #14
    27c4:	a806      	add	r0, sp, #24
    27c6:	4684      	mov	ip, r0
    27c8:	4462      	add	r2, ip
    27ca:	0038      	movs	r0, r7
    27cc:	4f29      	ldr	r7, [pc, #164]	; (2874 <usart_init+0x354>)
    27ce:	47b8      	blx	r7
    27d0:	e7ea      	b.n	27a8 <usart_init+0x288>
		if(config->lin_slave_enable) {
    27d2:	7ef3      	ldrb	r3, [r6, #27]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d082      	beq.n	26de <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    27d8:	2380      	movs	r3, #128	; 0x80
    27da:	04db      	lsls	r3, r3, #19
    27dc:	431f      	orrs	r7, r3
    27de:	e77e      	b.n	26de <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    27e0:	0020      	movs	r0, r4
    27e2:	4b25      	ldr	r3, [pc, #148]	; (2878 <usart_init+0x358>)
    27e4:	4798      	blx	r3
    27e6:	e007      	b.n	27f8 <usart_init+0x2d8>
    27e8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    27ea:	2f04      	cmp	r7, #4
    27ec:	d00d      	beq.n	280a <usart_init+0x2ea>
    27ee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    27f0:	00bb      	lsls	r3, r7, #2
    27f2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    27f4:	2800      	cmp	r0, #0
    27f6:	d0f3      	beq.n	27e0 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    27f8:	1c43      	adds	r3, r0, #1
    27fa:	d0f5      	beq.n	27e8 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    27fc:	a90e      	add	r1, sp, #56	; 0x38
    27fe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2800:	0c00      	lsrs	r0, r0, #16
    2802:	b2c0      	uxtb	r0, r0
    2804:	4b1d      	ldr	r3, [pc, #116]	; (287c <usart_init+0x35c>)
    2806:	4798      	blx	r3
    2808:	e7ee      	b.n	27e8 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    280a:	2300      	movs	r3, #0
    280c:	60eb      	str	r3, [r5, #12]
    280e:	612b      	str	r3, [r5, #16]
    2810:	616b      	str	r3, [r5, #20]
    2812:	61ab      	str	r3, [r5, #24]
    2814:	61eb      	str	r3, [r5, #28]
    2816:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2818:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    281a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    281c:	2200      	movs	r2, #0
    281e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2820:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2822:	3330      	adds	r3, #48	; 0x30
    2824:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2826:	3301      	adds	r3, #1
    2828:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    282a:	3301      	adds	r3, #1
    282c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    282e:	3301      	adds	r3, #1
    2830:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2832:	6828      	ldr	r0, [r5, #0]
    2834:	4b07      	ldr	r3, [pc, #28]	; (2854 <usart_init+0x334>)
    2836:	4798      	blx	r3
    2838:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    283a:	4911      	ldr	r1, [pc, #68]	; (2880 <usart_init+0x360>)
    283c:	4b11      	ldr	r3, [pc, #68]	; (2884 <usart_init+0x364>)
    283e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2840:	00a4      	lsls	r4, r4, #2
    2842:	4b11      	ldr	r3, [pc, #68]	; (2888 <usart_init+0x368>)
    2844:	50e5      	str	r5, [r4, r3]
	return status_code;
    2846:	2000      	movs	r0, #0
    2848:	e682      	b.n	2550 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    284a:	2310      	movs	r3, #16
    284c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    284e:	2300      	movs	r3, #0
    2850:	9307      	str	r3, [sp, #28]
    2852:	e6ea      	b.n	262a <usart_init+0x10a>
    2854:	00002049 	.word	0x00002049
    2858:	40000400 	.word	0x40000400
    285c:	0000329d 	.word	0x0000329d
    2860:	0000322d 	.word	0x0000322d
    2864:	00001ea1 	.word	0x00001ea1
    2868:	41002000 	.word	0x41002000
    286c:	000032c1 	.word	0x000032c1
    2870:	00001de3 	.word	0x00001de3
    2874:	00001e0d 	.word	0x00001e0d
    2878:	00001eed 	.word	0x00001eed
    287c:	00003399 	.word	0x00003399
    2880:	000029c1 	.word	0x000029c1
    2884:	00002085 	.word	0x00002085
    2888:	20000ff8 	.word	0x20000ff8

0000288c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    288c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    288e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2890:	2a00      	cmp	r2, #0
    2892:	d101      	bne.n	2898 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2894:	0018      	movs	r0, r3
    2896:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2898:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    289a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    289c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    289e:	2a00      	cmp	r2, #0
    28a0:	d1f8      	bne.n	2894 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28a2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    28a4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    28a6:	2a00      	cmp	r2, #0
    28a8:	d1fc      	bne.n	28a4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    28aa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    28ac:	2102      	movs	r1, #2
    28ae:	7e1a      	ldrb	r2, [r3, #24]
    28b0:	420a      	tst	r2, r1
    28b2:	d0fc      	beq.n	28ae <usart_write_wait+0x22>
	return STATUS_OK;
    28b4:	2300      	movs	r3, #0
    28b6:	e7ed      	b.n	2894 <usart_write_wait+0x8>

000028b8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    28b8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    28ba:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    28bc:	2a00      	cmp	r2, #0
    28be:	d101      	bne.n	28c4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    28c0:	0018      	movs	r0, r3
    28c2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    28c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    28c6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28c8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    28ca:	2a00      	cmp	r2, #0
    28cc:	d1f8      	bne.n	28c0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28ce:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    28d0:	7e10      	ldrb	r0, [r2, #24]
    28d2:	0740      	lsls	r0, r0, #29
    28d4:	d5f4      	bpl.n	28c0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    28d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28d8:	2b00      	cmp	r3, #0
    28da:	d1fc      	bne.n	28d6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    28dc:	8b53      	ldrh	r3, [r2, #26]
    28de:	b2db      	uxtb	r3, r3
	if (error_code) {
    28e0:	0698      	lsls	r0, r3, #26
    28e2:	d01d      	beq.n	2920 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    28e4:	0798      	lsls	r0, r3, #30
    28e6:	d503      	bpl.n	28f0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    28e8:	2302      	movs	r3, #2
    28ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    28ec:	3318      	adds	r3, #24
    28ee:	e7e7      	b.n	28c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28f0:	0758      	lsls	r0, r3, #29
    28f2:	d503      	bpl.n	28fc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    28f4:	2304      	movs	r3, #4
    28f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    28f8:	331a      	adds	r3, #26
    28fa:	e7e1      	b.n	28c0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    28fc:	07d8      	lsls	r0, r3, #31
    28fe:	d503      	bpl.n	2908 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2900:	2301      	movs	r3, #1
    2902:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2904:	3312      	adds	r3, #18
    2906:	e7db      	b.n	28c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2908:	06d8      	lsls	r0, r3, #27
    290a:	d503      	bpl.n	2914 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    290c:	2310      	movs	r3, #16
    290e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2910:	3332      	adds	r3, #50	; 0x32
    2912:	e7d5      	b.n	28c0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2914:	069b      	lsls	r3, r3, #26
    2916:	d503      	bpl.n	2920 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2918:	2320      	movs	r3, #32
    291a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    291c:	3321      	adds	r3, #33	; 0x21
    291e:	e7cf      	b.n	28c0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2920:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2922:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2924:	2300      	movs	r3, #0
    2926:	e7cb      	b.n	28c0 <usart_read_wait+0x8>

00002928 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	46d6      	mov	lr, sl
    292c:	b500      	push	{lr}
    292e:	b084      	sub	sp, #16
    2930:	0004      	movs	r4, r0
    2932:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2934:	2017      	movs	r0, #23
	if (length == 0) {
    2936:	2a00      	cmp	r2, #0
    2938:	d103      	bne.n	2942 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    293a:	b004      	add	sp, #16
    293c:	bc04      	pop	{r2}
    293e:	4692      	mov	sl, r2
    2940:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    2942:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    2944:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    2946:	2b00      	cmp	r3, #0
    2948:	d0f7      	beq.n	293a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    294a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    294c:	3a01      	subs	r2, #1
    294e:	b293      	uxth	r3, r2
    2950:	469a      	mov	sl, r3
    2952:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    2954:	2704      	movs	r7, #4
    2956:	e019      	b.n	298c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    2958:	2300      	movs	r3, #0
    295a:	aa02      	add	r2, sp, #8
    295c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    295e:	1d91      	adds	r1, r2, #6
    2960:	0020      	movs	r0, r4
    2962:	4b15      	ldr	r3, [pc, #84]	; (29b8 <usart_read_buffer_wait+0x90>)
    2964:	4798      	blx	r3
		if (retval != STATUS_OK) {
    2966:	2800      	cmp	r0, #0
    2968:	d1e7      	bne.n	293a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    296a:	1c69      	adds	r1, r5, #1
    296c:	b289      	uxth	r1, r1
    296e:	ab02      	add	r3, sp, #8
    2970:	88db      	ldrh	r3, [r3, #6]
    2972:	9a01      	ldr	r2, [sp, #4]
    2974:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2976:	7962      	ldrb	r2, [r4, #5]
    2978:	2a01      	cmp	r2, #1
    297a:	d014      	beq.n	29a6 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    297c:	000d      	movs	r5, r1
	while (length--) {
    297e:	4653      	mov	r3, sl
    2980:	3b01      	subs	r3, #1
    2982:	b29b      	uxth	r3, r3
    2984:	469a      	mov	sl, r3
    2986:	4b0d      	ldr	r3, [pc, #52]	; (29bc <usart_read_buffer_wait+0x94>)
    2988:	459a      	cmp	sl, r3
    298a:	d0d6      	beq.n	293a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    298c:	7e33      	ldrb	r3, [r6, #24]
    298e:	423b      	tst	r3, r7
    2990:	d1e2      	bne.n	2958 <usart_read_buffer_wait+0x30>
    2992:	4b0a      	ldr	r3, [pc, #40]	; (29bc <usart_read_buffer_wait+0x94>)
    2994:	7e32      	ldrb	r2, [r6, #24]
    2996:	423a      	tst	r2, r7
    2998:	d1de      	bne.n	2958 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    299a:	2b01      	cmp	r3, #1
    299c:	d009      	beq.n	29b2 <usart_read_buffer_wait+0x8a>
    299e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    29a0:	2b00      	cmp	r3, #0
    29a2:	d1f7      	bne.n	2994 <usart_read_buffer_wait+0x6c>
    29a4:	e7d8      	b.n	2958 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    29a6:	3502      	adds	r5, #2
    29a8:	b2ad      	uxth	r5, r5
    29aa:	0a1b      	lsrs	r3, r3, #8
    29ac:	9a01      	ldr	r2, [sp, #4]
    29ae:	5453      	strb	r3, [r2, r1]
    29b0:	e7e5      	b.n	297e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    29b2:	2012      	movs	r0, #18
    29b4:	e7c1      	b.n	293a <usart_read_buffer_wait+0x12>
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	000028b9 	.word	0x000028b9
    29bc:	0000ffff 	.word	0x0000ffff

000029c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    29c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    29c2:	0080      	lsls	r0, r0, #2
    29c4:	4b62      	ldr	r3, [pc, #392]	; (2b50 <_usart_interrupt_handler+0x190>)
    29c6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    29c8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29ca:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    29cc:	2b00      	cmp	r3, #0
    29ce:	d1fc      	bne.n	29ca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    29d0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    29d2:	7da6      	ldrb	r6, [r4, #22]
    29d4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    29d6:	2330      	movs	r3, #48	; 0x30
    29d8:	5ceb      	ldrb	r3, [r5, r3]
    29da:	2231      	movs	r2, #49	; 0x31
    29dc:	5caf      	ldrb	r7, [r5, r2]
    29de:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    29e0:	07f3      	lsls	r3, r6, #31
    29e2:	d522      	bpl.n	2a2a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    29e4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    29e6:	b29b      	uxth	r3, r3
    29e8:	2b00      	cmp	r3, #0
    29ea:	d01c      	beq.n	2a26 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    29ee:	7813      	ldrb	r3, [r2, #0]
    29f0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    29f2:	1c51      	adds	r1, r2, #1
    29f4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    29f6:	7969      	ldrb	r1, [r5, #5]
    29f8:	2901      	cmp	r1, #1
    29fa:	d00e      	beq.n	2a1a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29fc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    29fe:	05db      	lsls	r3, r3, #23
    2a00:	0ddb      	lsrs	r3, r3, #23
    2a02:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2a04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a06:	3b01      	subs	r3, #1
    2a08:	b29b      	uxth	r3, r3
    2a0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d10c      	bne.n	2a2a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a10:	3301      	adds	r3, #1
    2a12:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2a14:	3301      	adds	r3, #1
    2a16:	75a3      	strb	r3, [r4, #22]
    2a18:	e007      	b.n	2a2a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a1a:	7851      	ldrb	r1, [r2, #1]
    2a1c:	0209      	lsls	r1, r1, #8
    2a1e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2a20:	3202      	adds	r2, #2
    2a22:	62aa      	str	r2, [r5, #40]	; 0x28
    2a24:	e7eb      	b.n	29fe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a26:	2301      	movs	r3, #1
    2a28:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2a2a:	07b3      	lsls	r3, r6, #30
    2a2c:	d506      	bpl.n	2a3c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2a2e:	2302      	movs	r3, #2
    2a30:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2a32:	2200      	movs	r2, #0
    2a34:	3331      	adds	r3, #49	; 0x31
    2a36:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a38:	07fb      	lsls	r3, r7, #31
    2a3a:	d41a      	bmi.n	2a72 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a3c:	0773      	lsls	r3, r6, #29
    2a3e:	d565      	bpl.n	2b0c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2a40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a42:	b29b      	uxth	r3, r3
    2a44:	2b00      	cmp	r3, #0
    2a46:	d05f      	beq.n	2b08 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a48:	8b63      	ldrh	r3, [r4, #26]
    2a4a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2a4c:	071a      	lsls	r2, r3, #28
    2a4e:	d414      	bmi.n	2a7a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a50:	223f      	movs	r2, #63	; 0x3f
    2a52:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2a54:	2b00      	cmp	r3, #0
    2a56:	d034      	beq.n	2ac2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2a58:	079a      	lsls	r2, r3, #30
    2a5a:	d511      	bpl.n	2a80 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2a5c:	221a      	movs	r2, #26
    2a5e:	2332      	movs	r3, #50	; 0x32
    2a60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a62:	3b30      	subs	r3, #48	; 0x30
    2a64:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2a66:	077b      	lsls	r3, r7, #29
    2a68:	d550      	bpl.n	2b0c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2a6a:	0028      	movs	r0, r5
    2a6c:	696b      	ldr	r3, [r5, #20]
    2a6e:	4798      	blx	r3
    2a70:	e04c      	b.n	2b0c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2a72:	0028      	movs	r0, r5
    2a74:	68eb      	ldr	r3, [r5, #12]
    2a76:	4798      	blx	r3
    2a78:	e7e0      	b.n	2a3c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2a7a:	2237      	movs	r2, #55	; 0x37
    2a7c:	4013      	ands	r3, r2
    2a7e:	e7e9      	b.n	2a54 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a80:	075a      	lsls	r2, r3, #29
    2a82:	d505      	bpl.n	2a90 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2a84:	221e      	movs	r2, #30
    2a86:	2332      	movs	r3, #50	; 0x32
    2a88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a8a:	3b2e      	subs	r3, #46	; 0x2e
    2a8c:	8363      	strh	r3, [r4, #26]
    2a8e:	e7ea      	b.n	2a66 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a90:	07da      	lsls	r2, r3, #31
    2a92:	d505      	bpl.n	2aa0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2a94:	2213      	movs	r2, #19
    2a96:	2332      	movs	r3, #50	; 0x32
    2a98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a9a:	3b31      	subs	r3, #49	; 0x31
    2a9c:	8363      	strh	r3, [r4, #26]
    2a9e:	e7e2      	b.n	2a66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2aa0:	06da      	lsls	r2, r3, #27
    2aa2:	d505      	bpl.n	2ab0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2aa4:	2242      	movs	r2, #66	; 0x42
    2aa6:	2332      	movs	r3, #50	; 0x32
    2aa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2aaa:	3b22      	subs	r3, #34	; 0x22
    2aac:	8363      	strh	r3, [r4, #26]
    2aae:	e7da      	b.n	2a66 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ab0:	2220      	movs	r2, #32
    2ab2:	421a      	tst	r2, r3
    2ab4:	d0d7      	beq.n	2a66 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2ab6:	3221      	adds	r2, #33	; 0x21
    2ab8:	2332      	movs	r3, #50	; 0x32
    2aba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2abc:	3b12      	subs	r3, #18
    2abe:	8363      	strh	r3, [r4, #26]
    2ac0:	e7d1      	b.n	2a66 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ac2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ac4:	05db      	lsls	r3, r3, #23
    2ac6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2ac8:	b2da      	uxtb	r2, r3
    2aca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2acc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2ace:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2ad0:	1c51      	adds	r1, r2, #1
    2ad2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ad4:	7969      	ldrb	r1, [r5, #5]
    2ad6:	2901      	cmp	r1, #1
    2ad8:	d010      	beq.n	2afc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2ada:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2adc:	3b01      	subs	r3, #1
    2ade:	b29b      	uxth	r3, r3
    2ae0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d112      	bne.n	2b0c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ae6:	3304      	adds	r3, #4
    2ae8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2aea:	2200      	movs	r2, #0
    2aec:	332e      	adds	r3, #46	; 0x2e
    2aee:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2af0:	07bb      	lsls	r3, r7, #30
    2af2:	d50b      	bpl.n	2b0c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2af4:	0028      	movs	r0, r5
    2af6:	692b      	ldr	r3, [r5, #16]
    2af8:	4798      	blx	r3
    2afa:	e007      	b.n	2b0c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2afc:	0a1b      	lsrs	r3, r3, #8
    2afe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2b00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2b02:	3301      	adds	r3, #1
    2b04:	626b      	str	r3, [r5, #36]	; 0x24
    2b06:	e7e8      	b.n	2ada <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b08:	2304      	movs	r3, #4
    2b0a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2b0c:	06f3      	lsls	r3, r6, #27
    2b0e:	d504      	bpl.n	2b1a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2b10:	2310      	movs	r3, #16
    2b12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2b14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2b16:	06fb      	lsls	r3, r7, #27
    2b18:	d40e      	bmi.n	2b38 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2b1a:	06b3      	lsls	r3, r6, #26
    2b1c:	d504      	bpl.n	2b28 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2b1e:	2320      	movs	r3, #32
    2b20:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b22:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2b24:	073b      	lsls	r3, r7, #28
    2b26:	d40b      	bmi.n	2b40 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2b28:	0733      	lsls	r3, r6, #28
    2b2a:	d504      	bpl.n	2b36 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2b2c:	2308      	movs	r3, #8
    2b2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b32:	06bb      	lsls	r3, r7, #26
    2b34:	d408      	bmi.n	2b48 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b38:	0028      	movs	r0, r5
    2b3a:	69eb      	ldr	r3, [r5, #28]
    2b3c:	4798      	blx	r3
    2b3e:	e7ec      	b.n	2b1a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b40:	0028      	movs	r0, r5
    2b42:	69ab      	ldr	r3, [r5, #24]
    2b44:	4798      	blx	r3
    2b46:	e7ef      	b.n	2b28 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2b48:	6a2b      	ldr	r3, [r5, #32]
    2b4a:	0028      	movs	r0, r5
    2b4c:	4798      	blx	r3
}
    2b4e:	e7f2      	b.n	2b36 <_usart_interrupt_handler+0x176>
    2b50:	20000ff8 	.word	0x20000ff8

00002b54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2b54:	b510      	push	{r4, lr}
	switch (clock_source) {
    2b56:	2808      	cmp	r0, #8
    2b58:	d803      	bhi.n	2b62 <system_clock_source_get_hz+0xe>
    2b5a:	0080      	lsls	r0, r0, #2
    2b5c:	4b1c      	ldr	r3, [pc, #112]	; (2bd0 <system_clock_source_get_hz+0x7c>)
    2b5e:	581b      	ldr	r3, [r3, r0]
    2b60:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2b62:	2000      	movs	r0, #0
    2b64:	e032      	b.n	2bcc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2b66:	4b1b      	ldr	r3, [pc, #108]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2b68:	6918      	ldr	r0, [r3, #16]
    2b6a:	e02f      	b.n	2bcc <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2b6c:	4b1a      	ldr	r3, [pc, #104]	; (2bd8 <system_clock_source_get_hz+0x84>)
    2b6e:	7d18      	ldrb	r0, [r3, #20]
    2b70:	0700      	lsls	r0, r0, #28
    2b72:	0f80      	lsrs	r0, r0, #30
    2b74:	1c43      	adds	r3, r0, #1
    2b76:	4819      	ldr	r0, [pc, #100]	; (2bdc <system_clock_source_get_hz+0x88>)
    2b78:	4358      	muls	r0, r3
    2b7a:	e027      	b.n	2bcc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2b7c:	4b15      	ldr	r3, [pc, #84]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2b7e:	6958      	ldr	r0, [r3, #20]
    2b80:	e024      	b.n	2bcc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2b82:	4b14      	ldr	r3, [pc, #80]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2b84:	681b      	ldr	r3, [r3, #0]
			return 0;
    2b86:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2b88:	079b      	lsls	r3, r3, #30
    2b8a:	d51f      	bpl.n	2bcc <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2b8c:	4912      	ldr	r1, [pc, #72]	; (2bd8 <system_clock_source_get_hz+0x84>)
    2b8e:	2280      	movs	r2, #128	; 0x80
    2b90:	0052      	lsls	r2, r2, #1
    2b92:	68cb      	ldr	r3, [r1, #12]
    2b94:	4213      	tst	r3, r2
    2b96:	d0fc      	beq.n	2b92 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2b98:	4b0e      	ldr	r3, [pc, #56]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2b9a:	681b      	ldr	r3, [r3, #0]
    2b9c:	075b      	lsls	r3, r3, #29
    2b9e:	d401      	bmi.n	2ba4 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    2ba0:	480f      	ldr	r0, [pc, #60]	; (2be0 <system_clock_source_get_hz+0x8c>)
    2ba2:	e013      	b.n	2bcc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2ba4:	2000      	movs	r0, #0
    2ba6:	4b0f      	ldr	r3, [pc, #60]	; (2be4 <system_clock_source_get_hz+0x90>)
    2ba8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2baa:	4b0a      	ldr	r3, [pc, #40]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2bac:	689b      	ldr	r3, [r3, #8]
    2bae:	041b      	lsls	r3, r3, #16
    2bb0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2bb2:	4358      	muls	r0, r3
    2bb4:	e00a      	b.n	2bcc <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2bb6:	2328      	movs	r3, #40	; 0x28
    2bb8:	4a07      	ldr	r2, [pc, #28]	; (2bd8 <system_clock_source_get_hz+0x84>)
    2bba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2bbc:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2bbe:	079b      	lsls	r3, r3, #30
    2bc0:	d504      	bpl.n	2bcc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2bc2:	4b04      	ldr	r3, [pc, #16]	; (2bd4 <system_clock_source_get_hz+0x80>)
    2bc4:	68d8      	ldr	r0, [r3, #12]
    2bc6:	e001      	b.n	2bcc <system_clock_source_get_hz+0x78>
		return 32768UL;
    2bc8:	2080      	movs	r0, #128	; 0x80
    2bca:	0200      	lsls	r0, r0, #8
	}
}
    2bcc:	bd10      	pop	{r4, pc}
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	0001a440 	.word	0x0001a440
    2bd4:	20000a30 	.word	0x20000a30
    2bd8:	40000c00 	.word	0x40000c00
    2bdc:	003d0900 	.word	0x003d0900
    2be0:	02dc6c00 	.word	0x02dc6c00
    2be4:	000032c1 	.word	0x000032c1

00002be8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    2be8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    2bea:	4c0b      	ldr	r4, [pc, #44]	; (2c18 <system_clock_source_osc16m_set_config+0x30>)
    2bec:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    2bee:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2bf0:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    2bf2:	7802      	ldrb	r2, [r0, #0]
    2bf4:	2103      	movs	r1, #3
    2bf6:	4011      	ands	r1, r2
    2bf8:	0089      	lsls	r1, r1, #2
    2bfa:	220c      	movs	r2, #12
    2bfc:	4393      	bics	r3, r2
    2bfe:	430b      	orrs	r3, r1
    2c00:	3a0b      	subs	r2, #11
    2c02:	4032      	ands	r2, r6
    2c04:	0192      	lsls	r2, r2, #6
    2c06:	2140      	movs	r1, #64	; 0x40
    2c08:	438b      	bics	r3, r1
    2c0a:	4313      	orrs	r3, r2
    2c0c:	01ed      	lsls	r5, r5, #7
    2c0e:	227f      	movs	r2, #127	; 0x7f
    2c10:	4013      	ands	r3, r2
    2c12:	432b      	orrs	r3, r5
    2c14:	7523      	strb	r3, [r4, #20]
}
    2c16:	bd70      	pop	{r4, r5, r6, pc}
    2c18:	40000c00 	.word	0x40000c00

00002c1c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c1e:	46d6      	mov	lr, sl
    2c20:	464f      	mov	r7, r9
    2c22:	4646      	mov	r6, r8
    2c24:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2c26:	4b20      	ldr	r3, [pc, #128]	; (2ca8 <system_clock_source_xosc32k_set_config+0x8c>)
    2c28:	469a      	mov	sl, r3
    2c2a:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2c2c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2c2e:	7801      	ldrb	r1, [r0, #0]
    2c30:	424c      	negs	r4, r1
    2c32:	414c      	adcs	r4, r1
    2c34:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2c36:	7881      	ldrb	r1, [r0, #2]
    2c38:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2c3a:	78c1      	ldrb	r1, [r0, #3]
    2c3c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2c3e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c40:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2c42:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2c44:	6840      	ldr	r0, [r0, #4]
    2c46:	4919      	ldr	r1, [pc, #100]	; (2cac <system_clock_source_xosc32k_set_config+0x90>)
    2c48:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    2c4a:	2101      	movs	r1, #1
    2c4c:	4648      	mov	r0, r9
    2c4e:	0080      	lsls	r0, r0, #2
    2c50:	2204      	movs	r2, #4
    2c52:	4393      	bics	r3, r2
    2c54:	4303      	orrs	r3, r0
    2c56:	4640      	mov	r0, r8
    2c58:	4008      	ands	r0, r1
    2c5a:	00c0      	lsls	r0, r0, #3
    2c5c:	3204      	adds	r2, #4
    2c5e:	4393      	bics	r3, r2
    2c60:	4303      	orrs	r3, r0
    2c62:	4660      	mov	r0, ip
    2c64:	4008      	ands	r0, r1
    2c66:	0100      	lsls	r0, r0, #4
    2c68:	3208      	adds	r2, #8
    2c6a:	4393      	bics	r3, r2
    2c6c:	4303      	orrs	r3, r0
    2c6e:	400f      	ands	r7, r1
    2c70:	01bf      	lsls	r7, r7, #6
    2c72:	2040      	movs	r0, #64	; 0x40
    2c74:	4383      	bics	r3, r0
    2c76:	433b      	orrs	r3, r7
    2c78:	400e      	ands	r6, r1
    2c7a:	01f6      	lsls	r6, r6, #7
    2c7c:	3040      	adds	r0, #64	; 0x40
    2c7e:	4383      	bics	r3, r0
    2c80:	4333      	orrs	r3, r6
    2c82:	3879      	subs	r0, #121	; 0x79
    2c84:	4005      	ands	r5, r0
    2c86:	022d      	lsls	r5, r5, #8
    2c88:	4809      	ldr	r0, [pc, #36]	; (2cb0 <system_clock_source_xosc32k_set_config+0x94>)
    2c8a:	4003      	ands	r3, r0
    2c8c:	432b      	orrs	r3, r5
    2c8e:	4021      	ands	r1, r4
    2c90:	0309      	lsls	r1, r1, #12
    2c92:	4808      	ldr	r0, [pc, #32]	; (2cb4 <system_clock_source_xosc32k_set_config+0x98>)
    2c94:	4003      	ands	r3, r0
    2c96:	430b      	orrs	r3, r1
    2c98:	4652      	mov	r2, sl
    2c9a:	6153      	str	r3, [r2, #20]
}
    2c9c:	bc1c      	pop	{r2, r3, r4}
    2c9e:	4690      	mov	r8, r2
    2ca0:	4699      	mov	r9, r3
    2ca2:	46a2      	mov	sl, r4
    2ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	40001000 	.word	0x40001000
    2cac:	20000a30 	.word	0x20000a30
    2cb0:	fffff8ff 	.word	0xfffff8ff
    2cb4:	ffffefff 	.word	0xffffefff

00002cb8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2cb8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cba:	7a83      	ldrb	r3, [r0, #10]
    2cbc:	069b      	lsls	r3, r3, #26
    2cbe:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2cc0:	8982      	ldrh	r2, [r0, #12]
    2cc2:	0592      	lsls	r2, r2, #22
    2cc4:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cc6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2cc8:	491a      	ldr	r1, [pc, #104]	; (2d34 <system_clock_source_dfll_set_config+0x7c>)
    2cca:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2ccc:	7a03      	ldrb	r3, [r0, #8]
    2cce:	7a42      	ldrb	r2, [r0, #9]
    2cd0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2cd2:	8882      	ldrh	r2, [r0, #4]
    2cd4:	88c4      	ldrh	r4, [r0, #6]
    2cd6:	4322      	orrs	r2, r4
    2cd8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2cda:	7842      	ldrb	r2, [r0, #1]
    2cdc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2cde:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    2ce0:	7882      	ldrb	r2, [r0, #2]
    2ce2:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2ce4:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ce6:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2ce8:	7803      	ldrb	r3, [r0, #0]
    2cea:	2b04      	cmp	r3, #4
    2cec:	d011      	beq.n	2d12 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2cee:	2b20      	cmp	r3, #32
    2cf0:	d10e      	bne.n	2d10 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2cf2:	7b83      	ldrb	r3, [r0, #14]
    2cf4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2cf6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2cf8:	4313      	orrs	r3, r2
    2cfa:	8a02      	ldrh	r2, [r0, #16]
    2cfc:	0412      	lsls	r2, r2, #16
    2cfe:	490e      	ldr	r1, [pc, #56]	; (2d38 <system_clock_source_dfll_set_config+0x80>)
    2d00:	400a      	ands	r2, r1
    2d02:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d04:	4a0b      	ldr	r2, [pc, #44]	; (2d34 <system_clock_source_dfll_set_config+0x7c>)
    2d06:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2d08:	6811      	ldr	r1, [r2, #0]
    2d0a:	4b0c      	ldr	r3, [pc, #48]	; (2d3c <system_clock_source_dfll_set_config+0x84>)
    2d0c:	430b      	orrs	r3, r1
    2d0e:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    2d10:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2d12:	7b83      	ldrb	r3, [r0, #14]
    2d14:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2d16:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2d18:	4313      	orrs	r3, r2
    2d1a:	8a02      	ldrh	r2, [r0, #16]
    2d1c:	0412      	lsls	r2, r2, #16
    2d1e:	4906      	ldr	r1, [pc, #24]	; (2d38 <system_clock_source_dfll_set_config+0x80>)
    2d20:	400a      	ands	r2, r1
    2d22:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d24:	4a03      	ldr	r2, [pc, #12]	; (2d34 <system_clock_source_dfll_set_config+0x7c>)
    2d26:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2d28:	6813      	ldr	r3, [r2, #0]
    2d2a:	2104      	movs	r1, #4
    2d2c:	430b      	orrs	r3, r1
    2d2e:	6013      	str	r3, [r2, #0]
    2d30:	e7ee      	b.n	2d10 <system_clock_source_dfll_set_config+0x58>
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	20000a30 	.word	0x20000a30
    2d38:	03ff0000 	.word	0x03ff0000
    2d3c:	00000424 	.word	0x00000424

00002d40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2d40:	2808      	cmp	r0, #8
    2d42:	d803      	bhi.n	2d4c <system_clock_source_enable+0xc>
    2d44:	0080      	lsls	r0, r0, #2
    2d46:	4b29      	ldr	r3, [pc, #164]	; (2dec <system_clock_source_enable+0xac>)
    2d48:	581b      	ldr	r3, [r3, r0]
    2d4a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d4c:	2017      	movs	r0, #23
    2d4e:	e04b      	b.n	2de8 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2d50:	4a27      	ldr	r2, [pc, #156]	; (2df0 <system_clock_source_enable+0xb0>)
    2d52:	7d13      	ldrb	r3, [r2, #20]
    2d54:	2102      	movs	r1, #2
    2d56:	430b      	orrs	r3, r1
    2d58:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2d5a:	2000      	movs	r0, #0
    2d5c:	e044      	b.n	2de8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2d5e:	4a25      	ldr	r2, [pc, #148]	; (2df4 <system_clock_source_enable+0xb4>)
    2d60:	6993      	ldr	r3, [r2, #24]
    2d62:	2102      	movs	r1, #2
    2d64:	430b      	orrs	r3, r1
    2d66:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2d68:	2000      	movs	r0, #0
		break;
    2d6a:	e03d      	b.n	2de8 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2d6c:	4a20      	ldr	r2, [pc, #128]	; (2df0 <system_clock_source_enable+0xb0>)
    2d6e:	8a13      	ldrh	r3, [r2, #16]
    2d70:	2102      	movs	r1, #2
    2d72:	430b      	orrs	r3, r1
    2d74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2d76:	2000      	movs	r0, #0
		break;
    2d78:	e036      	b.n	2de8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2d7a:	4a1e      	ldr	r2, [pc, #120]	; (2df4 <system_clock_source_enable+0xb4>)
    2d7c:	6953      	ldr	r3, [r2, #20]
    2d7e:	2102      	movs	r1, #2
    2d80:	430b      	orrs	r3, r1
    2d82:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2d84:	2000      	movs	r0, #0
		break;
    2d86:	e02f      	b.n	2de8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2d88:	491b      	ldr	r1, [pc, #108]	; (2df8 <system_clock_source_enable+0xb8>)
    2d8a:	680b      	ldr	r3, [r1, #0]
    2d8c:	2202      	movs	r2, #2
    2d8e:	4313      	orrs	r3, r2
    2d90:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2d92:	4b17      	ldr	r3, [pc, #92]	; (2df0 <system_clock_source_enable+0xb0>)
    2d94:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2d96:	0019      	movs	r1, r3
    2d98:	32fe      	adds	r2, #254	; 0xfe
    2d9a:	68cb      	ldr	r3, [r1, #12]
    2d9c:	4213      	tst	r3, r2
    2d9e:	d0fc      	beq.n	2d9a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2da0:	4a15      	ldr	r2, [pc, #84]	; (2df8 <system_clock_source_enable+0xb8>)
    2da2:	6891      	ldr	r1, [r2, #8]
    2da4:	4b12      	ldr	r3, [pc, #72]	; (2df0 <system_clock_source_enable+0xb0>)
    2da6:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2da8:	6852      	ldr	r2, [r2, #4]
    2daa:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    2dac:	2200      	movs	r2, #0
    2dae:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2db0:	0019      	movs	r1, r3
    2db2:	3201      	adds	r2, #1
    2db4:	32ff      	adds	r2, #255	; 0xff
    2db6:	68cb      	ldr	r3, [r1, #12]
    2db8:	4213      	tst	r3, r2
    2dba:	d0fc      	beq.n	2db6 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2dbc:	4b0e      	ldr	r3, [pc, #56]	; (2df8 <system_clock_source_enable+0xb8>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	4a0b      	ldr	r2, [pc, #44]	; (2df0 <system_clock_source_enable+0xb0>)
    2dc4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2dc6:	2000      	movs	r0, #0
    2dc8:	e00e      	b.n	2de8 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2dca:	4909      	ldr	r1, [pc, #36]	; (2df0 <system_clock_source_enable+0xb0>)
    2dcc:	2228      	movs	r2, #40	; 0x28
    2dce:	5c8b      	ldrb	r3, [r1, r2]
    2dd0:	2002      	movs	r0, #2
    2dd2:	4303      	orrs	r3, r0
    2dd4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2dd6:	0008      	movs	r0, r1
    2dd8:	2138      	movs	r1, #56	; 0x38
    2dda:	3a26      	subs	r2, #38	; 0x26
    2ddc:	5c43      	ldrb	r3, [r0, r1]
    2dde:	4213      	tst	r3, r2
    2de0:	d1fc      	bne.n	2ddc <system_clock_source_enable+0x9c>
	return STATUS_OK;
    2de2:	2000      	movs	r0, #0
    2de4:	e000      	b.n	2de8 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    2de6:	2000      	movs	r0, #0
}
    2de8:	4770      	bx	lr
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	0001a464 	.word	0x0001a464
    2df0:	40000c00 	.word	0x40000c00
    2df4:	40001000 	.word	0x40001000
    2df8:	20000a30 	.word	0x20000a30

00002dfc <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2dfc:	2808      	cmp	r0, #8
    2dfe:	d832      	bhi.n	2e66 <system_clock_source_disable+0x6a>
    2e00:	0080      	lsls	r0, r0, #2
    2e02:	4b1a      	ldr	r3, [pc, #104]	; (2e6c <system_clock_source_disable+0x70>)
    2e04:	581b      	ldr	r3, [r3, r0]
    2e06:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    2e08:	4a19      	ldr	r2, [pc, #100]	; (2e70 <system_clock_source_disable+0x74>)
    2e0a:	7d13      	ldrb	r3, [r2, #20]
    2e0c:	2102      	movs	r1, #2
    2e0e:	438b      	bics	r3, r1
    2e10:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    2e12:	2000      	movs	r0, #0
}
    2e14:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    2e16:	4a17      	ldr	r2, [pc, #92]	; (2e74 <system_clock_source_disable+0x78>)
    2e18:	6993      	ldr	r3, [r2, #24]
    2e1a:	2102      	movs	r1, #2
    2e1c:	438b      	bics	r3, r1
    2e1e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    2e20:	2000      	movs	r0, #0
		break;
    2e22:	e7f7      	b.n	2e14 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    2e24:	4a12      	ldr	r2, [pc, #72]	; (2e70 <system_clock_source_disable+0x74>)
    2e26:	8a13      	ldrh	r3, [r2, #16]
    2e28:	2102      	movs	r1, #2
    2e2a:	438b      	bics	r3, r1
    2e2c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2e2e:	2000      	movs	r0, #0
		break;
    2e30:	e7f0      	b.n	2e14 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    2e32:	4a10      	ldr	r2, [pc, #64]	; (2e74 <system_clock_source_disable+0x78>)
    2e34:	6953      	ldr	r3, [r2, #20]
    2e36:	2102      	movs	r1, #2
    2e38:	438b      	bics	r3, r1
    2e3a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2e3c:	2000      	movs	r0, #0
		break;
    2e3e:	e7e9      	b.n	2e14 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    2e40:	4b0d      	ldr	r3, [pc, #52]	; (2e78 <system_clock_source_disable+0x7c>)
    2e42:	681a      	ldr	r2, [r3, #0]
    2e44:	2102      	movs	r1, #2
    2e46:	438a      	bics	r2, r1
    2e48:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	b29b      	uxth	r3, r3
    2e4e:	4a08      	ldr	r2, [pc, #32]	; (2e70 <system_clock_source_disable+0x74>)
    2e50:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2e52:	2000      	movs	r0, #0
		break;
    2e54:	e7de      	b.n	2e14 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    2e56:	4906      	ldr	r1, [pc, #24]	; (2e70 <system_clock_source_disable+0x74>)
    2e58:	2228      	movs	r2, #40	; 0x28
    2e5a:	5c8b      	ldrb	r3, [r1, r2]
    2e5c:	2002      	movs	r0, #2
    2e5e:	4383      	bics	r3, r0
    2e60:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2e62:	2000      	movs	r0, #0
		break;
    2e64:	e7d6      	b.n	2e14 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    2e66:	2017      	movs	r0, #23
    2e68:	e7d4      	b.n	2e14 <system_clock_source_disable+0x18>
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	0001a488 	.word	0x0001a488
    2e70:	40000c00 	.word	0x40000c00
    2e74:	40001000 	.word	0x40001000
    2e78:	20000a30 	.word	0x20000a30

00002e7c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e7e:	46ce      	mov	lr, r9
    2e80:	4647      	mov	r7, r8
    2e82:	b580      	push	{r7, lr}
    2e84:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2e86:	2280      	movs	r2, #128	; 0x80
    2e88:	0052      	lsls	r2, r2, #1
    2e8a:	4b76      	ldr	r3, [pc, #472]	; (3064 <system_clock_init+0x1e8>)
    2e8c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2e8e:	3afd      	subs	r2, #253	; 0xfd
    2e90:	4b75      	ldr	r3, [pc, #468]	; (3068 <system_clock_init+0x1ec>)
    2e92:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2e94:	4a75      	ldr	r2, [pc, #468]	; (306c <system_clock_init+0x1f0>)
    2e96:	6853      	ldr	r3, [r2, #4]
    2e98:	211e      	movs	r1, #30
    2e9a:	438b      	bics	r3, r1
    2e9c:	391a      	subs	r1, #26
    2e9e:	430b      	orrs	r3, r1
    2ea0:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2ea2:	2380      	movs	r3, #128	; 0x80
    2ea4:	05db      	lsls	r3, r3, #23
    2ea6:	789b      	ldrb	r3, [r3, #2]
    2ea8:	2b02      	cmp	r3, #2
    2eaa:	d00f      	beq.n	2ecc <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	05db      	lsls	r3, r3, #23
    2eb0:	789b      	ldrb	r3, [r3, #2]
    2eb2:	b25b      	sxtb	r3, r3
    2eb4:	2b00      	cmp	r3, #0
    2eb6:	db09      	blt.n	2ecc <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2eb8:	2380      	movs	r3, #128	; 0x80
    2eba:	05db      	lsls	r3, r3, #23
    2ebc:	2201      	movs	r2, #1
    2ebe:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2ec0:	3201      	adds	r2, #1
    2ec2:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2ec4:	001a      	movs	r2, r3
    2ec6:	7993      	ldrb	r3, [r2, #6]
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d0fc      	beq.n	2ec6 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ecc:	a809      	add	r0, sp, #36	; 0x24
    2ece:	2300      	movs	r3, #0
    2ed0:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2ed2:	2280      	movs	r2, #128	; 0x80
    2ed4:	0212      	lsls	r2, r2, #8
    2ed6:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2ed8:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2eda:	2201      	movs	r2, #1
    2edc:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    2ede:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    2ee0:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2ee2:	3203      	adds	r2, #3
    2ee4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2ee6:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2ee8:	4b61      	ldr	r3, [pc, #388]	; (3070 <system_clock_init+0x1f4>)
    2eea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2eec:	2005      	movs	r0, #5
    2eee:	4b61      	ldr	r3, [pc, #388]	; (3074 <system_clock_init+0x1f8>)
    2ef0:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2ef2:	4961      	ldr	r1, [pc, #388]	; (3078 <system_clock_init+0x1fc>)
    2ef4:	2201      	movs	r2, #1
    2ef6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2ef8:	421a      	tst	r2, r3
    2efa:	d0fc      	beq.n	2ef6 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2efc:	a901      	add	r1, sp, #4
    2efe:	2501      	movs	r5, #1
    2f00:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2f02:	2400      	movs	r4, #0
    2f04:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2f06:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2f08:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2f0a:	2303      	movs	r3, #3
    2f0c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2f0e:	2000      	movs	r0, #0
    2f10:	4b5a      	ldr	r3, [pc, #360]	; (307c <system_clock_init+0x200>)
    2f12:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f14:	2006      	movs	r0, #6
    2f16:	4b5a      	ldr	r3, [pc, #360]	; (3080 <system_clock_init+0x204>)
    2f18:	4798      	blx	r3
	config->run_in_standby  = false;
    2f1a:	466b      	mov	r3, sp
    2f1c:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    2f1e:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    2f20:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    2f22:	4668      	mov	r0, sp
    2f24:	4b57      	ldr	r3, [pc, #348]	; (3084 <system_clock_init+0x208>)
    2f26:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f28:	2006      	movs	r0, #6
    2f2a:	4b52      	ldr	r3, [pc, #328]	; (3074 <system_clock_init+0x1f8>)
    2f2c:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2f2e:	494d      	ldr	r1, [pc, #308]	; (3064 <system_clock_init+0x1e8>)
    2f30:	2210      	movs	r2, #16
    2f32:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2f34:	421a      	tst	r2, r3
    2f36:	d0fc      	beq.n	2f32 <system_clock_init+0xb6>
	config->division_factor    = 1;
    2f38:	a901      	add	r1, sp, #4
    2f3a:	2301      	movs	r3, #1
    2f3c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2f3e:	2400      	movs	r4, #0
    2f40:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2f42:	3305      	adds	r3, #5
    2f44:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2f46:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2f48:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2f4a:	2000      	movs	r0, #0
    2f4c:	4b4b      	ldr	r3, [pc, #300]	; (307c <system_clock_init+0x200>)
    2f4e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2f50:	ab04      	add	r3, sp, #16
    2f52:	2200      	movs	r2, #0
    2f54:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2f56:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2f58:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2f5a:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2f5c:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2f5e:	213f      	movs	r1, #63	; 0x3f
    2f60:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2f62:	393b      	subs	r1, #59	; 0x3b
    2f64:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2f66:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2f68:	4b47      	ldr	r3, [pc, #284]	; (3088 <system_clock_init+0x20c>)
    2f6a:	681b      	ldr	r3, [r3, #0]
    2f6c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    2f6e:	2b3f      	cmp	r3, #63	; 0x3f
    2f70:	d100      	bne.n	2f74 <system_clock_init+0xf8>
    2f72:	e074      	b.n	305e <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2f74:	a804      	add	r0, sp, #16
    2f76:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2f78:	23b7      	movs	r3, #183	; 0xb7
    2f7a:	00db      	lsls	r3, r3, #3
    2f7c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2f7e:	2307      	movs	r3, #7
    2f80:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2f82:	3338      	adds	r3, #56	; 0x38
    2f84:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2f86:	4b41      	ldr	r3, [pc, #260]	; (308c <system_clock_init+0x210>)
    2f88:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2f8a:	4b41      	ldr	r3, [pc, #260]	; (3090 <system_clock_init+0x214>)
    2f8c:	4798      	blx	r3
	config->division_factor    = 1;
    2f8e:	ac01      	add	r4, sp, #4
    2f90:	2601      	movs	r6, #1
    2f92:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2f94:	2500      	movs	r5, #0
    2f96:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2f98:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2f9a:	2305      	movs	r3, #5
    2f9c:	4699      	mov	r9, r3
    2f9e:	7023      	strb	r3, [r4, #0]
    2fa0:	7226      	strb	r6, [r4, #8]
    2fa2:	0021      	movs	r1, r4
    2fa4:	2001      	movs	r0, #1
    2fa6:	4b35      	ldr	r3, [pc, #212]	; (307c <system_clock_init+0x200>)
    2fa8:	4698      	mov	r8, r3
    2faa:	4798      	blx	r3
    2fac:	2001      	movs	r0, #1
    2fae:	4f39      	ldr	r7, [pc, #228]	; (3094 <system_clock_init+0x218>)
    2fb0:	47b8      	blx	r7
	config->high_when_disabled = false;
    2fb2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2fb4:	2306      	movs	r3, #6
    2fb6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    2fb8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2fba:	7265      	strb	r5, [r4, #9]
    2fbc:	464b      	mov	r3, r9
    2fbe:	6063      	str	r3, [r4, #4]
    2fc0:	0021      	movs	r1, r4
    2fc2:	2002      	movs	r0, #2
    2fc4:	47c0      	blx	r8
    2fc6:	2002      	movs	r0, #2
    2fc8:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2fca:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2fcc:	0021      	movs	r1, r4
    2fce:	2000      	movs	r0, #0
    2fd0:	4b31      	ldr	r3, [pc, #196]	; (3098 <system_clock_init+0x21c>)
    2fd2:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    2fd4:	2000      	movs	r0, #0
    2fd6:	4b31      	ldr	r3, [pc, #196]	; (309c <system_clock_init+0x220>)
    2fd8:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2fda:	2007      	movs	r0, #7
    2fdc:	4b25      	ldr	r3, [pc, #148]	; (3074 <system_clock_init+0x1f8>)
    2fde:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2fe0:	4920      	ldr	r1, [pc, #128]	; (3064 <system_clock_init+0x1e8>)
    2fe2:	22d0      	movs	r2, #208	; 0xd0
    2fe4:	0112      	lsls	r2, r2, #4
    2fe6:	68cb      	ldr	r3, [r1, #12]
    2fe8:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2fea:	4293      	cmp	r3, r2
    2fec:	d1fb      	bne.n	2fe6 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    2fee:	4c2c      	ldr	r4, [pc, #176]	; (30a0 <system_clock_init+0x224>)
    2ff0:	2301      	movs	r3, #1
    2ff2:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    2ff4:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2ff6:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    2ff8:	a901      	add	r1, sp, #4
    2ffa:	2300      	movs	r3, #0
    2ffc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2ffe:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3000:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3002:	3307      	adds	r3, #7
    3004:	700b      	strb	r3, [r1, #0]
    3006:	3b01      	subs	r3, #1
    3008:	604b      	str	r3, [r1, #4]
    300a:	2000      	movs	r0, #0
    300c:	4b1b      	ldr	r3, [pc, #108]	; (307c <system_clock_init+0x200>)
    300e:	4798      	blx	r3
    3010:	2000      	movs	r0, #0
    3012:	4b20      	ldr	r3, [pc, #128]	; (3094 <system_clock_init+0x218>)
    3014:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    3016:	2000      	movs	r0, #0
    3018:	4b22      	ldr	r3, [pc, #136]	; (30a4 <system_clock_init+0x228>)
    301a:	4798      	blx	r3
    301c:	7921      	ldrb	r1, [r4, #4]
    301e:	b2c9      	uxtb	r1, r1
    3020:	4b21      	ldr	r3, [pc, #132]	; (30a8 <system_clock_init+0x22c>)
    3022:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3024:	4b21      	ldr	r3, [pc, #132]	; (30ac <system_clock_init+0x230>)
    3026:	4298      	cmp	r0, r3
    3028:	d814      	bhi.n	3054 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    302a:	2380      	movs	r3, #128	; 0x80
    302c:	05db      	lsls	r3, r3, #23
    302e:	789b      	ldrb	r3, [r3, #2]
    3030:	2b00      	cmp	r3, #0
    3032:	d00f      	beq.n	3054 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3034:	2380      	movs	r3, #128	; 0x80
    3036:	05db      	lsls	r3, r3, #23
    3038:	789b      	ldrb	r3, [r3, #2]
    303a:	b25b      	sxtb	r3, r3
    303c:	2b00      	cmp	r3, #0
    303e:	db09      	blt.n	3054 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3040:	2380      	movs	r3, #128	; 0x80
    3042:	05db      	lsls	r3, r3, #23
    3044:	2201      	movs	r2, #1
    3046:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    3048:	2200      	movs	r2, #0
    304a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    304c:	001a      	movs	r2, r3
    304e:	7993      	ldrb	r3, [r2, #6]
    3050:	2b00      	cmp	r3, #0
    3052:	d0fc      	beq.n	304e <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3054:	b00d      	add	sp, #52	; 0x34
    3056:	bc0c      	pop	{r2, r3}
    3058:	4690      	mov	r8, r2
    305a:	4699      	mov	r9, r3
    305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    305e:	3b20      	subs	r3, #32
    3060:	e788      	b.n	2f74 <system_clock_init+0xf8>
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	40000c00 	.word	0x40000c00
    3068:	40001400 	.word	0x40001400
    306c:	41004000 	.word	0x41004000
    3070:	00002c1d 	.word	0x00002c1d
    3074:	00002d41 	.word	0x00002d41
    3078:	40001000 	.word	0x40001000
    307c:	000030d5 	.word	0x000030d5
    3080:	00002dfd 	.word	0x00002dfd
    3084:	00002be9 	.word	0x00002be9
    3088:	00806020 	.word	0x00806020
    308c:	00002cb9 	.word	0x00002cb9
    3090:	000030b1 	.word	0x000030b1
    3094:	00003181 	.word	0x00003181
    3098:	0000329d 	.word	0x0000329d
    309c:	0000322d 	.word	0x0000322d
    30a0:	40000400 	.word	0x40000400
    30a4:	000031c1 	.word	0x000031c1
    30a8:	000109bd 	.word	0x000109bd
    30ac:	00b71b00 	.word	0x00b71b00

000030b0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    30b0:	4a06      	ldr	r2, [pc, #24]	; (30cc <system_gclk_init+0x1c>)
    30b2:	6953      	ldr	r3, [r2, #20]
    30b4:	2140      	movs	r1, #64	; 0x40
    30b6:	430b      	orrs	r3, r1
    30b8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    30ba:	2201      	movs	r2, #1
    30bc:	4b04      	ldr	r3, [pc, #16]	; (30d0 <system_gclk_init+0x20>)
    30be:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    30c0:	0019      	movs	r1, r3
    30c2:	780b      	ldrb	r3, [r1, #0]
    30c4:	4213      	tst	r3, r2
    30c6:	d1fc      	bne.n	30c2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	40000400 	.word	0x40000400
    30d0:	40001800 	.word	0x40001800

000030d4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    30d4:	b570      	push	{r4, r5, r6, lr}
    30d6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    30d8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    30da:	784b      	ldrb	r3, [r1, #1]
    30dc:	2b00      	cmp	r3, #0
    30de:	d002      	beq.n	30e6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    30e0:	2380      	movs	r3, #128	; 0x80
    30e2:	00db      	lsls	r3, r3, #3
    30e4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    30e6:	7a4b      	ldrb	r3, [r1, #9]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d002      	beq.n	30f2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    30ec:	2380      	movs	r3, #128	; 0x80
    30ee:	011b      	lsls	r3, r3, #4
    30f0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    30f2:	6848      	ldr	r0, [r1, #4]
    30f4:	2801      	cmp	r0, #1
    30f6:	d90f      	bls.n	3118 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    30f8:	1e43      	subs	r3, r0, #1
    30fa:	4218      	tst	r0, r3
    30fc:	d131      	bne.n	3162 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    30fe:	2802      	cmp	r0, #2
    3100:	d92d      	bls.n	315e <system_gclk_gen_set_config+0x8a>
    3102:	2302      	movs	r3, #2
    3104:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3106:	3201      	adds	r2, #1
						mask <<= 1) {
    3108:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    310a:	4298      	cmp	r0, r3
    310c:	d8fb      	bhi.n	3106 <system_gclk_gen_set_config+0x32>
    310e:	2380      	movs	r3, #128	; 0x80
    3110:	015b      	lsls	r3, r3, #5
    3112:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    3114:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3116:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3118:	7a0b      	ldrb	r3, [r1, #8]
    311a:	2b00      	cmp	r3, #0
    311c:	d002      	beq.n	3124 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    311e:	2380      	movs	r3, #128	; 0x80
    3120:	019b      	lsls	r3, r3, #6
    3122:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3124:	2604      	movs	r6, #4
    3126:	40a6      	lsls	r6, r4
    3128:	4911      	ldr	r1, [pc, #68]	; (3170 <system_gclk_gen_set_config+0x9c>)
    312a:	4a12      	ldr	r2, [pc, #72]	; (3174 <system_gclk_gen_set_config+0xa0>)
    312c:	684b      	ldr	r3, [r1, #4]
    312e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    3130:	421e      	tst	r6, r3
    3132:	d1fb      	bne.n	312c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    3134:	4b10      	ldr	r3, [pc, #64]	; (3178 <system_gclk_gen_set_config+0xa4>)
    3136:	4798      	blx	r3
    3138:	00a4      	lsls	r4, r4, #2
    313a:	4b0d      	ldr	r3, [pc, #52]	; (3170 <system_gclk_gen_set_config+0x9c>)
    313c:	469c      	mov	ip, r3
    313e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3140:	6a22      	ldr	r2, [r4, #32]
    3142:	2380      	movs	r3, #128	; 0x80
    3144:	005b      	lsls	r3, r3, #1
    3146:	401a      	ands	r2, r3
    3148:	432a      	orrs	r2, r5
    314a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    314c:	4661      	mov	r1, ip
    314e:	4a09      	ldr	r2, [pc, #36]	; (3174 <system_gclk_gen_set_config+0xa0>)
    3150:	684b      	ldr	r3, [r1, #4]
    3152:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    3154:	421e      	tst	r6, r3
    3156:	d1fb      	bne.n	3150 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <system_gclk_gen_set_config+0xa8>)
    315a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    315c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    315e:	2200      	movs	r2, #0
    3160:	e7d5      	b.n	310e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    3162:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3164:	2380      	movs	r3, #128	; 0x80
    3166:	009b      	lsls	r3, r3, #2
    3168:	4318      	orrs	r0, r3
    316a:	4305      	orrs	r5, r0
    316c:	e7d4      	b.n	3118 <system_gclk_gen_set_config+0x44>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	40001800 	.word	0x40001800
    3174:	000007fc 	.word	0x000007fc
    3178:	000001ad 	.word	0x000001ad
    317c:	000001ed 	.word	0x000001ed

00003180 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3180:	b510      	push	{r4, lr}
    3182:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3184:	2204      	movs	r2, #4
    3186:	4082      	lsls	r2, r0
    3188:	4809      	ldr	r0, [pc, #36]	; (31b0 <system_gclk_gen_enable+0x30>)
    318a:	490a      	ldr	r1, [pc, #40]	; (31b4 <system_gclk_gen_enable+0x34>)
    318c:	6843      	ldr	r3, [r0, #4]
    318e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3190:	421a      	tst	r2, r3
    3192:	d1fb      	bne.n	318c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    3194:	4b08      	ldr	r3, [pc, #32]	; (31b8 <system_gclk_gen_enable+0x38>)
    3196:	4798      	blx	r3
    3198:	00a4      	lsls	r4, r4, #2
    319a:	4b05      	ldr	r3, [pc, #20]	; (31b0 <system_gclk_gen_enable+0x30>)
    319c:	469c      	mov	ip, r3
    319e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    31a0:	6a22      	ldr	r2, [r4, #32]
    31a2:	2380      	movs	r3, #128	; 0x80
    31a4:	005b      	lsls	r3, r3, #1
    31a6:	4313      	orrs	r3, r2
    31a8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    31aa:	4b04      	ldr	r3, [pc, #16]	; (31bc <system_gclk_gen_enable+0x3c>)
    31ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31ae:	bd10      	pop	{r4, pc}
    31b0:	40001800 	.word	0x40001800
    31b4:	000007fc 	.word	0x000007fc
    31b8:	000001ad 	.word	0x000001ad
    31bc:	000001ed 	.word	0x000001ed

000031c0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    31c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31c2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    31c4:	2204      	movs	r2, #4
    31c6:	4082      	lsls	r2, r0
    31c8:	4812      	ldr	r0, [pc, #72]	; (3214 <system_gclk_gen_get_hz+0x54>)
    31ca:	4913      	ldr	r1, [pc, #76]	; (3218 <system_gclk_gen_get_hz+0x58>)
    31cc:	6843      	ldr	r3, [r0, #4]
    31ce:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    31d0:	421a      	tst	r2, r3
    31d2:	d1fb      	bne.n	31cc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    31d4:	4b11      	ldr	r3, [pc, #68]	; (321c <system_gclk_gen_get_hz+0x5c>)
    31d6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    31d8:	4f0e      	ldr	r7, [pc, #56]	; (3214 <system_gclk_gen_get_hz+0x54>)
    31da:	3408      	adds	r4, #8
    31dc:	00a4      	lsls	r4, r4, #2
    31de:	59e0      	ldr	r0, [r4, r7]
    31e0:	0700      	lsls	r0, r0, #28
    31e2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    31e4:	4b0e      	ldr	r3, [pc, #56]	; (3220 <system_gclk_gen_get_hz+0x60>)
    31e6:	4798      	blx	r3
    31e8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    31ea:	59e5      	ldr	r5, [r4, r7]
    31ec:	04ed      	lsls	r5, r5, #19
    31ee:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    31f0:	59e4      	ldr	r4, [r4, r7]
    31f2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    31f4:	4b0b      	ldr	r3, [pc, #44]	; (3224 <system_gclk_gen_get_hz+0x64>)
    31f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    31f8:	2d00      	cmp	r5, #0
    31fa:	d107      	bne.n	320c <system_gclk_gen_get_hz+0x4c>
    31fc:	2c01      	cmp	r4, #1
    31fe:	d907      	bls.n	3210 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3200:	0021      	movs	r1, r4
    3202:	0030      	movs	r0, r6
    3204:	4b08      	ldr	r3, [pc, #32]	; (3228 <system_gclk_gen_get_hz+0x68>)
    3206:	4798      	blx	r3
    3208:	0006      	movs	r6, r0
    320a:	e001      	b.n	3210 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    320c:	3401      	adds	r4, #1
    320e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3210:	0030      	movs	r0, r6
    3212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3214:	40001800 	.word	0x40001800
    3218:	000007fc 	.word	0x000007fc
    321c:	000001ad 	.word	0x000001ad
    3220:	00002b55 	.word	0x00002b55
    3224:	000001ed 	.word	0x000001ed
    3228:	000109bd 	.word	0x000109bd

0000322c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    322c:	b510      	push	{r4, lr}
    322e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3230:	4b09      	ldr	r3, [pc, #36]	; (3258 <system_gclk_chan_enable+0x2c>)
    3232:	4798      	blx	r3
    3234:	00a0      	lsls	r0, r4, #2
    3236:	4b09      	ldr	r3, [pc, #36]	; (325c <system_gclk_chan_enable+0x30>)
    3238:	469c      	mov	ip, r3
    323a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    323c:	2280      	movs	r2, #128	; 0x80
    323e:	5883      	ldr	r3, [r0, r2]
    3240:	2140      	movs	r1, #64	; 0x40
    3242:	430b      	orrs	r3, r1
    3244:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    3246:	3140      	adds	r1, #64	; 0x40
    3248:	3a40      	subs	r2, #64	; 0x40
    324a:	5843      	ldr	r3, [r0, r1]
    324c:	421a      	tst	r2, r3
    324e:	d0fc      	beq.n	324a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    3250:	4b03      	ldr	r3, [pc, #12]	; (3260 <system_gclk_chan_enable+0x34>)
    3252:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    3254:	bd10      	pop	{r4, pc}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	000001ad 	.word	0x000001ad
    325c:	40001800 	.word	0x40001800
    3260:	000001ed 	.word	0x000001ed

00003264 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3264:	b510      	push	{r4, lr}
    3266:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3268:	4b09      	ldr	r3, [pc, #36]	; (3290 <system_gclk_chan_disable+0x2c>)
    326a:	4798      	blx	r3
    326c:	00a0      	lsls	r0, r4, #2
    326e:	4b09      	ldr	r3, [pc, #36]	; (3294 <system_gclk_chan_disable+0x30>)
    3270:	469c      	mov	ip, r3
    3272:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3274:	2280      	movs	r2, #128	; 0x80
    3276:	5883      	ldr	r3, [r0, r2]
    3278:	2140      	movs	r1, #64	; 0x40
    327a:	438b      	bics	r3, r1
    327c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    327e:	3140      	adds	r1, #64	; 0x40
    3280:	3a40      	subs	r2, #64	; 0x40
    3282:	5843      	ldr	r3, [r0, r1]
    3284:	421a      	tst	r2, r3
    3286:	d1fc      	bne.n	3282 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    3288:	4b03      	ldr	r3, [pc, #12]	; (3298 <system_gclk_chan_disable+0x34>)
    328a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    328c:	bd10      	pop	{r4, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	000001ad 	.word	0x000001ad
    3294:	40001800 	.word	0x40001800
    3298:	000001ed 	.word	0x000001ed

0000329c <system_gclk_chan_set_config>:
{
    329c:	b570      	push	{r4, r5, r6, lr}
    329e:	0004      	movs	r4, r0
    32a0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    32a2:	4b05      	ldr	r3, [pc, #20]	; (32b8 <system_gclk_chan_set_config+0x1c>)
    32a4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    32a6:	782a      	ldrb	r2, [r5, #0]
    32a8:	230f      	movs	r3, #15
    32aa:	4013      	ands	r3, r2
    32ac:	3420      	adds	r4, #32
    32ae:	00a4      	lsls	r4, r4, #2
    32b0:	4a02      	ldr	r2, [pc, #8]	; (32bc <system_gclk_chan_set_config+0x20>)
    32b2:	50a3      	str	r3, [r4, r2]
}
    32b4:	bd70      	pop	{r4, r5, r6, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	00003265 	.word	0x00003265
    32bc:	40001800 	.word	0x40001800

000032c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    32c0:	b510      	push	{r4, lr}
    32c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32c4:	4b06      	ldr	r3, [pc, #24]	; (32e0 <system_gclk_chan_get_hz+0x20>)
    32c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    32c8:	3420      	adds	r4, #32
    32ca:	00a4      	lsls	r4, r4, #2
    32cc:	4b05      	ldr	r3, [pc, #20]	; (32e4 <system_gclk_chan_get_hz+0x24>)
    32ce:	58e4      	ldr	r4, [r4, r3]
    32d0:	0724      	lsls	r4, r4, #28
    32d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    32d4:	4b04      	ldr	r3, [pc, #16]	; (32e8 <system_gclk_chan_get_hz+0x28>)
    32d6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    32d8:	0020      	movs	r0, r4
    32da:	4b04      	ldr	r3, [pc, #16]	; (32ec <system_gclk_chan_get_hz+0x2c>)
    32dc:	4798      	blx	r3
}
    32de:	bd10      	pop	{r4, pc}
    32e0:	000001ad 	.word	0x000001ad
    32e4:	40001800 	.word	0x40001800
    32e8:	000001ed 	.word	0x000001ed
    32ec:	000031c1 	.word	0x000031c1

000032f0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    32f0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32f2:	78d3      	ldrb	r3, [r2, #3]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d135      	bne.n	3364 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32f8:	7813      	ldrb	r3, [r2, #0]
    32fa:	2b80      	cmp	r3, #128	; 0x80
    32fc:	d029      	beq.n	3352 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32fe:	061b      	lsls	r3, r3, #24
    3300:	2480      	movs	r4, #128	; 0x80
    3302:	0264      	lsls	r4, r4, #9
    3304:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3306:	7854      	ldrb	r4, [r2, #1]
    3308:	2502      	movs	r5, #2
    330a:	43ac      	bics	r4, r5
    330c:	d106      	bne.n	331c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    330e:	7894      	ldrb	r4, [r2, #2]
    3310:	2c00      	cmp	r4, #0
    3312:	d120      	bne.n	3356 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3314:	2480      	movs	r4, #128	; 0x80
    3316:	02a4      	lsls	r4, r4, #10
    3318:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    331a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    331c:	7854      	ldrb	r4, [r2, #1]
    331e:	3c01      	subs	r4, #1
    3320:	2c01      	cmp	r4, #1
    3322:	d91c      	bls.n	335e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3324:	040d      	lsls	r5, r1, #16
    3326:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3328:	24a0      	movs	r4, #160	; 0xa0
    332a:	05e4      	lsls	r4, r4, #23
    332c:	432c      	orrs	r4, r5
    332e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3330:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3332:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3334:	24d0      	movs	r4, #208	; 0xd0
    3336:	0624      	lsls	r4, r4, #24
    3338:	432c      	orrs	r4, r5
    333a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    333c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    333e:	78d4      	ldrb	r4, [r2, #3]
    3340:	2c00      	cmp	r4, #0
    3342:	d122      	bne.n	338a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3344:	035b      	lsls	r3, r3, #13
    3346:	d51c      	bpl.n	3382 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3348:	7893      	ldrb	r3, [r2, #2]
    334a:	2b01      	cmp	r3, #1
    334c:	d01e      	beq.n	338c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    334e:	6141      	str	r1, [r0, #20]
    3350:	e017      	b.n	3382 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3352:	2300      	movs	r3, #0
    3354:	e7d7      	b.n	3306 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3356:	24c0      	movs	r4, #192	; 0xc0
    3358:	02e4      	lsls	r4, r4, #11
    335a:	4323      	orrs	r3, r4
    335c:	e7dd      	b.n	331a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    335e:	4c0d      	ldr	r4, [pc, #52]	; (3394 <_system_pinmux_config+0xa4>)
    3360:	4023      	ands	r3, r4
    3362:	e7df      	b.n	3324 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3364:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3366:	040c      	lsls	r4, r1, #16
    3368:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    336a:	23a0      	movs	r3, #160	; 0xa0
    336c:	05db      	lsls	r3, r3, #23
    336e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3370:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3372:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3374:	23d0      	movs	r3, #208	; 0xd0
    3376:	061b      	lsls	r3, r3, #24
    3378:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    337a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    337c:	78d3      	ldrb	r3, [r2, #3]
    337e:	2b00      	cmp	r3, #0
    3380:	d103      	bne.n	338a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3382:	7853      	ldrb	r3, [r2, #1]
    3384:	3b01      	subs	r3, #1
    3386:	2b01      	cmp	r3, #1
    3388:	d902      	bls.n	3390 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    338a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    338c:	6181      	str	r1, [r0, #24]
    338e:	e7f8      	b.n	3382 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3390:	6081      	str	r1, [r0, #8]
}
    3392:	e7fa      	b.n	338a <_system_pinmux_config+0x9a>
    3394:	fffbffff 	.word	0xfffbffff

00003398 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3398:	b510      	push	{r4, lr}
    339a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    339c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    339e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    33a0:	2900      	cmp	r1, #0
    33a2:	d104      	bne.n	33ae <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    33a4:	0943      	lsrs	r3, r0, #5
    33a6:	01db      	lsls	r3, r3, #7
    33a8:	4905      	ldr	r1, [pc, #20]	; (33c0 <system_pinmux_pin_set_config+0x28>)
    33aa:	468c      	mov	ip, r1
    33ac:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    33ae:	241f      	movs	r4, #31
    33b0:	4020      	ands	r0, r4
    33b2:	2101      	movs	r1, #1
    33b4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    33b6:	0018      	movs	r0, r3
    33b8:	4b02      	ldr	r3, [pc, #8]	; (33c4 <system_pinmux_pin_set_config+0x2c>)
    33ba:	4798      	blx	r3
}
    33bc:	bd10      	pop	{r4, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	40002800 	.word	0x40002800
    33c4:	000032f1 	.word	0x000032f1

000033c8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    33c8:	4770      	bx	lr
	...

000033cc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    33cc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    33ce:	4b05      	ldr	r3, [pc, #20]	; (33e4 <system_init+0x18>)
    33d0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    33d2:	4b05      	ldr	r3, [pc, #20]	; (33e8 <system_init+0x1c>)
    33d4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <system_init+0x20>)
    33d8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    33da:	4b05      	ldr	r3, [pc, #20]	; (33f0 <system_init+0x24>)
    33dc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    33de:	4b05      	ldr	r3, [pc, #20]	; (33f4 <system_init+0x28>)
    33e0:	4798      	blx	r3
}
    33e2:	bd10      	pop	{r4, pc}
    33e4:	00002e7d 	.word	0x00002e7d
    33e8:	0000021d 	.word	0x0000021d
    33ec:	000033c9 	.word	0x000033c9
    33f0:	00000bb1 	.word	0x00000bb1
    33f4:	000033c9 	.word	0x000033c9

000033f8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    33f8:	1c93      	adds	r3, r2, #2
    33fa:	009b      	lsls	r3, r3, #2
    33fc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    33fe:	2a02      	cmp	r2, #2
    3400:	d009      	beq.n	3416 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3402:	2a03      	cmp	r2, #3
    3404:	d00c      	beq.n	3420 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    3406:	2301      	movs	r3, #1
    3408:	4093      	lsls	r3, r2
    340a:	001a      	movs	r2, r3
    340c:	7e03      	ldrb	r3, [r0, #24]
    340e:	4313      	orrs	r3, r2
    3410:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    3412:	2000      	movs	r0, #0
    3414:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    3416:	7e03      	ldrb	r3, [r0, #24]
    3418:	2210      	movs	r2, #16
    341a:	4313      	orrs	r3, r2
    341c:	7603      	strb	r3, [r0, #24]
    341e:	e7f8      	b.n	3412 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3420:	7e03      	ldrb	r3, [r0, #24]
    3422:	2220      	movs	r2, #32
    3424:	4313      	orrs	r3, r2
    3426:	7603      	strb	r3, [r0, #24]
    3428:	e7f3      	b.n	3412 <tc_register_callback+0x1a>
	...

0000342c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    342c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    342e:	0080      	lsls	r0, r0, #2
    3430:	4b16      	ldr	r3, [pc, #88]	; (348c <_tc_interrupt_handler+0x60>)
    3432:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3434:	6823      	ldr	r3, [r4, #0]
    3436:	7a9d      	ldrb	r5, [r3, #10]
    3438:	7e22      	ldrb	r2, [r4, #24]
    343a:	7e63      	ldrb	r3, [r4, #25]
    343c:	4013      	ands	r3, r2
    343e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3440:	07eb      	lsls	r3, r5, #31
    3442:	d406      	bmi.n	3452 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3444:	07ab      	lsls	r3, r5, #30
    3446:	d40b      	bmi.n	3460 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3448:	06eb      	lsls	r3, r5, #27
    344a:	d410      	bmi.n	346e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    344c:	06ab      	lsls	r3, r5, #26
    344e:	d415      	bmi.n	347c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    3450:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3452:	0020      	movs	r0, r4
    3454:	68a3      	ldr	r3, [r4, #8]
    3456:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3458:	2301      	movs	r3, #1
    345a:	6822      	ldr	r2, [r4, #0]
    345c:	7293      	strb	r3, [r2, #10]
    345e:	e7f1      	b.n	3444 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    3460:	0020      	movs	r0, r4
    3462:	68e3      	ldr	r3, [r4, #12]
    3464:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3466:	2302      	movs	r3, #2
    3468:	6822      	ldr	r2, [r4, #0]
    346a:	7293      	strb	r3, [r2, #10]
    346c:	e7ec      	b.n	3448 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    346e:	0020      	movs	r0, r4
    3470:	6923      	ldr	r3, [r4, #16]
    3472:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3474:	2310      	movs	r3, #16
    3476:	6822      	ldr	r2, [r4, #0]
    3478:	7293      	strb	r3, [r2, #10]
    347a:	e7e7      	b.n	344c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    347c:	0020      	movs	r0, r4
    347e:	6963      	ldr	r3, [r4, #20]
    3480:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3482:	6823      	ldr	r3, [r4, #0]
    3484:	2220      	movs	r2, #32
    3486:	729a      	strb	r2, [r3, #10]
}
    3488:	e7e2      	b.n	3450 <_tc_interrupt_handler+0x24>
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	20001010 	.word	0x20001010

00003490 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3490:	b510      	push	{r4, lr}
    3492:	2000      	movs	r0, #0
    3494:	4b01      	ldr	r3, [pc, #4]	; (349c <TC0_Handler+0xc>)
    3496:	4798      	blx	r3
    3498:	bd10      	pop	{r4, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	0000342d 	.word	0x0000342d

000034a0 <TC1_Handler>:
    34a0:	b510      	push	{r4, lr}
    34a2:	2001      	movs	r0, #1
    34a4:	4b01      	ldr	r3, [pc, #4]	; (34ac <TC1_Handler+0xc>)
    34a6:	4798      	blx	r3
    34a8:	bd10      	pop	{r4, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	0000342d 	.word	0x0000342d

000034b0 <TC2_Handler>:
    34b0:	b510      	push	{r4, lr}
    34b2:	2002      	movs	r0, #2
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <TC2_Handler+0xc>)
    34b6:	4798      	blx	r3
    34b8:	bd10      	pop	{r4, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	0000342d 	.word	0x0000342d

000034c0 <TC3_Handler>:
    34c0:	b510      	push	{r4, lr}
    34c2:	2003      	movs	r0, #3
    34c4:	4b01      	ldr	r3, [pc, #4]	; (34cc <TC3_Handler+0xc>)
    34c6:	4798      	blx	r3
    34c8:	bd10      	pop	{r4, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	0000342d 	.word	0x0000342d

000034d0 <TC4_Handler>:
    34d0:	b510      	push	{r4, lr}
    34d2:	2004      	movs	r0, #4
    34d4:	4b01      	ldr	r3, [pc, #4]	; (34dc <TC4_Handler+0xc>)
    34d6:	4798      	blx	r3
    34d8:	bd10      	pop	{r4, pc}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	0000342d 	.word	0x0000342d

000034e0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    34e0:	b530      	push	{r4, r5, lr}
    34e2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    34e4:	a901      	add	r1, sp, #4
    34e6:	4b0c      	ldr	r3, [pc, #48]	; (3518 <_tc_get_inst_index+0x38>)
    34e8:	000a      	movs	r2, r1
    34ea:	cb32      	ldmia	r3!, {r1, r4, r5}
    34ec:	c232      	stmia	r2!, {r1, r4, r5}
    34ee:	cb12      	ldmia	r3!, {r1, r4}
    34f0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    34f2:	9b01      	ldr	r3, [sp, #4]
    34f4:	4298      	cmp	r0, r3
    34f6:	d00b      	beq.n	3510 <_tc_get_inst_index+0x30>
    34f8:	2301      	movs	r3, #1
    34fa:	a901      	add	r1, sp, #4
    34fc:	009a      	lsls	r2, r3, #2
    34fe:	5852      	ldr	r2, [r2, r1]
    3500:	4282      	cmp	r2, r0
    3502:	d006      	beq.n	3512 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3504:	3301      	adds	r3, #1
    3506:	2b05      	cmp	r3, #5
    3508:	d1f8      	bne.n	34fc <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    350a:	2000      	movs	r0, #0
}
    350c:	b007      	add	sp, #28
    350e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3510:	2300      	movs	r3, #0
			return i;
    3512:	b2d8      	uxtb	r0, r3
    3514:	e7fa      	b.n	350c <_tc_get_inst_index+0x2c>
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	0001a4d4 	.word	0x0001a4d4

0000351c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}
    351e:	46c6      	mov	lr, r8
    3520:	b500      	push	{lr}
    3522:	b08e      	sub	sp, #56	; 0x38
    3524:	0004      	movs	r4, r0
    3526:	000d      	movs	r5, r1
    3528:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    352a:	0008      	movs	r0, r1
    352c:	4bae      	ldr	r3, [pc, #696]	; (37e8 <tc_init+0x2cc>)
    352e:	4798      	blx	r3
    3530:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    3532:	ab0c      	add	r3, sp, #48	; 0x30
    3534:	221b      	movs	r2, #27
    3536:	701a      	strb	r2, [r3, #0]
    3538:	705a      	strb	r2, [r3, #1]
    353a:	3201      	adds	r2, #1
    353c:	709a      	strb	r2, [r3, #2]
    353e:	70da      	strb	r2, [r3, #3]
    3540:	3201      	adds	r2, #1
    3542:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    3544:	a902      	add	r1, sp, #8
    3546:	4ba9      	ldr	r3, [pc, #676]	; (37ec <tc_init+0x2d0>)
    3548:	3314      	adds	r3, #20
    354a:	000a      	movs	r2, r1
    354c:	cb83      	ldmia	r3!, {r0, r1, r7}
    354e:	c283      	stmia	r2!, {r0, r1, r7}
    3550:	cb83      	ldmia	r3!, {r0, r1, r7}
    3552:	c283      	stmia	r2!, {r0, r1, r7}
    3554:	cb83      	ldmia	r3!, {r0, r1, r7}
    3556:	c283      	stmia	r2!, {r0, r1, r7}
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    355c:	2300      	movs	r3, #0
    355e:	60a3      	str	r3, [r4, #8]
    3560:	60e3      	str	r3, [r4, #12]
    3562:	6123      	str	r3, [r4, #16]
    3564:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    3566:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    3568:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    356a:	4643      	mov	r3, r8
    356c:	009a      	lsls	r2, r3, #2
    356e:	4ba0      	ldr	r3, [pc, #640]	; (37f0 <tc_init+0x2d4>)
    3570:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    3572:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    3574:	2334      	movs	r3, #52	; 0x34
    3576:	5cf3      	ldrb	r3, [r6, r3]
    3578:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    357a:	78f3      	ldrb	r3, [r6, #3]
    357c:	2b08      	cmp	r3, #8
    357e:	d008      	beq.n	3592 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3580:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3582:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3584:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3586:	07db      	lsls	r3, r3, #31
    3588:	d508      	bpl.n	359c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    358a:	b00e      	add	sp, #56	; 0x38
    358c:	bc04      	pop	{r2}
    358e:	4690      	mov	r8, r2
    3590:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    3592:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3594:	4642      	mov	r2, r8
    3596:	07d2      	lsls	r2, r2, #31
    3598:	d4f7      	bmi.n	358a <tc_init+0x6e>
    359a:	e7f1      	b.n	3580 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    359c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    359e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    35a0:	079b      	lsls	r3, r3, #30
    35a2:	d4f2      	bmi.n	358a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    35a4:	682b      	ldr	r3, [r5, #0]
    35a6:	079b      	lsls	r3, r3, #30
    35a8:	d4ef      	bmi.n	358a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    35aa:	7c33      	ldrb	r3, [r6, #16]
    35ac:	2b00      	cmp	r3, #0
    35ae:	d112      	bne.n	35d6 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    35b0:	7f33      	ldrb	r3, [r6, #28]
    35b2:	2b00      	cmp	r3, #0
    35b4:	d11b      	bne.n	35ee <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    35b6:	4643      	mov	r3, r8
    35b8:	005a      	lsls	r2, r3, #1
    35ba:	a902      	add	r1, sp, #8
    35bc:	1c53      	adds	r3, r2, #1
    35be:	009b      	lsls	r3, r3, #2
    35c0:	5858      	ldr	r0, [r3, r1]
    35c2:	4643      	mov	r3, r8
    35c4:	00db      	lsls	r3, r3, #3
    35c6:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    35c8:	b2d9      	uxtb	r1, r3
    35ca:	2904      	cmp	r1, #4
    35cc:	d823      	bhi.n	3616 <tc_init+0xfa>
    35ce:	008b      	lsls	r3, r1, #2
    35d0:	4988      	ldr	r1, [pc, #544]	; (37f4 <tc_init+0x2d8>)
    35d2:	58cb      	ldr	r3, [r1, r3]
    35d4:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    35d6:	a901      	add	r1, sp, #4
    35d8:	2301      	movs	r3, #1
    35da:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    35dc:	2200      	movs	r2, #0
    35de:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    35e0:	7e32      	ldrb	r2, [r6, #24]
    35e2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    35e4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    35e6:	7d30      	ldrb	r0, [r6, #20]
    35e8:	4b83      	ldr	r3, [pc, #524]	; (37f8 <tc_init+0x2dc>)
    35ea:	4798      	blx	r3
    35ec:	e7e0      	b.n	35b0 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    35ee:	a901      	add	r1, sp, #4
    35f0:	2301      	movs	r3, #1
    35f2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    35f4:	2200      	movs	r2, #0
    35f6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    35f8:	3224      	adds	r2, #36	; 0x24
    35fa:	18b2      	adds	r2, r6, r2
    35fc:	7812      	ldrb	r2, [r2, #0]
    35fe:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3600:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3602:	331f      	adds	r3, #31
    3604:	18f3      	adds	r3, r6, r3
    3606:	7818      	ldrb	r0, [r3, #0]
    3608:	4b7b      	ldr	r3, [pc, #492]	; (37f8 <tc_init+0x2dc>)
    360a:	4798      	blx	r3
    360c:	e7d3      	b.n	35b6 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    360e:	497b      	ldr	r1, [pc, #492]	; (37fc <tc_init+0x2e0>)
    3610:	694b      	ldr	r3, [r1, #20]
    3612:	4318      	orrs	r0, r3
    3614:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3616:	78f3      	ldrb	r3, [r6, #3]
    3618:	2b08      	cmp	r3, #8
    361a:	d100      	bne.n	361e <tc_init+0x102>
    361c:	e086      	b.n	372c <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    361e:	7833      	ldrb	r3, [r6, #0]
    3620:	466a      	mov	r2, sp
    3622:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3624:	ab0c      	add	r3, sp, #48	; 0x30
    3626:	4642      	mov	r2, r8
    3628:	5c9f      	ldrb	r7, [r3, r2]
    362a:	4669      	mov	r1, sp
    362c:	0038      	movs	r0, r7
    362e:	4b74      	ldr	r3, [pc, #464]	; (3800 <tc_init+0x2e4>)
    3630:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    3632:	0038      	movs	r0, r7
    3634:	4b73      	ldr	r3, [pc, #460]	; (3804 <tc_init+0x2e8>)
    3636:	4798      	blx	r3
			(uint32_t)config->counter_size |
    3638:	78f3      	ldrb	r3, [r6, #3]
    363a:	79f2      	ldrb	r2, [r6, #7]
    363c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    363e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    3640:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    3642:	7a72      	ldrb	r2, [r6, #9]
    3644:	2a00      	cmp	r2, #0
    3646:	d002      	beq.n	364e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    3648:	2280      	movs	r2, #128	; 0x80
    364a:	0252      	lsls	r2, r2, #9
    364c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    364e:	7ab2      	ldrb	r2, [r6, #10]
    3650:	2a00      	cmp	r2, #0
    3652:	d002      	beq.n	365a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    3654:	2280      	movs	r2, #128	; 0x80
    3656:	0292      	lsls	r2, r2, #10
    3658:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    365a:	7af2      	ldrb	r2, [r6, #11]
    365c:	2a00      	cmp	r2, #0
    365e:	d002      	beq.n	3666 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    3660:	2280      	movs	r2, #128	; 0x80
    3662:	0352      	lsls	r2, r2, #13
    3664:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    3666:	7b32      	ldrb	r2, [r6, #12]
    3668:	2a00      	cmp	r2, #0
    366a:	d002      	beq.n	3672 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    366c:	2280      	movs	r2, #128	; 0x80
    366e:	0392      	lsls	r2, r2, #14
    3670:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    3672:	7871      	ldrb	r1, [r6, #1]
    3674:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    3676:	78b2      	ldrb	r2, [r6, #2]
    3678:	01d2      	lsls	r2, r2, #7
    367a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    367c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    367e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    3680:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3682:	2b00      	cmp	r3, #0
    3684:	d1fc      	bne.n	3680 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    3686:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3688:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    368a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    368c:	2b00      	cmp	r3, #0
    368e:	d1fc      	bne.n	368a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    3690:	79b3      	ldrb	r3, [r6, #6]
    3692:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    3694:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    3696:	1e4b      	subs	r3, r1, #1
    3698:	4199      	sbcs	r1, r3
    369a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    369c:	7bb3      	ldrb	r3, [r6, #14]
    369e:	2b00      	cmp	r3, #0
    36a0:	d001      	beq.n	36a6 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    36a2:	2301      	movs	r3, #1
    36a4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36a8:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    36aa:	2b00      	cmp	r3, #0
    36ac:	d1fc      	bne.n	36a8 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    36ae:	33ff      	adds	r3, #255	; 0xff
    36b0:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    36b2:	2900      	cmp	r1, #0
    36b4:	d004      	beq.n	36c0 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36b6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36b8:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    36ba:	2b00      	cmp	r3, #0
    36bc:	d1fc      	bne.n	36b8 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    36be:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    36c0:	7a33      	ldrb	r3, [r6, #8]
    36c2:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36c6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    36c8:	2b00      	cmp	r3, #0
    36ca:	d1fc      	bne.n	36c6 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    36cc:	7923      	ldrb	r3, [r4, #4]
    36ce:	2b04      	cmp	r3, #4
    36d0:	d059      	beq.n	3786 <tc_init+0x26a>
    36d2:	2b08      	cmp	r3, #8
    36d4:	d074      	beq.n	37c0 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    36d6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    36d8:	2b00      	cmp	r3, #0
    36da:	d000      	beq.n	36de <tc_init+0x1c2>
    36dc:	e755      	b.n	358a <tc_init+0x6e>
    36de:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    36e0:	2b00      	cmp	r3, #0
    36e2:	d1fc      	bne.n	36de <tc_init+0x1c2>
				= config->counter_16_bit.value;
    36e4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    36e6:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36ea:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d1fc      	bne.n	36ea <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    36f0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    36f2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36f4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36f6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    36f8:	2b00      	cmp	r3, #0
    36fa:	d1fc      	bne.n	36f6 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    36fc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    36fe:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    3700:	2000      	movs	r0, #0
    3702:	e742      	b.n	358a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    3704:	493d      	ldr	r1, [pc, #244]	; (37fc <tc_init+0x2e0>)
    3706:	698b      	ldr	r3, [r1, #24]
    3708:	4318      	orrs	r0, r3
    370a:	6188      	str	r0, [r1, #24]
    370c:	e783      	b.n	3616 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    370e:	493b      	ldr	r1, [pc, #236]	; (37fc <tc_init+0x2e0>)
    3710:	69cb      	ldr	r3, [r1, #28]
    3712:	4318      	orrs	r0, r3
    3714:	61c8      	str	r0, [r1, #28]
    3716:	e77e      	b.n	3616 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    3718:	4938      	ldr	r1, [pc, #224]	; (37fc <tc_init+0x2e0>)
    371a:	6a0b      	ldr	r3, [r1, #32]
    371c:	4318      	orrs	r0, r3
    371e:	6208      	str	r0, [r1, #32]
    3720:	e779      	b.n	3616 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    3722:	4b36      	ldr	r3, [pc, #216]	; (37fc <tc_init+0x2e0>)
    3724:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3726:	4308      	orrs	r0, r1
    3728:	6258      	str	r0, [r3, #36]	; 0x24
    372a:	e774      	b.n	3616 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    372c:	4643      	mov	r3, r8
    372e:	3301      	adds	r3, #1
    3730:	2b04      	cmp	r3, #4
    3732:	dd00      	ble.n	3736 <tc_init+0x21a>
    3734:	e773      	b.n	361e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    3736:	ab02      	add	r3, sp, #8
    3738:	1cd1      	adds	r1, r2, #3
    373a:	0089      	lsls	r1, r1, #2
    373c:	58c9      	ldr	r1, [r1, r3]
    373e:	3202      	adds	r2, #2
    3740:	0092      	lsls	r2, r2, #2
    3742:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    3744:	b2da      	uxtb	r2, r3
    3746:	2a04      	cmp	r2, #4
    3748:	d900      	bls.n	374c <tc_init+0x230>
    374a:	e768      	b.n	361e <tc_init+0x102>
    374c:	0093      	lsls	r3, r2, #2
    374e:	4a2e      	ldr	r2, [pc, #184]	; (3808 <tc_init+0x2ec>)
    3750:	58d3      	ldr	r3, [r2, r3]
    3752:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    3754:	4a29      	ldr	r2, [pc, #164]	; (37fc <tc_init+0x2e0>)
    3756:	6953      	ldr	r3, [r2, #20]
    3758:	4319      	orrs	r1, r3
    375a:	6151      	str	r1, [r2, #20]
    375c:	e75f      	b.n	361e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    375e:	4a27      	ldr	r2, [pc, #156]	; (37fc <tc_init+0x2e0>)
    3760:	6993      	ldr	r3, [r2, #24]
    3762:	4319      	orrs	r1, r3
    3764:	6191      	str	r1, [r2, #24]
    3766:	e75a      	b.n	361e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    3768:	4a24      	ldr	r2, [pc, #144]	; (37fc <tc_init+0x2e0>)
    376a:	69d3      	ldr	r3, [r2, #28]
    376c:	4319      	orrs	r1, r3
    376e:	61d1      	str	r1, [r2, #28]
    3770:	e755      	b.n	361e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    3772:	4a22      	ldr	r2, [pc, #136]	; (37fc <tc_init+0x2e0>)
    3774:	6a13      	ldr	r3, [r2, #32]
    3776:	4319      	orrs	r1, r3
    3778:	6211      	str	r1, [r2, #32]
    377a:	e750      	b.n	361e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    377c:	4b1f      	ldr	r3, [pc, #124]	; (37fc <tc_init+0x2e0>)
    377e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3780:	4311      	orrs	r1, r2
    3782:	6259      	str	r1, [r3, #36]	; 0x24
    3784:	e74b      	b.n	361e <tc_init+0x102>
    3786:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3788:	2b00      	cmp	r3, #0
    378a:	d1fc      	bne.n	3786 <tc_init+0x26a>
					config->counter_8_bit.value;
    378c:	3328      	adds	r3, #40	; 0x28
    378e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    3790:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3792:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3794:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3796:	2b00      	cmp	r3, #0
    3798:	d1fc      	bne.n	3794 <tc_init+0x278>
					config->counter_8_bit.period;
    379a:	3329      	adds	r3, #41	; 0x29
    379c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    379e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37a0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37a2:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37a4:	2b00      	cmp	r3, #0
    37a6:	d1fc      	bne.n	37a2 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    37a8:	332a      	adds	r3, #42	; 0x2a
    37aa:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    37ac:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37b0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37b2:	2b00      	cmp	r3, #0
    37b4:	d1fc      	bne.n	37b0 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    37b6:	332b      	adds	r3, #43	; 0x2b
    37b8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    37ba:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    37bc:	2000      	movs	r0, #0
    37be:	e6e4      	b.n	358a <tc_init+0x6e>
    37c0:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37c2:	2b00      	cmp	r3, #0
    37c4:	d1fc      	bne.n	37c0 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    37c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    37c8:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37ca:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37cc:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37ce:	2b00      	cmp	r3, #0
    37d0:	d1fc      	bne.n	37cc <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    37d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    37d4:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37d6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37d8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37da:	2b00      	cmp	r3, #0
    37dc:	d1fc      	bne.n	37d8 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    37de:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    37e0:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    37e2:	2000      	movs	r0, #0
    37e4:	e6d1      	b.n	358a <tc_init+0x6e>
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	000034e1 	.word	0x000034e1
    37ec:	0001a4d4 	.word	0x0001a4d4
    37f0:	20001010 	.word	0x20001010
    37f4:	0001a4ac 	.word	0x0001a4ac
    37f8:	00003399 	.word	0x00003399
    37fc:	40000400 	.word	0x40000400
    3800:	0000329d 	.word	0x0000329d
    3804:	0000322d 	.word	0x0000322d
    3808:	0001a4c0 	.word	0x0001a4c0

0000380c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    380c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    380e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3810:	2b00      	cmp	r3, #0
    3812:	d1fc      	bne.n	380e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3814:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3816:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3818:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    381a:	2b00      	cmp	r3, #0
    381c:	d1fc      	bne.n	3818 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    381e:	3380      	adds	r3, #128	; 0x80
    3820:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3822:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3824:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3826:	2b00      	cmp	r3, #0
    3828:	d1fc      	bne.n	3824 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    382a:	7903      	ldrb	r3, [r0, #4]
    382c:	2b04      	cmp	r3, #4
    382e:	d005      	beq.n	383c <tc_get_count_value+0x30>
    3830:	2b08      	cmp	r3, #8
    3832:	d009      	beq.n	3848 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    3834:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    3836:	2b00      	cmp	r3, #0
    3838:	d003      	beq.n	3842 <tc_get_count_value+0x36>
}
    383a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    383c:	7d10      	ldrb	r0, [r2, #20]
    383e:	b2c0      	uxtb	r0, r0
    3840:	e7fb      	b.n	383a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    3842:	8a90      	ldrh	r0, [r2, #20]
    3844:	b280      	uxth	r0, r0
    3846:	e7f8      	b.n	383a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    3848:	6950      	ldr	r0, [r2, #20]
    384a:	e7f6      	b.n	383a <tc_get_count_value+0x2e>

0000384c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    384c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    384e:	6804      	ldr	r4, [r0, #0]
    3850:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    3852:	2b00      	cmp	r3, #0
    3854:	d1fc      	bne.n	3850 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    3856:	7903      	ldrb	r3, [r0, #4]
    3858:	2b04      	cmp	r3, #4
    385a:	d006      	beq.n	386a <tc_set_compare_value+0x1e>
    385c:	2b08      	cmp	r3, #8
    385e:	d028      	beq.n	38b2 <tc_set_compare_value+0x66>
    3860:	2b00      	cmp	r3, #0
    3862:	d013      	beq.n	388c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    3864:	2317      	movs	r3, #23
}
    3866:	0018      	movs	r0, r3
    3868:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    386a:	2317      	movs	r3, #23
			if (channel_index <
    386c:	2901      	cmp	r1, #1
    386e:	d8fa      	bhi.n	3866 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3870:	7e83      	ldrb	r3, [r0, #26]
    3872:	2b00      	cmp	r3, #0
    3874:	d005      	beq.n	3882 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    3876:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    3878:	1861      	adds	r1, r4, r1
    387a:	3130      	adds	r1, #48	; 0x30
    387c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    387e:	2300      	movs	r3, #0
    3880:	e7f1      	b.n	3866 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    3882:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    3884:	1864      	adds	r4, r4, r1
    3886:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    3888:	2300      	movs	r3, #0
    388a:	e7ec      	b.n	3866 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    388c:	2317      	movs	r3, #23
			if (channel_index <
    388e:	2901      	cmp	r1, #1
    3890:	d8e9      	bhi.n	3866 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3892:	7e83      	ldrb	r3, [r0, #26]
    3894:	2b00      	cmp	r3, #0
    3896:	d005      	beq.n	38a4 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    3898:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    389a:	3118      	adds	r1, #24
    389c:	0049      	lsls	r1, r1, #1
    389e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    38a0:	2300      	movs	r3, #0
    38a2:	e7e0      	b.n	3866 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    38a4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    38a6:	310c      	adds	r1, #12
    38a8:	0049      	lsls	r1, r1, #1
    38aa:	1864      	adds	r4, r4, r1
    38ac:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    38ae:	2300      	movs	r3, #0
    38b0:	e7d9      	b.n	3866 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    38b2:	2317      	movs	r3, #23
			if (channel_index <
    38b4:	2901      	cmp	r1, #1
    38b6:	d8d6      	bhi.n	3866 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    38b8:	7e83      	ldrb	r3, [r0, #26]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d105      	bne.n	38ca <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    38be:	3106      	adds	r1, #6
    38c0:	0089      	lsls	r1, r1, #2
    38c2:	1864      	adds	r4, r4, r1
    38c4:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    38c6:	2300      	movs	r3, #0
    38c8:	e7cd      	b.n	3866 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    38ca:	310c      	adds	r1, #12
    38cc:	0089      	lsls	r1, r1, #2
    38ce:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    38d0:	2300      	movs	r3, #0
    38d2:	e7c8      	b.n	3866 <tc_set_compare_value+0x1a>

000038d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    38d4:	e7fe      	b.n	38d4 <Dummy_Handler>
	...

000038d8 <Reset_Handler>:
{
    38d8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    38da:	4a1a      	ldr	r2, [pc, #104]	; (3944 <Reset_Handler+0x6c>)
    38dc:	4b1a      	ldr	r3, [pc, #104]	; (3948 <Reset_Handler+0x70>)
    38de:	429a      	cmp	r2, r3
    38e0:	d011      	beq.n	3906 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    38e2:	001a      	movs	r2, r3
    38e4:	4b19      	ldr	r3, [pc, #100]	; (394c <Reset_Handler+0x74>)
    38e6:	429a      	cmp	r2, r3
    38e8:	d20d      	bcs.n	3906 <Reset_Handler+0x2e>
    38ea:	4a19      	ldr	r2, [pc, #100]	; (3950 <Reset_Handler+0x78>)
    38ec:	3303      	adds	r3, #3
    38ee:	1a9b      	subs	r3, r3, r2
    38f0:	089b      	lsrs	r3, r3, #2
    38f2:	3301      	adds	r3, #1
    38f4:	009b      	lsls	r3, r3, #2
    38f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    38f8:	4813      	ldr	r0, [pc, #76]	; (3948 <Reset_Handler+0x70>)
    38fa:	4912      	ldr	r1, [pc, #72]	; (3944 <Reset_Handler+0x6c>)
    38fc:	588c      	ldr	r4, [r1, r2]
    38fe:	5084      	str	r4, [r0, r2]
    3900:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3902:	429a      	cmp	r2, r3
    3904:	d1fa      	bne.n	38fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3906:	4a13      	ldr	r2, [pc, #76]	; (3954 <Reset_Handler+0x7c>)
    3908:	4b13      	ldr	r3, [pc, #76]	; (3958 <Reset_Handler+0x80>)
    390a:	429a      	cmp	r2, r3
    390c:	d20a      	bcs.n	3924 <Reset_Handler+0x4c>
    390e:	43d3      	mvns	r3, r2
    3910:	4911      	ldr	r1, [pc, #68]	; (3958 <Reset_Handler+0x80>)
    3912:	185b      	adds	r3, r3, r1
    3914:	2103      	movs	r1, #3
    3916:	438b      	bics	r3, r1
    3918:	3304      	adds	r3, #4
    391a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    391c:	2100      	movs	r1, #0
    391e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3920:	4293      	cmp	r3, r2
    3922:	d1fc      	bne.n	391e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3924:	4a0d      	ldr	r2, [pc, #52]	; (395c <Reset_Handler+0x84>)
    3926:	21ff      	movs	r1, #255	; 0xff
    3928:	4b0d      	ldr	r3, [pc, #52]	; (3960 <Reset_Handler+0x88>)
    392a:	438b      	bics	r3, r1
    392c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    392e:	4a0d      	ldr	r2, [pc, #52]	; (3964 <Reset_Handler+0x8c>)
    3930:	6853      	ldr	r3, [r2, #4]
    3932:	397f      	subs	r1, #127	; 0x7f
    3934:	430b      	orrs	r3, r1
    3936:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3938:	4b0b      	ldr	r3, [pc, #44]	; (3968 <Reset_Handler+0x90>)
    393a:	4798      	blx	r3
        main();
    393c:	4b0b      	ldr	r3, [pc, #44]	; (396c <Reset_Handler+0x94>)
    393e:	4798      	blx	r3
    3940:	e7fe      	b.n	3940 <Reset_Handler+0x68>
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	0001b564 	.word	0x0001b564
    3948:	20000000 	.word	0x20000000
    394c:	200009e8 	.word	0x200009e8
    3950:	20000004 	.word	0x20000004
    3954:	200009e8 	.word	0x200009e8
    3958:	20001c8c 	.word	0x20001c8c
    395c:	e000ed00 	.word	0xe000ed00
    3960:	00000000 	.word	0x00000000
    3964:	41004000 	.word	0x41004000
    3968:	00013b5d 	.word	0x00013b5d
    396c:	0000a94d 	.word	0x0000a94d

00003970 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3970:	b5f0      	push	{r4, r5, r6, r7, lr}
    3972:	46c6      	mov	lr, r8
    3974:	b500      	push	{lr}
    3976:	000c      	movs	r4, r1
    3978:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    397a:	2800      	cmp	r0, #0
    397c:	d10f      	bne.n	399e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    397e:	2a00      	cmp	r2, #0
    3980:	dd11      	ble.n	39a6 <_read+0x36>
    3982:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3984:	4e09      	ldr	r6, [pc, #36]	; (39ac <_read+0x3c>)
    3986:	4d0a      	ldr	r5, [pc, #40]	; (39b0 <_read+0x40>)
    3988:	6830      	ldr	r0, [r6, #0]
    398a:	0021      	movs	r1, r4
    398c:	682b      	ldr	r3, [r5, #0]
    398e:	4798      	blx	r3
		ptr++;
    3990:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3992:	42bc      	cmp	r4, r7
    3994:	d1f8      	bne.n	3988 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3996:	4640      	mov	r0, r8
    3998:	bc04      	pop	{r2}
    399a:	4690      	mov	r8, r2
    399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    399e:	2301      	movs	r3, #1
    39a0:	425b      	negs	r3, r3
    39a2:	4698      	mov	r8, r3
    39a4:	e7f7      	b.n	3996 <_read+0x26>
	for (; len > 0; --len) {
    39a6:	4680      	mov	r8, r0
    39a8:	e7f5      	b.n	3996 <_read+0x26>
    39aa:	46c0      	nop			; (mov r8, r8)
    39ac:	2000102c 	.word	0x2000102c
    39b0:	20001024 	.word	0x20001024

000039b4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    39b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39b6:	46c6      	mov	lr, r8
    39b8:	b500      	push	{lr}
    39ba:	000e      	movs	r6, r1
    39bc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    39be:	3801      	subs	r0, #1
    39c0:	2802      	cmp	r0, #2
    39c2:	d810      	bhi.n	39e6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    39c4:	2a00      	cmp	r2, #0
    39c6:	d011      	beq.n	39ec <_write+0x38>
    39c8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    39ca:	4b0c      	ldr	r3, [pc, #48]	; (39fc <_write+0x48>)
    39cc:	4698      	mov	r8, r3
    39ce:	4f0c      	ldr	r7, [pc, #48]	; (3a00 <_write+0x4c>)
    39d0:	4643      	mov	r3, r8
    39d2:	6818      	ldr	r0, [r3, #0]
    39d4:	5d31      	ldrb	r1, [r6, r4]
    39d6:	683b      	ldr	r3, [r7, #0]
    39d8:	4798      	blx	r3
    39da:	2800      	cmp	r0, #0
    39dc:	db08      	blt.n	39f0 <_write+0x3c>
			return -1;
		}
		++nChars;
    39de:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    39e0:	42a5      	cmp	r5, r4
    39e2:	d1f5      	bne.n	39d0 <_write+0x1c>
    39e4:	e006      	b.n	39f4 <_write+0x40>
		return -1;
    39e6:	2401      	movs	r4, #1
    39e8:	4264      	negs	r4, r4
    39ea:	e003      	b.n	39f4 <_write+0x40>
	for (; len != 0; --len) {
    39ec:	0014      	movs	r4, r2
    39ee:	e001      	b.n	39f4 <_write+0x40>
			return -1;
    39f0:	2401      	movs	r4, #1
    39f2:	4264      	negs	r4, r4
	}
	return nChars;
}
    39f4:	0020      	movs	r0, r4
    39f6:	bc04      	pop	{r2}
    39f8:	4690      	mov	r8, r2
    39fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39fc:	2000102c 	.word	0x2000102c
    3a00:	20001028 	.word	0x20001028

00003a04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3a04:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3a06:	4a06      	ldr	r2, [pc, #24]	; (3a20 <_sbrk+0x1c>)
    3a08:	6812      	ldr	r2, [r2, #0]
    3a0a:	2a00      	cmp	r2, #0
    3a0c:	d004      	beq.n	3a18 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3a0e:	4a04      	ldr	r2, [pc, #16]	; (3a20 <_sbrk+0x1c>)
    3a10:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3a12:	18c3      	adds	r3, r0, r3
    3a14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3a16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3a18:	4902      	ldr	r1, [pc, #8]	; (3a24 <_sbrk+0x20>)
    3a1a:	4a01      	ldr	r2, [pc, #4]	; (3a20 <_sbrk+0x1c>)
    3a1c:	6011      	str	r1, [r2, #0]
    3a1e:	e7f6      	b.n	3a0e <_sbrk+0xa>
    3a20:	20000a48 	.word	0x20000a48
    3a24:	20003c90 	.word	0x20003c90

00003a28 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a28:	2001      	movs	r0, #1
    3a2a:	4240      	negs	r0, r0
    3a2c:	4770      	bx	lr

00003a2e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a2e:	2380      	movs	r3, #128	; 0x80
    3a30:	019b      	lsls	r3, r3, #6
    3a32:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a34:	2000      	movs	r0, #0
    3a36:	4770      	bx	lr

00003a38 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3a38:	2001      	movs	r0, #1
    3a3a:	4770      	bx	lr

00003a3c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a3c:	2000      	movs	r0, #0
    3a3e:	4770      	bx	lr

00003a40 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3a40:	b570      	push	{r4, r5, r6, lr}
    3a42:	b082      	sub	sp, #8
    3a44:	0005      	movs	r5, r0
    3a46:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3a48:	2200      	movs	r2, #0
    3a4a:	466b      	mov	r3, sp
    3a4c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3a4e:	4c06      	ldr	r4, [pc, #24]	; (3a68 <usart_serial_getchar+0x28>)
    3a50:	466b      	mov	r3, sp
    3a52:	1d99      	adds	r1, r3, #6
    3a54:	0028      	movs	r0, r5
    3a56:	47a0      	blx	r4
    3a58:	2800      	cmp	r0, #0
    3a5a:	d1f9      	bne.n	3a50 <usart_serial_getchar+0x10>

	*c = temp;
    3a5c:	466b      	mov	r3, sp
    3a5e:	3306      	adds	r3, #6
    3a60:	881b      	ldrh	r3, [r3, #0]
    3a62:	7033      	strb	r3, [r6, #0]
}
    3a64:	b002      	add	sp, #8
    3a66:	bd70      	pop	{r4, r5, r6, pc}
    3a68:	000028b9 	.word	0x000028b9

00003a6c <usart_serial_putchar>:
{
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3a70:	b28c      	uxth	r4, r1
    3a72:	4e03      	ldr	r6, [pc, #12]	; (3a80 <usart_serial_putchar+0x14>)
    3a74:	0021      	movs	r1, r4
    3a76:	0028      	movs	r0, r5
    3a78:	47b0      	blx	r6
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d1fa      	bne.n	3a74 <usart_serial_putchar+0x8>
}
    3a7e:	bd70      	pop	{r4, r5, r6, pc}
    3a80:	0000288d 	.word	0x0000288d

00003a84 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3a84:	b510      	push	{r4, lr}
    3a86:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3a88:	466b      	mov	r3, sp
    3a8a:	1ddc      	adds	r4, r3, #7
    3a8c:	2201      	movs	r2, #1
    3a8e:	0021      	movs	r1, r4
    3a90:	480f      	ldr	r0, [pc, #60]	; (3ad0 <USART_HOST_ISR_VECT+0x4c>)
    3a92:	4b10      	ldr	r3, [pc, #64]	; (3ad4 <USART_HOST_ISR_VECT+0x50>)
    3a94:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3a96:	b672      	cpsid	i
    3a98:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3a9c:	2200      	movs	r2, #0
    3a9e:	4b0e      	ldr	r3, [pc, #56]	; (3ad8 <USART_HOST_ISR_VECT+0x54>)
    3aa0:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3aa2:	4b0e      	ldr	r3, [pc, #56]	; (3adc <USART_HOST_ISR_VECT+0x58>)
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	7821      	ldrb	r1, [r4, #0]
    3aa8:	4a0d      	ldr	r2, [pc, #52]	; (3ae0 <USART_HOST_ISR_VECT+0x5c>)
    3aaa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3aac:	2b7f      	cmp	r3, #127	; 0x7f
    3aae:	d00a      	beq.n	3ac6 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3ab0:	3301      	adds	r3, #1
    3ab2:	4a0a      	ldr	r2, [pc, #40]	; (3adc <USART_HOST_ISR_VECT+0x58>)
    3ab4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3ab6:	2201      	movs	r2, #1
    3ab8:	4b07      	ldr	r3, [pc, #28]	; (3ad8 <USART_HOST_ISR_VECT+0x54>)
    3aba:	701a      	strb	r2, [r3, #0]
    3abc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ac0:	b662      	cpsie	i
}
    3ac2:	b002      	add	sp, #8
    3ac4:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3ac6:	2200      	movs	r2, #0
    3ac8:	4b04      	ldr	r3, [pc, #16]	; (3adc <USART_HOST_ISR_VECT+0x58>)
    3aca:	701a      	strb	r2, [r3, #0]
    3acc:	e7f3      	b.n	3ab6 <USART_HOST_ISR_VECT+0x32>
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	20000a4c 	.word	0x20000a4c
    3ad4:	00002929 	.word	0x00002929
    3ad8:	20000008 	.word	0x20000008
    3adc:	20000b00 	.word	0x20000b00
    3ae0:	20000a80 	.word	0x20000a80

00003ae4 <sio2host_init>:
{
    3ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3ae8:	2380      	movs	r3, #128	; 0x80
    3aea:	05db      	lsls	r3, r3, #23
    3aec:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3aee:	2300      	movs	r3, #0
    3af0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3af2:	22ff      	movs	r2, #255	; 0xff
    3af4:	4669      	mov	r1, sp
    3af6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3af8:	2200      	movs	r2, #0
    3afa:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3afc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3afe:	2401      	movs	r4, #1
    3b00:	2124      	movs	r1, #36	; 0x24
    3b02:	4668      	mov	r0, sp
    3b04:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3b06:	3101      	adds	r1, #1
    3b08:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3b0a:	3101      	adds	r1, #1
    3b0c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3b0e:	3101      	adds	r1, #1
    3b10:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3b12:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3b14:	3105      	adds	r1, #5
    3b16:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3b18:	3101      	adds	r1, #1
    3b1a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3b1c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3b1e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3b20:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3b22:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3b24:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3b26:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3b28:	2313      	movs	r3, #19
    3b2a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3b2c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3b2e:	2380      	movs	r3, #128	; 0x80
    3b30:	035b      	lsls	r3, r3, #13
    3b32:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3b34:	4b2f      	ldr	r3, [pc, #188]	; (3bf4 <sio2host_init+0x110>)
    3b36:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3b38:	4b2f      	ldr	r3, [pc, #188]	; (3bf8 <sio2host_init+0x114>)
    3b3a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3b3c:	2301      	movs	r3, #1
    3b3e:	425b      	negs	r3, r3
    3b40:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3b42:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3b44:	23e1      	movs	r3, #225	; 0xe1
    3b46:	025b      	lsls	r3, r3, #9
    3b48:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3b4a:	4d2c      	ldr	r5, [pc, #176]	; (3bfc <sio2host_init+0x118>)
    3b4c:	4b2c      	ldr	r3, [pc, #176]	; (3c00 <sio2host_init+0x11c>)
    3b4e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3b50:	4a2c      	ldr	r2, [pc, #176]	; (3c04 <sio2host_init+0x120>)
    3b52:	4b2d      	ldr	r3, [pc, #180]	; (3c08 <sio2host_init+0x124>)
    3b54:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3b56:	4a2d      	ldr	r2, [pc, #180]	; (3c0c <sio2host_init+0x128>)
    3b58:	4b2d      	ldr	r3, [pc, #180]	; (3c10 <sio2host_init+0x12c>)
    3b5a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3b5c:	466a      	mov	r2, sp
    3b5e:	2184      	movs	r1, #132	; 0x84
    3b60:	05c9      	lsls	r1, r1, #23
    3b62:	0028      	movs	r0, r5
    3b64:	4b2b      	ldr	r3, [pc, #172]	; (3c14 <sio2host_init+0x130>)
    3b66:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3b68:	4f2b      	ldr	r7, [pc, #172]	; (3c18 <sio2host_init+0x134>)
    3b6a:	683b      	ldr	r3, [r7, #0]
    3b6c:	6898      	ldr	r0, [r3, #8]
    3b6e:	2100      	movs	r1, #0
    3b70:	4e2a      	ldr	r6, [pc, #168]	; (3c1c <sio2host_init+0x138>)
    3b72:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3b74:	683b      	ldr	r3, [r7, #0]
    3b76:	6858      	ldr	r0, [r3, #4]
    3b78:	2100      	movs	r1, #0
    3b7a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b7c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3b7e:	0030      	movs	r0, r6
    3b80:	4b27      	ldr	r3, [pc, #156]	; (3c20 <sio2host_init+0x13c>)
    3b82:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b84:	231f      	movs	r3, #31
    3b86:	4018      	ands	r0, r3
    3b88:	4084      	lsls	r4, r0
    3b8a:	4b26      	ldr	r3, [pc, #152]	; (3c24 <sio2host_init+0x140>)
    3b8c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b8e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3b90:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3b92:	2b00      	cmp	r3, #0
    3b94:	d1fc      	bne.n	3b90 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b96:	6833      	ldr	r3, [r6, #0]
    3b98:	2202      	movs	r2, #2
    3b9a:	4313      	orrs	r3, r2
    3b9c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3b9e:	4b17      	ldr	r3, [pc, #92]	; (3bfc <sio2host_init+0x118>)
    3ba0:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3ba2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3ba4:	2a00      	cmp	r2, #0
    3ba6:	d1fc      	bne.n	3ba2 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3ba8:	6859      	ldr	r1, [r3, #4]
    3baa:	2280      	movs	r2, #128	; 0x80
    3bac:	0252      	lsls	r2, r2, #9
    3bae:	430a      	orrs	r2, r1
    3bb0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3bb2:	2101      	movs	r1, #1
    3bb4:	4a11      	ldr	r2, [pc, #68]	; (3bfc <sio2host_init+0x118>)
    3bb6:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3bb8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bba:	2a00      	cmp	r2, #0
    3bbc:	d1fc      	bne.n	3bb8 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    3bbe:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d1fc      	bne.n	3bbe <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3bc4:	6859      	ldr	r1, [r3, #4]
    3bc6:	2280      	movs	r2, #128	; 0x80
    3bc8:	0292      	lsls	r2, r2, #10
    3bca:	430a      	orrs	r2, r1
    3bcc:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3bce:	2101      	movs	r1, #1
    3bd0:	4a0a      	ldr	r2, [pc, #40]	; (3bfc <sio2host_init+0x118>)
    3bd2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3bd4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3bd6:	2a00      	cmp	r2, #0
    3bd8:	d1fc      	bne.n	3bd4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    3bda:	4913      	ldr	r1, [pc, #76]	; (3c28 <sio2host_init+0x144>)
    3bdc:	2000      	movs	r0, #0
    3bde:	4b13      	ldr	r3, [pc, #76]	; (3c2c <sio2host_init+0x148>)
    3be0:	4798      	blx	r3
    3be2:	2204      	movs	r2, #4
    3be4:	2384      	movs	r3, #132	; 0x84
    3be6:	05db      	lsls	r3, r3, #23
    3be8:	759a      	strb	r2, [r3, #22]
    3bea:	32fc      	adds	r2, #252	; 0xfc
    3bec:	4b0d      	ldr	r3, [pc, #52]	; (3c24 <sio2host_init+0x140>)
    3bee:	601a      	str	r2, [r3, #0]
}
    3bf0:	b011      	add	sp, #68	; 0x44
    3bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bf4:	00040003 	.word	0x00040003
    3bf8:	00050003 	.word	0x00050003
    3bfc:	20000a4c 	.word	0x20000a4c
    3c00:	2000102c 	.word	0x2000102c
    3c04:	00003a6d 	.word	0x00003a6d
    3c08:	20001028 	.word	0x20001028
    3c0c:	00003a41 	.word	0x00003a41
    3c10:	20001024 	.word	0x20001024
    3c14:	00002521 	.word	0x00002521
    3c18:	20000038 	.word	0x20000038
    3c1c:	00013ddd 	.word	0x00013ddd
    3c20:	000020c1 	.word	0x000020c1
    3c24:	e000e100 	.word	0xe000e100
    3c28:	00003a85 	.word	0x00003a85
    3c2c:	00002085 	.word	0x00002085

00003c30 <sio2host_deinit>:
{
    3c30:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c32:	4d15      	ldr	r5, [pc, #84]	; (3c88 <sio2host_deinit+0x58>)
    3c34:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3c36:	0020      	movs	r0, r4
    3c38:	4b14      	ldr	r3, [pc, #80]	; (3c8c <sio2host_deinit+0x5c>)
    3c3a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c3c:	231f      	movs	r3, #31
    3c3e:	4018      	ands	r0, r3
    3c40:	3b1e      	subs	r3, #30
    3c42:	4083      	lsls	r3, r0
    3c44:	2280      	movs	r2, #128	; 0x80
    3c46:	4912      	ldr	r1, [pc, #72]	; (3c90 <sio2host_deinit+0x60>)
    3c48:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c4a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c4c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d1fc      	bne.n	3c4c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3c52:	6823      	ldr	r3, [r4, #0]
    3c54:	2202      	movs	r2, #2
    3c56:	4393      	bics	r3, r2
    3c58:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c5a:	4b0b      	ldr	r3, [pc, #44]	; (3c88 <sio2host_deinit+0x58>)
    3c5c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c5e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c60:	2a00      	cmp	r2, #0
    3c62:	d1fc      	bne.n	3c5e <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    3c64:	685a      	ldr	r2, [r3, #4]
    3c66:	490b      	ldr	r1, [pc, #44]	; (3c94 <sio2host_deinit+0x64>)
    3c68:	400a      	ands	r2, r1
    3c6a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    3c6c:	2100      	movs	r1, #0
    3c6e:	4a06      	ldr	r2, [pc, #24]	; (3c88 <sio2host_deinit+0x58>)
    3c70:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3c72:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c74:	2a00      	cmp	r2, #0
    3c76:	d1fc      	bne.n	3c72 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3c78:	685a      	ldr	r2, [r3, #4]
    3c7a:	4907      	ldr	r1, [pc, #28]	; (3c98 <sio2host_deinit+0x68>)
    3c7c:	400a      	ands	r2, r1
    3c7e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    3c80:	2200      	movs	r2, #0
    3c82:	4b01      	ldr	r3, [pc, #4]	; (3c88 <sio2host_deinit+0x58>)
    3c84:	719a      	strb	r2, [r3, #6]
}
    3c86:	bd70      	pop	{r4, r5, r6, pc}
    3c88:	20000a4c 	.word	0x20000a4c
    3c8c:	000020c1 	.word	0x000020c1
    3c90:	e000e100 	.word	0xe000e100
    3c94:	fffeffff 	.word	0xfffeffff
    3c98:	fffdffff 	.word	0xfffdffff

00003c9c <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c9c:	4b13      	ldr	r3, [pc, #76]	; (3cec <HAL_SPISend+0x50>)
    3c9e:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    3ca0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ca2:	7e1a      	ldrb	r2, [r3, #24]
    3ca4:	420a      	tst	r2, r1
    3ca6:	d0fc      	beq.n	3ca2 <HAL_SPISend+0x6>
    3ca8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3caa:	07d2      	lsls	r2, r2, #31
    3cac:	d500      	bpl.n	3cb0 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cae:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    3cb0:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cb2:	7e1a      	ldrb	r2, [r3, #24]
    3cb4:	420a      	tst	r2, r1
    3cb6:	d0fc      	beq.n	3cb2 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    3cb8:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cba:	7e1a      	ldrb	r2, [r3, #24]
    3cbc:	420a      	tst	r2, r1
    3cbe:	d0fc      	beq.n	3cba <HAL_SPISend+0x1e>
    3cc0:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    3cc2:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    3cc4:	0752      	lsls	r2, r2, #29
    3cc6:	d50a      	bpl.n	3cde <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cc8:	8b5a      	ldrh	r2, [r3, #26]
    3cca:	0752      	lsls	r2, r2, #29
    3ccc:	d501      	bpl.n	3cd2 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cce:	2204      	movs	r2, #4
    3cd0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cd2:	4a06      	ldr	r2, [pc, #24]	; (3cec <HAL_SPISend+0x50>)
    3cd4:	7992      	ldrb	r2, [r2, #6]
    3cd6:	2a01      	cmp	r2, #1
    3cd8:	d003      	beq.n	3ce2 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cda:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3cdc:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    3cde:	b2c0      	uxtb	r0, r0
}
    3ce0:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ce2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3ce4:	05c0      	lsls	r0, r0, #23
    3ce6:	0dc0      	lsrs	r0, r0, #23
    3ce8:	e7f9      	b.n	3cde <HAL_SPISend+0x42>
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	20000b10 	.word	0x20000b10

00003cf0 <HAL_ResetPinMakeOutput>:
{
    3cf0:	b500      	push	{lr}
    3cf2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3cf4:	a901      	add	r1, sp, #4
    3cf6:	2301      	movs	r3, #1
    3cf8:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    3cfa:	2200      	movs	r2, #0
    3cfc:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3cfe:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3d00:	202f      	movs	r0, #47	; 0x2f
    3d02:	4b02      	ldr	r3, [pc, #8]	; (3d0c <HAL_ResetPinMakeOutput+0x1c>)
    3d04:	4798      	blx	r3
}
    3d06:	b003      	add	sp, #12
    3d08:	bd00      	pop	{pc}
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	0000102d 	.word	0x0000102d

00003d10 <HAL_RadioDIO2Callback>:
{
    3d10:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    3d12:	4b05      	ldr	r3, [pc, #20]	; (3d28 <HAL_RadioDIO2Callback+0x18>)
    3d14:	681b      	ldr	r3, [r3, #0]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d004      	beq.n	3d24 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    3d1a:	4b04      	ldr	r3, [pc, #16]	; (3d2c <HAL_RadioDIO2Callback+0x1c>)
    3d1c:	4798      	blx	r3
    interruptHandlerDio2();
    3d1e:	4b02      	ldr	r3, [pc, #8]	; (3d28 <HAL_RadioDIO2Callback+0x18>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	4798      	blx	r3
}
    3d24:	bd10      	pop	{r4, pc}
    3d26:	46c0      	nop			; (mov r8, r8)
    3d28:	20000b0c 	.word	0x20000b0c
    3d2c:	0000425d 	.word	0x0000425d

00003d30 <HAL_RadioDIO1Callback>:
{
    3d30:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    3d32:	4b05      	ldr	r3, [pc, #20]	; (3d48 <HAL_RadioDIO1Callback+0x18>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d004      	beq.n	3d44 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    3d3a:	4b04      	ldr	r3, [pc, #16]	; (3d4c <HAL_RadioDIO1Callback+0x1c>)
    3d3c:	4798      	blx	r3
    interruptHandlerDio1();
    3d3e:	4b02      	ldr	r3, [pc, #8]	; (3d48 <HAL_RadioDIO1Callback+0x18>)
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	4798      	blx	r3
}
    3d44:	bd10      	pop	{r4, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	20000b08 	.word	0x20000b08
    3d4c:	0000425d 	.word	0x0000425d

00003d50 <HAL_RadioDIO0Callback>:
{
    3d50:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    3d52:	4b05      	ldr	r3, [pc, #20]	; (3d68 <HAL_RadioDIO0Callback+0x18>)
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	2b00      	cmp	r3, #0
    3d58:	d004      	beq.n	3d64 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    3d5a:	4b04      	ldr	r3, [pc, #16]	; (3d6c <HAL_RadioDIO0Callback+0x1c>)
    3d5c:	4798      	blx	r3
    interruptHandlerDio0();
    3d5e:	4b02      	ldr	r3, [pc, #8]	; (3d68 <HAL_RadioDIO0Callback+0x18>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	4798      	blx	r3
}
    3d64:	bd10      	pop	{r4, pc}
    3d66:	46c0      	nop			; (mov r8, r8)
    3d68:	20000b04 	.word	0x20000b04
    3d6c:	0000425d 	.word	0x0000425d

00003d70 <HAL_SPICSAssert>:
{
    3d70:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    3d72:	2201      	movs	r2, #1
    3d74:	4902      	ldr	r1, [pc, #8]	; (3d80 <HAL_SPICSAssert+0x10>)
    3d76:	4803      	ldr	r0, [pc, #12]	; (3d84 <HAL_SPICSAssert+0x14>)
    3d78:	4b03      	ldr	r3, [pc, #12]	; (3d88 <HAL_SPICSAssert+0x18>)
    3d7a:	4798      	blx	r3
}
    3d7c:	bd10      	pop	{r4, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	20001030 	.word	0x20001030
    3d84:	20000b10 	.word	0x20000b10
    3d88:	0000242d 	.word	0x0000242d

00003d8c <HAL_SPICSDeassert>:
{
    3d8c:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    3d8e:	2200      	movs	r2, #0
    3d90:	4902      	ldr	r1, [pc, #8]	; (3d9c <HAL_SPICSDeassert+0x10>)
    3d92:	4803      	ldr	r0, [pc, #12]	; (3da0 <HAL_SPICSDeassert+0x14>)
    3d94:	4b03      	ldr	r3, [pc, #12]	; (3da4 <HAL_SPICSDeassert+0x18>)
    3d96:	4798      	blx	r3
}
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	20001030 	.word	0x20001030
    3da0:	20000b10 	.word	0x20000b10
    3da4:	0000242d 	.word	0x0000242d

00003da8 <HAL_RadioInit>:
{
    3da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3daa:	46d6      	mov	lr, sl
    3dac:	464f      	mov	r7, r9
    3dae:	4646      	mov	r6, r8
    3db0:	b5c0      	push	{r6, r7, lr}
    3db2:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    3db4:	ac01      	add	r4, sp, #4
    3db6:	2601      	movs	r6, #1
    3db8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3dba:	2500      	movs	r5, #0
    3dbc:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3dbe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    3dc0:	0021      	movs	r1, r4
    3dc2:	2052      	movs	r0, #82	; 0x52
    3dc4:	4f52      	ldr	r7, [pc, #328]	; (3f10 <HAL_RadioInit+0x168>)
    3dc6:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    3dc8:	0021      	movs	r1, r4
    3dca:	203e      	movs	r0, #62	; 0x3e
    3dcc:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    3dce:	0021      	movs	r1, r4
    3dd0:	203f      	movs	r0, #63	; 0x3f
    3dd2:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    3dd4:	0021      	movs	r1, r4
    3dd6:	202f      	movs	r0, #47	; 0x2f
    3dd8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    3dda:	2280      	movs	r2, #128	; 0x80
    3ddc:	02d2      	lsls	r2, r2, #11
    3dde:	4b4d      	ldr	r3, [pc, #308]	; (3f14 <HAL_RadioInit+0x16c>)
    3de0:	619a      	str	r2, [r3, #24]
    3de2:	4b4d      	ldr	r3, [pc, #308]	; (3f18 <HAL_RadioInit+0x170>)
    3de4:	2280      	movs	r2, #128	; 0x80
    3de6:	05d2      	lsls	r2, r2, #23
    3de8:	619a      	str	r2, [r3, #24]
    3dea:	2280      	movs	r2, #128	; 0x80
    3dec:	0612      	lsls	r2, r2, #24
    3dee:	619a      	str	r2, [r3, #24]
    3df0:	2280      	movs	r2, #128	; 0x80
    3df2:	0212      	lsls	r2, r2, #8
    3df4:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3df6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    3df8:	0021      	movs	r1, r4
    3dfa:	2053      	movs	r0, #83	; 0x53
    3dfc:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    3dfe:	ac02      	add	r4, sp, #8
    3e00:	0020      	movs	r0, r4
    3e02:	4b46      	ldr	r3, [pc, #280]	; (3f1c <HAL_RadioInit+0x174>)
    3e04:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    3e06:	2330      	movs	r3, #48	; 0x30
    3e08:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    3e0a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e0c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e0e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    3e10:	0021      	movs	r1, r4
    3e12:	2000      	movs	r0, #0
    3e14:	4b42      	ldr	r3, [pc, #264]	; (3f20 <HAL_RadioInit+0x178>)
    3e16:	469a      	mov	sl, r3
    3e18:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e1a:	2200      	movs	r2, #0
    3e1c:	2100      	movs	r1, #0
    3e1e:	4841      	ldr	r0, [pc, #260]	; (3f24 <HAL_RadioInit+0x17c>)
    3e20:	4b41      	ldr	r3, [pc, #260]	; (3f28 <HAL_RadioInit+0x180>)
    3e22:	4699      	mov	r9, r3
    3e24:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e26:	2100      	movs	r1, #0
    3e28:	2000      	movs	r0, #0
    3e2a:	4b40      	ldr	r3, [pc, #256]	; (3f2c <HAL_RadioInit+0x184>)
    3e2c:	4698      	mov	r8, r3
    3e2e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    3e30:	230b      	movs	r3, #11
    3e32:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    3e34:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e36:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e38:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    3e3a:	0021      	movs	r1, r4
    3e3c:	200b      	movs	r0, #11
    3e3e:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e40:	2200      	movs	r2, #0
    3e42:	210b      	movs	r1, #11
    3e44:	483a      	ldr	r0, [pc, #232]	; (3f30 <HAL_RadioInit+0x188>)
    3e46:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e48:	2100      	movs	r1, #0
    3e4a:	200b      	movs	r0, #11
    3e4c:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    3e4e:	230c      	movs	r3, #12
    3e50:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    3e52:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    3e54:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    3e56:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    3e58:	0021      	movs	r1, r4
    3e5a:	200c      	movs	r0, #12
    3e5c:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e5e:	2200      	movs	r2, #0
    3e60:	210c      	movs	r1, #12
    3e62:	4834      	ldr	r0, [pc, #208]	; (3f34 <HAL_RadioInit+0x18c>)
    3e64:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    3e66:	2100      	movs	r1, #0
    3e68:	200c      	movs	r0, #12
    3e6a:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    3e6c:	4b32      	ldr	r3, [pc, #200]	; (3f38 <HAL_RadioInit+0x190>)
    3e6e:	4698      	mov	r8, r3
    3e70:	233f      	movs	r3, #63	; 0x3f
    3e72:	4642      	mov	r2, r8
    3e74:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    3e76:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    3e78:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3e7a:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    3e7c:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3e7e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3e80:	0021      	movs	r1, r4
    3e82:	203f      	movs	r0, #63	; 0x3f
    3e84:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    3e86:	4643      	mov	r3, r8
    3e88:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    3e8a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3e8c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3e8e:	2900      	cmp	r1, #0
    3e90:	d104      	bne.n	3e9c <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    3e92:	0953      	lsrs	r3, r2, #5
    3e94:	01db      	lsls	r3, r3, #7
    3e96:	4929      	ldr	r1, [pc, #164]	; (3f3c <HAL_RadioInit+0x194>)
    3e98:	468c      	mov	ip, r1
    3e9a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e9c:	211f      	movs	r1, #31
    3e9e:	4011      	ands	r1, r2
    3ea0:	2201      	movs	r2, #1
    3ea2:	0010      	movs	r0, r2
    3ea4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3ea6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3ea8:	ac02      	add	r4, sp, #8
    3eaa:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3eac:	2300      	movs	r3, #0
    3eae:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3eb0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3eb2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3eb4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3eb6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3eb8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3eba:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3ebc:	3223      	adds	r2, #35	; 0x23
    3ebe:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3ec0:	3a18      	subs	r2, #24
    3ec2:	2100      	movs	r1, #0
    3ec4:	a808      	add	r0, sp, #32
    3ec6:	4b1e      	ldr	r3, [pc, #120]	; (3f40 <HAL_RadioInit+0x198>)
    3ec8:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    3eca:	4b1e      	ldr	r3, [pc, #120]	; (3f44 <HAL_RadioInit+0x19c>)
    3ecc:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    3ece:	2380      	movs	r3, #128	; 0x80
    3ed0:	025b      	lsls	r3, r3, #9
    3ed2:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    3ed4:	4b1c      	ldr	r3, [pc, #112]	; (3f48 <HAL_RadioInit+0x1a0>)
    3ed6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    3ed8:	2301      	movs	r3, #1
    3eda:	425b      	negs	r3, r3
    3edc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    3ede:	4b1b      	ldr	r3, [pc, #108]	; (3f4c <HAL_RadioInit+0x1a4>)
    3ee0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    3ee2:	4b1b      	ldr	r3, [pc, #108]	; (3f50 <HAL_RadioInit+0x1a8>)
    3ee4:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    3ee6:	4d1b      	ldr	r5, [pc, #108]	; (3f54 <HAL_RadioInit+0x1ac>)
    3ee8:	0022      	movs	r2, r4
    3eea:	491b      	ldr	r1, [pc, #108]	; (3f58 <HAL_RadioInit+0x1b0>)
    3eec:	0028      	movs	r0, r5
    3eee:	4b1b      	ldr	r3, [pc, #108]	; (3f5c <HAL_RadioInit+0x1b4>)
    3ef0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ef2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3ef4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d1fc      	bne.n	3ef4 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3efa:	6813      	ldr	r3, [r2, #0]
    3efc:	2102      	movs	r1, #2
    3efe:	430b      	orrs	r3, r1
    3f00:	6013      	str	r3, [r2, #0]
}
    3f02:	b010      	add	sp, #64	; 0x40
    3f04:	bc1c      	pop	{r2, r3, r4}
    3f06:	4690      	mov	r8, r2
    3f08:	4699      	mov	r9, r3
    3f0a:	46a2      	mov	sl, r4
    3f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	0000102d 	.word	0x0000102d
    3f14:	40002900 	.word	0x40002900
    3f18:	40002880 	.word	0x40002880
    3f1c:	00000c11 	.word	0x00000c11
    3f20:	00000c25 	.word	0x00000c25
    3f24:	00003d51 	.word	0x00003d51
    3f28:	00000ad1 	.word	0x00000ad1
    3f2c:	00000afd 	.word	0x00000afd
    3f30:	00003d31 	.word	0x00003d31
    3f34:	00003d11 	.word	0x00003d11
    3f38:	20001030 	.word	0x20001030
    3f3c:	40002800 	.word	0x40002800
    3f40:	00013c29 	.word	0x00013c29
    3f44:	001e8480 	.word	0x001e8480
    3f48:	00530005 	.word	0x00530005
    3f4c:	003e0005 	.word	0x003e0005
    3f50:	00520005 	.word	0x00520005
    3f54:	20000b10 	.word	0x20000b10
    3f58:	42001000 	.word	0x42001000
    3f5c:	00002151 	.word	0x00002151

00003f60 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f60:	4b07      	ldr	r3, [pc, #28]	; (3f80 <HAL_Radio_resources_init+0x20>)
    3f62:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3f64:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3f66:	2b00      	cmp	r3, #0
    3f68:	d1fc      	bne.n	3f64 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3f6a:	6813      	ldr	r3, [r2, #0]
    3f6c:	2102      	movs	r1, #2
    3f6e:	430b      	orrs	r3, r1
    3f70:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f72:	4b03      	ldr	r3, [pc, #12]	; (3f80 <HAL_Radio_resources_init+0x20>)
    3f74:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3f76:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d1fc      	bne.n	3f76 <HAL_Radio_resources_init+0x16>
}
    3f7c:	4770      	bx	lr
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	20000b10 	.word	0x20000b10

00003f84 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f84:	4b06      	ldr	r3, [pc, #24]	; (3fa0 <HAL_RadioDeInit+0x1c>)
    3f86:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    3f88:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d1fc      	bne.n	3f88 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3f8e:	338f      	adds	r3, #143	; 0x8f
    3f90:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3f92:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3f94:	6813      	ldr	r3, [r2, #0]
    3f96:	2102      	movs	r1, #2
    3f98:	438b      	bics	r3, r1
    3f9a:	6013      	str	r3, [r2, #0]
}
    3f9c:	4770      	bx	lr
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	20000b10 	.word	0x20000b10

00003fa4 <RADIO_Reset>:
{
    3fa4:	b570      	push	{r4, r5, r6, lr}
    3fa6:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    3fa8:	4c0a      	ldr	r4, [pc, #40]	; (3fd4 <RADIO_Reset+0x30>)
    3faa:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    3fac:	4d0a      	ldr	r5, [pc, #40]	; (3fd8 <RADIO_Reset+0x34>)
    3fae:	2680      	movs	r6, #128	; 0x80
    3fb0:	0236      	lsls	r6, r6, #8
    3fb2:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    3fb4:	2001      	movs	r0, #1
    3fb6:	4b09      	ldr	r3, [pc, #36]	; (3fdc <RADIO_Reset+0x38>)
    3fb8:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    3fba:	a901      	add	r1, sp, #4
    3fbc:	2300      	movs	r3, #0
    3fbe:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3fc0:	2201      	movs	r2, #1
    3fc2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3fc4:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    3fc6:	202f      	movs	r0, #47	; 0x2f
    3fc8:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <RADIO_Reset+0x3c>)
    3fca:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3fcc:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    3fce:	47a0      	blx	r4
}
    3fd0:	b002      	add	sp, #8
    3fd2:	bd70      	pop	{r4, r5, r6, pc}
    3fd4:	00003cf1 	.word	0x00003cf1
    3fd8:	40002880 	.word	0x40002880
    3fdc:	00004229 	.word	0x00004229
    3fe0:	0000102d 	.word	0x0000102d

00003fe4 <RADIO_RegisterWrite>:
{
    3fe4:	b570      	push	{r4, r5, r6, lr}
    3fe6:	0004      	movs	r4, r0
    3fe8:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    3fea:	4b05      	ldr	r3, [pc, #20]	; (4000 <RADIO_RegisterWrite+0x1c>)
    3fec:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    3fee:	2080      	movs	r0, #128	; 0x80
    3ff0:	4320      	orrs	r0, r4
    3ff2:	4c04      	ldr	r4, [pc, #16]	; (4004 <RADIO_RegisterWrite+0x20>)
    3ff4:	47a0      	blx	r4
	HAL_SPISend(value);
    3ff6:	0028      	movs	r0, r5
    3ff8:	47a0      	blx	r4
	HAL_SPICSDeassert();
    3ffa:	4b03      	ldr	r3, [pc, #12]	; (4008 <RADIO_RegisterWrite+0x24>)
    3ffc:	4798      	blx	r3
}
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
    4000:	00003d71 	.word	0x00003d71
    4004:	00003c9d 	.word	0x00003c9d
    4008:	00003d8d 	.word	0x00003d8d

0000400c <RADIO_RegisterRead>:
{
    400c:	b510      	push	{r4, lr}
    400e:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    4010:	4b06      	ldr	r3, [pc, #24]	; (402c <RADIO_RegisterRead+0x20>)
    4012:	4798      	blx	r3
	HAL_SPISend(reg);
    4014:	207f      	movs	r0, #127	; 0x7f
    4016:	4020      	ands	r0, r4
    4018:	4c05      	ldr	r4, [pc, #20]	; (4030 <RADIO_RegisterRead+0x24>)
    401a:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    401c:	20ff      	movs	r0, #255	; 0xff
    401e:	47a0      	blx	r4
    4020:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    4022:	4b04      	ldr	r3, [pc, #16]	; (4034 <RADIO_RegisterRead+0x28>)
    4024:	4798      	blx	r3
}
    4026:	0020      	movs	r0, r4
    4028:	bd10      	pop	{r4, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	00003d71 	.word	0x00003d71
    4030:	00003c9d 	.word	0x00003c9d
    4034:	00003d8d 	.word	0x00003d8d

00004038 <RADIO_FrameWrite>:
{
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	0004      	movs	r4, r0
    403c:	000e      	movs	r6, r1
    403e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    4040:	4b0a      	ldr	r3, [pc, #40]	; (406c <RADIO_FrameWrite+0x34>)
    4042:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    4044:	2080      	movs	r0, #128	; 0x80
    4046:	4320      	orrs	r0, r4
    4048:	4b09      	ldr	r3, [pc, #36]	; (4070 <RADIO_FrameWrite+0x38>)
    404a:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    404c:	2d00      	cmp	r5, #0
    404e:	d00a      	beq.n	4066 <RADIO_FrameWrite+0x2e>
    4050:	0034      	movs	r4, r6
    4052:	3d01      	subs	r5, #1
    4054:	b2ed      	uxtb	r5, r5
    4056:	3501      	adds	r5, #1
    4058:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    405a:	4e05      	ldr	r6, [pc, #20]	; (4070 <RADIO_FrameWrite+0x38>)
    405c:	7820      	ldrb	r0, [r4, #0]
    405e:	47b0      	blx	r6
    4060:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    4062:	42ac      	cmp	r4, r5
    4064:	d1fa      	bne.n	405c <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    4066:	4b03      	ldr	r3, [pc, #12]	; (4074 <RADIO_FrameWrite+0x3c>)
    4068:	4798      	blx	r3
}
    406a:	bd70      	pop	{r4, r5, r6, pc}
    406c:	00003d71 	.word	0x00003d71
    4070:	00003c9d 	.word	0x00003c9d
    4074:	00003d8d 	.word	0x00003d8d

00004078 <RADIO_FrameRead>:
{
    4078:	b570      	push	{r4, r5, r6, lr}
    407a:	0004      	movs	r4, r0
    407c:	000e      	movs	r6, r1
    407e:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    4080:	4b0a      	ldr	r3, [pc, #40]	; (40ac <RADIO_FrameRead+0x34>)
    4082:	4798      	blx	r3
    HAL_SPISend(offset);
    4084:	0020      	movs	r0, r4
    4086:	4b0a      	ldr	r3, [pc, #40]	; (40b0 <RADIO_FrameRead+0x38>)
    4088:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    408a:	2d00      	cmp	r5, #0
    408c:	d00b      	beq.n	40a6 <RADIO_FrameRead+0x2e>
    408e:	0034      	movs	r4, r6
    4090:	3d01      	subs	r5, #1
    4092:	b2ed      	uxtb	r5, r5
    4094:	3501      	adds	r5, #1
    4096:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    4098:	4e05      	ldr	r6, [pc, #20]	; (40b0 <RADIO_FrameRead+0x38>)
    409a:	20ff      	movs	r0, #255	; 0xff
    409c:	47b0      	blx	r6
    409e:	7020      	strb	r0, [r4, #0]
    40a0:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    40a2:	42ac      	cmp	r4, r5
    40a4:	d1f9      	bne.n	409a <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    40a6:	4b03      	ldr	r3, [pc, #12]	; (40b4 <RADIO_FrameRead+0x3c>)
    40a8:	4798      	blx	r3
}
    40aa:	bd70      	pop	{r4, r5, r6, pc}
    40ac:	00003d71 	.word	0x00003d71
    40b0:	00003c9d 	.word	0x00003c9d
    40b4:	00003d8d 	.word	0x00003d8d

000040b8 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    40b8:	2802      	cmp	r0, #2
    40ba:	d007      	beq.n	40cc <HAL_RegisterDioInterruptHandler+0x14>
    40bc:	2804      	cmp	r0, #4
    40be:	d008      	beq.n	40d2 <HAL_RegisterDioInterruptHandler+0x1a>
    40c0:	2801      	cmp	r0, #1
    40c2:	d000      	beq.n	40c6 <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    40c4:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    40c6:	4b04      	ldr	r3, [pc, #16]	; (40d8 <HAL_RegisterDioInterruptHandler+0x20>)
    40c8:	6019      	str	r1, [r3, #0]
      break;
    40ca:	e7fb      	b.n	40c4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    40cc:	4b03      	ldr	r3, [pc, #12]	; (40dc <HAL_RegisterDioInterruptHandler+0x24>)
    40ce:	6019      	str	r1, [r3, #0]
      break;
    40d0:	e7f8      	b.n	40c4 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    40d2:	4b03      	ldr	r3, [pc, #12]	; (40e0 <HAL_RegisterDioInterruptHandler+0x28>)
    40d4:	6019      	str	r1, [r3, #0]
}
    40d6:	e7f5      	b.n	40c4 <HAL_RegisterDioInterruptHandler+0xc>
    40d8:	20000b04 	.word	0x20000b04
    40dc:	20000b08 	.word	0x20000b08
    40e0:	20000b0c 	.word	0x20000b0c

000040e4 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    40e4:	2801      	cmp	r0, #1
    40e6:	d000      	beq.n	40ea <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    40e8:	4770      	bx	lr
    40ea:	2280      	movs	r2, #128	; 0x80
    40ec:	0192      	lsls	r2, r2, #6
    40ee:	4b01      	ldr	r3, [pc, #4]	; (40f4 <HAL_EnableRFCtrl+0x10>)
    40f0:	619a      	str	r2, [r3, #24]
    40f2:	e7f9      	b.n	40e8 <HAL_EnableRFCtrl+0x4>
    40f4:	40002800 	.word	0x40002800

000040f8 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    40f8:	2801      	cmp	r0, #1
    40fa:	d000      	beq.n	40fe <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    40fc:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    40fe:	2280      	movs	r2, #128	; 0x80
    4100:	0192      	lsls	r2, r2, #6
    4102:	4b01      	ldr	r3, [pc, #4]	; (4108 <HAL_DisableRFCtrl+0x10>)
    4104:	615a      	str	r2, [r3, #20]
    4106:	e7f9      	b.n	40fc <HAL_DisableRFCtrl+0x4>
    4108:	40002800 	.word	0x40002800

0000410c <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    410c:	2002      	movs	r0, #2
    410e:	4770      	bx	lr

00004110 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    4110:	2000      	movs	r0, #0
    4112:	4770      	bx	lr

00004114 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    4114:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    4116:	2280      	movs	r2, #128	; 0x80
    4118:	0092      	lsls	r2, r2, #2
    411a:	4b03      	ldr	r3, [pc, #12]	; (4128 <HAL_TCXOPowerOn+0x14>)
    411c:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    411e:	2002      	movs	r0, #2
    4120:	4b02      	ldr	r3, [pc, #8]	; (412c <HAL_TCXOPowerOn+0x18>)
    4122:	4798      	blx	r3
#endif
}
    4124:	bd10      	pop	{r4, pc}
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	40002800 	.word	0x40002800
    412c:	00000181 	.word	0x00000181

00004130 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    4130:	2280      	movs	r2, #128	; 0x80
    4132:	0092      	lsls	r2, r2, #2
    4134:	4b01      	ldr	r3, [pc, #4]	; (413c <HAL_TCXOPowerOff+0xc>)
    4136:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    4138:	4770      	bx	lr
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	40002800 	.word	0x40002800

00004140 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    4140:	2801      	cmp	r0, #1
    4142:	d002      	beq.n	414a <HAL_Sleep+0xa>
    4144:	2802      	cmp	r0, #2
    4146:	d00c      	beq.n	4162 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    4148:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    414a:	2204      	movs	r2, #4
    414c:	2380      	movs	r3, #128	; 0x80
    414e:	05db      	lsls	r3, r3, #23
    4150:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    4152:	001a      	movs	r2, r3
    4154:	7853      	ldrb	r3, [r2, #1]
    4156:	2b04      	cmp	r3, #4
    4158:	d1fc      	bne.n	4154 <HAL_Sleep+0x14>
  __ASM volatile ("dsb");
    415a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    415e:	bf30      	wfi
    4160:	e7f2      	b.n	4148 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    4162:	2205      	movs	r2, #5
    4164:	2380      	movs	r3, #128	; 0x80
    4166:	05db      	lsls	r3, r3, #23
    4168:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    416a:	001a      	movs	r2, r3
    416c:	7853      	ldrb	r3, [r2, #1]
    416e:	2b05      	cmp	r3, #5
    4170:	d1fc      	bne.n	416c <HAL_Sleep+0x2c>
  __ASM volatile ("dsb");
    4172:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    4176:	bf30      	wfi
    4178:	e7e6      	b.n	4148 <HAL_Sleep+0x8>
	...

0000417c <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    417c:	b510      	push	{r4, lr}
    417e:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    4180:	2201      	movs	r2, #1
    4182:	466b      	mov	r3, sp
    4184:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    4186:	2300      	movs	r3, #0
    4188:	4669      	mov	r1, sp
    418a:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    418c:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    418e:	466a      	mov	r2, sp
    4190:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    4192:	3b01      	subs	r3, #1
    4194:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    4196:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    4198:	4c04      	ldr	r4, [pc, #16]	; (41ac <SleepTimerInit+0x30>)
    419a:	4905      	ldr	r1, [pc, #20]	; (41b0 <SleepTimerInit+0x34>)
    419c:	0020      	movs	r0, r4
    419e:	4b05      	ldr	r3, [pc, #20]	; (41b4 <SleepTimerInit+0x38>)
    41a0:	4798      	blx	r3
	rtc_count_enable(&rtc);
    41a2:	0020      	movs	r0, r4
    41a4:	4b04      	ldr	r3, [pc, #16]	; (41b8 <SleepTimerInit+0x3c>)
    41a6:	4798      	blx	r3
}
    41a8:	b004      	add	sp, #16
    41aa:	bd10      	pop	{r4, pc}
    41ac:	20001034 	.word	0x20001034
    41b0:	40002000 	.word	0x40002000
    41b4:	000011dd 	.word	0x000011dd
    41b8:	0000105d 	.word	0x0000105d

000041bc <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    41bc:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    41be:	4802      	ldr	r0, [pc, #8]	; (41c8 <SleepTimerGetElapsedTime+0xc>)
    41c0:	4b02      	ldr	r3, [pc, #8]	; (41cc <SleepTimerGetElapsedTime+0x10>)
    41c2:	4798      	blx	r3
}
    41c4:	bd10      	pop	{r4, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	20001034 	.word	0x20001034
    41cc:	0000114d 	.word	0x0000114d

000041d0 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	0005      	movs	r5, r0
    41d4:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    41d6:	4c0a      	ldr	r4, [pc, #40]	; (4200 <SleepTimerStart+0x30>)
    41d8:	2100      	movs	r1, #0
    41da:	0020      	movs	r0, r4
    41dc:	4b09      	ldr	r3, [pc, #36]	; (4204 <SleepTimerStart+0x34>)
    41de:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    41e0:	2208      	movs	r2, #8
    41e2:	0031      	movs	r1, r6
    41e4:	0020      	movs	r0, r4
    41e6:	4b08      	ldr	r3, [pc, #32]	; (4208 <SleepTimerStart+0x38>)
    41e8:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    41ea:	2200      	movs	r2, #0
    41ec:	0029      	movs	r1, r5
    41ee:	0020      	movs	r0, r4
    41f0:	4b06      	ldr	r3, [pc, #24]	; (420c <SleepTimerStart+0x3c>)
    41f2:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    41f4:	2108      	movs	r1, #8
    41f6:	0020      	movs	r0, r4
    41f8:	4b05      	ldr	r3, [pc, #20]	; (4210 <SleepTimerStart+0x40>)
    41fa:	4798      	blx	r3
}
    41fc:	bd70      	pop	{r4, r5, r6, pc}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	20001034 	.word	0x20001034
    4204:	00001109 	.word	0x00001109
    4208:	00001279 	.word	0x00001279
    420c:	00001179 	.word	0x00001179
    4210:	000012b5 	.word	0x000012b5

00004214 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    4214:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    4216:	2108      	movs	r1, #8
    4218:	4801      	ldr	r0, [pc, #4]	; (4220 <SleepTimerStop+0xc>)
    421a:	4b02      	ldr	r3, [pc, #8]	; (4224 <SleepTimerStop+0x10>)
    421c:	4798      	blx	r3
}
    421e:	bd10      	pop	{r4, pc}
    4220:	20001034 	.word	0x20001034
    4224:	000012f9 	.word	0x000012f9

00004228 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    4228:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    422a:	2800      	cmp	r0, #0
    422c:	d103      	bne.n	4236 <SystemBlockingWaitMs+0xe>
    422e:	2001      	movs	r0, #1
    4230:	4b02      	ldr	r3, [pc, #8]	; (423c <SystemBlockingWaitMs+0x14>)
    4232:	4798      	blx	r3
#endif
}
    4234:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    4236:	4b02      	ldr	r3, [pc, #8]	; (4240 <SystemBlockingWaitMs+0x18>)
    4238:	4798      	blx	r3
    423a:	e7fb      	b.n	4234 <SystemBlockingWaitMs+0xc>
    423c:	00000155 	.word	0x00000155
    4240:	00000181 	.word	0x00000181

00004244 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    4244:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    4246:	4b01      	ldr	r3, [pc, #4]	; (424c <system_enter_critical_section+0x8>)
    4248:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    424a:	bd10      	pop	{r4, pc}
    424c:	000001ad 	.word	0x000001ad

00004250 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    4250:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    4252:	4b01      	ldr	r3, [pc, #4]	; (4258 <system_leave_critical_section+0x8>)
    4254:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    4256:	bd10      	pop	{r4, pc}
    4258:	000001ed 	.word	0x000001ed

0000425c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    425c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    425e:	4b16      	ldr	r3, [pc, #88]	; (42b8 <PMM_Wakeup+0x5c>)
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	2b01      	cmp	r3, #1
    4264:	d000      	beq.n	4268 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    4266:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    4268:	2200      	movs	r2, #0
    426a:	4b13      	ldr	r3, [pc, #76]	; (42b8 <PMM_Wakeup+0x5c>)
    426c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    426e:	4b13      	ldr	r3, [pc, #76]	; (42bc <PMM_Wakeup+0x60>)
    4270:	4798      	blx	r3
    4272:	4b13      	ldr	r3, [pc, #76]	; (42c0 <PMM_Wakeup+0x64>)
    4274:	4798      	blx	r3
    4276:	4913      	ldr	r1, [pc, #76]	; (42c4 <PMM_Wakeup+0x68>)
    4278:	4b13      	ldr	r3, [pc, #76]	; (42c8 <PMM_Wakeup+0x6c>)
    427a:	4798      	blx	r3
    427c:	4b13      	ldr	r3, [pc, #76]	; (42cc <PMM_Wakeup+0x70>)
    427e:	4798      	blx	r3
    4280:	0004      	movs	r4, r0
    4282:	000d      	movs	r5, r1
        SleepTimerStop();
    4284:	4b12      	ldr	r3, [pc, #72]	; (42d0 <PMM_Wakeup+0x74>)
    4286:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    4288:	0020      	movs	r0, r4
    428a:	0029      	movs	r1, r5
    428c:	4b11      	ldr	r3, [pc, #68]	; (42d4 <PMM_Wakeup+0x78>)
    428e:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    4290:	4b11      	ldr	r3, [pc, #68]	; (42d8 <PMM_Wakeup+0x7c>)
    4292:	681b      	ldr	r3, [r3, #0]
    4294:	2b00      	cmp	r3, #0
    4296:	d0e6      	beq.n	4266 <PMM_Wakeup+0xa>
    4298:	689e      	ldr	r6, [r3, #8]
    429a:	2e00      	cmp	r6, #0
    429c:	d0e3      	beq.n	4266 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    429e:	22fa      	movs	r2, #250	; 0xfa
    42a0:	0092      	lsls	r2, r2, #2
    42a2:	2300      	movs	r3, #0
    42a4:	0020      	movs	r0, r4
    42a6:	0029      	movs	r1, r5
    42a8:	4c0c      	ldr	r4, [pc, #48]	; (42dc <PMM_Wakeup+0x80>)
    42aa:	47a0      	blx	r4
    42ac:	47b0      	blx	r6
            sleepReq = NULL;
    42ae:	2200      	movs	r2, #0
    42b0:	4b09      	ldr	r3, [pc, #36]	; (42d8 <PMM_Wakeup+0x7c>)
    42b2:	601a      	str	r2, [r3, #0]
}
    42b4:	e7d7      	b.n	4266 <PMM_Wakeup+0xa>
    42b6:	46c0      	nop			; (mov r8, r8)
    42b8:	20000b1c 	.word	0x20000b1c
    42bc:	000041bd 	.word	0x000041bd
    42c0:	00011cfd 	.word	0x00011cfd
    42c4:	41f423d7 	.word	0x41f423d7
    42c8:	000116a5 	.word	0x000116a5
    42cc:	00010de1 	.word	0x00010de1
    42d0:	00004215 	.word	0x00004215
    42d4:	00009dd5 	.word	0x00009dd5
    42d8:	20000b20 	.word	0x20000b20
    42dc:	00010d1d 	.word	0x00010d1d

000042e0 <PMM_Sleep>:
{
    42e0:	b570      	push	{r4, r5, r6, lr}
    42e2:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    42e4:	d059      	beq.n	439a <PMM_Sleep+0xba>
    42e6:	4b33      	ldr	r3, [pc, #204]	; (43b4 <PMM_Sleep+0xd4>)
    42e8:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    42ea:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    42ec:	2b00      	cmp	r3, #0
    42ee:	d000      	beq.n	42f2 <PMM_Sleep+0x12>
}
    42f0:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    42f2:	4b31      	ldr	r3, [pc, #196]	; (43b8 <PMM_Sleep+0xd8>)
    42f4:	4798      	blx	r3
    42f6:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    42f8:	d051      	beq.n	439e <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    42fa:	682b      	ldr	r3, [r5, #0]
    42fc:	4a2f      	ldr	r2, [pc, #188]	; (43bc <PMM_Sleep+0xdc>)
    42fe:	4694      	mov	ip, r2
    4300:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    4302:	2400      	movs	r4, #0
    4304:	4a2e      	ldr	r2, [pc, #184]	; (43c0 <PMM_Sleep+0xe0>)
    4306:	429a      	cmp	r2, r3
    4308:	4164      	adcs	r4, r4
    430a:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    430c:	792a      	ldrb	r2, [r5, #4]
    430e:	2a02      	cmp	r2, #2
    4310:	d01e      	beq.n	4350 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    4312:	2a01      	cmp	r2, #1
    4314:	d029      	beq.n	436a <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    4316:	2601      	movs	r6, #1
    4318:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    431a:	2000      	movs	r0, #0
        if ( canSleep )
    431c:	2c00      	cmp	r4, #0
    431e:	d0e7      	beq.n	42f0 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    4320:	4b28      	ldr	r3, [pc, #160]	; (43c4 <PMM_Sleep+0xe4>)
    4322:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    4324:	0030      	movs	r0, r6
    4326:	380a      	subs	r0, #10
    4328:	4b27      	ldr	r3, [pc, #156]	; (43c8 <PMM_Sleep+0xe8>)
    432a:	4798      	blx	r3
    432c:	4927      	ldr	r1, [pc, #156]	; (43cc <PMM_Sleep+0xec>)
    432e:	4b28      	ldr	r3, [pc, #160]	; (43d0 <PMM_Sleep+0xf0>)
    4330:	4798      	blx	r3
    4332:	4b28      	ldr	r3, [pc, #160]	; (43d4 <PMM_Sleep+0xf4>)
    4334:	4798      	blx	r3
    4336:	4928      	ldr	r1, [pc, #160]	; (43d8 <PMM_Sleep+0xf8>)
    4338:	4b28      	ldr	r3, [pc, #160]	; (43dc <PMM_Sleep+0xfc>)
    433a:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    433c:	2201      	movs	r2, #1
    433e:	4b1d      	ldr	r3, [pc, #116]	; (43b4 <PMM_Sleep+0xd4>)
    4340:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    4342:	4b27      	ldr	r3, [pc, #156]	; (43e0 <PMM_Sleep+0x100>)
    4344:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    4346:	7928      	ldrb	r0, [r5, #4]
    4348:	4b26      	ldr	r3, [pc, #152]	; (43e4 <PMM_Sleep+0x104>)
    434a:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    434c:	2001      	movs	r0, #1
    434e:	e7cf      	b.n	42f0 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    4350:	4a1b      	ldr	r2, [pc, #108]	; (43c0 <PMM_Sleep+0xe0>)
    4352:	2400      	movs	r4, #0
    4354:	4293      	cmp	r3, r2
    4356:	d806      	bhi.n	4366 <PMM_Sleep+0x86>
    4358:	4b23      	ldr	r3, [pc, #140]	; (43e8 <PMM_Sleep+0x108>)
    435a:	4798      	blx	r3
    435c:	3001      	adds	r0, #1
    435e:	4244      	negs	r4, r0
    4360:	4144      	adcs	r4, r0
    4362:	e000      	b.n	4366 <PMM_Sleep+0x86>
    4364:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    4366:	682e      	ldr	r6, [r5, #0]
    4368:	e7d7      	b.n	431a <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    436a:	4b1f      	ldr	r3, [pc, #124]	; (43e8 <PMM_Sleep+0x108>)
    436c:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    436e:	1c43      	adds	r3, r0, #1
    4370:	d01c      	beq.n	43ac <PMM_Sleep+0xcc>
    4372:	21fa      	movs	r1, #250	; 0xfa
    4374:	0089      	lsls	r1, r1, #2
    4376:	4b1d      	ldr	r3, [pc, #116]	; (43ec <PMM_Sleep+0x10c>)
    4378:	4798      	blx	r3
    437a:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    437c:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    437e:	2c00      	cmp	r4, #0
    4380:	d0b6      	beq.n	42f0 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    4382:	490f      	ldr	r1, [pc, #60]	; (43c0 <PMM_Sleep+0xe0>)
    4384:	4a0d      	ldr	r2, [pc, #52]	; (43bc <PMM_Sleep+0xdc>)
    4386:	189a      	adds	r2, r3, r2
    4388:	428a      	cmp	r2, r1
    438a:	d8b1      	bhi.n	42f0 <PMM_Sleep+0x10>
    438c:	682e      	ldr	r6, [r5, #0]
    438e:	429e      	cmp	r6, r3
    4390:	d9c6      	bls.n	4320 <PMM_Sleep+0x40>
    4392:	001e      	movs	r6, r3
    4394:	e7c4      	b.n	4320 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    4396:	4b16      	ldr	r3, [pc, #88]	; (43f0 <PMM_Sleep+0x110>)
    4398:	e7f8      	b.n	438c <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    439a:	2000      	movs	r0, #0
    439c:	e7a8      	b.n	42f0 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    439e:	792b      	ldrb	r3, [r5, #4]
    43a0:	2b02      	cmp	r3, #2
    43a2:	d0df      	beq.n	4364 <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    43a4:	2b01      	cmp	r3, #1
    43a6:	d0e0      	beq.n	436a <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    43a8:	2000      	movs	r0, #0
    return status;
    43aa:	e7a1      	b.n	42f0 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    43ac:	2c00      	cmp	r4, #0
    43ae:	d1f2      	bne.n	4396 <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    43b0:	4e0f      	ldr	r6, [pc, #60]	; (43f0 <PMM_Sleep+0x110>)
    43b2:	e7b2      	b.n	431a <PMM_Sleep+0x3a>
    43b4:	20000b1c 	.word	0x20000b1c
    43b8:	00009f3d 	.word	0x00009f3d
    43bc:	fffffc18 	.word	0xfffffc18
    43c0:	07cebbc8 	.word	0x07cebbc8
    43c4:	00009da1 	.word	0x00009da1
    43c8:	00011cfd 	.word	0x00011cfd
    43cc:	42031375 	.word	0x42031375
    43d0:	000116a5 	.word	0x000116a5
    43d4:	00010db1 	.word	0x00010db1
    43d8:	0000425d 	.word	0x0000425d
    43dc:	000041d1 	.word	0x000041d1
    43e0:	20000b20 	.word	0x20000b20
    43e4:	00004141 	.word	0x00004141
    43e8:	00009add 	.word	0x00009add
    43ec:	000109bd 	.word	0x000109bd
    43f0:	07cebfb0 	.word	0x07cebfb0

000043f4 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    43f4:	4770      	bx	lr
	...

000043f8 <LORAReg_InitAS>:
{
    43f8:	b530      	push	{r4, r5, lr}
    43fa:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    43fc:	4b76      	ldr	r3, [pc, #472]	; (45d8 <LORAReg_InitAS+0x1e0>)
    43fe:	2203      	movs	r2, #3
    4400:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    4402:	2110      	movs	r1, #16
    4404:	321f      	adds	r2, #31
    4406:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    4408:	3a21      	subs	r2, #33	; 0x21
    440a:	2421      	movs	r4, #33	; 0x21
    440c:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    440e:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4410:	001a      	movs	r2, r3
    4412:	326c      	adds	r2, #108	; 0x6c
    4414:	711a      	strb	r2, [r3, #4]
    4416:	0a14      	lsrs	r4, r2, #8
    4418:	715c      	strb	r4, [r3, #5]
    441a:	0c14      	lsrs	r4, r2, #16
    441c:	719c      	strb	r4, [r3, #6]
    441e:	0e12      	lsrs	r2, r2, #24
    4420:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4422:	001a      	movs	r2, r3
    4424:	322c      	adds	r2, #44	; 0x2c
    4426:	701a      	strb	r2, [r3, #0]
    4428:	0a14      	lsrs	r4, r2, #8
    442a:	705c      	strb	r4, [r3, #1]
    442c:	0c14      	lsrs	r4, r2, #16
    442e:	709c      	strb	r4, [r3, #2]
    4430:	0e12      	lsrs	r2, r2, #24
    4432:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4434:	001a      	movs	r2, r3
    4436:	328c      	adds	r2, #140	; 0x8c
    4438:	721a      	strb	r2, [r3, #8]
    443a:	0a14      	lsrs	r4, r2, #8
    443c:	725c      	strb	r4, [r3, #9]
    443e:	0c14      	lsrs	r4, r2, #16
    4440:	729c      	strb	r4, [r3, #10]
    4442:	0e12      	lsrs	r2, r2, #24
    4444:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4446:	001a      	movs	r2, r3
    4448:	324d      	adds	r2, #77	; 0x4d
    444a:	32ff      	adds	r2, #255	; 0xff
    444c:	741a      	strb	r2, [r3, #16]
    444e:	0a14      	lsrs	r4, r2, #8
    4450:	745c      	strb	r4, [r3, #17]
    4452:	0c14      	lsrs	r4, r2, #16
    4454:	749c      	strb	r4, [r3, #18]
    4456:	0e12      	lsrs	r2, r2, #24
    4458:	74da      	strb	r2, [r3, #19]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    445a:	001a      	movs	r2, r3
    445c:	32ad      	adds	r2, #173	; 0xad
    445e:	32ff      	adds	r2, #255	; 0xff
    4460:	731a      	strb	r2, [r3, #12]
    4462:	0a14      	lsrs	r4, r2, #8
    4464:	735c      	strb	r4, [r3, #13]
    4466:	0c14      	lsrs	r4, r2, #16
    4468:	739c      	strb	r4, [r3, #14]
    446a:	0e12      	lsrs	r2, r2, #24
    446c:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    446e:	2202      	movs	r2, #2
    4470:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    4472:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    4474:	2400      	movs	r4, #0
    4476:	751c      	strb	r4, [r3, #20]
    4478:	3c16      	subs	r4, #22
    447a:	755c      	strb	r4, [r3, #21]
    447c:	341c      	adds	r4, #28
    447e:	759c      	strb	r4, [r3, #22]
    4480:	3431      	adds	r4, #49	; 0x31
    4482:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    4484:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    4486:	3c25      	subs	r4, #37	; 0x25
    4488:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    448a:	3c0b      	subs	r4, #11
    448c:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    448e:	2500      	movs	r5, #0
    4490:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 7;
    4492:	3524      	adds	r5, #36	; 0x24
    4494:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    4496:	3501      	adds	r5, #1
    4498:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwr = 16;
    449a:	3419      	adds	r4, #25
    449c:	5519      	strb	r1, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    449e:	21aa      	movs	r1, #170	; 0xaa
    44a0:	31ff      	adds	r1, #255	; 0xff
    44a2:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    44a4:	4a4d      	ldr	r2, [pc, #308]	; (45dc <LORAReg_InitAS+0x1e4>)
    44a6:	7811      	ldrb	r1, [r2, #0]
    44a8:	22a8      	movs	r2, #168	; 0xa8
    44aa:	0052      	lsls	r2, r2, #1
    44ac:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    44ae:	3a2b      	subs	r2, #43	; 0x2b
    44b0:	3aff      	subs	r2, #255	; 0xff
    44b2:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    44b4:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    44b6:	3c16      	subs	r4, #22
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    44b8:	2808      	cmp	r0, #8
    44ba:	d91c      	bls.n	44f6 <LORAReg_InitAS+0xfe>
	if(!initialized)
    44bc:	4b48      	ldr	r3, [pc, #288]	; (45e0 <LORAReg_InitAS+0x1e8>)
    44be:	781b      	ldrb	r3, [r3, #0]
    44c0:	2b00      	cmp	r3, #0
    44c2:	d102      	bne.n	44ca <LORAReg_InitAS+0xd2>
		initialized = true;
    44c4:	2201      	movs	r2, #1
    44c6:	4b46      	ldr	r3, [pc, #280]	; (45e0 <LORAReg_InitAS+0x1e8>)
    44c8:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    44ca:	4b46      	ldr	r3, [pc, #280]	; (45e4 <LORAReg_InitAS+0x1ec>)
    44cc:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    44ce:	4b46      	ldr	r3, [pc, #280]	; (45e8 <LORAReg_InitAS+0x1f0>)
    44d0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    44d2:	4b46      	ldr	r3, [pc, #280]	; (45ec <LORAReg_InitAS+0x1f4>)
    44d4:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    44d6:	4b40      	ldr	r3, [pc, #256]	; (45d8 <LORAReg_InitAS+0x1e0>)
    44d8:	22fc      	movs	r2, #252	; 0xfc
    44da:	32ff      	adds	r2, #255	; 0xff
    44dc:	5c9a      	ldrb	r2, [r3, r2]
    44de:	21fe      	movs	r1, #254	; 0xfe
    44e0:	0049      	lsls	r1, r1, #1
    44e2:	5c58      	ldrb	r0, [r3, r1]
    44e4:	0200      	lsls	r0, r0, #8
    44e6:	4310      	orrs	r0, r2
    44e8:	b2c1      	uxtb	r1, r0
    44ea:	0a00      	lsrs	r0, r0, #8
    44ec:	4b40      	ldr	r3, [pc, #256]	; (45f0 <LORAReg_InitAS+0x1f8>)
    44ee:	4798      	blx	r3
}
    44f0:	0020      	movs	r0, r4
    44f2:	b007      	add	sp, #28
    44f4:	bd30      	pop	{r4, r5, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    44f6:	001c      	movs	r4, r3
    44f8:	0018      	movs	r0, r3
    44fa:	306c      	adds	r0, #108	; 0x6c
    44fc:	3a22      	subs	r2, #34	; 0x22
    44fe:	493d      	ldr	r1, [pc, #244]	; (45f4 <LORAReg_InitAS+0x1fc>)
    4500:	4d3d      	ldr	r5, [pc, #244]	; (45f8 <LORAReg_InitAS+0x200>)
    4502:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    4504:	0020      	movs	r0, r4
    4506:	308c      	adds	r0, #140	; 0x8c
    4508:	2218      	movs	r2, #24
    450a:	493c      	ldr	r1, [pc, #240]	; (45fc <LORAReg_InitAS+0x204>)
    450c:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    450e:	0020      	movs	r0, r4
    4510:	30ad      	adds	r0, #173	; 0xad
    4512:	30ff      	adds	r0, #255	; 0xff
    4514:	220c      	movs	r2, #12
    4516:	493a      	ldr	r1, [pc, #232]	; (4600 <LORAReg_InitAS+0x208>)
    4518:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    451a:	0020      	movs	r0, r4
    451c:	3097      	adds	r0, #151	; 0x97
    451e:	30ff      	adds	r0, #255	; 0xff
    4520:	2202      	movs	r2, #2
    4522:	4938      	ldr	r1, [pc, #224]	; (4604 <LORAReg_InitAS+0x20c>)
    4524:	47a8      	blx	r5
    4526:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4528:	482b      	ldr	r0, [pc, #172]	; (45d8 <LORAReg_InitAS+0x1e0>)
    452a:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    452c:	2422      	movs	r4, #34	; 0x22
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    452e:	7902      	ldrb	r2, [r0, #4]
    4530:	7941      	ldrb	r1, [r0, #5]
    4532:	0209      	lsls	r1, r1, #8
    4534:	4311      	orrs	r1, r2
    4536:	7982      	ldrb	r2, [r0, #6]
    4538:	0412      	lsls	r2, r2, #16
    453a:	4311      	orrs	r1, r2
    453c:	79c2      	ldrb	r2, [r0, #7]
    453e:	0612      	lsls	r2, r2, #24
    4540:	430a      	orrs	r2, r1
    4542:	0059      	lsls	r1, r3, #1
    4544:	188a      	adds	r2, r1, r2
    4546:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    4548:	3301      	adds	r3, #1
    454a:	b2db      	uxtb	r3, r3
    454c:	5702      	ldrsb	r2, [r0, r4]
    454e:	4293      	cmp	r3, r2
    4550:	dbed      	blt.n	452e <LORAReg_InitAS+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    4552:	4c21      	ldr	r4, [pc, #132]	; (45d8 <LORAReg_InitAS+0x1e0>)
    4554:	2210      	movs	r2, #16
    4556:	23d5      	movs	r3, #213	; 0xd5
    4558:	005b      	lsls	r3, r3, #1
    455a:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    455c:	7820      	ldrb	r0, [r4, #0]
    455e:	7863      	ldrb	r3, [r4, #1]
    4560:	021b      	lsls	r3, r3, #8
    4562:	4303      	orrs	r3, r0
    4564:	78a0      	ldrb	r0, [r4, #2]
    4566:	0400      	lsls	r0, r0, #16
    4568:	4303      	orrs	r3, r0
    456a:	78e0      	ldrb	r0, [r4, #3]
    456c:	0600      	lsls	r0, r0, #24
    456e:	4318      	orrs	r0, r3
    4570:	3230      	adds	r2, #48	; 0x30
    4572:	4925      	ldr	r1, [pc, #148]	; (4608 <LORAReg_InitAS+0x210>)
    4574:	4b20      	ldr	r3, [pc, #128]	; (45f8 <LORAReg_InitAS+0x200>)
    4576:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    4578:	2304      	movs	r3, #4
    457a:	2104      	movs	r1, #4
    457c:	22fa      	movs	r2, #250	; 0xfa
    457e:	0052      	lsls	r2, r2, #1
    4580:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4582:	2100      	movs	r1, #0
    4584:	22f6      	movs	r2, #246	; 0xf6
    4586:	32ff      	adds	r2, #255	; 0xff
    4588:	54a1      	strb	r1, [r4, r2]
    458a:	0022      	movs	r2, r4
    458c:	32f6      	adds	r2, #246	; 0xf6
    458e:	32ff      	adds	r2, #255	; 0xff
    4590:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    4592:	22f8      	movs	r2, #248	; 0xf8
    4594:	32ff      	adds	r2, #255	; 0xff
    4596:	54a1      	strb	r1, [r4, r2]
    4598:	0022      	movs	r2, r4
    459a:	32f8      	adds	r2, #248	; 0xf8
    459c:	32ff      	adds	r2, #255	; 0xff
    459e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    45a0:	3101      	adds	r1, #1
    45a2:	22fa      	movs	r2, #250	; 0xfa
    45a4:	32ff      	adds	r2, #255	; 0xff
    45a6:	54a1      	strb	r1, [r4, r2]
    45a8:	0022      	movs	r2, r4
    45aa:	32fa      	adds	r2, #250	; 0xfa
    45ac:	32ff      	adds	r2, #255	; 0xff
    45ae:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    45b0:	3101      	adds	r1, #1
    45b2:	22fc      	movs	r2, #252	; 0xfc
    45b4:	32ff      	adds	r2, #255	; 0xff
    45b6:	54a1      	strb	r1, [r4, r2]
    45b8:	18a4      	adds	r4, r4, r2
    45ba:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    45bc:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    45be:	3af9      	subs	r2, #249	; 0xf9
    45c0:	3aff      	subs	r2, #255	; 0xff
    45c2:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    45c4:	4a11      	ldr	r2, [pc, #68]	; (460c <LORAReg_InitAS+0x214>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    45c6:	9200      	str	r2, [sp, #0]
    45c8:	4911      	ldr	r1, [pc, #68]	; (4610 <LORAReg_InitAS+0x218>)
    45ca:	9a03      	ldr	r2, [sp, #12]
    45cc:	4b11      	ldr	r3, [pc, #68]	; (4614 <LORAReg_InitAS+0x21c>)
    45ce:	2004      	movs	r0, #4
    45d0:	4c11      	ldr	r4, [pc, #68]	; (4618 <LORAReg_InitAS+0x220>)
    45d2:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    45d4:	2408      	movs	r4, #8
    45d6:	e771      	b.n	44bc <LORAReg_InitAS+0xc4>
    45d8:	20001290 	.word	0x20001290
    45dc:	2000128c 	.word	0x2000128c
    45e0:	20000b24 	.word	0x20000b24
    45e4:	000080d9 	.word	0x000080d9
    45e8:	000087c5 	.word	0x000087c5
    45ec:	00008a3d 	.word	0x00008a3d
    45f0:	00008e5d 	.word	0x00008e5d
    45f4:	0001a528 	.word	0x0001a528
    45f8:	00013ba5 	.word	0x00013ba5
    45fc:	0001a510 	.word	0x0001a510
    4600:	0001a570 	.word	0x0001a570
    4604:	0001a56c 	.word	0x0001a56c
    4608:	0001a52c 	.word	0x0001a52c
    460c:	000043f5 	.word	0x000043f5
    4610:	2000106c 	.word	0x2000106c
    4614:	0001a57c 	.word	0x0001a57c
    4618:	00008ec1 	.word	0x00008ec1

0000461c <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    461c:	4770      	bx	lr
	...

00004620 <LORAReg_InitAU>:
{
    4620:	b5f0      	push	{r4, r5, r6, r7, lr}
    4622:	46de      	mov	lr, fp
    4624:	4657      	mov	r7, sl
    4626:	464e      	mov	r6, r9
    4628:	4645      	mov	r5, r8
    462a:	b5e0      	push	{r5, r6, r7, lr}
    462c:	b087      	sub	sp, #28
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    462e:	4c65      	ldr	r4, [pc, #404]	; (47c4 <LORAReg_InitAU+0x1a4>)
    4630:	2303      	movs	r3, #3
    4632:	77a3      	strb	r3, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_AU;
    4634:	2248      	movs	r2, #72	; 0x48
    4636:	331f      	adds	r3, #31
    4638:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    463a:	3b1b      	subs	r3, #27
    463c:	77e3      	strb	r3, [r4, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    463e:	0023      	movs	r3, r4
    4640:	339c      	adds	r3, #156	; 0x9c
    4642:	2200      	movs	r2, #0
    4644:	4690      	mov	r8, r2
    4646:	7123      	strb	r3, [r4, #4]
    4648:	0a1a      	lsrs	r2, r3, #8
    464a:	7162      	strb	r2, [r4, #5]
    464c:	0c1a      	lsrs	r2, r3, #16
    464e:	71a2      	strb	r2, [r4, #6]
    4650:	0e1a      	lsrs	r2, r3, #24
    4652:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    4654:	0026      	movs	r6, r4
    4656:	362c      	adds	r6, #44	; 0x2c
    4658:	7026      	strb	r6, [r4, #0]
    465a:	0a32      	lsrs	r2, r6, #8
    465c:	7062      	strb	r2, [r4, #1]
    465e:	0c32      	lsrs	r2, r6, #16
    4660:	70a2      	strb	r2, [r4, #2]
    4662:	0e32      	lsrs	r2, r6, #24
    4664:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    4666:	22ff      	movs	r2, #255	; 0xff
    4668:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    466a:	2508      	movs	r5, #8
    466c:	2708      	movs	r7, #8
    466e:	76a5      	strb	r5, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    4670:	76e5      	strb	r5, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    4672:	3a60      	subs	r2, #96	; 0x60
    4674:	3aff      	subs	r2, #255	; 0xff
    4676:	4692      	mov	sl, r2
    4678:	7522      	strb	r2, [r4, #20]
    467a:	2270      	movs	r2, #112	; 0x70
    467c:	7562      	strb	r2, [r4, #21]
    467e:	75a7      	strb	r7, [r4, #22]
    4680:	3a39      	subs	r2, #57	; 0x39
    4682:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    4684:	3a1f      	subs	r2, #31
    4686:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    4688:	3a12      	subs	r2, #18
    468a:	4693      	mov	fp, r2
    468c:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    468e:	4641      	mov	r1, r8
    4690:	7761      	strb	r1, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU;
    4692:	2140      	movs	r1, #64	; 0x40
    4694:	4689      	mov	r9, r1
    4696:	31fc      	adds	r1, #252	; 0xfc
    4698:	464a      	mov	r2, r9
    469a:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU;
    469c:	223e      	movs	r2, #62	; 0x3e
    469e:	32ff      	adds	r2, #255	; 0xff
    46a0:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    46a2:	3a05      	subs	r2, #5
    46a4:	4641      	mov	r1, r8
    46a6:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    46a8:	223a      	movs	r2, #58	; 0x3a
    46aa:	32ff      	adds	r2, #255	; 0xff
    46ac:	4659      	mov	r1, fp
    46ae:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    46b0:	3201      	adds	r2, #1
    46b2:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    46b4:	3a2e      	subs	r2, #46	; 0x2e
    46b6:	3aff      	subs	r2, #255	; 0xff
    46b8:	4694      	mov	ip, r2
    46ba:	223c      	movs	r2, #60	; 0x3c
    46bc:	32ff      	adds	r2, #255	; 0xff
    46be:	4661      	mov	r1, ip
    46c0:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    46c2:	3203      	adds	r2, #3
    46c4:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    46c6:	2200      	movs	r2, #0
    46c8:	4694      	mov	ip, r2
    46ca:	322d      	adds	r2, #45	; 0x2d
    46cc:	32ff      	adds	r2, #255	; 0xff
    46ce:	4661      	mov	r1, ip
    46d0:	54a1      	strb	r1, [r4, r2]
    46d2:	0022      	movs	r2, r4
    46d4:	322d      	adds	r2, #45	; 0x2d
    46d6:	32ff      	adds	r2, #255	; 0xff
    46d8:	2128      	movs	r1, #40	; 0x28
    46da:	4249      	negs	r1, r1
    46dc:	7051      	strb	r1, [r2, #1]
    46de:	2174      	movs	r1, #116	; 0x74
    46e0:	4249      	negs	r1, r1
    46e2:	7091      	strb	r1, [r2, #2]
    46e4:	2136      	movs	r1, #54	; 0x36
    46e6:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    46e8:	2260      	movs	r2, #96	; 0x60
    46ea:	4694      	mov	ip, r2
    46ec:	32d0      	adds	r2, #208	; 0xd0
    46ee:	4661      	mov	r1, ip
    46f0:	54a1      	strb	r1, [r4, r2]
    46f2:	0022      	movs	r2, r4
    46f4:	3231      	adds	r2, #49	; 0x31
    46f6:	32ff      	adds	r2, #255	; 0xff
    46f8:	217a      	movs	r1, #122	; 0x7a
    46fa:	4249      	negs	r1, r1
    46fc:	7051      	strb	r1, [r2, #1]
    46fe:	2169      	movs	r1, #105	; 0x69
    4700:	4249      	negs	r1, r1
    4702:	7091      	strb	r1, [r2, #2]
    4704:	2136      	movs	r1, #54	; 0x36
    4706:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    4708:	229a      	movs	r2, #154	; 0x9a
    470a:	0052      	lsls	r2, r2, #1
    470c:	4651      	mov	r1, sl
    470e:	54a1      	strb	r1, [r4, r2]
    4710:	0022      	movs	r2, r4
    4712:	3235      	adds	r2, #53	; 0x35
    4714:	32ff      	adds	r2, #255	; 0xff
    4716:	2170      	movs	r1, #112	; 0x70
    4718:	7051      	strb	r1, [r2, #1]
    471a:	7097      	strb	r7, [r2, #2]
    471c:	2137      	movs	r1, #55	; 0x37
    471e:	70d1      	strb	r1, [r2, #3]
	RegParams.Rx1DrOffset = 5;
    4720:	2105      	movs	r1, #5
    4722:	2224      	movs	r2, #36	; 0x24
    4724:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    4726:	3105      	adds	r1, #5
    4728:	3201      	adds	r2, #1
    472a:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwr = 30;
    472c:	3114      	adds	r1, #20
    472e:	3a05      	subs	r2, #5
    4730:	54a1      	strb	r1, [r4, r2]
	RegParams.band = ismBand;
    4732:	3206      	adds	r2, #6
    4734:	54a0      	strb	r0, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    4736:	326a      	adds	r2, #106	; 0x6a
    4738:	4923      	ldr	r1, [pc, #140]	; (47c8 <LORAReg_InitAU+0x1a8>)
    473a:	0018      	movs	r0, r3
    473c:	4b23      	ldr	r3, [pc, #140]	; (47cc <LORAReg_InitAU+0x1ac>)
    473e:	4699      	mov	r9, r3
    4740:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    4742:	2270      	movs	r2, #112	; 0x70
    4744:	4922      	ldr	r1, [pc, #136]	; (47d0 <LORAReg_InitAU+0x1b0>)
    4746:	0030      	movs	r0, r6
    4748:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    474a:	2340      	movs	r3, #64	; 0x40
    474c:	33ff      	adds	r3, #255	; 0xff
    474e:	4642      	mov	r2, r8
    4750:	54e2      	strb	r2, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    4752:	33b5      	adds	r3, #181	; 0xb5
    4754:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_AU_ALT_CH;
    4756:	2200      	movs	r2, #0
    4758:	23f6      	movs	r3, #246	; 0xf6
    475a:	33ff      	adds	r3, #255	; 0xff
    475c:	54e2      	strb	r2, [r4, r3]
    475e:	0023      	movs	r3, r4
    4760:	33f6      	adds	r3, #246	; 0xf6
    4762:	33ff      	adds	r3, #255	; 0xff
    4764:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    4766:	3201      	adds	r2, #1
    4768:	23f8      	movs	r3, #248	; 0xf8
    476a:	33ff      	adds	r3, #255	; 0xff
    476c:	54e2      	strb	r2, [r4, r3]
    476e:	0023      	movs	r3, r4
    4770:	33f8      	adds	r3, #248	; 0xf8
    4772:	33ff      	adds	r3, #255	; 0xff
    4774:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    4776:	2200      	movs	r2, #0
    4778:	23fa      	movs	r3, #250	; 0xfa
    477a:	33ff      	adds	r3, #255	; 0xff
    477c:	54e2      	strb	r2, [r4, r3]
    477e:	0023      	movs	r3, r4
    4780:	33fa      	adds	r3, #250	; 0xfa
    4782:	33ff      	adds	r3, #255	; 0xff
    4784:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    4786:	23fc      	movs	r3, #252	; 0xfc
    4788:	33ff      	adds	r3, #255	; 0xff
    478a:	54e2      	strb	r2, [r4, r3]
    478c:	18e4      	adds	r4, r4, r3
    478e:	2300      	movs	r3, #0
    4790:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    4792:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    4794:	3202      	adds	r2, #2
    4796:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    4798:	4a0e      	ldr	r2, [pc, #56]	; (47d4 <LORAReg_InitAU+0x1b4>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    479a:	9200      	str	r2, [sp, #0]
    479c:	490e      	ldr	r1, [pc, #56]	; (47d8 <LORAReg_InitAU+0x1b8>)
    479e:	9a03      	ldr	r2, [sp, #12]
    47a0:	4b0e      	ldr	r3, [pc, #56]	; (47dc <LORAReg_InitAU+0x1bc>)
    47a2:	2008      	movs	r0, #8
    47a4:	4c0e      	ldr	r4, [pc, #56]	; (47e0 <LORAReg_InitAU+0x1c0>)
    47a6:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    47a8:	4b0e      	ldr	r3, [pc, #56]	; (47e4 <LORAReg_InitAU+0x1c4>)
    47aa:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    47ac:	4b0e      	ldr	r3, [pc, #56]	; (47e8 <LORAReg_InitAU+0x1c8>)
    47ae:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    47b0:	4b0e      	ldr	r3, [pc, #56]	; (47ec <LORAReg_InitAU+0x1cc>)
    47b2:	4798      	blx	r3
}
    47b4:	2008      	movs	r0, #8
    47b6:	b007      	add	sp, #28
    47b8:	bc3c      	pop	{r2, r3, r4, r5}
    47ba:	4690      	mov	r8, r2
    47bc:	4699      	mov	r9, r3
    47be:	46a2      	mov	sl, r4
    47c0:	46ab      	mov	fp, r5
    47c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47c4:	20001290 	.word	0x20001290
    47c8:	0001a594 	.word	0x0001a594
    47cc:	00013ba5 	.word	0x00013ba5
    47d0:	0001a624 	.word	0x0001a624
    47d4:	0000461d 	.word	0x0000461d
    47d8:	20001070 	.word	0x20001070
    47dc:	0001a694 	.word	0x0001a694
    47e0:	00008ec1 	.word	0x00008ec1
    47e4:	00008215 	.word	0x00008215
    47e8:	00008831 	.word	0x00008831
    47ec:	00008a89 	.word	0x00008a89

000047f0 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    47f0:	4770      	bx	lr
	...

000047f4 <LORAReg_InitEU>:
{
    47f4:	b570      	push	{r4, r5, r6, lr}
    47f6:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    47f8:	4b8d      	ldr	r3, [pc, #564]	; (4a30 <LORAReg_InitEU+0x23c>)
    47fa:	2103      	movs	r1, #3
    47fc:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    47fe:	2410      	movs	r4, #16
    4800:	2222      	movs	r2, #34	; 0x22
    4802:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    4804:	2506      	movs	r5, #6
    4806:	3a01      	subs	r2, #1
    4808:	549d      	strb	r5, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    480a:	3a20      	subs	r2, #32
    480c:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    480e:	001a      	movs	r2, r3
    4810:	326c      	adds	r2, #108	; 0x6c
    4812:	711a      	strb	r2, [r3, #4]
    4814:	0a15      	lsrs	r5, r2, #8
    4816:	715d      	strb	r5, [r3, #5]
    4818:	0c15      	lsrs	r5, r2, #16
    481a:	719d      	strb	r5, [r3, #6]
    481c:	0e12      	lsrs	r2, r2, #24
    481e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4820:	001a      	movs	r2, r3
    4822:	322c      	adds	r2, #44	; 0x2c
    4824:	701a      	strb	r2, [r3, #0]
    4826:	0a15      	lsrs	r5, r2, #8
    4828:	705d      	strb	r5, [r3, #1]
    482a:	0c15      	lsrs	r5, r2, #16
    482c:	709d      	strb	r5, [r3, #2]
    482e:	0e12      	lsrs	r2, r2, #24
    4830:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4832:	001a      	movs	r2, r3
    4834:	32ad      	adds	r2, #173	; 0xad
    4836:	32ff      	adds	r2, #255	; 0xff
    4838:	731a      	strb	r2, [r3, #12]
    483a:	0a15      	lsrs	r5, r2, #8
    483c:	735d      	strb	r5, [r3, #13]
    483e:	0c15      	lsrs	r5, r2, #16
    4840:	739d      	strb	r5, [r3, #14]
    4842:	0e12      	lsrs	r2, r2, #24
    4844:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4846:	001a      	movs	r2, r3
    4848:	328c      	adds	r2, #140	; 0x8c
    484a:	721a      	strb	r2, [r3, #8]
    484c:	0a15      	lsrs	r5, r2, #8
    484e:	725d      	strb	r5, [r3, #9]
    4850:	0c15      	lsrs	r5, r2, #16
    4852:	729d      	strb	r5, [r3, #10]
    4854:	0e12      	lsrs	r2, r2, #24
    4856:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4858:	001a      	movs	r2, r3
    485a:	324d      	adds	r2, #77	; 0x4d
    485c:	32ff      	adds	r2, #255	; 0xff
    485e:	741a      	strb	r2, [r3, #16]
    4860:	0a15      	lsrs	r5, r2, #8
    4862:	745d      	strb	r5, [r3, #17]
    4864:	0c15      	lsrs	r5, r2, #16
    4866:	749d      	strb	r5, [r3, #18]
    4868:	0e12      	lsrs	r2, r2, #24
    486a:	74da      	strb	r2, [r3, #19]
	RegParams.MinNewChIndex = 3;
    486c:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    486e:	2202      	movs	r2, #2
    4870:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    4872:	3205      	adds	r2, #5
    4874:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    4876:	2500      	movs	r5, #0
    4878:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 5;
    487a:	2605      	movs	r6, #5
    487c:	3524      	adds	r5, #36	; 0x24
    487e:	555e      	strb	r6, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    4880:	3501      	adds	r5, #1
    4882:	555a      	strb	r2, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4884:	22aa      	movs	r2, #170	; 0xaa
    4886:	32ff      	adds	r2, #255	; 0xff
    4888:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 16;
    488a:	3a8a      	subs	r2, #138	; 0x8a
    488c:	3aff      	subs	r2, #255	; 0xff
    488e:	549c      	strb	r4, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    4890:	4a68      	ldr	r2, [pc, #416]	; (4a34 <LORAReg_InitEU+0x240>)
    4892:	7811      	ldrb	r1, [r2, #0]
    4894:	22a8      	movs	r2, #168	; 0xa8
    4896:	0052      	lsls	r2, r2, #1
    4898:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    489a:	3a2b      	subs	r2, #43	; 0x2b
    489c:	3aff      	subs	r2, #255	; 0xff
    489e:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    48a0:	2800      	cmp	r0, #0
    48a2:	d006      	beq.n	48b2 <LORAReg_InitEU+0xbe>
		return UNSUPPORTED_BAND;
    48a4:	23c8      	movs	r3, #200	; 0xc8
	else if(ismBand == ISM_EU433)
    48a6:	2801      	cmp	r0, #1
    48a8:	d100      	bne.n	48ac <LORAReg_InitEU+0xb8>
    48aa:	e08a      	b.n	49c2 <LORAReg_InitEU+0x1ce>
}
    48ac:	0018      	movs	r0, r3
    48ae:	b00a      	add	sp, #40	; 0x28
    48b0:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    48b2:	001c      	movs	r4, r3
    48b4:	0018      	movs	r0, r3
    48b6:	306c      	adds	r0, #108	; 0x6c
    48b8:	3a20      	subs	r2, #32
    48ba:	495f      	ldr	r1, [pc, #380]	; (4a38 <LORAReg_InitEU+0x244>)
    48bc:	4d5f      	ldr	r5, [pc, #380]	; (4a3c <LORAReg_InitEU+0x248>)
    48be:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    48c0:	0020      	movs	r0, r4
    48c2:	308c      	adds	r0, #140	; 0x8c
    48c4:	2224      	movs	r2, #36	; 0x24
    48c6:	495e      	ldr	r1, [pc, #376]	; (4a40 <LORAReg_InitEU+0x24c>)
    48c8:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    48ca:	0020      	movs	r0, r4
    48cc:	30ad      	adds	r0, #173	; 0xad
    48ce:	30ff      	adds	r0, #255	; 0xff
    48d0:	2248      	movs	r2, #72	; 0x48
    48d2:	495c      	ldr	r1, [pc, #368]	; (4a44 <LORAReg_InitEU+0x250>)
    48d4:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    48d6:	0020      	movs	r0, r4
    48d8:	3097      	adds	r0, #151	; 0x97
    48da:	30ff      	adds	r0, #255	; 0xff
    48dc:	220c      	movs	r2, #12
    48de:	495a      	ldr	r1, [pc, #360]	; (4a48 <LORAReg_InitEU+0x254>)
    48e0:	47a8      	blx	r5
    48e2:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    48e4:	4852      	ldr	r0, [pc, #328]	; (4a30 <LORAReg_InitEU+0x23c>)
    48e6:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    48e8:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    48ea:	7902      	ldrb	r2, [r0, #4]
    48ec:	7941      	ldrb	r1, [r0, #5]
    48ee:	0209      	lsls	r1, r1, #8
    48f0:	4311      	orrs	r1, r2
    48f2:	7982      	ldrb	r2, [r0, #6]
    48f4:	0412      	lsls	r2, r2, #16
    48f6:	4311      	orrs	r1, r2
    48f8:	79c2      	ldrb	r2, [r0, #7]
    48fa:	0612      	lsls	r2, r2, #24
    48fc:	430a      	orrs	r2, r1
    48fe:	0059      	lsls	r1, r3, #1
    4900:	188a      	adds	r2, r1, r2
    4902:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    4904:	3301      	adds	r3, #1
    4906:	b2db      	uxtb	r3, r3
    4908:	5702      	ldrsb	r2, [r0, r4]
    490a:	4293      	cmp	r3, r2
    490c:	dbed      	blt.n	48ea <LORAReg_InitEU+0xf6>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    490e:	4b48      	ldr	r3, [pc, #288]	; (4a30 <LORAReg_InitEU+0x23c>)
    4910:	2200      	movs	r2, #0
    4912:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    4914:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    4916:	3208      	adds	r2, #8
    4918:	751a      	strb	r2, [r3, #20]
    491a:	3a22      	subs	r2, #34	; 0x22
    491c:	755a      	strb	r2, [r3, #21]
    491e:	3a13      	subs	r2, #19
    4920:	759a      	strb	r2, [r3, #22]
    4922:	3260      	adds	r2, #96	; 0x60
    4924:	75da      	strb	r2, [r3, #23]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    4926:	2103      	movs	r1, #3
    4928:	32c2      	adds	r2, #194	; 0xc2
    492a:	32ff      	adds	r2, #255	; 0xff
    492c:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    492e:	2100      	movs	r1, #0
    4930:	22f6      	movs	r2, #246	; 0xf6
    4932:	32ff      	adds	r2, #255	; 0xff
    4934:	5499      	strb	r1, [r3, r2]
    4936:	001a      	movs	r2, r3
    4938:	32f6      	adds	r2, #246	; 0xf6
    493a:	32ff      	adds	r2, #255	; 0xff
    493c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    493e:	22f8      	movs	r2, #248	; 0xf8
    4940:	32ff      	adds	r2, #255	; 0xff
    4942:	5499      	strb	r1, [r3, r2]
    4944:	001a      	movs	r2, r3
    4946:	32f8      	adds	r2, #248	; 0xf8
    4948:	32ff      	adds	r2, #255	; 0xff
    494a:	2103      	movs	r1, #3
    494c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    494e:	2100      	movs	r1, #0
    4950:	22fa      	movs	r2, #250	; 0xfa
    4952:	32ff      	adds	r2, #255	; 0xff
    4954:	5499      	strb	r1, [r3, r2]
    4956:	001a      	movs	r2, r3
    4958:	32fa      	adds	r2, #250	; 0xfa
    495a:	32ff      	adds	r2, #255	; 0xff
    495c:	310b      	adds	r1, #11
    495e:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    4960:	2100      	movs	r1, #0
    4962:	22fc      	movs	r2, #252	; 0xfc
    4964:	32ff      	adds	r2, #255	; 0xff
    4966:	5499      	strb	r1, [r3, r2]
    4968:	189b      	adds	r3, r3, r2
    496a:	2200      	movs	r2, #0
    496c:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    496e:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    4970:	2601      	movs	r6, #1
    4972:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    4974:	4d35      	ldr	r5, [pc, #212]	; (4a4c <LORAReg_InitEU+0x258>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    4976:	9500      	str	r5, [sp, #0]
    4978:	4935      	ldr	r1, [pc, #212]	; (4a50 <LORAReg_InitEU+0x25c>)
    497a:	9a03      	ldr	r2, [sp, #12]
    497c:	4b35      	ldr	r3, [pc, #212]	; (4a54 <LORAReg_InitEU+0x260>)
    497e:	2003      	movs	r0, #3
    4980:	4c35      	ldr	r4, [pc, #212]	; (4a58 <LORAReg_InitEU+0x264>)
    4982:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    4984:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    4986:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    4988:	9500      	str	r5, [sp, #0]
    498a:	4934      	ldr	r1, [pc, #208]	; (4a5c <LORAReg_InitEU+0x268>)
    498c:	9a07      	ldr	r2, [sp, #28]
    498e:	4b34      	ldr	r3, [pc, #208]	; (4a60 <LORAReg_InitEU+0x26c>)
    4990:	200b      	movs	r0, #11
    4992:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    4994:	4a26      	ldr	r2, [pc, #152]	; (4a30 <LORAReg_InitEU+0x23c>)
    4996:	7810      	ldrb	r0, [r2, #0]
    4998:	7853      	ldrb	r3, [r2, #1]
    499a:	021b      	lsls	r3, r3, #8
    499c:	4303      	orrs	r3, r0
    499e:	7890      	ldrb	r0, [r2, #2]
    49a0:	0400      	lsls	r0, r0, #16
    49a2:	4303      	orrs	r3, r0
    49a4:	78d0      	ldrb	r0, [r2, #3]
    49a6:	0600      	lsls	r0, r0, #24
    49a8:	4318      	orrs	r0, r3
    49aa:	2240      	movs	r2, #64	; 0x40
    49ac:	492d      	ldr	r1, [pc, #180]	; (4a64 <LORAReg_InitEU+0x270>)
    49ae:	4b23      	ldr	r3, [pc, #140]	; (4a3c <LORAReg_InitEU+0x248>)
    49b0:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    49b2:	4b2d      	ldr	r3, [pc, #180]	; (4a68 <LORAReg_InitEU+0x274>)
    49b4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    49b6:	4b2d      	ldr	r3, [pc, #180]	; (4a6c <LORAReg_InitEU+0x278>)
    49b8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    49ba:	4b2d      	ldr	r3, [pc, #180]	; (4a70 <LORAReg_InitEU+0x27c>)
    49bc:	4798      	blx	r3
	return status;
    49be:	2308      	movs	r3, #8
    49c0:	e774      	b.n	48ac <LORAReg_InitEU+0xb8>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    49c2:	4c1b      	ldr	r4, [pc, #108]	; (4a30 <LORAReg_InitEU+0x23c>)
    49c4:	0020      	movs	r0, r4
    49c6:	306c      	adds	r0, #108	; 0x6c
    49c8:	2206      	movs	r2, #6
    49ca:	492a      	ldr	r1, [pc, #168]	; (4a74 <LORAReg_InitEU+0x280>)
    49cc:	4d1b      	ldr	r5, [pc, #108]	; (4a3c <LORAReg_InitEU+0x248>)
    49ce:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    49d0:	0020      	movs	r0, r4
    49d2:	308c      	adds	r0, #140	; 0x8c
    49d4:	2224      	movs	r2, #36	; 0x24
    49d6:	4928      	ldr	r1, [pc, #160]	; (4a78 <LORAReg_InitEU+0x284>)
    49d8:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    49da:	0020      	movs	r0, r4
    49dc:	30ad      	adds	r0, #173	; 0xad
    49de:	30ff      	adds	r0, #255	; 0xff
    49e0:	220c      	movs	r2, #12
    49e2:	4926      	ldr	r1, [pc, #152]	; (4a7c <LORAReg_InitEU+0x288>)
    49e4:	47a8      	blx	r5
    49e6:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    49e8:	4811      	ldr	r0, [pc, #68]	; (4a30 <LORAReg_InitEU+0x23c>)
    49ea:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    49ec:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    49ee:	7902      	ldrb	r2, [r0, #4]
    49f0:	7941      	ldrb	r1, [r0, #5]
    49f2:	0209      	lsls	r1, r1, #8
    49f4:	4311      	orrs	r1, r2
    49f6:	7982      	ldrb	r2, [r0, #6]
    49f8:	0412      	lsls	r2, r2, #16
    49fa:	4311      	orrs	r1, r2
    49fc:	79c2      	ldrb	r2, [r0, #7]
    49fe:	0612      	lsls	r2, r2, #24
    4a00:	430a      	orrs	r2, r1
    4a02:	0059      	lsls	r1, r3, #1
    4a04:	188a      	adds	r2, r1, r2
    4a06:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    4a08:	3301      	adds	r3, #1
    4a0a:	b2db      	uxtb	r3, r3
    4a0c:	5702      	ldrsb	r2, [r0, r4]
    4a0e:	4293      	cmp	r3, r2
    4a10:	dbed      	blt.n	49ee <LORAReg_InitEU+0x1fa>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    4a12:	4b07      	ldr	r3, [pc, #28]	; (4a30 <LORAReg_InitEU+0x23c>)
    4a14:	2205      	movs	r2, #5
    4a16:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    4a18:	2200      	movs	r2, #0
    4a1a:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    4a1c:	3a70      	subs	r2, #112	; 0x70
    4a1e:	751a      	strb	r2, [r3, #20]
    4a20:	3241      	adds	r2, #65	; 0x41
    4a22:	755a      	strb	r2, [r3, #21]
    4a24:	3a02      	subs	r2, #2
    4a26:	759a      	strb	r2, [r3, #22]
    4a28:	324a      	adds	r2, #74	; 0x4a
    4a2a:	75da      	strb	r2, [r3, #23]
    4a2c:	e7b2      	b.n	4994 <LORAReg_InitEU+0x1a0>
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	20001290 	.word	0x20001290
    4a34:	2000128c 	.word	0x2000128c
    4a38:	0001a6f4 	.word	0x0001a6f4
    4a3c:	00013ba5 	.word	0x00013ba5
    4a40:	0001a6c8 	.word	0x0001a6c8
    4a44:	0001a754 	.word	0x0001a754
    4a48:	0001a73c 	.word	0x0001a73c
    4a4c:	000047f1 	.word	0x000047f1
    4a50:	20001074 	.word	0x20001074
    4a54:	0001a79c 	.word	0x0001a79c
    4a58:	00008ec1 	.word	0x00008ec1
    4a5c:	20001078 	.word	0x20001078
    4a60:	0001a7a4 	.word	0x0001a7a4
    4a64:	0001a6fc 	.word	0x0001a6fc
    4a68:	00007f9d 	.word	0x00007f9d
    4a6c:	0000875d 	.word	0x0000875d
    4a70:	000089f9 	.word	0x000089f9
    4a74:	0001a6ec 	.word	0x0001a6ec
    4a78:	0001a6a4 	.word	0x0001a6a4
    4a7c:	0001a748 	.word	0x0001a748

00004a80 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    4a80:	4770      	bx	lr
	...

00004a84 <LORAReg_InitIN>:
{
    4a84:	b570      	push	{r4, r5, r6, lr}
    4a86:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    4a88:	4b5d      	ldr	r3, [pc, #372]	; (4c00 <LORAReg_InitIN+0x17c>)
    4a8a:	2103      	movs	r1, #3
    4a8c:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    4a8e:	2510      	movs	r5, #16
    4a90:	2222      	movs	r2, #34	; 0x22
    4a92:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    4a94:	3a21      	subs	r2, #33	; 0x21
    4a96:	2421      	movs	r4, #33	; 0x21
    4a98:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    4a9a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4a9c:	001a      	movs	r2, r3
    4a9e:	326c      	adds	r2, #108	; 0x6c
    4aa0:	2400      	movs	r4, #0
    4aa2:	711a      	strb	r2, [r3, #4]
    4aa4:	0a16      	lsrs	r6, r2, #8
    4aa6:	715e      	strb	r6, [r3, #5]
    4aa8:	0c16      	lsrs	r6, r2, #16
    4aaa:	719e      	strb	r6, [r3, #6]
    4aac:	0e12      	lsrs	r2, r2, #24
    4aae:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4ab0:	001a      	movs	r2, r3
    4ab2:	322c      	adds	r2, #44	; 0x2c
    4ab4:	701a      	strb	r2, [r3, #0]
    4ab6:	0a16      	lsrs	r6, r2, #8
    4ab8:	705e      	strb	r6, [r3, #1]
    4aba:	0c16      	lsrs	r6, r2, #16
    4abc:	709e      	strb	r6, [r3, #2]
    4abe:	0e12      	lsrs	r2, r2, #24
    4ac0:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4ac2:	001a      	movs	r2, r3
    4ac4:	328c      	adds	r2, #140	; 0x8c
    4ac6:	721a      	strb	r2, [r3, #8]
    4ac8:	0a16      	lsrs	r6, r2, #8
    4aca:	725e      	strb	r6, [r3, #9]
    4acc:	0c16      	lsrs	r6, r2, #16
    4ace:	729e      	strb	r6, [r3, #10]
    4ad0:	0e12      	lsrs	r2, r2, #24
    4ad2:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4ad4:	001a      	movs	r2, r3
    4ad6:	324d      	adds	r2, #77	; 0x4d
    4ad8:	32ff      	adds	r2, #255	; 0xff
    4ada:	741a      	strb	r2, [r3, #16]
    4adc:	0a16      	lsrs	r6, r2, #8
    4ade:	745e      	strb	r6, [r3, #17]
    4ae0:	0c16      	lsrs	r6, r2, #16
    4ae2:	749e      	strb	r6, [r3, #18]
    4ae4:	0e12      	lsrs	r2, r2, #24
    4ae6:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    4ae8:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    4aea:	2202      	movs	r2, #2
    4aec:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    4aee:	3a12      	subs	r2, #18
    4af0:	751a      	strb	r2, [r3, #20]
    4af2:	3a70      	subs	r2, #112	; 0x70
    4af4:	755a      	strb	r2, [r3, #21]
    4af6:	3226      	adds	r2, #38	; 0x26
    4af8:	759a      	strb	r2, [r3, #22]
    4afa:	328d      	adds	r2, #141	; 0x8d
    4afc:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    4afe:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    4b00:	761d      	strb	r5, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    4b02:	3a2c      	subs	r2, #44	; 0x2c
    4b04:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    4b06:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4b08:	24aa      	movs	r4, #170	; 0xaa
    4b0a:	34ff      	adds	r4, #255	; 0xff
    4b0c:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 7;
    4b0e:	3121      	adds	r1, #33	; 0x21
    4b10:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 10;
    4b12:	391a      	subs	r1, #26
    4b14:	321e      	adds	r2, #30
    4b16:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 30;
    4b18:	3114      	adds	r1, #20
    4b1a:	3a05      	subs	r2, #5
    4b1c:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4b1e:	3206      	adds	r2, #6
    4b20:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4b22:	3ca0      	subs	r4, #160	; 0xa0
    4b24:	3cff      	subs	r4, #255	; 0xff
	if(ismBand == ISM_IND865)
    4b26:	280f      	cmp	r0, #15
    4b28:	d008      	beq.n	4b3c <LORAReg_InitIN+0xb8>
    LORAREG_InitGetAttrFnPtrsIN();
    4b2a:	4b36      	ldr	r3, [pc, #216]	; (4c04 <LORAReg_InitIN+0x180>)
    4b2c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    4b2e:	4b36      	ldr	r3, [pc, #216]	; (4c08 <LORAReg_InitIN+0x184>)
    4b30:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    4b32:	4b36      	ldr	r3, [pc, #216]	; (4c0c <LORAReg_InitIN+0x188>)
    4b34:	4798      	blx	r3
}
    4b36:	0020      	movs	r0, r4
    4b38:	b006      	add	sp, #24
    4b3a:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    4b3c:	001c      	movs	r4, r3
    4b3e:	0018      	movs	r0, r3
    4b40:	306c      	adds	r0, #108	; 0x6c
    4b42:	3a20      	subs	r2, #32
    4b44:	4932      	ldr	r1, [pc, #200]	; (4c10 <LORAReg_InitIN+0x18c>)
    4b46:	4d33      	ldr	r5, [pc, #204]	; (4c14 <LORAReg_InitIN+0x190>)
    4b48:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    4b4a:	0020      	movs	r0, r4
    4b4c:	308c      	adds	r0, #140	; 0x8c
    4b4e:	2224      	movs	r2, #36	; 0x24
    4b50:	4931      	ldr	r1, [pc, #196]	; (4c18 <LORAReg_InitIN+0x194>)
    4b52:	47a8      	blx	r5
    4b54:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4b56:	492a      	ldr	r1, [pc, #168]	; (4c00 <LORAReg_InitIN+0x17c>)
    4b58:	24ff      	movs	r4, #255	; 0xff
    4b5a:	790b      	ldrb	r3, [r1, #4]
    4b5c:	794a      	ldrb	r2, [r1, #5]
    4b5e:	0212      	lsls	r2, r2, #8
    4b60:	431a      	orrs	r2, r3
    4b62:	798b      	ldrb	r3, [r1, #6]
    4b64:	041b      	lsls	r3, r3, #16
    4b66:	431a      	orrs	r2, r3
    4b68:	79cb      	ldrb	r3, [r1, #7]
    4b6a:	061b      	lsls	r3, r3, #24
    4b6c:	4313      	orrs	r3, r2
    4b6e:	181b      	adds	r3, r3, r0
    4b70:	705c      	strb	r4, [r3, #1]
    4b72:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    4b74:	2820      	cmp	r0, #32
    4b76:	d1f0      	bne.n	4b5a <LORAReg_InitIN+0xd6>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = MAX_EIRP_IN;
    4b78:	4c21      	ldr	r4, [pc, #132]	; (4c00 <LORAReg_InitIN+0x17c>)
    4b7a:	221e      	movs	r2, #30
    4b7c:	23d5      	movs	r3, #213	; 0xd5
    4b7e:	005b      	lsls	r3, r3, #1
    4b80:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    4b82:	7820      	ldrb	r0, [r4, #0]
    4b84:	7863      	ldrb	r3, [r4, #1]
    4b86:	021b      	lsls	r3, r3, #8
    4b88:	4303      	orrs	r3, r0
    4b8a:	78a0      	ldrb	r0, [r4, #2]
    4b8c:	0400      	lsls	r0, r0, #16
    4b8e:	4303      	orrs	r3, r0
    4b90:	78e0      	ldrb	r0, [r4, #3]
    4b92:	0600      	lsls	r0, r0, #24
    4b94:	4318      	orrs	r0, r3
    4b96:	3222      	adds	r2, #34	; 0x22
    4b98:	4920      	ldr	r1, [pc, #128]	; (4c1c <LORAReg_InitIN+0x198>)
    4b9a:	4b1e      	ldr	r3, [pc, #120]	; (4c14 <LORAReg_InitIN+0x190>)
    4b9c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    4b9e:	2306      	movs	r3, #6
    4ba0:	2106      	movs	r1, #6
    4ba2:	22fa      	movs	r2, #250	; 0xfa
    4ba4:	0052      	lsls	r2, r2, #1
    4ba6:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4ba8:	2100      	movs	r1, #0
    4baa:	22f6      	movs	r2, #246	; 0xf6
    4bac:	32ff      	adds	r2, #255	; 0xff
    4bae:	54a1      	strb	r1, [r4, r2]
    4bb0:	0022      	movs	r2, r4
    4bb2:	32f6      	adds	r2, #246	; 0xf6
    4bb4:	32ff      	adds	r2, #255	; 0xff
    4bb6:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    4bb8:	22f8      	movs	r2, #248	; 0xf8
    4bba:	32ff      	adds	r2, #255	; 0xff
    4bbc:	54a1      	strb	r1, [r4, r2]
    4bbe:	0022      	movs	r2, r4
    4bc0:	32f8      	adds	r2, #248	; 0xf8
    4bc2:	32ff      	adds	r2, #255	; 0xff
    4bc4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    4bc6:	3101      	adds	r1, #1
    4bc8:	22fa      	movs	r2, #250	; 0xfa
    4bca:	32ff      	adds	r2, #255	; 0xff
    4bcc:	54a1      	strb	r1, [r4, r2]
    4bce:	0022      	movs	r2, r4
    4bd0:	32fa      	adds	r2, #250	; 0xfa
    4bd2:	32ff      	adds	r2, #255	; 0xff
    4bd4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    4bd6:	2200      	movs	r2, #0
    4bd8:	23fc      	movs	r3, #252	; 0xfc
    4bda:	33ff      	adds	r3, #255	; 0xff
    4bdc:	54e2      	strb	r2, [r4, r3]
    4bde:	18e4      	adds	r4, r4, r3
    4be0:	2300      	movs	r3, #0
    4be2:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    4be4:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    4be6:	3202      	adds	r2, #2
    4be8:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    4bea:	4a0d      	ldr	r2, [pc, #52]	; (4c20 <LORAReg_InitIN+0x19c>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    4bec:	9200      	str	r2, [sp, #0]
    4bee:	490d      	ldr	r1, [pc, #52]	; (4c24 <LORAReg_InitIN+0x1a0>)
    4bf0:	9a03      	ldr	r2, [sp, #12]
    4bf2:	4b0d      	ldr	r3, [pc, #52]	; (4c28 <LORAReg_InitIN+0x1a4>)
    4bf4:	2006      	movs	r0, #6
    4bf6:	4c0d      	ldr	r4, [pc, #52]	; (4c2c <LORAReg_InitIN+0x1a8>)
    4bf8:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4bfa:	2408      	movs	r4, #8
    4bfc:	e795      	b.n	4b2a <LORAReg_InitIN+0xa6>
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	20001290 	.word	0x20001290
    4c04:	00008345 	.word	0x00008345
    4c08:	0000889d 	.word	0x0000889d
    4c0c:	00008aa9 	.word	0x00008aa9
    4c10:	0001a7d0 	.word	0x0001a7d0
    4c14:	00013ba5 	.word	0x00013ba5
    4c18:	0001a7ac 	.word	0x0001a7ac
    4c1c:	0001a7d8 	.word	0x0001a7d8
    4c20:	00004a81 	.word	0x00004a81
    4c24:	2000107c 	.word	0x2000107c
    4c28:	0001a818 	.word	0x0001a818
    4c2c:	00008ec1 	.word	0x00008ec1

00004c30 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    4c30:	4770      	bx	lr
	...

00004c34 <LORAReg_InitJP>:
{
    4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c36:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    4c38:	4b7a      	ldr	r3, [pc, #488]	; (4e24 <LORAReg_InitJP+0x1f0>)
    4c3a:	2203      	movs	r2, #3
    4c3c:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    4c3e:	2110      	movs	r1, #16
    4c40:	321f      	adds	r2, #31
    4c42:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    4c44:	3a21      	subs	r2, #33	; 0x21
    4c46:	2421      	movs	r4, #33	; 0x21
    4c48:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    4c4a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4c4c:	001a      	movs	r2, r3
    4c4e:	326c      	adds	r2, #108	; 0x6c
    4c50:	711a      	strb	r2, [r3, #4]
    4c52:	0a14      	lsrs	r4, r2, #8
    4c54:	715c      	strb	r4, [r3, #5]
    4c56:	0c14      	lsrs	r4, r2, #16
    4c58:	719c      	strb	r4, [r3, #6]
    4c5a:	0e12      	lsrs	r2, r2, #24
    4c5c:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4c5e:	001a      	movs	r2, r3
    4c60:	322c      	adds	r2, #44	; 0x2c
    4c62:	701a      	strb	r2, [r3, #0]
    4c64:	0a14      	lsrs	r4, r2, #8
    4c66:	705c      	strb	r4, [r3, #1]
    4c68:	0c14      	lsrs	r4, r2, #16
    4c6a:	709c      	strb	r4, [r3, #2]
    4c6c:	0e12      	lsrs	r2, r2, #24
    4c6e:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    4c70:	001a      	movs	r2, r3
    4c72:	32ad      	adds	r2, #173	; 0xad
    4c74:	32ff      	adds	r2, #255	; 0xff
    4c76:	731a      	strb	r2, [r3, #12]
    4c78:	0a14      	lsrs	r4, r2, #8
    4c7a:	735c      	strb	r4, [r3, #13]
    4c7c:	0c14      	lsrs	r4, r2, #16
    4c7e:	739c      	strb	r4, [r3, #14]
    4c80:	0e12      	lsrs	r2, r2, #24
    4c82:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4c84:	001a      	movs	r2, r3
    4c86:	328c      	adds	r2, #140	; 0x8c
    4c88:	721a      	strb	r2, [r3, #8]
    4c8a:	0a14      	lsrs	r4, r2, #8
    4c8c:	725c      	strb	r4, [r3, #9]
    4c8e:	0c14      	lsrs	r4, r2, #16
    4c90:	729c      	strb	r4, [r3, #10]
    4c92:	0e12      	lsrs	r2, r2, #24
    4c94:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4c96:	001a      	movs	r2, r3
    4c98:	324d      	adds	r2, #77	; 0x4d
    4c9a:	32ff      	adds	r2, #255	; 0xff
    4c9c:	741a      	strb	r2, [r3, #16]
    4c9e:	0a14      	lsrs	r4, r2, #8
    4ca0:	745c      	strb	r4, [r3, #17]
    4ca2:	0c14      	lsrs	r4, r2, #16
    4ca4:	749c      	strb	r4, [r3, #18]
    4ca6:	0e12      	lsrs	r2, r2, #24
    4ca8:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    4caa:	2202      	movs	r2, #2
    4cac:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    4cae:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    4cb0:	2400      	movs	r4, #0
    4cb2:	751c      	strb	r4, [r3, #20]
    4cb4:	3c16      	subs	r4, #22
    4cb6:	755c      	strb	r4, [r3, #21]
    4cb8:	341c      	adds	r4, #28
    4cba:	759c      	strb	r4, [r3, #22]
    4cbc:	3431      	adds	r4, #49	; 0x31
    4cbe:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    4cc0:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    4cc2:	3c23      	subs	r4, #35	; 0x23
    4cc4:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    4cc6:	3c0d      	subs	r4, #13
    4cc8:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    4cca:	2500      	movs	r5, #0
    4ccc:	775d      	strb	r5, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    4cce:	260a      	movs	r6, #10
    4cd0:	35a7      	adds	r5, #167	; 0xa7
    4cd2:	35ff      	adds	r5, #255	; 0xff
    4cd4:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    4cd6:	36a6      	adds	r6, #166	; 0xa6
    4cd8:	25a8      	movs	r5, #168	; 0xa8
    4cda:	35ff      	adds	r5, #255	; 0xff
    4cdc:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    4cde:	3eab      	subs	r6, #171	; 0xab
    4ce0:	3501      	adds	r5, #1
    4ce2:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    4ce4:	25aa      	movs	r5, #170	; 0xaa
    4ce6:	35ff      	adds	r5, #255	; 0xff
    4ce8:	555a      	strb	r2, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    4cea:	3222      	adds	r2, #34	; 0x22
    4cec:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    4cee:	3201      	adds	r2, #1
    4cf0:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 16;
    4cf2:	3a05      	subs	r2, #5
    4cf4:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4cf6:	4a4c      	ldr	r2, [pc, #304]	; (4e28 <LORAReg_InitJP+0x1f4>)
    4cf8:	7814      	ldrb	r4, [r2, #0]
    4cfa:	2196      	movs	r1, #150	; 0x96
    4cfc:	31ff      	adds	r1, #255	; 0xff
    4cfe:	545c      	strb	r4, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    4d00:	7851      	ldrb	r1, [r2, #1]
    4d02:	22a8      	movs	r2, #168	; 0xa8
    4d04:	0052      	lsls	r2, r2, #1
    4d06:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4d08:	3a2b      	subs	r2, #43	; 0x2b
    4d0a:	3aff      	subs	r2, #255	; 0xff
    4d0c:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    4d0e:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    4d10:	2805      	cmp	r0, #5
    4d12:	d008      	beq.n	4d26 <LORAReg_InitJP+0xf2>
    LORAREG_InitGetAttrFnPtrsJP();
    4d14:	4b45      	ldr	r3, [pc, #276]	; (4e2c <LORAReg_InitJP+0x1f8>)
    4d16:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    4d18:	4b45      	ldr	r3, [pc, #276]	; (4e30 <LORAReg_InitJP+0x1fc>)
    4d1a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    4d1c:	4b45      	ldr	r3, [pc, #276]	; (4e34 <LORAReg_InitJP+0x200>)
    4d1e:	4798      	blx	r3
}
    4d20:	0020      	movs	r0, r4
    4d22:	b007      	add	sp, #28
    4d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    4d26:	001c      	movs	r4, r3
    4d28:	0018      	movs	r0, r3
    4d2a:	306c      	adds	r0, #108	; 0x6c
    4d2c:	3a22      	subs	r2, #34	; 0x22
    4d2e:	4942      	ldr	r1, [pc, #264]	; (4e38 <LORAReg_InitJP+0x204>)
    4d30:	4d42      	ldr	r5, [pc, #264]	; (4e3c <LORAReg_InitJP+0x208>)
    4d32:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    4d34:	0020      	movs	r0, r4
    4d36:	308c      	adds	r0, #140	; 0x8c
    4d38:	2218      	movs	r2, #24
    4d3a:	4941      	ldr	r1, [pc, #260]	; (4e40 <LORAReg_InitJP+0x20c>)
    4d3c:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    4d3e:	0020      	movs	r0, r4
    4d40:	30ad      	adds	r0, #173	; 0xad
    4d42:	30ff      	adds	r0, #255	; 0xff
    4d44:	220c      	movs	r2, #12
    4d46:	493f      	ldr	r1, [pc, #252]	; (4e44 <LORAReg_InitJP+0x210>)
    4d48:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    4d4a:	0020      	movs	r0, r4
    4d4c:	3097      	adds	r0, #151	; 0x97
    4d4e:	30ff      	adds	r0, #255	; 0xff
    4d50:	2202      	movs	r2, #2
    4d52:	493d      	ldr	r1, [pc, #244]	; (4e48 <LORAReg_InitJP+0x214>)
    4d54:	47a8      	blx	r5
    4d56:	2302      	movs	r3, #2
    4d58:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4d5a:	4932      	ldr	r1, [pc, #200]	; (4e24 <LORAReg_InitJP+0x1f0>)
    4d5c:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4d5e:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    4d60:	361d      	adds	r6, #29
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4d62:	7908      	ldrb	r0, [r1, #4]
    4d64:	794c      	ldrb	r4, [r1, #5]
    4d66:	0224      	lsls	r4, r4, #8
    4d68:	4304      	orrs	r4, r0
    4d6a:	7988      	ldrb	r0, [r1, #6]
    4d6c:	0400      	lsls	r0, r0, #16
    4d6e:	4304      	orrs	r4, r0
    4d70:	79c8      	ldrb	r0, [r1, #7]
    4d72:	0600      	lsls	r0, r0, #24
    4d74:	4320      	orrs	r0, r4
    4d76:	0054      	lsls	r4, r2, #1
    4d78:	1820      	adds	r0, r4, r0
    4d7a:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4d7c:	3352      	adds	r3, #82	; 0x52
    4d7e:	009b      	lsls	r3, r3, #2
    4d80:	18cb      	adds	r3, r1, r3
    4d82:	725d      	strb	r5, [r3, #9]
    4d84:	729d      	strb	r5, [r3, #10]
    4d86:	72dd      	strb	r5, [r3, #11]
    4d88:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    4d8a:	3201      	adds	r2, #1
    4d8c:	b2d2      	uxtb	r2, r2
    4d8e:	0013      	movs	r3, r2
    4d90:	5788      	ldrsb	r0, [r1, r6]
    4d92:	4282      	cmp	r2, r0
    4d94:	dbe5      	blt.n	4d62 <LORAReg_InitJP+0x12e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4d96:	4c23      	ldr	r4, [pc, #140]	; (4e24 <LORAReg_InitJP+0x1f0>)
    4d98:	22ff      	movs	r2, #255	; 0xff
    4d9a:	2327      	movs	r3, #39	; 0x27
    4d9c:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    4d9e:	3aef      	subs	r2, #239	; 0xef
    4da0:	3384      	adds	r3, #132	; 0x84
    4da2:	33ff      	adds	r3, #255	; 0xff
    4da4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    4da6:	7820      	ldrb	r0, [r4, #0]
    4da8:	7863      	ldrb	r3, [r4, #1]
    4daa:	021b      	lsls	r3, r3, #8
    4dac:	4303      	orrs	r3, r0
    4dae:	78a0      	ldrb	r0, [r4, #2]
    4db0:	0400      	lsls	r0, r0, #16
    4db2:	4303      	orrs	r3, r0
    4db4:	78e0      	ldrb	r0, [r4, #3]
    4db6:	0600      	lsls	r0, r0, #24
    4db8:	4318      	orrs	r0, r3
    4dba:	3230      	adds	r2, #48	; 0x30
    4dbc:	4923      	ldr	r1, [pc, #140]	; (4e4c <LORAReg_InitJP+0x218>)
    4dbe:	4b1f      	ldr	r3, [pc, #124]	; (4e3c <LORAReg_InitJP+0x208>)
    4dc0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    4dc2:	2307      	movs	r3, #7
    4dc4:	2107      	movs	r1, #7
    4dc6:	22fa      	movs	r2, #250	; 0xfa
    4dc8:	0052      	lsls	r2, r2, #1
    4dca:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    4dcc:	2100      	movs	r1, #0
    4dce:	22f6      	movs	r2, #246	; 0xf6
    4dd0:	32ff      	adds	r2, #255	; 0xff
    4dd2:	54a1      	strb	r1, [r4, r2]
    4dd4:	0022      	movs	r2, r4
    4dd6:	32f6      	adds	r2, #246	; 0xf6
    4dd8:	32ff      	adds	r2, #255	; 0xff
    4dda:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    4ddc:	22f8      	movs	r2, #248	; 0xf8
    4dde:	32ff      	adds	r2, #255	; 0xff
    4de0:	54a1      	strb	r1, [r4, r2]
    4de2:	0022      	movs	r2, r4
    4de4:	32f8      	adds	r2, #248	; 0xf8
    4de6:	32ff      	adds	r2, #255	; 0xff
    4de8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    4dea:	3101      	adds	r1, #1
    4dec:	22fa      	movs	r2, #250	; 0xfa
    4dee:	32ff      	adds	r2, #255	; 0xff
    4df0:	54a1      	strb	r1, [r4, r2]
    4df2:	0022      	movs	r2, r4
    4df4:	32fa      	adds	r2, #250	; 0xfa
    4df6:	32ff      	adds	r2, #255	; 0xff
    4df8:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    4dfa:	2200      	movs	r2, #0
    4dfc:	23fc      	movs	r3, #252	; 0xfc
    4dfe:	33ff      	adds	r3, #255	; 0xff
    4e00:	54e2      	strb	r2, [r4, r3]
    4e02:	18e4      	adds	r4, r4, r3
    4e04:	2300      	movs	r3, #0
    4e06:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    4e08:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    4e0a:	3202      	adds	r2, #2
    4e0c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    4e0e:	4a10      	ldr	r2, [pc, #64]	; (4e50 <LORAReg_InitJP+0x21c>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    4e10:	9200      	str	r2, [sp, #0]
    4e12:	4910      	ldr	r1, [pc, #64]	; (4e54 <LORAReg_InitJP+0x220>)
    4e14:	9a03      	ldr	r2, [sp, #12]
    4e16:	4b10      	ldr	r3, [pc, #64]	; (4e58 <LORAReg_InitJP+0x224>)
    4e18:	2007      	movs	r0, #7
    4e1a:	4c10      	ldr	r4, [pc, #64]	; (4e5c <LORAReg_InitJP+0x228>)
    4e1c:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    4e1e:	2408      	movs	r4, #8
    4e20:	e778      	b.n	4d14 <LORAReg_InitJP+0xe0>
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	20001290 	.word	0x20001290
    4e28:	2000128c 	.word	0x2000128c
    4e2c:	00008471 	.word	0x00008471
    4e30:	00008905 	.word	0x00008905
    4e34:	00008ae5 	.word	0x00008ae5
    4e38:	0001a840 	.word	0x0001a840
    4e3c:	00013ba5 	.word	0x00013ba5
    4e40:	0001a828 	.word	0x0001a828
    4e44:	0001a888 	.word	0x0001a888
    4e48:	0001a884 	.word	0x0001a884
    4e4c:	0001a844 	.word	0x0001a844
    4e50:	00004c31 	.word	0x00004c31
    4e54:	20001080 	.word	0x20001080
    4e58:	0001a894 	.word	0x0001a894
    4e5c:	00008ec1 	.word	0x00008ec1

00004e60 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    4e60:	4770      	bx	lr
	...

00004e64 <LORAReg_InitKR>:
{
    4e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e66:	46d6      	mov	lr, sl
    4e68:	464f      	mov	r7, r9
    4e6a:	4646      	mov	r6, r8
    4e6c:	b5c0      	push	{r6, r7, lr}
    4e6e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    4e70:	4b90      	ldr	r3, [pc, #576]	; (50b4 <LORAReg_InitKR+0x250>)
    4e72:	2103      	movs	r1, #3
    4e74:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    4e76:	2410      	movs	r4, #16
    4e78:	2222      	movs	r2, #34	; 0x22
    4e7a:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    4e7c:	3a21      	subs	r2, #33	; 0x21
    4e7e:	3411      	adds	r4, #17
    4e80:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    4e82:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    4e84:	001a      	movs	r2, r3
    4e86:	326c      	adds	r2, #108	; 0x6c
    4e88:	2400      	movs	r4, #0
    4e8a:	711a      	strb	r2, [r3, #4]
    4e8c:	0a15      	lsrs	r5, r2, #8
    4e8e:	715d      	strb	r5, [r3, #5]
    4e90:	0c15      	lsrs	r5, r2, #16
    4e92:	719d      	strb	r5, [r3, #6]
    4e94:	0e12      	lsrs	r2, r2, #24
    4e96:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    4e98:	001a      	movs	r2, r3
    4e9a:	322c      	adds	r2, #44	; 0x2c
    4e9c:	701a      	strb	r2, [r3, #0]
    4e9e:	0a15      	lsrs	r5, r2, #8
    4ea0:	705d      	strb	r5, [r3, #1]
    4ea2:	0c15      	lsrs	r5, r2, #16
    4ea4:	709d      	strb	r5, [r3, #2]
    4ea6:	0e12      	lsrs	r2, r2, #24
    4ea8:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    4eaa:	001a      	movs	r2, r3
    4eac:	328c      	adds	r2, #140	; 0x8c
    4eae:	721a      	strb	r2, [r3, #8]
    4eb0:	0a15      	lsrs	r5, r2, #8
    4eb2:	725d      	strb	r5, [r3, #9]
    4eb4:	0c15      	lsrs	r5, r2, #16
    4eb6:	729d      	strb	r5, [r3, #10]
    4eb8:	0e12      	lsrs	r2, r2, #24
    4eba:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    4ebc:	001a      	movs	r2, r3
    4ebe:	324d      	adds	r2, #77	; 0x4d
    4ec0:	32ff      	adds	r2, #255	; 0xff
    4ec2:	741a      	strb	r2, [r3, #16]
    4ec4:	0a15      	lsrs	r5, r2, #8
    4ec6:	745d      	strb	r5, [r3, #17]
    4ec8:	0c15      	lsrs	r5, r2, #16
    4eca:	749d      	strb	r5, [r3, #18]
    4ecc:	0e12      	lsrs	r2, r2, #24
    4ece:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    4ed0:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    4ed2:	76dc      	strb	r4, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    4ed4:	2220      	movs	r2, #32
    4ed6:	4252      	negs	r2, r2
    4ed8:	751a      	strb	r2, [r3, #20]
    4eda:	3233      	adds	r2, #51	; 0x33
    4edc:	755a      	strb	r2, [r3, #21]
    4ede:	3a20      	subs	r2, #32
    4ee0:	759a      	strb	r2, [r3, #22]
    4ee2:	3243      	adds	r2, #67	; 0x43
    4ee4:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    4ee6:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    4ee8:	3a22      	subs	r2, #34	; 0x22
    4eea:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    4eec:	3a0f      	subs	r2, #15
    4eee:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    4ef0:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    4ef2:	340a      	adds	r4, #10
    4ef4:	25d3      	movs	r5, #211	; 0xd3
    4ef6:	006d      	lsls	r5, r5, #1
    4ef8:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    4efa:	26bf      	movs	r6, #191	; 0xbf
    4efc:	25a8      	movs	r5, #168	; 0xa8
    4efe:	35ff      	adds	r5, #255	; 0xff
    4f00:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    4f02:	3501      	adds	r5, #1
    4f04:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    4f06:	24aa      	movs	r4, #170	; 0xaa
    4f08:	34ff      	adds	r4, #255	; 0xff
    4f0a:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 5;
    4f0c:	3121      	adds	r1, #33	; 0x21
    4f0e:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    4f10:	391d      	subs	r1, #29
    4f12:	3220      	adds	r2, #32
    4f14:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 14;
    4f16:	3107      	adds	r1, #7
    4f18:	3a05      	subs	r2, #5
    4f1a:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    4f1c:	4a66      	ldr	r2, [pc, #408]	; (50b8 <LORAReg_InitKR+0x254>)
    4f1e:	7811      	ldrb	r1, [r2, #0]
    4f20:	2296      	movs	r2, #150	; 0x96
    4f22:	32ff      	adds	r2, #255	; 0xff
    4f24:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    4f26:	3a70      	subs	r2, #112	; 0x70
    4f28:	3aff      	subs	r2, #255	; 0xff
    4f2a:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    4f2c:	3ce1      	subs	r4, #225	; 0xe1
	if(ismBand == ISM_KR920)
    4f2e:	2804      	cmp	r0, #4
    4f30:	d00c      	beq.n	4f4c <LORAReg_InitKR+0xe8>
    LORAREG_InitGetAttrFnPtrsKR();
    4f32:	4b62      	ldr	r3, [pc, #392]	; (50bc <LORAReg_InitKR+0x258>)
    4f34:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    4f36:	4b62      	ldr	r3, [pc, #392]	; (50c0 <LORAReg_InitKR+0x25c>)
    4f38:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    4f3a:	4b62      	ldr	r3, [pc, #392]	; (50c4 <LORAReg_InitKR+0x260>)
    4f3c:	4798      	blx	r3
}
    4f3e:	0020      	movs	r0, r4
    4f40:	b006      	add	sp, #24
    4f42:	bc1c      	pop	{r2, r3, r4}
    4f44:	4690      	mov	r8, r2
    4f46:	4699      	mov	r9, r3
    4f48:	46a2      	mov	sl, r4
    4f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    4f4c:	001c      	movs	r4, r3
    4f4e:	0018      	movs	r0, r3
    4f50:	306c      	adds	r0, #108	; 0x6c
    4f52:	3a20      	subs	r2, #32
    4f54:	495c      	ldr	r1, [pc, #368]	; (50c8 <LORAReg_InitKR+0x264>)
    4f56:	4d5d      	ldr	r5, [pc, #372]	; (50cc <LORAReg_InitKR+0x268>)
    4f58:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    4f5a:	0020      	movs	r0, r4
    4f5c:	308c      	adds	r0, #140	; 0x8c
    4f5e:	2224      	movs	r2, #36	; 0x24
    4f60:	495b      	ldr	r1, [pc, #364]	; (50d0 <LORAReg_InitKR+0x26c>)
    4f62:	47a8      	blx	r5
    4f64:	2103      	movs	r1, #3
    4f66:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4f68:	4b52      	ldr	r3, [pc, #328]	; (50b4 <LORAReg_InitKR+0x250>)
    4f6a:	3640      	adds	r6, #64	; 0x40
		RegParams.pChParams[i].status = DISABLED;
    4f6c:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4f6e:	22d5      	movs	r2, #213	; 0xd5
    4f70:	0052      	lsls	r2, r2, #1
    4f72:	4690      	mov	r8, r2
    4f74:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    4f76:	3a89      	subs	r2, #137	; 0x89
    4f78:	3aff      	subs	r2, #255	; 0xff
    4f7a:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    4f7c:	0042      	lsls	r2, r0, #1
    4f7e:	791c      	ldrb	r4, [r3, #4]
    4f80:	46a1      	mov	r9, r4
    4f82:	795c      	ldrb	r4, [r3, #5]
    4f84:	0224      	lsls	r4, r4, #8
    4f86:	464f      	mov	r7, r9
    4f88:	4327      	orrs	r7, r4
    4f8a:	799c      	ldrb	r4, [r3, #6]
    4f8c:	0424      	lsls	r4, r4, #16
    4f8e:	4327      	orrs	r7, r4
    4f90:	79dc      	ldrb	r4, [r3, #7]
    4f92:	0624      	lsls	r4, r4, #24
    4f94:	433c      	orrs	r4, r7
    4f96:	18a4      	adds	r4, r4, r2
    4f98:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    4f9a:	791c      	ldrb	r4, [r3, #4]
    4f9c:	46a1      	mov	r9, r4
    4f9e:	795c      	ldrb	r4, [r3, #5]
    4fa0:	0224      	lsls	r4, r4, #8
    4fa2:	464f      	mov	r7, r9
    4fa4:	4327      	orrs	r7, r4
    4fa6:	799c      	ldrb	r4, [r3, #6]
    4fa8:	0424      	lsls	r4, r4, #16
    4faa:	4327      	orrs	r7, r4
    4fac:	79dc      	ldrb	r4, [r3, #7]
    4fae:	0624      	lsls	r4, r4, #24
    4fb0:	433c      	orrs	r4, r7
    4fb2:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    4fb4:	7a1c      	ldrb	r4, [r3, #8]
    4fb6:	46a1      	mov	r9, r4
    4fb8:	7a5c      	ldrb	r4, [r3, #9]
    4fba:	0224      	lsls	r4, r4, #8
    4fbc:	464f      	mov	r7, r9
    4fbe:	4327      	orrs	r7, r4
    4fc0:	7a9c      	ldrb	r4, [r3, #10]
    4fc2:	0424      	lsls	r4, r4, #16
    4fc4:	4327      	orrs	r7, r4
    4fc6:	7adc      	ldrb	r4, [r3, #11]
    4fc8:	0624      	lsls	r4, r4, #24
    4fca:	433c      	orrs	r4, r7
    4fcc:	1812      	adds	r2, r2, r0
    4fce:	0092      	lsls	r2, r2, #2
    4fd0:	1912      	adds	r2, r2, r4
    4fd2:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    4fd4:	4642      	mov	r2, r8
    4fd6:	4664      	mov	r4, ip
    4fd8:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    4fda:	3152      	adds	r1, #82	; 0x52
    4fdc:	0089      	lsls	r1, r1, #2
    4fde:	1859      	adds	r1, r3, r1
    4fe0:	724d      	strb	r5, [r1, #9]
    4fe2:	728d      	strb	r5, [r1, #10]
    4fe4:	72cd      	strb	r5, [r1, #11]
    4fe6:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    4fe8:	3001      	adds	r0, #1
    4fea:	b2c0      	uxtb	r0, r0
    4fec:	0001      	movs	r1, r0
    4fee:	4652      	mov	r2, sl
    4ff0:	569a      	ldrsb	r2, [r3, r2]
    4ff2:	4290      	cmp	r0, r2
    4ff4:	dbc2      	blt.n	4f7c <LORAReg_InitKR+0x118>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    4ff6:	4c2f      	ldr	r4, [pc, #188]	; (50b4 <LORAReg_InitKR+0x250>)
    4ff8:	22ff      	movs	r2, #255	; 0xff
    4ffa:	2327      	movs	r3, #39	; 0x27
    4ffc:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    4ffe:	7820      	ldrb	r0, [r4, #0]
    5000:	7863      	ldrb	r3, [r4, #1]
    5002:	021b      	lsls	r3, r3, #8
    5004:	4303      	orrs	r3, r0
    5006:	78a0      	ldrb	r0, [r4, #2]
    5008:	0400      	lsls	r0, r0, #16
    500a:	4303      	orrs	r3, r0
    500c:	78e0      	ldrb	r0, [r4, #3]
    500e:	0600      	lsls	r0, r0, #24
    5010:	4318      	orrs	r0, r3
    5012:	3acf      	subs	r2, #207	; 0xcf
    5014:	492f      	ldr	r1, [pc, #188]	; (50d4 <LORAReg_InitKR+0x270>)
    5016:	4b2d      	ldr	r3, [pc, #180]	; (50cc <LORAReg_InitKR+0x268>)
    5018:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    501a:	7f63      	ldrb	r3, [r4, #29]
    501c:	2b00      	cmp	r3, #0
    501e:	dd17      	ble.n	5050 <LORAReg_InitKR+0x1ec>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    5020:	4a24      	ldr	r2, [pc, #144]	; (50b4 <LORAReg_InitKR+0x250>)
    5022:	7811      	ldrb	r1, [r2, #0]
    5024:	7853      	ldrb	r3, [r2, #1]
    5026:	021b      	lsls	r3, r3, #8
    5028:	430b      	orrs	r3, r1
    502a:	7891      	ldrb	r1, [r2, #2]
    502c:	0409      	lsls	r1, r1, #16
    502e:	430b      	orrs	r3, r1
    5030:	78d1      	ldrb	r1, [r2, #3]
    5032:	0609      	lsls	r1, r1, #24
    5034:	4319      	orrs	r1, r3
    5036:	2300      	movs	r3, #0
    5038:	2501      	movs	r5, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    503a:	2407      	movs	r4, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    503c:	0010      	movs	r0, r2
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    503e:	00da      	lsls	r2, r3, #3
    5040:	188a      	adds	r2, r1, r2
    5042:	71d5      	strb	r5, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    5044:	7194      	strb	r4, [r2, #6]
    5046:	3301      	adds	r3, #1
    5048:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    504a:	7f42      	ldrb	r2, [r0, #29]
    504c:	4293      	cmp	r3, r2
    504e:	dbf6      	blt.n	503e <LORAReg_InitKR+0x1da>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    5050:	4b18      	ldr	r3, [pc, #96]	; (50b4 <LORAReg_InitKR+0x250>)
    5052:	2205      	movs	r2, #5
    5054:	2005      	movs	r0, #5
    5056:	21fa      	movs	r1, #250	; 0xfa
    5058:	0049      	lsls	r1, r1, #1
    505a:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    505c:	2000      	movs	r0, #0
    505e:	21f6      	movs	r1, #246	; 0xf6
    5060:	31ff      	adds	r1, #255	; 0xff
    5062:	5458      	strb	r0, [r3, r1]
    5064:	0019      	movs	r1, r3
    5066:	31f6      	adds	r1, #246	; 0xf6
    5068:	31ff      	adds	r1, #255	; 0xff
    506a:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    506c:	21f8      	movs	r1, #248	; 0xf8
    506e:	31ff      	adds	r1, #255	; 0xff
    5070:	5458      	strb	r0, [r3, r1]
    5072:	0019      	movs	r1, r3
    5074:	31f8      	adds	r1, #248	; 0xf8
    5076:	31ff      	adds	r1, #255	; 0xff
    5078:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    507a:	3001      	adds	r0, #1
    507c:	21fa      	movs	r1, #250	; 0xfa
    507e:	31ff      	adds	r1, #255	; 0xff
    5080:	5458      	strb	r0, [r3, r1]
    5082:	0019      	movs	r1, r3
    5084:	31fa      	adds	r1, #250	; 0xfa
    5086:	31ff      	adds	r1, #255	; 0xff
    5088:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    508a:	2100      	movs	r1, #0
    508c:	22fc      	movs	r2, #252	; 0xfc
    508e:	32ff      	adds	r2, #255	; 0xff
    5090:	5499      	strb	r1, [r3, r2]
    5092:	189b      	adds	r3, r3, r2
    5094:	2200      	movs	r2, #0
    5096:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    5098:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    509a:	3202      	adds	r2, #2
    509c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    509e:	4a0e      	ldr	r2, [pc, #56]	; (50d8 <LORAReg_InitKR+0x274>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    50a0:	9200      	str	r2, [sp, #0]
    50a2:	490e      	ldr	r1, [pc, #56]	; (50dc <LORAReg_InitKR+0x278>)
    50a4:	9a03      	ldr	r2, [sp, #12]
    50a6:	4b0e      	ldr	r3, [pc, #56]	; (50e0 <LORAReg_InitKR+0x27c>)
    50a8:	3004      	adds	r0, #4
    50aa:	4c0e      	ldr	r4, [pc, #56]	; (50e4 <LORAReg_InitKR+0x280>)
    50ac:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    50ae:	2408      	movs	r4, #8
    50b0:	e73f      	b.n	4f32 <LORAReg_InitKR+0xce>
    50b2:	46c0      	nop			; (mov r8, r8)
    50b4:	20001290 	.word	0x20001290
    50b8:	2000128c 	.word	0x2000128c
    50bc:	000085b1 	.word	0x000085b1
    50c0:	00008971 	.word	0x00008971
    50c4:	00008b31 	.word	0x00008b31
    50c8:	0001a8c8 	.word	0x0001a8c8
    50cc:	00013ba5 	.word	0x00013ba5
    50d0:	0001a8a4 	.word	0x0001a8a4
    50d4:	0001a8d0 	.word	0x0001a8d0
    50d8:	00004e61 	.word	0x00004e61
    50dc:	20001084 	.word	0x20001084
    50e0:	0001a900 	.word	0x0001a900
    50e4:	00008ec1 	.word	0x00008ec1

000050e8 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    50e8:	4770      	bx	lr
	...

000050ec <LORAReg_InitNA>:
{
    50ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ee:	46de      	mov	lr, fp
    50f0:	4657      	mov	r7, sl
    50f2:	464e      	mov	r6, r9
    50f4:	4645      	mov	r5, r8
    50f6:	b5e0      	push	{r5, r6, r7, lr}
    50f8:	b089      	sub	sp, #36	; 0x24
    50fa:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    50fc:	4c64      	ldr	r4, [pc, #400]	; (5290 <LORAReg_InitNA+0x1a4>)
    50fe:	2602      	movs	r6, #2
    5100:	2302      	movs	r3, #2
    5102:	4698      	mov	r8, r3
    5104:	77a6      	strb	r6, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    5106:	2248      	movs	r2, #72	; 0x48
    5108:	2322      	movs	r3, #34	; 0x22
    510a:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    510c:	3b1b      	subs	r3, #27
    510e:	77e3      	strb	r3, [r4, #31]
	RegParams.maxTxPwr = MAX_TX_PWR_NA;
    5110:	3a2a      	subs	r2, #42	; 0x2a
    5112:	3319      	adds	r3, #25
    5114:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    5116:	0023      	movs	r3, r4
    5118:	339c      	adds	r3, #156	; 0x9c
    511a:	2700      	movs	r7, #0
    511c:	7123      	strb	r3, [r4, #4]
    511e:	0a1a      	lsrs	r2, r3, #8
    5120:	7162      	strb	r2, [r4, #5]
    5122:	0c1a      	lsrs	r2, r3, #16
    5124:	71a2      	strb	r2, [r4, #6]
    5126:	0e1a      	lsrs	r2, r3, #24
    5128:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    512a:	0025      	movs	r5, r4
    512c:	352c      	adds	r5, #44	; 0x2c
    512e:	7025      	strb	r5, [r4, #0]
    5130:	0a2a      	lsrs	r2, r5, #8
    5132:	7062      	strb	r2, [r4, #1]
    5134:	0c2a      	lsrs	r2, r5, #16
    5136:	70a2      	strb	r2, [r4, #2]
    5138:	0e2a      	lsrs	r2, r5, #24
    513a:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    513c:	22ff      	movs	r2, #255	; 0xff
    513e:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    5140:	3af5      	subs	r2, #245	; 0xf5
    5142:	76a2      	strb	r2, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    5144:	2008      	movs	r0, #8
    5146:	2208      	movs	r2, #8
    5148:	76e2      	strb	r2, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    514a:	2260      	movs	r2, #96	; 0x60
    514c:	4252      	negs	r2, r2
    514e:	4694      	mov	ip, r2
    5150:	7522      	strb	r2, [r4, #20]
    5152:	2270      	movs	r2, #112	; 0x70
    5154:	7562      	strb	r2, [r4, #21]
    5156:	75a0      	strb	r0, [r4, #22]
    5158:	2237      	movs	r2, #55	; 0x37
    515a:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    515c:	2218      	movs	r2, #24
    515e:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    5160:	2204      	movs	r2, #4
    5162:	4691      	mov	r9, r2
    5164:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    5166:	7767      	strb	r7, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_NA;
    5168:	2240      	movs	r2, #64	; 0x40
    516a:	4692      	mov	sl, r2
    516c:	32fc      	adds	r2, #252	; 0xfc
    516e:	4651      	mov	r1, sl
    5170:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_NA;
    5172:	223e      	movs	r2, #62	; 0x3e
    5174:	32ff      	adds	r2, #255	; 0xff
    5176:	2108      	movs	r1, #8
    5178:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    517a:	3a05      	subs	r2, #5
    517c:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    517e:	223a      	movs	r2, #58	; 0x3a
    5180:	32ff      	adds	r2, #255	; 0xff
    5182:	4649      	mov	r1, r9
    5184:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    5186:	3201      	adds	r2, #1
    5188:	2108      	movs	r1, #8
    518a:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    518c:	3a2e      	subs	r2, #46	; 0x2e
    518e:	3aff      	subs	r2, #255	; 0xff
    5190:	213c      	movs	r1, #60	; 0x3c
    5192:	31ff      	adds	r1, #255	; 0xff
    5194:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    5196:	3103      	adds	r1, #3
    5198:	220a      	movs	r2, #10
    519a:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    519c:	2260      	movs	r2, #96	; 0x60
    519e:	3912      	subs	r1, #18
    51a0:	5462      	strb	r2, [r4, r1]
    51a2:	0021      	movs	r1, r4
    51a4:	312d      	adds	r1, #45	; 0x2d
    51a6:	31ff      	adds	r1, #255	; 0xff
    51a8:	2201      	movs	r2, #1
    51aa:	704a      	strb	r2, [r1, #1]
    51ac:	2238      	movs	r2, #56	; 0x38
    51ae:	4252      	negs	r2, r2
    51b0:	708a      	strb	r2, [r1, #2]
    51b2:	2235      	movs	r2, #53	; 0x35
    51b4:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    51b6:	2240      	movs	r2, #64	; 0x40
    51b8:	4252      	negs	r2, r2
    51ba:	2198      	movs	r1, #152	; 0x98
    51bc:	0049      	lsls	r1, r1, #1
    51be:	5462      	strb	r2, [r4, r1]
    51c0:	0021      	movs	r1, r4
    51c2:	3131      	adds	r1, #49	; 0x31
    51c4:	31ff      	adds	r1, #255	; 0xff
    51c6:	2251      	movs	r2, #81	; 0x51
    51c8:	4252      	negs	r2, r2
    51ca:	704a      	strb	r2, [r1, #1]
    51cc:	222e      	movs	r2, #46	; 0x2e
    51ce:	4252      	negs	r2, r2
    51d0:	708a      	strb	r2, [r1, #2]
    51d2:	2235      	movs	r2, #53	; 0x35
    51d4:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    51d6:	219a      	movs	r1, #154	; 0x9a
    51d8:	0049      	lsls	r1, r1, #1
    51da:	4662      	mov	r2, ip
    51dc:	5462      	strb	r2, [r4, r1]
    51de:	0021      	movs	r1, r4
    51e0:	3135      	adds	r1, #53	; 0x35
    51e2:	31ff      	adds	r1, #255	; 0xff
    51e4:	2270      	movs	r2, #112	; 0x70
    51e6:	704a      	strb	r2, [r1, #1]
    51e8:	7088      	strb	r0, [r1, #2]
    51ea:	2037      	movs	r0, #55	; 0x37
    51ec:	70c8      	strb	r0, [r1, #3]
	RegParams.Rx1DrOffset = 3;
    51ee:	2003      	movs	r0, #3
    51f0:	2124      	movs	r1, #36	; 0x24
    51f2:	5460      	strb	r0, [r4, r1]
	RegParams.maxTxPwrIndx = 10;
    51f4:	3101      	adds	r1, #1
    51f6:	220a      	movs	r2, #10
    51f8:	5462      	strb	r2, [r4, r1]
	RegParams.band = ismBand;
    51fa:	2226      	movs	r2, #38	; 0x26
    51fc:	4669      	mov	r1, sp
    51fe:	7b09      	ldrb	r1, [r1, #12]
    5200:	54a1      	strb	r1, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    5202:	326a      	adds	r2, #106	; 0x6a
    5204:	4923      	ldr	r1, [pc, #140]	; (5294 <LORAReg_InitNA+0x1a8>)
    5206:	0018      	movs	r0, r3
    5208:	4b23      	ldr	r3, [pc, #140]	; (5298 <LORAReg_InitNA+0x1ac>)
    520a:	4699      	mov	r9, r3
    520c:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    520e:	2270      	movs	r2, #112	; 0x70
    5210:	4922      	ldr	r1, [pc, #136]	; (529c <LORAReg_InitNA+0x1b0>)
    5212:	0028      	movs	r0, r5
    5214:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    5216:	2340      	movs	r3, #64	; 0x40
    5218:	33ff      	adds	r3, #255	; 0xff
    521a:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    521c:	33b5      	adds	r3, #181	; 0xb5
    521e:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_NA_ALT_CH;
    5220:	2200      	movs	r2, #0
    5222:	23f6      	movs	r3, #246	; 0xf6
    5224:	33ff      	adds	r3, #255	; 0xff
    5226:	54e2      	strb	r2, [r4, r3]
    5228:	0023      	movs	r3, r4
    522a:	33f6      	adds	r3, #246	; 0xf6
    522c:	33ff      	adds	r3, #255	; 0xff
    522e:	4642      	mov	r2, r8
    5230:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    5232:	23f8      	movs	r3, #248	; 0xf8
    5234:	33ff      	adds	r3, #255	; 0xff
    5236:	2201      	movs	r2, #1
    5238:	54e2      	strb	r2, [r4, r3]
    523a:	0023      	movs	r3, r4
    523c:	33f8      	adds	r3, #248	; 0xf8
    523e:	33ff      	adds	r3, #255	; 0xff
    5240:	4642      	mov	r2, r8
    5242:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    5244:	2200      	movs	r2, #0
    5246:	23fa      	movs	r3, #250	; 0xfa
    5248:	33ff      	adds	r3, #255	; 0xff
    524a:	54e2      	strb	r2, [r4, r3]
    524c:	0023      	movs	r3, r4
    524e:	33fa      	adds	r3, #250	; 0xfa
    5250:	33ff      	adds	r3, #255	; 0xff
    5252:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    5254:	23fc      	movs	r3, #252	; 0xfc
    5256:	33ff      	adds	r3, #255	; 0xff
    5258:	54e2      	strb	r2, [r4, r3]
    525a:	18e4      	adds	r4, r4, r3
    525c:	2300      	movs	r3, #0
    525e:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    5260:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    5262:	711e      	strb	r6, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    5264:	4a0e      	ldr	r2, [pc, #56]	; (52a0 <LORAReg_InitNA+0x1b4>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    5266:	9200      	str	r2, [sp, #0]
    5268:	490e      	ldr	r1, [pc, #56]	; (52a4 <LORAReg_InitNA+0x1b8>)
    526a:	9a05      	ldr	r2, [sp, #20]
    526c:	4b0e      	ldr	r3, [pc, #56]	; (52a8 <LORAReg_InitNA+0x1bc>)
    526e:	2002      	movs	r0, #2
    5270:	4c0e      	ldr	r4, [pc, #56]	; (52ac <LORAReg_InitNA+0x1c0>)
    5272:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    5274:	4b0e      	ldr	r3, [pc, #56]	; (52b0 <LORAReg_InitNA+0x1c4>)
    5276:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    5278:	4b0e      	ldr	r3, [pc, #56]	; (52b4 <LORAReg_InitNA+0x1c8>)
    527a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    527c:	4b0e      	ldr	r3, [pc, #56]	; (52b8 <LORAReg_InitNA+0x1cc>)
    527e:	4798      	blx	r3
}
    5280:	2008      	movs	r0, #8
    5282:	b009      	add	sp, #36	; 0x24
    5284:	bc3c      	pop	{r2, r3, r4, r5}
    5286:	4690      	mov	r8, r2
    5288:	4699      	mov	r9, r3
    528a:	46a2      	mov	sl, r4
    528c:	46ab      	mov	fp, r5
    528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5290:	20001290 	.word	0x20001290
    5294:	0001a910 	.word	0x0001a910
    5298:	00013ba5 	.word	0x00013ba5
    529c:	0001a9a0 	.word	0x0001a9a0
    52a0:	000050e9 	.word	0x000050e9
    52a4:	20001088 	.word	0x20001088
    52a8:	0001aa10 	.word	0x0001aa10
    52ac:	00008ec1 	.word	0x00008ec1
    52b0:	00007e69 	.word	0x00007e69
    52b4:	000086f1 	.word	0x000086f1
    52b8:	000089d9 	.word	0x000089d9

000052bc <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    52bc:	2015      	movs	r0, #21
    52be:	4770      	bx	lr

000052c0 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    52c0:	2015      	movs	r0, #21
    52c2:	4770      	bx	lr

000052c4 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    52c4:	2322      	movs	r3, #34	; 0x22
    52c6:	4902      	ldr	r1, [pc, #8]	; (52d0 <LORAREG_GetAttr_MaxChannel+0xc>)
    52c8:	5ccb      	ldrb	r3, [r1, r3]
    52ca:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    52cc:	2008      	movs	r0, #8
    52ce:	4770      	bx	lr
    52d0:	20001290 	.word	0x20001290

000052d4 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    52d4:	4b04      	ldr	r3, [pc, #16]	; (52e8 <LORAREG_GetAttr_MinNewChIndex+0x14>)
    52d6:	7e59      	ldrb	r1, [r3, #25]
    52d8:	7011      	strb	r1, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    52da:	7e5b      	ldrb	r3, [r3, #25]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    52dc:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    52de:	2bff      	cmp	r3, #255	; 0xff
    52e0:	d000      	beq.n	52e4 <LORAREG_GetAttr_MinNewChIndex+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    52e2:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    52e4:	3002      	adds	r0, #2
    52e6:	e7fc      	b.n	52e2 <LORAREG_GetAttr_MinNewChIndex+0xe>
    52e8:	20001290 	.word	0x20001290

000052ec <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    52ec:	4b02      	ldr	r3, [pc, #8]	; (52f8 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    52ee:	7e9b      	ldrb	r3, [r3, #26]
    52f0:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    52f2:	2008      	movs	r0, #8
    52f4:	4770      	bx	lr
    52f6:	46c0      	nop			; (mov r8, r8)
    52f8:	20001290 	.word	0x20001290

000052fc <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    52fc:	4b02      	ldr	r3, [pc, #8]	; (5308 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    52fe:	7edb      	ldrb	r3, [r3, #27]
    5300:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5302:	2008      	movs	r0, #8
    5304:	4770      	bx	lr
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	20001290 	.word	0x20001290

0000530c <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    530c:	4b02      	ldr	r3, [pc, #8]	; (5318 <LORAREG_GetAttr_RegFeatures+0xc>)
    530e:	7e1b      	ldrb	r3, [r3, #24]
    5310:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5312:	2008      	movs	r0, #8
    5314:	4770      	bx	lr
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	20001290 	.word	0x20001290

0000531c <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    531c:	b530      	push	{r4, r5, lr}
    531e:	b083      	sub	sp, #12
    5320:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    5322:	780c      	ldrb	r4, [r1, #0]
    5324:	a901      	add	r1, sp, #4
    5326:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5328:	2301      	movs	r3, #1
    532a:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    532c:	4b0d      	ldr	r3, [pc, #52]	; (5364 <LORAREG_GetAttr_DataRange+0x48>)
    532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5330:	2015      	movs	r0, #21
    5332:	4798      	blx	r3
    5334:	2808      	cmp	r0, #8
    5336:	d004      	beq.n	5342 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    5338:	23ff      	movs	r3, #255	; 0xff
    533a:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    533c:	200a      	movs	r0, #10
	}
	return result;
}
    533e:	b003      	add	sp, #12
    5340:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    5342:	4909      	ldr	r1, [pc, #36]	; (5368 <LORAREG_GetAttr_DataRange+0x4c>)
    5344:	790b      	ldrb	r3, [r1, #4]
    5346:	794a      	ldrb	r2, [r1, #5]
    5348:	0212      	lsls	r2, r2, #8
    534a:	4313      	orrs	r3, r2
    534c:	798a      	ldrb	r2, [r1, #6]
    534e:	0412      	lsls	r2, r2, #16
    5350:	431a      	orrs	r2, r3
    5352:	79cb      	ldrb	r3, [r1, #7]
    5354:	061b      	lsls	r3, r3, #24
    5356:	431a      	orrs	r2, r3
    5358:	0063      	lsls	r3, r4, #1
    535a:	189b      	adds	r3, r3, r2
    535c:	785b      	ldrb	r3, [r3, #1]
    535e:	702b      	strb	r3, [r5, #0]
    5360:	e7ed      	b.n	533e <LORAREG_GetAttr_DataRange+0x22>
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	20000ce0 	.word	0x20000ce0
    5368:	20001290 	.word	0x20001290

0000536c <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    536c:	b530      	push	{r4, r5, lr}
    536e:	b083      	sub	sp, #12
    5370:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    5372:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    5374:	a901      	add	r1, sp, #4
    5376:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    5378:	2301      	movs	r3, #1
    537a:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    537c:	4b0c      	ldr	r3, [pc, #48]	; (53b0 <LORAREG_GetAttr_ChIdStatus+0x44>)
    537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5380:	2015      	movs	r0, #21
    5382:	4798      	blx	r3
    5384:	2808      	cmp	r0, #8
    5386:	d004      	beq.n	5392 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    5388:	2300      	movs	r3, #0
    538a:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    538c:	200a      	movs	r0, #10
	}
	return result;
}
    538e:	b003      	add	sp, #12
    5390:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    5392:	4908      	ldr	r1, [pc, #32]	; (53b4 <LORAREG_GetAttr_ChIdStatus+0x48>)
    5394:	790a      	ldrb	r2, [r1, #4]
    5396:	794b      	ldrb	r3, [r1, #5]
    5398:	021b      	lsls	r3, r3, #8
    539a:	4313      	orrs	r3, r2
    539c:	798a      	ldrb	r2, [r1, #6]
    539e:	0412      	lsls	r2, r2, #16
    53a0:	4313      	orrs	r3, r2
    53a2:	79ca      	ldrb	r2, [r1, #7]
    53a4:	0612      	lsls	r2, r2, #24
    53a6:	431a      	orrs	r2, r3
    53a8:	0064      	lsls	r4, r4, #1
    53aa:	5ca3      	ldrb	r3, [r4, r2]
    53ac:	702b      	strb	r3, [r5, #0]
    53ae:	e7ee      	b.n	538e <LORAREG_GetAttr_ChIdStatus+0x22>
    53b0:	20000ce0 	.word	0x20000ce0
    53b4:	20001290 	.word	0x20001290

000053b8 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    53b8:	2301      	movs	r3, #1
    53ba:	425b      	negs	r3, r3
    53bc:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    53be:	200a      	movs	r0, #10
    53c0:	4770      	bx	lr

000053c2 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    53c2:	2301      	movs	r3, #1
    53c4:	425b      	negs	r3, r3
    53c6:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    53c8:	200a      	movs	r0, #10
    53ca:	4770      	bx	lr

000053cc <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    53cc:	23fa      	movs	r3, #250	; 0xfa
    53ce:	009b      	lsls	r3, r3, #2
    53d0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53d2:	2008      	movs	r0, #8
    53d4:	4770      	bx	lr

000053d6 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    53d6:	23fa      	movs	r3, #250	; 0xfa
    53d8:	00db      	lsls	r3, r3, #3
    53da:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53dc:	2008      	movs	r0, #8
    53de:	4770      	bx	lr

000053e0 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    53e0:	4b01      	ldr	r3, [pc, #4]	; (53e8 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    53e2:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53e4:	2008      	movs	r0, #8
    53e6:	4770      	bx	lr
    53e8:	00001388 	.word	0x00001388

000053ec <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    53ec:	4b01      	ldr	r3, [pc, #4]	; (53f4 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    53ee:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53f0:	2008      	movs	r0, #8
    53f2:	4770      	bx	lr
    53f4:	00001770 	.word	0x00001770

000053f8 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    53f8:	23fa      	movs	r3, #250	; 0xfa
    53fa:	00db      	lsls	r3, r3, #3
    53fc:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    53fe:	2008      	movs	r0, #8
    5400:	4770      	bx	lr

00005402 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    5402:	2320      	movs	r3, #32
    5404:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5406:	2008      	movs	r0, #8
    5408:	4770      	bx	lr

0000540a <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    540a:	2340      	movs	r3, #64	; 0x40
    540c:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    540e:	2008      	movs	r0, #8
    5410:	4770      	bx	lr

00005412 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    5412:	2380      	movs	r3, #128	; 0x80
    5414:	01db      	lsls	r3, r3, #7
    5416:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5418:	2008      	movs	r0, #8
    541a:	4770      	bx	lr

0000541c <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    541c:	4b02      	ldr	r3, [pc, #8]	; (5428 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    541e:	7fdb      	ldrb	r3, [r3, #31]
    5420:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5422:	2008      	movs	r0, #8
    5424:	4770      	bx	lr
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	20001290 	.word	0x20001290

0000542c <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    542c:	4b02      	ldr	r3, [pc, #8]	; (5438 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    542e:	7f9b      	ldrb	r3, [r3, #30]
    5430:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5432:	2008      	movs	r0, #8
    5434:	4770      	bx	lr
    5436:	46c0      	nop			; (mov r8, r8)
    5438:	20001290 	.word	0x20001290

0000543c <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    543c:	2327      	movs	r3, #39	; 0x27
    543e:	4902      	ldr	r1, [pc, #8]	; (5448 <LORAREG_GetAttr_CurChIndx+0xc>)
    5440:	5ccb      	ldrb	r3, [r1, r3]
    5442:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    5444:	2008      	movs	r0, #8
    5446:	4770      	bx	lr
    5448:	20001290 	.word	0x20001290

0000544c <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    544c:	4b09      	ldr	r3, [pc, #36]	; (5474 <LORAREG_GetAttr_DefLBTParams+0x28>)
    544e:	21d4      	movs	r1, #212	; 0xd4
    5450:	0049      	lsls	r1, r1, #1
    5452:	5c59      	ldrb	r1, [r3, r1]
    5454:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    5456:	21d3      	movs	r1, #211	; 0xd3
    5458:	0049      	lsls	r1, r1, #1
    545a:	5c59      	ldrb	r1, [r3, r1]
    545c:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    545e:	21a8      	movs	r1, #168	; 0xa8
    5460:	31ff      	adds	r1, #255	; 0xff
    5462:	565b      	ldrsb	r3, [r3, r1]
    5464:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    5466:	2301      	movs	r3, #1
    5468:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    546a:	3304      	adds	r3, #4
    546c:	8093      	strh	r3, [r2, #4]
	return 0;
}
    546e:	2000      	movs	r0, #0
    5470:	4770      	bx	lr
    5472:	46c0      	nop			; (mov r8, r8)
    5474:	20001290 	.word	0x20001290

00005478 <LORAREG_GetAttr_FreqT1>:
{
    5478:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    547a:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    547c:	2122      	movs	r1, #34	; 0x22
    547e:	4820      	ldr	r0, [pc, #128]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    5480:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    5482:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    5484:	428b      	cmp	r3, r1
    5486:	dc3a      	bgt.n	54fe <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    5488:	3033      	adds	r0, #51	; 0x33
    548a:	30ff      	adds	r0, #255	; 0xff
    548c:	4c1c      	ldr	r4, [pc, #112]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    548e:	5c24      	ldrb	r4, [r4, r0]
    5490:	42a3      	cmp	r3, r4
    5492:	d31c      	bcc.n	54ce <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    5494:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    5496:	428b      	cmp	r3, r1
    5498:	da31      	bge.n	54fe <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    549a:	1b1b      	subs	r3, r3, r4
    549c:	4919      	ldr	r1, [pc, #100]	; (5504 <LORAREG_GetAttr_FreqT1+0x8c>)
    549e:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    54a0:	4c17      	ldr	r4, [pc, #92]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    54a2:	2198      	movs	r1, #152	; 0x98
    54a4:	0049      	lsls	r1, r1, #1
    54a6:	5c61      	ldrb	r1, [r4, r1]
    54a8:	2032      	movs	r0, #50	; 0x32
    54aa:	30ff      	adds	r0, #255	; 0xff
    54ac:	5c20      	ldrb	r0, [r4, r0]
    54ae:	0200      	lsls	r0, r0, #8
    54b0:	4301      	orrs	r1, r0
    54b2:	2099      	movs	r0, #153	; 0x99
    54b4:	0040      	lsls	r0, r0, #1
    54b6:	5c20      	ldrb	r0, [r4, r0]
    54b8:	0400      	lsls	r0, r0, #16
    54ba:	4308      	orrs	r0, r1
    54bc:	2134      	movs	r1, #52	; 0x34
    54be:	31ff      	adds	r1, #255	; 0xff
    54c0:	5c61      	ldrb	r1, [r4, r1]
    54c2:	0609      	lsls	r1, r1, #24
    54c4:	4301      	orrs	r1, r0
    54c6:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    54c8:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    54ca:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    54cc:	e017      	b.n	54fe <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    54ce:	4c0c      	ldr	r4, [pc, #48]	; (5500 <LORAREG_GetAttr_FreqT1+0x88>)
    54d0:	2196      	movs	r1, #150	; 0x96
    54d2:	0049      	lsls	r1, r1, #1
    54d4:	5c61      	ldrb	r1, [r4, r1]
    54d6:	202e      	movs	r0, #46	; 0x2e
    54d8:	30ff      	adds	r0, #255	; 0xff
    54da:	5c20      	ldrb	r0, [r4, r0]
    54dc:	0200      	lsls	r0, r0, #8
    54de:	4308      	orrs	r0, r1
    54e0:	2197      	movs	r1, #151	; 0x97
    54e2:	0049      	lsls	r1, r1, #1
    54e4:	5c61      	ldrb	r1, [r4, r1]
    54e6:	0409      	lsls	r1, r1, #16
    54e8:	4308      	orrs	r0, r1
    54ea:	2130      	movs	r1, #48	; 0x30
    54ec:	31ff      	adds	r1, #255	; 0xff
    54ee:	5c61      	ldrb	r1, [r4, r1]
    54f0:	0609      	lsls	r1, r1, #24
    54f2:	4301      	orrs	r1, r0
    54f4:	4804      	ldr	r0, [pc, #16]	; (5508 <LORAREG_GetAttr_FreqT1+0x90>)
    54f6:	4343      	muls	r3, r0
    54f8:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    54fa:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    54fc:	2008      	movs	r0, #8
}
    54fe:	bd30      	pop	{r4, r5, pc}
    5500:	20001290 	.word	0x20001290
    5504:	00186a00 	.word	0x00186a00
    5508:	00030d40 	.word	0x00030d40

0000550c <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    550c:	780a      	ldrb	r2, [r1, #0]
    550e:	233a      	movs	r3, #58	; 0x3a
    5510:	33ff      	adds	r3, #255	; 0xff
    5512:	4903      	ldr	r1, [pc, #12]	; (5520 <ValidateDataRateTxT1+0x14>)
    5514:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5516:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    5518:	429a      	cmp	r2, r3
    551a:	d900      	bls.n	551e <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    551c:	3002      	adds	r0, #2
	}
	
	return result;
}
    551e:	4770      	bx	lr
    5520:	20001290 	.word	0x20001290

00005524 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5524:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    5526:	4a08      	ldr	r2, [pc, #32]	; (5548 <ValidateDataRateTxT2+0x24>)
    5528:	7f12      	ldrb	r2, [r2, #28]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    552a:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    552c:	429a      	cmp	r2, r3
    552e:	d30a      	bcc.n	5546 <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    5530:	22ac      	movs	r2, #172	; 0xac
    5532:	32ff      	adds	r2, #255	; 0xff
    5534:	4904      	ldr	r1, [pc, #16]	; (5548 <ValidateDataRateTxT2+0x24>)
    5536:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5538:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    553a:	07d2      	lsls	r2, r2, #31
    553c:	d503      	bpl.n	5546 <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    553e:	7e8a      	ldrb	r2, [r1, #26]
    5540:	429a      	cmp	r2, r3
    5542:	d900      	bls.n	5546 <ValidateDataRateTxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    5544:	3002      	adds	r0, #2
	}
	
	return result;
}
    5546:	4770      	bx	lr
    5548:	20001290 	.word	0x20001290

0000554c <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    554c:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    554e:	223c      	movs	r2, #60	; 0x3c
    5550:	32ff      	adds	r2, #255	; 0xff
    5552:	4906      	ldr	r1, [pc, #24]	; (556c <ValidateDataRateRxT1+0x20>)
    5554:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    5556:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5558:	429a      	cmp	r2, r3
    555a:	d306      	bcc.n	556a <ValidateDataRateRxT1+0x1e>
    555c:	229d      	movs	r2, #157	; 0x9d
    555e:	0052      	lsls	r2, r2, #1
    5560:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5562:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    5564:	429a      	cmp	r2, r3
    5566:	d900      	bls.n	556a <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    5568:	3002      	adds	r0, #2
	}
	return result;
}
    556a:	4770      	bx	lr
    556c:	20001290 	.word	0x20001290

00005570 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    5570:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    5572:	4a08      	ldr	r2, [pc, #32]	; (5594 <ValidateDataRateRxT2+0x24>)
    5574:	7f12      	ldrb	r2, [r2, #28]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    5576:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    5578:	429a      	cmp	r2, r3
    557a:	d30a      	bcc.n	5592 <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    557c:	22ac      	movs	r2, #172	; 0xac
    557e:	32ff      	adds	r2, #255	; 0xff
    5580:	4904      	ldr	r1, [pc, #16]	; (5594 <ValidateDataRateRxT2+0x24>)
    5582:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5584:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    5586:	0792      	lsls	r2, r2, #30
    5588:	d503      	bpl.n	5592 <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    558a:	7e8a      	ldrb	r2, [r1, #26]
    558c:	429a      	cmp	r2, r3
    558e:	d900      	bls.n	5592 <ValidateDataRateRxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    5590:	3002      	adds	r0, #2
	}

	return result;
}
    5592:	4770      	bx	lr
    5594:	20001290 	.word	0x20001290

00005598 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    5598:	780a      	ldrb	r2, [r1, #0]
    559a:	2322      	movs	r3, #34	; 0x22
    559c:	4903      	ldr	r1, [pc, #12]	; (55ac <ValidateChannelId+0x14>)
    559e:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    55a0:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    55a2:	429a      	cmp	r2, r3
    55a4:	db00      	blt.n	55a8 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    55a6:	3002      	adds	r0, #2
    }
	
    return result;
}
    55a8:	4770      	bx	lr
    55aa:	46c0      	nop			; (mov r8, r8)
    55ac:	20001290 	.word	0x20001290

000055b0 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    55b0:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55b2:	2222      	movs	r2, #34	; 0x22
    55b4:	4808      	ldr	r0, [pc, #32]	; (55d8 <ValidateChannelIdT2+0x28>)
    55b6:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    55b8:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55ba:	4293      	cmp	r3, r2
    55bc:	da0a      	bge.n	55d4 <ValidateChannelIdT2+0x24>
    55be:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    55c0:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55c2:	2a00      	cmp	r2, #0
    55c4:	d106      	bne.n	55d4 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    55c6:	22aa      	movs	r2, #170	; 0xaa
    55c8:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    55ca:	4903      	ldr	r1, [pc, #12]	; (55d8 <ValidateChannelIdT2+0x28>)
    55cc:	5c8a      	ldrb	r2, [r1, r2]
    55ce:	429a      	cmp	r2, r3
    55d0:	d900      	bls.n	55d4 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    55d2:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    55d4:	4770      	bx	lr
    55d6:	46c0      	nop			; (mov r8, r8)
    55d8:	20001290 	.word	0x20001290

000055dc <LORAREG_GetAttr_DutyCycleT2>:
{
    55dc:	b530      	push	{r4, r5, lr}
    55de:	b083      	sub	sp, #12
    55e0:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    55e2:	780d      	ldrb	r5, [r1, #0]
    55e4:	a901      	add	r1, sp, #4
    55e6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    55e8:	2301      	movs	r3, #1
    55ea:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    55ec:	2015      	movs	r0, #21
    55ee:	4b0b      	ldr	r3, [pc, #44]	; (561c <LORAREG_GetAttr_DutyCycleT2+0x40>)
    55f0:	4798      	blx	r3
    55f2:	2808      	cmp	r0, #8
    55f4:	d002      	beq.n	55fc <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    55f6:	200a      	movs	r0, #10
}
    55f8:	b003      	add	sp, #12
    55fa:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    55fc:	4a08      	ldr	r2, [pc, #32]	; (5620 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    55fe:	006b      	lsls	r3, r5, #1
    5600:	195b      	adds	r3, r3, r5
    5602:	009b      	lsls	r3, r3, #2
    5604:	18d3      	adds	r3, r2, r3
    5606:	3394      	adds	r3, #148	; 0x94
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    5608:	781b      	ldrb	r3, [r3, #0]
    560a:	33c8      	adds	r3, #200	; 0xc8
    560c:	005b      	lsls	r3, r3, #1
    560e:	18d2      	adds	r2, r2, r3
    5610:	7991      	ldrb	r1, [r2, #6]
    5612:	79d3      	ldrb	r3, [r2, #7]
    5614:	021b      	lsls	r3, r3, #8
    5616:	430b      	orrs	r3, r1
    5618:	8023      	strh	r3, [r4, #0]
    561a:	e7ed      	b.n	55f8 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    561c:	000055b1 	.word	0x000055b1
    5620:	20001290 	.word	0x20001290

00005624 <LORAREG_GetAttr_MinMaxDr>:
{
    5624:	b5f0      	push	{r4, r5, r6, r7, lr}
    5626:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    5628:	4b1a      	ldr	r3, [pc, #104]	; (5694 <LORAREG_GetAttr_MinMaxDr+0x70>)
    562a:	7f1c      	ldrb	r4, [r3, #28]
	uint8_t maxDataRate = RegParams.maxDataRate;
    562c:	7f5f      	ldrb	r7, [r3, #29]

	for (i = 0; i < RegParams.maxChannels; i++)
    562e:	2122      	movs	r1, #34	; 0x22
    5630:	565e      	ldrsb	r6, [r3, r1]
    5632:	2e00      	cmp	r6, #0
    5634:	dd28      	ble.n	5688 <LORAREG_GetAttr_MinMaxDr+0x64>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5636:	0019      	movs	r1, r3
    5638:	791d      	ldrb	r5, [r3, #4]
    563a:	795b      	ldrb	r3, [r3, #5]
    563c:	021b      	lsls	r3, r3, #8
    563e:	432b      	orrs	r3, r5
    5640:	798d      	ldrb	r5, [r1, #6]
    5642:	042d      	lsls	r5, r5, #16
    5644:	432b      	orrs	r3, r5
    5646:	79cd      	ldrb	r5, [r1, #7]
    5648:	062d      	lsls	r5, r5, #24
    564a:	431d      	orrs	r5, r3
    564c:	2100      	movs	r1, #0
    564e:	e00b      	b.n	5668 <LORAREG_GetAttr_MinMaxDr+0x44>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5650:	7843      	ldrb	r3, [r0, #1]
    5652:	091b      	lsrs	r3, r3, #4
    5654:	42bb      	cmp	r3, r7
    5656:	dd03      	ble.n	5660 <LORAREG_GetAttr_MinMaxDr+0x3c>
    5658:	7800      	ldrb	r0, [r0, #0]
    565a:	2800      	cmp	r0, #0
    565c:	d000      	beq.n	5660 <LORAREG_GetAttr_MinMaxDr+0x3c>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    565e:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    5660:	3101      	adds	r1, #1
    5662:	b2c9      	uxtb	r1, r1
    5664:	42b1      	cmp	r1, r6
    5666:	da0f      	bge.n	5688 <LORAREG_GetAttr_MinMaxDr+0x64>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    5668:	0048      	lsls	r0, r1, #1
    566a:	1828      	adds	r0, r5, r0
    566c:	7843      	ldrb	r3, [r0, #1]
    566e:	071b      	lsls	r3, r3, #28
    5670:	0f1b      	lsrs	r3, r3, #28
    5672:	42a3      	cmp	r3, r4
    5674:	daec      	bge.n	5650 <LORAREG_GetAttr_MinMaxDr+0x2c>
    5676:	7802      	ldrb	r2, [r0, #0]
    5678:	2a00      	cmp	r2, #0
    567a:	d0f1      	beq.n	5660 <LORAREG_GetAttr_MinMaxDr+0x3c>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    567c:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    567e:	7843      	ldrb	r3, [r0, #1]
    5680:	091b      	lsrs	r3, r3, #4
    5682:	42bb      	cmp	r3, r7
    5684:	dceb      	bgt.n	565e <LORAREG_GetAttr_MinMaxDr+0x3a>
    5686:	e7eb      	b.n	5660 <LORAREG_GetAttr_MinMaxDr+0x3c>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    5688:	4663      	mov	r3, ip
    568a:	701c      	strb	r4, [r3, #0]
    568c:	705f      	strb	r7, [r3, #1]
}
    568e:	2008      	movs	r0, #8
    5690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	20001290 	.word	0x20001290

00005698 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    5698:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    569a:	2b05      	cmp	r3, #5
    569c:	d004      	beq.n	56a8 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    569e:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    56a0:	2b07      	cmp	r3, #7
    56a2:	d900      	bls.n	56a6 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    56a4:	3002      	adds	r0, #2
    }

    return result;
}
    56a6:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    56a8:	200a      	movs	r0, #10
    56aa:	e7fc      	b.n	56a6 <ValidateChannelMaskCntl+0xe>

000056ac <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    56ac:	780a      	ldrb	r2, [r1, #0]
    56ae:	2325      	movs	r3, #37	; 0x25
    56b0:	4903      	ldr	r1, [pc, #12]	; (56c0 <ValidateTxPower+0x14>)
    56b2:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    56b4:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    56b6:	429a      	cmp	r2, r3
    56b8:	dd00      	ble.n	56bc <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    56ba:	3002      	adds	r0, #2
	}

	return result;
}
    56bc:	4770      	bx	lr
    56be:	46c0      	nop			; (mov r8, r8)
    56c0:	20001290 	.word	0x20001290

000056c4 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    56c4:	2008      	movs	r0, #8
    56c6:	4770      	bx	lr

000056c8 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    56c8:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    56ca:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    56cc:	2900      	cmp	r1, #0
    56ce:	d020      	beq.n	5712 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    56d0:	2322      	movs	r3, #34	; 0x22
    56d2:	4a11      	ldr	r2, [pc, #68]	; (5718 <ValidateChannelMaskT2+0x50>)
    56d4:	56d0      	ldrsb	r0, [r2, r3]
    56d6:	2800      	cmp	r0, #0
    56d8:	dd1b      	ble.n	5712 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    56da:	7a14      	ldrb	r4, [r2, #8]
    56dc:	7a53      	ldrb	r3, [r2, #9]
    56de:	021b      	lsls	r3, r3, #8
    56e0:	4323      	orrs	r3, r4
    56e2:	7a94      	ldrb	r4, [r2, #10]
    56e4:	0424      	lsls	r4, r4, #16
    56e6:	4323      	orrs	r3, r4
    56e8:	7ad4      	ldrb	r4, [r2, #11]
    56ea:	0624      	lsls	r4, r4, #24
    56ec:	431c      	orrs	r4, r3
    56ee:	2300      	movs	r3, #0
    56f0:	2503      	movs	r5, #3
    56f2:	e004      	b.n	56fe <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    56f4:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    56f6:	3301      	adds	r3, #1
    56f8:	b2db      	uxtb	r3, r3
    56fa:	4283      	cmp	r3, r0
    56fc:	da09      	bge.n	5712 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    56fe:	2900      	cmp	r1, #0
    5700:	d0f8      	beq.n	56f4 <ValidateChannelMaskT2+0x2c>
    5702:	005a      	lsls	r2, r3, #1
    5704:	18d2      	adds	r2, r2, r3
    5706:	0092      	lsls	r2, r2, #2
    5708:	18a2      	adds	r2, r4, r2
    570a:	7ad2      	ldrb	r2, [r2, #11]
    570c:	402a      	ands	r2, r5
    570e:	2a03      	cmp	r2, #3
    5710:	d0f0      	beq.n	56f4 <ValidateChannelMaskT2+0x2c>
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
}
    5712:	2008      	movs	r0, #8
    5714:	bd30      	pop	{r4, r5, pc}
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	20001290 	.word	0x20001290

0000571c <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    571c:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    571e:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    5720:	2b00      	cmp	r3, #0
    5722:	d002      	beq.n	572a <ValidateChannelMaskCntlT2+0xe>
    5724:	2b06      	cmp	r3, #6
    5726:	d001      	beq.n	572c <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    5728:	3002      	adds	r0, #2
    }
	return result;
}
    572a:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    572c:	2008      	movs	r0, #8
    572e:	e7fc      	b.n	572a <ValidateChannelMaskCntlT2+0xe>

00005730 <ValidateChMaskChCntlT2>:
{
    5730:	b510      	push	{r4, lr}
    5732:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    5734:	ac01      	add	r4, sp, #4
    5736:	2204      	movs	r2, #4
    5738:	0020      	movs	r0, r4
    573a:	4b0f      	ldr	r3, [pc, #60]	; (5778 <ValidateChMaskChCntlT2+0x48>)
    573c:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    573e:	8863      	ldrh	r3, [r4, #2]
    5740:	2b00      	cmp	r3, #0
    5742:	d104      	bne.n	574e <ValidateChMaskChCntlT2+0x1e>
    5744:	ab01      	add	r3, sp, #4
    5746:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    5748:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    574a:	2a00      	cmp	r2, #0
    574c:	d007      	beq.n	575e <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    574e:	466b      	mov	r3, sp
    5750:	1d99      	adds	r1, r3, #6
    5752:	201a      	movs	r0, #26
    5754:	4b09      	ldr	r3, [pc, #36]	; (577c <ValidateChMaskChCntlT2+0x4c>)
    5756:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    5758:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    575a:	2808      	cmp	r0, #8
    575c:	d002      	beq.n	5764 <ValidateChMaskChCntlT2+0x34>
}
    575e:	0018      	movs	r0, r3
    5760:	b002      	add	sp, #8
    5762:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    5764:	a901      	add	r1, sp, #4
    5766:	3013      	adds	r0, #19
    5768:	4b05      	ldr	r3, [pc, #20]	; (5780 <ValidateChMaskChCntlT2+0x50>)
    576a:	4798      	blx	r3
    576c:	0003      	movs	r3, r0
    576e:	2808      	cmp	r0, #8
    5770:	d0f5      	beq.n	575e <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    5772:	230a      	movs	r3, #10
    5774:	e7f3      	b.n	575e <ValidateChMaskChCntlT2+0x2e>
    5776:	46c0      	nop			; (mov r8, r8)
    5778:	00013ba5 	.word	0x00013ba5
    577c:	000056c9 	.word	0x000056c9
    5780:	0000571d 	.word	0x0000571d

00005784 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    5784:	780a      	ldrb	r2, [r1, #0]
    5786:	4b03      	ldr	r3, [pc, #12]	; (5794 <ValidateDataRate+0x10>)
    5788:	7f1b      	ldrb	r3, [r3, #28]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    578a:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    578c:	429a      	cmp	r2, r3
    578e:	d900      	bls.n	5792 <ValidateDataRate+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    5790:	3002      	adds	r0, #2
    }

    return result;
}
    5792:	4770      	bx	lr
    5794:	20001290 	.word	0x20001290

00005798 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    5798:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    579a:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    579c:	2322      	movs	r3, #34	; 0x22
    579e:	4a14      	ldr	r2, [pc, #80]	; (57f0 <ValidateSupportedDr+0x58>)
    57a0:	56d4      	ldrsb	r4, [r2, r3]
    57a2:	2c00      	cmp	r4, #0
    57a4:	dd22      	ble.n	57ec <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57a6:	7910      	ldrb	r0, [r2, #4]
    57a8:	7953      	ldrb	r3, [r2, #5]
    57aa:	021b      	lsls	r3, r3, #8
    57ac:	4303      	orrs	r3, r0
    57ae:	7990      	ldrb	r0, [r2, #6]
    57b0:	0400      	lsls	r0, r0, #16
    57b2:	4303      	orrs	r3, r0
    57b4:	79d0      	ldrb	r0, [r2, #7]
    57b6:	0600      	lsls	r0, r0, #24
    57b8:	4318      	orrs	r0, r3
    57ba:	2300      	movs	r3, #0
    57bc:	002e      	movs	r6, r5
    57be:	e003      	b.n	57c8 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    57c0:	3301      	adds	r3, #1
    57c2:	b2db      	uxtb	r3, r3
    57c4:	42a3      	cmp	r3, r4
    57c6:	da0f      	bge.n	57e8 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57c8:	005a      	lsls	r2, r3, #1
    57ca:	1882      	adds	r2, r0, r2
    57cc:	7811      	ldrb	r1, [r2, #0]
    57ce:	2900      	cmp	r1, #0
    57d0:	d0f6      	beq.n	57c0 <ValidateSupportedDr+0x28>
    57d2:	7851      	ldrb	r1, [r2, #1]
    57d4:	0709      	lsls	r1, r1, #28
    57d6:	0f09      	lsrs	r1, r1, #28
    57d8:	428d      	cmp	r5, r1
    57da:	dbf1      	blt.n	57c0 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    57dc:	7852      	ldrb	r2, [r2, #1]
    57de:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    57e0:	4296      	cmp	r6, r2
    57e2:	dced      	bgt.n	57c0 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    57e4:	2008      	movs	r0, #8
    57e6:	e000      	b.n	57ea <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    57e8:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    57ea:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    57ec:	200a      	movs	r0, #10
    57ee:	e7fc      	b.n	57ea <ValidateSupportedDr+0x52>
    57f0:	20001290 	.word	0x20001290

000057f4 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    57f4:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    57f6:	6808      	ldr	r0, [r1, #0]
    57f8:	4b07      	ldr	r3, [pc, #28]	; (5818 <ValidateRxFreqT1+0x24>)
    57fa:	469c      	mov	ip, r3
    57fc:	4460      	add	r0, ip
    57fe:	4a07      	ldr	r2, [pc, #28]	; (581c <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    5800:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    5802:	4290      	cmp	r0, r2
    5804:	d806      	bhi.n	5814 <ValidateRxFreqT1+0x20>
    5806:	4906      	ldr	r1, [pc, #24]	; (5820 <ValidateRxFreqT1+0x2c>)
    5808:	4b06      	ldr	r3, [pc, #24]	; (5824 <ValidateRxFreqT1+0x30>)
    580a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    580c:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    580e:	2900      	cmp	r1, #0
    5810:	d000      	beq.n	5814 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    5812:	3302      	adds	r3, #2
	}
	return result;
}
    5814:	0018      	movs	r0, r3
    5816:	bd10      	pop	{r4, pc}
    5818:	c8f78f60 	.word	0xc8f78f60
    581c:	00401640 	.word	0x00401640
    5820:	000927c0 	.word	0x000927c0
    5824:	00010ac9 	.word	0x00010ac9

00005828 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    5828:	780a      	ldrb	r2, [r1, #0]
    582a:	2324      	movs	r3, #36	; 0x24
    582c:	4903      	ldr	r1, [pc, #12]	; (583c <ValidateRx1DataRateOffset+0x14>)
    582e:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    5830:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    5832:	429a      	cmp	r2, r3
    5834:	dc00      	bgt.n	5838 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    5836:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    5838:	4770      	bx	lr
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	20001290 	.word	0x20001290

00005840 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    5840:	b530      	push	{r4, r5, lr}
    5842:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5844:	2321      	movs	r3, #33	; 0x21
    5846:	4a19      	ldr	r2, [pc, #100]	; (58ac <getSubBandId+0x6c>)
    5848:	5cd5      	ldrb	r5, [r2, r3]
    584a:	2d00      	cmp	r5, #0
    584c:	d02c      	beq.n	58a8 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    584e:	0011      	movs	r1, r2
    5850:	7b13      	ldrb	r3, [r2, #12]
    5852:	7b52      	ldrb	r2, [r2, #13]
    5854:	0212      	lsls	r2, r2, #8
    5856:	431a      	orrs	r2, r3
    5858:	7b8b      	ldrb	r3, [r1, #14]
    585a:	041b      	lsls	r3, r3, #16
    585c:	431a      	orrs	r2, r3
    585e:	7bcb      	ldrb	r3, [r1, #15]
    5860:	061b      	lsls	r3, r3, #24
    5862:	4313      	orrs	r3, r2
    5864:	2000      	movs	r0, #0
    5866:	e004      	b.n	5872 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    5868:	3001      	adds	r0, #1
    586a:	b2c0      	uxtb	r0, r0
    586c:	330c      	adds	r3, #12
    586e:	42a8      	cmp	r0, r5
    5870:	d018      	beq.n	58a4 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    5872:	781a      	ldrb	r2, [r3, #0]
    5874:	7859      	ldrb	r1, [r3, #1]
    5876:	0209      	lsls	r1, r1, #8
    5878:	4311      	orrs	r1, r2
    587a:	789a      	ldrb	r2, [r3, #2]
    587c:	0412      	lsls	r2, r2, #16
    587e:	4311      	orrs	r1, r2
    5880:	78da      	ldrb	r2, [r3, #3]
    5882:	0612      	lsls	r2, r2, #24
    5884:	430a      	orrs	r2, r1
    5886:	42a2      	cmp	r2, r4
    5888:	d8ee      	bhi.n	5868 <getSubBandId+0x28>
    588a:	791a      	ldrb	r2, [r3, #4]
    588c:	7959      	ldrb	r1, [r3, #5]
    588e:	0209      	lsls	r1, r1, #8
    5890:	4311      	orrs	r1, r2
    5892:	799a      	ldrb	r2, [r3, #6]
    5894:	0412      	lsls	r2, r2, #16
    5896:	4311      	orrs	r1, r2
    5898:	79da      	ldrb	r2, [r3, #7]
    589a:	0612      	lsls	r2, r2, #24
    589c:	430a      	orrs	r2, r1
    589e:	4294      	cmp	r4, r2
    58a0:	d8e2      	bhi.n	5868 <getSubBandId+0x28>
    58a2:	e000      	b.n	58a6 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    58a4:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    58a6:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    58a8:	20ff      	movs	r0, #255	; 0xff
    58aa:	e7fc      	b.n	58a6 <getSubBandId+0x66>
    58ac:	20001290 	.word	0x20001290

000058b0 <ValidateFreq>:
{
    58b0:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    58b2:	6808      	ldr	r0, [r1, #0]
    58b4:	4b04      	ldr	r3, [pc, #16]	; (58c8 <ValidateFreq+0x18>)
    58b6:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    58b8:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    58ba:	28ff      	cmp	r0, #255	; 0xff
    58bc:	d001      	beq.n	58c2 <ValidateFreq+0x12>
}
    58be:	0018      	movs	r0, r3
    58c0:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    58c2:	3302      	adds	r3, #2
    58c4:	e7fb      	b.n	58be <ValidateFreq+0xe>
    58c6:	46c0      	nop			; (mov r8, r8)
    58c8:	00005841 	.word	0x00005841

000058cc <ValidateFrequencyAS>:
 */
#if(AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    58cc:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    58ce:	2226      	movs	r2, #38	; 0x26
    58d0:	4919      	ldr	r1, [pc, #100]	; (5938 <ValidateFrequencyAS+0x6c>)
    58d2:	5c8a      	ldrb	r2, [r1, r2]
    58d4:	1f91      	subs	r1, r2, #6
    58d6:	2903      	cmp	r1, #3
    58d8:	d808      	bhi.n	58ec <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    58da:	4a18      	ldr	r2, [pc, #96]	; (593c <ValidateFrequencyAS+0x70>)
    58dc:	4694      	mov	ip, r2
    58de:	4463      	add	r3, ip
    58e0:	4a17      	ldr	r2, [pc, #92]	; (5940 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    58e2:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    58e4:	4293      	cmp	r3, r2
    58e6:	d900      	bls.n	58ea <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    58e8:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    58ea:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    58ec:	2a0a      	cmp	r2, #10
    58ee:	d011      	beq.n	5914 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    58f0:	2a0b      	cmp	r2, #11
    58f2:	d018      	beq.n	5926 <ValidateFrequencyAS+0x5a>
    58f4:	0011      	movs	r1, r2
    58f6:	390d      	subs	r1, #13
    58f8:	2901      	cmp	r1, #1
    58fa:	d914      	bls.n	5926 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    58fc:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    58fe:	2a0c      	cmp	r2, #12
    5900:	d1f3      	bne.n	58ea <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5902:	4a10      	ldr	r2, [pc, #64]	; (5944 <ValidateFrequencyAS+0x78>)
    5904:	4694      	mov	ip, r2
    5906:	4463      	add	r3, ip
    5908:	4a0f      	ldr	r2, [pc, #60]	; (5948 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    590a:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    590c:	4293      	cmp	r3, r2
    590e:	d9ec      	bls.n	58ea <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5910:	3002      	adds	r0, #2
    5912:	e7ea      	b.n	58ea <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    5914:	4a0d      	ldr	r2, [pc, #52]	; (594c <ValidateFrequencyAS+0x80>)
    5916:	4694      	mov	ip, r2
    5918:	4463      	add	r3, ip
    591a:	4a0d      	ldr	r2, [pc, #52]	; (5950 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    591c:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    591e:	4293      	cmp	r3, r2
    5920:	d9e3      	bls.n	58ea <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5922:	3002      	adds	r0, #2
    5924:	e7e1      	b.n	58ea <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5926:	4a0b      	ldr	r2, [pc, #44]	; (5954 <ValidateFrequencyAS+0x88>)
    5928:	4694      	mov	ip, r2
    592a:	4463      	add	r3, ip
    592c:	4a0a      	ldr	r2, [pc, #40]	; (5958 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    592e:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    5930:	4293      	cmp	r3, r2
    5932:	d9da      	bls.n	58ea <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    5934:	3002      	adds	r0, #2
    5936:	e7d8      	b.n	58ea <ValidateFrequencyAS+0x1e>
    5938:	20001290 	.word	0x20001290
    593c:	c8fc2340 	.word	0xc8fc2340
    5940:	001e8480 	.word	0x001e8480
    5944:	c90b6580 	.word	0xc90b6580
    5948:	005b8d80 	.word	0x005b8d80
    594c:	c9763540 	.word	0xc9763540
    5950:	00c65d40 	.word	0x00c65d40
    5954:	c929ea00 	.word	0xc929ea00
    5958:	004c4b40 	.word	0x004c4b40

0000595c <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    595c:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    595e:	780d      	ldrb	r5, [r1, #0]
    5960:	7849      	ldrb	r1, [r1, #1]
    5962:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    5964:	4809      	ldr	r0, [pc, #36]	; (598c <setTxParams+0x30>)
    5966:	24ac      	movs	r4, #172	; 0xac
    5968:	34ff      	adds	r4, #255	; 0xff
    596a:	2601      	movs	r6, #1
    596c:	4031      	ands	r1, r6
    596e:	5d03      	ldrb	r3, [r0, r4]
    5970:	2701      	movs	r7, #1
    5972:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    5974:	4032      	ands	r2, r6
    5976:	0052      	lsls	r2, r2, #1
    5978:	430b      	orrs	r3, r1
    597a:	2102      	movs	r1, #2
    597c:	438b      	bics	r3, r1
    597e:	4313      	orrs	r3, r2
    5980:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    5982:	2320      	movs	r3, #32
    5984:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    5986:	2008      	movs	r0, #8
    5988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    598a:	46c0      	nop			; (mov r8, r8)
    598c:	20001290 	.word	0x20001290

00005990 <SearchAvailableChannel1>:
{
    5990:	b5f0      	push	{r4, r5, r6, r7, lr}
    5992:	46de      	mov	lr, fp
    5994:	464f      	mov	r7, r9
    5996:	4646      	mov	r6, r8
    5998:	b5c0      	push	{r6, r7, lr}
    599a:	b082      	sub	sp, #8
    599c:	9001      	str	r0, [sp, #4]
    599e:	0015      	movs	r5, r2
    59a0:	4698      	mov	r8, r3
	uint8_t startingIndex = 0;
    59a2:	2300      	movs	r3, #0
    59a4:	4699      	mov	r9, r3
	if (maxChannels == 8)
    59a6:	0003      	movs	r3, r0
    59a8:	2808      	cmp	r0, #8
    59aa:	d01d      	beq.n	59e8 <SearchAvailableChannel1+0x58>
	randomNumber =  (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    59ac:	4b2d      	ldr	r3, [pc, #180]	; (5a64 <SearchAvailableChannel1+0xd4>)
    59ae:	4798      	blx	r3
    59b0:	9901      	ldr	r1, [sp, #4]
    59b2:	000f      	movs	r7, r1
    59b4:	4b2c      	ldr	r3, [pc, #176]	; (5a68 <SearchAvailableChannel1+0xd8>)
    59b6:	4798      	blx	r3
    59b8:	3101      	adds	r1, #1
    59ba:	b2cb      	uxtb	r3, r1
    59bc:	469b      	mov	fp, r3
	while (randomNumber)
    59be:	2b00      	cmp	r3, #0
    59c0:	d04e      	beq.n	5a60 <SearchAvailableChannel1+0xd0>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    59c2:	492a      	ldr	r1, [pc, #168]	; (5a6c <SearchAvailableChannel1+0xdc>)
    59c4:	790a      	ldrb	r2, [r1, #4]
    59c6:	794b      	ldrb	r3, [r1, #5]
    59c8:	021b      	lsls	r3, r3, #8
    59ca:	431a      	orrs	r2, r3
    59cc:	798b      	ldrb	r3, [r1, #6]
    59ce:	041b      	lsls	r3, r3, #16
    59d0:	4313      	orrs	r3, r2
    59d2:	79ca      	ldrb	r2, [r1, #7]
    59d4:	0612      	lsls	r2, r2, #24
    59d6:	431a      	orrs	r2, r3
    59d8:	0016      	movs	r6, r2
    59da:	465c      	mov	r4, fp
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    59dc:	0038      	movs	r0, r7
    59de:	4448      	add	r0, r9
    59e0:	464b      	mov	r3, r9
    59e2:	9300      	str	r3, [sp, #0]
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    59e4:	002f      	movs	r7, r5
    59e6:	e021      	b.n	5a2c <SearchAvailableChannel1+0x9c>
		startingIndex = RegParams.cmnParams.paramsType1.Max_125khzChan;
    59e8:	3335      	adds	r3, #53	; 0x35
    59ea:	33ff      	adds	r3, #255	; 0xff
    59ec:	4a1f      	ldr	r2, [pc, #124]	; (5a6c <SearchAvailableChannel1+0xdc>)
    59ee:	5cd3      	ldrb	r3, [r2, r3]
    59f0:	4699      	mov	r9, r3
    59f2:	e7db      	b.n	59ac <SearchAvailableChannel1+0x1c>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    59f4:	3301      	adds	r3, #1
    59f6:	b2db      	uxtb	r3, r3
    59f8:	4283      	cmp	r3, r0
    59fa:	da13      	bge.n	5a24 <SearchAvailableChannel1+0x94>
    59fc:	2c00      	cmp	r4, #0
    59fe:	d01c      	beq.n	5a3a <SearchAvailableChannel1+0xaa>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    5a00:	0059      	lsls	r1, r3, #1
    5a02:	1871      	adds	r1, r6, r1
    5a04:	784a      	ldrb	r2, [r1, #1]
    5a06:	0712      	lsls	r2, r2, #28
    5a08:	0f12      	lsrs	r2, r2, #28
    5a0a:	4295      	cmp	r5, r2
    5a0c:	dbf2      	blt.n	59f4 <SearchAvailableChannel1+0x64>
    5a0e:	784a      	ldrb	r2, [r1, #1]
    5a10:	0912      	lsrs	r2, r2, #4
    5a12:	4297      	cmp	r7, r2
    5a14:	dcee      	bgt.n	59f4 <SearchAvailableChannel1+0x64>
    5a16:	780a      	ldrb	r2, [r1, #0]
    5a18:	2a00      	cmp	r2, #0
    5a1a:	d0eb      	beq.n	59f4 <SearchAvailableChannel1+0x64>
				randomNumber --;
    5a1c:	3c01      	subs	r4, #1
    5a1e:	b2e4      	uxtb	r4, r4
    5a20:	e7e8      	b.n	59f4 <SearchAvailableChannel1+0x64>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5a22:	9b00      	ldr	r3, [sp, #0]
		if ( randomNumber == randomNumberCopy )
    5a24:	45a3      	cmp	fp, r4
    5a26:	d00a      	beq.n	5a3e <SearchAvailableChannel1+0xae>
	while (randomNumber)
    5a28:	2c00      	cmp	r4, #0
    5a2a:	d006      	beq.n	5a3a <SearchAvailableChannel1+0xaa>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5a2c:	4581      	cmp	r9, r0
    5a2e:	daf8      	bge.n	5a22 <SearchAvailableChannel1+0x92>
    5a30:	2c00      	cmp	r4, #0
    5a32:	d001      	beq.n	5a38 <SearchAvailableChannel1+0xa8>
    5a34:	9b00      	ldr	r3, [sp, #0]
    5a36:	e7e3      	b.n	5a00 <SearchAvailableChannel1+0x70>
    5a38:	464b      	mov	r3, r9
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5a3a:	2008      	movs	r0, #8
    5a3c:	e000      	b.n	5a40 <SearchAvailableChannel1+0xb0>
			result = LORAWAN_NO_CHANNELS_FOUND;
    5a3e:	2010      	movs	r0, #16
	if (i != 0)
    5a40:	2b00      	cmp	r3, #0
    5a42:	d109      	bne.n	5a58 <SearchAvailableChannel1+0xc8>
		*channelIndex = maxChannels - 1;
    5a44:	9c01      	ldr	r4, [sp, #4]
    5a46:	3c01      	subs	r4, #1
    5a48:	4643      	mov	r3, r8
    5a4a:	701c      	strb	r4, [r3, #0]
}
    5a4c:	b002      	add	sp, #8
    5a4e:	bc1c      	pop	{r2, r3, r4}
    5a50:	4690      	mov	r8, r2
    5a52:	4699      	mov	r9, r3
    5a54:	46a3      	mov	fp, r4
    5a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*channelIndex = i - 1;
    5a58:	3b01      	subs	r3, #1
    5a5a:	4642      	mov	r2, r8
    5a5c:	7013      	strb	r3, [r2, #0]
    5a5e:	e7f5      	b.n	5a4c <SearchAvailableChannel1+0xbc>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5a60:	2008      	movs	r0, #8
    5a62:	e7ef      	b.n	5a44 <SearchAvailableChannel1+0xb4>
    5a64:	00013da9 	.word	0x00013da9
    5a68:	00010c9d 	.word	0x00010c9d
    5a6c:	20001290 	.word	0x20001290

00005a70 <LORAREG_GetAttr_FreeChannel1>:
{
    5a70:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    5a72:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5a74:	2022      	movs	r0, #34	; 0x22
    5a76:	4d07      	ldr	r5, [pc, #28]	; (5a94 <LORAREG_GetAttr_FreeChannel1+0x24>)
    5a78:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    5a7a:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5a7c:	42ac      	cmp	r4, r5
    5a7e:	dd00      	ble.n	5a82 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    5a80:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    5a82:	7888      	ldrb	r0, [r1, #2]
    5a84:	7809      	ldrb	r1, [r1, #0]
    5a86:	0013      	movs	r3, r2
    5a88:	0002      	movs	r2, r0
    5a8a:	0020      	movs	r0, r4
    5a8c:	4c02      	ldr	r4, [pc, #8]	; (5a98 <LORAREG_GetAttr_FreeChannel1+0x28>)
    5a8e:	47a0      	blx	r4
	return result;
    5a90:	e7f6      	b.n	5a80 <LORAREG_GetAttr_FreeChannel1+0x10>
    5a92:	46c0      	nop			; (mov r8, r8)
    5a94:	20001290 	.word	0x20001290
    5a98:	00005991 	.word	0x00005991

00005a9c <SearchAvailableChannel2>:
{
    5a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a9e:	46de      	mov	lr, fp
    5aa0:	4657      	mov	r7, sl
    5aa2:	464e      	mov	r6, r9
    5aa4:	4645      	mov	r5, r8
    5aa6:	b5e0      	push	{r5, r6, r7, lr}
    5aa8:	b087      	sub	sp, #28
    5aaa:	9003      	str	r0, [sp, #12]
    5aac:	9102      	str	r1, [sp, #8]
    5aae:	0015      	movs	r5, r2
    5ab0:	9304      	str	r3, [sp, #16]
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    5ab2:	4958      	ldr	r1, [pc, #352]	; (5c14 <SearchAvailableChannel2+0x178>)
    5ab4:	23d1      	movs	r3, #209	; 0xd1
    5ab6:	005b      	lsls	r3, r3, #1
    5ab8:	5ccb      	ldrb	r3, [r1, r3]
    5aba:	22a4      	movs	r2, #164	; 0xa4
    5abc:	32ff      	adds	r2, #255	; 0xff
    5abe:	5c8a      	ldrb	r2, [r1, r2]
    5ac0:	0212      	lsls	r2, r2, #8
    5ac2:	431a      	orrs	r2, r3
    5ac4:	23d2      	movs	r3, #210	; 0xd2
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	5ccb      	ldrb	r3, [r1, r3]
    5aca:	041b      	lsls	r3, r3, #16
    5acc:	431a      	orrs	r2, r3
    5ace:	23a6      	movs	r3, #166	; 0xa6
    5ad0:	33ff      	adds	r3, #255	; 0xff
    5ad2:	5ccb      	ldrb	r3, [r1, r3]
    5ad4:	061b      	lsls	r3, r3, #24
    5ad6:	4313      	orrs	r3, r2
		return LORAWAN_NO_CHANNELS_FOUND;
    5ad8:	2010      	movs	r0, #16
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    5ada:	2b00      	cmp	r3, #0
    5adc:	d006      	beq.n	5aec <SearchAvailableChannel2+0x50>
}
    5ade:	b007      	add	sp, #28
    5ae0:	bc3c      	pop	{r2, r3, r4, r5}
    5ae2:	4690      	mov	r8, r2
    5ae4:	4699      	mov	r9, r3
    5ae6:	46a2      	mov	sl, r4
    5ae8:	46ab      	mov	fp, r5
    5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	randomNumber = (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    5aec:	4b4a      	ldr	r3, [pc, #296]	; (5c18 <SearchAvailableChannel2+0x17c>)
    5aee:	4798      	blx	r3
    5af0:	9903      	ldr	r1, [sp, #12]
    5af2:	000c      	movs	r4, r1
    5af4:	4b49      	ldr	r3, [pc, #292]	; (5c1c <SearchAvailableChannel2+0x180>)
    5af6:	4798      	blx	r3
    5af8:	3101      	adds	r1, #1
    5afa:	b2cb      	uxtb	r3, r1
    5afc:	1e18      	subs	r0, r3, #0
    5afe:	9305      	str	r3, [sp, #20]
	while (randomNumber)
    5b00:	d100      	bne.n	5b04 <SearchAvailableChannel2+0x68>
    5b02:	e085      	b.n	5c10 <SearchAvailableChannel2+0x174>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    5b04:	4b43      	ldr	r3, [pc, #268]	; (5c14 <SearchAvailableChannel2+0x178>)
    5b06:	791e      	ldrb	r6, [r3, #4]
    5b08:	795a      	ldrb	r2, [r3, #5]
    5b0a:	0212      	lsls	r2, r2, #8
    5b0c:	4332      	orrs	r2, r6
    5b0e:	799e      	ldrb	r6, [r3, #6]
    5b10:	0436      	lsls	r6, r6, #16
    5b12:	4332      	orrs	r2, r6
    5b14:	79de      	ldrb	r6, [r3, #7]
    5b16:	0636      	lsls	r6, r6, #24
    5b18:	4316      	orrs	r6, r2
			bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    5b1a:	2226      	movs	r2, #38	; 0x26
    5b1c:	5c99      	ldrb	r1, [r3, r2]
    5b1e:	4a40      	ldr	r2, [pc, #256]	; (5c20 <SearchAvailableChannel2+0x184>)
    5b20:	410a      	asrs	r2, r1
    5b22:	2101      	movs	r1, #1
    5b24:	4011      	ands	r1, r2
    5b26:	468a      	mov	sl, r1
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    5b28:	7b19      	ldrb	r1, [r3, #12]
    5b2a:	7b5a      	ldrb	r2, [r3, #13]
    5b2c:	0212      	lsls	r2, r2, #8
    5b2e:	4311      	orrs	r1, r2
    5b30:	7b9a      	ldrb	r2, [r3, #14]
    5b32:	0412      	lsls	r2, r2, #16
    5b34:	430a      	orrs	r2, r1
    5b36:	7bd9      	ldrb	r1, [r3, #15]
    5b38:	0609      	lsls	r1, r1, #24
    5b3a:	4311      	orrs	r1, r2
    5b3c:	4689      	mov	r9, r1
    5b3e:	7a19      	ldrb	r1, [r3, #8]
    5b40:	7a5a      	ldrb	r2, [r3, #9]
    5b42:	0212      	lsls	r2, r2, #8
    5b44:	4311      	orrs	r1, r2
    5b46:	7a9a      	ldrb	r2, [r3, #10]
    5b48:	0412      	lsls	r2, r2, #16
    5b4a:	430a      	orrs	r2, r1
    5b4c:	7adb      	ldrb	r3, [r3, #11]
    5b4e:	061b      	lsls	r3, r3, #24
    5b50:	4313      	orrs	r3, r2
    5b52:	469b      	mov	fp, r3
    5b54:	0001      	movs	r1, r0
    5b56:	46a8      	mov	r8, r5
    5b58:	e045      	b.n	5be6 <SearchAvailableChannel2+0x14a>
				    randomNumber --;					
    5b5a:	3901      	subs	r1, #1
    5b5c:	b2c9      	uxtb	r1, r1
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5b5e:	3301      	adds	r3, #1
    5b60:	b2db      	uxtb	r3, r3
    5b62:	429c      	cmp	r4, r3
    5b64:	dd3a      	ble.n	5bdc <SearchAvailableChannel2+0x140>
    5b66:	2900      	cmp	r1, #0
    5b68:	d044      	beq.n	5bf4 <SearchAvailableChannel2+0x158>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    5b6a:	001f      	movs	r7, r3
    5b6c:	0058      	lsls	r0, r3, #1
    5b6e:	1830      	adds	r0, r6, r0
    5b70:	7842      	ldrb	r2, [r0, #1]
    5b72:	0712      	lsls	r2, r2, #28
    5b74:	0f12      	lsrs	r2, r2, #28
    5b76:	4295      	cmp	r5, r2
    5b78:	dbf1      	blt.n	5b5e <SearchAvailableChannel2+0xc2>
    5b7a:	7842      	ldrb	r2, [r0, #1]
    5b7c:	0912      	lsrs	r2, r2, #4
    5b7e:	4590      	cmp	r8, r2
    5b80:	dced      	bgt.n	5b5e <SearchAvailableChannel2+0xc2>
    5b82:	7802      	ldrb	r2, [r0, #0]
    5b84:	2a00      	cmp	r2, #0
    5b86:	d0ea      	beq.n	5b5e <SearchAvailableChannel2+0xc2>
				(RegParams.pChParams[i].status == ENABLED) && \
    5b88:	4652      	mov	r2, sl
    5b8a:	2a00      	cmp	r2, #0
    5b8c:	d018      	beq.n	5bc0 <SearchAvailableChannel2+0x124>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    5b8e:	005a      	lsls	r2, r3, #1
    5b90:	18d2      	adds	r2, r2, r3
    5b92:	0092      	lsls	r2, r2, #2
    5b94:	445a      	add	r2, fp
    5b96:	7a10      	ldrb	r0, [r2, #8]
    5b98:	0042      	lsls	r2, r0, #1
    5b9a:	1812      	adds	r2, r2, r0
    5b9c:	0092      	lsls	r2, r2, #2
    5b9e:	444a      	add	r2, r9
    5ba0:	7a10      	ldrb	r0, [r2, #8]
    5ba2:	4684      	mov	ip, r0
    5ba4:	9201      	str	r2, [sp, #4]
    5ba6:	7a50      	ldrb	r0, [r2, #9]
    5ba8:	0200      	lsls	r0, r0, #8
    5baa:	4662      	mov	r2, ip
    5bac:	4310      	orrs	r0, r2
    5bae:	9a01      	ldr	r2, [sp, #4]
    5bb0:	7a92      	ldrb	r2, [r2, #10]
    5bb2:	0412      	lsls	r2, r2, #16
    5bb4:	4310      	orrs	r0, r2
    5bb6:	9a01      	ldr	r2, [sp, #4]
    5bb8:	7ad2      	ldrb	r2, [r2, #11]
    5bba:	0612      	lsls	r2, r2, #24
    5bbc:	4302      	orrs	r2, r0
    5bbe:	d1ce      	bne.n	5b5e <SearchAvailableChannel2+0xc2>
				if(transmissionType == 0  && RegParams.pOtherChParams[i].joinRequestChannel == 1)
    5bc0:	9a02      	ldr	r2, [sp, #8]
    5bc2:	2a00      	cmp	r2, #0
    5bc4:	d1c9      	bne.n	5b5a <SearchAvailableChannel2+0xbe>
    5bc6:	007a      	lsls	r2, r7, #1
    5bc8:	19d7      	adds	r7, r2, r7
    5bca:	00bf      	lsls	r7, r7, #2
    5bcc:	445f      	add	r7, fp
    5bce:	7a7a      	ldrb	r2, [r7, #9]
    5bd0:	2a00      	cmp	r2, #0
    5bd2:	d0c4      	beq.n	5b5e <SearchAvailableChannel2+0xc2>
					randomNumber --;
    5bd4:	3901      	subs	r1, #1
    5bd6:	b2c9      	uxtb	r1, r1
    5bd8:	e7c1      	b.n	5b5e <SearchAvailableChannel2+0xc2>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5bda:	2300      	movs	r3, #0
		if ( randomNumber == randomNumberCopy )
    5bdc:	9a05      	ldr	r2, [sp, #20]
    5bde:	428a      	cmp	r2, r1
    5be0:	d00a      	beq.n	5bf8 <SearchAvailableChannel2+0x15c>
	while (randomNumber)
    5be2:	2900      	cmp	r1, #0
    5be4:	d006      	beq.n	5bf4 <SearchAvailableChannel2+0x158>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    5be6:	2c00      	cmp	r4, #0
    5be8:	ddf7      	ble.n	5bda <SearchAvailableChannel2+0x13e>
    5bea:	2900      	cmp	r1, #0
    5bec:	d001      	beq.n	5bf2 <SearchAvailableChannel2+0x156>
    5bee:	2300      	movs	r3, #0
    5bf0:	e7bb      	b.n	5b6a <SearchAvailableChannel2+0xce>
    5bf2:	000b      	movs	r3, r1
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5bf4:	2008      	movs	r0, #8
    5bf6:	e000      	b.n	5bfa <SearchAvailableChannel2+0x15e>
			result = LORAWAN_NO_CHANNELS_FOUND;
    5bf8:	2010      	movs	r0, #16
	if (i != 0)
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d104      	bne.n	5c08 <SearchAvailableChannel2+0x16c>
		*channelIndex = maxChannels - 1;
    5bfe:	9b03      	ldr	r3, [sp, #12]
    5c00:	3b01      	subs	r3, #1
    5c02:	9a04      	ldr	r2, [sp, #16]
    5c04:	7013      	strb	r3, [r2, #0]
    5c06:	e76a      	b.n	5ade <SearchAvailableChannel2+0x42>
		*channelIndex = i - 1;
    5c08:	3b01      	subs	r3, #1
    5c0a:	9a04      	ldr	r2, [sp, #16]
    5c0c:	7013      	strb	r3, [r2, #0]
    5c0e:	e766      	b.n	5ade <SearchAvailableChannel2+0x42>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5c10:	2008      	movs	r0, #8
    5c12:	e7f4      	b.n	5bfe <SearchAvailableChannel2+0x162>
    5c14:	20001290 	.word	0x20001290
    5c18:	00013da9 	.word	0x00013da9
    5c1c:	00010c9d 	.word	0x00010c9d
    5c20:	00007fe3 	.word	0x00007fe3

00005c24 <LORAREG_GetAttr_FreeChannel2>:
{
    5c24:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    5c26:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5c28:	2022      	movs	r0, #34	; 0x22
    5c2a:	4d07      	ldr	r5, [pc, #28]	; (5c48 <LORAREG_GetAttr_FreeChannel2+0x24>)
    5c2c:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    5c2e:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    5c30:	42ac      	cmp	r4, r5
    5c32:	dd00      	ble.n	5c36 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    5c34:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    5c36:	7888      	ldrb	r0, [r1, #2]
    5c38:	7809      	ldrb	r1, [r1, #0]
    5c3a:	0013      	movs	r3, r2
    5c3c:	0002      	movs	r2, r0
    5c3e:	0020      	movs	r0, r4
    5c40:	4c02      	ldr	r4, [pc, #8]	; (5c4c <LORAREG_GetAttr_FreeChannel2+0x28>)
    5c42:	47a0      	blx	r4
	return result;
    5c44:	e7f6      	b.n	5c34 <LORAREG_GetAttr_FreeChannel2+0x10>
    5c46:	46c0      	nop			; (mov r8, r8)
    5c48:	20001290 	.word	0x20001290
    5c4c:	00005a9d 	.word	0x00005a9d

00005c50 <UpdateChannelIdStatus>:
{
    5c50:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    5c52:	2322      	movs	r3, #34	; 0x22
    5c54:	4a14      	ldr	r2, [pc, #80]	; (5ca8 <UpdateChannelIdStatus+0x58>)
    5c56:	56d3      	ldrsb	r3, [r2, r3]
    5c58:	4298      	cmp	r0, r3
    5c5a:	db0b      	blt.n	5c74 <UpdateChannelIdStatus+0x24>
    5c5c:	2326      	movs	r3, #38	; 0x26
    5c5e:	5cd2      	ldrb	r2, [r2, r3]
    5c60:	3b1a      	subs	r3, #26
    5c62:	4113      	asrs	r3, r2
    5c64:	07db      	lsls	r3, r3, #31
    5c66:	d41e      	bmi.n	5ca6 <UpdateChannelIdStatus+0x56>
    5c68:	23aa      	movs	r3, #170	; 0xaa
    5c6a:	33ff      	adds	r3, #255	; 0xff
    5c6c:	4a0e      	ldr	r2, [pc, #56]	; (5ca8 <UpdateChannelIdStatus+0x58>)
    5c6e:	5cd3      	ldrb	r3, [r2, r3]
    5c70:	4283      	cmp	r3, r0
    5c72:	d818      	bhi.n	5ca6 <UpdateChannelIdStatus+0x56>
		RegParams.pChParams[chid].status = statusNew;
    5c74:	4b0c      	ldr	r3, [pc, #48]	; (5ca8 <UpdateChannelIdStatus+0x58>)
    5c76:	791a      	ldrb	r2, [r3, #4]
    5c78:	795c      	ldrb	r4, [r3, #5]
    5c7a:	0224      	lsls	r4, r4, #8
    5c7c:	4314      	orrs	r4, r2
    5c7e:	799a      	ldrb	r2, [r3, #6]
    5c80:	0412      	lsls	r2, r2, #16
    5c82:	4314      	orrs	r4, r2
    5c84:	79da      	ldrb	r2, [r3, #7]
    5c86:	0612      	lsls	r2, r2, #24
    5c88:	4322      	orrs	r2, r4
    5c8a:	0040      	lsls	r0, r0, #1
    5c8c:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5c8e:	22f8      	movs	r2, #248	; 0xf8
    5c90:	32ff      	adds	r2, #255	; 0xff
    5c92:	5c9a      	ldrb	r2, [r3, r2]
    5c94:	21fc      	movs	r1, #252	; 0xfc
    5c96:	0049      	lsls	r1, r1, #1
    5c98:	5c58      	ldrb	r0, [r3, r1]
    5c9a:	0200      	lsls	r0, r0, #8
    5c9c:	4310      	orrs	r0, r2
    5c9e:	b2c1      	uxtb	r1, r0
    5ca0:	0a00      	lsrs	r0, r0, #8
    5ca2:	4b02      	ldr	r3, [pc, #8]	; (5cac <UpdateChannelIdStatus+0x5c>)
    5ca4:	4798      	blx	r3
}
    5ca6:	bd10      	pop	{r4, pc}
    5ca8:	20001290 	.word	0x20001290
    5cac:	00008e5d 	.word	0x00008e5d

00005cb0 <EnableChannels2>:
{
    5cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cb2:	46ce      	mov	lr, r9
    5cb4:	4647      	mov	r7, r8
    5cb6:	b580      	push	{r7, lr}
    5cb8:	0004      	movs	r4, r0
    5cba:	000f      	movs	r7, r1
    5cbc:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    5cbe:	4288      	cmp	r0, r1
    5cc0:	d812      	bhi.n	5ce8 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    5cc2:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    5cc4:	4b0a      	ldr	r3, [pc, #40]	; (5cf0 <EnableChannels2+0x40>)
    5cc6:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    5cc8:	4698      	mov	r8, r3
    5cca:	e007      	b.n	5cdc <EnableChannels2+0x2c>
    5ccc:	2100      	movs	r1, #0
    5cce:	0020      	movs	r0, r4
    5cd0:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    5cd2:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    5cd4:	3401      	adds	r4, #1
    5cd6:	b2e4      	uxtb	r4, r4
    5cd8:	42a7      	cmp	r7, r4
    5cda:	d305      	bcc.n	5ce8 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    5cdc:	422e      	tst	r6, r5
    5cde:	d0f5      	beq.n	5ccc <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    5ce0:	0031      	movs	r1, r6
    5ce2:	0020      	movs	r0, r4
    5ce4:	47c8      	blx	r9
    5ce6:	e7f4      	b.n	5cd2 <EnableChannels2+0x22>
}
    5ce8:	bc0c      	pop	{r2, r3}
    5cea:	4690      	mov	r8, r2
    5cec:	4699      	mov	r9, r3
    5cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cf0:	00005c51 	.word	0x00005c51

00005cf4 <UpdateChannelIdStatusT2>:
{
    5cf4:	b570      	push	{r4, r5, r6, lr}
    5cf6:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5cf8:	2322      	movs	r3, #34	; 0x22
    5cfa:	4a40      	ldr	r2, [pc, #256]	; (5dfc <UpdateChannelIdStatusT2+0x108>)
    5cfc:	56d3      	ldrsb	r3, [r2, r3]
    5cfe:	4298      	cmp	r0, r3
    5d00:	da17      	bge.n	5d32 <UpdateChannelIdStatusT2+0x3e>
    5d02:	23aa      	movs	r3, #170	; 0xaa
    5d04:	33ff      	adds	r3, #255	; 0xff
    5d06:	5cd3      	ldrb	r3, [r2, r3]
    5d08:	4283      	cmp	r3, r0
    5d0a:	d812      	bhi.n	5d32 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    5d0c:	0045      	lsls	r5, r0, #1
    5d0e:	182d      	adds	r5, r5, r0
    5d10:	00ad      	lsls	r5, r5, #2
    5d12:	0011      	movs	r1, r2
    5d14:	7a13      	ldrb	r3, [r2, #8]
    5d16:	7a52      	ldrb	r2, [r2, #9]
    5d18:	0212      	lsls	r2, r2, #8
    5d1a:	431a      	orrs	r2, r3
    5d1c:	7a8b      	ldrb	r3, [r1, #10]
    5d1e:	041b      	lsls	r3, r3, #16
    5d20:	431a      	orrs	r2, r3
    5d22:	7acb      	ldrb	r3, [r1, #11]
    5d24:	061b      	lsls	r3, r3, #24
    5d26:	4313      	orrs	r3, r2
    5d28:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    5d2a:	7adb      	ldrb	r3, [r3, #11]
    5d2c:	43db      	mvns	r3, r3
    5d2e:	079b      	lsls	r3, r3, #30
    5d30:	d000      	beq.n	5d34 <UpdateChannelIdStatusT2+0x40>
}
    5d32:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    5d34:	000e      	movs	r6, r1
    5d36:	790b      	ldrb	r3, [r1, #4]
    5d38:	794a      	ldrb	r2, [r1, #5]
    5d3a:	0212      	lsls	r2, r2, #8
    5d3c:	431a      	orrs	r2, r3
    5d3e:	798b      	ldrb	r3, [r1, #6]
    5d40:	041b      	lsls	r3, r3, #16
    5d42:	431a      	orrs	r2, r3
    5d44:	79cb      	ldrb	r3, [r1, #7]
    5d46:	061b      	lsls	r3, r3, #24
    5d48:	4313      	orrs	r3, r2
    5d4a:	0040      	lsls	r0, r0, #1
    5d4c:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5d4e:	23f8      	movs	r3, #248	; 0xf8
    5d50:	33ff      	adds	r3, #255	; 0xff
    5d52:	5ccb      	ldrb	r3, [r1, r3]
    5d54:	22fc      	movs	r2, #252	; 0xfc
    5d56:	0052      	lsls	r2, r2, #1
    5d58:	5c88      	ldrb	r0, [r1, r2]
    5d5a:	0200      	lsls	r0, r0, #8
    5d5c:	4318      	orrs	r0, r3
    5d5e:	b2c1      	uxtb	r1, r0
    5d60:	0a00      	lsrs	r0, r0, #8
    5d62:	4b27      	ldr	r3, [pc, #156]	; (5e00 <UpdateChannelIdStatusT2+0x10c>)
    5d64:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    5d66:	2326      	movs	r3, #38	; 0x26
    5d68:	5cf2      	ldrb	r2, [r6, r3]
    5d6a:	3b23      	subs	r3, #35	; 0x23
    5d6c:	4113      	asrs	r3, r2
    5d6e:	07db      	lsls	r3, r3, #31
    5d70:	d5df      	bpl.n	5d32 <UpdateChannelIdStatusT2+0x3e>
    5d72:	2c00      	cmp	r4, #0
    5d74:	d1dd      	bne.n	5d32 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    5d76:	4b21      	ldr	r3, [pc, #132]	; (5dfc <UpdateChannelIdStatusT2+0x108>)
    5d78:	7a18      	ldrb	r0, [r3, #8]
    5d7a:	7a5a      	ldrb	r2, [r3, #9]
    5d7c:	0212      	lsls	r2, r2, #8
    5d7e:	4302      	orrs	r2, r0
    5d80:	7a98      	ldrb	r0, [r3, #10]
    5d82:	0400      	lsls	r0, r0, #16
    5d84:	4302      	orrs	r2, r0
    5d86:	7ad8      	ldrb	r0, [r3, #11]
    5d88:	0600      	lsls	r0, r0, #24
    5d8a:	4310      	orrs	r0, r2
    5d8c:	1945      	adds	r5, r0, r5
    5d8e:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    5d90:	2222      	movs	r2, #34	; 0x22
    5d92:	569c      	ldrsb	r4, [r3, r2]
    5d94:	2c00      	cmp	r4, #0
    5d96:	dd1c      	ble.n	5dd2 <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    5d98:	001a      	movs	r2, r3
    5d9a:	7919      	ldrb	r1, [r3, #4]
    5d9c:	795b      	ldrb	r3, [r3, #5]
    5d9e:	021b      	lsls	r3, r3, #8
    5da0:	430b      	orrs	r3, r1
    5da2:	7991      	ldrb	r1, [r2, #6]
    5da4:	0409      	lsls	r1, r1, #16
    5da6:	430b      	orrs	r3, r1
    5da8:	79d1      	ldrb	r1, [r2, #7]
    5daa:	0609      	lsls	r1, r1, #24
    5dac:	4319      	orrs	r1, r3
    5dae:	2300      	movs	r3, #0
    5db0:	e003      	b.n	5dba <UpdateChannelIdStatusT2+0xc6>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    5db2:	3301      	adds	r3, #1
    5db4:	b2db      	uxtb	r3, r3
    5db6:	42a3      	cmp	r3, r4
    5db8:	da0b      	bge.n	5dd2 <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    5dba:	005a      	lsls	r2, r3, #1
    5dbc:	5c52      	ldrb	r2, [r2, r1]
    5dbe:	2a00      	cmp	r2, #0
    5dc0:	d0f7      	beq.n	5db2 <UpdateChannelIdStatusT2+0xbe>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    5dc2:	005a      	lsls	r2, r3, #1
    5dc4:	18d2      	adds	r2, r2, r3
    5dc6:	0092      	lsls	r2, r2, #2
    5dc8:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    5dca:	7a12      	ldrb	r2, [r2, #8]
    5dcc:	42aa      	cmp	r2, r5
    5dce:	d1f0      	bne.n	5db2 <UpdateChannelIdStatusT2+0xbe>
    5dd0:	e7af      	b.n	5d32 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    5dd2:	490a      	ldr	r1, [pc, #40]	; (5dfc <UpdateChannelIdStatusT2+0x108>)
    5dd4:	7b0a      	ldrb	r2, [r1, #12]
    5dd6:	7b4b      	ldrb	r3, [r1, #13]
    5dd8:	021b      	lsls	r3, r3, #8
    5dda:	4313      	orrs	r3, r2
    5ddc:	7b8a      	ldrb	r2, [r1, #14]
    5dde:	0412      	lsls	r2, r2, #16
    5de0:	4313      	orrs	r3, r2
    5de2:	7bca      	ldrb	r2, [r1, #15]
    5de4:	0612      	lsls	r2, r2, #24
    5de6:	431a      	orrs	r2, r3
    5de8:	006b      	lsls	r3, r5, #1
    5dea:	195d      	adds	r5, r3, r5
    5dec:	00ad      	lsls	r5, r5, #2
    5dee:	18ad      	adds	r5, r5, r2
    5df0:	2300      	movs	r3, #0
    5df2:	722b      	strb	r3, [r5, #8]
    5df4:	726b      	strb	r3, [r5, #9]
    5df6:	72ab      	strb	r3, [r5, #10]
    5df8:	72eb      	strb	r3, [r5, #11]
    5dfa:	e79a      	b.n	5d32 <UpdateChannelIdStatusT2+0x3e>
    5dfc:	20001290 	.word	0x20001290
    5e00:	00008e5d 	.word	0x00008e5d

00005e04 <setChannelIdStatusT2>:
{
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5e08:	780d      	ldrb	r5, [r1, #0]
    5e0a:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5e0c:	a901      	add	r1, sp, #4
    5e0e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    5e10:	2300      	movs	r3, #0
    5e12:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5e14:	2015      	movs	r0, #21
    5e16:	4b0c      	ldr	r3, [pc, #48]	; (5e48 <setChannelIdStatusT2+0x44>)
    5e18:	4798      	blx	r3
    5e1a:	0004      	movs	r4, r0
    5e1c:	2808      	cmp	r0, #8
    5e1e:	d003      	beq.n	5e28 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5e20:	240a      	movs	r4, #10
}
    5e22:	0020      	movs	r0, r4
    5e24:	b002      	add	sp, #8
    5e26:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    5e28:	2326      	movs	r3, #38	; 0x26
    5e2a:	4a08      	ldr	r2, [pc, #32]	; (5e4c <setChannelIdStatusT2+0x48>)
    5e2c:	5cd3      	ldrb	r3, [r2, r3]
    5e2e:	2b0f      	cmp	r3, #15
    5e30:	d004      	beq.n	5e3c <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    5e32:	0031      	movs	r1, r6
    5e34:	0028      	movs	r0, r5
    5e36:	4b06      	ldr	r3, [pc, #24]	; (5e50 <setChannelIdStatusT2+0x4c>)
    5e38:	4798      	blx	r3
    5e3a:	e7f2      	b.n	5e22 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    5e3c:	0031      	movs	r1, r6
    5e3e:	0028      	movs	r0, r5
    5e40:	4b04      	ldr	r3, [pc, #16]	; (5e54 <setChannelIdStatusT2+0x50>)
    5e42:	4798      	blx	r3
    5e44:	e7ed      	b.n	5e22 <setChannelIdStatusT2+0x1e>
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	000055b1 	.word	0x000055b1
    5e4c:	20001290 	.word	0x20001290
    5e50:	00005cf5 	.word	0x00005cf5
    5e54:	00005c51 	.word	0x00005c51

00005e58 <UpdateChannelIdStatusT4>:
{
    5e58:	b570      	push	{r4, r5, r6, lr}
    5e5a:	0004      	movs	r4, r0
    5e5c:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    5e5e:	4925      	ldr	r1, [pc, #148]	; (5ef4 <UpdateChannelIdStatusT4+0x9c>)
    5e60:	790b      	ldrb	r3, [r1, #4]
    5e62:	794a      	ldrb	r2, [r1, #5]
    5e64:	0212      	lsls	r2, r2, #8
    5e66:	431a      	orrs	r2, r3
    5e68:	798b      	ldrb	r3, [r1, #6]
    5e6a:	041b      	lsls	r3, r3, #16
    5e6c:	431a      	orrs	r2, r3
    5e6e:	79cb      	ldrb	r3, [r1, #7]
    5e70:	061b      	lsls	r3, r3, #24
    5e72:	4313      	orrs	r3, r2
    5e74:	0042      	lsls	r2, r0, #1
    5e76:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5e78:	23f8      	movs	r3, #248	; 0xf8
    5e7a:	33ff      	adds	r3, #255	; 0xff
    5e7c:	5ccb      	ldrb	r3, [r1, r3]
    5e7e:	22fc      	movs	r2, #252	; 0xfc
    5e80:	0052      	lsls	r2, r2, #1
    5e82:	5c88      	ldrb	r0, [r1, r2]
    5e84:	0200      	lsls	r0, r0, #8
    5e86:	4318      	orrs	r0, r3
    5e88:	b2c1      	uxtb	r1, r0
    5e8a:	0a00      	lsrs	r0, r0, #8
    5e8c:	4b1a      	ldr	r3, [pc, #104]	; (5ef8 <UpdateChannelIdStatusT4+0xa0>)
    5e8e:	4798      	blx	r3
	if(statusNew == ENABLED)
    5e90:	2d00      	cmp	r5, #0
    5e92:	d02a      	beq.n	5eea <UpdateChannelIdStatusT4+0x92>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    5e94:	4a17      	ldr	r2, [pc, #92]	; (5ef4 <UpdateChannelIdStatusT4+0x9c>)
    5e96:	7a10      	ldrb	r0, [r2, #8]
    5e98:	7a53      	ldrb	r3, [r2, #9]
    5e9a:	021b      	lsls	r3, r3, #8
    5e9c:	4303      	orrs	r3, r0
    5e9e:	7a90      	ldrb	r0, [r2, #10]
    5ea0:	0400      	lsls	r0, r0, #16
    5ea2:	4303      	orrs	r3, r0
    5ea4:	7ad0      	ldrb	r0, [r2, #11]
    5ea6:	0600      	lsls	r0, r0, #24
    5ea8:	4318      	orrs	r0, r3
    5eaa:	0063      	lsls	r3, r4, #1
    5eac:	191c      	adds	r4, r3, r4
    5eae:	00a4      	lsls	r4, r4, #2
    5eb0:	1900      	adds	r0, r0, r4
    5eb2:	7803      	ldrb	r3, [r0, #0]
    5eb4:	7842      	ldrb	r2, [r0, #1]
    5eb6:	0212      	lsls	r2, r2, #8
    5eb8:	431a      	orrs	r2, r3
    5eba:	7883      	ldrb	r3, [r0, #2]
    5ebc:	041b      	lsls	r3, r3, #16
    5ebe:	431a      	orrs	r2, r3
    5ec0:	78c3      	ldrb	r3, [r0, #3]
    5ec2:	061b      	lsls	r3, r3, #24
    5ec4:	4313      	orrs	r3, r2
    5ec6:	4a0d      	ldr	r2, [pc, #52]	; (5efc <UpdateChannelIdStatusT4+0xa4>)
    5ec8:	4293      	cmp	r3, r2
    5eca:	d80f      	bhi.n	5eec <UpdateChannelIdStatusT4+0x94>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_LF;
    5ecc:	230a      	movs	r3, #10
    5ece:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5ed0:	4b08      	ldr	r3, [pc, #32]	; (5ef4 <UpdateChannelIdStatusT4+0x9c>)
    5ed2:	22fa      	movs	r2, #250	; 0xfa
    5ed4:	32ff      	adds	r2, #255	; 0xff
    5ed6:	5c9a      	ldrb	r2, [r3, r2]
    5ed8:	21fd      	movs	r1, #253	; 0xfd
    5eda:	0049      	lsls	r1, r1, #1
    5edc:	5c58      	ldrb	r0, [r3, r1]
    5ede:	0200      	lsls	r0, r0, #8
    5ee0:	4310      	orrs	r0, r2
    5ee2:	b2c1      	uxtb	r1, r0
    5ee4:	0a00      	lsrs	r0, r0, #8
    5ee6:	4b04      	ldr	r3, [pc, #16]	; (5ef8 <UpdateChannelIdStatusT4+0xa0>)
    5ee8:	4798      	blx	r3
}
    5eea:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_HF;
    5eec:	230e      	movs	r3, #14
    5eee:	7283      	strb	r3, [r0, #10]
    5ef0:	e7ee      	b.n	5ed0 <UpdateChannelIdStatusT4+0x78>
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	20001290 	.word	0x20001290
    5ef8:	00008e5d 	.word	0x00008e5d
    5efc:	36f6211f 	.word	0x36f6211f

00005f00 <UpdateChannelIdStatusT3>:
{
    5f00:	b570      	push	{r4, r5, r6, lr}
    5f02:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    5f04:	0046      	lsls	r6, r0, #1
    5f06:	4c2a      	ldr	r4, [pc, #168]	; (5fb0 <UpdateChannelIdStatusT3+0xb0>)
    5f08:	7923      	ldrb	r3, [r4, #4]
    5f0a:	7962      	ldrb	r2, [r4, #5]
    5f0c:	0212      	lsls	r2, r2, #8
    5f0e:	431a      	orrs	r2, r3
    5f10:	79a3      	ldrb	r3, [r4, #6]
    5f12:	041b      	lsls	r3, r3, #16
    5f14:	431a      	orrs	r2, r3
    5f16:	79e3      	ldrb	r3, [r4, #7]
    5f18:	061b      	lsls	r3, r3, #24
    5f1a:	4313      	orrs	r3, r2
    5f1c:	5599      	strb	r1, [r3, r6]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    5f1e:	23f8      	movs	r3, #248	; 0xf8
    5f20:	33ff      	adds	r3, #255	; 0xff
    5f22:	5ce3      	ldrb	r3, [r4, r3]
    5f24:	22fc      	movs	r2, #252	; 0xfc
    5f26:	0052      	lsls	r2, r2, #1
    5f28:	5ca0      	ldrb	r0, [r4, r2]
    5f2a:	0200      	lsls	r0, r0, #8
    5f2c:	4318      	orrs	r0, r3
    5f2e:	b2c1      	uxtb	r1, r0
    5f30:	0a00      	lsrs	r0, r0, #8
    5f32:	4b20      	ldr	r3, [pc, #128]	; (5fb4 <UpdateChannelIdStatusT3+0xb4>)
    5f34:	4798      	blx	r3
	if(RegParams.pChParams[chid].status == DISABLED)
    5f36:	7923      	ldrb	r3, [r4, #4]
    5f38:	7962      	ldrb	r2, [r4, #5]
    5f3a:	0212      	lsls	r2, r2, #8
    5f3c:	431a      	orrs	r2, r3
    5f3e:	79a3      	ldrb	r3, [r4, #6]
    5f40:	041b      	lsls	r3, r3, #16
    5f42:	431a      	orrs	r2, r3
    5f44:	79e3      	ldrb	r3, [r4, #7]
    5f46:	061b      	lsls	r3, r3, #24
    5f48:	4313      	orrs	r3, r2
    5f4a:	5d9b      	ldrb	r3, [r3, r6]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d000      	beq.n	5f52 <UpdateChannelIdStatusT3+0x52>
}
    5f50:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pOtherChParams[chid].ulfrequency = 0;
    5f52:	4c17      	ldr	r4, [pc, #92]	; (5fb0 <UpdateChannelIdStatusT3+0xb0>)
    5f54:	7a23      	ldrb	r3, [r4, #8]
    5f56:	7a62      	ldrb	r2, [r4, #9]
    5f58:	0212      	lsls	r2, r2, #8
    5f5a:	4313      	orrs	r3, r2
    5f5c:	7aa2      	ldrb	r2, [r4, #10]
    5f5e:	0412      	lsls	r2, r2, #16
    5f60:	431a      	orrs	r2, r3
    5f62:	7ae3      	ldrb	r3, [r4, #11]
    5f64:	061b      	lsls	r3, r3, #24
    5f66:	431a      	orrs	r2, r3
    5f68:	1973      	adds	r3, r6, r5
    5f6a:	009b      	lsls	r3, r3, #2
    5f6c:	2100      	movs	r1, #0
    5f6e:	5499      	strb	r1, [r3, r2]
    5f70:	189b      	adds	r3, r3, r2
    5f72:	2200      	movs	r2, #0
    5f74:	705a      	strb	r2, [r3, #1]
    5f76:	709a      	strb	r2, [r3, #2]
    5f78:	70da      	strb	r2, [r3, #3]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    5f7a:	23fa      	movs	r3, #250	; 0xfa
    5f7c:	33ff      	adds	r3, #255	; 0xff
    5f7e:	5ce3      	ldrb	r3, [r4, r3]
    5f80:	32fb      	adds	r2, #251	; 0xfb
    5f82:	32ff      	adds	r2, #255	; 0xff
    5f84:	5ca0      	ldrb	r0, [r4, r2]
    5f86:	0200      	lsls	r0, r0, #8
    5f88:	4318      	orrs	r0, r3
    5f8a:	b2c1      	uxtb	r1, r0
    5f8c:	0a00      	lsrs	r0, r0, #8
    5f8e:	4b09      	ldr	r3, [pc, #36]	; (5fb4 <UpdateChannelIdStatusT3+0xb4>)
    5f90:	4798      	blx	r3
		if( RegParams.band == ISM_JPN923)
    5f92:	2326      	movs	r3, #38	; 0x26
    5f94:	5ce3      	ldrb	r3, [r4, r3]
    5f96:	2b05      	cmp	r3, #5
    5f98:	d1da      	bne.n	5f50 <UpdateChannelIdStatusT3+0x50>
			RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    5f9a:	3552      	adds	r5, #82	; 0x52
    5f9c:	00ad      	lsls	r5, r5, #2
    5f9e:	4b04      	ldr	r3, [pc, #16]	; (5fb0 <UpdateChannelIdStatusT3+0xb0>)
    5fa0:	195d      	adds	r5, r3, r5
    5fa2:	2200      	movs	r2, #0
    5fa4:	726a      	strb	r2, [r5, #9]
    5fa6:	72aa      	strb	r2, [r5, #10]
    5fa8:	72ea      	strb	r2, [r5, #11]
    5faa:	732a      	strb	r2, [r5, #12]
}
    5fac:	e7d0      	b.n	5f50 <UpdateChannelIdStatusT3+0x50>
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	20001290 	.word	0x20001290
    5fb4:	00008e5d 	.word	0x00008e5d

00005fb8 <setChannelIdStatusT3>:
{
    5fb8:	b570      	push	{r4, r5, r6, lr}
    5fba:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    5fbc:	780d      	ldrb	r5, [r1, #0]
    5fbe:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    5fc0:	a901      	add	r1, sp, #4
    5fc2:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    5fc4:	2301      	movs	r3, #1
    5fc6:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    5fc8:	2015      	movs	r0, #21
    5fca:	4b0c      	ldr	r3, [pc, #48]	; (5ffc <setChannelIdStatusT3+0x44>)
    5fcc:	4798      	blx	r3
    5fce:	0004      	movs	r4, r0
    5fd0:	2808      	cmp	r0, #8
    5fd2:	d003      	beq.n	5fdc <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    5fd4:	240a      	movs	r4, #10
}
    5fd6:	0020      	movs	r0, r4
    5fd8:	b002      	add	sp, #8
    5fda:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    5fdc:	2326      	movs	r3, #38	; 0x26
    5fde:	4a08      	ldr	r2, [pc, #32]	; (6000 <setChannelIdStatusT3+0x48>)
    5fe0:	5cd3      	ldrb	r3, [r2, r3]
    5fe2:	2b04      	cmp	r3, #4
    5fe4:	d004      	beq.n	5ff0 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    5fe6:	0031      	movs	r1, r6
    5fe8:	0028      	movs	r0, r5
    5fea:	4b06      	ldr	r3, [pc, #24]	; (6004 <setChannelIdStatusT3+0x4c>)
    5fec:	4798      	blx	r3
    5fee:	e7f2      	b.n	5fd6 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    5ff0:	0031      	movs	r1, r6
    5ff2:	0028      	movs	r0, r5
    5ff4:	4b04      	ldr	r3, [pc, #16]	; (6008 <setChannelIdStatusT3+0x50>)
    5ff6:	4798      	blx	r3
    5ff8:	e7ed      	b.n	5fd6 <setChannelIdStatusT3+0x1e>
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	000055b1 	.word	0x000055b1
    6000:	20001290 	.word	0x20001290
    6004:	00005f01 	.word	0x00005f01
    6008:	00005e59 	.word	0x00005e59

0000600c <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    600c:	b510      	push	{r4, lr}
    600e:	b082      	sub	sp, #8
    6010:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6012:	784c      	ldrb	r4, [r1, #1]
    6014:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    6016:	780a      	ldrb	r2, [r1, #0]
    6018:	2a00      	cmp	r2, #0
    601a:	d009      	beq.n	6030 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 1) 
    601c:	2340      	movs	r3, #64	; 0x40
    601e:	33ff      	adds	r3, #255	; 0xff
    6020:	4a23      	ldr	r2, [pc, #140]	; (60b0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    6022:	5cd3      	ldrb	r3, [r2, r3]
    6024:	2b01      	cmp	r3, #1
    6026:	d01a      	beq.n	605e <LORAREG_GetAttr_Rx1WindowparamsType1+0x52>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    6028:	233a      	movs	r3, #58	; 0x3a
    602a:	33ff      	adds	r3, #255	; 0xff
    602c:	4a20      	ldr	r2, [pc, #128]	; (60b0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    602e:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    6030:	491f      	ldr	r1, [pc, #124]	; (60b0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    6032:	229f      	movs	r2, #159	; 0x9f
    6034:	0052      	lsls	r2, r2, #1
    6036:	5c8a      	ldrb	r2, [r1, r2]
    6038:	1b12      	subs	r2, r2, r4
    603a:	189b      	adds	r3, r3, r2
    603c:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    603e:	466a      	mov	r2, sp
    6040:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    6042:	223c      	movs	r2, #60	; 0x3c
    6044:	32ff      	adds	r2, #255	; 0xff
    6046:	5c8a      	ldrb	r2, [r1, r2]
    6048:	4293      	cmp	r3, r2
    604a:	d80c      	bhi.n	6066 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5a>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    604c:	229d      	movs	r2, #157	; 0x9d
    604e:	0052      	lsls	r2, r2, #1
    6050:	4917      	ldr	r1, [pc, #92]	; (60b0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    6052:	5c8a      	ldrb	r2, [r1, r2]
    6054:	4293      	cmp	r3, r2
    6056:	d208      	bcs.n	606a <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    6058:	466b      	mov	r3, sp
    605a:	711a      	strb	r2, [r3, #4]
    605c:	e005      	b.n	606a <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    605e:	3338      	adds	r3, #56	; 0x38
    6060:	33ff      	adds	r3, #255	; 0xff
    6062:	5cd3      	ldrb	r3, [r2, r3]
    6064:	e7e4      	b.n	6030 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    6066:	466b      	mov	r3, sp
    6068:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    606a:	4911      	ldr	r1, [pc, #68]	; (60b0 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    606c:	2327      	movs	r3, #39	; 0x27
    606e:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    6070:	3b20      	subs	r3, #32
    6072:	4023      	ands	r3, r4
    6074:	4c0f      	ldr	r4, [pc, #60]	; (60b4 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    6076:	435c      	muls	r4, r3
    6078:	239a      	movs	r3, #154	; 0x9a
    607a:	005b      	lsls	r3, r3, #1
    607c:	5ccb      	ldrb	r3, [r1, r3]
    607e:	2236      	movs	r2, #54	; 0x36
    6080:	32ff      	adds	r2, #255	; 0xff
    6082:	5c8a      	ldrb	r2, [r1, r2]
    6084:	0212      	lsls	r2, r2, #8
    6086:	4313      	orrs	r3, r2
    6088:	229b      	movs	r2, #155	; 0x9b
    608a:	0052      	lsls	r2, r2, #1
    608c:	5c8a      	ldrb	r2, [r1, r2]
    608e:	0412      	lsls	r2, r2, #16
    6090:	431a      	orrs	r2, r3
    6092:	2338      	movs	r3, #56	; 0x38
    6094:	33ff      	adds	r3, #255	; 0xff
    6096:	5ccb      	ldrb	r3, [r1, r3]
    6098:	061b      	lsls	r3, r3, #24
    609a:	4313      	orrs	r3, r2
    609c:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    609e:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    60a0:	2208      	movs	r2, #8
    60a2:	4669      	mov	r1, sp
    60a4:	4b04      	ldr	r3, [pc, #16]	; (60b8 <LORAREG_GetAttr_Rx1WindowparamsType1+0xac>)
    60a6:	4798      	blx	r3
}
    60a8:	2008      	movs	r0, #8
    60aa:	b002      	add	sp, #8
    60ac:	bd10      	pop	{r4, pc}
    60ae:	46c0      	nop			; (mov r8, r8)
    60b0:	20001290 	.word	0x20001290
    60b4:	000927c0 	.word	0x000927c0
    60b8:	00013ba5 	.word	0x00013ba5

000060bc <LORAREG_GetAttr_DRangeChBandT1>:
{
    60bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60be:	46c6      	mov	lr, r8
    60c0:	b500      	push	{lr}
    60c2:	b084      	sub	sp, #16
    60c4:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    60c6:	2204      	movs	r2, #4
    60c8:	a803      	add	r0, sp, #12
    60ca:	4b43      	ldr	r3, [pc, #268]	; (61d8 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    60cc:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    60ce:	a903      	add	r1, sp, #12
    60d0:	201b      	movs	r0, #27
    60d2:	4b42      	ldr	r3, [pc, #264]	; (61dc <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    60d4:	4798      	blx	r3
    60d6:	2808      	cmp	r0, #8
    60d8:	d004      	beq.n	60e4 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    60da:	200a      	movs	r0, #10
}
    60dc:	b004      	add	sp, #16
    60de:	bc04      	pop	{r2}
    60e0:	4690      	mov	r8, r2
    60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    60e4:	aa03      	add	r2, sp, #12
    60e6:	7813      	ldrb	r3, [r2, #0]
    60e8:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    60ea:	2226      	movs	r2, #38	; 0x26
    60ec:	493c      	ldr	r1, [pc, #240]	; (61e0 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    60ee:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    60f0:	3903      	subs	r1, #3
    60f2:	1e4a      	subs	r2, r1, #1
    60f4:	4191      	sbcs	r1, r2
    60f6:	3106      	adds	r1, #6
	switch (chMaskCntl)
    60f8:	2b07      	cmp	r3, #7
    60fa:	d869      	bhi.n	61d0 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    60fc:	009a      	lsls	r2, r3, #2
    60fe:	4d39      	ldr	r5, [pc, #228]	; (61e4 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    6100:	58aa      	ldr	r2, [r5, r2]
    6102:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    6104:	011b      	lsls	r3, r3, #4
    6106:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    6108:	001a      	movs	r2, r3
    610a:	3210      	adds	r2, #16
    610c:	b2d2      	uxtb	r2, r2
    610e:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    6110:	4293      	cmp	r3, r2
    6112:	d25f      	bcs.n	61d4 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6114:	4e32      	ldr	r6, [pc, #200]	; (61e0 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6116:	7935      	ldrb	r5, [r6, #4]
    6118:	7972      	ldrb	r2, [r6, #5]
    611a:	0212      	lsls	r2, r2, #8
    611c:	4315      	orrs	r5, r2
    611e:	79b2      	ldrb	r2, [r6, #6]
    6120:	0412      	lsls	r2, r2, #16
    6122:	432a      	orrs	r2, r5
    6124:	79f5      	ldrb	r5, [r6, #7]
    6126:	062d      	lsls	r5, r5, #24
    6128:	4315      	orrs	r5, r2
    612a:	46ac      	mov	ip, r5
    612c:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    612e:	2401      	movs	r4, #1
    6130:	e00c      	b.n	614c <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    6132:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6134:	7872      	ldrb	r2, [r6, #1]
    6136:	0912      	lsrs	r2, r2, #4
    6138:	42aa      	cmp	r2, r5
    613a:	dd02      	ble.n	6142 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    613c:	423c      	tst	r4, r7
    613e:	d011      	beq.n	6164 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6140:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    6142:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    6144:	3301      	adds	r3, #1
    6146:	b2db      	uxtb	r3, r3
    6148:	4598      	cmp	r8, r3
    614a:	d013      	beq.n	6174 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    614c:	005e      	lsls	r6, r3, #1
    614e:	4466      	add	r6, ip
    6150:	7872      	ldrb	r2, [r6, #1]
    6152:	0712      	lsls	r2, r2, #28
    6154:	0f12      	lsrs	r2, r2, #28
    6156:	428a      	cmp	r2, r1
    6158:	daec      	bge.n	6134 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    615a:	423c      	tst	r4, r7
    615c:	d1e9      	bne.n	6132 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    615e:	2f00      	cmp	r7, #0
    6160:	d1ef      	bne.n	6142 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    6162:	e7e6      	b.n	6132 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    6164:	2f00      	cmp	r7, #0
    6166:	d0eb      	beq.n	6140 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    6168:	e7eb      	b.n	6142 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    616a:	233a      	movs	r3, #58	; 0x3a
    616c:	33ff      	adds	r3, #255	; 0xff
    616e:	4a1c      	ldr	r2, [pc, #112]	; (61e0 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6170:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    6172:	000d      	movs	r5, r1
    6174:	012d      	lsls	r5, r5, #4
    6176:	230f      	movs	r3, #15
    6178:	4019      	ands	r1, r3
    617a:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	701d      	strb	r5, [r3, #0]
    6180:	e7ac      	b.n	60dc <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    6182:	4d17      	ldr	r5, [pc, #92]	; (61e0 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    6184:	792b      	ldrb	r3, [r5, #4]
    6186:	796a      	ldrb	r2, [r5, #5]
    6188:	0212      	lsls	r2, r2, #8
    618a:	431a      	orrs	r2, r3
    618c:	79ab      	ldrb	r3, [r5, #6]
    618e:	041b      	lsls	r3, r3, #16
    6190:	431a      	orrs	r2, r3
    6192:	79eb      	ldrb	r3, [r5, #7]
    6194:	061b      	lsls	r3, r3, #24
    6196:	4313      	orrs	r3, r2
    6198:	001a      	movs	r2, r3
    619a:	3380      	adds	r3, #128	; 0x80
    619c:	001c      	movs	r4, r3
    619e:	2500      	movs	r5, #0
    61a0:	e002      	b.n	61a8 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    61a2:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    61a4:	42a2      	cmp	r2, r4
    61a6:	d00c      	beq.n	61c2 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    61a8:	0016      	movs	r6, r2
    61aa:	7853      	ldrb	r3, [r2, #1]
    61ac:	071b      	lsls	r3, r3, #28
    61ae:	0f1b      	lsrs	r3, r3, #28
    61b0:	428b      	cmp	r3, r1
    61b2:	da00      	bge.n	61b6 <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    61b4:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    61b6:	7873      	ldrb	r3, [r6, #1]
    61b8:	091b      	lsrs	r3, r3, #4
    61ba:	42ab      	cmp	r3, r5
    61bc:	ddf1      	ble.n	61a2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    61be:	001d      	movs	r5, r3
    61c0:	e7ef      	b.n	61a2 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    61c2:	2f00      	cmp	r7, #0
    61c4:	d0d6      	beq.n	6174 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    61c6:	233a      	movs	r3, #58	; 0x3a
    61c8:	33ff      	adds	r3, #255	; 0xff
    61ca:	4a05      	ldr	r2, [pc, #20]	; (61e0 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    61cc:	5cd5      	ldrb	r5, [r2, r3]
    61ce:	e7d1      	b.n	6174 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    61d0:	2500      	movs	r5, #0
    61d2:	e7cf      	b.n	6174 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    61d4:	2500      	movs	r5, #0
    61d6:	e7cd      	b.n	6174 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    61d8:	00013ba5 	.word	0x00013ba5
    61dc:	00005699 	.word	0x00005699
    61e0:	20001290 	.word	0x20001290
    61e4:	0001aa20 	.word	0x0001aa20

000061e8 <LORAREG_GetAttr_DefRx2Freq>:
{
    61e8:	b510      	push	{r4, lr}
    61ea:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    61ec:	2204      	movs	r2, #4
    61ee:	4902      	ldr	r1, [pc, #8]	; (61f8 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    61f0:	4b02      	ldr	r3, [pc, #8]	; (61fc <LORAREG_GetAttr_DefRx2Freq+0x14>)
    61f2:	4798      	blx	r3
}
    61f4:	2008      	movs	r0, #8
    61f6:	bd10      	pop	{r4, pc}
    61f8:	200012a4 	.word	0x200012a4
    61fc:	00013ba5 	.word	0x00013ba5

00006200 <LORAREG_GetAttr_DlFrequency>:
{
    6200:	b510      	push	{r4, lr}
    6202:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    6204:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    6206:	2122      	movs	r1, #34	; 0x22
    6208:	480d      	ldr	r0, [pc, #52]	; (6240 <LORAREG_GetAttr_DlFrequency+0x40>)
    620a:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    620c:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    620e:	428a      	cmp	r2, r1
    6210:	dd00      	ble.n	6214 <LORAREG_GetAttr_DlFrequency+0x14>
}
    6212:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    6214:	4c0a      	ldr	r4, [pc, #40]	; (6240 <LORAREG_GetAttr_DlFrequency+0x40>)
    6216:	7a21      	ldrb	r1, [r4, #8]
    6218:	7a60      	ldrb	r0, [r4, #9]
    621a:	0200      	lsls	r0, r0, #8
    621c:	4308      	orrs	r0, r1
    621e:	7aa1      	ldrb	r1, [r4, #10]
    6220:	0409      	lsls	r1, r1, #16
    6222:	4308      	orrs	r0, r1
    6224:	7ae1      	ldrb	r1, [r4, #11]
    6226:	0609      	lsls	r1, r1, #24
    6228:	4301      	orrs	r1, r0
    622a:	0050      	lsls	r0, r2, #1
    622c:	1882      	adds	r2, r0, r2
    622e:	0092      	lsls	r2, r2, #2
    6230:	1889      	adds	r1, r1, r2
    6232:	3104      	adds	r1, #4
    6234:	2204      	movs	r2, #4
    6236:	0018      	movs	r0, r3
    6238:	4b02      	ldr	r3, [pc, #8]	; (6244 <LORAREG_GetAttr_DlFrequency+0x44>)
    623a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    623c:	2008      	movs	r0, #8
    623e:	e7e8      	b.n	6212 <LORAREG_GetAttr_DlFrequency+0x12>
    6240:	20001290 	.word	0x20001290
    6244:	00013ba5 	.word	0x00013ba5

00006248 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    6248:	b500      	push	{lr}
    624a:	b083      	sub	sp, #12
    624c:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    624e:	784a      	ldrb	r2, [r1, #1]
    6250:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    6252:	429a      	cmp	r2, r3
    6254:	d925      	bls.n	62a2 <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    6256:	2300      	movs	r3, #0
    6258:	466a      	mov	r2, sp
    625a:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    625c:	4913      	ldr	r1, [pc, #76]	; (62ac <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    625e:	7a0b      	ldrb	r3, [r1, #8]
    6260:	7a4a      	ldrb	r2, [r1, #9]
    6262:	0212      	lsls	r2, r2, #8
    6264:	4313      	orrs	r3, r2
    6266:	7a8a      	ldrb	r2, [r1, #10]
    6268:	0412      	lsls	r2, r2, #16
    626a:	431a      	orrs	r2, r3
    626c:	7acb      	ldrb	r3, [r1, #11]
    626e:	061b      	lsls	r3, r3, #24
    6270:	431a      	orrs	r2, r3
    6272:	2327      	movs	r3, #39	; 0x27
    6274:	5cc9      	ldrb	r1, [r1, r3]
    6276:	004b      	lsls	r3, r1, #1
    6278:	185b      	adds	r3, r3, r1
    627a:	009b      	lsls	r3, r3, #2
    627c:	189b      	adds	r3, r3, r2
    627e:	7919      	ldrb	r1, [r3, #4]
    6280:	795a      	ldrb	r2, [r3, #5]
    6282:	0212      	lsls	r2, r2, #8
    6284:	4311      	orrs	r1, r2
    6286:	799a      	ldrb	r2, [r3, #6]
    6288:	0412      	lsls	r2, r2, #16
    628a:	430a      	orrs	r2, r1
    628c:	79db      	ldrb	r3, [r3, #7]
    628e:	061b      	lsls	r3, r3, #24
    6290:	4313      	orrs	r3, r2
    6292:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    6294:	2208      	movs	r2, #8
    6296:	4669      	mov	r1, sp
    6298:	4b05      	ldr	r3, [pc, #20]	; (62b0 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    629a:	4798      	blx	r3
}
    629c:	2008      	movs	r0, #8
    629e:	b003      	add	sp, #12
    62a0:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    62a2:	1a9b      	subs	r3, r3, r2
    62a4:	466a      	mov	r2, sp
    62a6:	7113      	strb	r3, [r2, #4]
    62a8:	e7d8      	b.n	625c <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    62aa:	46c0      	nop			; (mov r8, r8)
    62ac:	20001290 	.word	0x20001290
    62b0:	00013ba5 	.word	0x00013ba5

000062b4 <LORAREG_GetAttr_DRangeChBandT2>:
{
    62b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62b6:	46c6      	mov	lr, r8
    62b8:	b500      	push	{lr}
    62ba:	b082      	sub	sp, #8
    62bc:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    62be:	ad01      	add	r5, sp, #4
    62c0:	2204      	movs	r2, #4
    62c2:	0028      	movs	r0, r5
    62c4:	4b38      	ldr	r3, [pc, #224]	; (63a8 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    62c6:	4798      	blx	r3
	switch (chMaskCntl)
    62c8:	782b      	ldrb	r3, [r5, #0]
    62ca:	2b00      	cmp	r3, #0
    62cc:	d017      	beq.n	62fe <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    62ce:	2b06      	cmp	r3, #6
    62d0:	d159      	bne.n	6386 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    62d2:	331c      	adds	r3, #28
    62d4:	4a35      	ldr	r2, [pc, #212]	; (63ac <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    62d6:	56d7      	ldrsb	r7, [r2, r3]
    62d8:	2000      	movs	r0, #0
    62da:	2507      	movs	r5, #7
    62dc:	2f00      	cmp	r7, #0
    62de:	dd54      	ble.n	638a <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    62e0:	4a32      	ldr	r2, [pc, #200]	; (63ac <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    62e2:	7916      	ldrb	r6, [r2, #4]
    62e4:	7953      	ldrb	r3, [r2, #5]
    62e6:	021b      	lsls	r3, r3, #8
    62e8:	4333      	orrs	r3, r6
    62ea:	7996      	ldrb	r6, [r2, #6]
    62ec:	0436      	lsls	r6, r6, #16
    62ee:	4333      	orrs	r3, r6
    62f0:	79d6      	ldrb	r6, [r2, #7]
    62f2:	0636      	lsls	r6, r6, #24
    62f4:	431e      	orrs	r6, r3
    62f6:	2000      	movs	r0, #0
    62f8:	2507      	movs	r5, #7
    62fa:	2200      	movs	r2, #0
    62fc:	e035      	b.n	636a <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    62fe:	2322      	movs	r3, #34	; 0x22
    6300:	4a2a      	ldr	r2, [pc, #168]	; (63ac <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    6302:	56d3      	ldrsb	r3, [r2, r3]
    6304:	469c      	mov	ip, r3
    6306:	2b00      	cmp	r3, #0
    6308:	dd4a      	ble.n	63a0 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    630a:	ab01      	add	r3, sp, #4
    630c:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    630e:	7917      	ldrb	r7, [r2, #4]
    6310:	7953      	ldrb	r3, [r2, #5]
    6312:	021b      	lsls	r3, r3, #8
    6314:	433b      	orrs	r3, r7
    6316:	7997      	ldrb	r7, [r2, #6]
    6318:	043f      	lsls	r7, r7, #16
    631a:	433b      	orrs	r3, r7
    631c:	79d7      	ldrb	r7, [r2, #7]
    631e:	063f      	lsls	r7, r7, #24
    6320:	431f      	orrs	r7, r3
    6322:	2000      	movs	r0, #0
    6324:	2507      	movs	r5, #7
    6326:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6328:	2401      	movs	r4, #1
    632a:	e00b      	b.n	6344 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    632c:	784b      	ldrb	r3, [r1, #1]
    632e:	091b      	lsrs	r3, r3, #4
    6330:	4283      	cmp	r3, r0
    6332:	dd02      	ble.n	633a <LORAREG_GetAttr_DRangeChBandT2+0x86>
    6334:	4234      	tst	r4, r6
    6336:	d000      	beq.n	633a <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6338:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    633a:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    633c:	3201      	adds	r2, #1
    633e:	b2d2      	uxtb	r2, r2
    6340:	4562      	cmp	r2, ip
    6342:	da22      	bge.n	638a <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6344:	0051      	lsls	r1, r2, #1
    6346:	1879      	adds	r1, r7, r1
    6348:	784b      	ldrb	r3, [r1, #1]
    634a:	071b      	lsls	r3, r3, #28
    634c:	0f1b      	lsrs	r3, r3, #28
    634e:	42ab      	cmp	r3, r5
    6350:	daec      	bge.n	632c <LORAREG_GetAttr_DRangeChBandT2+0x78>
    6352:	4234      	tst	r4, r6
    6354:	d0f1      	beq.n	633a <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    6356:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    6358:	784b      	ldrb	r3, [r1, #1]
    635a:	091b      	lsrs	r3, r3, #4
    635c:	4298      	cmp	r0, r3
    635e:	dbeb      	blt.n	6338 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    6360:	e7eb      	b.n	633a <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    6362:	3201      	adds	r2, #1
    6364:	b2d2      	uxtb	r2, r2
    6366:	42ba      	cmp	r2, r7
    6368:	da0f      	bge.n	638a <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    636a:	0051      	lsls	r1, r2, #1
    636c:	1871      	adds	r1, r6, r1
    636e:	784b      	ldrb	r3, [r1, #1]
    6370:	071b      	lsls	r3, r3, #28
    6372:	0f1b      	lsrs	r3, r3, #28
    6374:	42ab      	cmp	r3, r5
    6376:	da00      	bge.n	637a <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    6378:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    637a:	784b      	ldrb	r3, [r1, #1]
    637c:	091b      	lsrs	r3, r3, #4
    637e:	4283      	cmp	r3, r0
    6380:	ddef      	ble.n	6362 <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    6382:	0018      	movs	r0, r3
    6384:	e7ed      	b.n	6362 <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    6386:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    6388:	25ff      	movs	r5, #255	; 0xff
    638a:	0100      	lsls	r0, r0, #4
    638c:	230f      	movs	r3, #15
    638e:	401d      	ands	r5, r3
    6390:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    6392:	4643      	mov	r3, r8
    6394:	7018      	strb	r0, [r3, #0]
}
    6396:	2008      	movs	r0, #8
    6398:	b002      	add	sp, #8
    639a:	bc04      	pop	{r2}
    639c:	4690      	mov	r8, r2
    639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    63a0:	2000      	movs	r0, #0
    63a2:	2507      	movs	r5, #7
    63a4:	e7f1      	b.n	638a <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    63a6:	46c0      	nop			; (mov r8, r8)
    63a8:	00013ba5 	.word	0x00013ba5
    63ac:	20001290 	.word	0x20001290

000063b0 <LORAREG_GetAttr_FreqT2>:
{
    63b0:	b510      	push	{r4, lr}
    63b2:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    63b4:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    63b6:	2222      	movs	r2, #34	; 0x22
    63b8:	490d      	ldr	r1, [pc, #52]	; (63f0 <LORAREG_GetAttr_FreqT2+0x40>)
    63ba:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    63bc:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    63be:	4293      	cmp	r3, r2
    63c0:	dd00      	ble.n	63c4 <LORAREG_GetAttr_FreqT2+0x14>
}
    63c2:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    63c4:	0008      	movs	r0, r1
    63c6:	7a09      	ldrb	r1, [r1, #8]
    63c8:	7a42      	ldrb	r2, [r0, #9]
    63ca:	0212      	lsls	r2, r2, #8
    63cc:	430a      	orrs	r2, r1
    63ce:	7a81      	ldrb	r1, [r0, #10]
    63d0:	0409      	lsls	r1, r1, #16
    63d2:	430a      	orrs	r2, r1
    63d4:	7ac1      	ldrb	r1, [r0, #11]
    63d6:	0609      	lsls	r1, r1, #24
    63d8:	4311      	orrs	r1, r2
    63da:	005a      	lsls	r2, r3, #1
    63dc:	18d3      	adds	r3, r2, r3
    63de:	009b      	lsls	r3, r3, #2
    63e0:	18c9      	adds	r1, r1, r3
    63e2:	2204      	movs	r2, #4
    63e4:	0020      	movs	r0, r4
    63e6:	4b03      	ldr	r3, [pc, #12]	; (63f4 <LORAREG_GetAttr_FreqT2+0x44>)
    63e8:	4798      	blx	r3
	return result;
    63ea:	2008      	movs	r0, #8
    63ec:	e7e9      	b.n	63c2 <LORAREG_GetAttr_FreqT2+0x12>
    63ee:	46c0      	nop			; (mov r8, r8)
    63f0:	20001290 	.word	0x20001290
    63f4:	00013ba5 	.word	0x00013ba5

000063f8 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    63f8:	b510      	push	{r4, lr}
    63fa:	b082      	sub	sp, #8
    63fc:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    63fe:	2326      	movs	r3, #38	; 0x26
    6400:	4a37      	ldr	r2, [pc, #220]	; (64e0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6402:	5cd2      	ldrb	r2, [r2, r3]
    6404:	4b37      	ldr	r3, [pc, #220]	; (64e4 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    6406:	4113      	asrs	r3, r2
    6408:	07db      	lsls	r3, r3, #31
    640a:	d502      	bpl.n	6412 <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    640c:	780b      	ldrb	r3, [r1, #0]
    640e:	2b00      	cmp	r3, #0
    6410:	d116      	bne.n	6440 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    6412:	23ac      	movs	r3, #172	; 0xac
    6414:	33ff      	adds	r3, #255	; 0xff
    6416:	4a32      	ldr	r2, [pc, #200]	; (64e0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6418:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    641a:	3baa      	subs	r3, #170	; 0xaa
    641c:	3bff      	subs	r3, #255	; 0xff
    641e:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    6420:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6422:	2b05      	cmp	r3, #5
    6424:	d92c      	bls.n	6480 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    6426:	2205      	movs	r2, #5
    6428:	1ad3      	subs	r3, r2, r3
    642a:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    642c:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    642e:	429a      	cmp	r2, r3
    6430:	db31      	blt.n	6496 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6432:	1ad3      	subs	r3, r2, r3
    6434:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    6436:	42a3      	cmp	r3, r4
    6438:	d224      	bcs.n	6484 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    643a:	466b      	mov	r3, sp
    643c:	711c      	strb	r4, [r3, #4]
    643e:	e02c      	b.n	649a <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    6440:	2302      	movs	r3, #2
    6442:	466a      	mov	r2, sp
    6444:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    6446:	4926      	ldr	r1, [pc, #152]	; (64e0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    6448:	7a0b      	ldrb	r3, [r1, #8]
    644a:	7a4a      	ldrb	r2, [r1, #9]
    644c:	0212      	lsls	r2, r2, #8
    644e:	4313      	orrs	r3, r2
    6450:	7a8a      	ldrb	r2, [r1, #10]
    6452:	0412      	lsls	r2, r2, #16
    6454:	431a      	orrs	r2, r3
    6456:	7acb      	ldrb	r3, [r1, #11]
    6458:	061b      	lsls	r3, r3, #24
    645a:	431a      	orrs	r2, r3
    645c:	2327      	movs	r3, #39	; 0x27
    645e:	5cc9      	ldrb	r1, [r1, r3]
    6460:	004b      	lsls	r3, r1, #1
    6462:	185b      	adds	r3, r3, r1
    6464:	009b      	lsls	r3, r3, #2
    6466:	189b      	adds	r3, r3, r2
    6468:	7919      	ldrb	r1, [r3, #4]
    646a:	795a      	ldrb	r2, [r3, #5]
    646c:	0212      	lsls	r2, r2, #8
    646e:	4311      	orrs	r1, r2
    6470:	799a      	ldrb	r2, [r3, #6]
    6472:	0412      	lsls	r2, r2, #16
    6474:	430a      	orrs	r2, r1
    6476:	79db      	ldrb	r3, [r3, #7]
    6478:	061b      	lsls	r3, r3, #24
    647a:	4313      	orrs	r3, r2
    647c:	9300      	str	r3, [sp, #0]
    647e:	e028      	b.n	64d2 <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    6480:	b25b      	sxtb	r3, r3
    6482:	e7d3      	b.n	642c <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    6484:	2b05      	cmp	r3, #5
    6486:	d802      	bhi.n	648e <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6488:	466a      	mov	r2, sp
    648a:	7113      	strb	r3, [r2, #4]
    648c:	e005      	b.n	649a <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    648e:	2305      	movs	r3, #5
    6490:	466a      	mov	r2, sp
    6492:	7113      	strb	r3, [r2, #4]
    6494:	e001      	b.n	649a <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    6496:	466b      	mov	r3, sp
    6498:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    649a:	4911      	ldr	r1, [pc, #68]	; (64e0 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    649c:	7a0b      	ldrb	r3, [r1, #8]
    649e:	7a4a      	ldrb	r2, [r1, #9]
    64a0:	0212      	lsls	r2, r2, #8
    64a2:	4313      	orrs	r3, r2
    64a4:	7a8a      	ldrb	r2, [r1, #10]
    64a6:	0412      	lsls	r2, r2, #16
    64a8:	431a      	orrs	r2, r3
    64aa:	7acb      	ldrb	r3, [r1, #11]
    64ac:	061b      	lsls	r3, r3, #24
    64ae:	431a      	orrs	r2, r3
    64b0:	2327      	movs	r3, #39	; 0x27
    64b2:	5cc9      	ldrb	r1, [r1, r3]
    64b4:	004b      	lsls	r3, r1, #1
    64b6:	185b      	adds	r3, r3, r1
    64b8:	009b      	lsls	r3, r3, #2
    64ba:	189b      	adds	r3, r3, r2
    64bc:	7919      	ldrb	r1, [r3, #4]
    64be:	795a      	ldrb	r2, [r3, #5]
    64c0:	0212      	lsls	r2, r2, #8
    64c2:	4311      	orrs	r1, r2
    64c4:	799a      	ldrb	r2, [r3, #6]
    64c6:	0412      	lsls	r2, r2, #16
    64c8:	430a      	orrs	r2, r1
    64ca:	79db      	ldrb	r3, [r3, #7]
    64cc:	061b      	lsls	r3, r3, #24
    64ce:	4313      	orrs	r3, r2
    64d0:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    64d2:	2208      	movs	r2, #8
    64d4:	4669      	mov	r1, sp
    64d6:	4b04      	ldr	r3, [pc, #16]	; (64e8 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    64d8:	4798      	blx	r3
}
    64da:	2008      	movs	r0, #8
    64dc:	b002      	add	sp, #8
    64de:	bd10      	pop	{r4, pc}
    64e0:	20001290 	.word	0x20001290
    64e4:	00007fe0 	.word	0x00007fe0
    64e8:	00013ba5 	.word	0x00013ba5

000064ec <LORAREG_GetAttr_FreqT3>:
{
    64ec:	b510      	push	{r4, lr}
    64ee:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    64f0:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    64f2:	2222      	movs	r2, #34	; 0x22
    64f4:	490d      	ldr	r1, [pc, #52]	; (652c <LORAREG_GetAttr_FreqT3+0x40>)
    64f6:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    64f8:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    64fa:	4293      	cmp	r3, r2
    64fc:	dd00      	ble.n	6500 <LORAREG_GetAttr_FreqT3+0x14>
}
    64fe:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    6500:	0008      	movs	r0, r1
    6502:	7a09      	ldrb	r1, [r1, #8]
    6504:	7a42      	ldrb	r2, [r0, #9]
    6506:	0212      	lsls	r2, r2, #8
    6508:	430a      	orrs	r2, r1
    650a:	7a81      	ldrb	r1, [r0, #10]
    650c:	0409      	lsls	r1, r1, #16
    650e:	430a      	orrs	r2, r1
    6510:	7ac1      	ldrb	r1, [r0, #11]
    6512:	0609      	lsls	r1, r1, #24
    6514:	4311      	orrs	r1, r2
    6516:	005a      	lsls	r2, r3, #1
    6518:	18d3      	adds	r3, r2, r3
    651a:	009b      	lsls	r3, r3, #2
    651c:	18c9      	adds	r1, r1, r3
    651e:	2204      	movs	r2, #4
    6520:	0020      	movs	r0, r4
    6522:	4b03      	ldr	r3, [pc, #12]	; (6530 <LORAREG_GetAttr_FreqT3+0x44>)
    6524:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6526:	2008      	movs	r0, #8
    6528:	e7e9      	b.n	64fe <LORAREG_GetAttr_FreqT3+0x12>
    652a:	46c0      	nop			; (mov r8, r8)
    652c:	20001290 	.word	0x20001290
    6530:	00013ba5 	.word	0x00013ba5

00006534 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    6534:	b500      	push	{lr}
    6536:	b083      	sub	sp, #12
    6538:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    653a:	784b      	ldrb	r3, [r1, #1]
    653c:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    653e:	2b05      	cmp	r3, #5
    6540:	d90b      	bls.n	655a <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    6542:	2105      	movs	r1, #5
    6544:	1acb      	subs	r3, r1, r3
    6546:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    6548:	429a      	cmp	r2, r3
    654a:	db0c      	blt.n	6566 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    654c:	1ad3      	subs	r3, r2, r3
    654e:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    6550:	2b05      	cmp	r3, #5
    6552:	d804      	bhi.n	655e <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    6554:	466a      	mov	r2, sp
    6556:	7113      	strb	r3, [r2, #4]
    6558:	e008      	b.n	656c <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    655a:	b25b      	sxtb	r3, r3
    655c:	e7f4      	b.n	6548 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    655e:	2305      	movs	r3, #5
    6560:	466a      	mov	r2, sp
    6562:	7113      	strb	r3, [r2, #4]
    6564:	e002      	b.n	656c <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    6566:	2300      	movs	r3, #0
    6568:	466a      	mov	r2, sp
    656a:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    656c:	4911      	ldr	r1, [pc, #68]	; (65b4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    656e:	7a0b      	ldrb	r3, [r1, #8]
    6570:	7a4a      	ldrb	r2, [r1, #9]
    6572:	0212      	lsls	r2, r2, #8
    6574:	4313      	orrs	r3, r2
    6576:	7a8a      	ldrb	r2, [r1, #10]
    6578:	0412      	lsls	r2, r2, #16
    657a:	431a      	orrs	r2, r3
    657c:	7acb      	ldrb	r3, [r1, #11]
    657e:	061b      	lsls	r3, r3, #24
    6580:	431a      	orrs	r2, r3
    6582:	2327      	movs	r3, #39	; 0x27
    6584:	5cc9      	ldrb	r1, [r1, r3]
    6586:	004b      	lsls	r3, r1, #1
    6588:	185b      	adds	r3, r3, r1
    658a:	009b      	lsls	r3, r3, #2
    658c:	189b      	adds	r3, r3, r2
    658e:	7919      	ldrb	r1, [r3, #4]
    6590:	795a      	ldrb	r2, [r3, #5]
    6592:	0212      	lsls	r2, r2, #8
    6594:	4311      	orrs	r1, r2
    6596:	799a      	ldrb	r2, [r3, #6]
    6598:	0412      	lsls	r2, r2, #16
    659a:	430a      	orrs	r2, r1
    659c:	79db      	ldrb	r3, [r3, #7]
    659e:	061b      	lsls	r3, r3, #24
    65a0:	4313      	orrs	r3, r2
    65a2:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    65a4:	2208      	movs	r2, #8
    65a6:	4669      	mov	r1, sp
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    65aa:	4798      	blx	r3
}
    65ac:	2008      	movs	r0, #8
    65ae:	b003      	add	sp, #12
    65b0:	bd00      	pop	{pc}
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	20001290 	.word	0x20001290
    65b8:	00013ba5 	.word	0x00013ba5

000065bc <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    65bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65be:	46de      	mov	lr, fp
    65c0:	4657      	mov	r7, sl
    65c2:	464e      	mov	r6, r9
    65c4:	4645      	mov	r5, r8
    65c6:	b5e0      	push	{r5, r6, r7, lr}
    65c8:	b085      	sub	sp, #20
    65ca:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    65cc:	2301      	movs	r3, #1
    65ce:	425b      	negs	r3, r3
    65d0:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    65d2:	780b      	ldrb	r3, [r1, #0]
    65d4:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    65d6:	2322      	movs	r3, #34	; 0x22
    65d8:	4a2a      	ldr	r2, [pc, #168]	; (6684 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    65da:	56d7      	ldrsb	r7, [r2, r3]
    65dc:	2f00      	cmp	r7, #0
    65de:	dd40      	ble.n	6662 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    65e0:	7916      	ldrb	r6, [r2, #4]
    65e2:	7953      	ldrb	r3, [r2, #5]
    65e4:	021b      	lsls	r3, r3, #8
    65e6:	4333      	orrs	r3, r6
    65e8:	7996      	ldrb	r6, [r2, #6]
    65ea:	0436      	lsls	r6, r6, #16
    65ec:	4333      	orrs	r3, r6
    65ee:	79d6      	ldrb	r6, [r2, #7]
    65f0:	0636      	lsls	r6, r6, #24
    65f2:	431e      	orrs	r6, r3
    65f4:	2300      	movs	r3, #0
    65f6:	469a      	mov	sl, r3
    65f8:	3b01      	subs	r3, #1
    65fa:	4698      	mov	r8, r3
    65fc:	2300      	movs	r3, #0
    65fe:	2100      	movs	r1, #0
    6600:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    6602:	464a      	mov	r2, r9
    6604:	9201      	str	r2, [sp, #4]
    6606:	46c3      	mov	fp, r8
    6608:	e004      	b.n	6614 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    660a:	3101      	adds	r1, #1
    660c:	b2c9      	uxtb	r1, r1
    660e:	000b      	movs	r3, r1
    6610:	42b9      	cmp	r1, r7
    6612:	da23      	bge.n	665c <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    6614:	004a      	lsls	r2, r1, #1
    6616:	18b2      	adds	r2, r6, r2
    6618:	7814      	ldrb	r4, [r2, #0]
    661a:	2c00      	cmp	r4, #0
    661c:	d0f5      	beq.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    661e:	3352      	adds	r3, #82	; 0x52
    6620:	009b      	lsls	r3, r3, #2
    6622:	4463      	add	r3, ip
    6624:	7a58      	ldrb	r0, [r3, #9]
    6626:	4680      	mov	r8, r0
    6628:	7a98      	ldrb	r0, [r3, #10]
    662a:	0200      	lsls	r0, r0, #8
    662c:	4645      	mov	r5, r8
    662e:	4305      	orrs	r5, r0
    6630:	7ad8      	ldrb	r0, [r3, #11]
    6632:	0400      	lsls	r0, r0, #16
    6634:	4328      	orrs	r0, r5
    6636:	7b1b      	ldrb	r3, [r3, #12]
    6638:	061b      	lsls	r3, r3, #24
    663a:	4303      	orrs	r3, r0
    663c:	d0e5      	beq.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    663e:	459b      	cmp	fp, r3
    6640:	d3e3      	bcc.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    6642:	7850      	ldrb	r0, [r2, #1]
    6644:	0700      	lsls	r0, r0, #28
    6646:	0f00      	lsrs	r0, r0, #28
    6648:	4581      	cmp	r9, r0
    664a:	dbde      	blt.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    664c:	7852      	ldrb	r2, [r2, #1]
    664e:	0912      	lsrs	r2, r2, #4
    6650:	9801      	ldr	r0, [sp, #4]
    6652:	4290      	cmp	r0, r2
    6654:	dcd9      	bgt.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    6656:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    6658:	469b      	mov	fp, r3
    665a:	e7d6      	b.n	660a <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    665c:	4653      	mov	r3, sl
    665e:	2b00      	cmp	r3, #0
    6660:	d10c      	bne.n	667c <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    6662:	2204      	movs	r2, #4
    6664:	a903      	add	r1, sp, #12
    6666:	9800      	ldr	r0, [sp, #0]
    6668:	4b07      	ldr	r3, [pc, #28]	; (6688 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    666a:	4798      	blx	r3
}
    666c:	2008      	movs	r0, #8
    666e:	b005      	add	sp, #20
    6670:	bc3c      	pop	{r2, r3, r4, r5}
    6672:	4690      	mov	r8, r2
    6674:	4699      	mov	r9, r3
    6676:	46a2      	mov	sl, r4
    6678:	46ab      	mov	fp, r5
    667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    667c:	465b      	mov	r3, fp
    667e:	9303      	str	r3, [sp, #12]
    6680:	e7ef      	b.n	6662 <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    6682:	46c0      	nop			; (mov r8, r8)
    6684:	20001290 	.word	0x20001290
    6688:	00013ba5 	.word	0x00013ba5

0000668c <ValidateTxFreqT2>:
{
    668c:	b500      	push	{lr}
    668e:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    6690:	2208      	movs	r2, #8
    6692:	4668      	mov	r0, sp
    6694:	4b04      	ldr	r3, [pc, #16]	; (66a8 <ValidateTxFreqT2+0x1c>)
    6696:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    6698:	4b04      	ldr	r3, [pc, #16]	; (66ac <ValidateTxFreqT2+0x20>)
    669a:	685b      	ldr	r3, [r3, #4]
    669c:	4669      	mov	r1, sp
    669e:	2001      	movs	r0, #1
    66a0:	4798      	blx	r3
}
    66a2:	b003      	add	sp, #12
    66a4:	bd00      	pop	{pc}
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	00013ba5 	.word	0x00013ba5
    66ac:	20000ce0 	.word	0x20000ce0

000066b0 <ValidateFreqIN>:
{
    66b0:	b500      	push	{lr}
    66b2:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    66b4:	2204      	movs	r2, #4
    66b6:	a801      	add	r0, sp, #4
    66b8:	4b06      	ldr	r3, [pc, #24]	; (66d4 <ValidateFreqIN+0x24>)
    66ba:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    66bc:	9b01      	ldr	r3, [sp, #4]
    66be:	4a06      	ldr	r2, [pc, #24]	; (66d8 <ValidateFreqIN+0x28>)
    66c0:	4694      	mov	ip, r2
    66c2:	4463      	add	r3, ip
    66c4:	4a05      	ldr	r2, [pc, #20]	; (66dc <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    66c6:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    66c8:	4293      	cmp	r3, r2
    66ca:	d900      	bls.n	66ce <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    66cc:	3002      	adds	r0, #2
}
    66ce:	b003      	add	sp, #12
    66d0:	bd00      	pop	{pc}
    66d2:	46c0      	nop			; (mov r8, r8)
    66d4:	00013ba5 	.word	0x00013ba5
    66d8:	cc7125c0 	.word	0xcc7125c0
    66dc:	001e8480 	.word	0x001e8480

000066e0 <ValidateFreqJP>:
{
    66e0:	b500      	push	{lr}
    66e2:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    66e4:	2204      	movs	r2, #4
    66e6:	a801      	add	r0, sp, #4
    66e8:	4b06      	ldr	r3, [pc, #24]	; (6704 <ValidateFreqJP+0x24>)
    66ea:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    66ec:	9b01      	ldr	r3, [sp, #4]
    66ee:	4a06      	ldr	r2, [pc, #24]	; (6708 <ValidateFreqJP+0x28>)
    66f0:	4694      	mov	ip, r2
    66f2:	4463      	add	r3, ip
    66f4:	4a05      	ldr	r2, [pc, #20]	; (670c <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    66f6:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    66f8:	4293      	cmp	r3, r2
    66fa:	d900      	bls.n	66fe <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    66fc:	3002      	adds	r0, #2
}
    66fe:	b003      	add	sp, #12
    6700:	bd00      	pop	{pc}
    6702:	46c0      	nop			; (mov r8, r8)
    6704:	00013ba5 	.word	0x00013ba5
    6708:	c929ea00 	.word	0xc929ea00
    670c:	007a1200 	.word	0x007a1200

00006710 <ValidateFreqKR>:
{
    6710:	b500      	push	{lr}
    6712:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    6714:	2204      	movs	r2, #4
    6716:	a801      	add	r0, sp, #4
    6718:	4b0a      	ldr	r3, [pc, #40]	; (6744 <ValidateFreqKR+0x34>)
    671a:	4798      	blx	r3
		if(freq == freqNew)
    671c:	9a01      	ldr	r2, [sp, #4]
    671e:	4b0a      	ldr	r3, [pc, #40]	; (6748 <ValidateFreqKR+0x38>)
    6720:	429a      	cmp	r2, r3
    6722:	d00b      	beq.n	673c <ValidateFreqKR+0x2c>
    6724:	4b09      	ldr	r3, [pc, #36]	; (674c <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    6726:	490a      	ldr	r1, [pc, #40]	; (6750 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    6728:	429a      	cmp	r2, r3
    672a:	d009      	beq.n	6740 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    672c:	4809      	ldr	r0, [pc, #36]	; (6754 <ValidateFreqKR+0x44>)
    672e:	4684      	mov	ip, r0
    6730:	4463      	add	r3, ip
    6732:	428b      	cmp	r3, r1
    6734:	d1f8      	bne.n	6728 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6736:	200a      	movs	r0, #10
}
    6738:	b003      	add	sp, #12
    673a:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    673c:	2008      	movs	r0, #8
    673e:	e7fb      	b.n	6738 <ValidateFreqKR+0x28>
    6740:	2008      	movs	r0, #8
    6742:	e7f9      	b.n	6738 <ValidateFreqKR+0x28>
    6744:	00013ba5 	.word	0x00013ba5
    6748:	36e3d1a0 	.word	0x36e3d1a0
    674c:	36e6dee0 	.word	0x36e6dee0
    6750:	370870a0 	.word	0x370870a0
    6754:	00030d40 	.word	0x00030d40

00006758 <setNewChannelsT1>:
{
    6758:	b5f0      	push	{r4, r5, r6, r7, lr}
    675a:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    675c:	ac01      	add	r4, sp, #4
    675e:	2204      	movs	r2, #4
    6760:	0020      	movs	r0, r4
    6762:	4b1f      	ldr	r3, [pc, #124]	; (67e0 <setNewChannelsT1+0x88>)
    6764:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    6766:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    6768:	78a6      	ldrb	r6, [r4, #2]
    676a:	466b      	mov	r3, sp
    676c:	1cd9      	adds	r1, r3, #3
    676e:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    6770:	201b      	movs	r0, #27
    6772:	4b1c      	ldr	r3, [pc, #112]	; (67e4 <setNewChannelsT1+0x8c>)
    6774:	4798      	blx	r3
    6776:	0005      	movs	r5, r0
    6778:	2808      	cmp	r0, #8
    677a:	d003      	beq.n	6784 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    677c:	250a      	movs	r5, #10
}
    677e:	0028      	movs	r0, r5
    6780:	b003      	add	sp, #12
    6782:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    6784:	2e06      	cmp	r6, #6
    6786:	d01c      	beq.n	67c2 <setNewChannelsT1+0x6a>
    6788:	d80a      	bhi.n	67a0 <setNewChannelsT1+0x48>
    678a:	2e04      	cmp	r6, #4
    678c:	d8f7      	bhi.n	677e <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    678e:	0136      	lsls	r6, r6, #4
    6790:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    6792:	0001      	movs	r1, r0
    6794:	310f      	adds	r1, #15
    6796:	b2c9      	uxtb	r1, r1
    6798:	003a      	movs	r2, r7
    679a:	4b13      	ldr	r3, [pc, #76]	; (67e8 <setNewChannelsT1+0x90>)
    679c:	4798      	blx	r3
				break;
    679e:	e7ee      	b.n	677e <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    67a0:	2400      	movs	r4, #0
    67a2:	2e07      	cmp	r6, #7
    67a4:	d1eb      	bne.n	677e <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    67a6:	4e11      	ldr	r6, [pc, #68]	; (67ec <setNewChannelsT1+0x94>)
    67a8:	2100      	movs	r1, #0
    67aa:	0020      	movs	r0, r4
    67ac:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    67ae:	3401      	adds	r4, #1
    67b0:	b2e4      	uxtb	r4, r4
    67b2:	2c3f      	cmp	r4, #63	; 0x3f
    67b4:	d1f8      	bne.n	67a8 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    67b6:	003a      	movs	r2, r7
    67b8:	2147      	movs	r1, #71	; 0x47
    67ba:	2040      	movs	r0, #64	; 0x40
    67bc:	4b0a      	ldr	r3, [pc, #40]	; (67e8 <setNewChannelsT1+0x90>)
    67be:	4798      	blx	r3
				break;
    67c0:	e7dd      	b.n	677e <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    67c2:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    67c4:	4e09      	ldr	r6, [pc, #36]	; (67ec <setNewChannelsT1+0x94>)
    67c6:	2101      	movs	r1, #1
    67c8:	0020      	movs	r0, r4
    67ca:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    67cc:	3401      	adds	r4, #1
    67ce:	b2e4      	uxtb	r4, r4
    67d0:	2c3f      	cmp	r4, #63	; 0x3f
    67d2:	d1f8      	bne.n	67c6 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    67d4:	003a      	movs	r2, r7
    67d6:	2147      	movs	r1, #71	; 0x47
    67d8:	2040      	movs	r0, #64	; 0x40
    67da:	4b03      	ldr	r3, [pc, #12]	; (67e8 <setNewChannelsT1+0x90>)
    67dc:	4798      	blx	r3
			    break;
    67de:	e7ce      	b.n	677e <setNewChannelsT1+0x26>
    67e0:	00013ba5 	.word	0x00013ba5
    67e4:	00005699 	.word	0x00005699
    67e8:	00005cb1 	.word	0x00005cb1
    67ec:	00005c51 	.word	0x00005c51

000067f0 <setDlFrequency>:
{
    67f0:	b530      	push	{r4, r5, lr}
    67f2:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    67f4:	ac02      	add	r4, sp, #8
    67f6:	2208      	movs	r2, #8
    67f8:	0020      	movs	r0, r4
    67fa:	4b20      	ldr	r3, [pc, #128]	; (687c <setDlFrequency+0x8c>)
    67fc:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    67fe:	ab01      	add	r3, sp, #4
    6800:	7922      	ldrb	r2, [r4, #4]
    6802:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    6804:	2201      	movs	r2, #1
    6806:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6808:	4b1d      	ldr	r3, [pc, #116]	; (6880 <setDlFrequency+0x90>)
    680a:	685b      	ldr	r3, [r3, #4]
    680c:	0021      	movs	r1, r4
    680e:	2001      	movs	r0, #1
    6810:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    6812:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    6814:	2808      	cmp	r0, #8
    6816:	d002      	beq.n	681e <setDlFrequency+0x2e>
}
    6818:	0020      	movs	r0, r4
    681a:	b005      	add	sp, #20
    681c:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    681e:	a901      	add	r1, sp, #4
    6820:	300d      	adds	r0, #13
    6822:	4b18      	ldr	r3, [pc, #96]	; (6884 <setDlFrequency+0x94>)
    6824:	4798      	blx	r3
    6826:	0004      	movs	r4, r0
    6828:	2808      	cmp	r0, #8
    682a:	d001      	beq.n	6830 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    682c:	240a      	movs	r4, #10
    682e:	e7f3      	b.n	6818 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    6830:	4a15      	ldr	r2, [pc, #84]	; (6888 <setDlFrequency+0x98>)
    6832:	7a13      	ldrb	r3, [r2, #8]
    6834:	7a50      	ldrb	r0, [r2, #9]
    6836:	0200      	lsls	r0, r0, #8
    6838:	4303      	orrs	r3, r0
    683a:	7a90      	ldrb	r0, [r2, #10]
    683c:	0400      	lsls	r0, r0, #16
    683e:	4318      	orrs	r0, r3
    6840:	7ad3      	ldrb	r3, [r2, #11]
    6842:	061b      	lsls	r3, r3, #24
    6844:	4318      	orrs	r0, r3
    6846:	a902      	add	r1, sp, #8
    6848:	790d      	ldrb	r5, [r1, #4]
    684a:	006b      	lsls	r3, r5, #1
    684c:	195b      	adds	r3, r3, r5
    684e:	009b      	lsls	r3, r3, #2
    6850:	181b      	adds	r3, r3, r0
    6852:	7808      	ldrb	r0, [r1, #0]
    6854:	7118      	strb	r0, [r3, #4]
    6856:	7848      	ldrb	r0, [r1, #1]
    6858:	7158      	strb	r0, [r3, #5]
    685a:	7888      	ldrb	r0, [r1, #2]
    685c:	7198      	strb	r0, [r3, #6]
    685e:	78c9      	ldrb	r1, [r1, #3]
    6860:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    6862:	23fa      	movs	r3, #250	; 0xfa
    6864:	33ff      	adds	r3, #255	; 0xff
    6866:	5cd3      	ldrb	r3, [r2, r3]
    6868:	21fd      	movs	r1, #253	; 0xfd
    686a:	0049      	lsls	r1, r1, #1
    686c:	5c50      	ldrb	r0, [r2, r1]
    686e:	0200      	lsls	r0, r0, #8
    6870:	4318      	orrs	r0, r3
    6872:	b2c1      	uxtb	r1, r0
    6874:	0a00      	lsrs	r0, r0, #8
    6876:	4b05      	ldr	r3, [pc, #20]	; (688c <setDlFrequency+0x9c>)
    6878:	4798      	blx	r3
    687a:	e7cd      	b.n	6818 <setDlFrequency+0x28>
    687c:	00013ba5 	.word	0x00013ba5
    6880:	20000ce0 	.word	0x20000ce0
    6884:	000055b1 	.word	0x000055b1
    6888:	20001290 	.word	0x20001290
    688c:	00008e5d 	.word	0x00008e5d

00006890 <setNewChannel>:
{
    6890:	b5f0      	push	{r4, r5, r6, r7, lr}
    6892:	46d6      	mov	lr, sl
    6894:	464f      	mov	r7, r9
    6896:	4646      	mov	r6, r8
    6898:	b5c0      	push	{r6, r7, lr}
    689a:	b082      	sub	sp, #8
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    689c:	2326      	movs	r3, #38	; 0x26
    689e:	4a31      	ldr	r2, [pc, #196]	; (6964 <setNewChannel+0xd4>)
    68a0:	5cd2      	ldrb	r2, [r2, r3]
    68a2:	4b31      	ldr	r3, [pc, #196]	; (6968 <setNewChannel+0xd8>)
    68a4:	4113      	asrs	r3, r2
    68a6:	07db      	lsls	r3, r3, #31
    68a8:	d407      	bmi.n	68ba <setNewChannel+0x2a>
    68aa:	2a05      	cmp	r2, #5
    68ac:	d01f      	beq.n	68ee <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    68ae:	2a04      	cmp	r2, #4
    68b0:	d01f      	beq.n	68f2 <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    68b2:	2a0f      	cmp	r2, #15
    68b4:	d01f      	beq.n	68f6 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    68b6:	4f2d      	ldr	r7, [pc, #180]	; (696c <setNewChannel+0xdc>)
    68b8:	e000      	b.n	68bc <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    68ba:	4f2d      	ldr	r7, [pc, #180]	; (6970 <setNewChannel+0xe0>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    68bc:	ac01      	add	r4, sp, #4
    68be:	2204      	movs	r2, #4
    68c0:	0020      	movs	r0, r4
    68c2:	4b2c      	ldr	r3, [pc, #176]	; (6974 <setNewChannel+0xe4>)
    68c4:	4798      	blx	r3
	chMask = newCh.channelMask;
    68c6:	8825      	ldrh	r5, [r4, #0]
		result = LORAWAN_INVALID_PARAMETER;
    68c8:	260a      	movs	r6, #10
	if(/*ValidateChannelMaskT2(&chMask) != LORAWAN_SUCCESS*/ chMask == 0 || ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, &newCh.channelMaskCntl) != LORAWAN_SUCCESS)
    68ca:	2d00      	cmp	r5, #0
    68cc:	d008      	beq.n	68e0 <setNewChannel+0x50>
    68ce:	466b      	mov	r3, sp
    68d0:	1d99      	adds	r1, r3, #6
    68d2:	201b      	movs	r0, #27
    68d4:	4b28      	ldr	r3, [pc, #160]	; (6978 <setNewChannel+0xe8>)
    68d6:	4798      	blx	r3
    68d8:	0006      	movs	r6, r0
    68da:	2808      	cmp	r0, #8
    68dc:	d00d      	beq.n	68fa <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    68de:	260a      	movs	r6, #10
}
    68e0:	0030      	movs	r0, r6
    68e2:	b002      	add	sp, #8
    68e4:	bc1c      	pop	{r2, r3, r4}
    68e6:	4690      	mov	r8, r2
    68e8:	4699      	mov	r9, r3
    68ea:	46a2      	mov	sl, r4
    68ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    68ee:	4f20      	ldr	r7, [pc, #128]	; (6970 <setNewChannel+0xe0>)
    68f0:	e7e4      	b.n	68bc <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    68f2:	4f22      	ldr	r7, [pc, #136]	; (697c <setNewChannel+0xec>)
    68f4:	e7e2      	b.n	68bc <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatus;
    68f6:	4f22      	ldr	r7, [pc, #136]	; (6980 <setNewChannel+0xf0>)
    68f8:	e7e0      	b.n	68bc <setNewChannel+0x2c>
		if(newCh.channelMaskCntl == 6)
    68fa:	ab01      	add	r3, sp, #4
    68fc:	789c      	ldrb	r4, [r3, #2]
    68fe:	2c06      	cmp	r4, #6
    6900:	d00c      	beq.n	691c <setNewChannel+0x8c>
		else if(newCh.channelMaskCntl == 0)
    6902:	2c00      	cmp	r4, #0
    6904:	d1ec      	bne.n	68e0 <setNewChannel+0x50>
			for(i = 0; i < RegParams.maxChannels; i++)
    6906:	2322      	movs	r3, #34	; 0x22
    6908:	4a16      	ldr	r2, [pc, #88]	; (6964 <setNewChannel+0xd4>)
    690a:	56d3      	ldrsb	r3, [r2, r3]
    690c:	2b00      	cmp	r3, #0
    690e:	dde7      	ble.n	68e0 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    6910:	2301      	movs	r3, #1
    6912:	4698      	mov	r8, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    6914:	4692      	mov	sl, r2
    6916:	2322      	movs	r3, #34	; 0x22
    6918:	4699      	mov	r9, r3
    691a:	e01c      	b.n	6956 <setNewChannel+0xc6>
			for(i = 0; i < RegParams.maxChannels; i++)
    691c:	2322      	movs	r3, #34	; 0x22
    691e:	4a11      	ldr	r2, [pc, #68]	; (6964 <setNewChannel+0xd4>)
    6920:	56d3      	ldrsb	r3, [r2, r3]
    6922:	2b00      	cmp	r3, #0
    6924:	dddc      	ble.n	68e0 <setNewChannel+0x50>
    6926:	2400      	movs	r4, #0
    6928:	4690      	mov	r8, r2
    692a:	2522      	movs	r5, #34	; 0x22
				pUpdateChidStatus(i,ENABLED);
    692c:	2101      	movs	r1, #1
    692e:	0020      	movs	r0, r4
    6930:	47b8      	blx	r7
			for(i = 0; i < RegParams.maxChannels; i++)
    6932:	3401      	adds	r4, #1
    6934:	b2e4      	uxtb	r4, r4
    6936:	4643      	mov	r3, r8
    6938:	575b      	ldrsb	r3, [r3, r5]
    693a:	429c      	cmp	r4, r3
    693c:	dbf6      	blt.n	692c <setNewChannel+0x9c>
    693e:	e7cf      	b.n	68e0 <setNewChannel+0x50>
					pUpdateChidStatus(i,DISABLED);
    6940:	2100      	movs	r1, #0
    6942:	0020      	movs	r0, r4
    6944:	47b8      	blx	r7
				chMask = chMask >> SHIFT1;
    6946:	086d      	lsrs	r5, r5, #1
			for(i = 0; i < RegParams.maxChannels; i++)
    6948:	3401      	adds	r4, #1
    694a:	b2e4      	uxtb	r4, r4
    694c:	4653      	mov	r3, sl
    694e:	464a      	mov	r2, r9
    6950:	569b      	ldrsb	r3, [r3, r2]
    6952:	429c      	cmp	r4, r3
    6954:	dac4      	bge.n	68e0 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    6956:	4643      	mov	r3, r8
    6958:	422b      	tst	r3, r5
    695a:	d0f1      	beq.n	6940 <setNewChannel+0xb0>
					pUpdateChidStatus(i, ENABLED);
    695c:	4641      	mov	r1, r8
    695e:	0020      	movs	r0, r4
    6960:	47b8      	blx	r7
    6962:	e7f0      	b.n	6946 <setNewChannel+0xb6>
    6964:	20001290 	.word	0x20001290
    6968:	00007fc0 	.word	0x00007fc0
    696c:	00005cf5 	.word	0x00005cf5
    6970:	00005f01 	.word	0x00005f01
    6974:	00013ba5 	.word	0x00013ba5
    6978:	0000571d 	.word	0x0000571d
    697c:	00005e59 	.word	0x00005e59
    6980:	00005c51 	.word	0x00005c51

00006984 <setFrequency>:
{
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    6988:	ac02      	add	r4, sp, #8
    698a:	2208      	movs	r2, #8
    698c:	0020      	movs	r0, r4
    698e:	4b3f      	ldr	r3, [pc, #252]	; (6a8c <setFrequency+0x108>)
    6990:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    6992:	ab01      	add	r3, sp, #4
    6994:	7922      	ldrb	r2, [r4, #4]
    6996:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    6998:	2200      	movs	r2, #0
    699a:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    699c:	4b3c      	ldr	r3, [pc, #240]	; (6a90 <setFrequency+0x10c>)
    699e:	685b      	ldr	r3, [r3, #4]
    69a0:	0021      	movs	r1, r4
    69a2:	2001      	movs	r0, #1
    69a4:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    69a6:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    69a8:	2808      	cmp	r0, #8
    69aa:	d002      	beq.n	69b2 <setFrequency+0x2e>
}
    69ac:	0020      	movs	r0, r4
    69ae:	b004      	add	sp, #16
    69b0:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    69b2:	a901      	add	r1, sp, #4
    69b4:	300d      	adds	r0, #13
    69b6:	4b37      	ldr	r3, [pc, #220]	; (6a94 <setFrequency+0x110>)
    69b8:	4798      	blx	r3
    69ba:	0004      	movs	r4, r0
    69bc:	2808      	cmp	r0, #8
    69be:	d001      	beq.n	69c4 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    69c0:	240a      	movs	r4, #10
    69c2:	e7f3      	b.n	69ac <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    69c4:	ab02      	add	r3, sp, #8
    69c6:	791d      	ldrb	r5, [r3, #4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0)
    69c8:	2326      	movs	r3, #38	; 0x26
    69ca:	4a33      	ldr	r2, [pc, #204]	; (6a98 <setFrequency+0x114>)
    69cc:	5cd2      	ldrb	r2, [r2, r3]
    69ce:	3b23      	subs	r3, #35	; 0x23
    69d0:	4113      	asrs	r3, r2
    69d2:	07db      	lsls	r3, r3, #31
    69d4:	d446      	bmi.n	6a64 <setFrequency+0xe0>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    69d6:	006a      	lsls	r2, r5, #1
    69d8:	1952      	adds	r2, r2, r5
    69da:	0090      	lsls	r0, r2, #2
    69dc:	a902      	add	r1, sp, #8
    69de:	9d02      	ldr	r5, [sp, #8]
    69e0:	4b2d      	ldr	r3, [pc, #180]	; (6a98 <setFrequency+0x114>)
    69e2:	7a1a      	ldrb	r2, [r3, #8]
    69e4:	7a5e      	ldrb	r6, [r3, #9]
    69e6:	0236      	lsls	r6, r6, #8
    69e8:	4316      	orrs	r6, r2
    69ea:	7a9a      	ldrb	r2, [r3, #10]
    69ec:	0412      	lsls	r2, r2, #16
    69ee:	4316      	orrs	r6, r2
    69f0:	7ada      	ldrb	r2, [r3, #11]
    69f2:	0612      	lsls	r2, r2, #24
    69f4:	4332      	orrs	r2, r6
    69f6:	5415      	strb	r5, [r2, r0]
    69f8:	0a2e      	lsrs	r6, r5, #8
    69fa:	1812      	adds	r2, r2, r0
    69fc:	7056      	strb	r6, [r2, #1]
    69fe:	0c2e      	lsrs	r6, r5, #16
    6a00:	7096      	strb	r6, [r2, #2]
    6a02:	0e2d      	lsrs	r5, r5, #24
    6a04:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    6a06:	7a1a      	ldrb	r2, [r3, #8]
    6a08:	7a5d      	ldrb	r5, [r3, #9]
    6a0a:	022d      	lsls	r5, r5, #8
    6a0c:	4315      	orrs	r5, r2
    6a0e:	7a9a      	ldrb	r2, [r3, #10]
    6a10:	0412      	lsls	r2, r2, #16
    6a12:	4315      	orrs	r5, r2
    6a14:	7ada      	ldrb	r2, [r3, #11]
    6a16:	0612      	lsls	r2, r2, #24
    6a18:	432a      	orrs	r2, r5
    6a1a:	1812      	adds	r2, r2, r0
    6a1c:	780d      	ldrb	r5, [r1, #0]
    6a1e:	7115      	strb	r5, [r2, #4]
    6a20:	784d      	ldrb	r5, [r1, #1]
    6a22:	7155      	strb	r5, [r2, #5]
    6a24:	788d      	ldrb	r5, [r1, #2]
    6a26:	7195      	strb	r5, [r2, #6]
    6a28:	78c9      	ldrb	r1, [r1, #3]
    6a2a:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    6a2c:	7a1a      	ldrb	r2, [r3, #8]
    6a2e:	7a59      	ldrb	r1, [r3, #9]
    6a30:	0209      	lsls	r1, r1, #8
    6a32:	4311      	orrs	r1, r2
    6a34:	7a9a      	ldrb	r2, [r3, #10]
    6a36:	0412      	lsls	r2, r2, #16
    6a38:	4311      	orrs	r1, r2
    6a3a:	7ada      	ldrb	r2, [r3, #11]
    6a3c:	0612      	lsls	r2, r2, #24
    6a3e:	430a      	orrs	r2, r1
    6a40:	1812      	adds	r2, r2, r0
    6a42:	7ad1      	ldrb	r1, [r2, #11]
    6a44:	2001      	movs	r0, #1
    6a46:	4301      	orrs	r1, r0
    6a48:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    6a4a:	22fa      	movs	r2, #250	; 0xfa
    6a4c:	32ff      	adds	r2, #255	; 0xff
    6a4e:	5c9a      	ldrb	r2, [r3, r2]
    6a50:	21fd      	movs	r1, #253	; 0xfd
    6a52:	0049      	lsls	r1, r1, #1
    6a54:	5c58      	ldrb	r0, [r3, r1]
    6a56:	0200      	lsls	r0, r0, #8
    6a58:	4310      	orrs	r0, r2
    6a5a:	b2c1      	uxtb	r1, r0
    6a5c:	0a00      	lsrs	r0, r0, #8
    6a5e:	4b0f      	ldr	r3, [pc, #60]	; (6a9c <setFrequency+0x118>)
    6a60:	4798      	blx	r3
    6a62:	e7a3      	b.n	69ac <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    6a64:	4a0c      	ldr	r2, [pc, #48]	; (6a98 <setFrequency+0x114>)
    6a66:	7a16      	ldrb	r6, [r2, #8]
    6a68:	7a53      	ldrb	r3, [r2, #9]
    6a6a:	021b      	lsls	r3, r3, #8
    6a6c:	4333      	orrs	r3, r6
    6a6e:	7a96      	ldrb	r6, [r2, #10]
    6a70:	0436      	lsls	r6, r6, #16
    6a72:	4333      	orrs	r3, r6
    6a74:	7ad6      	ldrb	r6, [r2, #11]
    6a76:	0636      	lsls	r6, r6, #24
    6a78:	431e      	orrs	r6, r3
    6a7a:	006b      	lsls	r3, r5, #1
    6a7c:	195b      	adds	r3, r3, r5
    6a7e:	009b      	lsls	r3, r3, #2
    6a80:	18f6      	adds	r6, r6, r3
    6a82:	9802      	ldr	r0, [sp, #8]
    6a84:	4b06      	ldr	r3, [pc, #24]	; (6aa0 <setFrequency+0x11c>)
    6a86:	4798      	blx	r3
    6a88:	7230      	strb	r0, [r6, #8]
    6a8a:	e7a4      	b.n	69d6 <setFrequency+0x52>
    6a8c:	00013ba5 	.word	0x00013ba5
    6a90:	20000ce0 	.word	0x20000ce0
    6a94:	000055b1 	.word	0x000055b1
    6a98:	20001290 	.word	0x20001290
    6a9c:	00008e5d 	.word	0x00008e5d
    6aa0:	00005841 	.word	0x00005841

00006aa4 <setDutyCycle>:
{
    6aa4:	b570      	push	{r4, r5, r6, lr}
    6aa6:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    6aa8:	ac01      	add	r4, sp, #4
    6aaa:	2204      	movs	r2, #4
    6aac:	0020      	movs	r0, r4
    6aae:	4b2d      	ldr	r3, [pc, #180]	; (6b64 <setDutyCycle+0xc0>)
    6ab0:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    6ab2:	78a5      	ldrb	r5, [r4, #2]
    6ab4:	466b      	mov	r3, sp
    6ab6:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    6ab8:	2301      	movs	r3, #1
    6aba:	466a      	mov	r2, sp
    6abc:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    6abe:	4669      	mov	r1, sp
    6ac0:	2015      	movs	r0, #21
    6ac2:	4b29      	ldr	r3, [pc, #164]	; (6b68 <setDutyCycle+0xc4>)
    6ac4:	4798      	blx	r3
    6ac6:	0004      	movs	r4, r0
    6ac8:	2808      	cmp	r0, #8
    6aca:	d003      	beq.n	6ad4 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    6acc:	240a      	movs	r4, #10
}
    6ace:	0020      	movs	r0, r4
    6ad0:	b002      	add	sp, #8
    6ad2:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    6ad4:	0069      	lsls	r1, r5, #1
    6ad6:	1949      	adds	r1, r1, r5
    6ad8:	0089      	lsls	r1, r1, #2
    6ada:	4b24      	ldr	r3, [pc, #144]	; (6b6c <setDutyCycle+0xc8>)
    6adc:	7a1a      	ldrb	r2, [r3, #8]
    6ade:	7a58      	ldrb	r0, [r3, #9]
    6ae0:	0200      	lsls	r0, r0, #8
    6ae2:	4310      	orrs	r0, r2
    6ae4:	7a9a      	ldrb	r2, [r3, #10]
    6ae6:	0412      	lsls	r2, r2, #16
    6ae8:	4310      	orrs	r0, r2
    6aea:	7ada      	ldrb	r2, [r3, #11]
    6aec:	0612      	lsls	r2, r2, #24
    6aee:	4302      	orrs	r2, r0
    6af0:	1852      	adds	r2, r2, r1
    6af2:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    6af4:	0028      	movs	r0, r5
    6af6:	30c8      	adds	r0, #200	; 0xc8
    6af8:	0040      	lsls	r0, r0, #1
    6afa:	aa01      	add	r2, sp, #4
    6afc:	1818      	adds	r0, r3, r0
    6afe:	7816      	ldrb	r6, [r2, #0]
    6b00:	7186      	strb	r6, [r0, #6]
    6b02:	7852      	ldrb	r2, [r2, #1]
    6b04:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    6b06:	7b18      	ldrb	r0, [r3, #12]
    6b08:	7b5a      	ldrb	r2, [r3, #13]
    6b0a:	0212      	lsls	r2, r2, #8
    6b0c:	4302      	orrs	r2, r0
    6b0e:	7b98      	ldrb	r0, [r3, #14]
    6b10:	0400      	lsls	r0, r0, #16
    6b12:	4302      	orrs	r2, r0
    6b14:	7bd8      	ldrb	r0, [r3, #15]
    6b16:	0600      	lsls	r0, r0, #24
    6b18:	4310      	orrs	r0, r2
    6b1a:	006a      	lsls	r2, r5, #1
    6b1c:	1952      	adds	r2, r2, r5
    6b1e:	0092      	lsls	r2, r2, #2
    6b20:	1812      	adds	r2, r2, r0
    6b22:	2000      	movs	r0, #0
    6b24:	7210      	strb	r0, [r2, #8]
    6b26:	7250      	strb	r0, [r2, #9]
    6b28:	7290      	strb	r0, [r2, #10]
    6b2a:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    6b2c:	7a1d      	ldrb	r5, [r3, #8]
    6b2e:	7a5a      	ldrb	r2, [r3, #9]
    6b30:	0212      	lsls	r2, r2, #8
    6b32:	432a      	orrs	r2, r5
    6b34:	7a9d      	ldrb	r5, [r3, #10]
    6b36:	042d      	lsls	r5, r5, #16
    6b38:	432a      	orrs	r2, r5
    6b3a:	7add      	ldrb	r5, [r3, #11]
    6b3c:	062d      	lsls	r5, r5, #24
    6b3e:	4315      	orrs	r5, r2
    6b40:	186d      	adds	r5, r5, r1
    6b42:	7aea      	ldrb	r2, [r5, #11]
    6b44:	2104      	movs	r1, #4
    6b46:	430a      	orrs	r2, r1
    6b48:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    6b4a:	22fa      	movs	r2, #250	; 0xfa
    6b4c:	32ff      	adds	r2, #255	; 0xff
    6b4e:	5c9a      	ldrb	r2, [r3, r2]
    6b50:	21fd      	movs	r1, #253	; 0xfd
    6b52:	0049      	lsls	r1, r1, #1
    6b54:	5c58      	ldrb	r0, [r3, r1]
    6b56:	0200      	lsls	r0, r0, #8
    6b58:	4310      	orrs	r0, r2
    6b5a:	b2c1      	uxtb	r1, r0
    6b5c:	0a00      	lsrs	r0, r0, #8
    6b5e:	4b04      	ldr	r3, [pc, #16]	; (6b70 <setDutyCycle+0xcc>)
    6b60:	4798      	blx	r3
    6b62:	e7b4      	b.n	6ace <setDutyCycle+0x2a>
    6b64:	00013ba5 	.word	0x00013ba5
    6b68:	000055b1 	.word	0x000055b1
    6b6c:	20001290 	.word	0x20001290
    6b70:	00008e5d 	.word	0x00008e5d

00006b74 <LORAREG_GetAttr_DutyCycleTimer>:
{
    6b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b76:	46d6      	mov	lr, sl
    6b78:	464f      	mov	r7, r9
    6b7a:	4646      	mov	r6, r8
    6b7c:	b5c0      	push	{r6, r7, lr}
    6b7e:	b084      	sub	sp, #16
    6b80:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    6b82:	780b      	ldrb	r3, [r1, #0]
    6b84:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6b86:	2322      	movs	r3, #34	; 0x22
    6b88:	4a5b      	ldr	r2, [pc, #364]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6b8a:	56d6      	ldrsb	r6, [r2, r3]
    6b8c:	2e00      	cmp	r6, #0
    6b8e:	dd66      	ble.n	6c5e <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    6b90:	0013      	movs	r3, r2
    6b92:	7910      	ldrb	r0, [r2, #4]
    6b94:	7952      	ldrb	r2, [r2, #5]
    6b96:	0212      	lsls	r2, r2, #8
    6b98:	4302      	orrs	r2, r0
    6b9a:	7998      	ldrb	r0, [r3, #6]
    6b9c:	0400      	lsls	r0, r0, #16
    6b9e:	4302      	orrs	r2, r0
    6ba0:	79d8      	ldrb	r0, [r3, #7]
    6ba2:	0600      	lsls	r0, r0, #24
    6ba4:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    6ba6:	7b1f      	ldrb	r7, [r3, #12]
    6ba8:	7b5a      	ldrb	r2, [r3, #13]
    6baa:	0212      	lsls	r2, r2, #8
    6bac:	433a      	orrs	r2, r7
    6bae:	7b9f      	ldrb	r7, [r3, #14]
    6bb0:	043f      	lsls	r7, r7, #16
    6bb2:	433a      	orrs	r2, r7
    6bb4:	7bdf      	ldrb	r7, [r3, #15]
    6bb6:	063f      	lsls	r7, r7, #24
    6bb8:	4317      	orrs	r7, r2
    6bba:	2500      	movs	r5, #0
    6bbc:	2300      	movs	r3, #0
    6bbe:	2201      	movs	r2, #1
    6bc0:	4252      	negs	r2, r2
    6bc2:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    6bc4:	4a4c      	ldr	r2, [pc, #304]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6bc6:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6bc8:	4662      	mov	r2, ip
    6bca:	9201      	str	r2, [sp, #4]
    6bcc:	e004      	b.n	6bd8 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    6bce:	3301      	adds	r3, #1
    6bd0:	b2db      	uxtb	r3, r3
    6bd2:	001d      	movs	r5, r3
    6bd4:	42b3      	cmp	r3, r6
    6bd6:	da27      	bge.n	6c28 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    6bd8:	0059      	lsls	r1, r3, #1
    6bda:	1841      	adds	r1, r0, r1
    6bdc:	780a      	ldrb	r2, [r1, #0]
    6bde:	2a00      	cmp	r2, #0
    6be0:	d0f5      	beq.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    6be2:	006a      	lsls	r2, r5, #1
    6be4:	1952      	adds	r2, r2, r5
    6be6:	0092      	lsls	r2, r2, #2
    6be8:	4442      	add	r2, r8
    6bea:	3294      	adds	r2, #148	; 0x94
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    6bec:	7815      	ldrb	r5, [r2, #0]
    6bee:	006a      	lsls	r2, r5, #1
    6bf0:	1952      	adds	r2, r2, r5
    6bf2:	0092      	lsls	r2, r2, #2
    6bf4:	18ba      	adds	r2, r7, r2
    6bf6:	7a15      	ldrb	r5, [r2, #8]
    6bf8:	7a54      	ldrb	r4, [r2, #9]
    6bfa:	0224      	lsls	r4, r4, #8
    6bfc:	4325      	orrs	r5, r4
    6bfe:	7a94      	ldrb	r4, [r2, #10]
    6c00:	0424      	lsls	r4, r4, #16
    6c02:	4325      	orrs	r5, r4
    6c04:	7ad2      	ldrb	r2, [r2, #11]
    6c06:	0612      	lsls	r2, r2, #24
    6c08:	432a      	orrs	r2, r5
    6c0a:	d0e0      	beq.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    6c0c:	454a      	cmp	r2, r9
    6c0e:	d8de      	bhi.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6c10:	784d      	ldrb	r5, [r1, #1]
    6c12:	072d      	lsls	r5, r5, #28
    6c14:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    6c16:	45ac      	cmp	ip, r5
    6c18:	dbd9      	blt.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    6c1a:	7849      	ldrb	r1, [r1, #1]
    6c1c:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    6c1e:	9c01      	ldr	r4, [sp, #4]
    6c20:	428c      	cmp	r4, r1
    6c22:	dcd4      	bgt.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6c24:	4691      	mov	r9, r2
    6c26:	e7d2      	b.n	6bce <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    6c28:	464b      	mov	r3, r9
    6c2a:	3301      	adds	r3, #1
    6c2c:	d017      	beq.n	6c5e <LORAREG_GetAttr_DutyCycleTimer+0xea>
    6c2e:	4932      	ldr	r1, [pc, #200]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6c30:	23d1      	movs	r3, #209	; 0xd1
    6c32:	005b      	lsls	r3, r3, #1
    6c34:	5ccb      	ldrb	r3, [r1, r3]
    6c36:	22a4      	movs	r2, #164	; 0xa4
    6c38:	32ff      	adds	r2, #255	; 0xff
    6c3a:	5c8a      	ldrb	r2, [r1, r2]
    6c3c:	0212      	lsls	r2, r2, #8
    6c3e:	431a      	orrs	r2, r3
    6c40:	23d2      	movs	r3, #210	; 0xd2
    6c42:	005b      	lsls	r3, r3, #1
    6c44:	5ccb      	ldrb	r3, [r1, r3]
    6c46:	041b      	lsls	r3, r3, #16
    6c48:	431a      	orrs	r2, r3
    6c4a:	23a6      	movs	r3, #166	; 0xa6
    6c4c:	33ff      	adds	r3, #255	; 0xff
    6c4e:	5ccb      	ldrb	r3, [r1, r3]
    6c50:	061b      	lsls	r3, r3, #24
    6c52:	4313      	orrs	r3, r2
    6c54:	4599      	cmp	r9, r3
    6c56:	d302      	bcc.n	6c5e <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    6c58:	464b      	mov	r3, r9
    6c5a:	9303      	str	r3, [sp, #12]
    6c5c:	e013      	b.n	6c86 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    6c5e:	4926      	ldr	r1, [pc, #152]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6c60:	23d1      	movs	r3, #209	; 0xd1
    6c62:	005b      	lsls	r3, r3, #1
    6c64:	5ccb      	ldrb	r3, [r1, r3]
    6c66:	22a4      	movs	r2, #164	; 0xa4
    6c68:	32ff      	adds	r2, #255	; 0xff
    6c6a:	5c8a      	ldrb	r2, [r1, r2]
    6c6c:	0212      	lsls	r2, r2, #8
    6c6e:	431a      	orrs	r2, r3
    6c70:	23d2      	movs	r3, #210	; 0xd2
    6c72:	005b      	lsls	r3, r3, #1
    6c74:	5ccb      	ldrb	r3, [r1, r3]
    6c76:	041b      	lsls	r3, r3, #16
    6c78:	431a      	orrs	r2, r3
    6c7a:	23a6      	movs	r3, #166	; 0xa6
    6c7c:	33ff      	adds	r3, #255	; 0xff
    6c7e:	5ccb      	ldrb	r3, [r1, r3]
    6c80:	061b      	lsls	r3, r3, #24
    6c82:	4313      	orrs	r3, r2
    6c84:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    6c86:	491c      	ldr	r1, [pc, #112]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6c88:	7c0b      	ldrb	r3, [r1, #16]
    6c8a:	7c4a      	ldrb	r2, [r1, #17]
    6c8c:	0212      	lsls	r2, r2, #8
    6c8e:	431a      	orrs	r2, r3
    6c90:	7c8b      	ldrb	r3, [r1, #18]
    6c92:	041b      	lsls	r3, r3, #16
    6c94:	431a      	orrs	r2, r3
    6c96:	7ccb      	ldrb	r3, [r1, #19]
    6c98:	061b      	lsls	r3, r3, #24
    6c9a:	4313      	orrs	r3, r2
    6c9c:	7918      	ldrb	r0, [r3, #4]
    6c9e:	4b17      	ldr	r3, [pc, #92]	; (6cfc <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    6ca0:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    6ca2:	9e03      	ldr	r6, [sp, #12]
    6ca4:	2e00      	cmp	r6, #0
    6ca6:	d01b      	beq.n	6ce0 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6ca8:	4913      	ldr	r1, [pc, #76]	; (6cf8 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    6caa:	7c0b      	ldrb	r3, [r1, #16]
    6cac:	7c4a      	ldrb	r2, [r1, #17]
    6cae:	0212      	lsls	r2, r2, #8
    6cb0:	431a      	orrs	r2, r3
    6cb2:	7c8b      	ldrb	r3, [r1, #18]
    6cb4:	041b      	lsls	r3, r3, #16
    6cb6:	431a      	orrs	r2, r3
    6cb8:	7ccb      	ldrb	r3, [r1, #19]
    6cba:	061b      	lsls	r3, r3, #24
    6cbc:	4313      	orrs	r3, r2
    6cbe:	781d      	ldrb	r5, [r3, #0]
    6cc0:	785a      	ldrb	r2, [r3, #1]
    6cc2:	0212      	lsls	r2, r2, #8
    6cc4:	432a      	orrs	r2, r5
    6cc6:	789d      	ldrb	r5, [r3, #2]
    6cc8:	042d      	lsls	r5, r5, #16
    6cca:	432a      	orrs	r2, r5
    6ccc:	78dd      	ldrb	r5, [r3, #3]
    6cce:	062d      	lsls	r5, r5, #24
    6cd0:	4315      	orrs	r5, r2
    6cd2:	21fa      	movs	r1, #250	; 0xfa
    6cd4:	0089      	lsls	r1, r1, #2
    6cd6:	4b0a      	ldr	r3, [pc, #40]	; (6d00 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    6cd8:	4798      	blx	r3
    6cda:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    6cdc:	1b75      	subs	r5, r6, r5
    6cde:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    6ce0:	2204      	movs	r2, #4
    6ce2:	a903      	add	r1, sp, #12
    6ce4:	9800      	ldr	r0, [sp, #0]
    6ce6:	4b07      	ldr	r3, [pc, #28]	; (6d04 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    6ce8:	4798      	blx	r3
}
    6cea:	2008      	movs	r0, #8
    6cec:	b004      	add	sp, #16
    6cee:	bc1c      	pop	{r2, r3, r4}
    6cf0:	4690      	mov	r8, r2
    6cf2:	4699      	mov	r9, r3
    6cf4:	46a2      	mov	sl, r4
    6cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cf8:	20001290 	.word	0x20001290
    6cfc:	00009aa1 	.word	0x00009aa1
    6d00:	000109bd 	.word	0x000109bd
    6d04:	00013ba5 	.word	0x00013ba5

00006d08 <setDutyCycleTimer>:
{
    6d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d0a:	46de      	mov	lr, fp
    6d0c:	4657      	mov	r7, sl
    6d0e:	464e      	mov	r6, r9
    6d10:	4645      	mov	r5, r8
    6d12:	b5e0      	push	{r5, r6, r7, lr}
    6d14:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    6d16:	ac04      	add	r4, sp, #16
    6d18:	2206      	movs	r2, #6
    6d1a:	0020      	movs	r0, r4
    6d1c:	4bbc      	ldr	r3, [pc, #752]	; (7010 <setDutyCycleTimer+0x308>)
    6d1e:	4798      	blx	r3
	if(updateDCTimer.joining != 1)
    6d20:	7923      	ldrb	r3, [r4, #4]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d007      	beq.n	6d36 <setDutyCycleTimer+0x2e>
}
    6d26:	2008      	movs	r0, #8
    6d28:	b007      	add	sp, #28
    6d2a:	bc3c      	pop	{r2, r3, r4, r5}
    6d2c:	4690      	mov	r8, r2
    6d2e:	4699      	mov	r9, r3
    6d30:	46a2      	mov	sl, r4
    6d32:	46ab      	mov	fp, r5
    6d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    6d36:	49b7      	ldr	r1, [pc, #732]	; (7014 <setDutyCycleTimer+0x30c>)
    6d38:	7a0b      	ldrb	r3, [r1, #8]
    6d3a:	7a4a      	ldrb	r2, [r1, #9]
    6d3c:	0212      	lsls	r2, r2, #8
    6d3e:	4313      	orrs	r3, r2
    6d40:	7a8a      	ldrb	r2, [r1, #10]
    6d42:	0412      	lsls	r2, r2, #16
    6d44:	431a      	orrs	r2, r3
    6d46:	7acb      	ldrb	r3, [r1, #11]
    6d48:	061b      	lsls	r3, r3, #24
    6d4a:	431a      	orrs	r2, r3
    6d4c:	2327      	movs	r3, #39	; 0x27
    6d4e:	5cc8      	ldrb	r0, [r1, r3]
    6d50:	0043      	lsls	r3, r0, #1
    6d52:	181b      	adds	r3, r3, r0
    6d54:	009b      	lsls	r3, r3, #2
    6d56:	189b      	adds	r3, r3, r2
    6d58:	7a1f      	ldrb	r7, [r3, #8]
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    6d5a:	007c      	lsls	r4, r7, #1
    6d5c:	19e4      	adds	r4, r4, r7
    6d5e:	00a4      	lsls	r4, r4, #2
    6d60:	aa04      	add	r2, sp, #16
    6d62:	8815      	ldrh	r5, [r2, #0]
    6d64:	7b08      	ldrb	r0, [r1, #12]
    6d66:	7b4b      	ldrb	r3, [r1, #13]
    6d68:	021b      	lsls	r3, r3, #8
    6d6a:	4303      	orrs	r3, r0
    6d6c:	7b88      	ldrb	r0, [r1, #14]
    6d6e:	0400      	lsls	r0, r0, #16
    6d70:	4303      	orrs	r3, r0
    6d72:	7bc8      	ldrb	r0, [r1, #15]
    6d74:	0600      	lsls	r0, r0, #24
    6d76:	4318      	orrs	r0, r3
    6d78:	003e      	movs	r6, r7
    6d7a:	36c8      	adds	r6, #200	; 0xc8
    6d7c:	0076      	lsls	r6, r6, #1
    6d7e:	198e      	adds	r6, r1, r6
    6d80:	79b3      	ldrb	r3, [r6, #6]
    6d82:	469c      	mov	ip, r3
    6d84:	79f3      	ldrb	r3, [r6, #7]
    6d86:	021b      	lsls	r3, r3, #8
    6d88:	4666      	mov	r6, ip
    6d8a:	4333      	orrs	r3, r6
    6d8c:	3b01      	subs	r3, #1
    6d8e:	436b      	muls	r3, r5
    6d90:	1900      	adds	r0, r0, r4
    6d92:	7203      	strb	r3, [r0, #8]
    6d94:	0a1e      	lsrs	r6, r3, #8
    6d96:	7246      	strb	r6, [r0, #9]
    6d98:	0c1e      	lsrs	r6, r3, #16
    6d9a:	7286      	strb	r6, [r0, #10]
    6d9c:	0e1b      	lsrs	r3, r3, #24
    6d9e:	72c3      	strb	r3, [r0, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    6da0:	8853      	ldrh	r3, [r2, #2]
    6da2:	3b01      	subs	r3, #1
    6da4:	436b      	muls	r3, r5
    6da6:	22d1      	movs	r2, #209	; 0xd1
    6da8:	0052      	lsls	r2, r2, #1
    6daa:	548b      	strb	r3, [r1, r2]
    6dac:	0a18      	lsrs	r0, r3, #8
    6dae:	000a      	movs	r2, r1
    6db0:	32a3      	adds	r2, #163	; 0xa3
    6db2:	32ff      	adds	r2, #255	; 0xff
    6db4:	7050      	strb	r0, [r2, #1]
    6db6:	0c18      	lsrs	r0, r3, #16
    6db8:	7090      	strb	r0, [r2, #2]
    6dba:	0e1b      	lsrs	r3, r3, #24
    6dbc:	70d3      	strb	r3, [r2, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6dbe:	7c0b      	ldrb	r3, [r1, #16]
    6dc0:	7c4a      	ldrb	r2, [r1, #17]
    6dc2:	0212      	lsls	r2, r2, #8
    6dc4:	431a      	orrs	r2, r3
    6dc6:	7c8b      	ldrb	r3, [r1, #18]
    6dc8:	041b      	lsls	r3, r3, #16
    6dca:	431a      	orrs	r2, r3
    6dcc:	7ccb      	ldrb	r3, [r1, #19]
    6dce:	061b      	lsls	r3, r3, #24
    6dd0:	4313      	orrs	r3, r2
    6dd2:	7918      	ldrb	r0, [r3, #4]
    6dd4:	4b90      	ldr	r3, [pc, #576]	; (7018 <setDutyCycleTimer+0x310>)
    6dd6:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    6dd8:	2300      	movs	r3, #0
    6dda:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    6ddc:	2800      	cmp	r0, #0
    6dde:	d124      	bne.n	6e2a <setDutyCycleTimer+0x122>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    6de0:	4a8c      	ldr	r2, [pc, #560]	; (7014 <setDutyCycleTimer+0x30c>)
    6de2:	7b13      	ldrb	r3, [r2, #12]
    6de4:	7b51      	ldrb	r1, [r2, #13]
    6de6:	0209      	lsls	r1, r1, #8
    6de8:	4319      	orrs	r1, r3
    6dea:	7b93      	ldrb	r3, [r2, #14]
    6dec:	041b      	lsls	r3, r3, #16
    6dee:	4319      	orrs	r1, r3
    6df0:	7bd3      	ldrb	r3, [r2, #15]
    6df2:	061b      	lsls	r3, r3, #24
    6df4:	430b      	orrs	r3, r1
    6df6:	191c      	adds	r4, r3, r4
    6df8:	7a20      	ldrb	r0, [r4, #8]
    6dfa:	7a63      	ldrb	r3, [r4, #9]
    6dfc:	021b      	lsls	r3, r3, #8
    6dfe:	4303      	orrs	r3, r0
    6e00:	7aa0      	ldrb	r0, [r4, #10]
    6e02:	0400      	lsls	r0, r0, #16
    6e04:	4303      	orrs	r3, r0
    6e06:	7ae0      	ldrb	r0, [r4, #11]
    6e08:	0600      	lsls	r0, r0, #24
    6e0a:	4318      	orrs	r0, r3
    6e0c:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    6e0e:	2321      	movs	r3, #33	; 0x21
    6e10:	5cd3      	ldrb	r3, [r2, r3]
    6e12:	2b00      	cmp	r3, #0
    6e14:	d100      	bne.n	6e18 <setDutyCycleTimer+0x110>
    6e16:	e08d      	b.n	6f34 <setDutyCycleTimer+0x22c>
    6e18:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6e1a:	4d7e      	ldr	r5, [pc, #504]	; (7014 <setDutyCycleTimer+0x30c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6e1c:	002e      	movs	r6, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6e1e:	2300      	movs	r3, #0
    6e20:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    6e22:	46a8      	mov	r8, r5
    6e24:	2321      	movs	r3, #33	; 0x21
    6e26:	469c      	mov	ip, r3
    6e28:	e042      	b.n	6eb0 <setDutyCycleTimer+0x1a8>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    6e2a:	4d7a      	ldr	r5, [pc, #488]	; (7014 <setDutyCycleTimer+0x30c>)
    6e2c:	7c2b      	ldrb	r3, [r5, #16]
    6e2e:	7c6a      	ldrb	r2, [r5, #17]
    6e30:	0212      	lsls	r2, r2, #8
    6e32:	431a      	orrs	r2, r3
    6e34:	7cab      	ldrb	r3, [r5, #18]
    6e36:	041b      	lsls	r3, r3, #16
    6e38:	431a      	orrs	r2, r3
    6e3a:	7ceb      	ldrb	r3, [r5, #19]
    6e3c:	061b      	lsls	r3, r3, #24
    6e3e:	4313      	orrs	r3, r2
    6e40:	7918      	ldrb	r0, [r3, #4]
    6e42:	4b76      	ldr	r3, [pc, #472]	; (701c <setDutyCycleTimer+0x314>)
    6e44:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    6e46:	7c2b      	ldrb	r3, [r5, #16]
    6e48:	7c6a      	ldrb	r2, [r5, #17]
    6e4a:	0212      	lsls	r2, r2, #8
    6e4c:	431a      	orrs	r2, r3
    6e4e:	7cab      	ldrb	r3, [r5, #18]
    6e50:	041b      	lsls	r3, r3, #16
    6e52:	431a      	orrs	r2, r3
    6e54:	7ceb      	ldrb	r3, [r5, #19]
    6e56:	061b      	lsls	r3, r3, #24
    6e58:	4313      	orrs	r3, r2
    6e5a:	7918      	ldrb	r0, [r3, #4]
    6e5c:	4b70      	ldr	r3, [pc, #448]	; (7020 <setDutyCycleTimer+0x318>)
    6e5e:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    6e60:	7c2b      	ldrb	r3, [r5, #16]
    6e62:	7c6a      	ldrb	r2, [r5, #17]
    6e64:	0212      	lsls	r2, r2, #8
    6e66:	431a      	orrs	r2, r3
    6e68:	7cab      	ldrb	r3, [r5, #18]
    6e6a:	041b      	lsls	r3, r3, #16
    6e6c:	431a      	orrs	r2, r3
    6e6e:	7ceb      	ldrb	r3, [r5, #19]
    6e70:	061b      	lsls	r3, r3, #24
    6e72:	4313      	orrs	r3, r2
    6e74:	781d      	ldrb	r5, [r3, #0]
    6e76:	785a      	ldrb	r2, [r3, #1]
    6e78:	0212      	lsls	r2, r2, #8
    6e7a:	432a      	orrs	r2, r5
    6e7c:	789d      	ldrb	r5, [r3, #2]
    6e7e:	042d      	lsls	r5, r5, #16
    6e80:	432a      	orrs	r2, r5
    6e82:	78dd      	ldrb	r5, [r3, #3]
    6e84:	062d      	lsls	r5, r5, #24
    6e86:	4315      	orrs	r5, r2
    6e88:	21fa      	movs	r1, #250	; 0xfa
    6e8a:	0089      	lsls	r1, r1, #2
    6e8c:	4b65      	ldr	r3, [pc, #404]	; (7024 <setDutyCycleTimer+0x31c>)
    6e8e:	4798      	blx	r3
    6e90:	1a2b      	subs	r3, r5, r0
    6e92:	4699      	mov	r9, r3
    6e94:	e7a4      	b.n	6de0 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    6e96:	4651      	mov	r1, sl
    6e98:	7219      	strb	r1, [r3, #8]
    6e9a:	7259      	strb	r1, [r3, #9]
    6e9c:	7299      	strb	r1, [r3, #10]
    6e9e:	72d9      	strb	r1, [r3, #11]
    6ea0:	e02c      	b.n	6efc <setDutyCycleTimer+0x1f4>
	for(i = 0; i < RegParams.maxSubBands; i++)
    6ea2:	3201      	adds	r2, #1
    6ea4:	b2d2      	uxtb	r2, r2
    6ea6:	4643      	mov	r3, r8
    6ea8:	4661      	mov	r1, ip
    6eaa:	5c5b      	ldrb	r3, [r3, r1]
    6eac:	4293      	cmp	r3, r2
    6eae:	d941      	bls.n	6f34 <setDutyCycleTimer+0x22c>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    6eb0:	4297      	cmp	r7, r2
    6eb2:	d0f6      	beq.n	6ea2 <setDutyCycleTimer+0x19a>
    6eb4:	0054      	lsls	r4, r2, #1
    6eb6:	18a4      	adds	r4, r4, r2
    6eb8:	00a4      	lsls	r4, r4, #2
    6eba:	7b2b      	ldrb	r3, [r5, #12]
    6ebc:	7b69      	ldrb	r1, [r5, #13]
    6ebe:	0209      	lsls	r1, r1, #8
    6ec0:	4319      	orrs	r1, r3
    6ec2:	7bab      	ldrb	r3, [r5, #14]
    6ec4:	041b      	lsls	r3, r3, #16
    6ec6:	4319      	orrs	r1, r3
    6ec8:	7beb      	ldrb	r3, [r5, #15]
    6eca:	061b      	lsls	r3, r3, #24
    6ecc:	430b      	orrs	r3, r1
    6ece:	191b      	adds	r3, r3, r4
    6ed0:	7a18      	ldrb	r0, [r3, #8]
    6ed2:	7a59      	ldrb	r1, [r3, #9]
    6ed4:	0209      	lsls	r1, r1, #8
    6ed6:	4301      	orrs	r1, r0
    6ed8:	7a98      	ldrb	r0, [r3, #10]
    6eda:	0400      	lsls	r0, r0, #16
    6edc:	4308      	orrs	r0, r1
    6ede:	7ad9      	ldrb	r1, [r3, #11]
    6ee0:	0609      	lsls	r1, r1, #24
    6ee2:	4301      	orrs	r1, r0
    6ee4:	d0dd      	beq.n	6ea2 <setDutyCycleTimer+0x19a>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    6ee6:	4589      	cmp	r9, r1
    6ee8:	d2d5      	bcs.n	6e96 <setDutyCycleTimer+0x18e>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    6eea:	4648      	mov	r0, r9
    6eec:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    6eee:	7219      	strb	r1, [r3, #8]
    6ef0:	0a08      	lsrs	r0, r1, #8
    6ef2:	7258      	strb	r0, [r3, #9]
    6ef4:	0c08      	lsrs	r0, r1, #16
    6ef6:	7298      	strb	r0, [r3, #10]
    6ef8:	0e09      	lsrs	r1, r1, #24
    6efa:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    6efc:	7b33      	ldrb	r3, [r6, #12]
    6efe:	7b71      	ldrb	r1, [r6, #13]
    6f00:	0209      	lsls	r1, r1, #8
    6f02:	4319      	orrs	r1, r3
    6f04:	7bb3      	ldrb	r3, [r6, #14]
    6f06:	041b      	lsls	r3, r3, #16
    6f08:	4319      	orrs	r1, r3
    6f0a:	7bf3      	ldrb	r3, [r6, #15]
    6f0c:	061b      	lsls	r3, r3, #24
    6f0e:	430b      	orrs	r3, r1
    6f10:	191c      	adds	r4, r3, r4
    6f12:	7a23      	ldrb	r3, [r4, #8]
    6f14:	7a61      	ldrb	r1, [r4, #9]
    6f16:	0209      	lsls	r1, r1, #8
    6f18:	4319      	orrs	r1, r3
    6f1a:	7aa3      	ldrb	r3, [r4, #10]
    6f1c:	041b      	lsls	r3, r3, #16
    6f1e:	4319      	orrs	r1, r3
    6f20:	7ae3      	ldrb	r3, [r4, #11]
    6f22:	061b      	lsls	r3, r3, #24
    6f24:	430b      	orrs	r3, r1
    6f26:	9903      	ldr	r1, [sp, #12]
    6f28:	428b      	cmp	r3, r1
    6f2a:	d8ba      	bhi.n	6ea2 <setDutyCycleTimer+0x19a>
    6f2c:	2b00      	cmp	r3, #0
    6f2e:	d0b8      	beq.n	6ea2 <setDutyCycleTimer+0x19a>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    6f30:	9303      	str	r3, [sp, #12]
    6f32:	e7b6      	b.n	6ea2 <setDutyCycleTimer+0x19a>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    6f34:	4937      	ldr	r1, [pc, #220]	; (7014 <setDutyCycleTimer+0x30c>)
    6f36:	23d1      	movs	r3, #209	; 0xd1
    6f38:	005b      	lsls	r3, r3, #1
    6f3a:	5ccb      	ldrb	r3, [r1, r3]
    6f3c:	22a4      	movs	r2, #164	; 0xa4
    6f3e:	32ff      	adds	r2, #255	; 0xff
    6f40:	5c8a      	ldrb	r2, [r1, r2]
    6f42:	0212      	lsls	r2, r2, #8
    6f44:	431a      	orrs	r2, r3
    6f46:	23d2      	movs	r3, #210	; 0xd2
    6f48:	005b      	lsls	r3, r3, #1
    6f4a:	5ccb      	ldrb	r3, [r1, r3]
    6f4c:	041b      	lsls	r3, r3, #16
    6f4e:	431a      	orrs	r2, r3
    6f50:	23a6      	movs	r3, #166	; 0xa6
    6f52:	33ff      	adds	r3, #255	; 0xff
    6f54:	5ccb      	ldrb	r3, [r1, r3]
    6f56:	061b      	lsls	r3, r3, #24
    6f58:	4313      	orrs	r3, r2
    6f5a:	d00f      	beq.n	6f7c <setDutyCycleTimer+0x274>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    6f5c:	4599      	cmp	r9, r3
    6f5e:	d24b      	bcs.n	6ff8 <setDutyCycleTimer+0x2f0>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    6f60:	000a      	movs	r2, r1
    6f62:	4649      	mov	r1, r9
    6f64:	1a5b      	subs	r3, r3, r1
    6f66:	21d1      	movs	r1, #209	; 0xd1
    6f68:	0049      	lsls	r1, r1, #1
    6f6a:	5453      	strb	r3, [r2, r1]
    6f6c:	0a19      	lsrs	r1, r3, #8
    6f6e:	32a3      	adds	r2, #163	; 0xa3
    6f70:	32ff      	adds	r2, #255	; 0xff
    6f72:	7051      	strb	r1, [r2, #1]
    6f74:	0c19      	lsrs	r1, r3, #16
    6f76:	7091      	strb	r1, [r2, #2]
    6f78:	0e1b      	lsrs	r3, r3, #24
    6f7a:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    6f7c:	4a25      	ldr	r2, [pc, #148]	; (7014 <setDutyCycleTimer+0x30c>)
    6f7e:	23d1      	movs	r3, #209	; 0xd1
    6f80:	005b      	lsls	r3, r3, #1
    6f82:	5cd1      	ldrb	r1, [r2, r3]
    6f84:	23a4      	movs	r3, #164	; 0xa4
    6f86:	33ff      	adds	r3, #255	; 0xff
    6f88:	5cd3      	ldrb	r3, [r2, r3]
    6f8a:	021b      	lsls	r3, r3, #8
    6f8c:	430b      	orrs	r3, r1
    6f8e:	21d2      	movs	r1, #210	; 0xd2
    6f90:	0049      	lsls	r1, r1, #1
    6f92:	5c51      	ldrb	r1, [r2, r1]
    6f94:	0409      	lsls	r1, r1, #16
    6f96:	430b      	orrs	r3, r1
    6f98:	21a6      	movs	r1, #166	; 0xa6
    6f9a:	31ff      	adds	r1, #255	; 0xff
    6f9c:	5c51      	ldrb	r1, [r2, r1]
    6f9e:	0609      	lsls	r1, r1, #24
    6fa0:	4319      	orrs	r1, r3
    6fa2:	9a03      	ldr	r2, [sp, #12]
    6fa4:	4291      	cmp	r1, r2
    6fa6:	d200      	bcs.n	6faa <setDutyCycleTimer+0x2a2>
    6fa8:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    6faa:	4b1a      	ldr	r3, [pc, #104]	; (7014 <setDutyCycleTimer+0x30c>)
    6fac:	7c1a      	ldrb	r2, [r3, #16]
    6fae:	7c58      	ldrb	r0, [r3, #17]
    6fb0:	0200      	lsls	r0, r0, #8
    6fb2:	4310      	orrs	r0, r2
    6fb4:	7c9a      	ldrb	r2, [r3, #18]
    6fb6:	0412      	lsls	r2, r2, #16
    6fb8:	4310      	orrs	r0, r2
    6fba:	7cda      	ldrb	r2, [r3, #19]
    6fbc:	0612      	lsls	r2, r2, #24
    6fbe:	4302      	orrs	r2, r0
    6fc0:	7011      	strb	r1, [r2, #0]
    6fc2:	0a08      	lsrs	r0, r1, #8
    6fc4:	7050      	strb	r0, [r2, #1]
    6fc6:	0c08      	lsrs	r0, r1, #16
    6fc8:	7090      	strb	r0, [r2, #2]
    6fca:	0e08      	lsrs	r0, r1, #24
    6fcc:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    6fce:	22fa      	movs	r2, #250	; 0xfa
    6fd0:	0092      	lsls	r2, r2, #2
    6fd2:	4351      	muls	r1, r2
    6fd4:	7c18      	ldrb	r0, [r3, #16]
    6fd6:	7c5a      	ldrb	r2, [r3, #17]
    6fd8:	0212      	lsls	r2, r2, #8
    6fda:	4310      	orrs	r0, r2
    6fdc:	7c9a      	ldrb	r2, [r3, #18]
    6fde:	0412      	lsls	r2, r2, #16
    6fe0:	4302      	orrs	r2, r0
    6fe2:	7cdb      	ldrb	r3, [r3, #19]
    6fe4:	061b      	lsls	r3, r3, #24
    6fe6:	4313      	orrs	r3, r2
    6fe8:	7918      	ldrb	r0, [r3, #4]
    6fea:	2300      	movs	r3, #0
    6fec:	9300      	str	r3, [sp, #0]
    6fee:	4b0e      	ldr	r3, [pc, #56]	; (7028 <setDutyCycleTimer+0x320>)
    6ff0:	2200      	movs	r2, #0
    6ff2:	4c0e      	ldr	r4, [pc, #56]	; (702c <setDutyCycleTimer+0x324>)
    6ff4:	47a0      	blx	r4
	return result;
    6ff6:	e696      	b.n	6d26 <setDutyCycleTimer+0x1e>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    6ff8:	4b06      	ldr	r3, [pc, #24]	; (7014 <setDutyCycleTimer+0x30c>)
    6ffa:	2100      	movs	r1, #0
    6ffc:	22d1      	movs	r2, #209	; 0xd1
    6ffe:	0052      	lsls	r2, r2, #1
    7000:	5499      	strb	r1, [r3, r2]
    7002:	189b      	adds	r3, r3, r2
    7004:	2200      	movs	r2, #0
    7006:	705a      	strb	r2, [r3, #1]
    7008:	709a      	strb	r2, [r3, #2]
    700a:	70da      	strb	r2, [r3, #3]
    700c:	e7b6      	b.n	6f7c <setDutyCycleTimer+0x274>
    700e:	46c0      	nop			; (mov r8, r8)
    7010:	00013ba5 	.word	0x00013ba5
    7014:	20001290 	.word	0x20001290
    7018:	00009a8d 	.word	0x00009a8d
    701c:	00009bf9 	.word	0x00009bf9
    7020:	00009aa1 	.word	0x00009aa1
    7024:	000109bd 	.word	0x000109bd
    7028:	00007031 	.word	0x00007031
    702c:	000098f5 	.word	0x000098f5

00007030 <DutyCycleCallback>:
{
    7030:	b5f0      	push	{r4, r5, r6, r7, lr}
    7032:	46de      	mov	lr, fp
    7034:	4657      	mov	r7, sl
    7036:	464e      	mov	r6, r9
    7038:	4645      	mov	r5, r8
    703a:	b5e0      	push	{r5, r6, r7, lr}
    703c:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    703e:	4980      	ldr	r1, [pc, #512]	; (7240 <DutyCycleCallback+0x210>)
    7040:	23d1      	movs	r3, #209	; 0xd1
    7042:	005b      	lsls	r3, r3, #1
    7044:	5cca      	ldrb	r2, [r1, r3]
    7046:	23a4      	movs	r3, #164	; 0xa4
    7048:	33ff      	adds	r3, #255	; 0xff
    704a:	5ccb      	ldrb	r3, [r1, r3]
    704c:	021b      	lsls	r3, r3, #8
    704e:	431a      	orrs	r2, r3
    7050:	23d2      	movs	r3, #210	; 0xd2
    7052:	005b      	lsls	r3, r3, #1
    7054:	5ccb      	ldrb	r3, [r1, r3]
    7056:	041b      	lsls	r3, r3, #16
    7058:	4313      	orrs	r3, r2
    705a:	22a6      	movs	r2, #166	; 0xa6
    705c:	32ff      	adds	r2, #255	; 0xff
    705e:	5c8a      	ldrb	r2, [r1, r2]
    7060:	0612      	lsls	r2, r2, #24
    7062:	431a      	orrs	r2, r3
    7064:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    7066:	2321      	movs	r3, #33	; 0x21
    7068:	5ccb      	ldrb	r3, [r1, r3]
    706a:	2b00      	cmp	r3, #0
    706c:	d100      	bne.n	7070 <DutyCycleCallback+0x40>
    706e:	e0df      	b.n	7230 <DutyCycleCallback+0x200>
    7070:	2600      	movs	r6, #0
    7072:	2300      	movs	r3, #0
    7074:	9304      	str	r3, [sp, #16]
    7076:	3b01      	subs	r3, #1
    7078:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    707a:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    707c:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    707e:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    7080:	2300      	movs	r3, #0
    7082:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    7084:	468a      	mov	sl, r1
    7086:	2321      	movs	r3, #33	; 0x21
    7088:	4699      	mov	r9, r3
    708a:	e00c      	b.n	70a6 <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    708c:	465a      	mov	r2, fp
    708e:	721a      	strb	r2, [r3, #8]
    7090:	725a      	strb	r2, [r3, #9]
    7092:	729a      	strb	r2, [r3, #10]
    7094:	72da      	strb	r2, [r3, #11]
    7096:	e03f      	b.n	7118 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    7098:	3601      	adds	r6, #1
    709a:	b2f6      	uxtb	r6, r6
    709c:	4653      	mov	r3, sl
    709e:	464a      	mov	r2, r9
    70a0:	5c9b      	ldrb	r3, [r3, r2]
    70a2:	42b3      	cmp	r3, r6
    70a4:	d95a      	bls.n	715c <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    70a6:	0071      	lsls	r1, r6, #1
    70a8:	1989      	adds	r1, r1, r6
    70aa:	0089      	lsls	r1, r1, #2
    70ac:	7b3b      	ldrb	r3, [r7, #12]
    70ae:	7b7a      	ldrb	r2, [r7, #13]
    70b0:	0212      	lsls	r2, r2, #8
    70b2:	431a      	orrs	r2, r3
    70b4:	7bbb      	ldrb	r3, [r7, #14]
    70b6:	041b      	lsls	r3, r3, #16
    70b8:	431a      	orrs	r2, r3
    70ba:	7bfb      	ldrb	r3, [r7, #15]
    70bc:	061b      	lsls	r3, r3, #24
    70be:	4313      	orrs	r3, r2
    70c0:	185b      	adds	r3, r3, r1
    70c2:	7a1a      	ldrb	r2, [r3, #8]
    70c4:	7a58      	ldrb	r0, [r3, #9]
    70c6:	0200      	lsls	r0, r0, #8
    70c8:	4310      	orrs	r0, r2
    70ca:	7a9a      	ldrb	r2, [r3, #10]
    70cc:	0412      	lsls	r2, r2, #16
    70ce:	4310      	orrs	r0, r2
    70d0:	7ada      	ldrb	r2, [r3, #11]
    70d2:	0612      	lsls	r2, r2, #24
    70d4:	4302      	orrs	r2, r0
    70d6:	d0df      	beq.n	7098 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    70d8:	4640      	mov	r0, r8
    70da:	7c05      	ldrb	r5, [r0, #16]
    70dc:	7c44      	ldrb	r4, [r0, #17]
    70de:	0224      	lsls	r4, r4, #8
    70e0:	4325      	orrs	r5, r4
    70e2:	7c80      	ldrb	r0, [r0, #18]
    70e4:	0400      	lsls	r0, r0, #16
    70e6:	4305      	orrs	r5, r0
    70e8:	4640      	mov	r0, r8
    70ea:	7cc0      	ldrb	r0, [r0, #19]
    70ec:	0600      	lsls	r0, r0, #24
    70ee:	4328      	orrs	r0, r5
    70f0:	7804      	ldrb	r4, [r0, #0]
    70f2:	7845      	ldrb	r5, [r0, #1]
    70f4:	022d      	lsls	r5, r5, #8
    70f6:	4325      	orrs	r5, r4
    70f8:	7884      	ldrb	r4, [r0, #2]
    70fa:	0424      	lsls	r4, r4, #16
    70fc:	4325      	orrs	r5, r4
    70fe:	78c4      	ldrb	r4, [r0, #3]
    7100:	0624      	lsls	r4, r4, #24
    7102:	432c      	orrs	r4, r5
    7104:	42a2      	cmp	r2, r4
    7106:	d9c1      	bls.n	708c <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    7108:	1b12      	subs	r2, r2, r4
    710a:	721a      	strb	r2, [r3, #8]
    710c:	0a10      	lsrs	r0, r2, #8
    710e:	7258      	strb	r0, [r3, #9]
    7110:	0c10      	lsrs	r0, r2, #16
    7112:	7298      	strb	r0, [r3, #10]
    7114:	0e12      	lsrs	r2, r2, #24
    7116:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    7118:	4663      	mov	r3, ip
    711a:	7b1b      	ldrb	r3, [r3, #12]
    711c:	4662      	mov	r2, ip
    711e:	7b52      	ldrb	r2, [r2, #13]
    7120:	0212      	lsls	r2, r2, #8
    7122:	431a      	orrs	r2, r3
    7124:	4663      	mov	r3, ip
    7126:	7b9b      	ldrb	r3, [r3, #14]
    7128:	041b      	lsls	r3, r3, #16
    712a:	431a      	orrs	r2, r3
    712c:	4663      	mov	r3, ip
    712e:	7bdb      	ldrb	r3, [r3, #15]
    7130:	061b      	lsls	r3, r3, #24
    7132:	4313      	orrs	r3, r2
    7134:	1859      	adds	r1, r3, r1
    7136:	7a0b      	ldrb	r3, [r1, #8]
    7138:	7a4a      	ldrb	r2, [r1, #9]
    713a:	0212      	lsls	r2, r2, #8
    713c:	431a      	orrs	r2, r3
    713e:	7a8b      	ldrb	r3, [r1, #10]
    7140:	041b      	lsls	r3, r3, #16
    7142:	431a      	orrs	r2, r3
    7144:	7acb      	ldrb	r3, [r1, #11]
    7146:	061b      	lsls	r3, r3, #24
    7148:	4313      	orrs	r3, r2
    714a:	9a03      	ldr	r2, [sp, #12]
    714c:	4293      	cmp	r3, r2
    714e:	d8a3      	bhi.n	7098 <DutyCycleCallback+0x68>
    7150:	2b00      	cmp	r3, #0
    7152:	d0a1      	beq.n	7098 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    7154:	9303      	str	r3, [sp, #12]
                found = 1;
    7156:	2301      	movs	r3, #1
    7158:	9304      	str	r3, [sp, #16]
    715a:	e79d      	b.n	7098 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    715c:	9b05      	ldr	r3, [sp, #20]
    715e:	2b00      	cmp	r3, #0
    7160:	d031      	beq.n	71c6 <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    7162:	4937      	ldr	r1, [pc, #220]	; (7240 <DutyCycleCallback+0x210>)
    7164:	7c0b      	ldrb	r3, [r1, #16]
    7166:	7c4a      	ldrb	r2, [r1, #17]
    7168:	0212      	lsls	r2, r2, #8
    716a:	431a      	orrs	r2, r3
    716c:	7c8b      	ldrb	r3, [r1, #18]
    716e:	041b      	lsls	r3, r3, #16
    7170:	431a      	orrs	r2, r3
    7172:	7ccb      	ldrb	r3, [r1, #19]
    7174:	061b      	lsls	r3, r3, #24
    7176:	4313      	orrs	r3, r2
    7178:	7819      	ldrb	r1, [r3, #0]
    717a:	785a      	ldrb	r2, [r3, #1]
    717c:	0212      	lsls	r2, r2, #8
    717e:	430a      	orrs	r2, r1
    7180:	7899      	ldrb	r1, [r3, #2]
    7182:	0409      	lsls	r1, r1, #16
    7184:	430a      	orrs	r2, r1
    7186:	78d9      	ldrb	r1, [r3, #3]
    7188:	0609      	lsls	r1, r1, #24
    718a:	4311      	orrs	r1, r2
    718c:	9a05      	ldr	r2, [sp, #20]
    718e:	428a      	cmp	r2, r1
    7190:	d90f      	bls.n	71b2 <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    7192:	1a51      	subs	r1, r2, r1
    7194:	4b2a      	ldr	r3, [pc, #168]	; (7240 <DutyCycleCallback+0x210>)
    7196:	22d1      	movs	r2, #209	; 0xd1
    7198:	0052      	lsls	r2, r2, #1
    719a:	5499      	strb	r1, [r3, r2]
    719c:	0a0a      	lsrs	r2, r1, #8
    719e:	33a3      	adds	r3, #163	; 0xa3
    71a0:	33ff      	adds	r3, #255	; 0xff
    71a2:	705a      	strb	r2, [r3, #1]
    71a4:	0c0a      	lsrs	r2, r1, #16
    71a6:	709a      	strb	r2, [r3, #2]
    71a8:	0e0a      	lsrs	r2, r1, #24
    71aa:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    71ac:	2900      	cmp	r1, #0
    71ae:	d10e      	bne.n	71ce <DutyCycleCallback+0x19e>
    71b0:	e009      	b.n	71c6 <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    71b2:	4b23      	ldr	r3, [pc, #140]	; (7240 <DutyCycleCallback+0x210>)
    71b4:	2100      	movs	r1, #0
    71b6:	22d1      	movs	r2, #209	; 0xd1
    71b8:	0052      	lsls	r2, r2, #1
    71ba:	5499      	strb	r1, [r3, r2]
    71bc:	189b      	adds	r3, r3, r2
    71be:	2200      	movs	r2, #0
    71c0:	705a      	strb	r2, [r3, #1]
    71c2:	709a      	strb	r2, [r3, #2]
    71c4:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    71c6:	9b04      	ldr	r3, [sp, #16]
    71c8:	2b00      	cmp	r3, #0
    71ca:	d02a      	beq.n	7222 <DutyCycleCallback+0x1f2>
    71cc:	2100      	movs	r1, #0
    71ce:	9a03      	ldr	r2, [sp, #12]
    71d0:	4291      	cmp	r1, r2
    71d2:	d200      	bcs.n	71d6 <DutyCycleCallback+0x1a6>
    71d4:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    71d6:	4b1a      	ldr	r3, [pc, #104]	; (7240 <DutyCycleCallback+0x210>)
    71d8:	7c1a      	ldrb	r2, [r3, #16]
    71da:	7c58      	ldrb	r0, [r3, #17]
    71dc:	0200      	lsls	r0, r0, #8
    71de:	4310      	orrs	r0, r2
    71e0:	7c9a      	ldrb	r2, [r3, #18]
    71e2:	0412      	lsls	r2, r2, #16
    71e4:	4310      	orrs	r0, r2
    71e6:	7cda      	ldrb	r2, [r3, #19]
    71e8:	0612      	lsls	r2, r2, #24
    71ea:	4302      	orrs	r2, r0
    71ec:	7011      	strb	r1, [r2, #0]
    71ee:	0a08      	lsrs	r0, r1, #8
    71f0:	7050      	strb	r0, [r2, #1]
    71f2:	0c08      	lsrs	r0, r1, #16
    71f4:	7090      	strb	r0, [r2, #2]
    71f6:	0e08      	lsrs	r0, r1, #24
    71f8:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    71fa:	22fa      	movs	r2, #250	; 0xfa
    71fc:	0092      	lsls	r2, r2, #2
    71fe:	4351      	muls	r1, r2
    7200:	7c18      	ldrb	r0, [r3, #16]
    7202:	7c5a      	ldrb	r2, [r3, #17]
    7204:	0212      	lsls	r2, r2, #8
    7206:	4310      	orrs	r0, r2
    7208:	7c9a      	ldrb	r2, [r3, #18]
    720a:	0412      	lsls	r2, r2, #16
    720c:	4302      	orrs	r2, r0
    720e:	7cdb      	ldrb	r3, [r3, #19]
    7210:	061b      	lsls	r3, r3, #24
    7212:	4313      	orrs	r3, r2
    7214:	7918      	ldrb	r0, [r3, #4]
    7216:	2300      	movs	r3, #0
    7218:	9300      	str	r3, [sp, #0]
    721a:	4b0a      	ldr	r3, [pc, #40]	; (7244 <DutyCycleCallback+0x214>)
    721c:	2200      	movs	r2, #0
    721e:	4c0a      	ldr	r4, [pc, #40]	; (7248 <DutyCycleCallback+0x218>)
    7220:	47a0      	blx	r4
}
    7222:	b007      	add	sp, #28
    7224:	bc3c      	pop	{r2, r3, r4, r5}
    7226:	4690      	mov	r8, r2
    7228:	4699      	mov	r9, r3
    722a:	46a2      	mov	sl, r4
    722c:	46ab      	mov	fp, r5
    722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    7230:	9b05      	ldr	r3, [sp, #20]
    7232:	2b00      	cmp	r3, #0
    7234:	d0f5      	beq.n	7222 <DutyCycleCallback+0x1f2>
    bool found = 0;
    7236:	2300      	movs	r3, #0
    7238:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    723a:	3b01      	subs	r3, #1
    723c:	9303      	str	r3, [sp, #12]
    723e:	e790      	b.n	7162 <DutyCycleCallback+0x132>
    7240:	20001290 	.word	0x20001290
    7244:	00007031 	.word	0x00007031
    7248:	000098f5 	.word	0x000098f5

0000724c <setLBTTimer>:
    }
}


static StackRetStatus_t setLBTTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
    724c:	b5f0      	push	{r4, r5, r6, r7, lr}
    724e:	46de      	mov	lr, fp
    7250:	4657      	mov	r7, sl
    7252:	464e      	mov	r6, r9
    7254:	4645      	mov	r5, r8
    7256:	b5e0      	push	{r5, r6, r7, lr}
    7258:	b085      	sub	sp, #20
    bool found = 0;
    uint8_t i;
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
	LBTTimer_t *pLBTTimer;

    i = RegParams.lastUsedChannelIndex;
    725a:	4a71      	ldr	r2, [pc, #452]	; (7420 <setLBTTimer+0x1d4>)
    725c:	2327      	movs	r3, #39	; 0x27
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
	
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    725e:	5cd4      	ldrb	r4, [r2, r3]
    7260:	0023      	movs	r3, r4
    7262:	3352      	adds	r3, #82	; 0x52
    7264:	009b      	lsls	r3, r3, #2
    7266:	18d3      	adds	r3, r2, r3
    7268:	0019      	movs	r1, r3
    726a:	2032      	movs	r0, #50	; 0x32
    726c:	7258      	strb	r0, [r3, #9]
    726e:	2300      	movs	r3, #0
    7270:	728b      	strb	r3, [r1, #10]
    7272:	72cb      	strb	r3, [r1, #11]
    7274:	730b      	strb	r3, [r1, #12]
	
	if(SwTimerIsRunning(pLBTTimer->timerId))
    7276:	2396      	movs	r3, #150	; 0x96
    7278:	33ff      	adds	r3, #255	; 0xff
    727a:	5cd0      	ldrb	r0, [r2, r3]
    727c:	4b69      	ldr	r3, [pc, #420]	; (7424 <setLBTTimer+0x1d8>)
    727e:	4798      	blx	r3
    7280:	2800      	cmp	r0, #0
    7282:	d12f      	bne.n	72e4 <setLBTTimer+0x98>
		ticks = SwTimerReadValue(pLBTTimer->timerId);
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
	}
	else
	{
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    7284:	4866      	ldr	r0, [pc, #408]	; (7420 <setLBTTimer+0x1d4>)
    7286:	0023      	movs	r3, r4
    7288:	3352      	adds	r3, #82	; 0x52
    728a:	009b      	lsls	r3, r3, #2
    728c:	18c3      	adds	r3, r0, r3
    728e:	7a59      	ldrb	r1, [r3, #9]
    7290:	7a9a      	ldrb	r2, [r3, #10]
    7292:	0212      	lsls	r2, r2, #8
    7294:	4311      	orrs	r1, r2
    7296:	7ada      	ldrb	r2, [r3, #11]
    7298:	0412      	lsls	r2, r2, #16
    729a:	430a      	orrs	r2, r1
    729c:	7b19      	ldrb	r1, [r3, #12]
    729e:	0609      	lsls	r1, r1, #24
    72a0:	4311      	orrs	r1, r2
    72a2:	4689      	mov	r9, r1
		found = 1;
	}
	
	for(i = 0; i < RegParams.maxChannels; i++)
    72a4:	2322      	movs	r3, #34	; 0x22
    72a6:	56c3      	ldrsb	r3, [r0, r3]
    72a8:	4698      	mov	r8, r3
    72aa:	2b00      	cmp	r3, #0
    72ac:	dc00      	bgt.n	72b0 <setLBTTimer+0x64>
    72ae:	e08d      	b.n	73cc <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    72b0:	2300      	movs	r3, #0
    72b2:	469a      	mov	sl, r3
		found = 1;
    72b4:	3301      	adds	r3, #1
    72b6:	9303      	str	r3, [sp, #12]
	{
		if(i != RegParams.lastUsedChannelIndex)
    72b8:	4a59      	ldr	r2, [pc, #356]	; (7420 <setLBTTimer+0x1d4>)
    72ba:	2327      	movs	r3, #39	; 0x27
    72bc:	5cd0      	ldrb	r0, [r2, r3]
		{
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    72be:	7911      	ldrb	r1, [r2, #4]
    72c0:	7953      	ldrb	r3, [r2, #5]
    72c2:	021b      	lsls	r3, r3, #8
    72c4:	430b      	orrs	r3, r1
    72c6:	7991      	ldrb	r1, [r2, #6]
    72c8:	0409      	lsls	r1, r1, #16
    72ca:	430b      	orrs	r3, r1
    72cc:	79d1      	ldrb	r1, [r2, #7]
    72ce:	0609      	lsls	r1, r1, #24
    72d0:	4319      	orrs	r1, r3
    72d2:	2600      	movs	r6, #0
    72d4:	2200      	movs	r2, #0
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
				}
				else
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    72d6:	2300      	movs	r3, #0
    72d8:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    72da:	4653      	mov	r3, sl
    72dc:	9302      	str	r3, [sp, #8]
    72de:	468b      	mov	fp, r1
    72e0:	4645      	mov	r5, r8
    72e2:	e039      	b.n	7358 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    72e4:	4c4e      	ldr	r4, [pc, #312]	; (7420 <setLBTTimer+0x1d4>)
    72e6:	2596      	movs	r5, #150	; 0x96
    72e8:	35ff      	adds	r5, #255	; 0xff
    72ea:	5d60      	ldrb	r0, [r4, r5]
    72ec:	4b4e      	ldr	r3, [pc, #312]	; (7428 <setLBTTimer+0x1dc>)
    72ee:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    72f0:	5d60      	ldrb	r0, [r4, r5]
    72f2:	4b4e      	ldr	r3, [pc, #312]	; (742c <setLBTTimer+0x1e0>)
    72f4:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    72f6:	2322      	movs	r3, #34	; 0x22
    72f8:	56e3      	ldrsb	r3, [r4, r3]
    72fa:	4698      	mov	r8, r3
    72fc:	2b00      	cmp	r3, #0
    72fe:	dd68      	ble.n	73d2 <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    7300:	4a47      	ldr	r2, [pc, #284]	; (7420 <setLBTTimer+0x1d4>)
    7302:	2392      	movs	r3, #146	; 0x92
    7304:	33ff      	adds	r3, #255	; 0xff
    7306:	5cd4      	ldrb	r4, [r2, r3]
    7308:	3301      	adds	r3, #1
    730a:	5cd3      	ldrb	r3, [r2, r3]
    730c:	021b      	lsls	r3, r3, #8
    730e:	4323      	orrs	r3, r4
    7310:	2194      	movs	r1, #148	; 0x94
    7312:	31ff      	adds	r1, #255	; 0xff
    7314:	5c54      	ldrb	r4, [r2, r1]
    7316:	0424      	lsls	r4, r4, #16
    7318:	4323      	orrs	r3, r4
    731a:	3101      	adds	r1, #1
    731c:	5c54      	ldrb	r4, [r2, r1]
    731e:	0624      	lsls	r4, r4, #24
    7320:	431c      	orrs	r4, r3
    7322:	21fa      	movs	r1, #250	; 0xfa
    7324:	0089      	lsls	r1, r1, #2
    7326:	4b42      	ldr	r3, [pc, #264]	; (7430 <setLBTTimer+0x1e4>)
    7328:	4798      	blx	r3
    732a:	1a23      	subs	r3, r4, r0
    732c:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    732e:	2301      	movs	r3, #1
    7330:	425b      	negs	r3, r3
    7332:	4699      	mov	r9, r3
    bool found = 0;
    7334:	2300      	movs	r3, #0
    7336:	9303      	str	r3, [sp, #12]
    7338:	e7be      	b.n	72b8 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    733a:	3652      	adds	r6, #82	; 0x52
    733c:	00b6      	lsls	r6, r6, #2
    733e:	4b38      	ldr	r3, [pc, #224]	; (7420 <setLBTTimer+0x1d4>)
    7340:	4698      	mov	r8, r3
    7342:	4446      	add	r6, r8
    7344:	4661      	mov	r1, ip
    7346:	7271      	strb	r1, [r6, #9]
    7348:	72b1      	strb	r1, [r6, #10]
    734a:	72f1      	strb	r1, [r6, #11]
    734c:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    734e:	3201      	adds	r2, #1
    7350:	b2d2      	uxtb	r2, r2
    7352:	0016      	movs	r6, r2
    7354:	42aa      	cmp	r2, r5
    7356:	da36      	bge.n	73c6 <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    7358:	4290      	cmp	r0, r2
    735a:	d0f8      	beq.n	734e <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    735c:	0053      	lsls	r3, r2, #1
    735e:	4659      	mov	r1, fp
    7360:	5c5c      	ldrb	r4, [r3, r1]
    7362:	2c00      	cmp	r4, #0
    7364:	d0f3      	beq.n	734e <setLBTTimer+0x102>
    7366:	0033      	movs	r3, r6
    7368:	3352      	adds	r3, #82	; 0x52
    736a:	009b      	lsls	r3, r3, #2
    736c:	4f2c      	ldr	r7, [pc, #176]	; (7420 <setLBTTimer+0x1d4>)
    736e:	46b8      	mov	r8, r7
    7370:	4443      	add	r3, r8
    7372:	7a5f      	ldrb	r7, [r3, #9]
    7374:	46ba      	mov	sl, r7
    7376:	7a9f      	ldrb	r7, [r3, #10]
    7378:	023f      	lsls	r7, r7, #8
    737a:	46b8      	mov	r8, r7
    737c:	4657      	mov	r7, sl
    737e:	4641      	mov	r1, r8
    7380:	430f      	orrs	r7, r1
    7382:	7ad9      	ldrb	r1, [r3, #11]
    7384:	0409      	lsls	r1, r1, #16
    7386:	430f      	orrs	r7, r1
    7388:	7b1b      	ldrb	r3, [r3, #12]
    738a:	061b      	lsls	r3, r3, #24
    738c:	433b      	orrs	r3, r7
    738e:	d0de      	beq.n	734e <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    7390:	9f02      	ldr	r7, [sp, #8]
    7392:	42bb      	cmp	r3, r7
    7394:	d9d1      	bls.n	733a <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    7396:	1bdb      	subs	r3, r3, r7
    7398:	3652      	adds	r6, #82	; 0x52
    739a:	00b6      	lsls	r6, r6, #2
    739c:	4920      	ldr	r1, [pc, #128]	; (7420 <setLBTTimer+0x1d4>)
    739e:	4688      	mov	r8, r1
    73a0:	4446      	add	r6, r8
    73a2:	2109      	movs	r1, #9
    73a4:	4688      	mov	r8, r1
    73a6:	44b0      	add	r8, r6
    73a8:	7273      	strb	r3, [r6, #9]
    73aa:	0a1e      	lsrs	r6, r3, #8
    73ac:	4641      	mov	r1, r8
    73ae:	704e      	strb	r6, [r1, #1]
    73b0:	0c1e      	lsrs	r6, r3, #16
    73b2:	708e      	strb	r6, [r1, #2]
    73b4:	0e1e      	lsrs	r6, r3, #24
    73b6:	70ce      	strb	r6, [r1, #3]
				}
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    73b8:	454b      	cmp	r3, r9
    73ba:	d8c8      	bhi.n	734e <setLBTTimer+0x102>
    73bc:	2b00      	cmp	r3, #0
    73be:	d0c6      	beq.n	734e <setLBTTimer+0x102>
    73c0:	4699      	mov	r9, r3
				{
					minim = RegParams.cmnParams.paramsType2.channelTimer[i];
					found = 1;
    73c2:	9403      	str	r4, [sp, #12]
    73c4:	e7c3      	b.n	734e <setLBTTimer+0x102>
				}
			}
		}
	}
	if((found == 1) && minim)
    73c6:	9b03      	ldr	r3, [sp, #12]
    73c8:	2b00      	cmp	r3, #0
    73ca:	d002      	beq.n	73d2 <setLBTTimer+0x186>
    73cc:	464b      	mov	r3, r9
    73ce:	2b00      	cmp	r3, #0
    73d0:	d107      	bne.n	73e2 <setLBTTimer+0x196>
	{
		pLBTTimer->lastTimerValue = minim;
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
	}
	return LORAWAN_SUCCESS;
}
    73d2:	2008      	movs	r0, #8
    73d4:	b005      	add	sp, #20
    73d6:	bc3c      	pop	{r2, r3, r4, r5}
    73d8:	4690      	mov	r8, r2
    73da:	4699      	mov	r9, r3
    73dc:	46a2      	mov	sl, r4
    73de:	46ab      	mov	fp, r5
    73e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    73e2:	4b0f      	ldr	r3, [pc, #60]	; (7420 <setLBTTimer+0x1d4>)
    73e4:	2292      	movs	r2, #146	; 0x92
    73e6:	32ff      	adds	r2, #255	; 0xff
    73e8:	4649      	mov	r1, r9
    73ea:	5499      	strb	r1, [r3, r2]
    73ec:	464a      	mov	r2, r9
    73ee:	0a11      	lsrs	r1, r2, #8
    73f0:	001a      	movs	r2, r3
    73f2:	3292      	adds	r2, #146	; 0x92
    73f4:	32ff      	adds	r2, #255	; 0xff
    73f6:	7051      	strb	r1, [r2, #1]
    73f8:	4649      	mov	r1, r9
    73fa:	0c09      	lsrs	r1, r1, #16
    73fc:	7091      	strb	r1, [r2, #2]
    73fe:	4649      	mov	r1, r9
    7400:	0e09      	lsrs	r1, r1, #24
    7402:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    7404:	21fa      	movs	r1, #250	; 0xfa
    7406:	0089      	lsls	r1, r1, #2
    7408:	464a      	mov	r2, r9
    740a:	4351      	muls	r1, r2
    740c:	2296      	movs	r2, #150	; 0x96
    740e:	32ff      	adds	r2, #255	; 0xff
    7410:	5c98      	ldrb	r0, [r3, r2]
    7412:	2300      	movs	r3, #0
    7414:	9300      	str	r3, [sp, #0]
    7416:	4b07      	ldr	r3, [pc, #28]	; (7434 <setLBTTimer+0x1e8>)
    7418:	2200      	movs	r2, #0
    741a:	4c07      	ldr	r4, [pc, #28]	; (7438 <setLBTTimer+0x1ec>)
    741c:	47a0      	blx	r4
    741e:	e7d8      	b.n	73d2 <setLBTTimer+0x186>
    7420:	20001290 	.word	0x20001290
    7424:	00009a8d 	.word	0x00009a8d
    7428:	00009bf9 	.word	0x00009bf9
    742c:	00009aa1 	.word	0x00009aa1
    7430:	000109bd 	.word	0x000109bd
    7434:	0000743d 	.word	0x0000743d
    7438:	000098f5 	.word	0x000098f5

0000743c <LBTChannelPauseCallback>:
{
    743c:	b5f0      	push	{r4, r5, r6, r7, lr}
    743e:	46de      	mov	lr, fp
    7440:	4657      	mov	r7, sl
    7442:	464e      	mov	r6, r9
    7444:	4645      	mov	r5, r8
    7446:	b5e0      	push	{r5, r6, r7, lr}
    7448:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    744a:	2322      	movs	r3, #34	; 0x22
    744c:	4a4a      	ldr	r2, [pc, #296]	; (7578 <LBTChannelPauseCallback+0x13c>)
    744e:	56d6      	ldrsb	r6, [r2, r3]
    7450:	2e00      	cmp	r6, #0
    7452:	dd6a      	ble.n	752a <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    7454:	0013      	movs	r3, r2
    7456:	7915      	ldrb	r5, [r2, #4]
    7458:	7952      	ldrb	r2, [r2, #5]
    745a:	0212      	lsls	r2, r2, #8
    745c:	432a      	orrs	r2, r5
    745e:	799d      	ldrb	r5, [r3, #6]
    7460:	042d      	lsls	r5, r5, #16
    7462:	432a      	orrs	r2, r5
    7464:	79dd      	ldrb	r5, [r3, #7]
    7466:	062d      	lsls	r5, r5, #24
    7468:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    746a:	2292      	movs	r2, #146	; 0x92
    746c:	32ff      	adds	r2, #255	; 0xff
    746e:	5c9f      	ldrb	r7, [r3, r2]
    7470:	3201      	adds	r2, #1
    7472:	5c9a      	ldrb	r2, [r3, r2]
    7474:	0212      	lsls	r2, r2, #8
    7476:	433a      	orrs	r2, r7
    7478:	2194      	movs	r1, #148	; 0x94
    747a:	31ff      	adds	r1, #255	; 0xff
    747c:	5c5f      	ldrb	r7, [r3, r1]
    747e:	043f      	lsls	r7, r7, #16
    7480:	433a      	orrs	r2, r7
    7482:	3101      	adds	r1, #1
    7484:	5c5f      	ldrb	r7, [r3, r1]
    7486:	063f      	lsls	r7, r7, #24
    7488:	4317      	orrs	r7, r2
    748a:	9703      	str	r7, [sp, #12]
    748c:	2000      	movs	r0, #0
    748e:	2300      	movs	r3, #0
    7490:	2200      	movs	r2, #0
    7492:	4691      	mov	r9, r2
    7494:	3a01      	subs	r2, #1
    7496:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7498:	2200      	movs	r2, #0
    749a:	4694      	mov	ip, r2
    749c:	e00e      	b.n	74bc <LBTChannelPauseCallback+0x80>
    749e:	3052      	adds	r0, #82	; 0x52
    74a0:	0080      	lsls	r0, r0, #2
    74a2:	4a35      	ldr	r2, [pc, #212]	; (7578 <LBTChannelPauseCallback+0x13c>)
    74a4:	4692      	mov	sl, r2
    74a6:	4450      	add	r0, sl
    74a8:	4661      	mov	r1, ip
    74aa:	7241      	strb	r1, [r0, #9]
    74ac:	7281      	strb	r1, [r0, #10]
    74ae:	72c1      	strb	r1, [r0, #11]
    74b0:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    74b2:	3301      	adds	r3, #1
    74b4:	b2db      	uxtb	r3, r3
    74b6:	0018      	movs	r0, r3
    74b8:	42b3      	cmp	r3, r6
    74ba:	da33      	bge.n	7524 <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    74bc:	005a      	lsls	r2, r3, #1
    74be:	5d54      	ldrb	r4, [r2, r5]
    74c0:	2c00      	cmp	r4, #0
    74c2:	d0f6      	beq.n	74b2 <LBTChannelPauseCallback+0x76>
    74c4:	0002      	movs	r2, r0
    74c6:	3252      	adds	r2, #82	; 0x52
    74c8:	0092      	lsls	r2, r2, #2
    74ca:	492b      	ldr	r1, [pc, #172]	; (7578 <LBTChannelPauseCallback+0x13c>)
    74cc:	468a      	mov	sl, r1
    74ce:	4452      	add	r2, sl
    74d0:	7a57      	ldrb	r7, [r2, #9]
    74d2:	46bb      	mov	fp, r7
    74d4:	7a97      	ldrb	r7, [r2, #10]
    74d6:	023f      	lsls	r7, r7, #8
    74d8:	46ba      	mov	sl, r7
    74da:	465f      	mov	r7, fp
    74dc:	4651      	mov	r1, sl
    74de:	430f      	orrs	r7, r1
    74e0:	7ad1      	ldrb	r1, [r2, #11]
    74e2:	0409      	lsls	r1, r1, #16
    74e4:	430f      	orrs	r7, r1
    74e6:	7b12      	ldrb	r2, [r2, #12]
    74e8:	0612      	lsls	r2, r2, #24
    74ea:	433a      	orrs	r2, r7
    74ec:	d0e1      	beq.n	74b2 <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    74ee:	9f03      	ldr	r7, [sp, #12]
    74f0:	42ba      	cmp	r2, r7
    74f2:	d9d4      	bls.n	749e <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    74f4:	1bd2      	subs	r2, r2, r7
    74f6:	3052      	adds	r0, #82	; 0x52
    74f8:	0080      	lsls	r0, r0, #2
    74fa:	491f      	ldr	r1, [pc, #124]	; (7578 <LBTChannelPauseCallback+0x13c>)
    74fc:	468a      	mov	sl, r1
    74fe:	4450      	add	r0, sl
    7500:	2109      	movs	r1, #9
    7502:	468a      	mov	sl, r1
    7504:	4482      	add	sl, r0
    7506:	7242      	strb	r2, [r0, #9]
    7508:	0a10      	lsrs	r0, r2, #8
    750a:	4651      	mov	r1, sl
    750c:	7048      	strb	r0, [r1, #1]
    750e:	0c10      	lsrs	r0, r2, #16
    7510:	7088      	strb	r0, [r1, #2]
    7512:	0e10      	lsrs	r0, r2, #24
    7514:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    7516:	4542      	cmp	r2, r8
    7518:	d8cb      	bhi.n	74b2 <LBTChannelPauseCallback+0x76>
    751a:	2a00      	cmp	r2, #0
    751c:	d0c9      	beq.n	74b2 <LBTChannelPauseCallback+0x76>
                found = 1;
    751e:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    7520:	4690      	mov	r8, r2
    7522:	e7c6      	b.n	74b2 <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    7524:	464b      	mov	r3, r9
    7526:	2b00      	cmp	r3, #0
    7528:	d106      	bne.n	7538 <LBTChannelPauseCallback+0xfc>
}
    752a:	b005      	add	sp, #20
    752c:	bc3c      	pop	{r2, r3, r4, r5}
    752e:	4690      	mov	r8, r2
    7530:	4699      	mov	r9, r3
    7532:	46a2      	mov	sl, r4
    7534:	46ab      	mov	fp, r5
    7536:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    7538:	4b0f      	ldr	r3, [pc, #60]	; (7578 <LBTChannelPauseCallback+0x13c>)
    753a:	2292      	movs	r2, #146	; 0x92
    753c:	32ff      	adds	r2, #255	; 0xff
    753e:	4641      	mov	r1, r8
    7540:	5499      	strb	r1, [r3, r2]
    7542:	4642      	mov	r2, r8
    7544:	0a11      	lsrs	r1, r2, #8
    7546:	001a      	movs	r2, r3
    7548:	3292      	adds	r2, #146	; 0x92
    754a:	32ff      	adds	r2, #255	; 0xff
    754c:	7051      	strb	r1, [r2, #1]
    754e:	4641      	mov	r1, r8
    7550:	0c09      	lsrs	r1, r1, #16
    7552:	7091      	strb	r1, [r2, #2]
    7554:	4641      	mov	r1, r8
    7556:	0e09      	lsrs	r1, r1, #24
    7558:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    755a:	21fa      	movs	r1, #250	; 0xfa
    755c:	0089      	lsls	r1, r1, #2
    755e:	4642      	mov	r2, r8
    7560:	4351      	muls	r1, r2
    7562:	2296      	movs	r2, #150	; 0x96
    7564:	32ff      	adds	r2, #255	; 0xff
    7566:	5c98      	ldrb	r0, [r3, r2]
    7568:	2300      	movs	r3, #0
    756a:	9300      	str	r3, [sp, #0]
    756c:	4b03      	ldr	r3, [pc, #12]	; (757c <LBTChannelPauseCallback+0x140>)
    756e:	2200      	movs	r2, #0
    7570:	4c03      	ldr	r4, [pc, #12]	; (7580 <LBTChannelPauseCallback+0x144>)
    7572:	47a0      	blx	r4
}
    7574:	e7d9      	b.n	752a <LBTChannelPauseCallback+0xee>
    7576:	46c0      	nop			; (mov r8, r8)
    7578:	20001290 	.word	0x20001290
    757c:	0000743d 	.word	0x0000743d
    7580:	000098f5 	.word	0x000098f5

00007584 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7584:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7586:	230f      	movs	r3, #15
    7588:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    758a:	4907      	ldr	r1, [pc, #28]	; (75a8 <ValidateDataRangeT2+0x24>)
    758c:	7f09      	ldrb	r1, [r1, #28]
		retVal = LORAWAN_INVALID_PARAMETER;
    758e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7590:	428b      	cmp	r3, r1
    7592:	d900      	bls.n	7596 <ValidateDataRangeT2+0x12>
}
    7594:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7596:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    7598:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    759a:	428a      	cmp	r2, r1
    759c:	d8fa      	bhi.n	7594 <ValidateDataRangeT2+0x10>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    759e:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    75a0:	4293      	cmp	r3, r2
    75a2:	d9f7      	bls.n	7594 <ValidateDataRangeT2+0x10>
		retVal = LORAWAN_INVALID_PARAMETER;
    75a4:	3002      	adds	r0, #2
	return retVal;
    75a6:	e7f5      	b.n	7594 <ValidateDataRangeT2+0x10>
    75a8:	20001290 	.word	0x20001290

000075ac <setDataRangeT2>:
{
    75ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ae:	46c6      	mov	lr, r8
    75b0:	b500      	push	{lr}
    75b2:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    75b4:	780d      	ldrb	r5, [r1, #0]
    75b6:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    75b8:	ab01      	add	r3, sp, #4
    75ba:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    75bc:	2201      	movs	r2, #1
    75be:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    75c0:	2012      	movs	r0, #18
    75c2:	4b25      	ldr	r3, [pc, #148]	; (7658 <setDataRangeT2+0xac>)
    75c4:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    75c6:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    75c8:	2808      	cmp	r0, #8
    75ca:	d004      	beq.n	75d6 <setDataRangeT2+0x2a>
}
    75cc:	0020      	movs	r0, r4
    75ce:	b002      	add	sp, #8
    75d0:	bc04      	pop	{r2}
    75d2:	4690      	mov	r8, r2
    75d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    75d6:	a901      	add	r1, sp, #4
    75d8:	300d      	adds	r0, #13
    75da:	4b20      	ldr	r3, [pc, #128]	; (765c <setDataRangeT2+0xb0>)
    75dc:	4798      	blx	r3
    75de:	0004      	movs	r4, r0
    75e0:	2808      	cmp	r0, #8
    75e2:	d001      	beq.n	75e8 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    75e4:	240a      	movs	r4, #10
    75e6:	e7f1      	b.n	75cc <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    75e8:	4f1d      	ldr	r7, [pc, #116]	; (7660 <setDataRangeT2+0xb4>)
    75ea:	793b      	ldrb	r3, [r7, #4]
    75ec:	797a      	ldrb	r2, [r7, #5]
    75ee:	0212      	lsls	r2, r2, #8
    75f0:	431a      	orrs	r2, r3
    75f2:	79bb      	ldrb	r3, [r7, #6]
    75f4:	041b      	lsls	r3, r3, #16
    75f6:	431a      	orrs	r2, r3
    75f8:	79fb      	ldrb	r3, [r7, #7]
    75fa:	061b      	lsls	r3, r3, #24
    75fc:	4313      	orrs	r3, r2
    75fe:	006a      	lsls	r2, r5, #1
    7600:	4690      	mov	r8, r2
    7602:	4443      	add	r3, r8
    7604:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7606:	23f8      	movs	r3, #248	; 0xf8
    7608:	33ff      	adds	r3, #255	; 0xff
    760a:	5cfb      	ldrb	r3, [r7, r3]
    760c:	22fc      	movs	r2, #252	; 0xfc
    760e:	0052      	lsls	r2, r2, #1
    7610:	5cb8      	ldrb	r0, [r7, r2]
    7612:	0200      	lsls	r0, r0, #8
    7614:	4318      	orrs	r0, r3
    7616:	b2c1      	uxtb	r1, r0
    7618:	0a00      	lsrs	r0, r0, #8
    761a:	4e12      	ldr	r6, [pc, #72]	; (7664 <setDataRangeT2+0xb8>)
    761c:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    761e:	7a3b      	ldrb	r3, [r7, #8]
    7620:	7a7a      	ldrb	r2, [r7, #9]
    7622:	0212      	lsls	r2, r2, #8
    7624:	431a      	orrs	r2, r3
    7626:	7abb      	ldrb	r3, [r7, #10]
    7628:	041b      	lsls	r3, r3, #16
    762a:	431a      	orrs	r2, r3
    762c:	7afb      	ldrb	r3, [r7, #11]
    762e:	061b      	lsls	r3, r3, #24
    7630:	4313      	orrs	r3, r2
    7632:	4445      	add	r5, r8
    7634:	00ad      	lsls	r5, r5, #2
    7636:	195d      	adds	r5, r3, r5
    7638:	7aeb      	ldrb	r3, [r5, #11]
    763a:	2202      	movs	r2, #2
    763c:	4313      	orrs	r3, r2
    763e:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    7640:	23fa      	movs	r3, #250	; 0xfa
    7642:	33ff      	adds	r3, #255	; 0xff
    7644:	5cfb      	ldrb	r3, [r7, r3]
    7646:	22fd      	movs	r2, #253	; 0xfd
    7648:	0052      	lsls	r2, r2, #1
    764a:	5cb8      	ldrb	r0, [r7, r2]
    764c:	0200      	lsls	r0, r0, #8
    764e:	4318      	orrs	r0, r3
    7650:	b2c1      	uxtb	r1, r0
    7652:	0a00      	lsrs	r0, r0, #8
    7654:	47b0      	blx	r6
    7656:	e7b9      	b.n	75cc <setDataRangeT2+0x20>
    7658:	00007585 	.word	0x00007585
    765c:	000055b1 	.word	0x000055b1
    7660:	20001290 	.word	0x20001290
    7664:	00008e5d 	.word	0x00008e5d

00007668 <LORAREG_GetAttr_MaxPayloadT3>:
{
    7668:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    766a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    766c:	4916      	ldr	r1, [pc, #88]	; (76c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    766e:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    7670:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7672:	4299      	cmp	r1, r3
    7674:	d215      	bcs.n	76a2 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    7676:	21ac      	movs	r1, #172	; 0xac
    7678:	31ff      	adds	r1, #255	; 0xff
    767a:	4c13      	ldr	r4, [pc, #76]	; (76c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    767c:	5c61      	ldrb	r1, [r4, r1]
    767e:	07c9      	lsls	r1, r1, #31
    7680:	d411      	bmi.n	76a6 <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7682:	4d11      	ldr	r5, [pc, #68]	; (76c8 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    7684:	7829      	ldrb	r1, [r5, #0]
    7686:	786c      	ldrb	r4, [r5, #1]
    7688:	0224      	lsls	r4, r4, #8
    768a:	430c      	orrs	r4, r1
    768c:	78a9      	ldrb	r1, [r5, #2]
    768e:	0409      	lsls	r1, r1, #16
    7690:	430c      	orrs	r4, r1
    7692:	78e9      	ldrb	r1, [r5, #3]
    7694:	0609      	lsls	r1, r1, #24
    7696:	4321      	orrs	r1, r4
    7698:	00db      	lsls	r3, r3, #3
    769a:	185b      	adds	r3, r3, r1
    769c:	789b      	ldrb	r3, [r3, #2]
    769e:	7013      	strb	r3, [r2, #0]
}
    76a0:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    76a2:	3802      	subs	r0, #2
    76a4:	e7e7      	b.n	7676 <LORAREG_GetAttr_MaxPayloadT3+0xe>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    76a6:	0025      	movs	r5, r4
    76a8:	7821      	ldrb	r1, [r4, #0]
    76aa:	7864      	ldrb	r4, [r4, #1]
    76ac:	0224      	lsls	r4, r4, #8
    76ae:	430c      	orrs	r4, r1
    76b0:	78a9      	ldrb	r1, [r5, #2]
    76b2:	0409      	lsls	r1, r1, #16
    76b4:	430c      	orrs	r4, r1
    76b6:	78e9      	ldrb	r1, [r5, #3]
    76b8:	0609      	lsls	r1, r1, #24
    76ba:	4321      	orrs	r1, r4
    76bc:	00db      	lsls	r3, r3, #3
    76be:	1859      	adds	r1, r3, r1
    76c0:	78cb      	ldrb	r3, [r1, #3]
    76c2:	7013      	strb	r3, [r2, #0]
    76c4:	e7ec      	b.n	76a0 <LORAREG_GetAttr_MaxPayloadT3+0x38>
    76c6:	46c0      	nop			; (mov r8, r8)
    76c8:	20001290 	.word	0x20001290

000076cc <LORAREG_GetAttr_RxWindowSizeT2>:
{
    76cc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    76ce:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    76d0:	490c      	ldr	r1, [pc, #48]	; (7704 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    76d2:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    76d4:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    76d6:	4299      	cmp	r1, r3
    76d8:	d200      	bcs.n	76dc <LORAREG_GetAttr_RxWindowSizeT2+0x10>
}
    76da:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    76dc:	4c09      	ldr	r4, [pc, #36]	; (7704 <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    76de:	7821      	ldrb	r1, [r4, #0]
    76e0:	7860      	ldrb	r0, [r4, #1]
    76e2:	0200      	lsls	r0, r0, #8
    76e4:	4308      	orrs	r0, r1
    76e6:	78a1      	ldrb	r1, [r4, #2]
    76e8:	0409      	lsls	r1, r1, #16
    76ea:	4308      	orrs	r0, r1
    76ec:	78e1      	ldrb	r1, [r4, #3]
    76ee:	0609      	lsls	r1, r1, #24
    76f0:	4301      	orrs	r1, r0
    76f2:	00db      	lsls	r3, r3, #3
    76f4:	5c58      	ldrb	r0, [r3, r1]
    76f6:	185b      	adds	r3, r3, r1
    76f8:	785b      	ldrb	r3, [r3, #1]
    76fa:	021b      	lsls	r3, r3, #8
    76fc:	4303      	orrs	r3, r0
    76fe:	8013      	strh	r3, [r2, #0]
	return result;
    7700:	2008      	movs	r0, #8
    7702:	e7ea      	b.n	76da <LORAREG_GetAttr_RxWindowSizeT2+0xe>
    7704:	20001290 	.word	0x20001290

00007708 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    7708:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    770a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    770c:	490b      	ldr	r1, [pc, #44]	; (773c <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    770e:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    7710:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7712:	4299      	cmp	r1, r3
    7714:	d200      	bcs.n	7718 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
}
    7716:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7718:	4c08      	ldr	r4, [pc, #32]	; (773c <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    771a:	7821      	ldrb	r1, [r4, #0]
    771c:	7860      	ldrb	r0, [r4, #1]
    771e:	0200      	lsls	r0, r0, #8
    7720:	4308      	orrs	r0, r1
    7722:	78a1      	ldrb	r1, [r4, #2]
    7724:	0409      	lsls	r1, r1, #16
    7726:	4308      	orrs	r0, r1
    7728:	78e1      	ldrb	r1, [r4, #3]
    772a:	0609      	lsls	r1, r1, #24
    772c:	4301      	orrs	r1, r0
    772e:	00db      	lsls	r3, r3, #3
    7730:	185b      	adds	r3, r3, r1
    7732:	791b      	ldrb	r3, [r3, #4]
    7734:	b25b      	sxtb	r3, r3
    7736:	7013      	strb	r3, [r2, #0]
	return result;
    7738:	2008      	movs	r0, #8
    773a:	e7ec      	b.n	7716 <LORAREG_GetAttr_RxWindowOffsetT2+0xe>
    773c:	20001290 	.word	0x20001290

00007740 <LORAREG_GetAttr_MaxPayloadT2>:
{
    7740:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    7742:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    7744:	490b      	ldr	r1, [pc, #44]	; (7774 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    7746:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    7748:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    774a:	4299      	cmp	r1, r3
    774c:	d200      	bcs.n	7750 <LORAREG_GetAttr_MaxPayloadT2+0x10>
}
    774e:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7750:	4c08      	ldr	r4, [pc, #32]	; (7774 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    7752:	7821      	ldrb	r1, [r4, #0]
    7754:	7860      	ldrb	r0, [r4, #1]
    7756:	0200      	lsls	r0, r0, #8
    7758:	4308      	orrs	r0, r1
    775a:	78a1      	ldrb	r1, [r4, #2]
    775c:	0409      	lsls	r1, r1, #16
    775e:	4308      	orrs	r0, r1
    7760:	78e1      	ldrb	r1, [r4, #3]
    7762:	0609      	lsls	r1, r1, #24
    7764:	4301      	orrs	r1, r0
    7766:	00db      	lsls	r3, r3, #3
    7768:	185b      	adds	r3, r3, r1
    776a:	789b      	ldrb	r3, [r3, #2]
    776c:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    776e:	2008      	movs	r0, #8
	return result;
    7770:	e7ed      	b.n	774e <LORAREG_GetAttr_MaxPayloadT2+0xe>
    7772:	46c0      	nop			; (mov r8, r8)
    7774:	20001290 	.word	0x20001290

00007778 <LORAREG_GetAttr_ModulationAttrT2>:
{
    7778:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    777a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    777c:	490b      	ldr	r1, [pc, #44]	; (77ac <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    777e:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    7780:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7782:	4299      	cmp	r1, r3
    7784:	d200      	bcs.n	7788 <LORAREG_GetAttr_ModulationAttrT2+0x10>
}
    7786:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7788:	4c08      	ldr	r4, [pc, #32]	; (77ac <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    778a:	7821      	ldrb	r1, [r4, #0]
    778c:	7860      	ldrb	r0, [r4, #1]
    778e:	0200      	lsls	r0, r0, #8
    7790:	4308      	orrs	r0, r1
    7792:	78a1      	ldrb	r1, [r4, #2]
    7794:	0409      	lsls	r1, r1, #16
    7796:	4308      	orrs	r0, r1
    7798:	78e1      	ldrb	r1, [r4, #3]
    779a:	0609      	lsls	r1, r1, #24
    779c:	4301      	orrs	r1, r0
    779e:	00db      	lsls	r3, r3, #3
    77a0:	185b      	adds	r3, r3, r1
    77a2:	79db      	ldrb	r3, [r3, #7]
    77a4:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    77a6:	2008      	movs	r0, #8
	return result;
    77a8:	e7ed      	b.n	7786 <LORAREG_GetAttr_ModulationAttrT2+0xe>
    77aa:	46c0      	nop			; (mov r8, r8)
    77ac:	20001290 	.word	0x20001290

000077b0 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    77b0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    77b2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    77b4:	490b      	ldr	r1, [pc, #44]	; (77e4 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    77b6:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    77b8:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    77ba:	4299      	cmp	r1, r3
    77bc:	d200      	bcs.n	77c0 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
}
    77be:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    77c0:	4c08      	ldr	r4, [pc, #32]	; (77e4 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    77c2:	7821      	ldrb	r1, [r4, #0]
    77c4:	7860      	ldrb	r0, [r4, #1]
    77c6:	0200      	lsls	r0, r0, #8
    77c8:	4308      	orrs	r0, r1
    77ca:	78a1      	ldrb	r1, [r4, #2]
    77cc:	0409      	lsls	r1, r1, #16
    77ce:	4308      	orrs	r0, r1
    77d0:	78e1      	ldrb	r1, [r4, #3]
    77d2:	0609      	lsls	r1, r1, #24
    77d4:	4301      	orrs	r1, r0
    77d6:	00db      	lsls	r3, r3, #3
    77d8:	185b      	adds	r3, r3, r1
    77da:	799b      	ldrb	r3, [r3, #6]
    77dc:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    77de:	2008      	movs	r0, #8
	return result;
    77e0:	e7ed      	b.n	77be <LORAREG_GetAttr_BandwidthAttrT2+0xe>
    77e2:	46c0      	nop			; (mov r8, r8)
    77e4:	20001290 	.word	0x20001290

000077e8 <LORAREG_GetAttr_SpreadFactorT2>:
{
    77e8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    77ea:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    77ec:	490b      	ldr	r1, [pc, #44]	; (781c <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    77ee:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    77f0:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    77f2:	4299      	cmp	r1, r3
    77f4:	d200      	bcs.n	77f8 <LORAREG_GetAttr_SpreadFactorT2+0x10>
}
    77f6:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    77f8:	4c08      	ldr	r4, [pc, #32]	; (781c <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    77fa:	7821      	ldrb	r1, [r4, #0]
    77fc:	7860      	ldrb	r0, [r4, #1]
    77fe:	0200      	lsls	r0, r0, #8
    7800:	4308      	orrs	r0, r1
    7802:	78a1      	ldrb	r1, [r4, #2]
    7804:	0409      	lsls	r1, r1, #16
    7806:	4308      	orrs	r0, r1
    7808:	78e1      	ldrb	r1, [r4, #3]
    780a:	0609      	lsls	r1, r1, #24
    780c:	4301      	orrs	r1, r0
    780e:	00db      	lsls	r3, r3, #3
    7810:	185b      	adds	r3, r3, r1
    7812:	795b      	ldrb	r3, [r3, #5]
    7814:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7816:	2008      	movs	r0, #8
	return result;
    7818:	e7ed      	b.n	77f6 <LORAREG_GetAttr_SpreadFactorT2+0xe>
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	20001290 	.word	0x20001290

00007820 <ValidateChMaskChCntl>:
{
    7820:	b500      	push	{lr}
    7822:	b083      	sub	sp, #12
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7824:	2204      	movs	r2, #4
    7826:	a801      	add	r0, sp, #4
    7828:	4b05      	ldr	r3, [pc, #20]	; (7840 <ValidateChMaskChCntl+0x20>)
    782a:	4798      	blx	r3
	result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));		
    782c:	a901      	add	r1, sp, #4
    782e:	201b      	movs	r0, #27
    7830:	4b04      	ldr	r3, [pc, #16]	; (7844 <ValidateChMaskChCntl+0x24>)
    7832:	4798      	blx	r3
    7834:	2308      	movs	r3, #8
    7836:	4318      	orrs	r0, r3
    return result;
    7838:	b2c0      	uxtb	r0, r0
}
    783a:	b003      	add	sp, #12
    783c:	bd00      	pop	{pc}
    783e:	46c0      	nop			; (mov r8, r8)
    7840:	00013ba5 	.word	0x00013ba5
    7844:	00005699 	.word	0x00005699

00007848 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    7848:	b5f0      	push	{r4, r5, r6, r7, lr}
    784a:	b083      	sub	sp, #12
    784c:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    784e:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    7850:	4b2e      	ldr	r3, [pc, #184]	; (790c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7852:	7f1b      	ldrb	r3, [r3, #28]
		result = LORAWAN_INVALID_PARAMETER;
    7854:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    7856:	42a3      	cmp	r3, r4
    7858:	d205      	bcs.n	7866 <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
}
    785a:	b003      	add	sp, #12
    785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    785e:	2900      	cmp	r1, #0
    7860:	d10f      	bne.n	7882 <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
		currDr = DR2;
    7862:	2402      	movs	r4, #2
    7864:	e00d      	b.n	7882 <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7866:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7868:	2325      	movs	r3, #37	; 0x25
    786a:	4a28      	ldr	r2, [pc, #160]	; (790c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    786c:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    786e:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7870:	429e      	cmp	r6, r3
    7872:	dcf2      	bgt.n	785a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    7874:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    7876:	2326      	movs	r3, #38	; 0x26
    7878:	5cd2      	ldrb	r2, [r2, r3]
    787a:	4b25      	ldr	r3, [pc, #148]	; (7910 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    787c:	4113      	asrs	r3, r2
    787e:	07db      	lsls	r3, r3, #31
    7880:	d4ed      	bmi.n	785e <LORAREG_GetAttr_NewTxChConfigT2+0x16>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7882:	2322      	movs	r3, #34	; 0x22
    7884:	4a21      	ldr	r2, [pc, #132]	; (790c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    7886:	5cd0      	ldrb	r0, [r2, r3]
    7888:	466b      	mov	r3, sp
    788a:	3307      	adds	r3, #7
    788c:	0022      	movs	r2, r4
    788e:	4f21      	ldr	r7, [pc, #132]	; (7914 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    7890:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    7892:	2808      	cmp	r0, #8
    7894:	d1e1      	bne.n	785a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		RegParams.lastUsedChannelIndex = channelIndex;
    7896:	466b      	mov	r3, sp
    7898:	79df      	ldrb	r7, [r3, #7]
    789a:	4b1c      	ldr	r3, [pc, #112]	; (790c <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    789c:	2227      	movs	r2, #39	; 0x27
    789e:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    78a0:	7a19      	ldrb	r1, [r3, #8]
    78a2:	7a5a      	ldrb	r2, [r3, #9]
    78a4:	0212      	lsls	r2, r2, #8
    78a6:	430a      	orrs	r2, r1
    78a8:	7a99      	ldrb	r1, [r3, #10]
    78aa:	0409      	lsls	r1, r1, #16
    78ac:	430a      	orrs	r2, r1
    78ae:	7ad9      	ldrb	r1, [r3, #11]
    78b0:	0609      	lsls	r1, r1, #24
    78b2:	4311      	orrs	r1, r2
    78b4:	007a      	lsls	r2, r7, #1
    78b6:	19d2      	adds	r2, r2, r7
    78b8:	0092      	lsls	r2, r2, #2
    78ba:	5c57      	ldrb	r7, [r2, r1]
    78bc:	1852      	adds	r2, r2, r1
    78be:	7851      	ldrb	r1, [r2, #1]
    78c0:	0209      	lsls	r1, r1, #8
    78c2:	430f      	orrs	r7, r1
    78c4:	7891      	ldrb	r1, [r2, #2]
    78c6:	0409      	lsls	r1, r1, #16
    78c8:	4339      	orrs	r1, r7
    78ca:	78d2      	ldrb	r2, [r2, #3]
    78cc:	0612      	lsls	r2, r2, #24
    78ce:	430a      	orrs	r2, r1
    78d0:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    78d2:	0076      	lsls	r6, r6, #1
    78d4:	2220      	movs	r2, #32
    78d6:	5c9a      	ldrb	r2, [r3, r2]
    78d8:	1b96      	subs	r6, r2, r6
    78da:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    78dc:	2200      	movs	r2, #0
    78de:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    78e0:	7819      	ldrb	r1, [r3, #0]
    78e2:	785a      	ldrb	r2, [r3, #1]
    78e4:	0212      	lsls	r2, r2, #8
    78e6:	4311      	orrs	r1, r2
    78e8:	789a      	ldrb	r2, [r3, #2]
    78ea:	0412      	lsls	r2, r2, #16
    78ec:	430a      	orrs	r2, r1
    78ee:	78db      	ldrb	r3, [r3, #3]
    78f0:	061b      	lsls	r3, r3, #24
    78f2:	4313      	orrs	r3, r2
    78f4:	00e4      	lsls	r4, r4, #3
    78f6:	191c      	adds	r4, r3, r4
    78f8:	79e3      	ldrb	r3, [r4, #7]
    78fa:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    78fc:	79a3      	ldrb	r3, [r4, #6]
    78fe:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7900:	7963      	ldrb	r3, [r4, #5]
    7902:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    7904:	2300      	movs	r3, #0
    7906:	71eb      	strb	r3, [r5, #7]
    7908:	e7a7      	b.n	785a <LORAREG_GetAttr_NewTxChConfigT2+0x12>
    790a:	46c0      	nop			; (mov r8, r8)
    790c:	20001290 	.word	0x20001290
    7910:	00007fe0 	.word	0x00007fe0
    7914:	00005a9d 	.word	0x00005a9d

00007918 <setChannelIdStatus>:
{
    7918:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    791a:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    791c:	2322      	movs	r3, #34	; 0x22
    791e:	4a05      	ldr	r2, [pc, #20]	; (7934 <setChannelIdStatus+0x1c>)
    7920:	56d3      	ldrsb	r3, [r2, r3]
    7922:	4298      	cmp	r0, r3
    7924:	db01      	blt.n	792a <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    7926:	200a      	movs	r0, #10
}
    7928:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    792a:	7849      	ldrb	r1, [r1, #1]
    792c:	4b02      	ldr	r3, [pc, #8]	; (7938 <setChannelIdStatus+0x20>)
    792e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7930:	2008      	movs	r0, #8
	return retVal;
    7932:	e7f9      	b.n	7928 <setChannelIdStatus+0x10>
    7934:	20001290 	.word	0x20001290
    7938:	00005c51 	.word	0x00005c51

0000793c <ValidateDataRange>:
{
    793c:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    793e:	233a      	movs	r3, #58	; 0x3a
    7940:	33ff      	adds	r3, #255	; 0xff
    7942:	4a17      	ldr	r2, [pc, #92]	; (79a0 <ValidateDataRange+0x64>)
    7944:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7946:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    7948:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    794a:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    794c:	42a3      	cmp	r3, r4
    794e:	d213      	bcs.n	7978 <ValidateDataRange+0x3c>
}
    7950:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7952:	2022      	movs	r0, #34	; 0x22
    7954:	4d12      	ldr	r5, [pc, #72]	; (79a0 <ValidateDataRange+0x64>)
    7956:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7958:	381a      	subs	r0, #26
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    795a:	42a9      	cmp	r1, r5
    795c:	daf8      	bge.n	7950 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    795e:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    7960:	4293      	cmp	r3, r2
    7962:	d1f5      	bne.n	7950 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    7964:	42a3      	cmp	r3, r4
    7966:	d005      	beq.n	7974 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    7968:	200a      	movs	r0, #10
	return retVal;
    796a:	e7f1      	b.n	7950 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    796c:	200a      	movs	r0, #10
    796e:	e7ef      	b.n	7950 <ValidateDataRange+0x14>
    7970:	200a      	movs	r0, #10
    7972:	e7ed      	b.n	7950 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7974:	2008      	movs	r0, #8
    7976:	e7eb      	b.n	7950 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    7978:	200f      	movs	r0, #15
    797a:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    797c:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    797e:	4293      	cmp	r3, r2
    7980:	d3e6      	bcc.n	7950 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    7982:	42a2      	cmp	r2, r4
    7984:	d8e4      	bhi.n	7950 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    7986:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7988:	209e      	movs	r0, #158	; 0x9e
    798a:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    798c:	4d04      	ldr	r5, [pc, #16]	; (79a0 <ValidateDataRange+0x64>)
    798e:	5c28      	ldrb	r0, [r5, r0]
    7990:	4288      	cmp	r0, r1
    7992:	d9de      	bls.n	7952 <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    7994:	4293      	cmp	r3, r2
    7996:	d0e9      	beq.n	796c <ValidateDataRange+0x30>
    7998:	42a3      	cmp	r3, r4
    799a:	d0e9      	beq.n	7970 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    799c:	2008      	movs	r0, #8
    799e:	e7d7      	b.n	7950 <ValidateDataRange+0x14>
    79a0:	20001290 	.word	0x20001290

000079a4 <setDataRange>:
{
    79a4:	b570      	push	{r4, r5, r6, lr}
    79a6:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    79a8:	2012      	movs	r0, #18
    79aa:	4b16      	ldr	r3, [pc, #88]	; (7a04 <setDataRange+0x60>)
    79ac:	4798      	blx	r3
    79ae:	0004      	movs	r4, r0
    79b0:	2808      	cmp	r0, #8
    79b2:	d002      	beq.n	79ba <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    79b4:	240a      	movs	r4, #10
}
    79b6:	0020      	movs	r0, r4
    79b8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    79ba:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    79bc:	2222      	movs	r2, #34	; 0x22
    79be:	4912      	ldr	r1, [pc, #72]	; (7a08 <setDataRange+0x64>)
    79c0:	568a      	ldrsb	r2, [r1, r2]
    79c2:	4293      	cmp	r3, r2
    79c4:	db01      	blt.n	79ca <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    79c6:	3402      	adds	r4, #2
    79c8:	e7f5      	b.n	79b6 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    79ca:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    79cc:	4a0e      	ldr	r2, [pc, #56]	; (7a08 <setDataRange+0x64>)
    79ce:	7911      	ldrb	r1, [r2, #4]
    79d0:	7950      	ldrb	r0, [r2, #5]
    79d2:	0200      	lsls	r0, r0, #8
    79d4:	4308      	orrs	r0, r1
    79d6:	7991      	ldrb	r1, [r2, #6]
    79d8:	0409      	lsls	r1, r1, #16
    79da:	4308      	orrs	r0, r1
    79dc:	79d1      	ldrb	r1, [r2, #7]
    79de:	0609      	lsls	r1, r1, #24
    79e0:	4301      	orrs	r1, r0
    79e2:	005b      	lsls	r3, r3, #1
    79e4:	185b      	adds	r3, r3, r1
    79e6:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    79e8:	23f8      	movs	r3, #248	; 0xf8
    79ea:	33ff      	adds	r3, #255	; 0xff
    79ec:	5cd3      	ldrb	r3, [r2, r3]
    79ee:	21fc      	movs	r1, #252	; 0xfc
    79f0:	0049      	lsls	r1, r1, #1
    79f2:	5c50      	ldrb	r0, [r2, r1]
    79f4:	0200      	lsls	r0, r0, #8
    79f6:	4318      	orrs	r0, r3
    79f8:	b2c1      	uxtb	r1, r0
    79fa:	0a00      	lsrs	r0, r0, #8
    79fc:	4b03      	ldr	r3, [pc, #12]	; (7a0c <setDataRange+0x68>)
    79fe:	4798      	blx	r3
	return retVal;
    7a00:	e7d9      	b.n	79b6 <setDataRange+0x12>
    7a02:	46c0      	nop			; (mov r8, r8)
    7a04:	0000793d 	.word	0x0000793d
    7a08:	20001290 	.word	0x20001290
    7a0c:	00008e5d 	.word	0x00008e5d

00007a10 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    7a10:	b570      	push	{r4, r5, r6, lr}
    7a12:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a14:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a16:	233a      	movs	r3, #58	; 0x3a
    7a18:	33ff      	adds	r3, #255	; 0xff
    7a1a:	4a0f      	ldr	r2, [pc, #60]	; (7a58 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7a1c:	5cd3      	ldrb	r3, [r2, r3]
    7a1e:	42a3      	cmp	r3, r4
    7a20:	d205      	bcs.n	7a2e <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a22:	200f      	movs	r0, #15
    7a24:	4b0d      	ldr	r3, [pc, #52]	; (7a5c <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    7a26:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7a28:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a2a:	2808      	cmp	r0, #8
    7a2c:	d112      	bne.n	7a54 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    7a2e:	490a      	ldr	r1, [pc, #40]	; (7a58 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    7a30:	780b      	ldrb	r3, [r1, #0]
    7a32:	784a      	ldrb	r2, [r1, #1]
    7a34:	0212      	lsls	r2, r2, #8
    7a36:	431a      	orrs	r2, r3
    7a38:	788b      	ldrb	r3, [r1, #2]
    7a3a:	041b      	lsls	r3, r3, #16
    7a3c:	431a      	orrs	r2, r3
    7a3e:	78cb      	ldrb	r3, [r1, #3]
    7a40:	061b      	lsls	r3, r3, #24
    7a42:	4313      	orrs	r3, r2
    7a44:	00e4      	lsls	r4, r4, #3
    7a46:	5ce2      	ldrb	r2, [r4, r3]
    7a48:	18e4      	adds	r4, r4, r3
    7a4a:	7863      	ldrb	r3, [r4, #1]
    7a4c:	021b      	lsls	r3, r3, #8
    7a4e:	4313      	orrs	r3, r2
    7a50:	802b      	strh	r3, [r5, #0]
	return result;
    7a52:	2308      	movs	r3, #8
}
    7a54:	0018      	movs	r0, r3
    7a56:	bd70      	pop	{r4, r5, r6, pc}
    7a58:	20001290 	.word	0x20001290
    7a5c:	0000554d 	.word	0x0000554d

00007a60 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    7a60:	b570      	push	{r4, r5, r6, lr}
    7a62:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7a64:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7a66:	233a      	movs	r3, #58	; 0x3a
    7a68:	33ff      	adds	r3, #255	; 0xff
    7a6a:	4a0e      	ldr	r2, [pc, #56]	; (7aa4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7a6c:	5cd3      	ldrb	r3, [r2, r3]
    7a6e:	42a3      	cmp	r3, r4
    7a70:	d205      	bcs.n	7a7e <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a72:	200f      	movs	r0, #15
    7a74:	4b0c      	ldr	r3, [pc, #48]	; (7aa8 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    7a76:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    7a78:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7a7a:	2808      	cmp	r0, #8
    7a7c:	d110      	bne.n	7aa0 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    7a7e:	4909      	ldr	r1, [pc, #36]	; (7aa4 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    7a80:	780b      	ldrb	r3, [r1, #0]
    7a82:	784a      	ldrb	r2, [r1, #1]
    7a84:	0212      	lsls	r2, r2, #8
    7a86:	431a      	orrs	r2, r3
    7a88:	788b      	ldrb	r3, [r1, #2]
    7a8a:	041b      	lsls	r3, r3, #16
    7a8c:	431a      	orrs	r2, r3
    7a8e:	78cb      	ldrb	r3, [r1, #3]
    7a90:	061b      	lsls	r3, r3, #24
    7a92:	4313      	orrs	r3, r2
    7a94:	00e4      	lsls	r4, r4, #3
    7a96:	18e3      	adds	r3, r4, r3
    7a98:	791b      	ldrb	r3, [r3, #4]
    7a9a:	b25b      	sxtb	r3, r3
    7a9c:	702b      	strb	r3, [r5, #0]
	return result;
    7a9e:	2308      	movs	r3, #8
}
    7aa0:	0018      	movs	r0, r3
    7aa2:	bd70      	pop	{r4, r5, r6, pc}
    7aa4:	20001290 	.word	0x20001290
    7aa8:	0000554d 	.word	0x0000554d

00007aac <LORAREG_GetAttr_MaxPayloadT1>:
{
    7aac:	b570      	push	{r4, r5, r6, lr}
    7aae:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7ab0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7ab2:	233a      	movs	r3, #58	; 0x3a
    7ab4:	33ff      	adds	r3, #255	; 0xff
    7ab6:	4a0e      	ldr	r2, [pc, #56]	; (7af0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7ab8:	5cd3      	ldrb	r3, [r2, r3]
    7aba:	42a3      	cmp	r3, r4
    7abc:	d205      	bcs.n	7aca <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7abe:	200f      	movs	r0, #15
    7ac0:	4b0c      	ldr	r3, [pc, #48]	; (7af4 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    7ac2:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7ac4:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7ac6:	2808      	cmp	r0, #8
    7ac8:	d10f      	bne.n	7aea <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    7aca:	4909      	ldr	r1, [pc, #36]	; (7af0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    7acc:	780b      	ldrb	r3, [r1, #0]
    7ace:	784a      	ldrb	r2, [r1, #1]
    7ad0:	0212      	lsls	r2, r2, #8
    7ad2:	431a      	orrs	r2, r3
    7ad4:	788b      	ldrb	r3, [r1, #2]
    7ad6:	041b      	lsls	r3, r3, #16
    7ad8:	431a      	orrs	r2, r3
    7ada:	78cb      	ldrb	r3, [r1, #3]
    7adc:	061b      	lsls	r3, r3, #24
    7ade:	4313      	orrs	r3, r2
    7ae0:	00e4      	lsls	r4, r4, #3
    7ae2:	18e3      	adds	r3, r4, r3
    7ae4:	789b      	ldrb	r3, [r3, #2]
    7ae6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ae8:	2308      	movs	r3, #8
}
    7aea:	0018      	movs	r0, r3
    7aec:	bd70      	pop	{r4, r5, r6, pc}
    7aee:	46c0      	nop			; (mov r8, r8)
    7af0:	20001290 	.word	0x20001290
    7af4:	0000554d 	.word	0x0000554d

00007af8 <LORAREG_GetAttr_ModulationAttrT1>:
{
    7af8:	b570      	push	{r4, r5, r6, lr}
    7afa:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7afc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7afe:	233a      	movs	r3, #58	; 0x3a
    7b00:	33ff      	adds	r3, #255	; 0xff
    7b02:	4a0e      	ldr	r2, [pc, #56]	; (7b3c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7b04:	5cd3      	ldrb	r3, [r2, r3]
    7b06:	42a3      	cmp	r3, r4
    7b08:	d205      	bcs.n	7b16 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7b0a:	200f      	movs	r0, #15
    7b0c:	4b0c      	ldr	r3, [pc, #48]	; (7b40 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    7b0e:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7b10:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7b12:	2808      	cmp	r0, #8
    7b14:	d10f      	bne.n	7b36 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    7b16:	4909      	ldr	r1, [pc, #36]	; (7b3c <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    7b18:	780b      	ldrb	r3, [r1, #0]
    7b1a:	784a      	ldrb	r2, [r1, #1]
    7b1c:	0212      	lsls	r2, r2, #8
    7b1e:	431a      	orrs	r2, r3
    7b20:	788b      	ldrb	r3, [r1, #2]
    7b22:	041b      	lsls	r3, r3, #16
    7b24:	431a      	orrs	r2, r3
    7b26:	78cb      	ldrb	r3, [r1, #3]
    7b28:	061b      	lsls	r3, r3, #24
    7b2a:	4313      	orrs	r3, r2
    7b2c:	00e4      	lsls	r4, r4, #3
    7b2e:	18e3      	adds	r3, r4, r3
    7b30:	79db      	ldrb	r3, [r3, #7]
    7b32:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7b34:	2308      	movs	r3, #8
}
    7b36:	0018      	movs	r0, r3
    7b38:	bd70      	pop	{r4, r5, r6, pc}
    7b3a:	46c0      	nop			; (mov r8, r8)
    7b3c:	20001290 	.word	0x20001290
    7b40:	0000554d 	.word	0x0000554d

00007b44 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    7b44:	b570      	push	{r4, r5, r6, lr}
    7b46:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7b48:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7b4a:	233a      	movs	r3, #58	; 0x3a
    7b4c:	33ff      	adds	r3, #255	; 0xff
    7b4e:	4a0e      	ldr	r2, [pc, #56]	; (7b88 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7b50:	5cd3      	ldrb	r3, [r2, r3]
    7b52:	42a3      	cmp	r3, r4
    7b54:	d205      	bcs.n	7b62 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7b56:	200f      	movs	r0, #15
    7b58:	4b0c      	ldr	r3, [pc, #48]	; (7b8c <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    7b5a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    7b5c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7b5e:	2808      	cmp	r0, #8
    7b60:	d10f      	bne.n	7b82 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    7b62:	4909      	ldr	r1, [pc, #36]	; (7b88 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    7b64:	780b      	ldrb	r3, [r1, #0]
    7b66:	784a      	ldrb	r2, [r1, #1]
    7b68:	0212      	lsls	r2, r2, #8
    7b6a:	431a      	orrs	r2, r3
    7b6c:	788b      	ldrb	r3, [r1, #2]
    7b6e:	041b      	lsls	r3, r3, #16
    7b70:	431a      	orrs	r2, r3
    7b72:	78cb      	ldrb	r3, [r1, #3]
    7b74:	061b      	lsls	r3, r3, #24
    7b76:	4313      	orrs	r3, r2
    7b78:	00e4      	lsls	r4, r4, #3
    7b7a:	18e3      	adds	r3, r4, r3
    7b7c:	799b      	ldrb	r3, [r3, #6]
    7b7e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7b80:	2308      	movs	r3, #8
}
    7b82:	0018      	movs	r0, r3
    7b84:	bd70      	pop	{r4, r5, r6, pc}
    7b86:	46c0      	nop			; (mov r8, r8)
    7b88:	20001290 	.word	0x20001290
    7b8c:	0000554d 	.word	0x0000554d

00007b90 <LORAREG_GetAttr_SpreadFactorT1>:
{
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    7b94:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7b96:	233a      	movs	r3, #58	; 0x3a
    7b98:	33ff      	adds	r3, #255	; 0xff
    7b9a:	4a0e      	ldr	r2, [pc, #56]	; (7bd4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7b9c:	5cd3      	ldrb	r3, [r2, r3]
    7b9e:	42a3      	cmp	r3, r4
    7ba0:	d205      	bcs.n	7bae <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7ba2:	200f      	movs	r0, #15
    7ba4:	4b0c      	ldr	r3, [pc, #48]	; (7bd8 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    7ba6:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    7ba8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    7baa:	2808      	cmp	r0, #8
    7bac:	d10f      	bne.n	7bce <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    7bae:	4909      	ldr	r1, [pc, #36]	; (7bd4 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    7bb0:	780b      	ldrb	r3, [r1, #0]
    7bb2:	784a      	ldrb	r2, [r1, #1]
    7bb4:	0212      	lsls	r2, r2, #8
    7bb6:	431a      	orrs	r2, r3
    7bb8:	788b      	ldrb	r3, [r1, #2]
    7bba:	041b      	lsls	r3, r3, #16
    7bbc:	431a      	orrs	r2, r3
    7bbe:	78cb      	ldrb	r3, [r1, #3]
    7bc0:	061b      	lsls	r3, r3, #24
    7bc2:	4313      	orrs	r3, r2
    7bc4:	00e4      	lsls	r4, r4, #3
    7bc6:	18e3      	adds	r3, r4, r3
    7bc8:	795b      	ldrb	r3, [r3, #5]
    7bca:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7bcc:	2308      	movs	r3, #8
}
    7bce:	0018      	movs	r0, r3
    7bd0:	bd70      	pop	{r4, r5, r6, pc}
    7bd2:	46c0      	nop			; (mov r8, r8)
    7bd4:	20001290 	.word	0x20001290
    7bd8:	0000554d 	.word	0x0000554d

00007bdc <ValidateTxFreqT1>:
{
    7bdc:	b530      	push	{r4, r5, lr}
    7bde:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    7be0:	2208      	movs	r2, #8
    7be2:	4668      	mov	r0, sp
    7be4:	4b20      	ldr	r3, [pc, #128]	; (7c68 <ValidateTxFreqT1+0x8c>)
    7be6:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    7be8:	466b      	mov	r3, sp
    7bea:	7919      	ldrb	r1, [r3, #4]
    7bec:	2322      	movs	r3, #34	; 0x22
    7bee:	4a1f      	ldr	r2, [pc, #124]	; (7c6c <ValidateTxFreqT1+0x90>)
    7bf0:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7bf2:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    7bf4:	4299      	cmp	r1, r3
    7bf6:	dd00      	ble.n	7bfa <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7bf8:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7bfa:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7bfc:	4d1b      	ldr	r5, [pc, #108]	; (7c6c <ValidateTxFreqT1+0x90>)
    7bfe:	2396      	movs	r3, #150	; 0x96
    7c00:	005b      	lsls	r3, r3, #1
    7c02:	5ceb      	ldrb	r3, [r5, r3]
    7c04:	222e      	movs	r2, #46	; 0x2e
    7c06:	32ff      	adds	r2, #255	; 0xff
    7c08:	5caa      	ldrb	r2, [r5, r2]
    7c0a:	0212      	lsls	r2, r2, #8
    7c0c:	431a      	orrs	r2, r3
    7c0e:	2397      	movs	r3, #151	; 0x97
    7c10:	005b      	lsls	r3, r3, #1
    7c12:	5ceb      	ldrb	r3, [r5, r3]
    7c14:	041b      	lsls	r3, r3, #16
    7c16:	431a      	orrs	r2, r3
    7c18:	2330      	movs	r3, #48	; 0x30
    7c1a:	33ff      	adds	r3, #255	; 0xff
    7c1c:	5ceb      	ldrb	r3, [r5, r3]
    7c1e:	061b      	lsls	r3, r3, #24
    7c20:	4313      	orrs	r3, r2
    7c22:	4a13      	ldr	r2, [pc, #76]	; (7c70 <ValidateTxFreqT1+0x94>)
    7c24:	434a      	muls	r2, r1
    7c26:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7c28:	429c      	cmp	r4, r3
    7c2a:	d01b      	beq.n	7c64 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7c2c:	239e      	movs	r3, #158	; 0x9e
    7c2e:	005b      	lsls	r3, r3, #1
    7c30:	5ceb      	ldrb	r3, [r5, r3]
    7c32:	1ac9      	subs	r1, r1, r3
    7c34:	4b0f      	ldr	r3, [pc, #60]	; (7c74 <ValidateTxFreqT1+0x98>)
    7c36:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7c38:	2398      	movs	r3, #152	; 0x98
    7c3a:	005b      	lsls	r3, r3, #1
    7c3c:	5ceb      	ldrb	r3, [r5, r3]
    7c3e:	2232      	movs	r2, #50	; 0x32
    7c40:	32ff      	adds	r2, #255	; 0xff
    7c42:	5caa      	ldrb	r2, [r5, r2]
    7c44:	0212      	lsls	r2, r2, #8
    7c46:	4313      	orrs	r3, r2
    7c48:	2299      	movs	r2, #153	; 0x99
    7c4a:	0052      	lsls	r2, r2, #1
    7c4c:	5caa      	ldrb	r2, [r5, r2]
    7c4e:	0412      	lsls	r2, r2, #16
    7c50:	431a      	orrs	r2, r3
    7c52:	2334      	movs	r3, #52	; 0x34
    7c54:	33ff      	adds	r3, #255	; 0xff
    7c56:	5ceb      	ldrb	r3, [r5, r3]
    7c58:	061b      	lsls	r3, r3, #24
    7c5a:	4313      	orrs	r3, r2
    7c5c:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    7c5e:	429c      	cmp	r4, r3
    7c60:	d000      	beq.n	7c64 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    7c62:	200a      	movs	r0, #10
}
    7c64:	b003      	add	sp, #12
    7c66:	bd30      	pop	{r4, r5, pc}
    7c68:	00013ba5 	.word	0x00013ba5
    7c6c:	20001290 	.word	0x20001290
    7c70:	00030d40 	.word	0x00030d40
    7c74:	00186a00 	.word	0x00186a00

00007c78 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    7c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c7a:	46ce      	mov	lr, r9
    7c7c:	4647      	mov	r7, r8
    7c7e:	b580      	push	{r7, lr}
    7c80:	b083      	sub	sp, #12
    7c82:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7c84:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7c86:	233a      	movs	r3, #58	; 0x3a
    7c88:	33ff      	adds	r3, #255	; 0xff
    7c8a:	4a72      	ldr	r2, [pc, #456]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7c8c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7c8e:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7c90:	42ab      	cmp	r3, r5
    7c92:	d26d      	bcs.n	7d70 <LORAREG_GetAttr_NewTxChConfigT1+0xf8>
}
    7c94:	0020      	movs	r0, r4
    7c96:	b003      	add	sp, #12
    7c98:	bc0c      	pop	{r2, r3}
    7c9a:	4690      	mov	r8, r2
    7c9c:	4699      	mov	r9, r3
    7c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    7ca0:	4b6c      	ldr	r3, [pc, #432]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7ca2:	4699      	mov	r9, r3
    7ca4:	2322      	movs	r3, #34	; 0x22
    7ca6:	464a      	mov	r2, r9
    7ca8:	5cd0      	ldrb	r0, [r2, r3]
    7caa:	466b      	mov	r3, sp
    7cac:	3307      	adds	r3, #7
    7cae:	002a      	movs	r2, r5
    7cb0:	2101      	movs	r1, #1
    7cb2:	4c69      	ldr	r4, [pc, #420]	; (7e58 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7cb4:	47a0      	blx	r4
    7cb6:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    7cb8:	464b      	mov	r3, r9
    7cba:	781b      	ldrb	r3, [r3, #0]
    7cbc:	464a      	mov	r2, r9
    7cbe:	7852      	ldrb	r2, [r2, #1]
    7cc0:	0212      	lsls	r2, r2, #8
    7cc2:	431a      	orrs	r2, r3
    7cc4:	464b      	mov	r3, r9
    7cc6:	789b      	ldrb	r3, [r3, #2]
    7cc8:	041b      	lsls	r3, r3, #16
    7cca:	431a      	orrs	r2, r3
    7ccc:	464b      	mov	r3, r9
    7cce:	78db      	ldrb	r3, [r3, #3]
    7cd0:	061b      	lsls	r3, r3, #24
    7cd2:	4313      	orrs	r3, r2
    7cd4:	00ed      	lsls	r5, r5, #3
    7cd6:	18eb      	adds	r3, r5, r3
    7cd8:	795b      	ldrb	r3, [r3, #5]
    7cda:	72f3      	strb	r3, [r6, #11]
    7cdc:	e081      	b.n	7de2 <LORAREG_GetAttr_NewTxChConfigT1+0x16a>
			    radioConfig->sf = SF_10;				
    7cde:	3308      	adds	r3, #8
    7ce0:	72f3      	strb	r3, [r6, #11]
    7ce2:	e05f      	b.n	7da4 <LORAREG_GetAttr_NewTxChConfigT1+0x12c>
			radioConfig->sf = SF_8;
    7ce4:	2308      	movs	r3, #8
    7ce6:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_500KHZ;
    7ce8:	3301      	adds	r3, #1
    7cea:	72b3      	strb	r3, [r6, #10]
			if( RegParams.band == ISM_NA915)
    7cec:	331d      	adds	r3, #29
    7cee:	4a59      	ldr	r2, [pc, #356]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7cf0:	5cd3      	ldrb	r3, [r2, r3]
			uint8_t dr = DR6;
    7cf2:	2206      	movs	r2, #6
			if( RegParams.band == ISM_NA915)
    7cf4:	2b02      	cmp	r3, #2
    7cf6:	d00a      	beq.n	7d0e <LORAREG_GetAttr_NewTxChConfigT1+0x96>
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_500khzChan, transmissionType,dr, &channelIndex);
    7cf8:	233e      	movs	r3, #62	; 0x3e
    7cfa:	33ff      	adds	r3, #255	; 0xff
    7cfc:	4955      	ldr	r1, [pc, #340]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7cfe:	5cc8      	ldrb	r0, [r1, r3]
    7d00:	466b      	mov	r3, sp
    7d02:	3307      	adds	r3, #7
    7d04:	2100      	movs	r1, #0
    7d06:	4c54      	ldr	r4, [pc, #336]	; (7e58 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7d08:	47a0      	blx	r4
    7d0a:	0004      	movs	r4, r0
    7d0c:	e057      	b.n	7dbe <LORAREG_GetAttr_NewTxChConfigT1+0x146>
				dr = DR4;
    7d0e:	3a02      	subs	r2, #2
    7d10:	e7f2      	b.n	7cf8 <LORAREG_GetAttr_NewTxChConfigT1+0x80>
    			radioConfig->ecrConfig.override = true;
    7d12:	3b01      	subs	r3, #1
    7d14:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    7d16:	71b3      	strb	r3, [r6, #6]
    7d18:	e091      	b.n	7e3e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			radioConfig->bandwidth = BW_500KHZ;
    7d1a:	2109      	movs	r1, #9
    7d1c:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7d1e:	494d      	ldr	r1, [pc, #308]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7d20:	209e      	movs	r0, #158	; 0x9e
    7d22:	0040      	lsls	r0, r0, #1
    7d24:	5c08      	ldrb	r0, [r1, r0]
    7d26:	1a12      	subs	r2, r2, r0
    7d28:	484c      	ldr	r0, [pc, #304]	; (7e5c <LORAREG_GetAttr_NewTxChConfigT1+0x1e4>)
    7d2a:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7d2c:	2098      	movs	r0, #152	; 0x98
    7d2e:	0040      	lsls	r0, r0, #1
    7d30:	5c08      	ldrb	r0, [r1, r0]
    7d32:	2532      	movs	r5, #50	; 0x32
    7d34:	35ff      	adds	r5, #255	; 0xff
    7d36:	5d4d      	ldrb	r5, [r1, r5]
    7d38:	022d      	lsls	r5, r5, #8
    7d3a:	4305      	orrs	r5, r0
    7d3c:	2099      	movs	r0, #153	; 0x99
    7d3e:	0040      	lsls	r0, r0, #1
    7d40:	5c08      	ldrb	r0, [r1, r0]
    7d42:	0400      	lsls	r0, r0, #16
    7d44:	4305      	orrs	r5, r0
    7d46:	2034      	movs	r0, #52	; 0x34
    7d48:	30ff      	adds	r0, #255	; 0xff
    7d4a:	5c08      	ldrb	r0, [r1, r0]
    7d4c:	0600      	lsls	r0, r0, #24
    7d4e:	4328      	orrs	r0, r5
    7d50:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    7d52:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    7d54:	2226      	movs	r2, #38	; 0x26
    7d56:	5c8a      	ldrb	r2, [r1, r2]
    7d58:	2a02      	cmp	r2, #2
    7d5a:	d003      	beq.n	7d64 <LORAREG_GetAttr_NewTxChConfigT1+0xec>
			if (txPower <= 26)
    7d5c:	2b1a      	cmp	r3, #26
    7d5e:	d804      	bhi.n	7d6a <LORAREG_GetAttr_NewTxChConfigT1+0xf2>
				radioConfig->txPower = txPower;
    7d60:	7233      	strb	r3, [r6, #8]
    7d62:	e06c      	b.n	7e3e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			    radioConfig->ecrConfig.override = false;
    7d64:	2200      	movs	r2, #0
    7d66:	71f2      	strb	r2, [r6, #7]
    7d68:	e7f8      	b.n	7d5c <LORAREG_GetAttr_NewTxChConfigT1+0xe4>
				radioConfig->txPower = 26;
    7d6a:	231a      	movs	r3, #26
    7d6c:	7233      	strb	r3, [r6, #8]
    7d6e:	e066      	b.n	7e3e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    7d70:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7d72:	2325      	movs	r3, #37	; 0x25
    7d74:	4a37      	ldr	r2, [pc, #220]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7d76:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    7d78:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7d7a:	429f      	cmp	r7, r3
    7d7c:	dd00      	ble.n	7d80 <LORAREG_GetAttr_NewTxChConfigT1+0x108>
    7d7e:	e789      	b.n	7c94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7d80:	2320      	movs	r3, #32
    7d82:	5cd3      	ldrb	r3, [r2, r3]
    7d84:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    7d86:	780b      	ldrb	r3, [r1, #0]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d189      	bne.n	7ca0 <LORAREG_GetAttr_NewTxChConfigT1+0x28>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 0) //TOFO init in reginit
    7d8c:	2340      	movs	r3, #64	; 0x40
    7d8e:	33ff      	adds	r3, #255	; 0xff
    7d90:	4a30      	ldr	r2, [pc, #192]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7d92:	5cd3      	ldrb	r3, [r2, r3]
    7d94:	2b00      	cmp	r3, #0
    7d96:	d1a5      	bne.n	7ce4 <LORAREG_GetAttr_NewTxChConfigT1+0x6c>
            if( RegParams.band == ISM_NA915)
    7d98:	3326      	adds	r3, #38	; 0x26
    7d9a:	5cd3      	ldrb	r3, [r2, r3]
    7d9c:	2b02      	cmp	r3, #2
    7d9e:	d09e      	beq.n	7cde <LORAREG_GetAttr_NewTxChConfigT1+0x66>
				radioConfig->sf = SF_12;
    7da0:	230c      	movs	r3, #12
    7da2:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_125KHZ;
    7da4:	2307      	movs	r3, #7
    7da6:	72b3      	strb	r3, [r6, #10]
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    7da8:	3336      	adds	r3, #54	; 0x36
    7daa:	33ff      	adds	r3, #255	; 0xff
    7dac:	4a29      	ldr	r2, [pc, #164]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7dae:	5cd0      	ldrb	r0, [r2, r3]
    7db0:	466b      	mov	r3, sp
    7db2:	3307      	adds	r3, #7
    7db4:	2200      	movs	r2, #0
    7db6:	2100      	movs	r1, #0
    7db8:	4c27      	ldr	r4, [pc, #156]	; (7e58 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    7dba:	47a0      	blx	r4
    7dbc:	0004      	movs	r4, r0
		RegParams.cmnParams.paramsType1.alternativeChannel = !RegParams.cmnParams.paramsType1.alternativeChannel;
    7dbe:	4b25      	ldr	r3, [pc, #148]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7dc0:	2140      	movs	r1, #64	; 0x40
    7dc2:	31ff      	adds	r1, #255	; 0xff
    7dc4:	5c5a      	ldrb	r2, [r3, r1]
    7dc6:	4250      	negs	r0, r2
    7dc8:	4142      	adcs	r2, r0
    7dca:	545a      	strb	r2, [r3, r1]
		PDS_STORE(RegParams.regParamItems.alt_ch_item_id);
    7dcc:	22f6      	movs	r2, #246	; 0xf6
    7dce:	32ff      	adds	r2, #255	; 0xff
    7dd0:	5c9a      	ldrb	r2, [r3, r2]
    7dd2:	31b7      	adds	r1, #183	; 0xb7
    7dd4:	5c58      	ldrb	r0, [r3, r1]
    7dd6:	0200      	lsls	r0, r0, #8
    7dd8:	4310      	orrs	r0, r2
    7dda:	b2c1      	uxtb	r1, r0
    7ddc:	0a00      	lsrs	r0, r0, #8
    7dde:	4b20      	ldr	r3, [pc, #128]	; (7e60 <LORAREG_GetAttr_NewTxChConfigT1+0x1e8>)
    7de0:	4798      	blx	r3
	if (result == LORAWAN_SUCCESS)
    7de2:	2c08      	cmp	r4, #8
    7de4:	d000      	beq.n	7de8 <LORAREG_GetAttr_NewTxChConfigT1+0x170>
    7de6:	e755      	b.n	7c94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    7de8:	007f      	lsls	r7, r7, #1
    7dea:	4643      	mov	r3, r8
    7dec:	1bdb      	subs	r3, r3, r7
    7dee:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    7df0:	466a      	mov	r2, sp
    7df2:	3207      	adds	r2, #7
    7df4:	7812      	ldrb	r2, [r2, #0]
    7df6:	219e      	movs	r1, #158	; 0x9e
    7df8:	0049      	lsls	r1, r1, #1
    7dfa:	4816      	ldr	r0, [pc, #88]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7dfc:	5c41      	ldrb	r1, [r0, r1]
    7dfe:	4291      	cmp	r1, r2
    7e00:	d98b      	bls.n	7d1a <LORAREG_GetAttr_NewTxChConfigT1+0xa2>
			radioConfig->bandwidth = BW_125KHZ;
    7e02:	2107      	movs	r1, #7
    7e04:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7e06:	3126      	adds	r1, #38	; 0x26
    7e08:	31ff      	adds	r1, #255	; 0xff
    7e0a:	5c41      	ldrb	r1, [r0, r1]
    7e0c:	252e      	movs	r5, #46	; 0x2e
    7e0e:	35ff      	adds	r5, #255	; 0xff
    7e10:	5d45      	ldrb	r5, [r0, r5]
    7e12:	022d      	lsls	r5, r5, #8
    7e14:	430d      	orrs	r5, r1
    7e16:	2197      	movs	r1, #151	; 0x97
    7e18:	0049      	lsls	r1, r1, #1
    7e1a:	5c41      	ldrb	r1, [r0, r1]
    7e1c:	0409      	lsls	r1, r1, #16
    7e1e:	430d      	orrs	r5, r1
    7e20:	2130      	movs	r1, #48	; 0x30
    7e22:	31ff      	adds	r1, #255	; 0xff
    7e24:	5c41      	ldrb	r1, [r0, r1]
    7e26:	0609      	lsls	r1, r1, #24
    7e28:	4329      	orrs	r1, r5
    7e2a:	4d0e      	ldr	r5, [pc, #56]	; (7e64 <LORAREG_GetAttr_NewTxChConfigT1+0x1ec>)
    7e2c:	436a      	muls	r2, r5
    7e2e:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    7e30:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    7e32:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    7e34:	2326      	movs	r3, #38	; 0x26
    7e36:	5cc3      	ldrb	r3, [r0, r3]
    7e38:	2b02      	cmp	r3, #2
    7e3a:	d100      	bne.n	7e3e <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
    7e3c:	e769      	b.n	7d12 <LORAREG_GetAttr_NewTxChConfigT1+0x9a>
		radioConfig->freq_hop_period = DISABLED;
    7e3e:	2300      	movs	r3, #0
    7e40:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    7e42:	3301      	adds	r3, #1
    7e44:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    7e46:	466b      	mov	r3, sp
    7e48:	79d9      	ldrb	r1, [r3, #7]
    7e4a:	2327      	movs	r3, #39	; 0x27
    7e4c:	4a01      	ldr	r2, [pc, #4]	; (7e54 <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    7e4e:	54d1      	strb	r1, [r2, r3]
    7e50:	e720      	b.n	7c94 <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	20001290 	.word	0x20001290
    7e58:	00005991 	.word	0x00005991
    7e5c:	00186a00 	.word	0x00186a00
    7e60:	00008e5d 	.word	0x00008e5d
    7e64:	00030d40 	.word	0x00030d40

00007e68 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    7e68:	4b2a      	ldr	r3, [pc, #168]	; (7f14 <LORAREG_InitGetAttrFnPtrsNA+0xac>)
    7e6a:	4a2b      	ldr	r2, [pc, #172]	; (7f18 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    7e6c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    7e6e:	4a2b      	ldr	r2, [pc, #172]	; (7f1c <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    7e70:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    7e72:	4a2b      	ldr	r2, [pc, #172]	; (7f20 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    7e74:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    7e76:	4a2b      	ldr	r2, [pc, #172]	; (7f24 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    7e78:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7e7a:	4a2b      	ldr	r2, [pc, #172]	; (7f28 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    7e7c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7e7e:	4a2b      	ldr	r2, [pc, #172]	; (7f2c <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    7e80:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7e82:	4a2b      	ldr	r2, [pc, #172]	; (7f30 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    7e84:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7e86:	4a2b      	ldr	r2, [pc, #172]	; (7f34 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    7e88:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7e8a:	4a2b      	ldr	r2, [pc, #172]	; (7f38 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    7e8c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7e8e:	4a2b      	ldr	r2, [pc, #172]	; (7f3c <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    7e90:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7e92:	4a2b      	ldr	r2, [pc, #172]	; (7f40 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    7e94:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    7e96:	4a2b      	ldr	r2, [pc, #172]	; (7f44 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    7e98:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7e9a:	4a2b      	ldr	r2, [pc, #172]	; (7f48 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    7e9c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7e9e:	4a2b      	ldr	r2, [pc, #172]	; (7f4c <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    7ea0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    7ea2:	4a2b      	ldr	r2, [pc, #172]	; (7f50 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    7ea4:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    7ea6:	4a2b      	ldr	r2, [pc, #172]	; (7f54 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    7ea8:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    7eaa:	492b      	ldr	r1, [pc, #172]	; (7f58 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    7eac:	2284      	movs	r2, #132	; 0x84
    7eae:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    7eb0:	492a      	ldr	r1, [pc, #168]	; (7f5c <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    7eb2:	3204      	adds	r2, #4
    7eb4:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    7eb6:	492a      	ldr	r1, [pc, #168]	; (7f60 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    7eb8:	3204      	adds	r2, #4
    7eba:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    7ebc:	4929      	ldr	r1, [pc, #164]	; (7f64 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    7ebe:	3204      	adds	r2, #4
    7ec0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7ec2:	4929      	ldr	r1, [pc, #164]	; (7f68 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    7ec4:	3204      	adds	r2, #4
    7ec6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7ec8:	4928      	ldr	r1, [pc, #160]	; (7f6c <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    7eca:	3204      	adds	r2, #4
    7ecc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    7ece:	4928      	ldr	r1, [pc, #160]	; (7f70 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    7ed0:	3204      	adds	r2, #4
    7ed2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    7ed4:	4927      	ldr	r1, [pc, #156]	; (7f74 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    7ed6:	3204      	adds	r2, #4
    7ed8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    7eda:	4927      	ldr	r1, [pc, #156]	; (7f78 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    7edc:	3204      	adds	r2, #4
    7ede:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    7ee0:	4926      	ldr	r1, [pc, #152]	; (7f7c <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    7ee2:	3204      	adds	r2, #4
    7ee4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    7ee6:	4926      	ldr	r1, [pc, #152]	; (7f80 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    7ee8:	3204      	adds	r2, #4
    7eea:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    7eec:	4925      	ldr	r1, [pc, #148]	; (7f84 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    7eee:	3204      	adds	r2, #4
    7ef0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    7ef2:	4925      	ldr	r1, [pc, #148]	; (7f88 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    7ef4:	3204      	adds	r2, #4
    7ef6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    7ef8:	4924      	ldr	r1, [pc, #144]	; (7f8c <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    7efa:	3204      	adds	r2, #4
    7efc:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    7efe:	4924      	ldr	r1, [pc, #144]	; (7f90 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    7f00:	3204      	adds	r2, #4
    7f02:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    7f04:	4923      	ldr	r1, [pc, #140]	; (7f94 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    7f06:	3214      	adds	r2, #20
    7f08:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    7f0a:	4923      	ldr	r1, [pc, #140]	; (7f98 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    7f0c:	3204      	adds	r2, #4
    7f0e:	5099      	str	r1, [r3, r2]
}
    7f10:	4770      	bx	lr
    7f12:	46c0      	nop			; (mov r8, r8)
    7f14:	20000b28 	.word	0x20000b28
    7f18:	00005479 	.word	0x00005479
    7f1c:	00007a11 	.word	0x00007a11
    7f20:	00007a61 	.word	0x00007a61
    7f24:	00007aad 	.word	0x00007aad
    7f28:	000052c5 	.word	0x000052c5
    7f2c:	000052d5 	.word	0x000052d5
    7f30:	000052ed 	.word	0x000052ed
    7f34:	000052fd 	.word	0x000052fd
    7f38:	000061e9 	.word	0x000061e9
    7f3c:	0000530d 	.word	0x0000530d
    7f40:	0000531d 	.word	0x0000531d
    7f44:	000060bd 	.word	0x000060bd
    7f48:	00005625 	.word	0x00005625
    7f4c:	0000536d 	.word	0x0000536d
    7f50:	0000600d 	.word	0x0000600d
    7f54:	000053b9 	.word	0x000053b9
    7f58:	00007af9 	.word	0x00007af9
    7f5c:	00007b45 	.word	0x00007b45
    7f60:	00007b91 	.word	0x00007b91
    7f64:	000053c3 	.word	0x000053c3
    7f68:	000053cd 	.word	0x000053cd
    7f6c:	000053d7 	.word	0x000053d7
    7f70:	000053e1 	.word	0x000053e1
    7f74:	000053ed 	.word	0x000053ed
    7f78:	000053f9 	.word	0x000053f9
    7f7c:	00005403 	.word	0x00005403
    7f80:	0000540b 	.word	0x0000540b
    7f84:	00005413 	.word	0x00005413
    7f88:	00007c79 	.word	0x00007c79
    7f8c:	00005a71 	.word	0x00005a71
    7f90:	0000543d 	.word	0x0000543d
    7f94:	0000541d 	.word	0x0000541d
    7f98:	0000542d 	.word	0x0000542d

00007f9c <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    7f9c:	4b2b      	ldr	r3, [pc, #172]	; (804c <LORAREG_InitGetAttrFnPtrsEU+0xb0>)
    7f9e:	4a2c      	ldr	r2, [pc, #176]	; (8050 <LORAREG_InitGetAttrFnPtrsEU+0xb4>)
    7fa0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    7fa2:	4a2c      	ldr	r2, [pc, #176]	; (8054 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    7fa4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    7fa6:	4a2c      	ldr	r2, [pc, #176]	; (8058 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    7fa8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    7faa:	4a2c      	ldr	r2, [pc, #176]	; (805c <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    7fac:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    7fae:	4a2c      	ldr	r2, [pc, #176]	; (8060 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    7fb0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    7fb2:	4a2c      	ldr	r2, [pc, #176]	; (8064 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    7fb4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    7fb6:	4a2c      	ldr	r2, [pc, #176]	; (8068 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    7fb8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    7fba:	4a2c      	ldr	r2, [pc, #176]	; (806c <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    7fbc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    7fbe:	4a2c      	ldr	r2, [pc, #176]	; (8070 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    7fc0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    7fc2:	4a2c      	ldr	r2, [pc, #176]	; (8074 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    7fc4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    7fc6:	4a2c      	ldr	r2, [pc, #176]	; (8078 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    7fc8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    7fca:	4a2c      	ldr	r2, [pc, #176]	; (807c <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    7fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    7fce:	4a2c      	ldr	r2, [pc, #176]	; (8080 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    7fd0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    7fd2:	4a2c      	ldr	r2, [pc, #176]	; (8084 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    7fd4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    7fd6:	4a2c      	ldr	r2, [pc, #176]	; (8088 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    7fd8:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    7fda:	4a2c      	ldr	r2, [pc, #176]	; (808c <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    7fdc:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    7fde:	492c      	ldr	r1, [pc, #176]	; (8090 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    7fe0:	2284      	movs	r2, #132	; 0x84
    7fe2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    7fe4:	492b      	ldr	r1, [pc, #172]	; (8094 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    7fe6:	3204      	adds	r2, #4
    7fe8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    7fea:	492b      	ldr	r1, [pc, #172]	; (8098 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    7fec:	3204      	adds	r2, #4
    7fee:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    7ff0:	492a      	ldr	r1, [pc, #168]	; (809c <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    7ff2:	3204      	adds	r2, #4
    7ff4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    7ff6:	492a      	ldr	r1, [pc, #168]	; (80a0 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    7ff8:	3204      	adds	r2, #4
    7ffa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    7ffc:	4929      	ldr	r1, [pc, #164]	; (80a4 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    7ffe:	3204      	adds	r2, #4
    8000:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8002:	4929      	ldr	r1, [pc, #164]	; (80a8 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    8004:	3204      	adds	r2, #4
    8006:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8008:	4928      	ldr	r1, [pc, #160]	; (80ac <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    800a:	3204      	adds	r2, #4
    800c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    800e:	4928      	ldr	r1, [pc, #160]	; (80b0 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    8010:	3204      	adds	r2, #4
    8012:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8014:	4927      	ldr	r1, [pc, #156]	; (80b4 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    8016:	3204      	adds	r2, #4
    8018:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    801a:	4927      	ldr	r1, [pc, #156]	; (80b8 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    801c:	3204      	adds	r2, #4
    801e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8020:	4926      	ldr	r1, [pc, #152]	; (80bc <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    8022:	3204      	adds	r2, #4
    8024:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8026:	4926      	ldr	r1, [pc, #152]	; (80c0 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    8028:	3204      	adds	r2, #4
    802a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    802c:	4925      	ldr	r1, [pc, #148]	; (80c4 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    802e:	3204      	adds	r2, #4
    8030:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8032:	4925      	ldr	r1, [pc, #148]	; (80c8 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    8034:	3204      	adds	r2, #4
    8036:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    8038:	4924      	ldr	r1, [pc, #144]	; (80cc <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    803a:	320c      	adds	r2, #12
    803c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    803e:	4924      	ldr	r1, [pc, #144]	; (80d0 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    8040:	3208      	adds	r2, #8
    8042:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8044:	4923      	ldr	r1, [pc, #140]	; (80d4 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    8046:	3204      	adds	r2, #4
    8048:	5099      	str	r1, [r3, r2]
}
    804a:	4770      	bx	lr
    804c:	20000b28 	.word	0x20000b28
    8050:	000063b1 	.word	0x000063b1
    8054:	000076cd 	.word	0x000076cd
    8058:	00007709 	.word	0x00007709
    805c:	00007741 	.word	0x00007741
    8060:	000052c5 	.word	0x000052c5
    8064:	000052d5 	.word	0x000052d5
    8068:	000052ed 	.word	0x000052ed
    806c:	000052fd 	.word	0x000052fd
    8070:	000061e9 	.word	0x000061e9
    8074:	0000530d 	.word	0x0000530d
    8078:	0000531d 	.word	0x0000531d
    807c:	000062b5 	.word	0x000062b5
    8080:	00005625 	.word	0x00005625
    8084:	0000536d 	.word	0x0000536d
    8088:	00006249 	.word	0x00006249
    808c:	000055dd 	.word	0x000055dd
    8090:	00007779 	.word	0x00007779
    8094:	000077b1 	.word	0x000077b1
    8098:	000077e9 	.word	0x000077e9
    809c:	00006b75 	.word	0x00006b75
    80a0:	000053cd 	.word	0x000053cd
    80a4:	000053d7 	.word	0x000053d7
    80a8:	000053e1 	.word	0x000053e1
    80ac:	000053ed 	.word	0x000053ed
    80b0:	000053f9 	.word	0x000053f9
    80b4:	00005403 	.word	0x00005403
    80b8:	0000540b 	.word	0x0000540b
    80bc:	00005413 	.word	0x00005413
    80c0:	00007849 	.word	0x00007849
    80c4:	00005c25 	.word	0x00005c25
    80c8:	0000543d 	.word	0x0000543d
    80cc:	00006201 	.word	0x00006201
    80d0:	0000541d 	.word	0x0000541d
    80d4:	0000542d 	.word	0x0000542d

000080d8 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    80d8:	4b2b      	ldr	r3, [pc, #172]	; (8188 <LORAREG_InitGetAttrFnPtrsAS+0xb0>)
    80da:	4a2c      	ldr	r2, [pc, #176]	; (818c <LORAREG_InitGetAttrFnPtrsAS+0xb4>)
    80dc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    80de:	4a2c      	ldr	r2, [pc, #176]	; (8190 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    80e0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    80e2:	4a2c      	ldr	r2, [pc, #176]	; (8194 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    80e4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    80e6:	4a2c      	ldr	r2, [pc, #176]	; (8198 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    80e8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    80ea:	4a2c      	ldr	r2, [pc, #176]	; (819c <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    80ec:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    80ee:	4a2c      	ldr	r2, [pc, #176]	; (81a0 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    80f0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    80f2:	4a2c      	ldr	r2, [pc, #176]	; (81a4 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    80f4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    80f6:	4a2c      	ldr	r2, [pc, #176]	; (81a8 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    80f8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    80fa:	4a2c      	ldr	r2, [pc, #176]	; (81ac <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    80fc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    80fe:	4a2c      	ldr	r2, [pc, #176]	; (81b0 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    8100:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    8102:	4a2c      	ldr	r2, [pc, #176]	; (81b4 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    8104:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8106:	4a2c      	ldr	r2, [pc, #176]	; (81b8 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    8108:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    810a:	4a2c      	ldr	r2, [pc, #176]	; (81bc <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    810c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    810e:	4a2c      	ldr	r2, [pc, #176]	; (81c0 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    8110:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    8112:	4a2c      	ldr	r2, [pc, #176]	; (81c4 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    8114:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8116:	492c      	ldr	r1, [pc, #176]	; (81c8 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    8118:	2284      	movs	r2, #132	; 0x84
    811a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    811c:	492b      	ldr	r1, [pc, #172]	; (81cc <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    811e:	3204      	adds	r2, #4
    8120:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    8122:	492b      	ldr	r1, [pc, #172]	; (81d0 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    8124:	3204      	adds	r2, #4
    8126:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8128:	492a      	ldr	r1, [pc, #168]	; (81d4 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    812a:	3208      	adds	r2, #8
    812c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    812e:	492a      	ldr	r1, [pc, #168]	; (81d8 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    8130:	3204      	adds	r2, #4
    8132:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8134:	4929      	ldr	r1, [pc, #164]	; (81dc <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    8136:	3204      	adds	r2, #4
    8138:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    813a:	4929      	ldr	r1, [pc, #164]	; (81e0 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    813c:	3204      	adds	r2, #4
    813e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8140:	4928      	ldr	r1, [pc, #160]	; (81e4 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    8142:	3204      	adds	r2, #4
    8144:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    8146:	4928      	ldr	r1, [pc, #160]	; (81e8 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    8148:	3204      	adds	r2, #4
    814a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    814c:	4927      	ldr	r1, [pc, #156]	; (81ec <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    814e:	3204      	adds	r2, #4
    8150:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8152:	4927      	ldr	r1, [pc, #156]	; (81f0 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    8154:	3204      	adds	r2, #4
    8156:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8158:	4926      	ldr	r1, [pc, #152]	; (81f4 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    815a:	3204      	adds	r2, #4
    815c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    815e:	4926      	ldr	r1, [pc, #152]	; (81f8 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    8160:	3204      	adds	r2, #4
    8162:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    8164:	4925      	ldr	r1, [pc, #148]	; (81fc <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    8166:	3204      	adds	r2, #4
    8168:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    816a:	4925      	ldr	r1, [pc, #148]	; (8200 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    816c:	320c      	adds	r2, #12
    816e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8170:	4924      	ldr	r1, [pc, #144]	; (8204 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    8172:	3208      	adds	r2, #8
    8174:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    8176:	4924      	ldr	r1, [pc, #144]	; (8208 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    8178:	3204      	adds	r2, #4
    817a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    817c:	4a23      	ldr	r2, [pc, #140]	; (820c <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    817e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    8180:	4923      	ldr	r1, [pc, #140]	; (8210 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    8182:	2290      	movs	r2, #144	; 0x90
    8184:	5099      	str	r1, [r3, r2]
}
    8186:	4770      	bx	lr
    8188:	20000b28 	.word	0x20000b28
    818c:	000064ed 	.word	0x000064ed
    8190:	000076cd 	.word	0x000076cd
    8194:	00007709 	.word	0x00007709
    8198:	00007669 	.word	0x00007669
    819c:	000052c5 	.word	0x000052c5
    81a0:	000052d5 	.word	0x000052d5
    81a4:	000052ed 	.word	0x000052ed
    81a8:	000052fd 	.word	0x000052fd
    81ac:	000061e9 	.word	0x000061e9
    81b0:	0000530d 	.word	0x0000530d
    81b4:	0000531d 	.word	0x0000531d
    81b8:	000062b5 	.word	0x000062b5
    81bc:	00005625 	.word	0x00005625
    81c0:	0000536d 	.word	0x0000536d
    81c4:	000063f9 	.word	0x000063f9
    81c8:	00007779 	.word	0x00007779
    81cc:	000077b1 	.word	0x000077b1
    81d0:	000077e9 	.word	0x000077e9
    81d4:	000053cd 	.word	0x000053cd
    81d8:	000053d7 	.word	0x000053d7
    81dc:	000053e1 	.word	0x000053e1
    81e0:	000053ed 	.word	0x000053ed
    81e4:	000053f9 	.word	0x000053f9
    81e8:	00005403 	.word	0x00005403
    81ec:	0000540b 	.word	0x0000540b
    81f0:	00005413 	.word	0x00005413
    81f4:	00007849 	.word	0x00007849
    81f8:	00005c25 	.word	0x00005c25
    81fc:	0000543d 	.word	0x0000543d
    8200:	00006201 	.word	0x00006201
    8204:	0000541d 	.word	0x0000541d
    8208:	0000542d 	.word	0x0000542d
    820c:	000055dd 	.word	0x000055dd
    8210:	00006b75 	.word	0x00006b75

00008214 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    8214:	4b29      	ldr	r3, [pc, #164]	; (82bc <LORAREG_InitGetAttrFnPtrsAU+0xa8>)
    8216:	4a2a      	ldr	r2, [pc, #168]	; (82c0 <LORAREG_InitGetAttrFnPtrsAU+0xac>)
    8218:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    821a:	4a2a      	ldr	r2, [pc, #168]	; (82c4 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    821c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    821e:	4a2a      	ldr	r2, [pc, #168]	; (82c8 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    8220:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    8222:	4a2a      	ldr	r2, [pc, #168]	; (82cc <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    8224:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8226:	4a2a      	ldr	r2, [pc, #168]	; (82d0 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    8228:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    822a:	4a2a      	ldr	r2, [pc, #168]	; (82d4 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    822c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    822e:	4a2a      	ldr	r2, [pc, #168]	; (82d8 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    8230:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8232:	4a2a      	ldr	r2, [pc, #168]	; (82dc <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    8234:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8236:	4a2a      	ldr	r2, [pc, #168]	; (82e0 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    8238:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    823a:	4a2a      	ldr	r2, [pc, #168]	; (82e4 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    823c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    823e:	4a2a      	ldr	r2, [pc, #168]	; (82e8 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    8240:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    8242:	4a2a      	ldr	r2, [pc, #168]	; (82ec <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    8244:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8246:	4a2a      	ldr	r2, [pc, #168]	; (82f0 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    8248:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    824a:	4a2a      	ldr	r2, [pc, #168]	; (82f4 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    824c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    824e:	4a2a      	ldr	r2, [pc, #168]	; (82f8 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    8250:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    8252:	4a2a      	ldr	r2, [pc, #168]	; (82fc <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    8254:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    8256:	4a2a      	ldr	r2, [pc, #168]	; (8300 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    8258:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    825a:	492a      	ldr	r1, [pc, #168]	; (8304 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    825c:	2284      	movs	r2, #132	; 0x84
    825e:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    8260:	4929      	ldr	r1, [pc, #164]	; (8308 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    8262:	3204      	adds	r2, #4
    8264:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    8266:	4929      	ldr	r1, [pc, #164]	; (830c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    8268:	3204      	adds	r2, #4
    826a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    826c:	4928      	ldr	r1, [pc, #160]	; (8310 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    826e:	3208      	adds	r2, #8
    8270:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8272:	4928      	ldr	r1, [pc, #160]	; (8314 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    8274:	3204      	adds	r2, #4
    8276:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    8278:	4927      	ldr	r1, [pc, #156]	; (8318 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    827a:	3204      	adds	r2, #4
    827c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    827e:	4927      	ldr	r1, [pc, #156]	; (831c <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    8280:	3204      	adds	r2, #4
    8282:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8284:	4926      	ldr	r1, [pc, #152]	; (8320 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    8286:	3204      	adds	r2, #4
    8288:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    828a:	4926      	ldr	r1, [pc, #152]	; (8324 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    828c:	3204      	adds	r2, #4
    828e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8290:	4925      	ldr	r1, [pc, #148]	; (8328 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    8292:	3204      	adds	r2, #4
    8294:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    8296:	4925      	ldr	r1, [pc, #148]	; (832c <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    8298:	3204      	adds	r2, #4
    829a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    829c:	4924      	ldr	r1, [pc, #144]	; (8330 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    829e:	3204      	adds	r2, #4
    82a0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    82a2:	4924      	ldr	r1, [pc, #144]	; (8334 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    82a4:	3204      	adds	r2, #4
    82a6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    82a8:	4923      	ldr	r1, [pc, #140]	; (8338 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    82aa:	3204      	adds	r2, #4
    82ac:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    82ae:	4923      	ldr	r1, [pc, #140]	; (833c <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    82b0:	3214      	adds	r2, #20
    82b2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    82b4:	4922      	ldr	r1, [pc, #136]	; (8340 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    82b6:	3204      	adds	r2, #4
    82b8:	5099      	str	r1, [r3, r2]
}
    82ba:	4770      	bx	lr
    82bc:	20000b28 	.word	0x20000b28
    82c0:	00005479 	.word	0x00005479
    82c4:	00007a11 	.word	0x00007a11
    82c8:	00007a61 	.word	0x00007a61
    82cc:	00007aad 	.word	0x00007aad
    82d0:	000052c5 	.word	0x000052c5
    82d4:	000052d5 	.word	0x000052d5
    82d8:	000052ed 	.word	0x000052ed
    82dc:	000052fd 	.word	0x000052fd
    82e0:	000061e9 	.word	0x000061e9
    82e4:	0000530d 	.word	0x0000530d
    82e8:	0000531d 	.word	0x0000531d
    82ec:	000060bd 	.word	0x000060bd
    82f0:	00005625 	.word	0x00005625
    82f4:	0000536d 	.word	0x0000536d
    82f8:	0000600d 	.word	0x0000600d
    82fc:	000053b9 	.word	0x000053b9
    8300:	000053c3 	.word	0x000053c3
    8304:	00007af9 	.word	0x00007af9
    8308:	00007b45 	.word	0x00007b45
    830c:	00007b91 	.word	0x00007b91
    8310:	000053cd 	.word	0x000053cd
    8314:	000053d7 	.word	0x000053d7
    8318:	000053e1 	.word	0x000053e1
    831c:	000053ed 	.word	0x000053ed
    8320:	000053f9 	.word	0x000053f9
    8324:	00005403 	.word	0x00005403
    8328:	0000540b 	.word	0x0000540b
    832c:	00005413 	.word	0x00005413
    8330:	00007c79 	.word	0x00007c79
    8334:	00005a71 	.word	0x00005a71
    8338:	0000543d 	.word	0x0000543d
    833c:	0000541d 	.word	0x0000541d
    8340:	0000542d 	.word	0x0000542d

00008344 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    8344:	4b29      	ldr	r3, [pc, #164]	; (83ec <LORAREG_InitGetAttrFnPtrsIN+0xa8>)
    8346:	4a2a      	ldr	r2, [pc, #168]	; (83f0 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    8348:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    834a:	4a2a      	ldr	r2, [pc, #168]	; (83f4 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    834c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    834e:	4a2a      	ldr	r2, [pc, #168]	; (83f8 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    8350:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    8352:	4a2a      	ldr	r2, [pc, #168]	; (83fc <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    8354:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8356:	4a2a      	ldr	r2, [pc, #168]	; (8400 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    8358:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    835a:	4a2a      	ldr	r2, [pc, #168]	; (8404 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    835c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    835e:	4a2a      	ldr	r2, [pc, #168]	; (8408 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    8360:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    8362:	4a2a      	ldr	r2, [pc, #168]	; (840c <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    8364:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8366:	4a2a      	ldr	r2, [pc, #168]	; (8410 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    8368:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    836a:	4a2a      	ldr	r2, [pc, #168]	; (8414 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    836c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    836e:	4a2a      	ldr	r2, [pc, #168]	; (8418 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    8370:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    8372:	4a2a      	ldr	r2, [pc, #168]	; (841c <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    8374:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    8376:	4a2a      	ldr	r2, [pc, #168]	; (8420 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    8378:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    837a:	4a2a      	ldr	r2, [pc, #168]	; (8424 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    837c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    837e:	4a2a      	ldr	r2, [pc, #168]	; (8428 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    8380:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    8382:	492a      	ldr	r1, [pc, #168]	; (842c <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    8384:	2284      	movs	r2, #132	; 0x84
    8386:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    8388:	4929      	ldr	r1, [pc, #164]	; (8430 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    838a:	3204      	adds	r2, #4
    838c:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    838e:	4929      	ldr	r1, [pc, #164]	; (8434 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    8390:	3204      	adds	r2, #4
    8392:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8394:	4928      	ldr	r1, [pc, #160]	; (8438 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    8396:	3208      	adds	r2, #8
    8398:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    839a:	4928      	ldr	r1, [pc, #160]	; (843c <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    839c:	3204      	adds	r2, #4
    839e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    83a0:	4927      	ldr	r1, [pc, #156]	; (8440 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    83a2:	3204      	adds	r2, #4
    83a4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    83a6:	4927      	ldr	r1, [pc, #156]	; (8444 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    83a8:	3204      	adds	r2, #4
    83aa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    83ac:	4926      	ldr	r1, [pc, #152]	; (8448 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    83ae:	3204      	adds	r2, #4
    83b0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    83b2:	4926      	ldr	r1, [pc, #152]	; (844c <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    83b4:	3204      	adds	r2, #4
    83b6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    83b8:	4925      	ldr	r1, [pc, #148]	; (8450 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    83ba:	3204      	adds	r2, #4
    83bc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    83be:	4925      	ldr	r1, [pc, #148]	; (8454 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    83c0:	3204      	adds	r2, #4
    83c2:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    83c4:	4924      	ldr	r1, [pc, #144]	; (8458 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    83c6:	3204      	adds	r2, #4
    83c8:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    83ca:	4924      	ldr	r1, [pc, #144]	; (845c <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    83cc:	3204      	adds	r2, #4
    83ce:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    83d0:	4923      	ldr	r1, [pc, #140]	; (8460 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    83d2:	3204      	adds	r2, #4
    83d4:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    83d6:	4923      	ldr	r1, [pc, #140]	; (8464 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    83d8:	320c      	adds	r2, #12
    83da:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    83dc:	4922      	ldr	r1, [pc, #136]	; (8468 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    83de:	3208      	adds	r2, #8
    83e0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    83e2:	4922      	ldr	r1, [pc, #136]	; (846c <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    83e4:	3204      	adds	r2, #4
    83e6:	5099      	str	r1, [r3, r2]
}
    83e8:	4770      	bx	lr
    83ea:	46c0      	nop			; (mov r8, r8)
    83ec:	20000b28 	.word	0x20000b28
    83f0:	000063b1 	.word	0x000063b1
    83f4:	000076cd 	.word	0x000076cd
    83f8:	00007709 	.word	0x00007709
    83fc:	00007741 	.word	0x00007741
    8400:	000052c5 	.word	0x000052c5
    8404:	000052d5 	.word	0x000052d5
    8408:	000052ed 	.word	0x000052ed
    840c:	000052fd 	.word	0x000052fd
    8410:	000061e9 	.word	0x000061e9
    8414:	0000530d 	.word	0x0000530d
    8418:	0000531d 	.word	0x0000531d
    841c:	000062b5 	.word	0x000062b5
    8420:	00005625 	.word	0x00005625
    8424:	0000536d 	.word	0x0000536d
    8428:	00006535 	.word	0x00006535
    842c:	00007779 	.word	0x00007779
    8430:	000077b1 	.word	0x000077b1
    8434:	000077e9 	.word	0x000077e9
    8438:	000053cd 	.word	0x000053cd
    843c:	000053d7 	.word	0x000053d7
    8440:	000053e1 	.word	0x000053e1
    8444:	000053ed 	.word	0x000053ed
    8448:	000053f9 	.word	0x000053f9
    844c:	00005403 	.word	0x00005403
    8450:	0000540b 	.word	0x0000540b
    8454:	00005413 	.word	0x00005413
    8458:	00007849 	.word	0x00007849
    845c:	00005c25 	.word	0x00005c25
    8460:	0000543d 	.word	0x0000543d
    8464:	00006201 	.word	0x00006201
    8468:	0000541d 	.word	0x0000541d
    846c:	0000542d 	.word	0x0000542d

00008470 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    8470:	4b2c      	ldr	r3, [pc, #176]	; (8524 <LORAREG_InitGetAttrFnPtrsJP+0xb4>)
    8472:	4a2d      	ldr	r2, [pc, #180]	; (8528 <LORAREG_InitGetAttrFnPtrsJP+0xb8>)
    8474:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    8476:	4a2d      	ldr	r2, [pc, #180]	; (852c <LORAREG_InitGetAttrFnPtrsJP+0xbc>)
    8478:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    847a:	4a2d      	ldr	r2, [pc, #180]	; (8530 <LORAREG_InitGetAttrFnPtrsJP+0xc0>)
    847c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    847e:	4a2d      	ldr	r2, [pc, #180]	; (8534 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    8480:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    8482:	4a2d      	ldr	r2, [pc, #180]	; (8538 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    8484:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    8486:	4a2d      	ldr	r2, [pc, #180]	; (853c <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    8488:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    848a:	4a2d      	ldr	r2, [pc, #180]	; (8540 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    848c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    848e:	4a2d      	ldr	r2, [pc, #180]	; (8544 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    8490:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    8492:	4a2d      	ldr	r2, [pc, #180]	; (8548 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    8494:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    8496:	4a2d      	ldr	r2, [pc, #180]	; (854c <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    8498:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    849a:	4a2d      	ldr	r2, [pc, #180]	; (8550 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    849c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    849e:	4a2d      	ldr	r2, [pc, #180]	; (8554 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    84a0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    84a2:	4a2d      	ldr	r2, [pc, #180]	; (8558 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    84a4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    84a6:	4a2d      	ldr	r2, [pc, #180]	; (855c <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    84a8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    84aa:	4a2d      	ldr	r2, [pc, #180]	; (8560 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    84ac:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    84ae:	492d      	ldr	r1, [pc, #180]	; (8564 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    84b0:	2284      	movs	r2, #132	; 0x84
    84b2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    84b4:	492c      	ldr	r1, [pc, #176]	; (8568 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    84b6:	3204      	adds	r2, #4
    84b8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    84ba:	492c      	ldr	r1, [pc, #176]	; (856c <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    84bc:	3204      	adds	r2, #4
    84be:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    84c0:	492b      	ldr	r1, [pc, #172]	; (8570 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    84c2:	3208      	adds	r2, #8
    84c4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    84c6:	492b      	ldr	r1, [pc, #172]	; (8574 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    84c8:	3204      	adds	r2, #4
    84ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    84cc:	492a      	ldr	r1, [pc, #168]	; (8578 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    84ce:	3204      	adds	r2, #4
    84d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    84d2:	492a      	ldr	r1, [pc, #168]	; (857c <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    84d4:	3204      	adds	r2, #4
    84d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    84d8:	4929      	ldr	r1, [pc, #164]	; (8580 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    84da:	3204      	adds	r2, #4
    84dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    84de:	4929      	ldr	r1, [pc, #164]	; (8584 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    84e0:	3204      	adds	r2, #4
    84e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    84e4:	4928      	ldr	r1, [pc, #160]	; (8588 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    84e6:	3204      	adds	r2, #4
    84e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    84ea:	4928      	ldr	r1, [pc, #160]	; (858c <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    84ec:	3204      	adds	r2, #4
    84ee:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    84f0:	4927      	ldr	r1, [pc, #156]	; (8590 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    84f2:	3204      	adds	r2, #4
    84f4:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    84f6:	4927      	ldr	r1, [pc, #156]	; (8594 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    84f8:	3204      	adds	r2, #4
    84fa:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    84fc:	4926      	ldr	r1, [pc, #152]	; (8598 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    84fe:	3204      	adds	r2, #4
    8500:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8502:	4926      	ldr	r1, [pc, #152]	; (859c <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    8504:	3204      	adds	r2, #4
    8506:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8508:	4925      	ldr	r1, [pc, #148]	; (85a0 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    850a:	3204      	adds	r2, #4
    850c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    850e:	4925      	ldr	r1, [pc, #148]	; (85a4 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    8510:	3204      	adds	r2, #4
    8512:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8514:	4924      	ldr	r1, [pc, #144]	; (85a8 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    8516:	3208      	adds	r2, #8
    8518:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    851a:	4924      	ldr	r1, [pc, #144]	; (85ac <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    851c:	3204      	adds	r2, #4
    851e:	5099      	str	r1, [r3, r2]
}
    8520:	4770      	bx	lr
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	20000b28 	.word	0x20000b28
    8528:	000064ed 	.word	0x000064ed
    852c:	000076cd 	.word	0x000076cd
    8530:	00007709 	.word	0x00007709
    8534:	00007669 	.word	0x00007669
    8538:	000052c5 	.word	0x000052c5
    853c:	000052d5 	.word	0x000052d5
    8540:	000052ed 	.word	0x000052ed
    8544:	000052fd 	.word	0x000052fd
    8548:	000061e9 	.word	0x000061e9
    854c:	0000530d 	.word	0x0000530d
    8550:	0000531d 	.word	0x0000531d
    8554:	000062b5 	.word	0x000062b5
    8558:	00005625 	.word	0x00005625
    855c:	0000536d 	.word	0x0000536d
    8560:	000063f9 	.word	0x000063f9
    8564:	00007779 	.word	0x00007779
    8568:	000077b1 	.word	0x000077b1
    856c:	000077e9 	.word	0x000077e9
    8570:	000053cd 	.word	0x000053cd
    8574:	000053d7 	.word	0x000053d7
    8578:	000053e1 	.word	0x000053e1
    857c:	000053ed 	.word	0x000053ed
    8580:	000053f9 	.word	0x000053f9
    8584:	00005403 	.word	0x00005403
    8588:	0000540b 	.word	0x0000540b
    858c:	00005413 	.word	0x00005413
    8590:	00007849 	.word	0x00007849
    8594:	00005c25 	.word	0x00005c25
    8598:	0000543d 	.word	0x0000543d
    859c:	0000544d 	.word	0x0000544d
    85a0:	000065bd 	.word	0x000065bd
    85a4:	00006201 	.word	0x00006201
    85a8:	0000541d 	.word	0x0000541d
    85ac:	0000542d 	.word	0x0000542d

000085b0 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    85b0:	4b2c      	ldr	r3, [pc, #176]	; (8664 <LORAREG_InitGetAttrFnPtrsKR+0xb4>)
    85b2:	4a2d      	ldr	r2, [pc, #180]	; (8668 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    85b4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    85b6:	4a2d      	ldr	r2, [pc, #180]	; (866c <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    85b8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    85ba:	4a2d      	ldr	r2, [pc, #180]	; (8670 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    85bc:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    85be:	4a2d      	ldr	r2, [pc, #180]	; (8674 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    85c0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    85c2:	4a2d      	ldr	r2, [pc, #180]	; (8678 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    85c4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    85c6:	4a2d      	ldr	r2, [pc, #180]	; (867c <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    85c8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    85ca:	4a2d      	ldr	r2, [pc, #180]	; (8680 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    85cc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    85ce:	4a2d      	ldr	r2, [pc, #180]	; (8684 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    85d0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    85d2:	4a2d      	ldr	r2, [pc, #180]	; (8688 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    85d4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    85d6:	4a2d      	ldr	r2, [pc, #180]	; (868c <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    85d8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    85da:	4a2d      	ldr	r2, [pc, #180]	; (8690 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    85dc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    85de:	4a2d      	ldr	r2, [pc, #180]	; (8694 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    85e0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    85e2:	4a2d      	ldr	r2, [pc, #180]	; (8698 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    85e4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    85e6:	4a2d      	ldr	r2, [pc, #180]	; (869c <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    85e8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    85ea:	4a2d      	ldr	r2, [pc, #180]	; (86a0 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    85ec:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    85ee:	492d      	ldr	r1, [pc, #180]	; (86a4 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    85f0:	2284      	movs	r2, #132	; 0x84
    85f2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    85f4:	492c      	ldr	r1, [pc, #176]	; (86a8 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    85f6:	3204      	adds	r2, #4
    85f8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    85fa:	492c      	ldr	r1, [pc, #176]	; (86ac <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    85fc:	3204      	adds	r2, #4
    85fe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    8600:	492b      	ldr	r1, [pc, #172]	; (86b0 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    8602:	3208      	adds	r2, #8
    8604:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    8606:	492b      	ldr	r1, [pc, #172]	; (86b4 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    8608:	3204      	adds	r2, #4
    860a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    860c:	492a      	ldr	r1, [pc, #168]	; (86b8 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    860e:	3204      	adds	r2, #4
    8610:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    8612:	492a      	ldr	r1, [pc, #168]	; (86bc <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    8614:	3204      	adds	r2, #4
    8616:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    8618:	4929      	ldr	r1, [pc, #164]	; (86c0 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    861a:	3204      	adds	r2, #4
    861c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    861e:	4929      	ldr	r1, [pc, #164]	; (86c4 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    8620:	3204      	adds	r2, #4
    8622:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    8624:	4928      	ldr	r1, [pc, #160]	; (86c8 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    8626:	3204      	adds	r2, #4
    8628:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    862a:	4928      	ldr	r1, [pc, #160]	; (86cc <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    862c:	3204      	adds	r2, #4
    862e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    8630:	4927      	ldr	r1, [pc, #156]	; (86d0 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    8632:	3204      	adds	r2, #4
    8634:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    8636:	4927      	ldr	r1, [pc, #156]	; (86d4 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    8638:	3204      	adds	r2, #4
    863a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    863c:	4926      	ldr	r1, [pc, #152]	; (86d8 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    863e:	3204      	adds	r2, #4
    8640:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    8642:	4926      	ldr	r1, [pc, #152]	; (86dc <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    8644:	3204      	adds	r2, #4
    8646:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    8648:	4925      	ldr	r1, [pc, #148]	; (86e0 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    864a:	3204      	adds	r2, #4
    864c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    864e:	4925      	ldr	r1, [pc, #148]	; (86e4 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    8650:	3204      	adds	r2, #4
    8652:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    8654:	4924      	ldr	r1, [pc, #144]	; (86e8 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    8656:	3208      	adds	r2, #8
    8658:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    865a:	4924      	ldr	r1, [pc, #144]	; (86ec <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    865c:	3204      	adds	r2, #4
    865e:	5099      	str	r1, [r3, r2]
}
    8660:	4770      	bx	lr
    8662:	46c0      	nop			; (mov r8, r8)
    8664:	20000b28 	.word	0x20000b28
    8668:	000063b1 	.word	0x000063b1
    866c:	000076cd 	.word	0x000076cd
    8670:	00007709 	.word	0x00007709
    8674:	00007741 	.word	0x00007741
    8678:	000052c5 	.word	0x000052c5
    867c:	000052d5 	.word	0x000052d5
    8680:	000052ed 	.word	0x000052ed
    8684:	000052fd 	.word	0x000052fd
    8688:	000061e9 	.word	0x000061e9
    868c:	0000530d 	.word	0x0000530d
    8690:	0000531d 	.word	0x0000531d
    8694:	000062b5 	.word	0x000062b5
    8698:	00005625 	.word	0x00005625
    869c:	0000536d 	.word	0x0000536d
    86a0:	00006249 	.word	0x00006249
    86a4:	00007779 	.word	0x00007779
    86a8:	000077b1 	.word	0x000077b1
    86ac:	000077e9 	.word	0x000077e9
    86b0:	000053cd 	.word	0x000053cd
    86b4:	000053d7 	.word	0x000053d7
    86b8:	000053e1 	.word	0x000053e1
    86bc:	000053ed 	.word	0x000053ed
    86c0:	000053f9 	.word	0x000053f9
    86c4:	00005403 	.word	0x00005403
    86c8:	0000540b 	.word	0x0000540b
    86cc:	00005413 	.word	0x00005413
    86d0:	00007849 	.word	0x00007849
    86d4:	00005c25 	.word	0x00005c25
    86d8:	0000543d 	.word	0x0000543d
    86dc:	0000544d 	.word	0x0000544d
    86e0:	000065bd 	.word	0x000065bd
    86e4:	00006201 	.word	0x00006201
    86e8:	0000541d 	.word	0x0000541d
    86ec:	0000542d 	.word	0x0000542d

000086f0 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    86f0:	4b0d      	ldr	r3, [pc, #52]	; (8728 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    86f2:	4a0e      	ldr	r2, [pc, #56]	; (872c <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    86f4:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    86f6:	4a0e      	ldr	r2, [pc, #56]	; (8730 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    86f8:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    86fa:	4a0e      	ldr	r2, [pc, #56]	; (8734 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    86fc:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    86fe:	490e      	ldr	r1, [pc, #56]	; (8738 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    8700:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8702:	490e      	ldr	r1, [pc, #56]	; (873c <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    8704:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8706:	490e      	ldr	r1, [pc, #56]	; (8740 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    8708:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    870a:	490e      	ldr	r1, [pc, #56]	; (8744 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    870c:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    870e:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8710:	4a0d      	ldr	r2, [pc, #52]	; (8748 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    8712:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8714:	4a0d      	ldr	r2, [pc, #52]	; (874c <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    8716:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8718:	4a0d      	ldr	r2, [pc, #52]	; (8750 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    871a:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    871c:	4a0d      	ldr	r2, [pc, #52]	; (8754 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    871e:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8720:	490d      	ldr	r1, [pc, #52]	; (8758 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    8722:	22d8      	movs	r2, #216	; 0xd8
    8724:	5099      	str	r1, [r3, r2]
}
    8726:	4770      	bx	lr
    8728:	20000ce0 	.word	0x20000ce0
    872c:	000057f5 	.word	0x000057f5
    8730:	00007bdd 	.word	0x00007bdd
    8734:	0000554d 	.word	0x0000554d
    8738:	0000550d 	.word	0x0000550d
    873c:	00005799 	.word	0x00005799
    8740:	0000793d 	.word	0x0000793d
    8744:	00005599 	.word	0x00005599
    8748:	00005829 	.word	0x00005829
    874c:	000056c5 	.word	0x000056c5
    8750:	00005699 	.word	0x00005699
    8754:	000056ad 	.word	0x000056ad
    8758:	00007821 	.word	0x00007821

0000875c <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    875c:	4b0d      	ldr	r3, [pc, #52]	; (8794 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    875e:	4a0e      	ldr	r2, [pc, #56]	; (8798 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    8760:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8762:	4a0e      	ldr	r2, [pc, #56]	; (879c <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    8764:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    8766:	4a0e      	ldr	r2, [pc, #56]	; (87a0 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    8768:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    876a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    876c:	490d      	ldr	r1, [pc, #52]	; (87a4 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    876e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8770:	490d      	ldr	r1, [pc, #52]	; (87a8 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    8772:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8774:	490d      	ldr	r1, [pc, #52]	; (87ac <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    8776:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    8778:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    877a:	4a0d      	ldr	r2, [pc, #52]	; (87b0 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    877c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    877e:	4a0d      	ldr	r2, [pc, #52]	; (87b4 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    8780:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8782:	4a0d      	ldr	r2, [pc, #52]	; (87b8 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    8784:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8786:	4a0d      	ldr	r2, [pc, #52]	; (87bc <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    8788:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    878a:	490d      	ldr	r1, [pc, #52]	; (87c0 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    878c:	22d8      	movs	r2, #216	; 0xd8
    878e:	5099      	str	r1, [r3, r2]
}
    8790:	4770      	bx	lr
    8792:	46c0      	nop			; (mov r8, r8)
    8794:	20000ce0 	.word	0x20000ce0
    8798:	000058b1 	.word	0x000058b1
    879c:	0000668d 	.word	0x0000668d
    87a0:	00005785 	.word	0x00005785
    87a4:	00005799 	.word	0x00005799
    87a8:	00007585 	.word	0x00007585
    87ac:	000055b1 	.word	0x000055b1
    87b0:	00005829 	.word	0x00005829
    87b4:	000056c9 	.word	0x000056c9
    87b8:	0000571d 	.word	0x0000571d
    87bc:	000056ad 	.word	0x000056ad
    87c0:	00005731 	.word	0x00005731

000087c4 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    87c4:	4b0d      	ldr	r3, [pc, #52]	; (87fc <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    87c6:	4a0e      	ldr	r2, [pc, #56]	; (8800 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    87c8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    87ca:	4a0e      	ldr	r2, [pc, #56]	; (8804 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    87cc:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    87ce:	4a0e      	ldr	r2, [pc, #56]	; (8808 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    87d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    87d2:	490e      	ldr	r1, [pc, #56]	; (880c <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    87d4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    87d6:	490e      	ldr	r1, [pc, #56]	; (8810 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    87d8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    87da:	490e      	ldr	r1, [pc, #56]	; (8814 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    87dc:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    87de:	490e      	ldr	r1, [pc, #56]	; (8818 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    87e0:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    87e2:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    87e4:	4a0d      	ldr	r2, [pc, #52]	; (881c <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    87e6:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    87e8:	4a0d      	ldr	r2, [pc, #52]	; (8820 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    87ea:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    87ec:	4a0d      	ldr	r2, [pc, #52]	; (8824 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    87ee:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    87f0:	4a0d      	ldr	r2, [pc, #52]	; (8828 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    87f2:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    87f4:	490d      	ldr	r1, [pc, #52]	; (882c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    87f6:	22d8      	movs	r2, #216	; 0xd8
    87f8:	5099      	str	r1, [r3, r2]
}
    87fa:	4770      	bx	lr
    87fc:	20000ce0 	.word	0x20000ce0
    8800:	000058cd 	.word	0x000058cd
    8804:	0000668d 	.word	0x0000668d
    8808:	00005571 	.word	0x00005571
    880c:	00005525 	.word	0x00005525
    8810:	00005799 	.word	0x00005799
    8814:	00007585 	.word	0x00007585
    8818:	000055b1 	.word	0x000055b1
    881c:	00005829 	.word	0x00005829
    8820:	000056c9 	.word	0x000056c9
    8824:	0000571d 	.word	0x0000571d
    8828:	000056ad 	.word	0x000056ad
    882c:	00005731 	.word	0x00005731

00008830 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    8830:	4b0d      	ldr	r3, [pc, #52]	; (8868 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    8832:	4a0e      	ldr	r2, [pc, #56]	; (886c <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    8834:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    8836:	4a0e      	ldr	r2, [pc, #56]	; (8870 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    8838:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    883a:	4a0e      	ldr	r2, [pc, #56]	; (8874 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    883c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    883e:	490e      	ldr	r1, [pc, #56]	; (8878 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    8840:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8842:	490e      	ldr	r1, [pc, #56]	; (887c <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    8844:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    8846:	490e      	ldr	r1, [pc, #56]	; (8880 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    8848:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    884a:	490e      	ldr	r1, [pc, #56]	; (8884 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    884c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    884e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8850:	4a0d      	ldr	r2, [pc, #52]	; (8888 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    8852:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    8854:	4a0d      	ldr	r2, [pc, #52]	; (888c <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    8856:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    8858:	4a0d      	ldr	r2, [pc, #52]	; (8890 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    885a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    885c:	4a0d      	ldr	r2, [pc, #52]	; (8894 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    885e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    8860:	490d      	ldr	r1, [pc, #52]	; (8898 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    8862:	22d8      	movs	r2, #216	; 0xd8
    8864:	5099      	str	r1, [r3, r2]
}
    8866:	4770      	bx	lr
    8868:	20000ce0 	.word	0x20000ce0
    886c:	000057f5 	.word	0x000057f5
    8870:	00007bdd 	.word	0x00007bdd
    8874:	0000554d 	.word	0x0000554d
    8878:	0000550d 	.word	0x0000550d
    887c:	00005799 	.word	0x00005799
    8880:	0000793d 	.word	0x0000793d
    8884:	00005599 	.word	0x00005599
    8888:	00005829 	.word	0x00005829
    888c:	000056c5 	.word	0x000056c5
    8890:	00005699 	.word	0x00005699
    8894:	000056ad 	.word	0x000056ad
    8898:	00007821 	.word	0x00007821

0000889c <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    889c:	4b0d      	ldr	r3, [pc, #52]	; (88d4 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    889e:	4a0e      	ldr	r2, [pc, #56]	; (88d8 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    88a0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    88a2:	4a0e      	ldr	r2, [pc, #56]	; (88dc <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    88a4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    88a6:	4a0e      	ldr	r2, [pc, #56]	; (88e0 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    88a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    88aa:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    88ac:	490d      	ldr	r1, [pc, #52]	; (88e4 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    88ae:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    88b0:	490d      	ldr	r1, [pc, #52]	; (88e8 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    88b2:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    88b4:	490d      	ldr	r1, [pc, #52]	; (88ec <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    88b6:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    88b8:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    88ba:	4a0d      	ldr	r2, [pc, #52]	; (88f0 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    88bc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    88be:	4a0d      	ldr	r2, [pc, #52]	; (88f4 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    88c0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    88c2:	4a0d      	ldr	r2, [pc, #52]	; (88f8 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    88c4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    88c6:	4a0d      	ldr	r2, [pc, #52]	; (88fc <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    88c8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    88ca:	490d      	ldr	r1, [pc, #52]	; (8900 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    88cc:	22d8      	movs	r2, #216	; 0xd8
    88ce:	5099      	str	r1, [r3, r2]
}
    88d0:	4770      	bx	lr
    88d2:	46c0      	nop			; (mov r8, r8)
    88d4:	20000ce0 	.word	0x20000ce0
    88d8:	000066b1 	.word	0x000066b1
    88dc:	0000668d 	.word	0x0000668d
    88e0:	00005785 	.word	0x00005785
    88e4:	00005799 	.word	0x00005799
    88e8:	00007585 	.word	0x00007585
    88ec:	000055b1 	.word	0x000055b1
    88f0:	00005829 	.word	0x00005829
    88f4:	000056c9 	.word	0x000056c9
    88f8:	0000571d 	.word	0x0000571d
    88fc:	000056ad 	.word	0x000056ad
    8900:	00005731 	.word	0x00005731

00008904 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    8904:	4b0d      	ldr	r3, [pc, #52]	; (893c <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    8906:	4a0e      	ldr	r2, [pc, #56]	; (8940 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    8908:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    890a:	4a0e      	ldr	r2, [pc, #56]	; (8944 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    890c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    890e:	4a0e      	ldr	r2, [pc, #56]	; (8948 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    8910:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    8912:	490e      	ldr	r1, [pc, #56]	; (894c <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    8914:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8916:	490e      	ldr	r1, [pc, #56]	; (8950 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    8918:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    891a:	490e      	ldr	r1, [pc, #56]	; (8954 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    891c:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    891e:	490e      	ldr	r1, [pc, #56]	; (8958 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    8920:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    8922:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    8924:	4a0d      	ldr	r2, [pc, #52]	; (895c <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    8926:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8928:	4a0d      	ldr	r2, [pc, #52]	; (8960 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    892a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    892c:	4a0d      	ldr	r2, [pc, #52]	; (8964 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    892e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    8930:	4a0d      	ldr	r2, [pc, #52]	; (8968 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    8932:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    8934:	490d      	ldr	r1, [pc, #52]	; (896c <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    8936:	22d8      	movs	r2, #216	; 0xd8
    8938:	5099      	str	r1, [r3, r2]
}
    893a:	4770      	bx	lr
    893c:	20000ce0 	.word	0x20000ce0
    8940:	000066e1 	.word	0x000066e1
    8944:	0000668d 	.word	0x0000668d
    8948:	00005571 	.word	0x00005571
    894c:	00005525 	.word	0x00005525
    8950:	00005799 	.word	0x00005799
    8954:	00007585 	.word	0x00007585
    8958:	000055b1 	.word	0x000055b1
    895c:	00005829 	.word	0x00005829
    8960:	000056c9 	.word	0x000056c9
    8964:	0000571d 	.word	0x0000571d
    8968:	000056ad 	.word	0x000056ad
    896c:	00005731 	.word	0x00005731

00008970 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    8970:	4b0d      	ldr	r3, [pc, #52]	; (89a8 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    8972:	4a0e      	ldr	r2, [pc, #56]	; (89ac <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    8974:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    8976:	4a0e      	ldr	r2, [pc, #56]	; (89b0 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    8978:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    897a:	4a0e      	ldr	r2, [pc, #56]	; (89b4 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    897c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    897e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    8980:	490d      	ldr	r1, [pc, #52]	; (89b8 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    8982:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    8984:	490d      	ldr	r1, [pc, #52]	; (89bc <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    8986:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    8988:	490d      	ldr	r1, [pc, #52]	; (89c0 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    898a:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    898c:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    898e:	4a0d      	ldr	r2, [pc, #52]	; (89c4 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    8990:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    8992:	4a0d      	ldr	r2, [pc, #52]	; (89c8 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    8994:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    8996:	4a0d      	ldr	r2, [pc, #52]	; (89cc <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    8998:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    899a:	4a0d      	ldr	r2, [pc, #52]	; (89d0 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    899c:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    899e:	490d      	ldr	r1, [pc, #52]	; (89d4 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    89a0:	22d8      	movs	r2, #216	; 0xd8
    89a2:	5099      	str	r1, [r3, r2]
}
    89a4:	4770      	bx	lr
    89a6:	46c0      	nop			; (mov r8, r8)
    89a8:	20000ce0 	.word	0x20000ce0
    89ac:	00006711 	.word	0x00006711
    89b0:	0000668d 	.word	0x0000668d
    89b4:	00005785 	.word	0x00005785
    89b8:	00005799 	.word	0x00005799
    89bc:	00007585 	.word	0x00007585
    89c0:	000055b1 	.word	0x000055b1
    89c4:	00005829 	.word	0x00005829
    89c8:	000056c9 	.word	0x000056c9
    89cc:	0000571d 	.word	0x0000571d
    89d0:	000056ad 	.word	0x000056ad
    89d4:	00005731 	.word	0x00005731

000089d8 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    89d8:	4b03      	ldr	r3, [pc, #12]	; (89e8 <LORAREG_InitSetAttrFnPtrsNA+0x10>)
    89da:	4a04      	ldr	r2, [pc, #16]	; (89ec <LORAREG_InitSetAttrFnPtrsNA+0x14>)
    89dc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    89de:	4a04      	ldr	r2, [pc, #16]	; (89f0 <LORAREG_InitSetAttrFnPtrsNA+0x18>)
    89e0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    89e2:	4a04      	ldr	r2, [pc, #16]	; (89f4 <LORAREG_InitSetAttrFnPtrsNA+0x1c>)
    89e4:	671a      	str	r2, [r3, #112]	; 0x70
}
    89e6:	4770      	bx	lr
    89e8:	20000c04 	.word	0x20000c04
    89ec:	000079a5 	.word	0x000079a5
    89f0:	00007919 	.word	0x00007919
    89f4:	00006759 	.word	0x00006759

000089f8 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    89f8:	4b08      	ldr	r3, [pc, #32]	; (8a1c <LORAREG_InitSetAttrFnPtrsEU+0x24>)
    89fa:	4a09      	ldr	r2, [pc, #36]	; (8a20 <LORAREG_InitSetAttrFnPtrsEU+0x28>)
    89fc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    89fe:	4a09      	ldr	r2, [pc, #36]	; (8a24 <LORAREG_InitSetAttrFnPtrsEU+0x2c>)
    8a00:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8a02:	4a09      	ldr	r2, [pc, #36]	; (8a28 <LORAREG_InitSetAttrFnPtrsEU+0x30>)
    8a04:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8a06:	4a09      	ldr	r2, [pc, #36]	; (8a2c <LORAREG_InitSetAttrFnPtrsEU+0x34>)
    8a08:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    8a0a:	4a09      	ldr	r2, [pc, #36]	; (8a30 <LORAREG_InitSetAttrFnPtrsEU+0x38>)
    8a0c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8a0e:	4a09      	ldr	r2, [pc, #36]	; (8a34 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    8a10:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8a12:	4909      	ldr	r1, [pc, #36]	; (8a38 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    8a14:	22c8      	movs	r2, #200	; 0xc8
    8a16:	5099      	str	r1, [r3, r2]
}
    8a18:	4770      	bx	lr
    8a1a:	46c0      	nop			; (mov r8, r8)
    8a1c:	20000c04 	.word	0x20000c04
    8a20:	000075ad 	.word	0x000075ad
    8a24:	00005e05 	.word	0x00005e05
    8a28:	00006aa5 	.word	0x00006aa5
    8a2c:	00006d09 	.word	0x00006d09
    8a30:	00006985 	.word	0x00006985
    8a34:	00006891 	.word	0x00006891
    8a38:	000067f1 	.word	0x000067f1

00008a3c <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8a3c:	4b09      	ldr	r3, [pc, #36]	; (8a64 <LORAREG_InitSetAttrFnPtrsAS+0x28>)
    8a3e:	4a0a      	ldr	r2, [pc, #40]	; (8a68 <LORAREG_InitSetAttrFnPtrsAS+0x2c>)
    8a40:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8a42:	4a0a      	ldr	r2, [pc, #40]	; (8a6c <LORAREG_InitSetAttrFnPtrsAS+0x30>)
    8a44:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8a46:	4a0a      	ldr	r2, [pc, #40]	; (8a70 <LORAREG_InitSetAttrFnPtrsAS+0x34>)
    8a48:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8a4a:	490a      	ldr	r1, [pc, #40]	; (8a74 <LORAREG_InitSetAttrFnPtrsAS+0x38>)
    8a4c:	22c8      	movs	r2, #200	; 0xc8
    8a4e:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    8a50:	4a09      	ldr	r2, [pc, #36]	; (8a78 <LORAREG_InitSetAttrFnPtrsAS+0x3c>)
    8a52:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8a54:	4909      	ldr	r1, [pc, #36]	; (8a7c <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    8a56:	22cc      	movs	r2, #204	; 0xcc
    8a58:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    8a5a:	4a09      	ldr	r2, [pc, #36]	; (8a80 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    8a5c:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    8a5e:	4a09      	ldr	r2, [pc, #36]	; (8a84 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    8a60:	67da      	str	r2, [r3, #124]	; 0x7c
}
    8a62:	4770      	bx	lr
    8a64:	20000c04 	.word	0x20000c04
    8a68:	000075ad 	.word	0x000075ad
    8a6c:	00005fb9 	.word	0x00005fb9
    8a70:	00006985 	.word	0x00006985
    8a74:	000067f1 	.word	0x000067f1
    8a78:	00006891 	.word	0x00006891
    8a7c:	0000595d 	.word	0x0000595d
    8a80:	00006aa5 	.word	0x00006aa5
    8a84:	00006d09 	.word	0x00006d09

00008a88 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    8a88:	4b03      	ldr	r3, [pc, #12]	; (8a98 <LORAREG_InitSetAttrFnPtrsAU+0x10>)
    8a8a:	4a04      	ldr	r2, [pc, #16]	; (8a9c <LORAREG_InitSetAttrFnPtrsAU+0x14>)
    8a8c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    8a8e:	4a04      	ldr	r2, [pc, #16]	; (8aa0 <LORAREG_InitSetAttrFnPtrsAU+0x18>)
    8a90:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    8a92:	4a04      	ldr	r2, [pc, #16]	; (8aa4 <LORAREG_InitSetAttrFnPtrsAU+0x1c>)
    8a94:	671a      	str	r2, [r3, #112]	; 0x70
}
    8a96:	4770      	bx	lr
    8a98:	20000c04 	.word	0x20000c04
    8a9c:	000079a5 	.word	0x000079a5
    8aa0:	00007919 	.word	0x00007919
    8aa4:	00006759 	.word	0x00006759

00008aa8 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8aa8:	4b07      	ldr	r3, [pc, #28]	; (8ac8 <LORAREG_InitSetAttrFnPtrsIN+0x20>)
    8aaa:	4a08      	ldr	r2, [pc, #32]	; (8acc <LORAREG_InitSetAttrFnPtrsIN+0x24>)
    8aac:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    8aae:	4a08      	ldr	r2, [pc, #32]	; (8ad0 <LORAREG_InitSetAttrFnPtrsIN+0x28>)
    8ab0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    8ab2:	4a08      	ldr	r2, [pc, #32]	; (8ad4 <LORAREG_InitSetAttrFnPtrsIN+0x2c>)
    8ab4:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8ab6:	4a08      	ldr	r2, [pc, #32]	; (8ad8 <LORAREG_InitSetAttrFnPtrsIN+0x30>)
    8ab8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8aba:	4908      	ldr	r1, [pc, #32]	; (8adc <LORAREG_InitSetAttrFnPtrsIN+0x34>)
    8abc:	22c8      	movs	r2, #200	; 0xc8
    8abe:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    8ac0:	4907      	ldr	r1, [pc, #28]	; (8ae0 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    8ac2:	3204      	adds	r2, #4
    8ac4:	5099      	str	r1, [r3, r2]
}
    8ac6:	4770      	bx	lr
    8ac8:	20000c04 	.word	0x20000c04
    8acc:	000075ad 	.word	0x000075ad
    8ad0:	00005e05 	.word	0x00005e05
    8ad4:	00006985 	.word	0x00006985
    8ad8:	00006891 	.word	0x00006891
    8adc:	000067f1 	.word	0x000067f1
    8ae0:	0000595d 	.word	0x0000595d

00008ae4 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8ae4:	4b0a      	ldr	r3, [pc, #40]	; (8b10 <LORAREG_InitSetAttrFnPtrsJP+0x2c>)
    8ae6:	4a0b      	ldr	r2, [pc, #44]	; (8b14 <LORAREG_InitSetAttrFnPtrsJP+0x30>)
    8ae8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8aea:	4a0b      	ldr	r2, [pc, #44]	; (8b18 <LORAREG_InitSetAttrFnPtrsJP+0x34>)
    8aec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    8aee:	490b      	ldr	r1, [pc, #44]	; (8b1c <LORAREG_InitSetAttrFnPtrsJP+0x38>)
    8af0:	2280      	movs	r2, #128	; 0x80
    8af2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8af4:	4a0a      	ldr	r2, [pc, #40]	; (8b20 <LORAREG_InitSetAttrFnPtrsJP+0x3c>)
    8af6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8af8:	490a      	ldr	r1, [pc, #40]	; (8b24 <LORAREG_InitSetAttrFnPtrsJP+0x40>)
    8afa:	22c8      	movs	r2, #200	; 0xc8
    8afc:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8afe:	4a0a      	ldr	r2, [pc, #40]	; (8b28 <LORAREG_InitSetAttrFnPtrsJP+0x44>)
    8b00:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8b02:	490a      	ldr	r1, [pc, #40]	; (8b2c <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    8b04:	22cc      	movs	r2, #204	; 0xcc
    8b06:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = NULL;
    8b08:	2200      	movs	r2, #0
    8b0a:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = NULL;
    8b0c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    8b0e:	4770      	bx	lr
    8b10:	20000c04 	.word	0x20000c04
    8b14:	000075ad 	.word	0x000075ad
    8b18:	00005fb9 	.word	0x00005fb9
    8b1c:	0000724d 	.word	0x0000724d
    8b20:	00006985 	.word	0x00006985
    8b24:	000067f1 	.word	0x000067f1
    8b28:	00006891 	.word	0x00006891
    8b2c:	0000595d 	.word	0x0000595d

00008b30 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    8b30:	4b09      	ldr	r3, [pc, #36]	; (8b58 <LORAREG_InitSetAttrFnPtrsKR+0x28>)
    8b32:	4a0a      	ldr	r2, [pc, #40]	; (8b5c <LORAREG_InitSetAttrFnPtrsKR+0x2c>)
    8b34:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    8b36:	4a0a      	ldr	r2, [pc, #40]	; (8b60 <LORAREG_InitSetAttrFnPtrsKR+0x30>)
    8b38:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    8b3a:	490a      	ldr	r1, [pc, #40]	; (8b64 <LORAREG_InitSetAttrFnPtrsKR+0x34>)
    8b3c:	2280      	movs	r2, #128	; 0x80
    8b3e:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    8b40:	4a09      	ldr	r2, [pc, #36]	; (8b68 <LORAREG_InitSetAttrFnPtrsKR+0x38>)
    8b42:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    8b44:	4909      	ldr	r1, [pc, #36]	; (8b6c <LORAREG_InitSetAttrFnPtrsKR+0x3c>)
    8b46:	22c8      	movs	r2, #200	; 0xc8
    8b48:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    8b4a:	4a09      	ldr	r2, [pc, #36]	; (8b70 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    8b4c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    8b4e:	4909      	ldr	r1, [pc, #36]	; (8b74 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    8b50:	22cc      	movs	r2, #204	; 0xcc
    8b52:	5099      	str	r1, [r3, r2]
}
    8b54:	4770      	bx	lr
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	20000c04 	.word	0x20000c04
    8b5c:	000075ad 	.word	0x000075ad
    8b60:	00005fb9 	.word	0x00005fb9
    8b64:	0000724d 	.word	0x0000724d
    8b68:	00006985 	.word	0x00006985
    8b6c:	000067f1 	.word	0x000067f1
    8b70:	00006891 	.word	0x00006891
    8b74:	0000595d 	.word	0x0000595d

00008b78 <LORAREG_GetAttr>:
{
    8b78:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8b7a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8b7c:	2836      	cmp	r0, #54	; 0x36
    8b7e:	d901      	bls.n	8b84 <LORAREG_GetAttr+0xc>
}
    8b80:	0018      	movs	r0, r3
    8b82:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    8b84:	0084      	lsls	r4, r0, #2
    8b86:	4b02      	ldr	r3, [pc, #8]	; (8b90 <LORAREG_GetAttr+0x18>)
    8b88:	58e3      	ldr	r3, [r4, r3]
    8b8a:	4798      	blx	r3
    8b8c:	0003      	movs	r3, r0
    8b8e:	e7f7      	b.n	8b80 <LORAREG_GetAttr+0x8>
    8b90:	20000b28 	.word	0x20000b28

00008b94 <LORAREG_ValidateAttr>:
{
    8b94:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8b96:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8b98:	2836      	cmp	r0, #54	; 0x36
    8b9a:	d901      	bls.n	8ba0 <LORAREG_ValidateAttr+0xc>
}
    8b9c:	0018      	movs	r0, r3
    8b9e:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    8ba0:	0082      	lsls	r2, r0, #2
    8ba2:	4b02      	ldr	r3, [pc, #8]	; (8bac <LORAREG_ValidateAttr+0x18>)
    8ba4:	58d3      	ldr	r3, [r2, r3]
    8ba6:	4798      	blx	r3
    8ba8:	0003      	movs	r3, r0
    8baa:	e7f7      	b.n	8b9c <LORAREG_ValidateAttr+0x8>
    8bac:	20000ce0 	.word	0x20000ce0

00008bb0 <LORAREG_SetAttr>:
{
    8bb0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8bb2:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    8bb4:	2836      	cmp	r0, #54	; 0x36
    8bb6:	d901      	bls.n	8bbc <LORAREG_SetAttr+0xc>
}
    8bb8:	0018      	movs	r0, r3
    8bba:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    8bbc:	0082      	lsls	r2, r0, #2
    8bbe:	4b02      	ldr	r3, [pc, #8]	; (8bc8 <LORAREG_SetAttr+0x18>)
    8bc0:	58d3      	ldr	r3, [r2, r3]
    8bc2:	4798      	blx	r3
    8bc4:	0003      	movs	r3, r0
    8bc6:	e7f7      	b.n	8bb8 <LORAREG_SetAttr+0x8>
    8bc8:	20000c04 	.word	0x20000c04

00008bcc <CreateAllRegSoftwareTimers>:
{
    8bcc:	b510      	push	{r4, lr}
    StackRetStatus_t status = SwTimerCreate(&regTimerId[0]);    
    8bce:	4805      	ldr	r0, [pc, #20]	; (8be4 <CreateAllRegSoftwareTimers+0x18>)
    8bd0:	4b05      	ldr	r3, [pc, #20]	; (8be8 <CreateAllRegSoftwareTimers+0x1c>)
    8bd2:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    8bd4:	2808      	cmp	r0, #8
    8bd6:	d000      	beq.n	8bda <CreateAllRegSoftwareTimers+0xe>
}
    8bd8:	bd10      	pop	{r4, pc}
        status = SwTimerCreate(&regTimerId[1]);
    8bda:	4804      	ldr	r0, [pc, #16]	; (8bec <CreateAllRegSoftwareTimers+0x20>)
    8bdc:	4b02      	ldr	r3, [pc, #8]	; (8be8 <CreateAllRegSoftwareTimers+0x1c>)
    8bde:	4798      	blx	r3
    8be0:	e7fa      	b.n	8bd8 <CreateAllRegSoftwareTimers+0xc>
    8be2:	46c0      	nop			; (mov r8, r8)
    8be4:	2000128c 	.word	0x2000128c
    8be8:	000098c1 	.word	0x000098c1
    8bec:	2000128d 	.word	0x2000128d

00008bf0 <StopAllRegSoftwareTimers>:
{
    8bf0:	b570      	push	{r4, r5, r6, lr}
	SwTimerStop(regTimerId[0]);
    8bf2:	4d03      	ldr	r5, [pc, #12]	; (8c00 <StopAllRegSoftwareTimers+0x10>)
    8bf4:	7828      	ldrb	r0, [r5, #0]
    8bf6:	4c03      	ldr	r4, [pc, #12]	; (8c04 <StopAllRegSoftwareTimers+0x14>)
    8bf8:	47a0      	blx	r4
	SwTimerStop(regTimerId[1]);
    8bfa:	7868      	ldrb	r0, [r5, #1]
    8bfc:	47a0      	blx	r4
}
    8bfe:	bd70      	pop	{r4, r5, r6, pc}
    8c00:	2000128c 	.word	0x2000128c
    8c04:	00009bf9 	.word	0x00009bf9

00008c08 <LORAREG_Init>:
{	
    8c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c0a:	0007      	movs	r7, r0
	if(!initialized)
    8c0c:	4b24      	ldr	r3, [pc, #144]	; (8ca0 <LORAREG_Init+0x98>)
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d109      	bne.n	8c28 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    8c14:	4b23      	ldr	r3, [pc, #140]	; (8ca4 <LORAREG_Init+0x9c>)
    8c16:	4798      	blx	r3
    8c18:	2808      	cmp	r0, #8
    8c1a:	d001      	beq.n	8c20 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    8c1c:	2014      	movs	r0, #20
    8c1e:	e006      	b.n	8c2e <LORAREG_Init+0x26>
			initialized = true;
    8c20:	2201      	movs	r2, #1
    8c22:	4b1f      	ldr	r3, [pc, #124]	; (8ca0 <LORAREG_Init+0x98>)
    8c24:	701a      	strb	r2, [r3, #0]
    8c26:	e002      	b.n	8c2e <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    8c28:	4b1f      	ldr	r3, [pc, #124]	; (8ca8 <LORAREG_Init+0xa0>)
    8c2a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8c2c:	2008      	movs	r0, #8
    8c2e:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    8c30:	4e1e      	ldr	r6, [pc, #120]	; (8cac <LORAREG_Init+0xa4>)
    8c32:	4d1f      	ldr	r5, [pc, #124]	; (8cb0 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    8c34:	4c1f      	ldr	r4, [pc, #124]	; (8cb4 <LORAREG_Init+0xac>)
    8c36:	4a20      	ldr	r2, [pc, #128]	; (8cb8 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    8c38:	4920      	ldr	r1, [pc, #128]	; (8cbc <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    8c3a:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    8c3c:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    8c3e:	505a      	str	r2, [r3, r1]
    8c40:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    8c42:	2bdc      	cmp	r3, #220	; 0xdc
    8c44:	d1f9      	bne.n	8c3a <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    8c46:	2f02      	cmp	r7, #2
    8c48:	d00d      	beq.n	8c66 <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    8c4a:	2f01      	cmp	r7, #1
    8c4c:	d90f      	bls.n	8c6e <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8c4e:	1fbb      	subs	r3, r7, #6
    8c50:	2b08      	cmp	r3, #8
    8c52:	d910      	bls.n	8c76 <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    8c54:	2f03      	cmp	r7, #3
    8c56:	d012      	beq.n	8c7e <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    8c58:	2f0f      	cmp	r7, #15
    8c5a:	d014      	beq.n	8c86 <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    8c5c:	2f05      	cmp	r7, #5
    8c5e:	d016      	beq.n	8c8e <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    8c60:	2f04      	cmp	r7, #4
    8c62:	d018      	beq.n	8c96 <LORAREG_Init+0x8e>
}
    8c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    8c66:	2002      	movs	r0, #2
    8c68:	4b15      	ldr	r3, [pc, #84]	; (8cc0 <LORAREG_Init+0xb8>)
    8c6a:	4798      	blx	r3
    8c6c:	e7fa      	b.n	8c64 <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    8c6e:	0038      	movs	r0, r7
    8c70:	4b14      	ldr	r3, [pc, #80]	; (8cc4 <LORAREG_Init+0xbc>)
    8c72:	4798      	blx	r3
    8c74:	e7f6      	b.n	8c64 <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    8c76:	0038      	movs	r0, r7
    8c78:	4b13      	ldr	r3, [pc, #76]	; (8cc8 <LORAREG_Init+0xc0>)
    8c7a:	4798      	blx	r3
    8c7c:	e7f2      	b.n	8c64 <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    8c7e:	2003      	movs	r0, #3
    8c80:	4b12      	ldr	r3, [pc, #72]	; (8ccc <LORAREG_Init+0xc4>)
    8c82:	4798      	blx	r3
    8c84:	e7ee      	b.n	8c64 <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    8c86:	200f      	movs	r0, #15
    8c88:	4b11      	ldr	r3, [pc, #68]	; (8cd0 <LORAREG_Init+0xc8>)
    8c8a:	4798      	blx	r3
    8c8c:	e7ea      	b.n	8c64 <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    8c8e:	2005      	movs	r0, #5
    8c90:	4b10      	ldr	r3, [pc, #64]	; (8cd4 <LORAREG_Init+0xcc>)
    8c92:	4798      	blx	r3
    8c94:	e7e6      	b.n	8c64 <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    8c96:	2004      	movs	r0, #4
    8c98:	4b0f      	ldr	r3, [pc, #60]	; (8cd8 <LORAREG_Init+0xd0>)
    8c9a:	4798      	blx	r3
    8c9c:	e7e2      	b.n	8c64 <LORAREG_Init+0x5c>
    8c9e:	46c0      	nop			; (mov r8, r8)
    8ca0:	20000b25 	.word	0x20000b25
    8ca4:	00008bcd 	.word	0x00008bcd
    8ca8:	00008bf1 	.word	0x00008bf1
    8cac:	20000b28 	.word	0x20000b28
    8cb0:	000052bd 	.word	0x000052bd
    8cb4:	20000ce0 	.word	0x20000ce0
    8cb8:	000052c1 	.word	0x000052c1
    8cbc:	20000c04 	.word	0x20000c04
    8cc0:	000050ed 	.word	0x000050ed
    8cc4:	000047f5 	.word	0x000047f5
    8cc8:	000043f9 	.word	0x000043f9
    8ccc:	00004621 	.word	0x00004621
    8cd0:	00004a85 	.word	0x00004a85
    8cd4:	00004c35 	.word	0x00004c35
    8cd8:	00004e65 	.word	0x00004e65

00008cdc <LORAREG_SupportedBands>:
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
    8cdc:	2301      	movs	r3, #1
    8cde:	425b      	negs	r3, r3
    8ce0:	8003      	strh	r3, [r0, #0]
	
	return status;
}
    8ce2:	2008      	movs	r0, #8
    8ce4:	4770      	bx	lr
	...

00008ce8 <LORAREG_UnInit>:

StackRetStatus_t LORAREG_UnInit(void)
{
    8ce8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	
	StopAllRegSoftwareTimers();
    8cea:	4b0d      	ldr	r3, [pc, #52]	; (8d20 <LORAREG_UnInit+0x38>)
    8cec:	4798      	blx	r3

#if (ENABLE_PDS == 1)
	/* Do not reset the mac fild id1 */
	if(RegParams.regParamItems.fileid)
    8cee:	23fa      	movs	r3, #250	; 0xfa
    8cf0:	005b      	lsls	r3, r3, #1
    8cf2:	4a0c      	ldr	r2, [pc, #48]	; (8d24 <LORAREG_UnInit+0x3c>)
    8cf4:	5cd0      	ldrb	r0, [r2, r3]
    8cf6:	2800      	cmp	r0, #0
    8cf8:	d107      	bne.n	8d0a <LORAREG_UnInit+0x22>
		{
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
		}
	}
#endif	
	memset(&RegParams,0,sizeof(RegParams_t));
    8cfa:	22fe      	movs	r2, #254	; 0xfe
    8cfc:	32ff      	adds	r2, #255	; 0xff
    8cfe:	2100      	movs	r1, #0
    8d00:	4808      	ldr	r0, [pc, #32]	; (8d24 <LORAREG_UnInit+0x3c>)
    8d02:	4b09      	ldr	r3, [pc, #36]	; (8d28 <LORAREG_UnInit+0x40>)
    8d04:	4798      	blx	r3
	
	return result;
}
    8d06:	200a      	movs	r0, #10
    8d08:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    8d0a:	4b08      	ldr	r3, [pc, #32]	; (8d2c <LORAREG_UnInit+0x44>)
    8d0c:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    8d0e:	2326      	movs	r3, #38	; 0x26
    8d10:	4a04      	ldr	r2, [pc, #16]	; (8d24 <LORAREG_UnInit+0x3c>)
    8d12:	5cd3      	ldrb	r3, [r2, r3]
    8d14:	2b00      	cmp	r3, #0
    8d16:	d1f0      	bne.n	8cfa <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    8d18:	200b      	movs	r0, #11
    8d1a:	4b04      	ldr	r3, [pc, #16]	; (8d2c <LORAREG_UnInit+0x44>)
    8d1c:	4798      	blx	r3
    8d1e:	e7ec      	b.n	8cfa <LORAREG_UnInit+0x12>
    8d20:	00008bf1 	.word	0x00008bf1
    8d24:	20001290 	.word	0x20001290
    8d28:	00013c29 	.word	0x00013c29
    8d2c:	00008f01 	.word	0x00008f01

00008d30 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    8d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d32:	b083      	sub	sp, #12
    8d34:	0004      	movs	r4, r0
    8d36:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    8d38:	4a2b      	ldr	r2, [pc, #172]	; (8de8 <AESEncode+0xb8>)
    8d3a:	2101      	movs	r1, #1
    8d3c:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    8d3e:	2300      	movs	r3, #0
    8d40:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    8d42:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    8d44:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    8d46:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    8d48:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    8d4a:	4928      	ldr	r1, [pc, #160]	; (8dec <AESEncode+0xbc>)
    8d4c:	4828      	ldr	r0, [pc, #160]	; (8df0 <AESEncode+0xc0>)
    8d4e:	4b29      	ldr	r3, [pc, #164]	; (8df4 <AESEncode+0xc4>)
    8d50:	4798      	blx	r3
    8d52:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    8d54:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    8d56:	4f28      	ldr	r7, [pc, #160]	; (8df8 <AESEncode+0xc8>)
    8d58:	1870      	adds	r0, r6, r1
    8d5a:	2300      	movs	r3, #0
    8d5c:	5cc2      	ldrb	r2, [r0, r3]
    8d5e:	555a      	strb	r2, [r3, r5]
    8d60:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8d62:	2b04      	cmp	r3, #4
    8d64:	d1fa      	bne.n	8d5c <AESEncode+0x2c>
    8d66:	9b01      	ldr	r3, [sp, #4]
    8d68:	51cb      	str	r3, [r1, r7]
    8d6a:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8d6c:	2910      	cmp	r1, #16
    8d6e:	d1f3      	bne.n	8d58 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    8d70:	4d1f      	ldr	r5, [pc, #124]	; (8df0 <AESEncode+0xc0>)
    8d72:	4921      	ldr	r1, [pc, #132]	; (8df8 <AESEncode+0xc8>)
    8d74:	0028      	movs	r0, r5
    8d76:	4b21      	ldr	r3, [pc, #132]	; (8dfc <AESEncode+0xcc>)
    8d78:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    8d7a:	682a      	ldr	r2, [r5, #0]
    8d7c:	7913      	ldrb	r3, [r2, #4]
    8d7e:	2102      	movs	r1, #2
    8d80:	430b      	orrs	r3, r1
    8d82:	7113      	strb	r3, [r2, #4]
    8d84:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    8d86:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    8d88:	4e1b      	ldr	r6, [pc, #108]	; (8df8 <AESEncode+0xc8>)
    8d8a:	1860      	adds	r0, r4, r1
    8d8c:	2300      	movs	r3, #0
    8d8e:	5cc2      	ldrb	r2, [r0, r3]
    8d90:	555a      	strb	r2, [r3, r5]
    8d92:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    8d94:	2b04      	cmp	r3, #4
    8d96:	d1fa      	bne.n	8d8e <AESEncode+0x5e>
    8d98:	9b01      	ldr	r3, [sp, #4]
    8d9a:	518b      	str	r3, [r1, r6]
    8d9c:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    8d9e:	2910      	cmp	r1, #16
    8da0:	d1f3      	bne.n	8d8a <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    8da2:	4d13      	ldr	r5, [pc, #76]	; (8df0 <AESEncode+0xc0>)
    8da4:	4914      	ldr	r1, [pc, #80]	; (8df8 <AESEncode+0xc8>)
    8da6:	0028      	movs	r0, r5
    8da8:	4b15      	ldr	r3, [pc, #84]	; (8e00 <AESEncode+0xd0>)
    8daa:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    8dac:	682d      	ldr	r5, [r5, #0]
    8dae:	792b      	ldrb	r3, [r5, #4]
    8db0:	2202      	movs	r2, #2
    8db2:	4393      	bics	r3, r2
    8db4:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    8db6:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    8db8:	2002      	movs	r0, #2
    8dba:	e001      	b.n	8dc0 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    8dbc:	4211      	tst	r1, r2
    8dbe:	d107      	bne.n	8dd0 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    8dc0:	79eb      	ldrb	r3, [r5, #7]
    8dc2:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    8dc4:	000a      	movs	r2, r1
    8dc6:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    8dc8:	4218      	tst	r0, r3
    8dca:	d0f7      	beq.n	8dbc <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    8dcc:	4302      	orrs	r2, r0
    8dce:	e7f5      	b.n	8dbc <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    8dd0:	4d09      	ldr	r5, [pc, #36]	; (8df8 <AESEncode+0xc8>)
    8dd2:	0029      	movs	r1, r5
    8dd4:	4806      	ldr	r0, [pc, #24]	; (8df0 <AESEncode+0xc0>)
    8dd6:	4b0b      	ldr	r3, [pc, #44]	; (8e04 <AESEncode+0xd4>)
    8dd8:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    8dda:	2210      	movs	r2, #16
    8ddc:	0029      	movs	r1, r5
    8dde:	0020      	movs	r0, r4
    8de0:	4b09      	ldr	r3, [pc, #36]	; (8e08 <AESEncode+0xd8>)
    8de2:	4798      	blx	r3
#endif	
}
    8de4:	b003      	add	sp, #12
    8de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8de8:	20001490 	.word	0x20001490
    8dec:	42003400 	.word	0x42003400
    8df0:	2000149c 	.word	0x2000149c
    8df4:	00000969 	.word	0x00000969
    8df8:	20000dbc 	.word	0x20000dbc
    8dfc:	000009fd 	.word	0x000009fd
    8e00:	00000a31 	.word	0x00000a31
    8e04:	00000a81 	.word	0x00000a81
    8e08:	00013ba5 	.word	0x00013ba5

00008e0c <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    8e0c:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    8e0e:	4d07      	ldr	r5, [pc, #28]	; (8e2c <AESInit+0x20>)
    8e10:	0028      	movs	r0, r5
    8e12:	4b07      	ldr	r3, [pc, #28]	; (8e30 <AESInit+0x24>)
    8e14:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    8e16:	4c07      	ldr	r4, [pc, #28]	; (8e34 <AESInit+0x28>)
    8e18:	002a      	movs	r2, r5
    8e1a:	4907      	ldr	r1, [pc, #28]	; (8e38 <AESInit+0x2c>)
    8e1c:	0020      	movs	r0, r4
    8e1e:	4b07      	ldr	r3, [pc, #28]	; (8e3c <AESInit+0x30>)
    8e20:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    8e22:	0020      	movs	r0, r4
    8e24:	4b06      	ldr	r3, [pc, #24]	; (8e40 <AESInit+0x34>)
    8e26:	4798      	blx	r3
#endif	
}
    8e28:	bd70      	pop	{r4, r5, r6, pc}
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	20001490 	.word	0x20001490
    8e30:	0000092d 	.word	0x0000092d
    8e34:	2000149c 	.word	0x2000149c
    8e38:	42003400 	.word	0x42003400
    8e3c:	000009dd 	.word	0x000009dd
    8e40:	00000947 	.word	0x00000947

00008e44 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    8e44:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    8e46:	4b03      	ldr	r3, [pc, #12]	; (8e54 <PDS_Init+0x10>)
    8e48:	4798      	blx	r3
	pdsUnInitFlag = false;
    8e4a:	2200      	movs	r2, #0
    8e4c:	4b02      	ldr	r3, [pc, #8]	; (8e58 <PDS_Init+0x14>)
    8e4e:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    8e50:	bd10      	pop	{r4, pc}
    8e52:	46c0      	nop			; (mov r8, r8)
    8e54:	000093c1 	.word	0x000093c1
    8e58:	20000dcc 	.word	0x20000dcc

00008e5c <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    8e5c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8e5e:	4b14      	ldr	r3, [pc, #80]	; (8eb0 <PDS_Store+0x54>)
    8e60:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8e62:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8e64:	2a00      	cmp	r2, #0
    8e66:	d106      	bne.n	8e76 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8e68:	0102      	lsls	r2, r0, #4
    8e6a:	4b12      	ldr	r3, [pc, #72]	; (8eb4 <PDS_Store+0x58>)
    8e6c:	189b      	adds	r3, r3, r2
    8e6e:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8e70:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8e72:	2a00      	cmp	r2, #0
    8e74:	d101      	bne.n	8e7a <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    8e76:	0018      	movs	r0, r3
    8e78:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8e7a:	0103      	lsls	r3, r0, #4
    8e7c:	4a0d      	ldr	r2, [pc, #52]	; (8eb4 <PDS_Store+0x58>)
    8e7e:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8e80:	2c00      	cmp	r4, #0
    8e82:	d011      	beq.n	8ea8 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    8e84:	001a      	movs	r2, r3
    8e86:	4b0b      	ldr	r3, [pc, #44]	; (8eb4 <PDS_Store+0x58>)
    8e88:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8e8a:	689b      	ldr	r3, [r3, #8]
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	d00d      	beq.n	8eac <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    8e90:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    8e92:	280b      	cmp	r0, #11
    8e94:	d8ef      	bhi.n	8e76 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    8e96:	3b04      	subs	r3, #4
    8e98:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    8e9a:	4a07      	ldr	r2, [pc, #28]	; (8eb8 <PDS_Store+0x5c>)
    8e9c:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    8e9e:	2001      	movs	r0, #1
    8ea0:	4b06      	ldr	r3, [pc, #24]	; (8ebc <PDS_Store+0x60>)
    8ea2:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    8ea4:	2300      	movs	r3, #0
    8ea6:	e7e6      	b.n	8e76 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    8ea8:	2305      	movs	r3, #5
    8eaa:	e7e4      	b.n	8e76 <PDS_Store+0x1a>
    8eac:	2305      	movs	r3, #5
    8eae:	e7e2      	b.n	8e76 <PDS_Store+0x1a>
    8eb0:	20000dcc 	.word	0x20000dcc
    8eb4:	200014b0 	.word	0x200014b0
    8eb8:	200014a4 	.word	0x200014a4
    8ebc:	00009099 	.word	0x00009099

00008ec0 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    8ec0:	b084      	sub	sp, #16
    8ec2:	b510      	push	{r4, lr}
    8ec4:	9103      	str	r1, [sp, #12]
    8ec6:	9204      	str	r2, [sp, #16]
    8ec8:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8eca:	4b0b      	ldr	r3, [pc, #44]	; (8ef8 <PDS_RegFile+0x38>)
    8ecc:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8ece:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8ed0:	2a00      	cmp	r2, #0
    8ed2:	d102      	bne.n	8eda <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8ed4:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    8ed6:	280b      	cmp	r0, #11
    8ed8:	d904      	bls.n	8ee4 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    8eda:	0018      	movs	r0, r3
    8edc:	bc10      	pop	{r4}
    8ede:	bc08      	pop	{r3}
    8ee0:	b004      	add	sp, #16
    8ee2:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    8ee4:	0100      	lsls	r0, r0, #4
    8ee6:	aa03      	add	r2, sp, #12
    8ee8:	4b04      	ldr	r3, [pc, #16]	; (8efc <PDS_RegFile+0x3c>)
    8eea:	1818      	adds	r0, r3, r0
    8eec:	ca1a      	ldmia	r2!, {r1, r3, r4}
    8eee:	c01a      	stmia	r0!, {r1, r3, r4}
    8ef0:	6813      	ldr	r3, [r2, #0]
    8ef2:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    8ef4:	2300      	movs	r3, #0
    8ef6:	e7f0      	b.n	8eda <PDS_RegFile+0x1a>
    8ef8:	20000dcc 	.word	0x20000dcc
    8efc:	200014b0 	.word	0x200014b0

00008f00 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    8f00:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8f02:	4b09      	ldr	r3, [pc, #36]	; (8f28 <PDS_UnRegFile+0x28>)
    8f04:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8f06:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    8f08:	2a00      	cmp	r2, #0
    8f0a:	d102      	bne.n	8f12 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    8f0c:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    8f0e:	280b      	cmp	r0, #11
    8f10:	d901      	bls.n	8f16 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    8f12:	0018      	movs	r0, r3
    8f14:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    8f16:	0100      	lsls	r0, r0, #4
    8f18:	4b04      	ldr	r3, [pc, #16]	; (8f2c <PDS_UnRegFile+0x2c>)
    8f1a:	18c0      	adds	r0, r0, r3
    8f1c:	3210      	adds	r2, #16
    8f1e:	2100      	movs	r1, #0
    8f20:	4b03      	ldr	r3, [pc, #12]	; (8f30 <PDS_UnRegFile+0x30>)
    8f22:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    8f24:	2300      	movs	r3, #0
    8f26:	e7f4      	b.n	8f12 <PDS_UnRegFile+0x12>
    8f28:	20000dcc 	.word	0x20000dcc
    8f2c:	200014b0 	.word	0x200014b0
    8f30:	00013c29 	.word	0x00013c29

00008f34 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    8f34:	b500      	push	{lr}
    8f36:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    8f38:	4668      	mov	r0, sp
    8f3a:	4b0b      	ldr	r3, [pc, #44]	; (8f68 <pdsNvmInit+0x34>)
    8f3c:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    8f3e:	2000      	movs	r0, #0
    8f40:	4b0a      	ldr	r3, [pc, #40]	; (8f6c <pdsNvmInit+0x38>)
    8f42:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    8f44:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    8f46:	2800      	cmp	r0, #0
    8f48:	d002      	beq.n	8f50 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    8f4a:	0018      	movs	r0, r3
    8f4c:	b005      	add	sp, #20
    8f4e:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    8f50:	466b      	mov	r3, sp
    8f52:	899a      	ldrh	r2, [r3, #12]
    8f54:	0892      	lsrs	r2, r2, #2
    8f56:	0212      	lsls	r2, r2, #8
    8f58:	4905      	ldr	r1, [pc, #20]	; (8f70 <pdsNvmInit+0x3c>)
	return status;
    8f5a:	0fd3      	lsrs	r3, r2, #31
    8f5c:	17c8      	asrs	r0, r1, #31
    8f5e:	4291      	cmp	r1, r2
    8f60:	4143      	adcs	r3, r0
    8f62:	009b      	lsls	r3, r3, #2
    8f64:	e7f1      	b.n	8f4a <pdsNvmInit+0x16>
    8f66:	46c0      	nop			; (mov r8, r8)
    8f68:	00000fcd 	.word	0x00000fcd
    8f6c:	0000a4f9 	.word	0x0000a4f9
    8f70:	00001fff 	.word	0x00001fff

00008f74 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    8f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f76:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    8f78:	2380      	movs	r3, #128	; 0x80
    8f7a:	01db      	lsls	r3, r3, #7
    8f7c:	469c      	mov	ip, r3
    8f7e:	4460      	add	r0, ip
    8f80:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    8f82:	2380      	movs	r3, #128	; 0x80
    8f84:	005b      	lsls	r3, r3, #1
    8f86:	429a      	cmp	r2, r3
    8f88:	d00e      	beq.n	8fa8 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    8f8a:	3204      	adds	r2, #4
    8f8c:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8f8e:	4f1e      	ldr	r7, [pc, #120]	; (9008 <pdsNvmRead+0x94>)
    8f90:	0033      	movs	r3, r6
    8f92:	0022      	movs	r2, r4
    8f94:	0029      	movs	r1, r5
    8f96:	2000      	movs	r0, #0
    8f98:	47b8      	blx	r7
    8f9a:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    8f9c:	2b05      	cmp	r3, #5
    8f9e:	d0f7      	beq.n	8f90 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    8fa0:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d00b      	beq.n	8fbe <pdsNvmRead+0x4a>
}
    8fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8fa8:	001e      	movs	r6, r3
    8faa:	4f17      	ldr	r7, [pc, #92]	; (9008 <pdsNvmRead+0x94>)
    8fac:	0033      	movs	r3, r6
    8fae:	0022      	movs	r2, r4
    8fb0:	0029      	movs	r1, r5
    8fb2:	2000      	movs	r0, #0
    8fb4:	47b8      	blx	r7
    8fb6:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    8fb8:	2b05      	cmp	r3, #5
    8fba:	d0f7      	beq.n	8fac <pdsNvmRead+0x38>
    8fbc:	e7f0      	b.n	8fa0 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    8fbe:	7823      	ldrb	r3, [r4, #0]
    8fc0:	7860      	ldrb	r0, [r4, #1]
    8fc2:	0200      	lsls	r0, r0, #8
    8fc4:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    8fc6:	78a6      	ldrb	r6, [r4, #2]
    8fc8:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    8fca:	2e00      	cmp	r6, #0
    8fcc:	d017      	beq.n	8ffe <pdsNvmRead+0x8a>
    8fce:	0025      	movs	r5, r4
    8fd0:	3e01      	subs	r6, #1
    8fd2:	b2b6      	uxth	r6, r6
    8fd4:	3601      	adds	r6, #1
    8fd6:	19a4      	adds	r4, r4, r6
    8fd8:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    8fda:	782b      	ldrb	r3, [r5, #0]
    8fdc:	4073      	eors	r3, r6
    8fde:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    8fe0:	010b      	lsls	r3, r1, #4
    8fe2:	404b      	eors	r3, r1
    8fe4:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8fe6:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8fe8:	091b      	lsrs	r3, r3, #4
    8fea:	00d1      	lsls	r1, r2, #3
    8fec:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    8fee:	0212      	lsls	r2, r2, #8
    8ff0:	0a36      	lsrs	r6, r6, #8
    8ff2:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    8ff4:	4053      	eors	r3, r2
    8ff6:	b29e      	uxth	r6, r3
    8ff8:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    8ffa:	42a5      	cmp	r5, r4
    8ffc:	d1ed      	bne.n	8fda <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    8ffe:	1b80      	subs	r0, r0, r6
    9000:	1e46      	subs	r6, r0, #1
    9002:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    9004:	b2c0      	uxtb	r0, r0
    9006:	e7ce      	b.n	8fa6 <pdsNvmRead+0x32>
    9008:	0000a389 	.word	0x0000a389

0000900c <pdsNvmWrite>:
{
    900c:	b5f0      	push	{r4, r5, r6, r7, lr}
    900e:	46c6      	mov	lr, r8
    9010:	b500      	push	{lr}
    9012:	4680      	mov	r8, r0
    9014:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    9016:	2301      	movs	r3, #1
    9018:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    901a:	708a      	strb	r2, [r1, #2]
    901c:	27ff      	movs	r7, #255	; 0xff
    901e:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    9020:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    9022:	2f00      	cmp	r7, #0
    9024:	d017      	beq.n	9056 <pdsNvmWrite+0x4a>
    9026:	0030      	movs	r0, r6
    9028:	3f01      	subs	r7, #1
    902a:	b2bf      	uxth	r7, r7
    902c:	3701      	adds	r7, #1
    902e:	19f6      	adds	r6, r6, r7
    9030:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    9032:	7803      	ldrb	r3, [r0, #0]
    9034:	407b      	eors	r3, r7
    9036:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    9038:	010b      	lsls	r3, r1, #4
    903a:	404b      	eors	r3, r1
    903c:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    903e:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    9040:	091b      	lsrs	r3, r3, #4
    9042:	00cd      	lsls	r5, r1, #3
    9044:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    9046:	0209      	lsls	r1, r1, #8
    9048:	0a3f      	lsrs	r7, r7, #8
    904a:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    904c:	404b      	eors	r3, r1
    904e:	b29f      	uxth	r7, r3
    9050:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    9052:	42b0      	cmp	r0, r6
    9054:	d1ed      	bne.n	9032 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    9056:	7027      	strb	r7, [r4, #0]
    9058:	0a3f      	lsrs	r7, r7, #8
    905a:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    905c:	3204      	adds	r2, #4
    905e:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    9060:	2180      	movs	r1, #128	; 0x80
    9062:	01c9      	lsls	r1, r1, #7
    9064:	4441      	add	r1, r8
    9066:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    9068:	0033      	movs	r3, r6
    906a:	0022      	movs	r2, r4
    906c:	2000      	movs	r0, #0
    906e:	4f08      	ldr	r7, [pc, #32]	; (9090 <pdsNvmWrite+0x84>)
    9070:	47b8      	blx	r7
		return PDS_ERROR;
    9072:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    9074:	2800      	cmp	r0, #0
    9076:	d003      	beq.n	9080 <pdsNvmWrite+0x74>
}
    9078:	0018      	movs	r0, r3
    907a:	bc04      	pop	{r2}
    907c:	4690      	mov	r8, r2
    907e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    9080:	0032      	movs	r2, r6
    9082:	0021      	movs	r1, r4
    9084:	4640      	mov	r0, r8
    9086:	4b03      	ldr	r3, [pc, #12]	; (9094 <pdsNvmWrite+0x88>)
    9088:	4798      	blx	r3
    908a:	0003      	movs	r3, r0
	return status;
    908c:	e7f4      	b.n	9078 <pdsNvmWrite+0x6c>
    908e:	46c0      	nop			; (mov r8, r8)
    9090:	0000a3e5 	.word	0x0000a3e5
    9094:	00008f75 	.word	0x00008f75

00009098 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    9098:	b510      	push	{r4, lr}
    909a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    909c:	4b05      	ldr	r3, [pc, #20]	; (90b4 <pdsPostTask+0x1c>)
    909e:	4798      	blx	r3
    pdsTaskFlags |= id;
    90a0:	4b05      	ldr	r3, [pc, #20]	; (90b8 <pdsPostTask+0x20>)
    90a2:	7818      	ldrb	r0, [r3, #0]
    90a4:	4320      	orrs	r0, r4
    90a6:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    90a8:	4b04      	ldr	r3, [pc, #16]	; (90bc <pdsPostTask+0x24>)
    90aa:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    90ac:	2008      	movs	r0, #8
    90ae:	4b04      	ldr	r3, [pc, #16]	; (90c0 <pdsPostTask+0x28>)
    90b0:	4798      	blx	r3
}
    90b2:	bd10      	pop	{r4, pc}
    90b4:	00004245 	.word	0x00004245
    90b8:	20000dcd 	.word	0x20000dcd
    90bc:	00004251 	.word	0x00004251
    90c0:	00009f19 	.word	0x00009f19

000090c4 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    90c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90c6:	46de      	mov	lr, fp
    90c8:	4657      	mov	r7, sl
    90ca:	464e      	mov	r6, r9
    90cc:	4645      	mov	r5, r8
    90ce:	b5e0      	push	{r5, r6, r7, lr}
    90d0:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    90d2:	2280      	movs	r2, #128	; 0x80
    90d4:	0052      	lsls	r2, r2, #1
    90d6:	2100      	movs	r1, #0
    90d8:	a804      	add	r0, sp, #16
    90da:	4b54      	ldr	r3, [pc, #336]	; (922c <pdsStoreDeleteHandler+0x168>)
    90dc:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    90de:	4b54      	ldr	r3, [pc, #336]	; (9230 <pdsStoreDeleteHandler+0x16c>)
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	2b00      	cmp	r3, #0
    90e4:	d112      	bne.n	910c <pdsStoreDeleteHandler+0x48>
    90e6:	2401      	movs	r4, #1
    90e8:	4a51      	ldr	r2, [pc, #324]	; (9230 <pdsStoreDeleteHandler+0x16c>)
    90ea:	9400      	str	r4, [sp, #0]
    90ec:	5d13      	ldrb	r3, [r2, r4]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d10f      	bne.n	9112 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    90f2:	3401      	adds	r4, #1
    90f4:	b2e4      	uxtb	r4, r4
    90f6:	2c0b      	cmp	r4, #11
    90f8:	d9f7      	bls.n	90ea <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    90fa:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    90fc:	0028      	movs	r0, r5
    90fe:	b045      	add	sp, #276	; 0x114
    9100:	bc3c      	pop	{r2, r3, r4, r5}
    9102:	4690      	mov	r8, r2
    9104:	4699      	mov	r9, r3
    9106:	46a2      	mov	sl, r4
    9108:	46ab      	mov	fp, r5
    910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    910c:	2300      	movs	r3, #0
    910e:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    9110:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    9112:	9b00      	ldr	r3, [sp, #0]
    9114:	011a      	lsls	r2, r3, #4
    9116:	4b47      	ldr	r3, [pc, #284]	; (9234 <pdsStoreDeleteHandler+0x170>)
    9118:	189b      	adds	r3, r3, r2
    911a:	7919      	ldrb	r1, [r3, #4]
    911c:	4a46      	ldr	r2, [pc, #280]	; (9238 <pdsStoreDeleteHandler+0x174>)
    911e:	4694      	mov	ip, r2
    9120:	4461      	add	r1, ip
    9122:	00c9      	lsls	r1, r1, #3
    9124:	689b      	ldr	r3, [r3, #8]
    9126:	1859      	adds	r1, r3, r1
    9128:	2208      	movs	r2, #8
    912a:	a802      	add	r0, sp, #8
    912c:	4b43      	ldr	r3, [pc, #268]	; (923c <pdsStoreDeleteHandler+0x178>)
    912e:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    9130:	ab02      	add	r3, sp, #8
    9132:	79da      	ldrb	r2, [r3, #7]
    9134:	799b      	ldrb	r3, [r3, #6]
    9136:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    9138:	3205      	adds	r2, #5
    913a:	a904      	add	r1, sp, #16
    913c:	0020      	movs	r0, r4
    913e:	4b40      	ldr	r3, [pc, #256]	; (9240 <pdsStoreDeleteHandler+0x17c>)
    9140:	4798      	blx	r3
    9142:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    9144:	d111      	bne.n	916a <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9146:	9b00      	ldr	r3, [sp, #0]
    9148:	011a      	lsls	r2, r3, #4
    914a:	4b3a      	ldr	r3, [pc, #232]	; (9234 <pdsStoreDeleteHandler+0x170>)
    914c:	189b      	adds	r3, r3, r2
    914e:	791b      	ldrb	r3, [r3, #4]
    9150:	2500      	movs	r5, #0
    9152:	2b00      	cmp	r3, #0
    9154:	d04a      	beq.n	91ec <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    9156:	4b37      	ldr	r3, [pc, #220]	; (9234 <pdsStoreDeleteHandler+0x170>)
    9158:	4699      	mov	r9, r3
    915a:	9b00      	ldr	r3, [sp, #0]
    915c:	011e      	lsls	r6, r3, #4
    915e:	46b3      	mov	fp, r6
    9160:	44cb      	add	fp, r9
    9162:	4b36      	ldr	r3, [pc, #216]	; (923c <pdsStoreDeleteHandler+0x178>)
    9164:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9166:	465f      	mov	r7, fp
    9168:	e01b      	b.n	91a2 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    916a:	2803      	cmp	r0, #3
    916c:	d144      	bne.n	91f8 <pdsStoreDeleteHandler+0x134>
    916e:	e7ea      	b.n	9146 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    9170:	2100      	movs	r1, #0
    9172:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    9174:	ab02      	add	r3, sp, #8
    9176:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    9178:	795b      	ldrb	r3, [r3, #5]
    917a:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    917c:	23a5      	movs	r3, #165	; 0xa5
    917e:	7003      	strb	r3, [r0, #0]
    9180:	2301      	movs	r3, #1
    9182:	7043      	strb	r3, [r0, #1]
    9184:	7082      	strb	r2, [r0, #2]
    9186:	4643      	mov	r3, r8
    9188:	70c3      	strb	r3, [r0, #3]
    918a:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    918c:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    918e:	9b02      	ldr	r3, [sp, #8]
    9190:	9301      	str	r3, [sp, #4]
    9192:	0019      	movs	r1, r3
    9194:	4b29      	ldr	r3, [pc, #164]	; (923c <pdsStoreDeleteHandler+0x178>)
    9196:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    9198:	3501      	adds	r5, #1
    919a:	b2ed      	uxtb	r5, r5
    919c:	793b      	ldrb	r3, [r7, #4]
    919e:	42ab      	cmp	r3, r5
    91a0:	d924      	bls.n	91ec <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    91a2:	00e9      	lsls	r1, r5, #3
    91a4:	465b      	mov	r3, fp
    91a6:	689b      	ldr	r3, [r3, #8]
    91a8:	469c      	mov	ip, r3
    91aa:	4461      	add	r1, ip
    91ac:	2208      	movs	r2, #8
    91ae:	a802      	add	r0, sp, #8
    91b0:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    91b2:	ab02      	add	r3, sp, #8
    91b4:	79d8      	ldrb	r0, [r3, #7]
    91b6:	2315      	movs	r3, #21
    91b8:	aa02      	add	r2, sp, #8
    91ba:	4694      	mov	ip, r2
    91bc:	4463      	add	r3, ip
    91be:	469c      	mov	ip, r3
    91c0:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    91c2:	464b      	mov	r3, r9
    91c4:	58f3      	ldr	r3, [r6, r3]
    91c6:	195b      	adds	r3, r3, r5
    91c8:	781a      	ldrb	r2, [r3, #0]
    91ca:	2a01      	cmp	r2, #1
    91cc:	d0d0      	beq.n	9170 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    91ce:	2a02      	cmp	r2, #2
    91d0:	d1e2      	bne.n	9198 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    91d2:	2200      	movs	r2, #0
    91d4:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    91d6:	ab02      	add	r3, sp, #8
    91d8:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    91da:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    91dc:	23a5      	movs	r3, #165	; 0xa5
    91de:	7003      	strb	r3, [r0, #0]
    91e0:	3ba4      	subs	r3, #164	; 0xa4
    91e2:	7043      	strb	r3, [r0, #1]
    91e4:	7081      	strb	r1, [r0, #2]
    91e6:	70c2      	strb	r2, [r0, #3]
    91e8:	7103      	strb	r3, [r0, #4]
    91ea:	e7d5      	b.n	9198 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    91ec:	22f3      	movs	r2, #243	; 0xf3
    91ee:	a904      	add	r1, sp, #16
    91f0:	0020      	movs	r0, r4
    91f2:	4b14      	ldr	r3, [pc, #80]	; (9244 <pdsStoreDeleteHandler+0x180>)
    91f4:	4798      	blx	r3
    91f6:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    91f8:	2200      	movs	r2, #0
    91fa:	4b0d      	ldr	r3, [pc, #52]	; (9230 <pdsStoreDeleteHandler+0x16c>)
    91fc:	9900      	ldr	r1, [sp, #0]
    91fe:	545a      	strb	r2, [r3, r1]
			fileId++;
    9200:	3401      	adds	r4, #1
    9202:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9204:	2b0b      	cmp	r3, #11
    9206:	d900      	bls.n	920a <pdsStoreDeleteHandler+0x146>
    9208:	e778      	b.n	90fc <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    920a:	4a09      	ldr	r2, [pc, #36]	; (9230 <pdsStoreDeleteHandler+0x16c>)
    920c:	5cd2      	ldrb	r2, [r2, r3]
    920e:	2a00      	cmp	r2, #0
    9210:	d108      	bne.n	9224 <pdsStoreDeleteHandler+0x160>
    9212:	4907      	ldr	r1, [pc, #28]	; (9230 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    9214:	3301      	adds	r3, #1
    9216:	b2db      	uxtb	r3, r3
    9218:	2b0b      	cmp	r3, #11
    921a:	d900      	bls.n	921e <pdsStoreDeleteHandler+0x15a>
    921c:	e76e      	b.n	90fc <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    921e:	5cca      	ldrb	r2, [r1, r3]
    9220:	2a00      	cmp	r2, #0
    9222:	d0f7      	beq.n	9214 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    9224:	2001      	movs	r0, #1
    9226:	4b08      	ldr	r3, [pc, #32]	; (9248 <pdsStoreDeleteHandler+0x184>)
    9228:	4798      	blx	r3
			break;
    922a:	e767      	b.n	90fc <pdsStoreDeleteHandler+0x38>
    922c:	00013c29 	.word	0x00013c29
    9230:	200014a4 	.word	0x200014a4
    9234:	200014b0 	.word	0x200014b0
    9238:	1fffffff 	.word	0x1fffffff
    923c:	00013ba5 	.word	0x00013ba5
    9240:	0000955d 	.word	0x0000955d
    9244:	0000946d 	.word	0x0000946d
    9248:	00009099 	.word	0x00009099

0000924c <PDS_TaskHandler>:
{
    924c:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    924e:	4b0e      	ldr	r3, [pc, #56]	; (9288 <PDS_TaskHandler+0x3c>)
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	2b00      	cmp	r3, #0
    9254:	d003      	beq.n	925e <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    9256:	4b0c      	ldr	r3, [pc, #48]	; (9288 <PDS_TaskHandler+0x3c>)
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	07db      	lsls	r3, r3, #31
    925c:	d401      	bmi.n	9262 <PDS_TaskHandler+0x16>
}
    925e:	2000      	movs	r0, #0
    9260:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    9262:	4b0a      	ldr	r3, [pc, #40]	; (928c <PDS_TaskHandler+0x40>)
    9264:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    9266:	4c08      	ldr	r4, [pc, #32]	; (9288 <PDS_TaskHandler+0x3c>)
    9268:	7823      	ldrb	r3, [r4, #0]
    926a:	2201      	movs	r2, #1
    926c:	4393      	bics	r3, r2
    926e:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    9270:	4b07      	ldr	r3, [pc, #28]	; (9290 <PDS_TaskHandler+0x44>)
    9272:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    9274:	4b07      	ldr	r3, [pc, #28]	; (9294 <PDS_TaskHandler+0x48>)
    9276:	4798      	blx	r3
				if (pdsTaskFlags)
    9278:	7823      	ldrb	r3, [r4, #0]
    927a:	2b00      	cmp	r3, #0
    927c:	d0ef      	beq.n	925e <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    927e:	2008      	movs	r0, #8
    9280:	4b05      	ldr	r3, [pc, #20]	; (9298 <PDS_TaskHandler+0x4c>)
    9282:	4798      	blx	r3
    9284:	e7eb      	b.n	925e <PDS_TaskHandler+0x12>
    9286:	46c0      	nop			; (mov r8, r8)
    9288:	20000dcd 	.word	0x20000dcd
    928c:	00004245 	.word	0x00004245
    9290:	00004251 	.word	0x00004251
    9294:	000090c5 	.word	0x000090c5
    9298:	00009f19 	.word	0x00009f19

0000929c <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    929c:	b5f0      	push	{r4, r5, r6, r7, lr}
    929e:	4e12      	ldr	r6, [pc, #72]	; (92e8 <pdsUpdateRowMap+0x4c>)
    92a0:	0037      	movs	r7, r6
    92a2:	3718      	adds	r7, #24
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    92a4:	4d11      	ldr	r5, [pc, #68]	; (92ec <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    92a6:	4b12      	ldr	r3, [pc, #72]	; (92f0 <pdsUpdateRowMap+0x54>)
    92a8:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    92aa:	2101      	movs	r1, #1
    92ac:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    92ae:	0018      	movs	r0, r3
    92b0:	e002      	b.n	92b8 <pdsUpdateRowMap+0x1c>
    92b2:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    92b4:	42be      	cmp	r6, r7
    92b6:	d015      	beq.n	92e4 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    92b8:	8833      	ldrh	r3, [r6, #0]
    92ba:	42ab      	cmp	r3, r5
    92bc:	d0f9      	beq.n	92b2 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    92be:	00db      	lsls	r3, r3, #3
    92c0:	4463      	add	r3, ip
    92c2:	001a      	movs	r2, r3
    92c4:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    92c6:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    92c8:	42ab      	cmp	r3, r5
    92ca:	d0f2      	beq.n	92b2 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    92cc:	001a      	movs	r2, r3
    92ce:	00db      	lsls	r3, r3, #3
    92d0:	18c3      	adds	r3, r0, r3
    92d2:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    92d4:	00d2      	lsls	r2, r2, #3
    92d6:	1884      	adds	r4, r0, r2
    92d8:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    92da:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    92dc:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    92de:	42ab      	cmp	r3, r5
    92e0:	d1f4      	bne.n	92cc <pdsUpdateRowMap+0x30>
    92e2:	e7e6      	b.n	92b2 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    92e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e6:	46c0      	nop			; (mov r8, r8)
    92e8:	20000dd0 	.word	0x20000dd0
    92ec:	0000ffff 	.word	0x0000ffff
    92f0:	20000de8 	.word	0x20000de8

000092f4 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    92f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92f6:	46c6      	mov	lr, r8
    92f8:	b500      	push	{lr}
    92fa:	b082      	sub	sp, #8
    92fc:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    92fe:	8881      	ldrh	r1, [r0, #4]
    9300:	004a      	lsls	r2, r1, #1
    9302:	4b2c      	ldr	r3, [pc, #176]	; (93b4 <pdsUpdateFileMap+0xc0>)
    9304:	5ad3      	ldrh	r3, [r2, r3]
    9306:	4a2c      	ldr	r2, [pc, #176]	; (93b8 <pdsUpdateFileMap+0xc4>)
    9308:	4293      	cmp	r3, r2
    930a:	d02c      	beq.n	9366 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    930c:	4a2b      	ldr	r2, [pc, #172]	; (93bc <pdsUpdateFileMap+0xc8>)
    930e:	00d8      	lsls	r0, r3, #3
    9310:	5880      	ldr	r0, [r0, r2]
    9312:	4664      	mov	r4, ip
    9314:	88e4      	ldrh	r4, [r4, #6]
    9316:	46a0      	mov	r8, r4
    9318:	00e4      	lsls	r4, r4, #3
    931a:	58a6      	ldr	r6, [r4, r2]
    931c:	42b0      	cmp	r0, r6
    931e:	d327      	bcc.n	9370 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    9320:	d02f      	beq.n	9382 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    9322:	4a26      	ldr	r2, [pc, #152]	; (93bc <pdsUpdateFileMap+0xc8>)
    9324:	00dd      	lsls	r5, r3, #3
    9326:	3506      	adds	r5, #6
    9328:	1950      	adds	r0, r2, r5
    932a:	9001      	str	r0, [sp, #4]
    932c:	00db      	lsls	r3, r3, #3
    932e:	18d3      	adds	r3, r2, r3
    9330:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    9332:	4b21      	ldr	r3, [pc, #132]	; (93b8 <pdsUpdateFileMap+0xc4>)
    9334:	429a      	cmp	r2, r3
    9336:	d028      	beq.n	938a <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9338:	0013      	movs	r3, r2
    933a:	00d0      	lsls	r0, r2, #3
    933c:	4c1f      	ldr	r4, [pc, #124]	; (93bc <pdsUpdateFileMap+0xc8>)
    933e:	5900      	ldr	r0, [r0, r4]
    9340:	4286      	cmp	r6, r0
    9342:	d226      	bcs.n	9392 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    9344:	4c1d      	ldr	r4, [pc, #116]	; (93bc <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    9346:	4f1c      	ldr	r7, [pc, #112]	; (93b8 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9348:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    934a:	00db      	lsls	r3, r3, #3
    934c:	1d99      	adds	r1, r3, #6
    934e:	1861      	adds	r1, r4, r1
    9350:	18e3      	adds	r3, r4, r3
    9352:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    9354:	42ba      	cmp	r2, r7
    9356:	d019      	beq.n	938c <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    9358:	0013      	movs	r3, r2
    935a:	00d5      	lsls	r5, r2, #3
    935c:	582d      	ldr	r5, [r5, r0]
    935e:	42ae      	cmp	r6, r5
    9360:	d21b      	bcs.n	939a <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    9362:	9101      	str	r1, [sp, #4]
    9364:	e7f1      	b.n	934a <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    9366:	88c2      	ldrh	r2, [r0, #6]
    9368:	0049      	lsls	r1, r1, #1
    936a:	4b12      	ldr	r3, [pc, #72]	; (93b4 <pdsUpdateFileMap+0xc0>)
    936c:	52ca      	strh	r2, [r1, r3]
    936e:	e008      	b.n	9382 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    9370:	4a12      	ldr	r2, [pc, #72]	; (93bc <pdsUpdateFileMap+0xc8>)
    9372:	1912      	adds	r2, r2, r4
    9374:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    9376:	4663      	mov	r3, ip
    9378:	88d9      	ldrh	r1, [r3, #6]
    937a:	889b      	ldrh	r3, [r3, #4]
    937c:	005b      	lsls	r3, r3, #1
    937e:	4a0d      	ldr	r2, [pc, #52]	; (93b4 <pdsUpdateFileMap+0xc0>)
    9380:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    9382:	b002      	add	sp, #8
    9384:	bc04      	pop	{r2}
    9386:	4690      	mov	r8, r2
    9388:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    938a:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    938c:	4643      	mov	r3, r8
    938e:	800b      	strh	r3, [r1, #0]
				break;
    9390:	e7f7      	b.n	9382 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    9392:	0049      	lsls	r1, r1, #1
    9394:	4d07      	ldr	r5, [pc, #28]	; (93b4 <pdsUpdateFileMap+0xc0>)
    9396:	186b      	adds	r3, r5, r1
    9398:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    939a:	4908      	ldr	r1, [pc, #32]	; (93bc <pdsUpdateFileMap+0xc8>)
    939c:	9b01      	ldr	r3, [sp, #4]
    939e:	881b      	ldrh	r3, [r3, #0]
    93a0:	00db      	lsls	r3, r3, #3
    93a2:	18cb      	adds	r3, r1, r3
    93a4:	4640      	mov	r0, r8
    93a6:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    93a8:	4663      	mov	r3, ip
    93aa:	88db      	ldrh	r3, [r3, #6]
    93ac:	00db      	lsls	r3, r3, #3
    93ae:	18c9      	adds	r1, r1, r3
    93b0:	80ca      	strh	r2, [r1, #6]
				break;
    93b2:	e7e6      	b.n	9382 <pdsUpdateFileMap+0x8e>
    93b4:	20000dd0 	.word	0x20000dd0
    93b8:	0000ffff 	.word	0x0000ffff
    93bc:	20000de8 	.word	0x20000de8

000093c0 <pdsWlInit>:
{
    93c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93c2:	46c6      	mov	lr, r8
    93c4:	b500      	push	{lr}
    93c6:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    93c8:	4b21      	ldr	r3, [pc, #132]	; (9450 <pdsWlInit+0x90>)
    93ca:	4798      	blx	r3
    93cc:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    93ce:	2800      	cmp	r0, #0
    93d0:	d004      	beq.n	93dc <pdsWlInit+0x1c>
}
    93d2:	9801      	ldr	r0, [sp, #4]
    93d4:	b044      	add	sp, #272	; 0x110
    93d6:	bc04      	pop	{r2}
    93d8:	4690      	mov	r8, r2
    93da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    93dc:	2680      	movs	r6, #128	; 0x80
    93de:	0076      	lsls	r6, r6, #1
    93e0:	4d1c      	ldr	r5, [pc, #112]	; (9454 <pdsWlInit+0x94>)
    93e2:	0032      	movs	r2, r6
    93e4:	21ff      	movs	r1, #255	; 0xff
    93e6:	0028      	movs	r0, r5
    93e8:	4c1b      	ldr	r4, [pc, #108]	; (9458 <pdsWlInit+0x98>)
    93ea:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    93ec:	2218      	movs	r2, #24
    93ee:	21ff      	movs	r1, #255	; 0xff
    93f0:	481a      	ldr	r0, [pc, #104]	; (945c <pdsWlInit+0x9c>)
    93f2:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    93f4:	0032      	movs	r2, r6
    93f6:	2100      	movs	r1, #0
    93f8:	a804      	add	r0, sp, #16
    93fa:	47a0      	blx	r4
    93fc:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    93fe:	4e18      	ldr	r6, [pc, #96]	; (9460 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    9400:	4b18      	ldr	r3, [pc, #96]	; (9464 <pdsWlInit+0xa4>)
    9402:	4698      	mov	r8, r3
    9404:	e003      	b.n	940e <pdsWlInit+0x4e>
    9406:	3401      	adds	r4, #1
    9408:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    940a:	2c20      	cmp	r4, #32
    940c:	d01d      	beq.n	944a <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    940e:	b2a7      	uxth	r7, r4
    9410:	2280      	movs	r2, #128	; 0x80
    9412:	0052      	lsls	r2, r2, #1
    9414:	a904      	add	r1, sp, #16
    9416:	0038      	movs	r0, r7
    9418:	47b0      	blx	r6
		if (PDS_OK == status)
    941a:	2800      	cmp	r0, #0
    941c:	d1f3      	bne.n	9406 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    941e:	a904      	add	r1, sp, #16
    9420:	9b06      	ldr	r3, [sp, #24]
    9422:	0a1b      	lsrs	r3, r3, #8
    9424:	7b0a      	ldrb	r2, [r1, #12]
    9426:	0612      	lsls	r2, r2, #24
    9428:	431a      	orrs	r2, r3
    942a:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    942c:	79c8      	ldrb	r0, [r1, #7]
    942e:	7a0b      	ldrb	r3, [r1, #8]
    9430:	021b      	lsls	r3, r3, #8
    9432:	4303      	orrs	r3, r0
    9434:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    9436:	2101      	movs	r1, #1
    9438:	4249      	negs	r1, r1
    943a:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    943c:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    943e:	aa02      	add	r2, sp, #8
    9440:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    9442:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    9444:	0010      	movs	r0, r2
    9446:	47c0      	blx	r8
    9448:	e7dd      	b.n	9406 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    944a:	4b07      	ldr	r3, [pc, #28]	; (9468 <pdsWlInit+0xa8>)
    944c:	4798      	blx	r3
	return PDS_OK;
    944e:	e7c0      	b.n	93d2 <pdsWlInit+0x12>
    9450:	00008f35 	.word	0x00008f35
    9454:	20000de8 	.word	0x20000de8
    9458:	00013c29 	.word	0x00013c29
    945c:	20000dd0 	.word	0x20000dd0
    9460:	00008f75 	.word	0x00008f75
    9464:	000092f5 	.word	0x000092f5
    9468:	0000929d 	.word	0x0000929d

0000946c <pdsWlWrite>:
{
    946c:	b5f0      	push	{r4, r5, r6, r7, lr}
    946e:	46ce      	mov	lr, r9
    9470:	4647      	mov	r7, r8
    9472:	b580      	push	{r7, lr}
    9474:	b083      	sub	sp, #12
    9476:	0005      	movs	r5, r0
    9478:	000f      	movs	r7, r1
    947a:	4690      	mov	r8, r2
    947c:	4e32      	ldr	r6, [pc, #200]	; (9548 <pdsWlWrite+0xdc>)
    947e:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9480:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9482:	4832      	ldr	r0, [pc, #200]	; (954c <pdsWlWrite+0xe0>)
    9484:	e004      	b.n	9490 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9486:	3401      	adds	r4, #1
    9488:	b2e4      	uxtb	r4, r4
    948a:	3308      	adds	r3, #8
    948c:	2c20      	cmp	r4, #32
    948e:	d055      	beq.n	953c <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9490:	6819      	ldr	r1, [r3, #0]
    9492:	3101      	adds	r1, #1
    9494:	d1f7      	bne.n	9486 <pdsWlWrite+0x1a>
    9496:	88d9      	ldrh	r1, [r3, #6]
    9498:	4281      	cmp	r1, r0
    949a:	d1f4      	bne.n	9486 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    949c:	889a      	ldrh	r2, [r3, #4]
    949e:	4282      	cmp	r2, r0
    94a0:	d1f1      	bne.n	9486 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    94a2:	b2a3      	uxth	r3, r4
    94a4:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    94a6:	7a7e      	ldrb	r6, [r7, #9]
    94a8:	7abb      	ldrb	r3, [r7, #10]
    94aa:	021b      	lsls	r3, r3, #8
    94ac:	4333      	orrs	r3, r6
    94ae:	7afe      	ldrb	r6, [r7, #11]
    94b0:	0436      	lsls	r6, r6, #16
    94b2:	4333      	orrs	r3, r6
    94b4:	7b3e      	ldrb	r6, [r7, #12]
    94b6:	0636      	lsls	r6, r6, #24
    94b8:	431e      	orrs	r6, r3
    94ba:	3601      	adds	r6, #1
    94bc:	727e      	strb	r6, [r7, #9]
    94be:	0a32      	lsrs	r2, r6, #8
    94c0:	72ba      	strb	r2, [r7, #10]
    94c2:	0c32      	lsrs	r2, r6, #16
    94c4:	72fa      	strb	r2, [r7, #11]
    94c6:	0e32      	lsrs	r2, r6, #24
    94c8:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    94ca:	b2ad      	uxth	r5, r5
    94cc:	71fd      	strb	r5, [r7, #7]
    94ce:	2200      	movs	r2, #0
    94d0:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    94d2:	23a5      	movs	r3, #165	; 0xa5
    94d4:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    94d6:	3ba4      	subs	r3, #164	; 0xa4
    94d8:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    94da:	4643      	mov	r3, r8
    94dc:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    94de:	4642      	mov	r2, r8
    94e0:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    94e2:	b292      	uxth	r2, r2
    94e4:	0039      	movs	r1, r7
    94e6:	4648      	mov	r0, r9
    94e8:	4b19      	ldr	r3, [pc, #100]	; (9550 <pdsWlWrite+0xe4>)
    94ea:	4798      	blx	r3
    94ec:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    94ee:	d014      	beq.n	951a <pdsWlWrite+0xae>
}
    94f0:	0038      	movs	r0, r7
    94f2:	b003      	add	sp, #12
    94f4:	bc0c      	pop	{r2, r3}
    94f6:	4690      	mov	r8, r2
    94f8:	4699      	mov	r9, r3
    94fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    94fc:	3401      	adds	r4, #1
    94fe:	b2e4      	uxtb	r4, r4
    9500:	3608      	adds	r6, #8
    9502:	2c20      	cmp	r4, #32
    9504:	d0cd      	beq.n	94a2 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9506:	6832      	ldr	r2, [r6, #0]
    9508:	3201      	adds	r2, #1
    950a:	d1f7      	bne.n	94fc <pdsWlWrite+0x90>
    950c:	88f2      	ldrh	r2, [r6, #6]
    950e:	428a      	cmp	r2, r1
    9510:	d1f4      	bne.n	94fc <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    9512:	88b3      	ldrh	r3, [r6, #4]
    9514:	428b      	cmp	r3, r1
    9516:	d1f1      	bne.n	94fc <pdsWlWrite+0x90>
    9518:	e7c3      	b.n	94a2 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    951a:	4b0b      	ldr	r3, [pc, #44]	; (9548 <pdsWlWrite+0xdc>)
    951c:	00e4      	lsls	r4, r4, #3
    951e:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    9520:	191c      	adds	r4, r3, r4
    9522:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    9524:	2301      	movs	r3, #1
    9526:	425b      	negs	r3, r3
    9528:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    952a:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    952c:	466b      	mov	r3, sp
    952e:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    9530:	464a      	mov	r2, r9
    9532:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    9534:	4668      	mov	r0, sp
    9536:	4b07      	ldr	r3, [pc, #28]	; (9554 <pdsWlWrite+0xe8>)
    9538:	4798      	blx	r3
	return status;
    953a:	e7d9      	b.n	94f0 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    953c:	4b06      	ldr	r3, [pc, #24]	; (9558 <pdsWlWrite+0xec>)
    953e:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    9540:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    9542:	4902      	ldr	r1, [pc, #8]	; (954c <pdsWlWrite+0xe0>)
    9544:	e7df      	b.n	9506 <pdsWlWrite+0x9a>
    9546:	46c0      	nop			; (mov r8, r8)
    9548:	20000de8 	.word	0x20000de8
    954c:	0000ffff 	.word	0x0000ffff
    9550:	0000900d 	.word	0x0000900d
    9554:	000092f5 	.word	0x000092f5
    9558:	0000929d 	.word	0x0000929d

0000955c <pdsWlRead>:
{
    955c:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    955e:	0040      	lsls	r0, r0, #1
    9560:	4b06      	ldr	r3, [pc, #24]	; (957c <pdsWlRead+0x20>)
    9562:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    9564:	4c06      	ldr	r4, [pc, #24]	; (9580 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    9566:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    9568:	42a3      	cmp	r3, r4
    956a:	d100      	bne.n	956e <pdsWlRead+0x12>
}
    956c:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    956e:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    9570:	b292      	uxth	r2, r2
    9572:	0018      	movs	r0, r3
    9574:	4b03      	ldr	r3, [pc, #12]	; (9584 <pdsWlRead+0x28>)
    9576:	4798      	blx	r3
	return status;
    9578:	e7f8      	b.n	956c <pdsWlRead+0x10>
    957a:	46c0      	nop			; (mov r8, r8)
    957c:	20000dd0 	.word	0x20000dd0
    9580:	0000ffff 	.word	0x0000ffff
    9584:	00008f75 	.word	0x00008f75

00009588 <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    9588:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    958a:	2802      	cmp	r0, #2
    958c:	d020      	beq.n	95d0 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    958e:	2803      	cmp	r0, #3
    9590:	d010      	beq.n	95b4 <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    9592:	2001      	movs	r0, #1
    9594:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    9596:	4770      	bx	lr
            LED_Off(ledPin);
    9598:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    959a:	2301      	movs	r3, #1
    959c:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    959e:	4a15      	ldr	r2, [pc, #84]	; (95f4 <set_LED_data+0x6c>)
    95a0:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    95a2:	2000      	movs	r0, #0
    95a4:	e7f7      	b.n	9596 <set_LED_data+0xe>
            LED_Off(ledPin);
    95a6:	2213      	movs	r2, #19
    95a8:	e7f7      	b.n	959a <set_LED_data+0x12>
            LED_On(ledPin);
    95aa:	2212      	movs	r2, #18
    95ac:	e013      	b.n	95d6 <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    95ae:	2001      	movs	r0, #1
    95b0:	4240      	negs	r0, r0
    95b2:	e7f0      	b.n	9596 <set_LED_data+0xe>
    switch(value)
    95b4:	2b01      	cmp	r3, #1
    95b6:	d0f8      	beq.n	95aa <set_LED_data+0x22>
    95b8:	2b00      	cmp	r3, #0
    95ba:	d0ed      	beq.n	9598 <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    95bc:	2112      	movs	r1, #18
    switch(value)
    95be:	2b02      	cmp	r3, #2
    95c0:	d1f5      	bne.n	95ae <set_LED_data+0x26>
            LED_Toggle(ledPin);
    95c2:	b2c9      	uxtb	r1, r1
    95c4:	4b0b      	ldr	r3, [pc, #44]	; (95f4 <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    95c6:	2201      	movs	r2, #1
    95c8:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    95ca:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    95cc:	2000      	movs	r0, #0
    95ce:	e7e2      	b.n	9596 <set_LED_data+0xe>
            LED_On(ledPin);
    95d0:	2213      	movs	r2, #19
    switch(value)
    95d2:	2b01      	cmp	r3, #1
    95d4:	d105      	bne.n	95e2 <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    95d6:	2301      	movs	r3, #1
    95d8:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    95da:	4a06      	ldr	r2, [pc, #24]	; (95f4 <set_LED_data+0x6c>)
    95dc:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    95de:	2000      	movs	r0, #0
    95e0:	e7d9      	b.n	9596 <set_LED_data+0xe>
    switch(value)
    95e2:	2b00      	cmp	r3, #0
    95e4:	d0df      	beq.n	95a6 <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    95e6:	2113      	movs	r1, #19
    switch(value)
    95e8:	2b02      	cmp	r3, #2
    95ea:	d0ea      	beq.n	95c2 <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    95ec:	2001      	movs	r0, #1
    95ee:	4240      	negs	r0, r0
    return status;
    95f0:	e7d1      	b.n	9596 <set_LED_data+0xe>
    95f2:	46c0      	nop			; (mov r8, r8)
    95f4:	40002800 	.word	0x40002800

000095f8 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    95f8:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    95fa:	4b06      	ldr	r3, [pc, #24]	; (9614 <hwTimerExpiryCallback+0x1c>)
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	2b00      	cmp	r3, #0
    9600:	d100      	bne.n	9604 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    9602:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    9604:	2201      	movs	r2, #1
    9606:	4b04      	ldr	r3, [pc, #16]	; (9618 <hwTimerExpiryCallback+0x20>)
    9608:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    960a:	2001      	movs	r0, #1
    960c:	4b03      	ldr	r3, [pc, #12]	; (961c <hwTimerExpiryCallback+0x24>)
    960e:	4798      	blx	r3
}
    9610:	e7f7      	b.n	9602 <hwTimerExpiryCallback+0xa>
    9612:	46c0      	nop			; (mov r8, r8)
    9614:	20000ef8 	.word	0x20000ef8
    9618:	20001722 	.word	0x20001722
    961c:	00009f19 	.word	0x00009f19

00009620 <hwTimerOverflowCallback>:
{
    9620:	b510      	push	{r4, lr}
    9622:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    9624:	4924      	ldr	r1, [pc, #144]	; (96b8 <hwTimerOverflowCallback+0x98>)
    9626:	880a      	ldrh	r2, [r1, #0]
    9628:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    962a:	880b      	ldrh	r3, [r1, #0]
    962c:	3301      	adds	r3, #1
    962e:	b29b      	uxth	r3, r3
    9630:	800b      	strh	r3, [r1, #0]
    9632:	429a      	cmp	r2, r3
    9634:	d903      	bls.n	963e <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    9636:	4a21      	ldr	r2, [pc, #132]	; (96bc <hwTimerOverflowCallback+0x9c>)
    9638:	6813      	ldr	r3, [r2, #0]
    963a:	3301      	adds	r3, #1
    963c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    963e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9642:	425a      	negs	r2, r3
    9644:	4153      	adcs	r3, r2
    9646:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9648:	b672      	cpsid	i
  __ASM volatile ("dmb");
    964a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    964e:	2200      	movs	r2, #0
    9650:	4b1b      	ldr	r3, [pc, #108]	; (96c0 <hwTimerOverflowCallback+0xa0>)
    9652:	701a      	strb	r2, [r3, #0]
	return flags;
    9654:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    9656:	4b1b      	ldr	r3, [pc, #108]	; (96c4 <hwTimerOverflowCallback+0xa4>)
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	2bff      	cmp	r3, #255	; 0xff
    965c:	d00d      	beq.n	967a <hwTimerOverflowCallback+0x5a>
    965e:	0119      	lsls	r1, r3, #4
    9660:	4a19      	ldr	r2, [pc, #100]	; (96c8 <hwTimerOverflowCallback+0xa8>)
    9662:	1852      	adds	r2, r2, r1
    9664:	7b52      	ldrb	r2, [r2, #13]
    9666:	2a00      	cmp	r2, #0
    9668:	d107      	bne.n	967a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    966a:	4a17      	ldr	r2, [pc, #92]	; (96c8 <hwTimerOverflowCallback+0xa8>)
    966c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    966e:	4b12      	ldr	r3, [pc, #72]	; (96b8 <hwTimerOverflowCallback+0x98>)
    9670:	881b      	ldrh	r3, [r3, #0]
    9672:	b29b      	uxth	r3, r3
    9674:	0c02      	lsrs	r2, r0, #16
    9676:	429a      	cmp	r2, r3
    9678:	d00a      	beq.n	9690 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    967a:	23ff      	movs	r3, #255	; 0xff
    967c:	4223      	tst	r3, r4
    967e:	d005      	beq.n	968c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    9680:	2201      	movs	r2, #1
    9682:	4b0f      	ldr	r3, [pc, #60]	; (96c0 <hwTimerOverflowCallback+0xa0>)
    9684:	701a      	strb	r2, [r3, #0]
    9686:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    968a:	b662      	cpsie	i
}
    968c:	b002      	add	sp, #8
    968e:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    9690:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    9692:	28ff      	cmp	r0, #255	; 0xff
    9694:	d909      	bls.n	96aa <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    9696:	4b0d      	ldr	r3, [pc, #52]	; (96cc <hwTimerOverflowCallback+0xac>)
    9698:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    969a:	4b0a      	ldr	r3, [pc, #40]	; (96c4 <hwTimerOverflowCallback+0xa4>)
    969c:	681a      	ldr	r2, [r3, #0]
    969e:	0112      	lsls	r2, r2, #4
    96a0:	4b09      	ldr	r3, [pc, #36]	; (96c8 <hwTimerOverflowCallback+0xa8>)
    96a2:	189b      	adds	r3, r3, r2
    96a4:	2201      	movs	r2, #1
    96a6:	735a      	strb	r2, [r3, #13]
    96a8:	e7e7      	b.n	967a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    96aa:	2201      	movs	r2, #1
    96ac:	4b08      	ldr	r3, [pc, #32]	; (96d0 <hwTimerOverflowCallback+0xb0>)
    96ae:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    96b0:	2001      	movs	r0, #1
    96b2:	4b08      	ldr	r3, [pc, #32]	; (96d4 <hwTimerOverflowCallback+0xb4>)
    96b4:	4798      	blx	r3
    96b6:	e7e0      	b.n	967a <hwTimerOverflowCallback+0x5a>
    96b8:	20001720 	.word	0x20001720
    96bc:	20001724 	.word	0x20001724
    96c0:	20000008 	.word	0x20000008
    96c4:	20000ef4 	.word	0x20000ef4
    96c8:	20001590 	.word	0x20001590
    96cc:	0000ac69 	.word	0x0000ac69
    96d0:	20001722 	.word	0x20001722
    96d4:	00009f19 	.word	0x00009f19

000096d8 <loadHwTimer>:
{
    96d8:	b570      	push	{r4, r5, r6, lr}
    96da:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    96dc:	28ff      	cmp	r0, #255	; 0xff
    96de:	d030      	beq.n	9742 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    96e0:	4b19      	ldr	r3, [pc, #100]	; (9748 <loadHwTimer+0x70>)
    96e2:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    96e4:	4b19      	ldr	r3, [pc, #100]	; (974c <loadHwTimer+0x74>)
    96e6:	881d      	ldrh	r5, [r3, #0]
    96e8:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    96ea:	4b19      	ldr	r3, [pc, #100]	; (9750 <loadHwTimer+0x78>)
    96ec:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    96ee:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    96f0:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    96f2:	4a18      	ldr	r2, [pc, #96]	; (9754 <loadHwTimer+0x7c>)
    96f4:	589b      	ldr	r3, [r3, r2]
    96f6:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    96f8:	4b17      	ldr	r3, [pc, #92]	; (9758 <loadHwTimer+0x80>)
    96fa:	4298      	cmp	r0, r3
    96fc:	d81a      	bhi.n	9734 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    96fe:	0122      	lsls	r2, r4, #4
    9700:	4b14      	ldr	r3, [pc, #80]	; (9754 <loadHwTimer+0x7c>)
    9702:	189b      	adds	r3, r3, r2
    9704:	7b5b      	ldrb	r3, [r3, #13]
    9706:	2b00      	cmp	r3, #0
    9708:	d11d      	bne.n	9746 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    970a:	28ff      	cmp	r0, #255	; 0xff
    970c:	d90b      	bls.n	9726 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    970e:	4b13      	ldr	r3, [pc, #76]	; (975c <loadHwTimer+0x84>)
    9710:	4298      	cmp	r0, r3
    9712:	d818      	bhi.n	9746 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    9714:	b280      	uxth	r0, r0
    9716:	4b12      	ldr	r3, [pc, #72]	; (9760 <loadHwTimer+0x88>)
    9718:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    971a:	0124      	lsls	r4, r4, #4
    971c:	4b0d      	ldr	r3, [pc, #52]	; (9754 <loadHwTimer+0x7c>)
    971e:	191c      	adds	r4, r3, r4
    9720:	2301      	movs	r3, #1
    9722:	7363      	strb	r3, [r4, #13]
    9724:	e00f      	b.n	9746 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    9726:	2201      	movs	r2, #1
    9728:	4b0e      	ldr	r3, [pc, #56]	; (9764 <loadHwTimer+0x8c>)
    972a:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    972c:	2001      	movs	r0, #1
    972e:	4b0e      	ldr	r3, [pc, #56]	; (9768 <loadHwTimer+0x90>)
    9730:	4798      	blx	r3
    9732:	e008      	b.n	9746 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    9734:	2201      	movs	r2, #1
    9736:	4b0b      	ldr	r3, [pc, #44]	; (9764 <loadHwTimer+0x8c>)
    9738:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    973a:	2001      	movs	r0, #1
    973c:	4b0a      	ldr	r3, [pc, #40]	; (9768 <loadHwTimer+0x90>)
    973e:	4798      	blx	r3
    9740:	e001      	b.n	9746 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    9742:	4b0a      	ldr	r3, [pc, #40]	; (976c <loadHwTimer+0x94>)
    9744:	4798      	blx	r3
}
    9746:	bd70      	pop	{r4, r5, r6, pc}
    9748:	20001724 	.word	0x20001724
    974c:	20001720 	.word	0x20001720
    9750:	0000abc1 	.word	0x0000abc1
    9754:	20001590 	.word	0x20001590
    9758:	7ffffffe 	.word	0x7ffffffe
    975c:	0000ffff 	.word	0x0000ffff
    9760:	0000ac69 	.word	0x0000ac69
    9764:	20001722 	.word	0x20001722
    9768:	00009f19 	.word	0x00009f19
    976c:	0000ac0d 	.word	0x0000ac0d

00009770 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    9770:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    9772:	4b1d      	ldr	r3, [pc, #116]	; (97e8 <swtimerInternalHandler+0x78>)
    9774:	781b      	ldrb	r3, [r3, #0]
    9776:	2b00      	cmp	r3, #0
    9778:	d027      	beq.n	97ca <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    977a:	2200      	movs	r2, #0
    977c:	4b1a      	ldr	r3, [pc, #104]	; (97e8 <swtimerInternalHandler+0x78>)
    977e:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    9780:	4b1a      	ldr	r3, [pc, #104]	; (97ec <swtimerInternalHandler+0x7c>)
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	2b00      	cmp	r3, #0
    9786:	d020      	beq.n	97ca <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    9788:	4b19      	ldr	r3, [pc, #100]	; (97f0 <swtimerInternalHandler+0x80>)
    978a:	681b      	ldr	r3, [r3, #0]
    978c:	2bff      	cmp	r3, #255	; 0xff
    978e:	d01d      	beq.n	97cc <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    9790:	4b18      	ldr	r3, [pc, #96]	; (97f4 <swtimerInternalHandler+0x84>)
    9792:	6818      	ldr	r0, [r3, #0]
    9794:	4918      	ldr	r1, [pc, #96]	; (97f8 <swtimerInternalHandler+0x88>)
    9796:	680b      	ldr	r3, [r1, #0]
    9798:	011a      	lsls	r2, r3, #4
    979a:	4b18      	ldr	r3, [pc, #96]	; (97fc <swtimerInternalHandler+0x8c>)
    979c:	189b      	adds	r3, r3, r2
    979e:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    97a0:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    97a2:	4a16      	ldr	r2, [pc, #88]	; (97fc <swtimerInternalHandler+0x8c>)
    97a4:	4913      	ldr	r1, [pc, #76]	; (97f4 <swtimerInternalHandler+0x84>)
    97a6:	680b      	ldr	r3, [r1, #0]
    97a8:	011b      	lsls	r3, r3, #4
    97aa:	18d3      	adds	r3, r2, r3
    97ac:	7b18      	ldrb	r0, [r3, #12]
    97ae:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    97b0:	4b11      	ldr	r3, [pc, #68]	; (97f8 <swtimerInternalHandler+0x88>)
    97b2:	681b      	ldr	r3, [r3, #0]
    97b4:	011b      	lsls	r3, r3, #4
    97b6:	18d2      	adds	r2, r2, r3
    97b8:	23ff      	movs	r3, #255	; 0xff
    97ba:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    97bc:	4a0b      	ldr	r2, [pc, #44]	; (97ec <swtimerInternalHandler+0x7c>)
    97be:	7813      	ldrb	r3, [r2, #0]
    97c0:	3b01      	subs	r3, #1
    97c2:	b2db      	uxtb	r3, r3
    97c4:	7013      	strb	r3, [r2, #0]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d10b      	bne.n	97e2 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    97ca:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    97cc:	4b0a      	ldr	r3, [pc, #40]	; (97f8 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    97ce:	681b      	ldr	r3, [r3, #0]
    97d0:	2bff      	cmp	r3, #255	; 0xff
    97d2:	d1dd      	bne.n	9790 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    97d4:	4b07      	ldr	r3, [pc, #28]	; (97f4 <swtimerInternalHandler+0x84>)
    97d6:	681b      	ldr	r3, [r3, #0]
    97d8:	4a05      	ldr	r2, [pc, #20]	; (97f0 <swtimerInternalHandler+0x80>)
    97da:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    97dc:	4a06      	ldr	r2, [pc, #24]	; (97f8 <swtimerInternalHandler+0x88>)
    97de:	6013      	str	r3, [r2, #0]
    97e0:	e7df      	b.n	97a2 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    97e2:	4b07      	ldr	r3, [pc, #28]	; (9800 <swtimerInternalHandler+0x90>)
    97e4:	4798      	blx	r3
}
    97e6:	e7f0      	b.n	97ca <swtimerInternalHandler+0x5a>
    97e8:	20001722 	.word	0x20001722
    97ec:	20000ef8 	.word	0x20000ef8
    97f0:	20000eec 	.word	0x20000eec
    97f4:	20000ef4 	.word	0x20000ef4
    97f8:	20000ef0 	.word	0x20000ef0
    97fc:	20001590 	.word	0x20001590
    9800:	000096d9 	.word	0x000096d9

00009804 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    9804:	2300      	movs	r3, #0
    9806:	4a0d      	ldr	r2, [pc, #52]	; (983c <SwTimerReset+0x38>)
    9808:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    980a:	4a0d      	ldr	r2, [pc, #52]	; (9840 <SwTimerReset+0x3c>)
    980c:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    980e:	33ff      	adds	r3, #255	; 0xff
    9810:	4a0c      	ldr	r2, [pc, #48]	; (9844 <SwTimerReset+0x40>)
    9812:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    9814:	4a0c      	ldr	r2, [pc, #48]	; (9848 <SwTimerReset+0x44>)
    9816:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    9818:	4a0c      	ldr	r2, [pc, #48]	; (984c <SwTimerReset+0x48>)
    981a:	6013      	str	r3, [r2, #0]
    981c:	4b0c      	ldr	r3, [pc, #48]	; (9850 <SwTimerReset+0x4c>)
    981e:	0018      	movs	r0, r3
    9820:	3091      	adds	r0, #145	; 0x91
    9822:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9824:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    9826:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    9828:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    982a:	601a      	str	r2, [r3, #0]
    982c:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    982e:	4283      	cmp	r3, r0
    9830:	d1fa      	bne.n	9828 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    9832:	2200      	movs	r2, #0
    9834:	4b07      	ldr	r3, [pc, #28]	; (9854 <SwTimerReset+0x50>)
    9836:	701a      	strb	r2, [r3, #0]
}
    9838:	4770      	bx	lr
    983a:	46c0      	nop			; (mov r8, r8)
    983c:	20000ef8 	.word	0x20000ef8
    9840:	20001722 	.word	0x20001722
    9844:	20000ef4 	.word	0x20000ef4
    9848:	20000eec 	.word	0x20000eec
    984c:	20000ef0 	.word	0x20000ef0
    9850:	20001594 	.word	0x20001594
    9854:	20000ee8 	.word	0x20000ee8

00009858 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    9858:	b510      	push	{r4, lr}
    SwTimerReset();
    985a:	4b08      	ldr	r3, [pc, #32]	; (987c <SystemTimerInit+0x24>)
    985c:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    985e:	2300      	movs	r3, #0
    9860:	4a07      	ldr	r2, [pc, #28]	; (9880 <SystemTimerInit+0x28>)
    9862:	8013      	strh	r3, [r2, #0]
    9864:	4a07      	ldr	r2, [pc, #28]	; (9884 <SystemTimerInit+0x2c>)
    9866:	6013      	str	r3, [r2, #0]

    common_tc_init();
    9868:	4b07      	ldr	r3, [pc, #28]	; (9888 <SystemTimerInit+0x30>)
    986a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    986c:	4807      	ldr	r0, [pc, #28]	; (988c <SystemTimerInit+0x34>)
    986e:	4b08      	ldr	r3, [pc, #32]	; (9890 <SystemTimerInit+0x38>)
    9870:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9872:	4808      	ldr	r0, [pc, #32]	; (9894 <SystemTimerInit+0x3c>)
    9874:	4b08      	ldr	r3, [pc, #32]	; (9898 <SystemTimerInit+0x40>)
    9876:	4798      	blx	r3
}
    9878:	bd10      	pop	{r4, pc}
    987a:	46c0      	nop			; (mov r8, r8)
    987c:	00009805 	.word	0x00009805
    9880:	20001720 	.word	0x20001720
    9884:	20001724 	.word	0x20001724
    9888:	0000acd5 	.word	0x0000acd5
    988c:	00009621 	.word	0x00009621
    9890:	0000ad59 	.word	0x0000ad59
    9894:	000095f9 	.word	0x000095f9
    9898:	0000ad65 	.word	0x0000ad65

0000989c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    989c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    989e:	4b05      	ldr	r3, [pc, #20]	; (98b4 <SwTimerGetTime+0x18>)
    98a0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    98a2:	4b05      	ldr	r3, [pc, #20]	; (98b8 <SwTimerGetTime+0x1c>)
    98a4:	881d      	ldrh	r5, [r3, #0]
    98a6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    98a8:	4b04      	ldr	r3, [pc, #16]	; (98bc <SwTimerGetTime+0x20>)
    98aa:	4798      	blx	r3
    98ac:	4328      	orrs	r0, r5
    return gettime();
}
    98ae:	0021      	movs	r1, r4
    98b0:	bd70      	pop	{r4, r5, r6, pc}
    98b2:	46c0      	nop			; (mov r8, r8)
    98b4:	20001724 	.word	0x20001724
    98b8:	20001720 	.word	0x20001720
    98bc:	0000abc1 	.word	0x0000abc1

000098c0 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    98c0:	b510      	push	{r4, lr}
    98c2:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    98c4:	4b08      	ldr	r3, [pc, #32]	; (98e8 <SwTimerCreate+0x28>)
    98c6:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    98c8:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    98ca:	2b18      	cmp	r3, #24
    98cc:	d900      	bls.n	98d0 <SwTimerCreate+0x10>
    }

    return retVal;
}
    98ce:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    98d0:	4b06      	ldr	r3, [pc, #24]	; (98ec <SwTimerCreate+0x2c>)
    98d2:	4798      	blx	r3
        *timerId = allocatedTimerId;
    98d4:	4a04      	ldr	r2, [pc, #16]	; (98e8 <SwTimerCreate+0x28>)
    98d6:	7813      	ldrb	r3, [r2, #0]
    98d8:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    98da:	3301      	adds	r3, #1
    98dc:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    98de:	4b04      	ldr	r3, [pc, #16]	; (98f0 <SwTimerCreate+0x30>)
    98e0:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    98e2:	2008      	movs	r0, #8
    98e4:	e7f3      	b.n	98ce <SwTimerCreate+0xe>
    98e6:	46c0      	nop			; (mov r8, r8)
    98e8:	20000ee8 	.word	0x20000ee8
    98ec:	00004245 	.word	0x00004245
    98f0:	00004251 	.word	0x00004251

000098f4 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    98f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    98f6:	46d6      	mov	lr, sl
    98f8:	464f      	mov	r7, r9
    98fa:	4646      	mov	r6, r8
    98fc:	b5c0      	push	{r6, r7, lr}
    98fe:	b084      	sub	sp, #16
    9900:	0007      	movs	r7, r0
    9902:	000d      	movs	r5, r1
    9904:	0016      	movs	r6, r2
    9906:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9908:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    990a:	2f18      	cmp	r7, #24
    990c:	d809      	bhi.n	9922 <SwTimerStart+0x2e>
    990e:	2b00      	cmp	r3, #0
    9910:	d100      	bne.n	9914 <SwTimerStart+0x20>
    9912:	e08c      	b.n	9a2e <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    9914:	013a      	lsls	r2, r7, #4
    9916:	4b52      	ldr	r3, [pc, #328]	; (9a60 <SwTimerStart+0x16c>)
    9918:	189b      	adds	r3, r3, r2
    991a:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    991c:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    991e:	2b00      	cmp	r3, #0
    9920:	d005      	beq.n	992e <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    9922:	b004      	add	sp, #16
    9924:	bc1c      	pop	{r2, r3, r4}
    9926:	4690      	mov	r8, r2
    9928:	4699      	mov	r9, r3
    992a:	46a2      	mov	sl, r4
    992c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    992e:	4b4d      	ldr	r3, [pc, #308]	; (9a64 <SwTimerStart+0x170>)
    9930:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9932:	4b4d      	ldr	r3, [pc, #308]	; (9a68 <SwTimerStart+0x174>)
    9934:	8818      	ldrh	r0, [r3, #0]
    9936:	0403      	lsls	r3, r0, #16
    9938:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    993a:	4b4c      	ldr	r3, [pc, #304]	; (9a6c <SwTimerStart+0x178>)
    993c:	4798      	blx	r3
    993e:	4643      	mov	r3, r8
    9940:	4303      	orrs	r3, r0
    switch (timeoutType)
    9942:	2e00      	cmp	r6, #0
    9944:	d003      	beq.n	994e <SwTimerStart+0x5a>
    9946:	2e01      	cmp	r6, #1
    9948:	d038      	beq.n	99bc <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    994a:	200a      	movs	r0, #10
    994c:	e7e9      	b.n	9922 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    994e:	4948      	ldr	r1, [pc, #288]	; (9a70 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    9950:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9952:	002a      	movs	r2, r5
    9954:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    9956:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9958:	428a      	cmp	r2, r1
    995a:	d8e2      	bhi.n	9922 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    995c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9960:	425a      	negs	r2, r3
    9962:	4153      	adcs	r3, r2
    9964:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    9966:	b672      	cpsid	i
    9968:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    996c:	2600      	movs	r6, #0
    996e:	4b41      	ldr	r3, [pc, #260]	; (9a74 <SwTimerStart+0x180>)
    9970:	701e      	strb	r6, [r3, #0]
	return flags;
    9972:	9b03      	ldr	r3, [sp, #12]
    9974:	4699      	mov	r9, r3
    swtimerInternalHandler();
    9976:	4b40      	ldr	r3, [pc, #256]	; (9a78 <SwTimerStart+0x184>)
    9978:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    997a:	4b39      	ldr	r3, [pc, #228]	; (9a60 <SwTimerStart+0x16c>)
    997c:	013a      	lsls	r2, r7, #4
    997e:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    9980:	189b      	adds	r3, r3, r2
    9982:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    9984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9986:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    9988:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    998a:	4a3c      	ldr	r2, [pc, #240]	; (9a7c <SwTimerStart+0x188>)
    998c:	7813      	ldrb	r3, [r2, #0]
    998e:	3301      	adds	r3, #1
    9990:	b2db      	uxtb	r3, r3
    9992:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    9994:	4b3a      	ldr	r3, [pc, #232]	; (9a80 <SwTimerStart+0x18c>)
    9996:	681b      	ldr	r3, [r3, #0]
    9998:	469a      	mov	sl, r3
    999a:	2bff      	cmp	r3, #255	; 0xff
    999c:	d016      	beq.n	99cc <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    999e:	466a      	mov	r2, sp
    99a0:	7013      	strb	r3, [r2, #0]
    99a2:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    99a4:	4b35      	ldr	r3, [pc, #212]	; (9a7c <SwTimerStart+0x188>)
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	2b00      	cmp	r3, #0
    99aa:	d042      	beq.n	9a32 <SwTimerStart+0x13e>
    99ac:	9200      	str	r2, [sp, #0]
    99ae:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    99b0:	492b      	ldr	r1, [pc, #172]	; (9a60 <SwTimerStart+0x16c>)
    99b2:	4688      	mov	r8, r1
    99b4:	4833      	ldr	r0, [pc, #204]	; (9a84 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    99b6:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    99b8:	4c30      	ldr	r4, [pc, #192]	; (9a7c <SwTimerStart+0x188>)
    99ba:	e02a      	b.n	9a12 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    99bc:	0028      	movs	r0, r5
    99be:	38ff      	subs	r0, #255	; 0xff
    99c0:	1ac3      	subs	r3, r0, r3
    99c2:	4a2b      	ldr	r2, [pc, #172]	; (9a70 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    99c4:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    99c6:	4293      	cmp	r3, r2
    99c8:	d9c8      	bls.n	995c <SwTimerStart+0x68>
    99ca:	e7aa      	b.n	9922 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    99cc:	4b2c      	ldr	r3, [pc, #176]	; (9a80 <SwTimerStart+0x18c>)
    99ce:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    99d0:	0038      	movs	r0, r7
    99d2:	4b2d      	ldr	r3, [pc, #180]	; (9a88 <SwTimerStart+0x194>)
    99d4:	4798      	blx	r3
    99d6:	e036      	b.n	9a46 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    99d8:	4b21      	ldr	r3, [pc, #132]	; (9a60 <SwTimerStart+0x16c>)
    99da:	013c      	lsls	r4, r7, #4
    99dc:	191c      	adds	r4, r3, r4
    99de:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    99e0:	9901      	ldr	r1, [sp, #4]
    99e2:	0109      	lsls	r1, r1, #4
    99e4:	1859      	adds	r1, r3, r1
    99e6:	2300      	movs	r3, #0
    99e8:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    99ea:	4592      	cmp	sl, r2
    99ec:	d005      	beq.n	99fa <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    99ee:	9b00      	ldr	r3, [sp, #0]
    99f0:	0118      	lsls	r0, r3, #4
    99f2:	4b1b      	ldr	r3, [pc, #108]	; (9a60 <SwTimerStart+0x16c>)
    99f4:	1818      	adds	r0, r3, r0
    99f6:	7307      	strb	r7, [r0, #12]
    99f8:	e025      	b.n	9a46 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    99fa:	4b21      	ldr	r3, [pc, #132]	; (9a80 <SwTimerStart+0x18c>)
    99fc:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    99fe:	0038      	movs	r0, r7
    9a00:	4b21      	ldr	r3, [pc, #132]	; (9a88 <SwTimerStart+0x194>)
    9a02:	4798      	blx	r3
    9a04:	e01f      	b.n	9a46 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    9a06:	3301      	adds	r3, #1
    9a08:	b2db      	uxtb	r3, r3
    9a0a:	7821      	ldrb	r1, [r4, #0]
    9a0c:	b2c9      	uxtb	r1, r1
    9a0e:	428b      	cmp	r3, r1
    9a10:	d210      	bcs.n	9a34 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    9a12:	2aff      	cmp	r2, #255	; 0xff
    9a14:	d0f7      	beq.n	9a06 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9a16:	9201      	str	r2, [sp, #4]
    9a18:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    9a1a:	4646      	mov	r6, r8
    9a1c:	5989      	ldr	r1, [r1, r6]
    9a1e:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9a20:	4281      	cmp	r1, r0
    9a22:	d8d9      	bhi.n	99d8 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    9a24:	0111      	lsls	r1, r2, #4
    9a26:	4461      	add	r1, ip
    9a28:	9200      	str	r2, [sp, #0]
    9a2a:	7b0a      	ldrb	r2, [r1, #12]
    9a2c:	e7eb      	b.n	9a06 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    9a2e:	200a      	movs	r0, #10
    9a30:	e777      	b.n	9922 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    9a32:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    9a34:	4b0a      	ldr	r3, [pc, #40]	; (9a60 <SwTimerStart+0x16c>)
    9a36:	9a00      	ldr	r2, [sp, #0]
    9a38:	0110      	lsls	r0, r2, #4
    9a3a:	1818      	adds	r0, r3, r0
    9a3c:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    9a3e:	013f      	lsls	r7, r7, #4
    9a40:	19df      	adds	r7, r3, r7
    9a42:	23ff      	movs	r3, #255	; 0xff
    9a44:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    9a46:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    9a48:	2008      	movs	r0, #8
    9a4a:	464a      	mov	r2, r9
    9a4c:	4213      	tst	r3, r2
    9a4e:	d100      	bne.n	9a52 <SwTimerStart+0x15e>
    9a50:	e767      	b.n	9922 <SwTimerStart+0x2e>
		cpu_irq_enable();
    9a52:	2201      	movs	r2, #1
    9a54:	4b07      	ldr	r3, [pc, #28]	; (9a74 <SwTimerStart+0x180>)
    9a56:	701a      	strb	r2, [r3, #0]
    9a58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9a5c:	b662      	cpsie	i
    9a5e:	e760      	b.n	9922 <SwTimerStart+0x2e>
    9a60:	20001590 	.word	0x20001590
    9a64:	20001724 	.word	0x20001724
    9a68:	20001720 	.word	0x20001720
    9a6c:	0000abc1 	.word	0x0000abc1
    9a70:	7fffff00 	.word	0x7fffff00
    9a74:	20000008 	.word	0x20000008
    9a78:	00009771 	.word	0x00009771
    9a7c:	20000ef8 	.word	0x20000ef8
    9a80:	20000ef4 	.word	0x20000ef4
    9a84:	7ffffffe 	.word	0x7ffffffe
    9a88:	000096d9 	.word	0x000096d9

00009a8c <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    9a8c:	0103      	lsls	r3, r0, #4
    9a8e:	4803      	ldr	r0, [pc, #12]	; (9a9c <SwTimerIsRunning+0x10>)
    9a90:	18c0      	adds	r0, r0, r3
    9a92:	6840      	ldr	r0, [r0, #4]
    9a94:	1e43      	subs	r3, r0, #1
    9a96:	4198      	sbcs	r0, r3
    9a98:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    9a9a:	4770      	bx	lr
    9a9c:	20001590 	.word	0x20001590

00009aa0 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    9aa0:	b570      	push	{r4, r5, r6, lr}
    9aa2:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    9aa4:	4b09      	ldr	r3, [pc, #36]	; (9acc <SwTimerReadValue+0x2c>)
    9aa6:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9aa8:	4b09      	ldr	r3, [pc, #36]	; (9ad0 <SwTimerReadValue+0x30>)
    9aaa:	881e      	ldrh	r6, [r3, #0]
    9aac:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    9aae:	4b09      	ldr	r3, [pc, #36]	; (9ad4 <SwTimerReadValue+0x34>)
    9ab0:	4798      	blx	r3
    9ab2:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    9ab4:	012d      	lsls	r5, r5, #4
    9ab6:	4b08      	ldr	r3, [pc, #32]	; (9ad8 <SwTimerReadValue+0x38>)
    9ab8:	58e8      	ldr	r0, [r5, r3]
    9aba:	0002      	movs	r2, r0

    if (t2 > t1)
    9abc:	2c00      	cmp	r4, #0
    9abe:	d102      	bne.n	9ac6 <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    9ac0:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    9ac2:	42b2      	cmp	r2, r6
    9ac4:	d800      	bhi.n	9ac8 <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    9ac6:	2000      	movs	r0, #0
    }

    return tv;
}
    9ac8:	bd70      	pop	{r4, r5, r6, pc}
    9aca:	46c0      	nop			; (mov r8, r8)
    9acc:	20001724 	.word	0x20001724
    9ad0:	20001720 	.word	0x20001720
    9ad4:	0000abc1 	.word	0x0000abc1
    9ad8:	20001590 	.word	0x20001590

00009adc <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    9adc:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    9ade:	4b05      	ldr	r3, [pc, #20]	; (9af4 <SwTimerNextExpiryDuration+0x18>)
    9ae0:	6818      	ldr	r0, [r3, #0]
    9ae2:	28ff      	cmp	r0, #255	; 0xff
    9ae4:	d102      	bne.n	9aec <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    9ae6:	2001      	movs	r0, #1
    9ae8:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    9aea:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    9aec:	b2c0      	uxtb	r0, r0
    9aee:	4b02      	ldr	r3, [pc, #8]	; (9af8 <SwTimerNextExpiryDuration+0x1c>)
    9af0:	4798      	blx	r3
    9af2:	e7fa      	b.n	9aea <SwTimerNextExpiryDuration+0xe>
    9af4:	20000ef4 	.word	0x20000ef4
    9af8:	00009aa1 	.word	0x00009aa1

00009afc <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    9afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9afe:	46de      	mov	lr, fp
    9b00:	4657      	mov	r7, sl
    9b02:	464e      	mov	r6, r9
    9b04:	4645      	mov	r5, r8
    9b06:	b5e0      	push	{r5, r6, r7, lr}
    9b08:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    9b0a:	4b2f      	ldr	r3, [pc, #188]	; (9bc8 <SwTimersExecute+0xcc>)
    9b0c:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9b0e:	4b2f      	ldr	r3, [pc, #188]	; (9bcc <SwTimersExecute+0xd0>)
    9b10:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    9b12:	4b2f      	ldr	r3, [pc, #188]	; (9bd0 <SwTimersExecute+0xd4>)
    9b14:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9b16:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9b1a:	4253      	negs	r3, r2
    9b1c:	4153      	adcs	r3, r2
    9b1e:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    9b20:	b672      	cpsid	i
    9b22:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9b26:	2200      	movs	r2, #0
    9b28:	4b2a      	ldr	r3, [pc, #168]	; (9bd4 <SwTimersExecute+0xd8>)
    9b2a:	701a      	strb	r2, [r3, #0]
	return flags;
    9b2c:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    9b2e:	4b2a      	ldr	r3, [pc, #168]	; (9bd8 <SwTimersExecute+0xdc>)
    9b30:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    9b32:	23ff      	movs	r3, #255	; 0xff
    9b34:	4223      	tst	r3, r4
    9b36:	d005      	beq.n	9b44 <SwTimersExecute+0x48>
		cpu_irq_enable();
    9b38:	2201      	movs	r2, #1
    9b3a:	4b26      	ldr	r3, [pc, #152]	; (9bd4 <SwTimersExecute+0xd8>)
    9b3c:	701a      	strb	r2, [r3, #0]
    9b3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9b42:	b662      	cpsie	i
	cpu_irq_disable();
    9b44:	4b23      	ldr	r3, [pc, #140]	; (9bd4 <SwTimersExecute+0xd8>)
    9b46:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9b48:	4c24      	ldr	r4, [pc, #144]	; (9bdc <SwTimersExecute+0xe0>)
    9b4a:	4b25      	ldr	r3, [pc, #148]	; (9be0 <SwTimersExecute+0xe4>)
    9b4c:	4699      	mov	r9, r3
    9b4e:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    9b50:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    9b52:	4b24      	ldr	r3, [pc, #144]	; (9be4 <SwTimersExecute+0xe8>)
    9b54:	4698      	mov	r8, r3
		cpu_irq_enable();
    9b56:	4b1f      	ldr	r3, [pc, #124]	; (9bd4 <SwTimersExecute+0xd8>)
    9b58:	469c      	mov	ip, r3
    9b5a:	e004      	b.n	9b66 <SwTimersExecute+0x6a>
    9b5c:	4643      	mov	r3, r8
    9b5e:	6018      	str	r0, [r3, #0]
    9b60:	e01e      	b.n	9ba0 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    9b62:	2e00      	cmp	r6, #0
    9b64:	d125      	bne.n	9bb2 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    9b66:	4b1d      	ldr	r3, [pc, #116]	; (9bdc <SwTimersExecute+0xe0>)
    9b68:	681b      	ldr	r3, [r3, #0]
    9b6a:	2bff      	cmp	r3, #255	; 0xff
    9b6c:	d024      	beq.n	9bb8 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9b6e:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9b72:	424b      	negs	r3, r1
    9b74:	414b      	adcs	r3, r1
    9b76:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9b78:	b672      	cpsid	i
    9b7a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9b7e:	4653      	mov	r3, sl
    9b80:	701a      	strb	r2, [r3, #0]
	return flags;
    9b82:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    9b84:	6823      	ldr	r3, [r4, #0]
    9b86:	011b      	lsls	r3, r3, #4
    9b88:	444b      	add	r3, r9
    9b8a:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    9b8c:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    9b8e:	689d      	ldr	r5, [r3, #8]
    9b90:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    9b92:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    9b94:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    9b96:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    9b98:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    9b9a:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    9b9c:	29ff      	cmp	r1, #255	; 0xff
    9b9e:	d0dd      	beq.n	9b5c <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    9ba0:	4238      	tst	r0, r7
    9ba2:	d0de      	beq.n	9b62 <SwTimersExecute+0x66>
		cpu_irq_enable();
    9ba4:	2301      	movs	r3, #1
    9ba6:	4661      	mov	r1, ip
    9ba8:	700b      	strb	r3, [r1, #0]
    9baa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9bae:	b662      	cpsie	i
    9bb0:	e7d7      	b.n	9b62 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    9bb2:	4658      	mov	r0, fp
    9bb4:	47b0      	blx	r6
    9bb6:	e7ca      	b.n	9b4e <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    9bb8:	b003      	add	sp, #12
    9bba:	bc3c      	pop	{r2, r3, r4, r5}
    9bbc:	4690      	mov	r8, r2
    9bbe:	4699      	mov	r9, r3
    9bc0:	46a2      	mov	sl, r4
    9bc2:	46ab      	mov	fp, r5
    9bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bc6:	46c0      	nop			; (mov r8, r8)
    9bc8:	20001724 	.word	0x20001724
    9bcc:	20001720 	.word	0x20001720
    9bd0:	0000abc1 	.word	0x0000abc1
    9bd4:	20000008 	.word	0x20000008
    9bd8:	00009771 	.word	0x00009771
    9bdc:	20000eec 	.word	0x20000eec
    9be0:	20001590 	.word	0x20001590
    9be4:	20000ef0 	.word	0x20000ef0

00009be8 <TIMER_TaskHandler>:
{
    9be8:	b510      	push	{r4, lr}
    SwTimersExecute();
    9bea:	4b02      	ldr	r3, [pc, #8]	; (9bf4 <TIMER_TaskHandler+0xc>)
    9bec:	4798      	blx	r3
}
    9bee:	2000      	movs	r0, #0
    9bf0:	bd10      	pop	{r4, pc}
    9bf2:	46c0      	nop			; (mov r8, r8)
    9bf4:	00009afd 	.word	0x00009afd

00009bf8 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    9bf8:	b570      	push	{r4, r5, r6, lr}
    9bfa:	b082      	sub	sp, #8
    9bfc:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    9bfe:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    9c00:	2c18      	cmp	r4, #24
    9c02:	d901      	bls.n	9c08 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    9c04:	b002      	add	sp, #8
    9c06:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9c08:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9c0c:	425a      	negs	r2, r3
    9c0e:	4153      	adcs	r3, r2
    9c10:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    9c12:	b672      	cpsid	i
    9c14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9c18:	2200      	movs	r2, #0
    9c1a:	4b47      	ldr	r3, [pc, #284]	; (9d38 <SwTimerStop+0x140>)
    9c1c:	701a      	strb	r2, [r3, #0]
	return flags;
    9c1e:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    9c20:	4b46      	ldr	r3, [pc, #280]	; (9d3c <SwTimerStop+0x144>)
    9c22:	4798      	blx	r3
    if (runningTimers > 0)
    9c24:	4b46      	ldr	r3, [pc, #280]	; (9d40 <SwTimerStop+0x148>)
    9c26:	781b      	ldrb	r3, [r3, #0]
    9c28:	2b00      	cmp	r3, #0
    9c2a:	d040      	beq.n	9cae <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    9c2c:	4b44      	ldr	r3, [pc, #272]	; (9d40 <SwTimerStop+0x148>)
    9c2e:	781b      	ldrb	r3, [r3, #0]
    9c30:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    9c32:	4a44      	ldr	r2, [pc, #272]	; (9d44 <SwTimerStop+0x14c>)
    9c34:	6816      	ldr	r6, [r2, #0]
    9c36:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d038      	beq.n	9cae <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9c3c:	428c      	cmp	r4, r1
    9c3e:	d00b      	beq.n	9c58 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9c40:	4841      	ldr	r0, [pc, #260]	; (9d48 <SwTimerStop+0x150>)
    9c42:	010a      	lsls	r2, r1, #4
    9c44:	1882      	adds	r2, r0, r2
    9c46:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    9c48:	3b01      	subs	r3, #1
    9c4a:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d02e      	beq.n	9cae <SwTimerStop+0xb6>
            if (timerId == currIndex)
    9c50:	4294      	cmp	r4, r2
    9c52:	d001      	beq.n	9c58 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    9c54:	0011      	movs	r1, r2
    9c56:	e7f4      	b.n	9c42 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    9c58:	42a6      	cmp	r6, r4
    9c5a:	d01d      	beq.n	9c98 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9c5c:	4b3a      	ldr	r3, [pc, #232]	; (9d48 <SwTimerStop+0x150>)
    9c5e:	0122      	lsls	r2, r4, #4
    9c60:	189a      	adds	r2, r3, r2
    9c62:	7b12      	ldrb	r2, [r2, #12]
    9c64:	0109      	lsls	r1, r1, #4
    9c66:	1859      	adds	r1, r3, r1
    9c68:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    9c6a:	0122      	lsls	r2, r4, #4
    9c6c:	4b36      	ldr	r3, [pc, #216]	; (9d48 <SwTimerStop+0x150>)
    9c6e:	189b      	adds	r3, r3, r2
    9c70:	22ff      	movs	r2, #255	; 0xff
    9c72:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    9c74:	4a32      	ldr	r2, [pc, #200]	; (9d40 <SwTimerStop+0x148>)
    9c76:	7813      	ldrb	r3, [r2, #0]
    9c78:	3b01      	subs	r3, #1
    9c7a:	b2db      	uxtb	r3, r3
    9c7c:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    9c7e:	0124      	lsls	r4, r4, #4
    9c80:	4b31      	ldr	r3, [pc, #196]	; (9d48 <SwTimerStop+0x150>)
    9c82:	191c      	adds	r4, r3, r4
    9c84:	2300      	movs	r3, #0
    9c86:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    9c88:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    9c8a:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    9c8c:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    9c8e:	2008      	movs	r0, #8
    9c90:	422b      	tst	r3, r5
    9c92:	d0b7      	beq.n	9c04 <SwTimerStop+0xc>
    9c94:	2301      	movs	r3, #1
    9c96:	e040      	b.n	9d1a <SwTimerStop+0x122>
                    common_tc_compare_stop();
    9c98:	4b2c      	ldr	r3, [pc, #176]	; (9d4c <SwTimerStop+0x154>)
    9c9a:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    9c9c:	0122      	lsls	r2, r4, #4
    9c9e:	4b2a      	ldr	r3, [pc, #168]	; (9d48 <SwTimerStop+0x150>)
    9ca0:	189b      	adds	r3, r3, r2
    9ca2:	7b18      	ldrb	r0, [r3, #12]
    9ca4:	4b27      	ldr	r3, [pc, #156]	; (9d44 <SwTimerStop+0x14c>)
    9ca6:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    9ca8:	4b29      	ldr	r3, [pc, #164]	; (9d50 <SwTimerStop+0x158>)
    9caa:	4798      	blx	r3
    9cac:	e7dd      	b.n	9c6a <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    9cae:	4b29      	ldr	r3, [pc, #164]	; (9d54 <SwTimerStop+0x15c>)
    9cb0:	6818      	ldr	r0, [r3, #0]
    9cb2:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    9cb4:	2aff      	cmp	r2, #255	; 0xff
    9cb6:	d02c      	beq.n	9d12 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9cb8:	4294      	cmp	r4, r2
    9cba:	d009      	beq.n	9cd0 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9cbc:	4922      	ldr	r1, [pc, #136]	; (9d48 <SwTimerStop+0x150>)
    9cbe:	0113      	lsls	r3, r2, #4
    9cc0:	18cb      	adds	r3, r1, r3
    9cc2:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    9cc4:	2bff      	cmp	r3, #255	; 0xff
    9cc6:	d024      	beq.n	9d12 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    9cc8:	429c      	cmp	r4, r3
    9cca:	d001      	beq.n	9cd0 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    9ccc:	001a      	movs	r2, r3
    9cce:	e7f6      	b.n	9cbe <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    9cd0:	42a0      	cmp	r0, r4
    9cd2:	d00d      	beq.n	9cf0 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9cd4:	4b1c      	ldr	r3, [pc, #112]	; (9d48 <SwTimerStop+0x150>)
    9cd6:	0121      	lsls	r1, r4, #4
    9cd8:	1859      	adds	r1, r3, r1
    9cda:	7b09      	ldrb	r1, [r1, #12]
    9cdc:	0110      	lsls	r0, r2, #4
    9cde:	181b      	adds	r3, r3, r0
    9ce0:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    9ce2:	4b1d      	ldr	r3, [pc, #116]	; (9d58 <SwTimerStop+0x160>)
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	429c      	cmp	r4, r3
    9ce8:	d1c9      	bne.n	9c7e <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    9cea:	4b1b      	ldr	r3, [pc, #108]	; (9d58 <SwTimerStop+0x160>)
    9cec:	601a      	str	r2, [r3, #0]
    9cee:	e7c6      	b.n	9c7e <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    9cf0:	4b19      	ldr	r3, [pc, #100]	; (9d58 <SwTimerStop+0x160>)
    9cf2:	681b      	ldr	r3, [r3, #0]
    9cf4:	4298      	cmp	r0, r3
    9cf6:	d006      	beq.n	9d06 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    9cf8:	0100      	lsls	r0, r0, #4
    9cfa:	4b13      	ldr	r3, [pc, #76]	; (9d48 <SwTimerStop+0x150>)
    9cfc:	1818      	adds	r0, r3, r0
    9cfe:	7b02      	ldrb	r2, [r0, #12]
    9d00:	4b14      	ldr	r3, [pc, #80]	; (9d54 <SwTimerStop+0x15c>)
    9d02:	601a      	str	r2, [r3, #0]
    9d04:	e7bb      	b.n	9c7e <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    9d06:	23ff      	movs	r3, #255	; 0xff
    9d08:	4a13      	ldr	r2, [pc, #76]	; (9d58 <SwTimerStop+0x160>)
    9d0a:	6013      	str	r3, [r2, #0]
    9d0c:	4a11      	ldr	r2, [pc, #68]	; (9d54 <SwTimerStop+0x15c>)
    9d0e:	6013      	str	r3, [r2, #0]
    9d10:	e7b5      	b.n	9c7e <SwTimerStop+0x86>
    9d12:	23ff      	movs	r3, #255	; 0xff
    9d14:	422b      	tst	r3, r5
    9d16:	d00a      	beq.n	9d2e <SwTimerStop+0x136>
    9d18:	2300      	movs	r3, #0
		cpu_irq_enable();
    9d1a:	2101      	movs	r1, #1
    9d1c:	4a06      	ldr	r2, [pc, #24]	; (9d38 <SwTimerStop+0x140>)
    9d1e:	7011      	strb	r1, [r2, #0]
    9d20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9d24:	b662      	cpsie	i
    if (timerStopReqStatus)
    9d26:	2b00      	cmp	r3, #0
    9d28:	d103      	bne.n	9d32 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    9d2a:	2015      	movs	r0, #21
    9d2c:	e76a      	b.n	9c04 <SwTimerStop+0xc>
    9d2e:	2015      	movs	r0, #21
    9d30:	e768      	b.n	9c04 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    9d32:	2008      	movs	r0, #8
    9d34:	e766      	b.n	9c04 <SwTimerStop+0xc>
    9d36:	46c0      	nop			; (mov r8, r8)
    9d38:	20000008 	.word	0x20000008
    9d3c:	00009771 	.word	0x00009771
    9d40:	20000ef8 	.word	0x20000ef8
    9d44:	20000ef4 	.word	0x20000ef4
    9d48:	20001590 	.word	0x20001590
    9d4c:	0000ac0d 	.word	0x0000ac0d
    9d50:	000096d9 	.word	0x000096d9
    9d54:	20000eec 	.word	0x20000eec
    9d58:	20000ef0 	.word	0x20000ef0

00009d5c <SwTimerRunRemainingTime>:
{
    9d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d5e:	b083      	sub	sp, #12
    9d60:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    9d62:	4b0b      	ldr	r3, [pc, #44]	; (9d90 <SwTimerRunRemainingTime+0x34>)
    9d64:	681c      	ldr	r4, [r3, #0]
    9d66:	0122      	lsls	r2, r4, #4
    9d68:	4b0a      	ldr	r3, [pc, #40]	; (9d94 <SwTimerRunRemainingTime+0x38>)
    9d6a:	189b      	adds	r3, r3, r2
    9d6c:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    9d6e:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    9d70:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    9d72:	0020      	movs	r0, r4
    9d74:	4b08      	ldr	r3, [pc, #32]	; (9d98 <SwTimerRunRemainingTime+0x3c>)
    9d76:	4798      	blx	r3
    9d78:	2808      	cmp	r0, #8
    9d7a:	d001      	beq.n	9d80 <SwTimerRunRemainingTime+0x24>
}
    9d7c:	b003      	add	sp, #12
    9d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    9d80:	9700      	str	r7, [sp, #0]
    9d82:	0033      	movs	r3, r6
    9d84:	2200      	movs	r2, #0
    9d86:	0029      	movs	r1, r5
    9d88:	0020      	movs	r0, r4
    9d8a:	4c04      	ldr	r4, [pc, #16]	; (9d9c <SwTimerRunRemainingTime+0x40>)
    9d8c:	47a0      	blx	r4
}
    9d8e:	e7f5      	b.n	9d7c <SwTimerRunRemainingTime+0x20>
    9d90:	20000ef4 	.word	0x20000ef4
    9d94:	20001590 	.word	0x20001590
    9d98:	00009bf9 	.word	0x00009bf9
    9d9c:	000098f5 	.word	0x000098f5

00009da0 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    9da0:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    9da2:	4b07      	ldr	r3, [pc, #28]	; (9dc0 <SystemTimerSuspend+0x20>)
    9da4:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    9da6:	4b07      	ldr	r3, [pc, #28]	; (9dc4 <SystemTimerSuspend+0x24>)
    9da8:	881d      	ldrh	r5, [r3, #0]
    9daa:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    9dac:	4b06      	ldr	r3, [pc, #24]	; (9dc8 <SystemTimerSuspend+0x28>)
    9dae:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    9db0:	4b06      	ldr	r3, [pc, #24]	; (9dcc <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    9db2:	4328      	orrs	r0, r5
    9db4:	6018      	str	r0, [r3, #0]
    9db6:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    9db8:	4b05      	ldr	r3, [pc, #20]	; (9dd0 <SystemTimerSuspend+0x30>)
    9dba:	4798      	blx	r3
}
    9dbc:	bd70      	pop	{r4, r5, r6, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	20001724 	.word	0x20001724
    9dc4:	20001720 	.word	0x20001720
    9dc8:	0000abc1 	.word	0x0000abc1
    9dcc:	20000f00 	.word	0x20000f00
    9dd0:	0000ac4d 	.word	0x0000ac4d

00009dd4 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    9dd4:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    9dd6:	4b22      	ldr	r3, [pc, #136]	; (9e60 <SystemTimerSync+0x8c>)
    9dd8:	681c      	ldr	r4, [r3, #0]
    9dda:	685d      	ldr	r5, [r3, #4]
    9ddc:	1900      	adds	r0, r0, r4
    9dde:	4169      	adcs	r1, r5
    9de0:	6018      	str	r0, [r3, #0]
    9de2:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    9de4:	4b1f      	ldr	r3, [pc, #124]	; (9e64 <SystemTimerSync+0x90>)
    9de6:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    9de8:	0c02      	lsrs	r2, r0, #16
    9dea:	4b1f      	ldr	r3, [pc, #124]	; (9e68 <SystemTimerSync+0x94>)
    9dec:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    9dee:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    9df0:	4b1e      	ldr	r3, [pc, #120]	; (9e6c <SystemTimerSync+0x98>)
    9df2:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    9df4:	4a1e      	ldr	r2, [pc, #120]	; (9e70 <SystemTimerSync+0x9c>)
    9df6:	7812      	ldrb	r2, [r2, #0]
    9df8:	2a00      	cmp	r2, #0
    9dfa:	d012      	beq.n	9e22 <SystemTimerSync+0x4e>
    9dfc:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9dfe:	4c1d      	ldr	r4, [pc, #116]	; (9e74 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    9e00:	4d1b      	ldr	r5, [pc, #108]	; (9e70 <SystemTimerSync+0x9c>)
    9e02:	e005      	b.n	9e10 <SystemTimerSync+0x3c>
    9e04:	3201      	adds	r2, #1
    9e06:	b2d2      	uxtb	r2, r2
    9e08:	7829      	ldrb	r1, [r5, #0]
    9e0a:	b2c9      	uxtb	r1, r1
    9e0c:	4291      	cmp	r1, r2
    9e0e:	d908      	bls.n	9e22 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    9e10:	2bff      	cmp	r3, #255	; 0xff
    9e12:	d0f7      	beq.n	9e04 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9e14:	011b      	lsls	r3, r3, #4
    9e16:	5919      	ldr	r1, [r3, r4]
    9e18:	1a09      	subs	r1, r1, r0
    9e1a:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    9e1c:	18e3      	adds	r3, r4, r3
    9e1e:	7b1b      	ldrb	r3, [r3, #12]
    9e20:	e7f0      	b.n	9e04 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    9e22:	4b15      	ldr	r3, [pc, #84]	; (9e78 <SystemTimerSync+0xa4>)
    9e24:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9e26:	4815      	ldr	r0, [pc, #84]	; (9e7c <SystemTimerSync+0xa8>)
    9e28:	4b15      	ldr	r3, [pc, #84]	; (9e80 <SystemTimerSync+0xac>)
    9e2a:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9e2c:	4815      	ldr	r0, [pc, #84]	; (9e84 <SystemTimerSync+0xb0>)
    9e2e:	4b16      	ldr	r3, [pc, #88]	; (9e88 <SystemTimerSync+0xb4>)
    9e30:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    9e32:	4b0f      	ldr	r3, [pc, #60]	; (9e70 <SystemTimerSync+0x9c>)
    9e34:	781b      	ldrb	r3, [r3, #0]
    9e36:	2b00      	cmp	r3, #0
    9e38:	d009      	beq.n	9e4e <SystemTimerSync+0x7a>
    9e3a:	4b0c      	ldr	r3, [pc, #48]	; (9e6c <SystemTimerSync+0x98>)
    9e3c:	681b      	ldr	r3, [r3, #0]
    9e3e:	2bff      	cmp	r3, #255	; 0xff
    9e40:	d005      	beq.n	9e4e <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    9e42:	4b12      	ldr	r3, [pc, #72]	; (9e8c <SystemTimerSync+0xb8>)
    9e44:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    9e46:	28fe      	cmp	r0, #254	; 0xfe
    9e48:	d902      	bls.n	9e50 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    9e4a:	4b11      	ldr	r3, [pc, #68]	; (9e90 <SystemTimerSync+0xbc>)
    9e4c:	4798      	blx	r3
        }
    }
}
    9e4e:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    9e50:	2201      	movs	r2, #1
    9e52:	4b10      	ldr	r3, [pc, #64]	; (9e94 <SystemTimerSync+0xc0>)
    9e54:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9e56:	2001      	movs	r0, #1
    9e58:	4b0f      	ldr	r3, [pc, #60]	; (9e98 <SystemTimerSync+0xc4>)
    9e5a:	4798      	blx	r3
    9e5c:	e7f7      	b.n	9e4e <SystemTimerSync+0x7a>
    9e5e:	46c0      	nop			; (mov r8, r8)
    9e60:	20000f00 	.word	0x20000f00
    9e64:	20001724 	.word	0x20001724
    9e68:	20001720 	.word	0x20001720
    9e6c:	20000ef4 	.word	0x20000ef4
    9e70:	20000ef8 	.word	0x20000ef8
    9e74:	20001590 	.word	0x20001590
    9e78:	0000acd5 	.word	0x0000acd5
    9e7c:	00009621 	.word	0x00009621
    9e80:	0000ad59 	.word	0x0000ad59
    9e84:	000095f9 	.word	0x000095f9
    9e88:	0000ad65 	.word	0x0000ad65
    9e8c:	00009add 	.word	0x00009add
    9e90:	00009d5d 	.word	0x00009d5d
    9e94:	20001722 	.word	0x20001722
    9e98:	00009f19 	.word	0x00009f19

00009e9c <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    9e9c:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    9e9e:	2010      	movs	r0, #16
    9ea0:	4b01      	ldr	r3, [pc, #4]	; (9ea8 <Stack_Init+0xc>)
    9ea2:	4798      	blx	r3
}
    9ea4:	bd10      	pop	{r4, pc}
    9ea6:	46c0      	nop			; (mov r8, r8)
    9ea8:	00009f19 	.word	0x00009f19

00009eac <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    9eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    9eae:	4b16      	ldr	r3, [pc, #88]	; (9f08 <SYSTEM_RunTasks+0x5c>)
    9eb0:	881b      	ldrh	r3, [r3, #0]
    9eb2:	b29b      	uxth	r3, r3
    9eb4:	2b1f      	cmp	r3, #31
    9eb6:	d922      	bls.n	9efe <SYSTEM_RunTasks+0x52>
    9eb8:	e7fe      	b.n	9eb8 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    9eba:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    9ebc:	4b13      	ldr	r3, [pc, #76]	; (9f0c <SYSTEM_RunTasks+0x60>)
    9ebe:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    9ec0:	4911      	ldr	r1, [pc, #68]	; (9f08 <SYSTEM_RunTasks+0x5c>)
    9ec2:	880b      	ldrh	r3, [r1, #0]
    9ec4:	2201      	movs	r2, #1
    9ec6:	40aa      	lsls	r2, r5
    9ec8:	4393      	bics	r3, r2
    9eca:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    9ecc:	4b10      	ldr	r3, [pc, #64]	; (9f10 <SYSTEM_RunTasks+0x64>)
    9ece:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    9ed0:	00ad      	lsls	r5, r5, #2
    9ed2:	4b10      	ldr	r3, [pc, #64]	; (9f14 <SYSTEM_RunTasks+0x68>)
    9ed4:	58eb      	ldr	r3, [r5, r3]
    9ed6:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    9ed8:	2101      	movs	r1, #1
        while (sysTaskFlag)
    9eda:	883b      	ldrh	r3, [r7, #0]
    9edc:	b29b      	uxth	r3, r3
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d011      	beq.n	9f06 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    9ee2:	8823      	ldrh	r3, [r4, #0]
    9ee4:	420b      	tst	r3, r1
    9ee6:	d1e8      	bne.n	9eba <SYSTEM_RunTasks+0xe>
    9ee8:	2201      	movs	r2, #1
    9eea:	8833      	ldrh	r3, [r6, #0]
    9eec:	b29b      	uxth	r3, r3
    9eee:	0015      	movs	r5, r2
    9ef0:	4113      	asrs	r3, r2
    9ef2:	4219      	tst	r1, r3
    9ef4:	d1e2      	bne.n	9ebc <SYSTEM_RunTasks+0x10>
    9ef6:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    9ef8:	2a05      	cmp	r2, #5
    9efa:	d1f6      	bne.n	9eea <SYSTEM_RunTasks+0x3e>
    9efc:	e7ed      	b.n	9eda <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    9efe:	4f02      	ldr	r7, [pc, #8]	; (9f08 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    9f00:	003c      	movs	r4, r7
    9f02:	003e      	movs	r6, r7
    9f04:	e7e8      	b.n	9ed8 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    9f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f08:	20000f08 	.word	0x20000f08
    9f0c:	00004245 	.word	0x00004245
    9f10:	00004251 	.word	0x00004251
    9f14:	0001aa40 	.word	0x0001aa40

00009f18 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    9f18:	b510      	push	{r4, lr}
    9f1a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    9f1c:	4b04      	ldr	r3, [pc, #16]	; (9f30 <SYSTEM_PostTask+0x18>)
    9f1e:	4798      	blx	r3
    sysTaskFlag |= task;
    9f20:	4b04      	ldr	r3, [pc, #16]	; (9f34 <SYSTEM_PostTask+0x1c>)
    9f22:	8818      	ldrh	r0, [r3, #0]
    9f24:	4320      	orrs	r0, r4
    9f26:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    9f28:	4b03      	ldr	r3, [pc, #12]	; (9f38 <SYSTEM_PostTask+0x20>)
    9f2a:	4798      	blx	r3
}
    9f2c:	bd10      	pop	{r4, pc}
    9f2e:	46c0      	nop			; (mov r8, r8)
    9f30:	00004245 	.word	0x00004245
    9f34:	20000f08 	.word	0x20000f08
    9f38:	00004251 	.word	0x00004251

00009f3c <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    9f3c:	4b03      	ldr	r3, [pc, #12]	; (9f4c <SYSTEM_ReadyToSleep+0x10>)
    9f3e:	8818      	ldrh	r0, [r3, #0]
    9f40:	b280      	uxth	r0, r0
    9f42:	4243      	negs	r3, r0
    9f44:	4158      	adcs	r0, r3
    9f46:	b2c0      	uxtb	r0, r0
}
    9f48:	4770      	bx	lr
    9f4a:	46c0      	nop			; (mov r8, r8)
    9f4c:	20000f08 	.word	0x20000f08

00009f50 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    9f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f52:	46d6      	mov	lr, sl
    9f54:	464f      	mov	r7, r9
    9f56:	b580      	push	{r7, lr}
    9f58:	b083      	sub	sp, #12
    9f5a:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    9f5c:	2900      	cmp	r1, #0
    9f5e:	d102      	bne.n	9f66 <Radio_WriteMode+0x16>
    9f60:	1f83      	subs	r3, r0, #6
    9f62:	2b01      	cmp	r3, #1
    9f64:	d92a      	bls.n	9fbc <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    9f66:	2307      	movs	r3, #7
    9f68:	4699      	mov	r9, r3
    9f6a:	001c      	movs	r4, r3
    9f6c:	4004      	ands	r4, r0
    newModulation &= 0x01;
    9f6e:	2601      	movs	r6, #1
    9f70:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    9f72:	2001      	movs	r0, #1
    9f74:	4b2b      	ldr	r3, [pc, #172]	; (a024 <Radio_WriteMode+0xd4>)
    9f76:	4798      	blx	r3
    9f78:	0005      	movs	r5, r0
    9f7a:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    9f7c:	b243      	sxtb	r3, r0
    9f7e:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    9f80:	464b      	mov	r3, r9
    9f82:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    9f84:	4652      	mov	r2, sl
    9f86:	0fd2      	lsrs	r2, r2, #31
    9f88:	4296      	cmp	r6, r2
    9f8a:	d00a      	beq.n	9fa2 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    9f8c:	2b00      	cmp	r3, #0
    9f8e:	d11a      	bne.n	9fc6 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    9f90:	2e00      	cmp	r6, #0
    9f92:	d11e      	bne.n	9fd2 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    9f94:	2778      	movs	r7, #120	; 0x78
    9f96:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9f98:	0039      	movs	r1, r7
    9f9a:	2001      	movs	r0, #1
    9f9c:	4b22      	ldr	r3, [pc, #136]	; (a028 <Radio_WriteMode+0xd8>)
    9f9e:	4798      	blx	r3
    9fa0:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    9fa2:	42a3      	cmp	r3, r4
    9fa4:	d00a      	beq.n	9fbc <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    9fa6:	2c00      	cmp	r4, #0
    9fa8:	d030      	beq.n	a00c <Radio_WriteMode+0xbc>
    9faa:	9b01      	ldr	r3, [sp, #4]
    9fac:	2b01      	cmp	r3, #1
    9fae:	d016      	beq.n	9fde <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    9fb0:	21f8      	movs	r1, #248	; 0xf8
    9fb2:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9fb4:	4321      	orrs	r1, r4
    9fb6:	2001      	movs	r0, #1
    9fb8:	4b1b      	ldr	r3, [pc, #108]	; (a028 <Radio_WriteMode+0xd8>)
    9fba:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    9fbc:	b003      	add	sp, #12
    9fbe:	bc0c      	pop	{r2, r3}
    9fc0:	4691      	mov	r9, r2
    9fc2:	469a      	mov	sl, r3
    9fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    9fc6:	21f8      	movs	r1, #248	; 0xf8
    9fc8:	4001      	ands	r1, r0
    9fca:	2001      	movs	r0, #1
    9fcc:	4b16      	ldr	r3, [pc, #88]	; (a028 <Radio_WriteMode+0xd8>)
    9fce:	4798      	blx	r3
    9fd0:	e7de      	b.n	9f90 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    9fd2:	2778      	movs	r7, #120	; 0x78
    9fd4:	4653      	mov	r3, sl
    9fd6:	401f      	ands	r7, r3
    9fd8:	2180      	movs	r1, #128	; 0x80
    9fda:	430f      	orrs	r7, r1
    9fdc:	e7dc      	b.n	9f98 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    9fde:	2041      	movs	r0, #65	; 0x41
    9fe0:	4b10      	ldr	r3, [pc, #64]	; (a024 <Radio_WriteMode+0xd4>)
    9fe2:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    9fe4:	2e00      	cmp	r6, #0
    9fe6:	d10e      	bne.n	a006 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    9fe8:	2130      	movs	r1, #48	; 0x30
    9fea:	4301      	orrs	r1, r0
    9fec:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    9fee:	2041      	movs	r0, #65	; 0x41
    9ff0:	4d0d      	ldr	r5, [pc, #52]	; (a028 <Radio_WriteMode+0xd8>)
    9ff2:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    9ff4:	21f8      	movs	r1, #248	; 0xf8
    9ff6:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9ff8:	4321      	orrs	r1, r4
    9ffa:	2001      	movs	r0, #1
    9ffc:	47a8      	blx	r5
			   delay_ms(1);
    9ffe:	2001      	movs	r0, #1
    a000:	4b0a      	ldr	r3, [pc, #40]	; (a02c <Radio_WriteMode+0xdc>)
    a002:	4798      	blx	r3
    a004:	e7da      	b.n	9fbc <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    a006:	21cf      	movs	r1, #207	; 0xcf
    a008:	4001      	ands	r1, r0
    a00a:	e7f0      	b.n	9fee <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    a00c:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    a00e:	4039      	ands	r1, r7
    a010:	2001      	movs	r0, #1
    a012:	4b05      	ldr	r3, [pc, #20]	; (a028 <Radio_WriteMode+0xd8>)
    a014:	4798      	blx	r3
        if (1 == blocking)
    a016:	9b01      	ldr	r3, [sp, #4]
    a018:	2b01      	cmp	r3, #1
    a01a:	d1cf      	bne.n	9fbc <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    a01c:	2001      	movs	r0, #1
    a01e:	4b04      	ldr	r3, [pc, #16]	; (a030 <Radio_WriteMode+0xe0>)
    a020:	4798      	blx	r3
    a022:	e7cb      	b.n	9fbc <Radio_WriteMode+0x6c>
    a024:	0000400d 	.word	0x0000400d
    a028:	00003fe5 	.word	0x00003fe5
    a02c:	00000181 	.word	0x00000181
    a030:	00004229 	.word	0x00004229

0000a034 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    a034:	b500      	push	{lr}
    a036:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    a038:	2012      	movs	r0, #18
    a03a:	4b0d      	ldr	r3, [pc, #52]	; (a070 <RADIO_FHSSChangeChannel+0x3c>)
    a03c:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    a03e:	4b0d      	ldr	r3, [pc, #52]	; (a074 <RADIO_FHSSChangeChannel+0x40>)
    a040:	8adb      	ldrh	r3, [r3, #22]
    a042:	2b00      	cmp	r3, #0
    a044:	d007      	beq.n	a056 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    a046:	4b0b      	ldr	r3, [pc, #44]	; (a074 <RADIO_FHSSChangeChannel+0x40>)
    a048:	691b      	ldr	r3, [r3, #16]
    a04a:	2b00      	cmp	r3, #0
    a04c:	d003      	beq.n	a056 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    a04e:	4a0a      	ldr	r2, [pc, #40]	; (a078 <RADIO_FHSSChangeChannel+0x44>)
    a050:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    a052:	0692      	lsls	r2, r2, #26
    a054:	d405      	bmi.n	a062 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    a056:	2102      	movs	r1, #2
    a058:	2012      	movs	r0, #18
    a05a:	4b08      	ldr	r3, [pc, #32]	; (a07c <RADIO_FHSSChangeChannel+0x48>)
    a05c:	4798      	blx	r3
}
    a05e:	b003      	add	sp, #12
    a060:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    a062:	a901      	add	r1, sp, #4
    a064:	2020      	movs	r0, #32
    a066:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    a068:	9801      	ldr	r0, [sp, #4]
    a06a:	4b05      	ldr	r3, [pc, #20]	; (a080 <RADIO_FHSSChangeChannel+0x4c>)
    a06c:	4798      	blx	r3
    a06e:	e7f2      	b.n	a056 <RADIO_FHSSChangeChannel+0x22>
    a070:	0000400d 	.word	0x0000400d
    a074:	20001728 	.word	0x20001728
    a078:	20001c62 	.word	0x20001c62
    a07c:	00003fe5 	.word	0x00003fe5
    a080:	0000f295 	.word	0x0000f295

0000a084 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    a086:	2000      	movs	r0, #0
    a088:	4b1a      	ldr	r3, [pc, #104]	; (a0f4 <RADIO_ReadRandom+0x70>)
    a08a:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    a08c:	4b1a      	ldr	r3, [pc, #104]	; (a0f8 <RADIO_ReadRandom+0x74>)
    a08e:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a090:	2201      	movs	r2, #1
    a092:	2101      	movs	r1, #1
    a094:	2000      	movs	r0, #0
    a096:	4c19      	ldr	r4, [pc, #100]	; (a0fc <RADIO_ReadRandom+0x78>)
    a098:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    a09a:	21ff      	movs	r1, #255	; 0xff
    a09c:	2011      	movs	r0, #17
    a09e:	4b18      	ldr	r3, [pc, #96]	; (a100 <RADIO_ReadRandom+0x7c>)
    a0a0:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    a0a2:	2201      	movs	r2, #1
    a0a4:	2101      	movs	r1, #1
    a0a6:	2005      	movs	r0, #5
    a0a8:	47a0      	blx	r4
    a0aa:	2410      	movs	r4, #16
    retVal = 0;
    a0ac:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    a0ae:	4f15      	ldr	r7, [pc, #84]	; (a104 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a0b0:	4e15      	ldr	r6, [pc, #84]	; (a108 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    a0b2:	2001      	movs	r0, #1
    a0b4:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a0b6:	202c      	movs	r0, #44	; 0x2c
    a0b8:	47b0      	blx	r6
    a0ba:	2301      	movs	r3, #1
    a0bc:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    a0be:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    a0c0:	4305      	orrs	r5, r0
    a0c2:	b2ad      	uxth	r5, r5
    a0c4:	3c01      	subs	r4, #1
    a0c6:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    a0c8:	2c00      	cmp	r4, #0
    a0ca:	d1f2      	bne.n	a0b2 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    a0cc:	2000      	movs	r0, #0
    a0ce:	4b0f      	ldr	r3, [pc, #60]	; (a10c <RADIO_ReadRandom+0x88>)
    a0d0:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    a0d2:	2201      	movs	r2, #1
    a0d4:	2101      	movs	r1, #1
    a0d6:	2000      	movs	r0, #0
    a0d8:	4b08      	ldr	r3, [pc, #32]	; (a0fc <RADIO_ReadRandom+0x78>)
    a0da:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    a0dc:	21ff      	movs	r1, #255	; 0xff
    a0de:	2012      	movs	r0, #18
    a0e0:	4c07      	ldr	r4, [pc, #28]	; (a100 <RADIO_ReadRandom+0x7c>)
    a0e2:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    a0e4:	2100      	movs	r1, #0
    a0e6:	2011      	movs	r0, #17
    a0e8:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    a0ea:	4b09      	ldr	r3, [pc, #36]	; (a110 <RADIO_ReadRandom+0x8c>)
    a0ec:	4798      	blx	r3
	
    return retVal;
}
    a0ee:	0028      	movs	r0, r5
    a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0f2:	46c0      	nop			; (mov r8, r8)
    a0f4:	0000fb59 	.word	0x0000fb59
    a0f8:	0000fffd 	.word	0x0000fffd
    a0fc:	00009f51 	.word	0x00009f51
    a100:	00003fe5 	.word	0x00003fe5
    a104:	00004229 	.word	0x00004229
    a108:	0000400d 	.word	0x0000400d
    a10c:	0000fc81 	.word	0x0000fc81
    a110:	00010141 	.word	0x00010141

0000a114 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    a114:	b510      	push	{r4, lr}
    a116:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    a118:	2334      	movs	r3, #52	; 0x34
    a11a:	4a11      	ldr	r2, [pc, #68]	; (a160 <Radio_ReadRssi+0x4c>)
    a11c:	5cd3      	ldrb	r3, [r2, r3]
    a11e:	2b01      	cmp	r3, #1
    a120:	d003      	beq.n	a12a <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    a122:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    a124:	2b00      	cmp	r3, #0
    a126:	d012      	beq.n	a14e <Radio_ReadRssi+0x3a>
	}

	return ERR_NONE;
}
    a128:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    a12a:	4b0e      	ldr	r3, [pc, #56]	; (a164 <Radio_ReadRssi+0x50>)
    a12c:	6812      	ldr	r2, [r2, #0]
    a12e:	429a      	cmp	r2, r3
    a130:	d906      	bls.n	a140 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    a132:	201b      	movs	r0, #27
    a134:	4b0c      	ldr	r3, [pc, #48]	; (a168 <Radio_ReadRssi+0x54>)
    a136:	4798      	blx	r3
    a138:	389d      	subs	r0, #157	; 0x9d
    a13a:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    a13c:	2000      	movs	r0, #0
    a13e:	e7f3      	b.n	a128 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    a140:	201b      	movs	r0, #27
    a142:	4b09      	ldr	r3, [pc, #36]	; (a168 <Radio_ReadRssi+0x54>)
    a144:	4798      	blx	r3
    a146:	38a4      	subs	r0, #164	; 0xa4
    a148:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    a14a:	2000      	movs	r0, #0
    a14c:	e7ec      	b.n	a128 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    a14e:	300b      	adds	r0, #11
    a150:	4b05      	ldr	r3, [pc, #20]	; (a168 <Radio_ReadRssi+0x54>)
    a152:	4798      	blx	r3
    a154:	0840      	lsrs	r0, r0, #1
    a156:	b2c3      	uxtb	r3, r0
    a158:	425b      	negs	r3, r3
    a15a:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    a15c:	2000      	movs	r0, #0
    a15e:	e7e3      	b.n	a128 <Radio_ReadRssi+0x14>
    a160:	20001728 	.word	0x20001728
    a164:	3361137f 	.word	0x3361137f
    a168:	0000400d 	.word	0x0000400d

0000a16c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    a16c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    a16e:	4b01      	ldr	r3, [pc, #4]	; (a174 <tc_cca_callback+0x8>)
    a170:	4798      	blx	r3
}
    a172:	bd10      	pop	{r4, pc}
    a174:	0000ad3d 	.word	0x0000ad3d

0000a178 <tc_ovf_callback>:
{
    a178:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    a17a:	4b01      	ldr	r3, [pc, #4]	; (a180 <tc_ovf_callback+0x8>)
    a17c:	4798      	blx	r3
}
    a17e:	bd10      	pop	{r4, pc}
    a180:	0000acf5 	.word	0x0000acf5

0000a184 <tmr_read_count>:
{
    a184:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    a186:	4802      	ldr	r0, [pc, #8]	; (a190 <tmr_read_count+0xc>)
    a188:	4b02      	ldr	r3, [pc, #8]	; (a194 <tmr_read_count+0x10>)
    a18a:	4798      	blx	r3
    a18c:	b280      	uxth	r0, r0
}
    a18e:	bd10      	pop	{r4, pc}
    a190:	200017b8 	.word	0x200017b8
    a194:	0000380d 	.word	0x0000380d

0000a198 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    a198:	4b03      	ldr	r3, [pc, #12]	; (a1a8 <tmr_disable_cc_interrupt+0x10>)
    a19a:	2110      	movs	r1, #16
    a19c:	681a      	ldr	r2, [r3, #0]
    a19e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    a1a0:	7e5a      	ldrb	r2, [r3, #25]
    a1a2:	438a      	bics	r2, r1
    a1a4:	765a      	strb	r2, [r3, #25]
}
    a1a6:	4770      	bx	lr
    a1a8:	200017b8 	.word	0x200017b8

0000a1ac <tmr_enable_cc_interrupt>:
{
    a1ac:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a1ae:	4c0a      	ldr	r4, [pc, #40]	; (a1d8 <tmr_enable_cc_interrupt+0x2c>)
    a1b0:	6820      	ldr	r0, [r4, #0]
    a1b2:	4b0a      	ldr	r3, [pc, #40]	; (a1dc <tmr_enable_cc_interrupt+0x30>)
    a1b4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a1b6:	4b0a      	ldr	r3, [pc, #40]	; (a1e0 <tmr_enable_cc_interrupt+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a1b8:	5c1b      	ldrb	r3, [r3, r0]
    a1ba:	221f      	movs	r2, #31
    a1bc:	401a      	ands	r2, r3
    a1be:	2301      	movs	r3, #1
    a1c0:	4093      	lsls	r3, r2
    a1c2:	4a08      	ldr	r2, [pc, #32]	; (a1e4 <tmr_enable_cc_interrupt+0x38>)
    a1c4:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    a1c6:	7e63      	ldrb	r3, [r4, #25]
    a1c8:	2210      	movs	r2, #16
    a1ca:	4313      	orrs	r3, r2
    a1cc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    a1ce:	6823      	ldr	r3, [r4, #0]
    a1d0:	2210      	movs	r2, #16
    a1d2:	725a      	strb	r2, [r3, #9]
}
    a1d4:	bd10      	pop	{r4, pc}
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	200017b8 	.word	0x200017b8
    a1dc:	000034e1 	.word	0x000034e1
    a1e0:	0001aa54 	.word	0x0001aa54
    a1e4:	e000e100 	.word	0xe000e100

0000a1e8 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    a1e8:	4b03      	ldr	r3, [pc, #12]	; (a1f8 <tmr_disable_ovf_interrupt+0x10>)
    a1ea:	2101      	movs	r1, #1
    a1ec:	681a      	ldr	r2, [r3, #0]
    a1ee:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    a1f0:	7e5a      	ldrb	r2, [r3, #25]
    a1f2:	438a      	bics	r2, r1
    a1f4:	765a      	strb	r2, [r3, #25]
}
    a1f6:	4770      	bx	lr
    a1f8:	200017b8 	.word	0x200017b8

0000a1fc <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a1fc:	4b06      	ldr	r3, [pc, #24]	; (a218 <tmr_stop+0x1c>)
    a1fe:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    a200:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a202:	2b00      	cmp	r3, #0
    a204:	d1fc      	bne.n	a200 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    a206:	3333      	adds	r3, #51	; 0x33
    a208:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    a20a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    a20c:	6813      	ldr	r3, [r2, #0]
    a20e:	2102      	movs	r1, #2
    a210:	438b      	bics	r3, r1
    a212:	6013      	str	r3, [r2, #0]
}
    a214:	4770      	bx	lr
    a216:	46c0      	nop			; (mov r8, r8)
    a218:	200017b8 	.word	0x200017b8

0000a21c <tmr_write_cmpreg>:
{
    a21c:	b510      	push	{r4, lr}
    a21e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    a220:	2100      	movs	r1, #0
    a222:	4802      	ldr	r0, [pc, #8]	; (a22c <tmr_write_cmpreg+0x10>)
    a224:	4b02      	ldr	r3, [pc, #8]	; (a230 <tmr_write_cmpreg+0x14>)
    a226:	4798      	blx	r3
}
    a228:	bd10      	pop	{r4, pc}
    a22a:	46c0      	nop			; (mov r8, r8)
    a22c:	200017b8 	.word	0x200017b8
    a230:	0000384d 	.word	0x0000384d

0000a234 <save_cpu_interrupt>:
{
    a234:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    a236:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a23a:	425a      	negs	r2, r3
    a23c:	4153      	adcs	r3, r2
    a23e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    a240:	b672      	cpsid	i
    a242:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a246:	2200      	movs	r2, #0
    a248:	4b02      	ldr	r3, [pc, #8]	; (a254 <save_cpu_interrupt+0x20>)
    a24a:	701a      	strb	r2, [r3, #0]
	return flags;
    a24c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    a24e:	b2c0      	uxtb	r0, r0
}
    a250:	b002      	add	sp, #8
    a252:	4770      	bx	lr
    a254:	20000008 	.word	0x20000008

0000a258 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    a258:	2800      	cmp	r0, #0
    a25a:	d005      	beq.n	a268 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    a25c:	2201      	movs	r2, #1
    a25e:	4b03      	ldr	r3, [pc, #12]	; (a26c <restore_cpu_interrupt+0x14>)
    a260:	701a      	strb	r2, [r3, #0]
    a262:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a266:	b662      	cpsie	i
}
    a268:	4770      	bx	lr
    a26a:	46c0      	nop			; (mov r8, r8)
    a26c:	20000008 	.word	0x20000008

0000a270 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    a270:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    a272:	4a33      	ldr	r2, [pc, #204]	; (a340 <tmr_init+0xd0>)
    a274:	2100      	movs	r1, #0
    a276:	2300      	movs	r3, #0
    a278:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a27a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a27c:	2000      	movs	r0, #0
    a27e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a280:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a282:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    a284:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    a286:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a288:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a28a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a28c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a28e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a290:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a292:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    a294:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a296:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a298:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a29a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a29c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a29e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a2a0:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    a2a2:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a2a4:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    a2a6:	2334      	movs	r3, #52	; 0x34
    a2a8:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    a2aa:	3b35      	subs	r3, #53	; 0x35
    a2ac:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    a2ae:	4c25      	ldr	r4, [pc, #148]	; (a344 <tmr_init+0xd4>)
    a2b0:	4925      	ldr	r1, [pc, #148]	; (a348 <tmr_init+0xd8>)
    a2b2:	0020      	movs	r0, r4
    a2b4:	4b25      	ldr	r3, [pc, #148]	; (a34c <tmr_init+0xdc>)
    a2b6:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    a2b8:	2200      	movs	r2, #0
    a2ba:	4925      	ldr	r1, [pc, #148]	; (a350 <tmr_init+0xe0>)
    a2bc:	0020      	movs	r0, r4
    a2be:	4d25      	ldr	r5, [pc, #148]	; (a354 <tmr_init+0xe4>)
    a2c0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    a2c2:	2202      	movs	r2, #2
    a2c4:	4924      	ldr	r1, [pc, #144]	; (a358 <tmr_init+0xe8>)
    a2c6:	0020      	movs	r0, r4
    a2c8:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a2ca:	6820      	ldr	r0, [r4, #0]
    a2cc:	4b23      	ldr	r3, [pc, #140]	; (a35c <tmr_init+0xec>)
    a2ce:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a2d0:	4b23      	ldr	r3, [pc, #140]	; (a360 <tmr_init+0xf0>)
    a2d2:	5c1a      	ldrb	r2, [r3, r0]
    a2d4:	231f      	movs	r3, #31
    a2d6:	4013      	ands	r3, r2
    a2d8:	2101      	movs	r1, #1
    a2da:	000a      	movs	r2, r1
    a2dc:	409a      	lsls	r2, r3
    a2de:	4b21      	ldr	r3, [pc, #132]	; (a364 <tmr_init+0xf4>)
    a2e0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    a2e2:	7e63      	ldrb	r3, [r4, #25]
    a2e4:	2201      	movs	r2, #1
    a2e6:	4313      	orrs	r3, r2
    a2e8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    a2ea:	6822      	ldr	r2, [r4, #0]
    a2ec:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    a2ee:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    a2f0:	2b00      	cmp	r3, #0
    a2f2:	d1fc      	bne.n	a2ee <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a2f4:	6813      	ldr	r3, [r2, #0]
    a2f6:	2102      	movs	r1, #2
    a2f8:	430b      	orrs	r3, r1
    a2fa:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    a2fc:	2000      	movs	r0, #0
    a2fe:	4b1a      	ldr	r3, [pc, #104]	; (a368 <tmr_init+0xf8>)
    a300:	4798      	blx	r3
    a302:	4d1a      	ldr	r5, [pc, #104]	; (a36c <tmr_init+0xfc>)
    a304:	47a8      	blx	r5
    a306:	491a      	ldr	r1, [pc, #104]	; (a370 <tmr_init+0x100>)
    a308:	4b1a      	ldr	r3, [pc, #104]	; (a374 <tmr_init+0x104>)
    a30a:	4798      	blx	r3
    a30c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    a30e:	4b1a      	ldr	r3, [pc, #104]	; (a378 <tmr_init+0x108>)
    a310:	4798      	blx	r3
    a312:	47a8      	blx	r5
    a314:	1c01      	adds	r1, r0, #0
    a316:	1c20      	adds	r0, r4, #0
    a318:	4b18      	ldr	r3, [pc, #96]	; (a37c <tmr_init+0x10c>)
    a31a:	4798      	blx	r3
    a31c:	21fc      	movs	r1, #252	; 0xfc
    a31e:	0589      	lsls	r1, r1, #22
    a320:	4b17      	ldr	r3, [pc, #92]	; (a380 <tmr_init+0x110>)
    a322:	4798      	blx	r3
    a324:	2800      	cmp	r0, #0
    a326:	d005      	beq.n	a334 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    a328:	21fe      	movs	r1, #254	; 0xfe
    a32a:	0589      	lsls	r1, r1, #22
    a32c:	1c20      	adds	r0, r4, #0
    a32e:	4b15      	ldr	r3, [pc, #84]	; (a384 <tmr_init+0x114>)
    a330:	4798      	blx	r3
    a332:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    a334:	1c20      	adds	r0, r4, #0
    a336:	4b10      	ldr	r3, [pc, #64]	; (a378 <tmr_init+0x108>)
    a338:	4798      	blx	r3
    a33a:	b2c0      	uxtb	r0, r0
}
    a33c:	bd70      	pop	{r4, r5, r6, pc}
    a33e:	46c0      	nop			; (mov r8, r8)
    a340:	20001780 	.word	0x20001780
    a344:	200017b8 	.word	0x200017b8
    a348:	42002000 	.word	0x42002000
    a34c:	0000351d 	.word	0x0000351d
    a350:	0000a179 	.word	0x0000a179
    a354:	000033f9 	.word	0x000033f9
    a358:	0000a16d 	.word	0x0000a16d
    a35c:	000034e1 	.word	0x000034e1
    a360:	0001aa54 	.word	0x0001aa54
    a364:	e000e100 	.word	0xe000e100
    a368:	000031c1 	.word	0x000031c1
    a36c:	00011cfd 	.word	0x00011cfd
    a370:	49742400 	.word	0x49742400
    a374:	000112c5 	.word	0x000112c5
    a378:	00010db1 	.word	0x00010db1
    a37c:	000118e5 	.word	0x000118e5
    a380:	00010d09 	.word	0x00010d09
    a384:	00010fa1 	.word	0x00010fa1

0000a388 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a388:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    a38a:	2800      	cmp	r0, #0
    a38c:	d122      	bne.n	a3d4 <nvm_read+0x4c>
    a38e:	4814      	ldr	r0, [pc, #80]	; (a3e0 <nvm_read+0x58>)
    a390:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    a392:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    a394:	07e4      	lsls	r4, r4, #31
    a396:	d400      	bmi.n	a39a <nvm_read+0x12>
}
    a398:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    a39a:	2420      	movs	r4, #32
    a39c:	34ff      	adds	r4, #255	; 0xff
    a39e:	4810      	ldr	r0, [pc, #64]	; (a3e0 <nvm_read+0x58>)
    a3a0:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	d019      	beq.n	a3da <nvm_read+0x52>
    a3a6:	2001      	movs	r0, #1
    a3a8:	4381      	bics	r1, r0
    a3aa:	2000      	movs	r0, #0
    a3ac:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    a3ae:	1e5e      	subs	r6, r3, #1
    a3b0:	e005      	b.n	a3be <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    a3b2:	3002      	adds	r0, #2
    a3b4:	b280      	uxth	r0, r0
    a3b6:	0005      	movs	r5, r0
    a3b8:	3102      	adds	r1, #2
    a3ba:	4283      	cmp	r3, r0
    a3bc:	d908      	bls.n	a3d0 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    a3be:	880c      	ldrh	r4, [r1, #0]
    a3c0:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    a3c2:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    a3c4:	42ae      	cmp	r6, r5
    a3c6:	d9f4      	bls.n	a3b2 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    a3c8:	1955      	adds	r5, r2, r5
    a3ca:	0a24      	lsrs	r4, r4, #8
    a3cc:	706c      	strb	r4, [r5, #1]
    a3ce:	e7f0      	b.n	a3b2 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    a3d0:	2000      	movs	r0, #0
    a3d2:	e7e1      	b.n	a398 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    a3d4:	2008      	movs	r0, #8
    a3d6:	4240      	negs	r0, r0
    a3d8:	e7de      	b.n	a398 <nvm_read+0x10>
	return STATUS_OK;
    a3da:	2000      	movs	r0, #0
    a3dc:	e7dc      	b.n	a398 <nvm_read+0x10>
    a3de:	46c0      	nop			; (mov r8, r8)
    a3e0:	41004000 	.word	0x41004000

0000a3e4 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3e6:	46de      	mov	lr, fp
    a3e8:	4657      	mov	r7, sl
    a3ea:	464e      	mov	r6, r9
    a3ec:	4645      	mov	r5, r8
    a3ee:	b5e0      	push	{r5, r6, r7, lr}
    a3f0:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    a3f2:	2800      	cmp	r0, #0
    a3f4:	d168      	bne.n	a4c8 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    a3f6:	b29b      	uxth	r3, r3
    a3f8:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    a3fa:	4688      	mov	r8, r1
	uint32_t row_start_address
    a3fc:	23ff      	movs	r3, #255	; 0xff
    a3fe:	4399      	bics	r1, r3
    a400:	9100      	str	r1, [sp, #0]
	while (length) {
    a402:	4653      	mov	r3, sl
    a404:	2b00      	cmp	r3, #0
    a406:	d06b      	beq.n	a4e0 <nvm_write+0xfc>
    a408:	ab04      	add	r3, sp, #16
    a40a:	1a5b      	subs	r3, r3, r1
    a40c:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    a40e:	4e35      	ldr	r6, [pc, #212]	; (a4e4 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    a410:	4b35      	ldr	r3, [pc, #212]	; (a4e8 <nvm_write+0x104>)
    a412:	469b      	mov	fp, r3
    a414:	9203      	str	r2, [sp, #12]
    a416:	e03a      	b.n	a48e <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    a418:	3301      	adds	r3, #1
		for (i = row_start_address;
    a41a:	42bb      	cmp	r3, r7
    a41c:	d20e      	bcs.n	a43c <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    a41e:	2a00      	cmp	r2, #0
    a420:	d0fa      	beq.n	a418 <nvm_write+0x34>
    a422:	4299      	cmp	r1, r3
    a424:	d1f8      	bne.n	a418 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    a426:	9d03      	ldr	r5, [sp, #12]
    a428:	7828      	ldrb	r0, [r5, #0]
    a42a:	9c02      	ldr	r4, [sp, #8]
    a42c:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    a42e:	3101      	adds	r1, #1
				length--;
    a430:	3a01      	subs	r2, #1
    a432:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    a434:	0028      	movs	r0, r5
    a436:	3001      	adds	r0, #1
    a438:	9003      	str	r0, [sp, #12]
    a43a:	e7ed      	b.n	a418 <nvm_write+0x34>
    a43c:	4692      	mov	sl, r2
    a43e:	4688      	mov	r8, r1
    a440:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    a442:	4b2a      	ldr	r3, [pc, #168]	; (a4ec <nvm_write+0x108>)
    a444:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    a446:	9800      	ldr	r0, [sp, #0]
    a448:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    a44a:	2805      	cmp	r0, #5
    a44c:	d0fb      	beq.n	a446 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    a44e:	2800      	cmp	r0, #0
    a450:	d13d      	bne.n	a4ce <nvm_write+0xea>
    a452:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    a454:	4f26      	ldr	r7, [pc, #152]	; (a4f0 <nvm_write+0x10c>)
    a456:	9401      	str	r4, [sp, #4]
    a458:	9b00      	ldr	r3, [sp, #0]
    a45a:	1aec      	subs	r4, r5, r3
    a45c:	ab04      	add	r3, sp, #16
    a45e:	469c      	mov	ip, r3
    a460:	4464      	add	r4, ip
    a462:	2240      	movs	r2, #64	; 0x40
    a464:	0021      	movs	r1, r4
    a466:	0028      	movs	r0, r5
    a468:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    a46a:	2805      	cmp	r0, #5
    a46c:	d0f9      	beq.n	a462 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    a46e:	2800      	cmp	r0, #0
    a470:	d12d      	bne.n	a4ce <nvm_write+0xea>
    a472:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    a474:	9b01      	ldr	r3, [sp, #4]
    a476:	42ab      	cmp	r3, r5
    a478:	d1ee      	bne.n	a458 <nvm_write+0x74>
	cpu_irq_leave_critical();
    a47a:	4b1e      	ldr	r3, [pc, #120]	; (a4f4 <nvm_write+0x110>)
    a47c:	4798      	blx	r3
    a47e:	9b02      	ldr	r3, [sp, #8]
    a480:	3b01      	subs	r3, #1
    a482:	3bff      	subs	r3, #255	; 0xff
    a484:	9302      	str	r3, [sp, #8]
    a486:	9500      	str	r5, [sp, #0]
	while (length) {
    a488:	4653      	mov	r3, sl
    a48a:	2b00      	cmp	r3, #0
    a48c:	d028      	beq.n	a4e0 <nvm_write+0xfc>
    a48e:	9b00      	ldr	r3, [sp, #0]
    a490:	1c5f      	adds	r7, r3, #1
    a492:	37ff      	adds	r7, #255	; 0xff
{
    a494:	001c      	movs	r4, r3
    a496:	46b9      	mov	r9, r7
    a498:	001f      	movs	r7, r3
    a49a:	1be5      	subs	r5, r4, r7
    a49c:	ab04      	add	r3, sp, #16
    a49e:	469c      	mov	ip, r3
    a4a0:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    a4a2:	2240      	movs	r2, #64	; 0x40
    a4a4:	0029      	movs	r1, r5
    a4a6:	0020      	movs	r0, r4
    a4a8:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    a4aa:	2805      	cmp	r0, #5
    a4ac:	d0f9      	beq.n	a4a2 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    a4ae:	2800      	cmp	r0, #0
    a4b0:	d10d      	bne.n	a4ce <nvm_write+0xea>
    a4b2:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    a4b4:	454c      	cmp	r4, r9
    a4b6:	d1f0      	bne.n	a49a <nvm_write+0xb6>
    a4b8:	464f      	mov	r7, r9
		for (i = row_start_address;
    a4ba:	9b00      	ldr	r3, [sp, #0]
    a4bc:	429f      	cmp	r7, r3
    a4be:	d9c0      	bls.n	a442 <nvm_write+0x5e>
    a4c0:	4652      	mov	r2, sl
    a4c2:	4641      	mov	r1, r8
    a4c4:	9401      	str	r4, [sp, #4]
    a4c6:	e7aa      	b.n	a41e <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    a4c8:	2008      	movs	r0, #8
    a4ca:	4240      	negs	r0, r0
    a4cc:	e001      	b.n	a4d2 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    a4ce:	2008      	movs	r0, #8
    a4d0:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    a4d2:	b045      	add	sp, #276	; 0x114
    a4d4:	bc3c      	pop	{r2, r3, r4, r5}
    a4d6:	4690      	mov	r8, r2
    a4d8:	4699      	mov	r9, r3
    a4da:	46a2      	mov	sl, r4
    a4dc:	46ab      	mov	fp, r5
    a4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    a4e0:	2000      	movs	r0, #0
    a4e2:	e7f6      	b.n	a4d2 <nvm_write+0xee>
    a4e4:	00000ec5 	.word	0x00000ec5
    a4e8:	00000f45 	.word	0x00000f45
    a4ec:	000001ad 	.word	0x000001ad
    a4f0:	00000ded 	.word	0x00000ded
    a4f4:	000001ed 	.word	0x000001ed

0000a4f8 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    a4f8:	b500      	push	{lr}
    a4fa:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    a4fc:	2800      	cmp	r0, #0
    a4fe:	d110      	bne.n	a522 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a500:	2300      	movs	r3, #0
    a502:	466a      	mov	r2, sp
    a504:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a506:	4a08      	ldr	r2, [pc, #32]	; (a528 <nvm_init+0x30>)
    a508:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    a50a:	466a      	mov	r2, sp
    a50c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a50e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    a510:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    a512:	3302      	adds	r3, #2
    a514:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    a516:	4668      	mov	r0, sp
    a518:	4b04      	ldr	r3, [pc, #16]	; (a52c <nvm_init+0x34>)
    a51a:	4798      	blx	r3

		return STATUS_OK;
    a51c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    a51e:	b003      	add	sp, #12
    a520:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    a522:	2008      	movs	r0, #8
    a524:	4240      	negs	r0, r0
    a526:	e7fa      	b.n	a51e <nvm_init+0x26>
    a528:	41004000 	.word	0x41004000
    a52c:	00000cb1 	.word	0x00000cb1

0000a530 <joindata_callback>:
/*** joindata_callback **********************************************************
 \brief      Callback function for the ending of Activation procedure
 \param[in]  status - join status
********************************************************************************/
void joindata_callback(bool status)
{
    a530:	b530      	push	{r4, r5, lr}
    a532:	b083      	sub	sp, #12
	StackRetStatus_t stackRetStatus = LORAWAN_INVALID_REQUEST ;
	
	// This is called every time the join process is finished
	if (true == status)
    a534:	2800      	cmp	r0, #0
    a536:	d01c      	beq.n	a572 <joindata_callback+0x42>
	{
		joined = true ;
    a538:	2201      	movs	r2, #1
    a53a:	4b1d      	ldr	r3, [pc, #116]	; (a5b0 <joindata_callback+0x80>)
    a53c:	701a      	strb	r2, [r3, #0]
		set_LED_data(LED_GREEN, &off) ;
    a53e:	4d1d      	ldr	r5, [pc, #116]	; (a5b4 <joindata_callback+0x84>)
    a540:	0029      	movs	r1, r5
    a542:	2003      	movs	r0, #3
    a544:	4c1c      	ldr	r4, [pc, #112]	; (a5b8 <joindata_callback+0x88>)
    a546:	47a0      	blx	r4
		set_LED_data(LED_AMBER, &off) ;
    a548:	0029      	movs	r1, r5
    a54a:	2002      	movs	r0, #2
    a54c:	47a0      	blx	r4
		printf("\nJoin Successful!\r\n") ;
    a54e:	481b      	ldr	r0, [pc, #108]	; (a5bc <joindata_callback+0x8c>)
    a550:	4b1b      	ldr	r3, [pc, #108]	; (a5c0 <joindata_callback+0x90>)
    a552:	4798      	blx	r3
		// Start the SW Timer to send data periodically
		stackRetStatus = SwTimerStart(AppTimerID, MS_TO_US(APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void*)appTimer_callback, NULL) ;	
    a554:	4b1b      	ldr	r3, [pc, #108]	; (a5c4 <joindata_callback+0x94>)
    a556:	7818      	ldrb	r0, [r3, #0]
    a558:	2300      	movs	r3, #0
    a55a:	9300      	str	r3, [sp, #0]
    a55c:	4b1a      	ldr	r3, [pc, #104]	; (a5c8 <joindata_callback+0x98>)
    a55e:	2200      	movs	r2, #0
    a560:	491a      	ldr	r1, [pc, #104]	; (a5cc <joindata_callback+0x9c>)
    a562:	4c1b      	ldr	r4, [pc, #108]	; (a5d0 <joindata_callback+0xa0>)
    a564:	47a0      	blx	r4
		if (LORAWAN_SUCCESS != stackRetStatus)
    a566:	2808      	cmp	r0, #8
    a568:	d017      	beq.n	a59a <joindata_callback+0x6a>
		{
			printf("Unable to start the application timer\r\n") ;
    a56a:	481a      	ldr	r0, [pc, #104]	; (a5d4 <joindata_callback+0xa4>)
    a56c:	4b14      	ldr	r3, [pc, #80]	; (a5c0 <joindata_callback+0x90>)
    a56e:	4798      	blx	r3
    a570:	e013      	b.n	a59a <joindata_callback+0x6a>
		}
	}
	else
	{
		joined = false ;
    a572:	2200      	movs	r2, #0
    a574:	4b0e      	ldr	r3, [pc, #56]	; (a5b0 <joindata_callback+0x80>)
    a576:	701a      	strb	r2, [r3, #0]
		set_LED_data(LED_GREEN, &off) ;
    a578:	490e      	ldr	r1, [pc, #56]	; (a5b4 <joindata_callback+0x84>)
    a57a:	2003      	movs	r0, #3
    a57c:	4c0e      	ldr	r4, [pc, #56]	; (a5b8 <joindata_callback+0x88>)
    a57e:	47a0      	blx	r4
		set_LED_data(LED_AMBER, &on) ;
    a580:	4915      	ldr	r1, [pc, #84]	; (a5d8 <joindata_callback+0xa8>)
    a582:	2002      	movs	r0, #2
    a584:	47a0      	blx	r4
		printf("\nJoin Denied!\r\n") ;
    a586:	4815      	ldr	r0, [pc, #84]	; (a5dc <joindata_callback+0xac>)
    a588:	4c0d      	ldr	r4, [pc, #52]	; (a5c0 <joindata_callback+0x90>)
    a58a:	47a0      	blx	r4
		printf("\nTry to join again ...\r\n") ;
    a58c:	4814      	ldr	r0, [pc, #80]	; (a5e0 <joindata_callback+0xb0>)
    a58e:	47a0      	blx	r4
		stackRetStatus = LORAWAN_Join(LORAWAN_OTAA) ;
    a590:	2000      	movs	r0, #0
    a592:	4b14      	ldr	r3, [pc, #80]	; (a5e4 <joindata_callback+0xb4>)
    a594:	4798      	blx	r3
		if (LORAWAN_SUCCESS == stackRetStatus)
    a596:	2808      	cmp	r0, #8
    a598:	d001      	beq.n	a59e <joindata_callback+0x6e>
		{
			set_LED_data(LED_GREEN, &on) ;
			printf("\nJoin Request sent to the network server\r\n") ;
		}
	}
}
    a59a:	b003      	add	sp, #12
    a59c:	bd30      	pop	{r4, r5, pc}
			set_LED_data(LED_GREEN, &on) ;
    a59e:	490e      	ldr	r1, [pc, #56]	; (a5d8 <joindata_callback+0xa8>)
    a5a0:	3805      	subs	r0, #5
    a5a2:	4b05      	ldr	r3, [pc, #20]	; (a5b8 <joindata_callback+0x88>)
    a5a4:	4798      	blx	r3
			printf("\nJoin Request sent to the network server\r\n") ;
    a5a6:	4810      	ldr	r0, [pc, #64]	; (a5e8 <joindata_callback+0xb8>)
    a5a8:	4b05      	ldr	r3, [pc, #20]	; (a5c0 <joindata_callback+0x90>)
    a5aa:	4798      	blx	r3
}
    a5ac:	e7f5      	b.n	a59a <joindata_callback+0x6a>
    a5ae:	46c0      	nop			; (mov r8, r8)
    a5b0:	20000f0b 	.word	0x20000f0b
    a5b4:	20000f0c 	.word	0x20000f0c
    a5b8:	00009589 	.word	0x00009589
    a5bc:	0001ac40 	.word	0x0001ac40
    a5c0:	00013d81 	.word	0x00013d81
    a5c4:	20000009 	.word	0x20000009
    a5c8:	0000a725 	.word	0x0000a725
    a5cc:	03938700 	.word	0x03938700
    a5d0:	000098f5 	.word	0x000098f5
    a5d4:	0001ac54 	.word	0x0001ac54
    a5d8:	20000034 	.word	0x20000034
    a5dc:	0001ac7c 	.word	0x0001ac7c
    a5e0:	0001ac8c 	.word	0x0001ac8c
    a5e4:	0000c011 	.word	0x0000c011
    a5e8:	0001aca4 	.word	0x0001aca4

0000a5ec <appdata_callback>:
			 Application data
 \param[in]  *appHandle - callback handle
 \param[in]  *appData - callback parameters
********************************************************************************/
void appdata_callback(void *appHandle, appCbParams_t *appdata)
{
    a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_INVALID_REQUEST ;

	if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    a5ee:	780b      	ldrb	r3, [r1, #0]
    a5f0:	2b02      	cmp	r3, #2
    a5f2:	d002      	beq.n	a5fa <appdata_callback+0xe>
			{
				printf("Received ACK for Confirmed data\r\n") ;
			}
		}
	}
	else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    a5f4:	2b04      	cmp	r3, #4
    a5f6:	d029      	beq.n	a64c <appdata_callback+0x60>
			printf("\n\rIssue\r\n") ;
			set_LED_data(LED_AMBER, &on) ;
			break ;
		}
	}
}
    a5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (LORAWAN_SUCCESS == status)
    a5fa:	7b4b      	ldrb	r3, [r1, #13]
    a5fc:	2b08      	cmp	r3, #8
    a5fe:	d1fb      	bne.n	a5f8 <appdata_callback+0xc>
			uint8_t dataLength = appdata->param.rxData.dataLength ;
    a600:	7b0e      	ldrb	r6, [r1, #12]
			if((dataLength > 0U) && (NULL != pData))
    a602:	2e00      	cmp	r6, #0
    a604:	d01e      	beq.n	a644 <appdata_callback+0x58>
			uint8_t *pData = appdata->param.rxData.pData ;
    a606:	688f      	ldr	r7, [r1, #8]
			if((dataLength > 0U) && (NULL != pData))
    a608:	2f00      	cmp	r7, #0
    a60a:	d01b      	beq.n	a644 <appdata_callback+0x58>
				printf("*** Received DL Data ***\n\r") ;
    a60c:	4827      	ldr	r0, [pc, #156]	; (a6ac <appdata_callback+0xc0>)
    a60e:	4c28      	ldr	r4, [pc, #160]	; (a6b0 <appdata_callback+0xc4>)
    a610:	47a0      	blx	r4
				printf("\nFrame Received at port %d\n\r", pData[0]) ;
    a612:	7839      	ldrb	r1, [r7, #0]
    a614:	4827      	ldr	r0, [pc, #156]	; (a6b4 <appdata_callback+0xc8>)
    a616:	47a0      	blx	r4
				printf("\nFrame Length - %d\n\r", dataLength) ;
    a618:	0031      	movs	r1, r6
    a61a:	4827      	ldr	r0, [pc, #156]	; (a6b8 <appdata_callback+0xcc>)
    a61c:	47a0      	blx	r4
				printf ("\nPayload: ") ;
    a61e:	4827      	ldr	r0, [pc, #156]	; (a6bc <appdata_callback+0xd0>)
    a620:	47a0      	blx	r4
				for (uint8_t i = 0; i < dataLength - 1; i++)
    a622:	3e01      	subs	r6, #1
    a624:	2e00      	cmp	r6, #0
    a626:	dd09      	ble.n	a63c <appdata_callback+0x50>
    a628:	2400      	movs	r4, #0
					printf("%0x", pData[i+1]) ;
    a62a:	4d21      	ldr	r5, [pc, #132]	; (a6b0 <appdata_callback+0xc4>)
    a62c:	193b      	adds	r3, r7, r4
    a62e:	7859      	ldrb	r1, [r3, #1]
    a630:	4823      	ldr	r0, [pc, #140]	; (a6c0 <appdata_callback+0xd4>)
    a632:	47a8      	blx	r5
				for (uint8_t i = 0; i < dataLength - 1; i++)
    a634:	3401      	adds	r4, #1
    a636:	b2e4      	uxtb	r4, r4
    a638:	42b4      	cmp	r4, r6
    a63a:	dbf7      	blt.n	a62c <appdata_callback+0x40>
				printf("\r\n*************************\r\n") ;
    a63c:	4821      	ldr	r0, [pc, #132]	; (a6c4 <appdata_callback+0xd8>)
    a63e:	4b22      	ldr	r3, [pc, #136]	; (a6c8 <appdata_callback+0xdc>)
    a640:	4798      	blx	r3
    a642:	e7d9      	b.n	a5f8 <appdata_callback+0xc>
				printf("Received ACK for Confirmed data\r\n") ;
    a644:	4821      	ldr	r0, [pc, #132]	; (a6cc <appdata_callback+0xe0>)
    a646:	4b20      	ldr	r3, [pc, #128]	; (a6c8 <appdata_callback+0xdc>)
    a648:	4798      	blx	r3
    a64a:	e7d5      	b.n	a5f8 <appdata_callback+0xc>
		status = appdata->param.transCmpl.status ;
    a64c:	790c      	ldrb	r4, [r1, #4]
		printf("Transaction Complete - Status: %d\r\n", status) ;
    a64e:	0021      	movs	r1, r4
    a650:	481f      	ldr	r0, [pc, #124]	; (a6d0 <appdata_callback+0xe4>)
    a652:	4b17      	ldr	r3, [pc, #92]	; (a6b0 <appdata_callback+0xc4>)
    a654:	4798      	blx	r3
		switch (status)
    a656:	2c10      	cmp	r4, #16
    a658:	d017      	beq.n	a68a <appdata_callback+0x9e>
    a65a:	2c11      	cmp	r4, #17
    a65c:	d01d      	beq.n	a69a <appdata_callback+0xae>
    a65e:	2c08      	cmp	r4, #8
    a660:	d007      	beq.n	a672 <appdata_callback+0x86>
			printf("\n\rIssue\r\n") ;
    a662:	481c      	ldr	r0, [pc, #112]	; (a6d4 <appdata_callback+0xe8>)
    a664:	4b18      	ldr	r3, [pc, #96]	; (a6c8 <appdata_callback+0xdc>)
    a666:	4798      	blx	r3
			set_LED_data(LED_AMBER, &on) ;
    a668:	491b      	ldr	r1, [pc, #108]	; (a6d8 <appdata_callback+0xec>)
    a66a:	2002      	movs	r0, #2
    a66c:	4b1b      	ldr	r3, [pc, #108]	; (a6dc <appdata_callback+0xf0>)
    a66e:	4798      	blx	r3
}
    a670:	e7c2      	b.n	a5f8 <appdata_callback+0xc>
				printf("Transmission Success\r\n") ;
    a672:	481b      	ldr	r0, [pc, #108]	; (a6e0 <appdata_callback+0xf4>)
    a674:	4b14      	ldr	r3, [pc, #80]	; (a6c8 <appdata_callback+0xdc>)
    a676:	4798      	blx	r3
				set_LED_data(LED_GREEN, &off) ;
    a678:	4d1a      	ldr	r5, [pc, #104]	; (a6e4 <appdata_callback+0xf8>)
    a67a:	0029      	movs	r1, r5
    a67c:	2003      	movs	r0, #3
    a67e:	4c17      	ldr	r4, [pc, #92]	; (a6dc <appdata_callback+0xf0>)
    a680:	47a0      	blx	r4
				set_LED_data(LED_AMBER, &off) ;
    a682:	0029      	movs	r1, r5
    a684:	2002      	movs	r0, #2
    a686:	47a0      	blx	r4
			break ;
    a688:	e7b6      	b.n	a5f8 <appdata_callback+0xc>
				printf("\n\rNO_CHANNELS_FOUND\n\r") ;
    a68a:	4817      	ldr	r0, [pc, #92]	; (a6e8 <appdata_callback+0xfc>)
    a68c:	4b08      	ldr	r3, [pc, #32]	; (a6b0 <appdata_callback+0xc4>)
    a68e:	4798      	blx	r3
				set_LED_data(LED_AMBER, &on) ;
    a690:	4911      	ldr	r1, [pc, #68]	; (a6d8 <appdata_callback+0xec>)
    a692:	2002      	movs	r0, #2
    a694:	4b11      	ldr	r3, [pc, #68]	; (a6dc <appdata_callback+0xf0>)
    a696:	4798      	blx	r3
			break ;
    a698:	e7ae      	b.n	a5f8 <appdata_callback+0xc>
				printf("\n\rBUSY\n\r") ;
    a69a:	4814      	ldr	r0, [pc, #80]	; (a6ec <appdata_callback+0x100>)
    a69c:	4b04      	ldr	r3, [pc, #16]	; (a6b0 <appdata_callback+0xc4>)
    a69e:	4798      	blx	r3
				set_LED_data(LED_AMBER, &on) ;
    a6a0:	490d      	ldr	r1, [pc, #52]	; (a6d8 <appdata_callback+0xec>)
    a6a2:	2002      	movs	r0, #2
    a6a4:	4b0d      	ldr	r3, [pc, #52]	; (a6dc <appdata_callback+0xf0>)
    a6a6:	4798      	blx	r3
			break ;
    a6a8:	e7a6      	b.n	a5f8 <appdata_callback+0xc>
    a6aa:	46c0      	nop			; (mov r8, r8)
    a6ac:	0001ab2c 	.word	0x0001ab2c
    a6b0:	00013cbd 	.word	0x00013cbd
    a6b4:	0001ab48 	.word	0x0001ab48
    a6b8:	0001ab68 	.word	0x0001ab68
    a6bc:	0001ab80 	.word	0x0001ab80
    a6c0:	0001ab8c 	.word	0x0001ab8c
    a6c4:	0001ab90 	.word	0x0001ab90
    a6c8:	00013d81 	.word	0x00013d81
    a6cc:	0001abb0 	.word	0x0001abb0
    a6d0:	0001abd4 	.word	0x0001abd4
    a6d4:	0001ac34 	.word	0x0001ac34
    a6d8:	20000034 	.word	0x20000034
    a6dc:	00009589 	.word	0x00009589
    a6e0:	0001abf8 	.word	0x0001abf8
    a6e4:	20000f0c 	.word	0x20000f0c
    a6e8:	0001ac10 	.word	0x0001ac10
    a6ec:	0001ac28 	.word	0x0001ac28

0000a6f0 <print_array>:
{
    a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6f2:	0004      	movs	r4, r0
    for (uint8_t i =0; i < length; i++)
    a6f4:	2900      	cmp	r1, #0
    a6f6:	d00b      	beq.n	a710 <print_array+0x20>
    a6f8:	3901      	subs	r1, #1
    a6fa:	b2cd      	uxtb	r5, r1
    a6fc:	3501      	adds	r5, #1
    a6fe:	1945      	adds	r5, r0, r5
        printf("%02x", *array) ;
    a700:	4e05      	ldr	r6, [pc, #20]	; (a718 <print_array+0x28>)
    a702:	4f06      	ldr	r7, [pc, #24]	; (a71c <print_array+0x2c>)
    a704:	7821      	ldrb	r1, [r4, #0]
    a706:	0030      	movs	r0, r6
    a708:	47b8      	blx	r7
        array++ ;
    a70a:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    a70c:	42ac      	cmp	r4, r5
    a70e:	d1f9      	bne.n	a704 <print_array+0x14>
    printf("\n\r") ;
    a710:	4803      	ldr	r0, [pc, #12]	; (a720 <print_array+0x30>)
    a712:	4b02      	ldr	r3, [pc, #8]	; (a71c <print_array+0x2c>)
    a714:	4798      	blx	r3
}
    a716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a718:	0001ad1c 	.word	0x0001ad1c
    a71c:	00013cbd 	.word	0x00013cbd
    a720:	0001ab44 	.word	0x0001ab44

0000a724 <appTimer_callback>:

/*** appTimer_callback **********************************************************
 \brief      Callback function for the Application Timer called every APP_TIMEOUT
********************************************************************************/
void appTimer_callback(void)
{
    a724:	b5f0      	push	{r4, r5, r6, r7, lr}
    a726:	b087      	sub	sp, #28
	StackRetStatus_t status ;

	printf("App timer expired \r\n") ;
    a728:	485b      	ldr	r0, [pc, #364]	; (a898 <appTimer_callback+0x174>)
    a72a:	4b5c      	ldr	r3, [pc, #368]	; (a89c <appTimer_callback+0x178>)
    a72c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    a72e:	4b5c      	ldr	r3, [pc, #368]	; (a8a0 <appTimer_callback+0x17c>)
    a730:	6818      	ldr	r0, [r3, #0]
    a732:	8c03      	ldrh	r3, [r0, #32]
    a734:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    a736:	2b00      	cmp	r3, #0
    a738:	d1fb      	bne.n	a732 <appTimer_callback+0xe>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    a73a:	8903      	ldrh	r3, [r0, #8]
    a73c:	221f      	movs	r2, #31
    a73e:	4393      	bics	r3, r2
    a740:	3a0f      	subs	r2, #15
    a742:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    a744:	8103      	strh	r3, [r0, #8]
    a746:	8c03      	ldrh	r3, [r0, #32]
    a748:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    a74a:	2b00      	cmp	r3, #0
    a74c:	d1fb      	bne.n	a746 <appTimer_callback+0x22>
    a74e:	8c03      	ldrh	r3, [r0, #32]
    a750:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    a752:	2b00      	cmp	r3, #0
    a754:	d1fb      	bne.n	a74e <appTimer_callback+0x2a>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    a756:	7e03      	ldrb	r3, [r0, #24]
    a758:	2202      	movs	r2, #2
    a75a:	4313      	orrs	r3, r2
    a75c:	7603      	strb	r3, [r0, #24]
    a75e:	8c03      	ldrh	r3, [r0, #32]
    a760:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    a762:	2b00      	cmp	r3, #0
    a764:	d1fb      	bne.n	a75e <appTimer_callback+0x3a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    a766:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    a768:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    a76a:	2402      	movs	r4, #2
    a76c:	e001      	b.n	a772 <appTimer_callback+0x4e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    a76e:	4211      	tst	r1, r2
    a770:	d10a      	bne.n	a788 <appTimer_callback+0x64>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    a772:	7983      	ldrb	r3, [r0, #6]
    a774:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    a776:	000a      	movs	r2, r1
    a778:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    a77a:	421d      	tst	r5, r3
    a77c:	d000      	beq.n	a780 <appTimer_callback+0x5c>
		status_flags |= ADC_STATUS_WINDOW;
    a77e:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    a780:	421c      	tst	r4, r3
    a782:	d0f4      	beq.n	a76e <appTimer_callback+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    a784:	432a      	orrs	r2, r5
    a786:	e7f2      	b.n	a76e <appTimer_callback+0x4a>
	*result = adc_module->RESULT.reg;
    a788:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    a78a:	b2ad      	uxth	r5, r5
	adc_module->INTFLAG.reg = int_flags;
    a78c:	2301      	movs	r3, #1
    a78e:	7183      	strb	r3, [r0, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    a790:	7982      	ldrb	r2, [r0, #6]
    a792:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    a794:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    a796:	0751      	lsls	r1, r2, #29
    a798:	d501      	bpl.n	a79e <appTimer_callback+0x7a>
		status_flags |= ADC_STATUS_WINDOW;
    a79a:	2102      	movs	r1, #2
    a79c:	430b      	orrs	r3, r1
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    a79e:	0792      	lsls	r2, r2, #30
    a7a0:	d501      	bpl.n	a7a6 <appTimer_callback+0x82>
		status_flags |= ADC_STATUS_OVERRUN;
    a7a2:	2204      	movs	r2, #4
    a7a4:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    a7a6:	075b      	lsls	r3, r3, #29
    a7a8:	d501      	bpl.n	a7ae <appTimer_callback+0x8a>
	adc_module->INTFLAG.reg = int_flags;
    a7aa:	2302      	movs	r3, #2
    a7ac:	7183      	strb	r3, [r0, #6]
	// Read IO1 Xpro Light sensor value
	uint16_t light_val = read_io1_light_sensor() ;
	printf("\nIO1 Xpro Light sensor value: %d", light_val) ;
    a7ae:	0029      	movs	r1, r5
    a7b0:	483c      	ldr	r0, [pc, #240]	; (a8a4 <appTimer_callback+0x180>)
    a7b2:	4f3d      	ldr	r7, [pc, #244]	; (a8a8 <appTimer_callback+0x184>)
    a7b4:	47b8      	blx	r7

	// Read IO1 Xpro Temperature sensor value
	float c_val = at30tse_read_temperature() ;
    a7b6:	4b3d      	ldr	r3, [pc, #244]	; (a8ac <appTimer_callback+0x188>)
    a7b8:	4798      	blx	r3
    a7ba:	4b3d      	ldr	r3, [pc, #244]	; (a8b0 <appTimer_callback+0x18c>)
    a7bc:	4798      	blx	r3
    a7be:	1c04      	adds	r4, r0, #0
	float f_val = convert_celsius_to_fahrenheit(c_val) ;
	printf("\nIO1 Xpro Temperature: ") ;
    a7c0:	483c      	ldr	r0, [pc, #240]	; (a8b4 <appTimer_callback+0x190>)
    a7c2:	47b8      	blx	r7
	printf("%.1f\xf8 C/%.1f\xf8 F\n\r", c_val, f_val) ;
    a7c4:	4e3c      	ldr	r6, [pc, #240]	; (a8b8 <appTimer_callback+0x194>)
    a7c6:	1c20      	adds	r0, r4, #0
    a7c8:	47b0      	blx	r6
    a7ca:	9002      	str	r0, [sp, #8]
    a7cc:	9103      	str	r1, [sp, #12]
    fahren_val = (((celsius_val * 9)/5) + 32) ;
    a7ce:	493b      	ldr	r1, [pc, #236]	; (a8bc <appTimer_callback+0x198>)
    a7d0:	1c20      	adds	r0, r4, #0
    a7d2:	4b3b      	ldr	r3, [pc, #236]	; (a8c0 <appTimer_callback+0x19c>)
    a7d4:	4798      	blx	r3
    a7d6:	493b      	ldr	r1, [pc, #236]	; (a8c4 <appTimer_callback+0x1a0>)
    a7d8:	4b3b      	ldr	r3, [pc, #236]	; (a8c8 <appTimer_callback+0x1a4>)
    a7da:	4798      	blx	r3
    a7dc:	2184      	movs	r1, #132	; 0x84
    a7de:	05c9      	lsls	r1, r1, #23
    a7e0:	4b3a      	ldr	r3, [pc, #232]	; (a8cc <appTimer_callback+0x1a8>)
    a7e2:	4798      	blx	r3
	printf("%.1f\xf8 C/%.1f\xf8 F\n\r", c_val, f_val) ;
    a7e4:	47b0      	blx	r6
    a7e6:	9000      	str	r0, [sp, #0]
    a7e8:	9101      	str	r1, [sp, #4]
    a7ea:	9a02      	ldr	r2, [sp, #8]
    a7ec:	9b03      	ldr	r3, [sp, #12]
    a7ee:	4838      	ldr	r0, [pc, #224]	; (a8d0 <appTimer_callback+0x1ac>)
    a7f0:	47b8      	blx	r7
	
	// Prepare the payload to be sent
	// IO1 Light sensor
	app_buf[0] = light_val ;
    a7f2:	4c38      	ldr	r4, [pc, #224]	; (a8d4 <appTimer_callback+0x1b0>)
    a7f4:	7025      	strb	r5, [r4, #0]
	// IO1 Temperature sensor
	char TxTempBuffer[4] ;
	sprintf(TxTempBuffer, "%.1f", c_val) ;
    a7f6:	ad05      	add	r5, sp, #20
    a7f8:	9a02      	ldr	r2, [sp, #8]
    a7fa:	9b03      	ldr	r3, [sp, #12]
    a7fc:	4936      	ldr	r1, [pc, #216]	; (a8d8 <appTimer_callback+0x1b4>)
    a7fe:	0028      	movs	r0, r5
    a800:	4e36      	ldr	r6, [pc, #216]	; (a8dc <appTimer_callback+0x1b8>)
    a802:	47b0      	blx	r6
	uint8_t j = 1 ;
	for (uint8_t i = 0; i <= 3; i++)
	{
		app_buf[j++] = TxTempBuffer[i] ;
    a804:	782b      	ldrb	r3, [r5, #0]
    a806:	7063      	strb	r3, [r4, #1]
    a808:	786b      	ldrb	r3, [r5, #1]
    a80a:	70a3      	strb	r3, [r4, #2]
    a80c:	78ab      	ldrb	r3, [r5, #2]
    a80e:	70e3      	strb	r3, [r4, #3]
    a810:	78eb      	ldrb	r3, [r5, #3]
    a812:	7123      	strb	r3, [r4, #4]
	}
	
	printf("\nLen: %d", sizeof(app_buf)) ;
    a814:	2105      	movs	r1, #5
    a816:	4832      	ldr	r0, [pc, #200]	; (a8e0 <appTimer_callback+0x1bc>)
    a818:	47b8      	blx	r7
	printf("\nPayload: ") ;
    a81a:	4832      	ldr	r0, [pc, #200]	; (a8e4 <appTimer_callback+0x1c0>)
    a81c:	47b8      	blx	r7
	print_array(app_buf, sizeof(app_buf)) ;
    a81e:	2105      	movs	r1, #5
    a820:	0020      	movs	r0, r4
    a822:	4b31      	ldr	r3, [pc, #196]	; (a8e8 <appTimer_callback+0x1c4>)
    a824:	4798      	blx	r3

	if (false == joined)
    a826:	4b31      	ldr	r3, [pc, #196]	; (a8ec <appTimer_callback+0x1c8>)
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d113      	bne.n	a856 <appTimer_callback+0x132>
	{
		// Not join - Send Join request
		status = LORAWAN_Join(LORAWAN_OTAA) ;
    a82e:	2000      	movs	r0, #0
    a830:	4b2f      	ldr	r3, [pc, #188]	; (a8f0 <appTimer_callback+0x1cc>)
    a832:	4798      	blx	r3
		if (LORAWAN_SUCCESS == status)
    a834:	2808      	cmp	r0, #8
    a836:	d00a      	beq.n	a84e <appTimer_callback+0x12a>
	else
	{
		send_uplink(LORAWAN_UNCNF, 2, app_buf, sizeof(app_buf)) ;
	}
	
	SwTimerStart(AppTimerID, MS_TO_US(APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void*)appTimer_callback, NULL) ;
    a838:	4b2e      	ldr	r3, [pc, #184]	; (a8f4 <appTimer_callback+0x1d0>)
    a83a:	7818      	ldrb	r0, [r3, #0]
    a83c:	2300      	movs	r3, #0
    a83e:	9300      	str	r3, [sp, #0]
    a840:	4b2d      	ldr	r3, [pc, #180]	; (a8f8 <appTimer_callback+0x1d4>)
    a842:	2200      	movs	r2, #0
    a844:	492d      	ldr	r1, [pc, #180]	; (a8fc <appTimer_callback+0x1d8>)
    a846:	4c2e      	ldr	r4, [pc, #184]	; (a900 <appTimer_callback+0x1dc>)
    a848:	47a0      	blx	r4
}
    a84a:	b007      	add	sp, #28
    a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Join Request Sent to the Network Server\r\n") ;
    a84e:	482d      	ldr	r0, [pc, #180]	; (a904 <appTimer_callback+0x1e0>)
    a850:	4b12      	ldr	r3, [pc, #72]	; (a89c <appTimer_callback+0x178>)
    a852:	4798      	blx	r3
    a854:	e7f0      	b.n	a838 <appTimer_callback+0x114>
	lorawanSendReq.buffer = data ;
    a856:	482c      	ldr	r0, [pc, #176]	; (a908 <appTimer_callback+0x1e4>)
    a858:	4b1e      	ldr	r3, [pc, #120]	; (a8d4 <appTimer_callback+0x1b0>)
    a85a:	6043      	str	r3, [r0, #4]
	lorawanSendReq.bufferLength = len ;
    a85c:	2305      	movs	r3, #5
    a85e:	7203      	strb	r3, [r0, #8]
	lorawanSendReq.confirmed = type ;	// LORAWAN_UNCNF or LORAWAN_CNF
    a860:	2300      	movs	r3, #0
    a862:	7003      	strb	r3, [r0, #0]
	lorawanSendReq.port = fport ;		// fport [1-255]
    a864:	3302      	adds	r3, #2
    a866:	7043      	strb	r3, [r0, #1]
	status = LORAWAN_Send(&lorawanSendReq) ;
    a868:	4b28      	ldr	r3, [pc, #160]	; (a90c <appTimer_callback+0x1e8>)
    a86a:	4798      	blx	r3
	if (LORAWAN_SUCCESS == status)
    a86c:	2808      	cmp	r0, #8
    a86e:	d007      	beq.n	a880 <appTimer_callback+0x15c>
		set_LED_data(LED_GREEN, &off) ;
    a870:	4927      	ldr	r1, [pc, #156]	; (a910 <appTimer_callback+0x1ec>)
    a872:	2003      	movs	r0, #3
    a874:	4c27      	ldr	r4, [pc, #156]	; (a914 <appTimer_callback+0x1f0>)
    a876:	47a0      	blx	r4
		set_LED_data(LED_AMBER, &on) ;
    a878:	4927      	ldr	r1, [pc, #156]	; (a918 <appTimer_callback+0x1f4>)
    a87a:	2002      	movs	r0, #2
    a87c:	47a0      	blx	r4
    a87e:	e7db      	b.n	a838 <appTimer_callback+0x114>
		printf("\nUplink message sent\r\n") ;
    a880:	4826      	ldr	r0, [pc, #152]	; (a91c <appTimer_callback+0x1f8>)
    a882:	4b06      	ldr	r3, [pc, #24]	; (a89c <appTimer_callback+0x178>)
    a884:	4798      	blx	r3
		set_LED_data(LED_GREEN, &on) ;
    a886:	4924      	ldr	r1, [pc, #144]	; (a918 <appTimer_callback+0x1f4>)
    a888:	2003      	movs	r0, #3
    a88a:	4c22      	ldr	r4, [pc, #136]	; (a914 <appTimer_callback+0x1f0>)
    a88c:	47a0      	blx	r4
		set_LED_data(LED_AMBER, &off) ;
    a88e:	4920      	ldr	r1, [pc, #128]	; (a910 <appTimer_callback+0x1ec>)
    a890:	2002      	movs	r0, #2
    a892:	47a0      	blx	r4
    a894:	e7d0      	b.n	a838 <appTimer_callback+0x114>
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	0001aa5c 	.word	0x0001aa5c
    a89c:	00013d81 	.word	0x00013d81
    a8a0:	20001570 	.word	0x20001570
    a8a4:	0001aab4 	.word	0x0001aab4
    a8a8:	00013cbd 	.word	0x00013cbd
    a8ac:	00000395 	.word	0x00000395
    a8b0:	0001373d 	.word	0x0001373d
    a8b4:	0001aad8 	.word	0x0001aad8
    a8b8:	00013699 	.word	0x00013699
    a8bc:	41100000 	.word	0x41100000
    a8c0:	000116a5 	.word	0x000116a5
    a8c4:	40a00000 	.word	0x40a00000
    a8c8:	000112c5 	.word	0x000112c5
    a8cc:	00010fa1 	.word	0x00010fa1
    a8d0:	0001aaf0 	.word	0x0001aaf0
    a8d4:	2000000c 	.word	0x2000000c
    a8d8:	0001ab04 	.word	0x0001ab04
    a8dc:	00013f91 	.word	0x00013f91
    a8e0:	0001ab0c 	.word	0x0001ab0c
    a8e4:	0001ab80 	.word	0x0001ab80
    a8e8:	0000a6f1 	.word	0x0000a6f1
    a8ec:	20000f0b 	.word	0x20000f0b
    a8f0:	0000c011 	.word	0x0000c011
    a8f4:	20000009 	.word	0x20000009
    a8f8:	0000a725 	.word	0x0000a725
    a8fc:	03938700 	.word	0x03938700
    a900:	000098f5 	.word	0x000098f5
    a904:	0001aa70 	.word	0x0001aa70
    a908:	200017d4 	.word	0x200017d4
    a90c:	0000b3f5 	.word	0x0000b3f5
    a910:	20000f0c 	.word	0x20000f0c
    a914:	00009589 	.word	0x00009589
    a918:	20000034 	.word	0x20000034
    a91c:	0001aa9c 	.word	0x0001aa9c

0000a920 <appWakeup>:
{
    a920:	b510      	push	{r4, lr}
    a922:	0004      	movs	r4, r0
	HAL_Radio_resources_init() ;
    a924:	4b04      	ldr	r3, [pc, #16]	; (a938 <appWakeup+0x18>)
    a926:	4798      	blx	r3
	sio2host_init() ;
    a928:	4b04      	ldr	r3, [pc, #16]	; (a93c <appWakeup+0x1c>)
    a92a:	4798      	blx	r3
	printf("\r\nsleep_ok %ld ms\r\n", sleptDuration) ;
    a92c:	0021      	movs	r1, r4
    a92e:	4804      	ldr	r0, [pc, #16]	; (a940 <appWakeup+0x20>)
    a930:	4b04      	ldr	r3, [pc, #16]	; (a944 <appWakeup+0x24>)
    a932:	4798      	blx	r3
}
    a934:	bd10      	pop	{r4, pc}
    a936:	46c0      	nop			; (mov r8, r8)
    a938:	00003f61 	.word	0x00003f61
    a93c:	00003ae5 	.word	0x00003ae5
    a940:	0001ab18 	.word	0x0001ab18
    a944:	00013cbd 	.word	0x00013cbd

0000a948 <APP_TaskHandler>:
}
    a948:	2000      	movs	r0, #0
    a94a:	4770      	bx	lr

0000a94c <main>:

/*** main ***********************************************************************
 \brief      Main function
********************************************************************************/
int main(void)
{
    a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a94e:	46c6      	mov	lr, r8
    a950:	b500      	push	{lr}
    a952:	b08e      	sub	sp, #56	; 0x38
	system_init() ;
    a954:	4b69      	ldr	r3, [pc, #420]	; (aafc <main+0x1b0>)
    a956:	4798      	blx	r3
	delay_init() ;
    a958:	4b69      	ldr	r3, [pc, #420]	; (ab00 <main+0x1b4>)
    a95a:	4798      	blx	r3
	board_init() ;
    a95c:	4b69      	ldr	r3, [pc, #420]	; (ab04 <main+0x1b8>)
    a95e:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable() ;
    a960:	2401      	movs	r4, #1
    a962:	4b69      	ldr	r3, [pc, #420]	; (ab08 <main+0x1bc>)
    a964:	701c      	strb	r4, [r3, #0]
    a966:	f3bf 8f5f 	dmb	sy
    a96a:	b662      	cpsie	i
	sio2host_init() ;
    a96c:	4b67      	ldr	r3, [pc, #412]	; (ab0c <main+0x1c0>)
    a96e:	4798      	blx	r3
	HAL_RadioInit() ;
    a970:	4b67      	ldr	r3, [pc, #412]	; (ab10 <main+0x1c4>)
    a972:	4798      	blx	r3
	AESInit() ;
    a974:	4b67      	ldr	r3, [pc, #412]	; (ab14 <main+0x1c8>)
    a976:	4798      	blx	r3
	SystemTimerInit() ;
    a978:	4b67      	ldr	r3, [pc, #412]	; (ab18 <main+0x1cc>)
    a97a:	4798      	blx	r3
	SleepTimerInit() ;
    a97c:	4b67      	ldr	r3, [pc, #412]	; (ab1c <main+0x1d0>)
    a97e:	4798      	blx	r3
	PDS_Init() ;
    a980:	4b67      	ldr	r3, [pc, #412]	; (ab20 <main+0x1d4>)
    a982:	4798      	blx	r3
	Stack_Init() ;
    a984:	4b67      	ldr	r3, [pc, #412]	; (ab24 <main+0x1d8>)
    a986:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a988:	a901      	add	r1, sp, #4
    a98a:	2500      	movs	r5, #0
    a98c:	704d      	strb	r5, [r1, #1]
	config->powersave    = false;
    a98e:	70cd      	strb	r5, [r1, #3]
	config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    a990:	708d      	strb	r5, [r1, #2]
	config.mux_position = 1;
    a992:	700c      	strb	r4, [r1, #0]
	system_pinmux_pin_set_config(IO1_LIGHT_SENSOR_PIN, &config) ;
    a994:	2008      	movs	r0, #8
    a996:	4b64      	ldr	r3, [pc, #400]	; (ab28 <main+0x1dc>)
    a998:	4798      	blx	r3
	adc_get_config_defaults(&config_adc) ;
    a99a:	ac02      	add	r4, sp, #8
    a99c:	0020      	movs	r0, r4
    a99e:	4b63      	ldr	r3, [pc, #396]	; (ab2c <main+0x1e0>)
    a9a0:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_2 ;	
    a9a2:	2302      	movs	r3, #2
    a9a4:	7023      	strb	r3, [r4, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2 ;
    a9a6:	70a5      	strb	r5, [r4, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC2 ;
    a9a8:	3303      	adds	r3, #3
    a9aa:	7063      	strb	r3, [r4, #1]
	config_adc.negative_input  = ADC_NEGATIVE_INPUT_GND ;
    a9ac:	23c0      	movs	r3, #192	; 0xc0
    a9ae:	015b      	lsls	r3, r3, #5
    a9b0:	80e3      	strh	r3, [r4, #6]
	config_adc.resolution	   = ADC_RESOLUTION_8BIT ;
    a9b2:	2330      	movs	r3, #48	; 0x30
    a9b4:	70e3      	strb	r3, [r4, #3]
	config_adc.divide_result   = ADC_DIVIDE_RESULT_16 ;
    a9b6:	3b2c      	subs	r3, #44	; 0x2c
    a9b8:	7263      	strb	r3, [r4, #9]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16 ;
    a9ba:	7223      	strb	r3, [r4, #8]
	config_adc.freerunning = false ;
    a9bc:	7325      	strb	r5, [r4, #12]
	adc_init(&adc_instance, ADC, &config_adc) ;
    a9be:	4d5c      	ldr	r5, [pc, #368]	; (ab30 <main+0x1e4>)
    a9c0:	0022      	movs	r2, r4
    a9c2:	495c      	ldr	r1, [pc, #368]	; (ab34 <main+0x1e8>)
    a9c4:	0028      	movs	r0, r5
    a9c6:	4b5c      	ldr	r3, [pc, #368]	; (ab38 <main+0x1ec>)
    a9c8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    a9ca:	682b      	ldr	r3, [r5, #0]
    a9cc:	8c1a      	ldrh	r2, [r3, #32]
    a9ce:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    a9d0:	2a00      	cmp	r2, #0
    a9d2:	d1fb      	bne.n	a9cc <main+0x80>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a9d4:	2180      	movs	r1, #128	; 0x80
    a9d6:	03c9      	lsls	r1, r1, #15
    a9d8:	4a58      	ldr	r2, [pc, #352]	; (ab3c <main+0x1f0>)
    a9da:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    a9dc:	2207      	movs	r2, #7
    a9de:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    a9e0:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    a9e2:	781a      	ldrb	r2, [r3, #0]
    a9e4:	2102      	movs	r1, #2
    a9e6:	430a      	orrs	r2, r1
    a9e8:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    a9ea:	4b51      	ldr	r3, [pc, #324]	; (ab30 <main+0x1e4>)
    a9ec:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    a9ee:	8c13      	ldrh	r3, [r2, #32]
    a9f0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d1fb      	bne.n	a9ee <main+0xa2>
	// --------------------------------------------------------------------------
	app_init() ;
	// IO1 Xpro Light sensor
	configure_adc() ;
	// IO1 Xpro Temperature sensor
	at30tse_init() ;
    a9f6:	4b52      	ldr	r3, [pc, #328]	; (ab40 <main+0x1f4>)
    a9f8:	4798      	blx	r3
	set_LED_data(LED_GREEN, &off) ;
    a9fa:	4d52      	ldr	r5, [pc, #328]	; (ab44 <main+0x1f8>)
    a9fc:	0029      	movs	r1, r5
    a9fe:	2003      	movs	r0, #3
    aa00:	4c51      	ldr	r4, [pc, #324]	; (ab48 <main+0x1fc>)
    aa02:	47a0      	blx	r4
	set_LED_data(LED_AMBER, &off) ;
    aa04:	0029      	movs	r1, r5
    aa06:	2002      	movs	r0, #2
    aa08:	47a0      	blx	r4
	printf("\r\n-- ATSAMR34 LoRaWAN Application --\r\n") ;
    aa0a:	4850      	ldr	r0, [pc, #320]	; (ab4c <main+0x200>)
    aa0c:	4b50      	ldr	r3, [pc, #320]	; (ab50 <main+0x204>)
    aa0e:	4798      	blx	r3
	// --------------------------------------------------------------------------
	// OTA Activation keys section
	// --------------------------------------------------------------------------
	// Device EUI is the unique identifier for this device on the network
	dev_eui_read() ;
	printf("\nDevEUI : ") ;
    aa10:	4850      	ldr	r0, [pc, #320]	; (ab54 <main+0x208>)
    aa12:	4d51      	ldr	r5, [pc, #324]	; (ab58 <main+0x20c>)
    aa14:	47a8      	blx	r5
	print_array(demoDevEui, sizeof(demoDevEui)) ;
    aa16:	4f51      	ldr	r7, [pc, #324]	; (ab5c <main+0x210>)
    aa18:	2108      	movs	r1, #8
    aa1a:	0038      	movs	r0, r7
    aa1c:	4c50      	ldr	r4, [pc, #320]	; (ab60 <main+0x214>)
    aa1e:	47a0      	blx	r4
	// App EUI identifies the application server
	//  AppEUI is defined in the global variable demoAppEUI
	printf("\nAppEUI : ") ;
    aa20:	4850      	ldr	r0, [pc, #320]	; (ab64 <main+0x218>)
    aa22:	47a8      	blx	r5
	print_array(demoAppEui, sizeof(demoAppEui)) ;
    aa24:	4e50      	ldr	r6, [pc, #320]	; (ab68 <main+0x21c>)
    aa26:	2108      	movs	r1, #8
    aa28:	0030      	movs	r0, r6
    aa2a:	47a0      	blx	r4
	// AppKey is defined in the global variable demoAppKey
	printf("\nAppKey : ") ;
    aa2c:	484f      	ldr	r0, [pc, #316]	; (ab6c <main+0x220>)
    aa2e:	47a8      	blx	r5
	print_array(demoAppKey, sizeof(demoAppKey)) ;	
    aa30:	4d4f      	ldr	r5, [pc, #316]	; (ab70 <main+0x224>)
    aa32:	2110      	movs	r1, #16
    aa34:	0028      	movs	r0, r5
    aa36:	47a0      	blx	r4

	LORAWAN_Init(appdata_callback, joindata_callback) ;	
    aa38:	494e      	ldr	r1, [pc, #312]	; (ab74 <main+0x228>)
    aa3a:	484f      	ldr	r0, [pc, #316]	; (ab78 <main+0x22c>)
    aa3c:	4b4f      	ldr	r3, [pc, #316]	; (ab7c <main+0x230>)
    aa3e:	4798      	blx	r3
	LORAWAN_Reset(ISM_EU868) ;
    aa40:	2000      	movs	r0, #0
    aa42:	4b4f      	ldr	r3, [pc, #316]	; (ab80 <main+0x234>)
    aa44:	4798      	blx	r3
	EdClass_t classType = CLASS_A ;
    aa46:	2137      	movs	r1, #55	; 0x37
    aa48:	4469      	add	r1, sp
    aa4a:	2301      	movs	r3, #1
    aa4c:	700b      	strb	r3, [r1, #0]
	LORAWAN_SetAttr(EDCLASS, &classType) ;
    aa4e:	2019      	movs	r0, #25
    aa50:	4c4c      	ldr	r4, [pc, #304]	; (ab84 <main+0x238>)
    aa52:	47a0      	blx	r4
	uint8_t datarate = DR5 ;
    aa54:	2136      	movs	r1, #54	; 0x36
    aa56:	4469      	add	r1, sp
    aa58:	2305      	movs	r3, #5
    aa5a:	700b      	strb	r3, [r1, #0]
	LORAWAN_SetAttr(CURRENT_DATARATE, &datarate) ;
    aa5c:	2007      	movs	r0, #7
    aa5e:	47a0      	blx	r4
	LORAWAN_SetAttr(DEV_EUI, demoDevEui) ;
    aa60:	0039      	movs	r1, r7
    aa62:	2000      	movs	r0, #0
    aa64:	47a0      	blx	r4
	LORAWAN_SetAttr(APP_EUI, demoAppEui) ;
    aa66:	0031      	movs	r1, r6
    aa68:	2001      	movs	r0, #1
    aa6a:	47a0      	blx	r4
	LORAWAN_SetAttr(APP_KEY, demoAppKey) ;
    aa6c:	0029      	movs	r1, r5
    aa6e:	2003      	movs	r0, #3
    aa70:	47a0      	blx	r4
	bool adr = false ;
    aa72:	2135      	movs	r1, #53	; 0x35
    aa74:	4469      	add	r1, sp
    aa76:	2300      	movs	r3, #0
    aa78:	700b      	strb	r3, [r1, #0]
	LORAWAN_SetAttr(ADR, &adr) ;
    aa7a:	2006      	movs	r0, #6
    aa7c:	47a0      	blx	r4

	// Create the SW timer (swtimerCreate function itself will assign the different Id for each timer)
	SwTimerCreate(&AppTimerID) ;
    aa7e:	4842      	ldr	r0, [pc, #264]	; (ab88 <main+0x23c>)
    aa80:	4b42      	ldr	r3, [pc, #264]	; (ab8c <main+0x240>)
    aa82:	4798      	blx	r3
	
	status = LORAWAN_Join(LORAWAN_OTAA) ;
    aa84:	2000      	movs	r0, #0
    aa86:	4b42      	ldr	r3, [pc, #264]	; (ab90 <main+0x244>)
    aa88:	4798      	blx	r3
	if (LORAWAN_SUCCESS == status)
    aa8a:	2808      	cmp	r0, #8
    aa8c:	d02d      	beq.n	aaea <main+0x19e>
	}

	while(1)
	{	
		// Run the scheduler tasks
		SYSTEM_RunTasks() ;
    aa8e:	4e41      	ldr	r6, [pc, #260]	; (ab94 <main+0x248>)
#ifdef CONF_PMM_ENABLE
		PMM_SleepReq_t sleepReq ;
		// Put the application to sleep
		sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS ;
		sleepReq.pmmWakeupCallback = appWakeup ;
    aa90:	4d41      	ldr	r5, [pc, #260]	; (ab98 <main+0x24c>)
		sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE ;
		if (CONF_PMM_SLEEPMODE_WHEN_IDLE == SLEEP_MODE_STANDBY)
		{
			deviceResetsForWakeup = false;
    aa92:	4c42      	ldr	r4, [pc, #264]	; (ab9c <main+0x250>)
		SYSTEM_RunTasks() ;
    aa94:	47b0      	blx	r6
		sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS ;
    aa96:	ab02      	add	r3, sp, #8
    aa98:	22fa      	movs	r2, #250	; 0xfa
    aa9a:	0092      	lsls	r2, r2, #2
    aa9c:	9202      	str	r2, [sp, #8]
		sleepReq.pmmWakeupCallback = appWakeup ;
    aa9e:	9504      	str	r5, [sp, #16]
		sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE ;
    aaa0:	2201      	movs	r2, #1
    aaa2:	711a      	strb	r2, [r3, #4]
			deviceResetsForWakeup = false;
    aaa4:	2300      	movs	r3, #0
    aaa6:	7023      	strb	r3, [r4, #0]
		}
		if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    aaa8:	2000      	movs	r0, #0
    aaaa:	4b3d      	ldr	r3, [pc, #244]	; (aba0 <main+0x254>)
    aaac:	4798      	blx	r3
    aaae:	2800      	cmp	r0, #0
    aab0:	d0f0      	beq.n	aa94 <main+0x148>
	config->direction  = PORT_PIN_DIR_INPUT;
    aab2:	af01      	add	r7, sp, #4
    aab4:	2300      	movs	r3, #0
    aab6:	703b      	strb	r3, [r7, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    aab8:	3301      	adds	r3, #1
    aaba:	707b      	strb	r3, [r7, #1]
	pin_conf.powersave  = true ;
    aabc:	70bb      	strb	r3, [r7, #2]
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf) ;
    aabe:	0039      	movs	r1, r7
    aac0:	2004      	movs	r0, #4
    aac2:	4b38      	ldr	r3, [pc, #224]	; (aba4 <main+0x258>)
    aac4:	4698      	mov	r8, r3
    aac6:	4798      	blx	r3
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf) ;
    aac8:	0039      	movs	r1, r7
    aaca:	2005      	movs	r0, #5
    aacc:	47c0      	blx	r8
	sio2host_deinit() ;
    aace:	4b36      	ldr	r3, [pc, #216]	; (aba8 <main+0x25c>)
    aad0:	4798      	blx	r3
	HAL_RadioDeInit() ;
    aad2:	4b36      	ldr	r3, [pc, #216]	; (abac <main+0x260>)
    aad4:	4798      	blx	r3
		{
			app_resources_uninit() ;
			if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    aad6:	a802      	add	r0, sp, #8
    aad8:	4b35      	ldr	r3, [pc, #212]	; (abb0 <main+0x264>)
    aada:	4798      	blx	r3
    aadc:	2800      	cmp	r0, #0
    aade:	d1d9      	bne.n	aa94 <main+0x148>
			{
				HAL_Radio_resources_init();
    aae0:	4b34      	ldr	r3, [pc, #208]	; (abb4 <main+0x268>)
    aae2:	4798      	blx	r3
				sio2host_init();
    aae4:	4b09      	ldr	r3, [pc, #36]	; (ab0c <main+0x1c0>)
    aae6:	4798      	blx	r3
	{	
    aae8:	e7d4      	b.n	aa94 <main+0x148>
		set_LED_data(LED_GREEN, &on) ;
    aaea:	4933      	ldr	r1, [pc, #204]	; (abb8 <main+0x26c>)
    aaec:	3805      	subs	r0, #5
    aaee:	4b16      	ldr	r3, [pc, #88]	; (ab48 <main+0x1fc>)
    aaf0:	4798      	blx	r3
		printf("\nJoin Request sent to the network server\r\n") ;
    aaf2:	4832      	ldr	r0, [pc, #200]	; (abbc <main+0x270>)
    aaf4:	4b16      	ldr	r3, [pc, #88]	; (ab50 <main+0x204>)
    aaf6:	4798      	blx	r3
    aaf8:	e7c9      	b.n	aa8e <main+0x142>
    aafa:	46c0      	nop			; (mov r8, r8)
    aafc:	000033cd 	.word	0x000033cd
    ab00:	00000115 	.word	0x00000115
    ab04:	0000021d 	.word	0x0000021d
    ab08:	20000008 	.word	0x20000008
    ab0c:	00003ae5 	.word	0x00003ae5
    ab10:	00003da9 	.word	0x00003da9
    ab14:	00008e0d 	.word	0x00008e0d
    ab18:	00009859 	.word	0x00009859
    ab1c:	0000417d 	.word	0x0000417d
    ab20:	00008e45 	.word	0x00008e45
    ab24:	00009e9d 	.word	0x00009e9d
    ab28:	00003399 	.word	0x00003399
    ab2c:	0000043d 	.word	0x0000043d
    ab30:	20001570 	.word	0x20001570
    ab34:	43000c00 	.word	0x43000c00
    ab38:	00000481 	.word	0x00000481
    ab3c:	e000e100 	.word	0xe000e100
    ab40:	00000289 	.word	0x00000289
    ab44:	20000f0c 	.word	0x20000f0c
    ab48:	00009589 	.word	0x00009589
    ab4c:	0001acd0 	.word	0x0001acd0
    ab50:	00013d81 	.word	0x00013d81
    ab54:	0001acf8 	.word	0x0001acf8
    ab58:	00013cbd 	.word	0x00013cbd
    ab5c:	2000002c 	.word	0x2000002c
    ab60:	0000a6f1 	.word	0x0000a6f1
    ab64:	0001ad04 	.word	0x0001ad04
    ab68:	20000014 	.word	0x20000014
    ab6c:	0001ad10 	.word	0x0001ad10
    ab70:	2000001c 	.word	0x2000001c
    ab74:	0000a531 	.word	0x0000a531
    ab78:	0000a5ed 	.word	0x0000a5ed
    ab7c:	0000b27d 	.word	0x0000b27d
    ab80:	0000e4a9 	.word	0x0000e4a9
    ab84:	0000e00d 	.word	0x0000e00d
    ab88:	20000009 	.word	0x20000009
    ab8c:	000098c1 	.word	0x000098c1
    ab90:	0000c011 	.word	0x0000c011
    ab94:	00009ead 	.word	0x00009ead
    ab98:	0000a921 	.word	0x0000a921
    ab9c:	20000f0a 	.word	0x20000f0a
    aba0:	0000e711 	.word	0x0000e711
    aba4:	0000102d 	.word	0x0000102d
    aba8:	00003c31 	.word	0x00003c31
    abac:	00003f85 	.word	0x00003f85
    abb0:	000042e1 	.word	0x000042e1
    abb4:	00003f61 	.word	0x00003f61
    abb8:	20000034 	.word	0x20000034
    abbc:	0001aca4 	.word	0x0001aca4

0000abc0 <common_tc_read_count>:
    abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abc2:	4b0d      	ldr	r3, [pc, #52]	; (abf8 <common_tc_read_count+0x38>)
    abc4:	4798      	blx	r3
    abc6:	4b0d      	ldr	r3, [pc, #52]	; (abfc <common_tc_read_count+0x3c>)
    abc8:	781b      	ldrb	r3, [r3, #0]
    abca:	2b00      	cmp	r3, #0
    abcc:	d00e      	beq.n	abec <common_tc_read_count+0x2c>
    abce:	4b0c      	ldr	r3, [pc, #48]	; (ac00 <common_tc_read_count+0x40>)
    abd0:	781d      	ldrb	r5, [r3, #0]
    abd2:	4b0a      	ldr	r3, [pc, #40]	; (abfc <common_tc_read_count+0x3c>)
    abd4:	781f      	ldrb	r7, [r3, #0]
    abd6:	4c0b      	ldr	r4, [pc, #44]	; (ac04 <common_tc_read_count+0x44>)
    abd8:	1c29      	adds	r1, r5, #0
    abda:	47a0      	blx	r4
    abdc:	1c06      	adds	r6, r0, #0
    abde:	480a      	ldr	r0, [pc, #40]	; (ac08 <common_tc_read_count+0x48>)
    abe0:	1c29      	adds	r1, r5, #0
    abe2:	47a0      	blx	r4
    abe4:	4378      	muls	r0, r7
    abe6:	1830      	adds	r0, r6, r0
    abe8:	b280      	uxth	r0, r0
    abea:	e004      	b.n	abf6 <common_tc_read_count+0x36>
    abec:	4b04      	ldr	r3, [pc, #16]	; (ac00 <common_tc_read_count+0x40>)
    abee:	7819      	ldrb	r1, [r3, #0]
    abf0:	4b04      	ldr	r3, [pc, #16]	; (ac04 <common_tc_read_count+0x44>)
    abf2:	4798      	blx	r3
    abf4:	b280      	uxth	r0, r0
    abf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abf8:	0000a185 	.word	0x0000a185
    abfc:	20000f10 	.word	0x20000f10
    ac00:	200017e0 	.word	0x200017e0
    ac04:	00010ad1 	.word	0x00010ad1
    ac08:	0000ffff 	.word	0x0000ffff

0000ac0c <common_tc_compare_stop>:
    ac0c:	b508      	push	{r3, lr}
    ac0e:	4b05      	ldr	r3, [pc, #20]	; (ac24 <common_tc_compare_stop+0x18>)
    ac10:	4798      	blx	r3
    ac12:	4b05      	ldr	r3, [pc, #20]	; (ac28 <common_tc_compare_stop+0x1c>)
    ac14:	4798      	blx	r3
    ac16:	4b05      	ldr	r3, [pc, #20]	; (ac2c <common_tc_compare_stop+0x20>)
    ac18:	2200      	movs	r2, #0
    ac1a:	605a      	str	r2, [r3, #4]
    ac1c:	811a      	strh	r2, [r3, #8]
    ac1e:	4b04      	ldr	r3, [pc, #16]	; (ac30 <common_tc_compare_stop+0x24>)
    ac20:	4798      	blx	r3
    ac22:	bd08      	pop	{r3, pc}
    ac24:	0000a199 	.word	0x0000a199
    ac28:	0000a235 	.word	0x0000a235
    ac2c:	20000f10 	.word	0x20000f10
    ac30:	0000a259 	.word	0x0000a259

0000ac34 <common_tc_overflow_stop>:
    ac34:	b508      	push	{r3, lr}
    ac36:	4b03      	ldr	r3, [pc, #12]	; (ac44 <common_tc_overflow_stop+0x10>)
    ac38:	4798      	blx	r3
    ac3a:	2200      	movs	r2, #0
    ac3c:	4b02      	ldr	r3, [pc, #8]	; (ac48 <common_tc_overflow_stop+0x14>)
    ac3e:	701a      	strb	r2, [r3, #0]
    ac40:	bd08      	pop	{r3, pc}
    ac42:	46c0      	nop			; (mov r8, r8)
    ac44:	0000a1e9 	.word	0x0000a1e9
    ac48:	20000f10 	.word	0x20000f10

0000ac4c <common_tc_stop>:
    ac4c:	b508      	push	{r3, lr}
    ac4e:	4b03      	ldr	r3, [pc, #12]	; (ac5c <common_tc_stop+0x10>)
    ac50:	4798      	blx	r3
    ac52:	4b03      	ldr	r3, [pc, #12]	; (ac60 <common_tc_stop+0x14>)
    ac54:	4798      	blx	r3
    ac56:	4b03      	ldr	r3, [pc, #12]	; (ac64 <common_tc_stop+0x18>)
    ac58:	4798      	blx	r3
    ac5a:	bd08      	pop	{r3, pc}
    ac5c:	0000ac0d 	.word	0x0000ac0d
    ac60:	0000ac35 	.word	0x0000ac35
    ac64:	0000a1fd 	.word	0x0000a1fd

0000ac68 <common_tc_delay>:
    ac68:	b510      	push	{r4, lr}
    ac6a:	1c04      	adds	r4, r0, #0
    ac6c:	4b13      	ldr	r3, [pc, #76]	; (acbc <common_tc_delay+0x54>)
    ac6e:	4798      	blx	r3
    ac70:	4b13      	ldr	r3, [pc, #76]	; (acc0 <common_tc_delay+0x58>)
    ac72:	781a      	ldrb	r2, [r3, #0]
    ac74:	4362      	muls	r2, r4
    ac76:	1881      	adds	r1, r0, r2
    ac78:	4b12      	ldr	r3, [pc, #72]	; (acc4 <common_tc_delay+0x5c>)
    ac7a:	6059      	str	r1, [r3, #4]
    ac7c:	6859      	ldr	r1, [r3, #4]
    ac7e:	0c09      	lsrs	r1, r1, #16
    ac80:	6059      	str	r1, [r3, #4]
    ac82:	685b      	ldr	r3, [r3, #4]
    ac84:	2b00      	cmp	r3, #0
    ac86:	d007      	beq.n	ac98 <common_tc_delay+0x30>
    ac88:	4b0e      	ldr	r3, [pc, #56]	; (acc4 <common_tc_delay+0x5c>)
    ac8a:	6859      	ldr	r1, [r3, #4]
    ac8c:	3201      	adds	r2, #1
    ac8e:	1880      	adds	r0, r0, r2
    ac90:	8118      	strh	r0, [r3, #8]
    ac92:	4b0d      	ldr	r3, [pc, #52]	; (acc8 <common_tc_delay+0x60>)
    ac94:	4798      	blx	r3
    ac96:	e004      	b.n	aca2 <common_tc_delay+0x3a>
    ac98:	1882      	adds	r2, r0, r2
    ac9a:	4b0a      	ldr	r3, [pc, #40]	; (acc4 <common_tc_delay+0x5c>)
    ac9c:	811a      	strh	r2, [r3, #8]
    ac9e:	4b0b      	ldr	r3, [pc, #44]	; (accc <common_tc_delay+0x64>)
    aca0:	4798      	blx	r3
    aca2:	4b08      	ldr	r3, [pc, #32]	; (acc4 <common_tc_delay+0x5c>)
    aca4:	891b      	ldrh	r3, [r3, #8]
    aca6:	2b63      	cmp	r3, #99	; 0x63
    aca8:	d802      	bhi.n	acb0 <common_tc_delay+0x48>
    acaa:	3364      	adds	r3, #100	; 0x64
    acac:	4a05      	ldr	r2, [pc, #20]	; (acc4 <common_tc_delay+0x5c>)
    acae:	8113      	strh	r3, [r2, #8]
    acb0:	4b04      	ldr	r3, [pc, #16]	; (acc4 <common_tc_delay+0x5c>)
    acb2:	8918      	ldrh	r0, [r3, #8]
    acb4:	4b06      	ldr	r3, [pc, #24]	; (acd0 <common_tc_delay+0x68>)
    acb6:	4798      	blx	r3
    acb8:	bd10      	pop	{r4, pc}
    acba:	46c0      	nop			; (mov r8, r8)
    acbc:	0000a185 	.word	0x0000a185
    acc0:	200017e0 	.word	0x200017e0
    acc4:	20000f10 	.word	0x20000f10
    acc8:	0000a199 	.word	0x0000a199
    accc:	0000a1ad 	.word	0x0000a1ad
    acd0:	0000a21d 	.word	0x0000a21d

0000acd4 <common_tc_init>:
    acd4:	b508      	push	{r3, lr}
    acd6:	2200      	movs	r2, #0
    acd8:	4b03      	ldr	r3, [pc, #12]	; (ace8 <common_tc_init+0x14>)
    acda:	701a      	strb	r2, [r3, #0]
    acdc:	4b03      	ldr	r3, [pc, #12]	; (acec <common_tc_init+0x18>)
    acde:	4798      	blx	r3
    ace0:	4b03      	ldr	r3, [pc, #12]	; (acf0 <common_tc_init+0x1c>)
    ace2:	7018      	strb	r0, [r3, #0]
    ace4:	bd08      	pop	{r3, pc}
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	20000f10 	.word	0x20000f10
    acec:	0000a271 	.word	0x0000a271
    acf0:	200017e0 	.word	0x200017e0

0000acf4 <tmr_ovf_callback>:
    acf4:	b508      	push	{r3, lr}
    acf6:	4b0e      	ldr	r3, [pc, #56]	; (ad30 <tmr_ovf_callback+0x3c>)
    acf8:	685b      	ldr	r3, [r3, #4]
    acfa:	2b00      	cmp	r3, #0
    acfc:	d007      	beq.n	ad0e <tmr_ovf_callback+0x1a>
    acfe:	4a0c      	ldr	r2, [pc, #48]	; (ad30 <tmr_ovf_callback+0x3c>)
    ad00:	6853      	ldr	r3, [r2, #4]
    ad02:	3b01      	subs	r3, #1
    ad04:	6053      	str	r3, [r2, #4]
    ad06:	2b00      	cmp	r3, #0
    ad08:	d101      	bne.n	ad0e <tmr_ovf_callback+0x1a>
    ad0a:	4b0a      	ldr	r3, [pc, #40]	; (ad34 <tmr_ovf_callback+0x40>)
    ad0c:	4798      	blx	r3
    ad0e:	4a08      	ldr	r2, [pc, #32]	; (ad30 <tmr_ovf_callback+0x3c>)
    ad10:	7813      	ldrb	r3, [r2, #0]
    ad12:	3301      	adds	r3, #1
    ad14:	b2db      	uxtb	r3, r3
    ad16:	7013      	strb	r3, [r2, #0]
    ad18:	4a07      	ldr	r2, [pc, #28]	; (ad38 <tmr_ovf_callback+0x44>)
    ad1a:	7812      	ldrb	r2, [r2, #0]
    ad1c:	429a      	cmp	r2, r3
    ad1e:	d806      	bhi.n	ad2e <tmr_ovf_callback+0x3a>
    ad20:	4b03      	ldr	r3, [pc, #12]	; (ad30 <tmr_ovf_callback+0x3c>)
    ad22:	2200      	movs	r2, #0
    ad24:	701a      	strb	r2, [r3, #0]
    ad26:	68db      	ldr	r3, [r3, #12]
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d000      	beq.n	ad2e <tmr_ovf_callback+0x3a>
    ad2c:	4798      	blx	r3
    ad2e:	bd08      	pop	{r3, pc}
    ad30:	20000f10 	.word	0x20000f10
    ad34:	0000a1ad 	.word	0x0000a1ad
    ad38:	200017e0 	.word	0x200017e0

0000ad3c <tmr_cca_callback>:
    ad3c:	b508      	push	{r3, lr}
    ad3e:	4b04      	ldr	r3, [pc, #16]	; (ad50 <tmr_cca_callback+0x14>)
    ad40:	4798      	blx	r3
    ad42:	4b04      	ldr	r3, [pc, #16]	; (ad54 <tmr_cca_callback+0x18>)
    ad44:	691b      	ldr	r3, [r3, #16]
    ad46:	2b00      	cmp	r3, #0
    ad48:	d000      	beq.n	ad4c <tmr_cca_callback+0x10>
    ad4a:	4798      	blx	r3
    ad4c:	bd08      	pop	{r3, pc}
    ad4e:	46c0      	nop			; (mov r8, r8)
    ad50:	0000a199 	.word	0x0000a199
    ad54:	20000f10 	.word	0x20000f10

0000ad58 <set_common_tc_overflow_callback>:
    ad58:	4b01      	ldr	r3, [pc, #4]	; (ad60 <set_common_tc_overflow_callback+0x8>)
    ad5a:	60d8      	str	r0, [r3, #12]
    ad5c:	4770      	bx	lr
    ad5e:	46c0      	nop			; (mov r8, r8)
    ad60:	20000f10 	.word	0x20000f10

0000ad64 <set_common_tc_expiry_callback>:
    ad64:	4b01      	ldr	r3, [pc, #4]	; (ad6c <set_common_tc_expiry_callback+0x8>)
    ad66:	6118      	str	r0, [r3, #16]
    ad68:	4770      	bx	lr
    ad6a:	46c0      	nop			; (mov r8, r8)
    ad6c:	20000f10 	.word	0x20000f10

0000ad70 <MacClearCommands>:
    ad70:	490e      	ldr	r1, [pc, #56]	; (adac <MacClearCommands+0x3c>)
    ad72:	b570      	push	{r4, r5, r6, lr}
    ad74:	000b      	movs	r3, r1
    ad76:	33ac      	adds	r3, #172	; 0xac
    ad78:	7818      	ldrb	r0, [r3, #0]
    ad7a:	2303      	movs	r3, #3
    ad7c:	25a4      	movs	r5, #164	; 0xa4
    ad7e:	4343      	muls	r3, r0
    ad80:	2401      	movs	r4, #1
    ad82:	20ff      	movs	r0, #255	; 0xff
    ad84:	3365      	adds	r3, #101	; 0x65
    ad86:	4a0a      	ldr	r2, [pc, #40]	; (adb0 <MacClearCommands+0x40>)
    ad88:	185b      	adds	r3, r3, r1
    ad8a:	00ed      	lsls	r5, r5, #3
    ad8c:	429a      	cmp	r2, r3
    ad8e:	d100      	bne.n	ad92 <MacClearCommands+0x22>
    ad90:	bd70      	pop	{r4, r5, r6, pc}
    ad92:	7811      	ldrb	r1, [r2, #0]
    ad94:	29ff      	cmp	r1, #255	; 0xff
    ad96:	d006      	beq.n	ada6 <MacClearCommands+0x36>
    ad98:	290a      	cmp	r1, #10
    ad9a:	d803      	bhi.n	ada4 <MacClearCommands+0x34>
    ad9c:	0026      	movs	r6, r4
    ad9e:	408e      	lsls	r6, r1
    ada0:	422e      	tst	r6, r5
    ada2:	d100      	bne.n	ada6 <MacClearCommands+0x36>
    ada4:	7010      	strb	r0, [r2, #0]
    ada6:	3203      	adds	r2, #3
    ada8:	e7f0      	b.n	ad8c <MacClearCommands+0x1c>
    adaa:	46c0      	nop			; (mov r8, r8)
    adac:	20001908 	.word	0x20001908
    adb0:	2000196d 	.word	0x2000196d

0000adb4 <CountfOptsLength>:
    adb4:	2200      	movs	r2, #0
    adb6:	490d      	ldr	r1, [pc, #52]	; (adec <CountfOptsLength+0x38>)
    adb8:	b570      	push	{r4, r5, r6, lr}
    adba:	000b      	movs	r3, r1
    adbc:	0010      	movs	r0, r2
    adbe:	2503      	movs	r5, #3
    adc0:	33ac      	adds	r3, #172	; 0xac
    adc2:	781c      	ldrb	r4, [r3, #0]
    adc4:	4e0a      	ldr	r6, [pc, #40]	; (adf0 <CountfOptsLength+0x3c>)
    adc6:	b2d3      	uxtb	r3, r2
    adc8:	429c      	cmp	r4, r3
    adca:	d800      	bhi.n	adce <CountfOptsLength+0x1a>
    adcc:	bd70      	pop	{r4, r5, r6, pc}
    adce:	002b      	movs	r3, r5
    add0:	4353      	muls	r3, r2
    add2:	3365      	adds	r3, #101	; 0x65
    add4:	5ccb      	ldrb	r3, [r1, r3]
    add6:	2bff      	cmp	r3, #255	; 0xff
    add8:	d006      	beq.n	ade8 <CountfOptsLength+0x34>
    adda:	18f3      	adds	r3, r6, r3
    addc:	3b02      	subs	r3, #2
    adde:	781b      	ldrb	r3, [r3, #0]
    ade0:	18c3      	adds	r3, r0, r3
    ade2:	2b0f      	cmp	r3, #15
    ade4:	dcf2      	bgt.n	adcc <CountfOptsLength+0x18>
    ade6:	b2d8      	uxtb	r0, r3
    ade8:	3201      	adds	r2, #1
    adea:	e7ec      	b.n	adc6 <CountfOptsLength+0x12>
    adec:	20001908 	.word	0x20001908
    adf0:	0001ad24 	.word	0x0001ad24

0000adf4 <StopAllSoftwareTimers>:
    adf4:	b570      	push	{r4, r5, r6, lr}
    adf6:	4c17      	ldr	r4, [pc, #92]	; (ae54 <StopAllSoftwareTimers+0x60>)
    adf8:	4d17      	ldr	r5, [pc, #92]	; (ae58 <StopAllSoftwareTimers+0x64>)
    adfa:	0023      	movs	r3, r4
    adfc:	33b6      	adds	r3, #182	; 0xb6
    adfe:	7818      	ldrb	r0, [r3, #0]
    ae00:	47a8      	blx	r5
    ae02:	0023      	movs	r3, r4
    ae04:	33b7      	adds	r3, #183	; 0xb7
    ae06:	7818      	ldrb	r0, [r3, #0]
    ae08:	47a8      	blx	r5
    ae0a:	0023      	movs	r3, r4
    ae0c:	33bb      	adds	r3, #187	; 0xbb
    ae0e:	7818      	ldrb	r0, [r3, #0]
    ae10:	47a8      	blx	r5
    ae12:	0023      	movs	r3, r4
    ae14:	33b8      	adds	r3, #184	; 0xb8
    ae16:	7818      	ldrb	r0, [r3, #0]
    ae18:	47a8      	blx	r5
    ae1a:	0023      	movs	r3, r4
    ae1c:	33b9      	adds	r3, #185	; 0xb9
    ae1e:	7818      	ldrb	r0, [r3, #0]
    ae20:	47a8      	blx	r5
    ae22:	0023      	movs	r3, r4
    ae24:	33bc      	adds	r3, #188	; 0xbc
    ae26:	7818      	ldrb	r0, [r3, #0]
    ae28:	47a8      	blx	r5
    ae2a:	0023      	movs	r3, r4
    ae2c:	33ba      	adds	r3, #186	; 0xba
    ae2e:	7818      	ldrb	r0, [r3, #0]
    ae30:	47a8      	blx	r5
    ae32:	0023      	movs	r3, r4
    ae34:	33bd      	adds	r3, #189	; 0xbd
    ae36:	7818      	ldrb	r0, [r3, #0]
    ae38:	47a8      	blx	r5
    ae3a:	0023      	movs	r3, r4
    ae3c:	33c6      	adds	r3, #198	; 0xc6
    ae3e:	7818      	ldrb	r0, [r3, #0]
    ae40:	47a8      	blx	r5
    ae42:	0023      	movs	r3, r4
    ae44:	33c7      	adds	r3, #199	; 0xc7
    ae46:	7818      	ldrb	r0, [r3, #0]
    ae48:	34f0      	adds	r4, #240	; 0xf0
    ae4a:	47a8      	blx	r5
    ae4c:	7820      	ldrb	r0, [r4, #0]
    ae4e:	47a8      	blx	r5
    ae50:	bd70      	pop	{r4, r5, r6, pc}
    ae52:	46c0      	nop			; (mov r8, r8)
    ae54:	20001908 	.word	0x20001908
    ae58:	00009bf9 	.word	0x00009bf9

0000ae5c <LorawanGetMaxPayloadSize>:
    ae5c:	b513      	push	{r0, r1, r4, lr}
    ae5e:	466b      	mov	r3, sp
    ae60:	1ddc      	adds	r4, r3, #7
    ae62:	2300      	movs	r3, #0
    ae64:	0022      	movs	r2, r4
    ae66:	7023      	strb	r3, [r4, #0]
    ae68:	4902      	ldr	r1, [pc, #8]	; (ae74 <LorawanGetMaxPayloadSize+0x18>)
    ae6a:	4b03      	ldr	r3, [pc, #12]	; (ae78 <LorawanGetMaxPayloadSize+0x1c>)
    ae6c:	2005      	movs	r0, #5
    ae6e:	4798      	blx	r3
    ae70:	7820      	ldrb	r0, [r4, #0]
    ae72:	bd16      	pop	{r1, r2, r4, pc}
    ae74:	200019bb 	.word	0x200019bb
    ae78:	00008b79 	.word	0x00008b79

0000ae7c <UpdateReceiveDelays>:
    ae7c:	23fa      	movs	r3, #250	; 0xfa
    ae7e:	b570      	push	{r4, r5, r6, lr}
    ae80:	009b      	lsls	r3, r3, #2
    ae82:	4c0b      	ldr	r4, [pc, #44]	; (aeb0 <UpdateReceiveDelays+0x34>)
    ae84:	2800      	cmp	r0, #0
    ae86:	d000      	beq.n	ae8a <UpdateReceiveDelays+0xe>
    ae88:	4343      	muls	r3, r0
    ae8a:	0022      	movs	r2, r4
    ae8c:	4d09      	ldr	r5, [pc, #36]	; (aeb4 <UpdateReceiveDelays+0x38>)
    ae8e:	329c      	adds	r2, #156	; 0x9c
    ae90:	210c      	movs	r1, #12
    ae92:	2000      	movs	r0, #0
    ae94:	8013      	strh	r3, [r2, #0]
    ae96:	47a8      	blx	r5
    ae98:	0023      	movs	r3, r4
    ae9a:	22fa      	movs	r2, #250	; 0xfa
    ae9c:	339c      	adds	r3, #156	; 0x9c
    ae9e:	881b      	ldrh	r3, [r3, #0]
    aea0:	0092      	lsls	r2, r2, #2
    aea2:	189b      	adds	r3, r3, r2
    aea4:	349e      	adds	r4, #158	; 0x9e
    aea6:	210d      	movs	r1, #13
    aea8:	2000      	movs	r0, #0
    aeaa:	8023      	strh	r3, [r4, #0]
    aeac:	47a8      	blx	r5
    aeae:	bd70      	pop	{r4, r5, r6, pc}
    aeb0:	20001908 	.word	0x20001908
    aeb4:	00008e5d 	.word	0x00008e5d

0000aeb8 <IncludeMacCommandsResponse>:
    aeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aeba:	0005      	movs	r5, r0
    aebc:	2600      	movs	r6, #0
    aebe:	b087      	sub	sp, #28
    aec0:	880c      	ldrh	r4, [r1, #0]
    aec2:	9101      	str	r1, [sp, #4]
    aec4:	9203      	str	r2, [sp, #12]
    aec6:	4a67      	ldr	r2, [pc, #412]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    aec8:	0013      	movs	r3, r2
    aeca:	33ac      	adds	r3, #172	; 0xac
    aecc:	781b      	ldrb	r3, [r3, #0]
    aece:	42b3      	cmp	r3, r6
    aed0:	d913      	bls.n	aefa <IncludeMacCommandsResponse+0x42>
    aed2:	9b03      	ldr	r3, [sp, #12]
    aed4:	2b00      	cmp	r3, #0
    aed6:	d019      	beq.n	af0c <IncludeMacCommandsResponse+0x54>
    aed8:	2303      	movs	r3, #3
    aeda:	4373      	muls	r3, r6
    aedc:	18d3      	adds	r3, r2, r3
    aede:	3365      	adds	r3, #101	; 0x65
    aee0:	7818      	ldrb	r0, [r3, #0]
    aee2:	28ff      	cmp	r0, #255	; 0xff
    aee4:	d012      	beq.n	af0c <IncludeMacCommandsResponse+0x54>
    aee6:	9b01      	ldr	r3, [sp, #4]
    aee8:	8819      	ldrh	r1, [r3, #0]
    aeea:	4b5f      	ldr	r3, [pc, #380]	; (b068 <IncludeMacCommandsResponse+0x1b0>)
    aeec:	1a61      	subs	r1, r4, r1
    aeee:	181b      	adds	r3, r3, r0
    aef0:	3b02      	subs	r3, #2
    aef2:	781b      	ldrb	r3, [r3, #0]
    aef4:	18cb      	adds	r3, r1, r3
    aef6:	2b0f      	cmp	r3, #15
    aef8:	dd08      	ble.n	af0c <IncludeMacCommandsResponse+0x54>
    aefa:	2207      	movs	r2, #7
    aefc:	2100      	movs	r1, #0
    aefe:	4b5b      	ldr	r3, [pc, #364]	; (b06c <IncludeMacCommandsResponse+0x1b4>)
    af00:	485b      	ldr	r0, [pc, #364]	; (b070 <IncludeMacCommandsResponse+0x1b8>)
    af02:	4798      	blx	r3
    af04:	9b01      	ldr	r3, [sp, #4]
    af06:	801c      	strh	r4, [r3, #0]
    af08:	b007      	add	sp, #28
    af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af0c:	2303      	movs	r3, #3
    af0e:	4373      	muls	r3, r6
    af10:	18d3      	adds	r3, r2, r3
    af12:	3365      	adds	r3, #101	; 0x65
    af14:	7819      	ldrb	r1, [r3, #0]
    af16:	1e88      	subs	r0, r1, #2
    af18:	2808      	cmp	r0, #8
    af1a:	d862      	bhi.n	afe2 <IncludeMacCommandsResponse+0x12a>
    af1c:	1c63      	adds	r3, r4, #1
    af1e:	f005 fd39 	bl	10994 <__gnu_thumb1_case_uqi>
    af22:	0594      	.short	0x0594
    af24:	6646269e 	.word	0x6646269e
    af28:	7b9e      	.short	0x7b9e
    af2a:	7f          	.byte	0x7f
    af2b:	00          	.byte	0x00
    af2c:	2203      	movs	r2, #3
    af2e:	2024      	movs	r0, #36	; 0x24
    af30:	552a      	strb	r2, [r5, r4]
    af32:	2200      	movs	r2, #0
    af34:	b29b      	uxth	r3, r3
    af36:	18eb      	adds	r3, r5, r3
    af38:	4f4a      	ldr	r7, [pc, #296]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    af3a:	701a      	strb	r2, [r3, #0]
    af3c:	30ff      	adds	r0, #255	; 0xff
    af3e:	5c39      	ldrb	r1, [r7, r0]
    af40:	3201      	adds	r2, #1
    af42:	4011      	ands	r1, r2
    af44:	466a      	mov	r2, sp
    af46:	9102      	str	r1, [sp, #8]
    af48:	7a12      	ldrb	r2, [r2, #8]
    af4a:	701a      	strb	r2, [r3, #0]
    af4c:	5c3a      	ldrb	r2, [r7, r0]
    af4e:	4694      	mov	ip, r2
    af50:	2202      	movs	r2, #2
    af52:	4661      	mov	r1, ip
    af54:	4211      	tst	r1, r2
    af56:	d002      	beq.n	af5e <IncludeMacCommandsResponse+0xa6>
    af58:	9902      	ldr	r1, [sp, #8]
    af5a:	430a      	orrs	r2, r1
    af5c:	701a      	strb	r2, [r3, #0]
    af5e:	2204      	movs	r2, #4
    af60:	5c39      	ldrb	r1, [r7, r0]
    af62:	4211      	tst	r1, r2
    af64:	d06e      	beq.n	b044 <IncludeMacCommandsResponse+0x18c>
    af66:	7819      	ldrb	r1, [r3, #0]
    af68:	430a      	orrs	r2, r1
    af6a:	701a      	strb	r2, [r3, #0]
    af6c:	e06a      	b.n	b044 <IncludeMacCommandsResponse+0x18c>
    af6e:	2205      	movs	r2, #5
    af70:	2103      	movs	r1, #3
    af72:	552a      	strb	r2, [r5, r4]
    af74:	2200      	movs	r2, #0
    af76:	b29b      	uxth	r3, r3
    af78:	4371      	muls	r1, r6
    af7a:	18eb      	adds	r3, r5, r3
    af7c:	701a      	strb	r2, [r3, #0]
    af7e:	4a39      	ldr	r2, [pc, #228]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    af80:	1851      	adds	r1, r2, r1
    af82:	3160      	adds	r1, #96	; 0x60
    af84:	7988      	ldrb	r0, [r1, #6]
    af86:	0700      	lsls	r0, r0, #28
    af88:	0fc0      	lsrs	r0, r0, #31
    af8a:	7018      	strb	r0, [r3, #0]
    af8c:	7989      	ldrb	r1, [r1, #6]
    af8e:	b2c7      	uxtb	r7, r0
    af90:	06c9      	lsls	r1, r1, #27
    af92:	d502      	bpl.n	af9a <IncludeMacCommandsResponse+0xe2>
    af94:	2102      	movs	r1, #2
    af96:	4339      	orrs	r1, r7
    af98:	7019      	strb	r1, [r3, #0]
    af9a:	2103      	movs	r1, #3
    af9c:	4371      	muls	r1, r6
    af9e:	1852      	adds	r2, r2, r1
    afa0:	3260      	adds	r2, #96	; 0x60
    afa2:	7992      	ldrb	r2, [r2, #6]
    afa4:	0692      	lsls	r2, r2, #26
    afa6:	d54d      	bpl.n	b044 <IncludeMacCommandsResponse+0x18c>
    afa8:	7819      	ldrb	r1, [r3, #0]
    afaa:	2204      	movs	r2, #4
    afac:	e7dc      	b.n	af68 <IncludeMacCommandsResponse+0xb0>
    afae:	ab04      	add	r3, sp, #16
    afb0:	1ddf      	adds	r7, r3, #7
    afb2:	0039      	movs	r1, r7
    afb4:	4b2f      	ldr	r3, [pc, #188]	; (b074 <IncludeMacCommandsResponse+0x1bc>)
    afb6:	200e      	movs	r0, #14
    afb8:	4798      	blx	r3
    afba:	2306      	movs	r3, #6
    afbc:	4a29      	ldr	r2, [pc, #164]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    afbe:	552b      	strb	r3, [r5, r4]
    afc0:	32b4      	adds	r2, #180	; 0xb4
    afc2:	7811      	ldrb	r1, [r2, #0]
    afc4:	1c62      	adds	r2, r4, #1
    afc6:	b292      	uxth	r2, r2
    afc8:	54a9      	strb	r1, [r5, r2]
    afca:	783a      	ldrb	r2, [r7, #0]
    afcc:	1ca3      	adds	r3, r4, #2
    afce:	0011      	movs	r1, r2
    afd0:	3120      	adds	r1, #32
    afd2:	3403      	adds	r4, #3
    afd4:	b2c9      	uxtb	r1, r1
    afd6:	b29b      	uxth	r3, r3
    afd8:	b2a4      	uxth	r4, r4
    afda:	293f      	cmp	r1, #63	; 0x3f
    afdc:	d904      	bls.n	afe8 <IncludeMacCommandsResponse+0x130>
    afde:	2220      	movs	r2, #32
    afe0:	54ea      	strb	r2, [r5, r3]
    afe2:	3601      	adds	r6, #1
    afe4:	b2f6      	uxtb	r6, r6
    afe6:	e76e      	b.n	aec6 <IncludeMacCommandsResponse+0xe>
    afe8:	213f      	movs	r1, #63	; 0x3f
    afea:	400a      	ands	r2, r1
    afec:	e7f8      	b.n	afe0 <IncludeMacCommandsResponse+0x128>
    afee:	2207      	movs	r2, #7
    aff0:	2103      	movs	r1, #3
    aff2:	552a      	strb	r2, [r5, r4]
    aff4:	2200      	movs	r2, #0
    aff6:	4371      	muls	r1, r6
    aff8:	b29b      	uxth	r3, r3
    affa:	18eb      	adds	r3, r5, r3
    affc:	701a      	strb	r2, [r3, #0]
    affe:	4a19      	ldr	r2, [pc, #100]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    b000:	1852      	adds	r2, r2, r1
    b002:	3260      	adds	r2, #96	; 0x60
    b004:	7991      	ldrb	r1, [r2, #6]
    b006:	09c9      	lsrs	r1, r1, #7
    b008:	7019      	strb	r1, [r3, #0]
    b00a:	7992      	ldrb	r2, [r2, #6]
    b00c:	b2c8      	uxtb	r0, r1
    b00e:	0652      	lsls	r2, r2, #25
    b010:	d518      	bpl.n	b044 <IncludeMacCommandsResponse+0x18c>
    b012:	2202      	movs	r2, #2
    b014:	4302      	orrs	r2, r0
    b016:	e7a8      	b.n	af6a <IncludeMacCommandsResponse+0xb2>
    b018:	2209      	movs	r2, #9
    b01a:	552a      	strb	r2, [r5, r4]
    b01c:	b29c      	uxth	r4, r3
    b01e:	e7e0      	b.n	afe2 <IncludeMacCommandsResponse+0x12a>
    b020:	220a      	movs	r2, #10
    b022:	2103      	movs	r1, #3
    b024:	552a      	strb	r2, [r5, r4]
    b026:	2200      	movs	r2, #0
    b028:	4371      	muls	r1, r6
    b02a:	b29b      	uxth	r3, r3
    b02c:	18eb      	adds	r3, r5, r3
    b02e:	701a      	strb	r2, [r3, #0]
    b030:	4a0c      	ldr	r2, [pc, #48]	; (b064 <IncludeMacCommandsResponse+0x1ac>)
    b032:	1852      	adds	r2, r2, r1
    b034:	3260      	adds	r2, #96	; 0x60
    b036:	7991      	ldrb	r1, [r2, #6]
    b038:	09c9      	lsrs	r1, r1, #7
    b03a:	7019      	strb	r1, [r3, #0]
    b03c:	79d2      	ldrb	r2, [r2, #7]
    b03e:	b2c8      	uxtb	r0, r1
    b040:	07d2      	lsls	r2, r2, #31
    b042:	d4e6      	bmi.n	b012 <IncludeMacCommandsResponse+0x15a>
    b044:	3402      	adds	r4, #2
    b046:	b2a4      	uxth	r4, r4
    b048:	e7cb      	b.n	afe2 <IncludeMacCommandsResponse+0x12a>
    b04a:	0013      	movs	r3, r2
    b04c:	21ff      	movs	r1, #255	; 0xff
    b04e:	33b1      	adds	r3, #177	; 0xb1
    b050:	7019      	strb	r1, [r3, #0]
    b052:	2300      	movs	r3, #0
    b054:	32b2      	adds	r2, #178	; 0xb2
    b056:	7013      	strb	r3, [r2, #0]
    b058:	1c63      	adds	r3, r4, #1
    b05a:	2202      	movs	r2, #2
    b05c:	e7dd      	b.n	b01a <IncludeMacCommandsResponse+0x162>
    b05e:	5529      	strb	r1, [r5, r4]
    b060:	e7dc      	b.n	b01c <IncludeMacCommandsResponse+0x164>
    b062:	46c0      	nop			; (mov r8, r8)
    b064:	20001908 	.word	0x20001908
    b068:	0001ad24 	.word	0x0001ad24
    b06c:	00013c29 	.word	0x00013c29
    b070:	20001a2b 	.word	0x20001a2b
    b074:	0000ef35 	.word	0x0000ef35

0000b078 <UpdateJoinSuccessState>:
    b078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b07a:	4c22      	ldr	r4, [pc, #136]	; (b104 <UpdateJoinSuccessState+0x8c>)
    b07c:	2104      	movs	r1, #4
    b07e:	0022      	movs	r2, r4
    b080:	0026      	movs	r6, r4
    b082:	2701      	movs	r7, #1
    b084:	2500      	movs	r5, #0
    b086:	3260      	adds	r2, #96	; 0x60
    b088:	7813      	ldrb	r3, [r2, #0]
    b08a:	3650      	adds	r6, #80	; 0x50
    b08c:	438b      	bics	r3, r1
    b08e:	7013      	strb	r3, [r2, #0]
    b090:	7833      	ldrb	r3, [r6, #0]
    b092:	3107      	adds	r1, #7
    b094:	433b      	orrs	r3, r7
    b096:	7033      	strb	r3, [r6, #0]
    b098:	0038      	movs	r0, r7
    b09a:	4b1b      	ldr	r3, [pc, #108]	; (b108 <UpdateJoinSuccessState+0x90>)
    b09c:	4798      	blx	r3
    b09e:	2116      	movs	r1, #22
    b0a0:	4b19      	ldr	r3, [pc, #100]	; (b108 <UpdateJoinSuccessState+0x90>)
    b0a2:	0028      	movs	r0, r5
    b0a4:	6565      	str	r5, [r4, #84]	; 0x54
    b0a6:	4798      	blx	r3
    b0a8:	4b17      	ldr	r3, [pc, #92]	; (b108 <UpdateJoinSuccessState+0x90>)
    b0aa:	210a      	movs	r1, #10
    b0ac:	0038      	movs	r0, r7
    b0ae:	65a5      	str	r5, [r4, #88]	; 0x58
    b0b0:	4798      	blx	r3
    b0b2:	0023      	movs	r3, r4
    b0b4:	3396      	adds	r3, #150	; 0x96
    b0b6:	801d      	strh	r5, [r3, #0]
    b0b8:	0023      	movs	r3, r4
    b0ba:	220e      	movs	r2, #14
    b0bc:	33c1      	adds	r3, #193	; 0xc1
    b0be:	701d      	strb	r5, [r3, #0]
    b0c0:	7833      	ldrb	r3, [r6, #0]
    b0c2:	4393      	bics	r3, r2
    b0c4:	7033      	strb	r3, [r6, #0]
    b0c6:	0023      	movs	r3, r4
    b0c8:	3351      	adds	r3, #81	; 0x51
    b0ca:	781b      	ldrb	r3, [r3, #0]
    b0cc:	079b      	lsls	r3, r3, #30
    b0ce:	d50a      	bpl.n	b0e6 <UpdateJoinSuccessState+0x6e>
    b0d0:	21fa      	movs	r1, #250	; 0xfa
    b0d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b0d4:	0089      	lsls	r1, r1, #2
    b0d6:	34bb      	adds	r4, #187	; 0xbb
    b0d8:	7820      	ldrb	r0, [r4, #0]
    b0da:	4359      	muls	r1, r3
    b0dc:	9500      	str	r5, [sp, #0]
    b0de:	4b0b      	ldr	r3, [pc, #44]	; (b10c <UpdateJoinSuccessState+0x94>)
    b0e0:	002a      	movs	r2, r5
    b0e2:	4c0b      	ldr	r4, [pc, #44]	; (b110 <UpdateJoinSuccessState+0x98>)
    b0e4:	47a0      	blx	r4
    b0e6:	490b      	ldr	r1, [pc, #44]	; (b114 <UpdateJoinSuccessState+0x9c>)
    b0e8:	794a      	ldrb	r2, [r1, #5]
    b0ea:	790b      	ldrb	r3, [r1, #4]
    b0ec:	0212      	lsls	r2, r2, #8
    b0ee:	431a      	orrs	r2, r3
    b0f0:	798b      	ldrb	r3, [r1, #6]
    b0f2:	041b      	lsls	r3, r3, #16
    b0f4:	431a      	orrs	r2, r3
    b0f6:	79cb      	ldrb	r3, [r1, #7]
    b0f8:	061b      	lsls	r3, r3, #24
    b0fa:	4313      	orrs	r3, r2
    b0fc:	d001      	beq.n	b102 <UpdateJoinSuccessState+0x8a>
    b0fe:	2001      	movs	r0, #1
    b100:	4798      	blx	r3
    b102:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b104:	20001908 	.word	0x20001908
    b108:	00008e5d 	.word	0x00008e5d
    b10c:	0000b215 	.word	0x0000b215
    b110:	000098f5 	.word	0x000098f5
    b114:	20001b48 	.word	0x20001b48

0000b118 <PrepareSessionKeys>:
    b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b11a:	0004      	movs	r4, r0
    b11c:	2603      	movs	r6, #3
    b11e:	000d      	movs	r5, r1
    b120:	0017      	movs	r7, r2
    b122:	4b09      	ldr	r3, [pc, #36]	; (b148 <PrepareSessionKeys+0x30>)
    b124:	2210      	movs	r2, #16
    b126:	2100      	movs	r1, #0
    b128:	4798      	blx	r3
    b12a:	0032      	movs	r2, r6
    b12c:	0029      	movs	r1, r5
    b12e:	1c60      	adds	r0, r4, #1
    b130:	4d06      	ldr	r5, [pc, #24]	; (b14c <PrepareSessionKeys+0x34>)
    b132:	47a8      	blx	r5
    b134:	0032      	movs	r2, r6
    b136:	0039      	movs	r1, r7
    b138:	1d20      	adds	r0, r4, #4
    b13a:	47a8      	blx	r5
    b13c:	1de0      	adds	r0, r4, #7
    b13e:	2202      	movs	r2, #2
    b140:	4903      	ldr	r1, [pc, #12]	; (b150 <PrepareSessionKeys+0x38>)
    b142:	47a8      	blx	r5
    b144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b146:	46c0      	nop			; (mov r8, r8)
    b148:	00013c29 	.word	0x00013c29
    b14c:	00013ba5 	.word	0x00013ba5
    b150:	200019a0 	.word	0x200019a0

0000b154 <AssembleEncryptionBlock>:
    b154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b156:	001e      	movs	r6, r3
    b158:	4c0b      	ldr	r4, [pc, #44]	; (b188 <AssembleEncryptionBlock+0x34>)
    b15a:	0017      	movs	r7, r2
    b15c:	4b0b      	ldr	r3, [pc, #44]	; (b18c <AssembleEncryptionBlock+0x38>)
    b15e:	0005      	movs	r5, r0
    b160:	9101      	str	r1, [sp, #4]
    b162:	2210      	movs	r2, #16
    b164:	2100      	movs	r1, #0
    b166:	0020      	movs	r0, r4
    b168:	4798      	blx	r3
    b16a:	7026      	strb	r6, [r4, #0]
    b16c:	2604      	movs	r6, #4
    b16e:	7165      	strb	r5, [r4, #5]
    b170:	0032      	movs	r2, r6
    b172:	4d07      	ldr	r5, [pc, #28]	; (b190 <AssembleEncryptionBlock+0x3c>)
    b174:	a908      	add	r1, sp, #32
    b176:	1da0      	adds	r0, r4, #6
    b178:	47a8      	blx	r5
    b17a:	0020      	movs	r0, r4
    b17c:	0032      	movs	r2, r6
    b17e:	a901      	add	r1, sp, #4
    b180:	300a      	adds	r0, #10
    b182:	47a8      	blx	r5
    b184:	73e7      	strb	r7, [r4, #15]
    b186:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b188:	20000f24 	.word	0x20000f24
    b18c:	00013c29 	.word	0x00013c29
    b190:	00013ba5 	.word	0x00013ba5

0000b194 <ConfigureRadio>:
    b194:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b196:	0001      	movs	r1, r0
    b198:	0005      	movs	r5, r0
    b19a:	4c11      	ldr	r4, [pc, #68]	; (b1e0 <ConfigureRadio+0x4c>)
    b19c:	3109      	adds	r1, #9
    b19e:	2009      	movs	r0, #9
    b1a0:	47a0      	blx	r4
    b1a2:	0029      	movs	r1, r5
    b1a4:	2001      	movs	r0, #1
    b1a6:	47a0      	blx	r4
    b1a8:	1d29      	adds	r1, r5, #4
    b1aa:	200a      	movs	r0, #10
    b1ac:	47a0      	blx	r4
    b1ae:	7a6b      	ldrb	r3, [r5, #9]
    b1b0:	2b01      	cmp	r3, #1
    b1b2:	d10b      	bne.n	b1cc <ConfigureRadio+0x38>
    b1b4:	0029      	movs	r1, r5
    b1b6:	2016      	movs	r0, #22
    b1b8:	310b      	adds	r1, #11
    b1ba:	47a0      	blx	r4
    b1bc:	0029      	movs	r1, r5
    b1be:	2007      	movs	r0, #7
    b1c0:	310a      	adds	r1, #10
    b1c2:	47a0      	blx	r4
    b1c4:	2000      	movs	r0, #0
    b1c6:	4907      	ldr	r1, [pc, #28]	; (b1e4 <ConfigureRadio+0x50>)
    b1c8:	47a0      	blx	r4
    b1ca:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    b1cc:	466b      	mov	r3, sp
    b1ce:	1dd9      	adds	r1, r3, #7
    b1d0:	2303      	movs	r3, #3
    b1d2:	2013      	movs	r0, #19
    b1d4:	700b      	strb	r3, [r1, #0]
    b1d6:	47a0      	blx	r4
    b1d8:	4903      	ldr	r1, [pc, #12]	; (b1e8 <ConfigureRadio+0x54>)
    b1da:	2012      	movs	r0, #18
    b1dc:	e7f4      	b.n	b1c8 <ConfigureRadio+0x34>
    b1de:	46c0      	nop			; (mov r8, r8)
    b1e0:	0000f021 	.word	0x0000f021
    b1e4:	200019d3 	.word	0x200019d3
    b1e8:	0001ad21 	.word	0x0001ad21

0000b1ec <LorawanLinkCheckCallback.part.1>:
    b1ec:	b513      	push	{r0, r1, r4, lr}
    b1ee:	21fa      	movs	r1, #250	; 0xfa
    b1f0:	4b05      	ldr	r3, [pc, #20]	; (b208 <LorawanLinkCheckCallback.part.1+0x1c>)
    b1f2:	0089      	lsls	r1, r1, #2
    b1f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b1f6:	33bb      	adds	r3, #187	; 0xbb
    b1f8:	4351      	muls	r1, r2
    b1fa:	2200      	movs	r2, #0
    b1fc:	7818      	ldrb	r0, [r3, #0]
    b1fe:	4c03      	ldr	r4, [pc, #12]	; (b20c <LorawanLinkCheckCallback.part.1+0x20>)
    b200:	9200      	str	r2, [sp, #0]
    b202:	4b03      	ldr	r3, [pc, #12]	; (b210 <LorawanLinkCheckCallback.part.1+0x24>)
    b204:	47a0      	blx	r4
    b206:	bd13      	pop	{r0, r1, r4, pc}
    b208:	20001908 	.word	0x20001908
    b20c:	000098f5 	.word	0x000098f5
    b210:	0000b215 	.word	0x0000b215

0000b214 <LorawanLinkCheckCallback>:
    b214:	4b17      	ldr	r3, [pc, #92]	; (b274 <LorawanLinkCheckCallback+0x60>)
    b216:	20a0      	movs	r0, #160	; 0xa0
    b218:	001a      	movs	r2, r3
    b21a:	2180      	movs	r1, #128	; 0x80
    b21c:	b510      	push	{r4, lr}
    b21e:	3250      	adds	r2, #80	; 0x50
    b220:	8812      	ldrh	r2, [r2, #0]
    b222:	0080      	lsls	r0, r0, #2
    b224:	0089      	lsls	r1, r1, #2
    b226:	4002      	ands	r2, r0
    b228:	428a      	cmp	r2, r1
    b22a:	d11c      	bne.n	b266 <LorawanLinkCheckCallback+0x52>
    b22c:	001a      	movs	r2, r3
    b22e:	32ac      	adds	r2, #172	; 0xac
    b230:	7810      	ldrb	r0, [r2, #0]
    b232:	2403      	movs	r4, #3
    b234:	2200      	movs	r2, #0
    b236:	b2d1      	uxtb	r1, r2
    b238:	4281      	cmp	r1, r0
    b23a:	d30d      	bcc.n	b258 <LorawanLinkCheckCallback+0x44>
    b23c:	d113      	bne.n	b266 <LorawanLinkCheckCallback+0x52>
    b23e:	2203      	movs	r2, #3
    b240:	434a      	muls	r2, r1
    b242:	2102      	movs	r1, #2
    b244:	189a      	adds	r2, r3, r2
    b246:	3265      	adds	r2, #101	; 0x65
    b248:	7011      	strb	r1, [r2, #0]
    b24a:	280f      	cmp	r0, #15
    b24c:	d80b      	bhi.n	b266 <LorawanLinkCheckCallback+0x52>
    b24e:	001a      	movs	r2, r3
    b250:	3001      	adds	r0, #1
    b252:	32ac      	adds	r2, #172	; 0xac
    b254:	7010      	strb	r0, [r2, #0]
    b256:	e006      	b.n	b266 <LorawanLinkCheckCallback+0x52>
    b258:	0021      	movs	r1, r4
    b25a:	3201      	adds	r2, #1
    b25c:	4351      	muls	r1, r2
    b25e:	3162      	adds	r1, #98	; 0x62
    b260:	5c59      	ldrb	r1, [r3, r1]
    b262:	2902      	cmp	r1, #2
    b264:	d1e7      	bne.n	b236 <LorawanLinkCheckCallback+0x22>
    b266:	3351      	adds	r3, #81	; 0x51
    b268:	781b      	ldrb	r3, [r3, #0]
    b26a:	079b      	lsls	r3, r3, #30
    b26c:	d501      	bpl.n	b272 <LorawanLinkCheckCallback+0x5e>
    b26e:	4b02      	ldr	r3, [pc, #8]	; (b278 <LorawanLinkCheckCallback+0x64>)
    b270:	4798      	blx	r3
    b272:	bd10      	pop	{r4, pc}
    b274:	20001908 	.word	0x20001908
    b278:	0000b1ed 	.word	0x0000b1ed

0000b27c <LORAWAN_Init>:
    b27c:	2270      	movs	r2, #112	; 0x70
    b27e:	b5f0      	push	{r4, r5, r6, r7, lr}
    b280:	4b3e      	ldr	r3, [pc, #248]	; (b37c <LORAWAN_Init+0x100>)
    b282:	b087      	sub	sp, #28
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	0005      	movs	r5, r0
    b288:	011b      	lsls	r3, r3, #4
    b28a:	4013      	ands	r3, r2
    b28c:	4a3c      	ldr	r2, [pc, #240]	; (b380 <LORAWAN_Init+0x104>)
    b28e:	000e      	movs	r6, r1
    b290:	7812      	ldrb	r2, [r2, #0]
    b292:	0912      	lsrs	r2, r2, #4
    b294:	4313      	orrs	r3, r2
    b296:	2b1f      	cmp	r3, #31
    b298:	d000      	beq.n	b29c <LORAWAN_Init+0x20>
    b29a:	e7fe      	b.n	b29a <LORAWAN_Init+0x1e>
    b29c:	4f39      	ldr	r7, [pc, #228]	; (b384 <LORAWAN_Init+0x108>)
    b29e:	003b      	movs	r3, r7
    b2a0:	33c3      	adds	r3, #195	; 0xc3
    b2a2:	781b      	ldrb	r3, [r3, #0]
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	d166      	bne.n	b376 <LORAWAN_Init+0xfa>
    b2a8:	4837      	ldr	r0, [pc, #220]	; (b388 <LORAWAN_Init+0x10c>)
    b2aa:	4c38      	ldr	r4, [pc, #224]	; (b38c <LORAWAN_Init+0x110>)
    b2ac:	47a0      	blx	r4
    b2ae:	2808      	cmp	r0, #8
    b2b0:	d034      	beq.n	b31c <LORAWAN_Init+0xa0>
    b2b2:	4b37      	ldr	r3, [pc, #220]	; (b390 <LORAWAN_Init+0x114>)
    b2b4:	4798      	blx	r3
    b2b6:	37c3      	adds	r7, #195	; 0xc3
    b2b8:	783b      	ldrb	r3, [r7, #0]
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d018      	beq.n	b2f0 <LORAWAN_Init+0x74>
    b2be:	4b35      	ldr	r3, [pc, #212]	; (b394 <LORAWAN_Init+0x118>)
    b2c0:	0a2a      	lsrs	r2, r5, #8
    b2c2:	705a      	strb	r2, [r3, #1]
    b2c4:	0c2a      	lsrs	r2, r5, #16
    b2c6:	709a      	strb	r2, [r3, #2]
    b2c8:	0a32      	lsrs	r2, r6, #8
    b2ca:	701d      	strb	r5, [r3, #0]
    b2cc:	711e      	strb	r6, [r3, #4]
    b2ce:	715a      	strb	r2, [r3, #5]
    b2d0:	0e2d      	lsrs	r5, r5, #24
    b2d2:	0c32      	lsrs	r2, r6, #16
    b2d4:	0e36      	lsrs	r6, r6, #24
    b2d6:	719a      	strb	r2, [r3, #6]
    b2d8:	70dd      	strb	r5, [r3, #3]
    b2da:	71de      	strb	r6, [r3, #7]
    b2dc:	4b2e      	ldr	r3, [pc, #184]	; (b398 <LORAWAN_Init+0x11c>)
    b2de:	4798      	blx	r3
    b2e0:	492e      	ldr	r1, [pc, #184]	; (b39c <LORAWAN_Init+0x120>)
    b2e2:	4b2f      	ldr	r3, [pc, #188]	; (b3a0 <LORAWAN_Init+0x124>)
    b2e4:	201a      	movs	r0, #26
    b2e6:	4798      	blx	r3
    b2e8:	4b2e      	ldr	r3, [pc, #184]	; (b3a4 <LORAWAN_Init+0x128>)
    b2ea:	4798      	blx	r3
    b2ec:	4b2e      	ldr	r3, [pc, #184]	; (b3a8 <LORAWAN_Init+0x12c>)
    b2ee:	4798      	blx	r3
    b2f0:	2317      	movs	r3, #23
    b2f2:	ac02      	add	r4, sp, #8
    b2f4:	7123      	strb	r3, [r4, #4]
    b2f6:	4b2d      	ldr	r3, [pc, #180]	; (b3ac <LORAWAN_Init+0x130>)
    b2f8:	9a03      	ldr	r2, [sp, #12]
    b2fa:	9300      	str	r3, [sp, #0]
    b2fc:	4d2c      	ldr	r5, [pc, #176]	; (b3b0 <LORAWAN_Init+0x134>)
    b2fe:	492d      	ldr	r1, [pc, #180]	; (b3b4 <LORAWAN_Init+0x138>)
    b300:	4b2d      	ldr	r3, [pc, #180]	; (b3b8 <LORAWAN_Init+0x13c>)
    b302:	2000      	movs	r0, #0
    b304:	47a8      	blx	r5
    b306:	230d      	movs	r3, #13
    b308:	7123      	strb	r3, [r4, #4]
    b30a:	4b2c      	ldr	r3, [pc, #176]	; (b3bc <LORAWAN_Init+0x140>)
    b30c:	492c      	ldr	r1, [pc, #176]	; (b3c0 <LORAWAN_Init+0x144>)
    b30e:	9300      	str	r3, [sp, #0]
    b310:	6862      	ldr	r2, [r4, #4]
    b312:	4b2c      	ldr	r3, [pc, #176]	; (b3c4 <LORAWAN_Init+0x148>)
    b314:	2001      	movs	r0, #1
    b316:	47a8      	blx	r5
    b318:	b007      	add	sp, #28
    b31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b31c:	482a      	ldr	r0, [pc, #168]	; (b3c8 <LORAWAN_Init+0x14c>)
    b31e:	47a0      	blx	r4
    b320:	2808      	cmp	r0, #8
    b322:	d1c6      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b324:	4829      	ldr	r0, [pc, #164]	; (b3cc <LORAWAN_Init+0x150>)
    b326:	47a0      	blx	r4
    b328:	2808      	cmp	r0, #8
    b32a:	d1c2      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b32c:	4828      	ldr	r0, [pc, #160]	; (b3d0 <LORAWAN_Init+0x154>)
    b32e:	47a0      	blx	r4
    b330:	2808      	cmp	r0, #8
    b332:	d1be      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b334:	4827      	ldr	r0, [pc, #156]	; (b3d4 <LORAWAN_Init+0x158>)
    b336:	47a0      	blx	r4
    b338:	2808      	cmp	r0, #8
    b33a:	d1ba      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b33c:	4826      	ldr	r0, [pc, #152]	; (b3d8 <LORAWAN_Init+0x15c>)
    b33e:	47a0      	blx	r4
    b340:	2808      	cmp	r0, #8
    b342:	d1b6      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b344:	4825      	ldr	r0, [pc, #148]	; (b3dc <LORAWAN_Init+0x160>)
    b346:	47a0      	blx	r4
    b348:	2808      	cmp	r0, #8
    b34a:	d1b2      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b34c:	4824      	ldr	r0, [pc, #144]	; (b3e0 <LORAWAN_Init+0x164>)
    b34e:	47a0      	blx	r4
    b350:	2808      	cmp	r0, #8
    b352:	d1ae      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b354:	4823      	ldr	r0, [pc, #140]	; (b3e4 <LORAWAN_Init+0x168>)
    b356:	47a0      	blx	r4
    b358:	2808      	cmp	r0, #8
    b35a:	d1aa      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b35c:	4822      	ldr	r0, [pc, #136]	; (b3e8 <LORAWAN_Init+0x16c>)
    b35e:	47a0      	blx	r4
    b360:	2808      	cmp	r0, #8
    b362:	d1a6      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b364:	4821      	ldr	r0, [pc, #132]	; (b3ec <LORAWAN_Init+0x170>)
    b366:	47a0      	blx	r4
    b368:	2808      	cmp	r0, #8
    b36a:	d1a2      	bne.n	b2b2 <LORAWAN_Init+0x36>
    b36c:	003b      	movs	r3, r7
    b36e:	2201      	movs	r2, #1
    b370:	33c3      	adds	r3, #195	; 0xc3
    b372:	701a      	strb	r2, [r3, #0]
    b374:	e79f      	b.n	b2b6 <LORAWAN_Init+0x3a>
    b376:	4b1e      	ldr	r3, [pc, #120]	; (b3f0 <LORAWAN_Init+0x174>)
    b378:	4798      	blx	r3
    b37a:	e79c      	b.n	b2b6 <LORAWAN_Init+0x3a>
    b37c:	41003fe8 	.word	0x41003fe8
    b380:	41003fe4 	.word	0x41003fe4
    b384:	20001908 	.word	0x20001908
    b388:	200019be 	.word	0x200019be
    b38c:	000098c1 	.word	0x000098c1
    b390:	00009805 	.word	0x00009805
    b394:	20001b48 	.word	0x20001b48
    b398:	0000f23d 	.word	0x0000f23d
    b39c:	0000cd65 	.word	0x0000cd65
    b3a0:	0000f021 	.word	0x0000f021
    b3a4:	0000a085 	.word	0x0000a085
    b3a8:	00013d95 	.word	0x00013d95
    b3ac:	0000eca5 	.word	0x0000eca5
    b3b0:	00008ec1 	.word	0x00008ec1
    b3b4:	200018f1 	.word	0x200018f1
    b3b8:	0001ad40 	.word	0x0001ad40
    b3bc:	0000ecbd 	.word	0x0000ecbd
    b3c0:	200017e4 	.word	0x200017e4
    b3c4:	0001adf8 	.word	0x0001adf8
    b3c8:	200019bf 	.word	0x200019bf
    b3cc:	200019c0 	.word	0x200019c0
    b3d0:	200019c1 	.word	0x200019c1
    b3d4:	200019c3 	.word	0x200019c3
    b3d8:	200019c4 	.word	0x200019c4
    b3dc:	200019c2 	.word	0x200019c2
    b3e0:	200019c5 	.word	0x200019c5
    b3e4:	200019ce 	.word	0x200019ce
    b3e8:	200019cf 	.word	0x200019cf
    b3ec:	200019f8 	.word	0x200019f8
    b3f0:	0000adf5 	.word	0x0000adf5

0000b3f4 <LORAWAN_Send>:
    b3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b3f6:	4c36      	ldr	r4, [pc, #216]	; (b4d0 <LORAWAN_Send+0xdc>)
    b3f8:	0006      	movs	r6, r0
    b3fa:	0023      	movs	r3, r4
    b3fc:	3350      	adds	r3, #80	; 0x50
    b3fe:	781b      	ldrb	r3, [r3, #0]
    b400:	250f      	movs	r5, #15
    b402:	b25a      	sxtb	r2, r3
    b404:	2a00      	cmp	r2, #0
    b406:	db0b      	blt.n	b420 <LORAWAN_Send+0x2c>
    b408:	3d03      	subs	r5, #3
    b40a:	065a      	lsls	r2, r3, #25
    b40c:	d408      	bmi.n	b420 <LORAWAN_Send+0x2c>
    b40e:	3d03      	subs	r5, #3
    b410:	07db      	lsls	r3, r3, #31
    b412:	d505      	bpl.n	b420 <LORAWAN_Send+0x2c>
    b414:	2390      	movs	r3, #144	; 0x90
    b416:	005b      	lsls	r3, r3, #1
    b418:	5ce7      	ldrb	r7, [r4, r3]
    b41a:	2f00      	cmp	r7, #0
    b41c:	d102      	bne.n	b424 <LORAWAN_Send+0x30>
    b41e:	2511      	movs	r5, #17
    b420:	0028      	movs	r0, r5
    b422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b424:	2800      	cmp	r0, #0
    b426:	d10d      	bne.n	b444 <LORAWAN_Send+0x50>
    b428:	2700      	movs	r7, #0
    b42a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b42c:	3301      	adds	r3, #1
    b42e:	d123      	bne.n	b478 <LORAWAN_Send+0x84>
    b430:	2001      	movs	r0, #1
    b432:	3450      	adds	r4, #80	; 0x50
    b434:	78a3      	ldrb	r3, [r4, #2]
    b436:	210b      	movs	r1, #11
    b438:	4303      	orrs	r3, r0
    b43a:	70a3      	strb	r3, [r4, #2]
    b43c:	4b25      	ldr	r3, [pc, #148]	; (b4d4 <LORAWAN_Send+0xe0>)
    b43e:	4798      	blx	r3
    b440:	250d      	movs	r5, #13
    b442:	e7ed      	b.n	b420 <LORAWAN_Send+0x2c>
    b444:	7843      	ldrb	r3, [r0, #1]
    b446:	7a02      	ldrb	r2, [r0, #8]
    b448:	3b01      	subs	r3, #1
    b44a:	b2db      	uxtb	r3, r3
    b44c:	9201      	str	r2, [sp, #4]
    b44e:	2bdf      	cmp	r3, #223	; 0xdf
    b450:	d902      	bls.n	b458 <LORAWAN_Send+0x64>
    b452:	250a      	movs	r5, #10
    b454:	2a00      	cmp	r2, #0
    b456:	d1e3      	bne.n	b420 <LORAWAN_Send+0x2c>
    b458:	4b1f      	ldr	r3, [pc, #124]	; (b4d8 <LORAWAN_Send+0xe4>)
    b45a:	4798      	blx	r3
    b45c:	4684      	mov	ip, r0
    b45e:	9b01      	ldr	r3, [sp, #4]
    b460:	9000      	str	r0, [sp, #0]
    b462:	4463      	add	r3, ip
    b464:	001d      	movs	r5, r3
    b466:	4b1d      	ldr	r3, [pc, #116]	; (b4dc <LORAWAN_Send+0xe8>)
    b468:	4798      	blx	r3
    b46a:	4285      	cmp	r5, r0
    b46c:	dddc      	ble.n	b428 <LORAWAN_Send+0x34>
    b46e:	9b00      	ldr	r3, [sp, #0]
    b470:	250e      	movs	r5, #14
    b472:	2b00      	cmp	r3, #0
    b474:	d0d4      	beq.n	b420 <LORAWAN_Send+0x2c>
    b476:	e7d8      	b.n	b42a <LORAWAN_Send+0x36>
    b478:	0023      	movs	r3, r4
    b47a:	33c8      	adds	r3, #200	; 0xc8
    b47c:	781b      	ldrb	r3, [r3, #0]
    b47e:	2b04      	cmp	r3, #4
    b480:	d01d      	beq.n	b4be <LORAWAN_Send+0xca>
    b482:	0023      	movs	r3, r4
    b484:	33c8      	adds	r3, #200	; 0xc8
    b486:	781b      	ldrb	r3, [r3, #0]
    b488:	2b01      	cmp	r3, #1
    b48a:	d105      	bne.n	b498 <LORAWAN_Send+0xa4>
    b48c:	0023      	movs	r3, r4
    b48e:	3350      	adds	r3, #80	; 0x50
    b490:	781a      	ldrb	r2, [r3, #0]
    b492:	230e      	movs	r3, #14
    b494:	421a      	tst	r2, r3
    b496:	d1c2      	bne.n	b41e <LORAWAN_Send+0x2a>
    b498:	0023      	movs	r3, r4
    b49a:	33d0      	adds	r3, #208	; 0xd0
    b49c:	2f00      	cmp	r7, #0
    b49e:	d113      	bne.n	b4c8 <LORAWAN_Send+0xd4>
    b4a0:	2508      	movs	r5, #8
    b4a2:	601e      	str	r6, [r3, #0]
    b4a4:	2390      	movs	r3, #144	; 0x90
    b4a6:	2200      	movs	r2, #0
    b4a8:	005b      	lsls	r3, r3, #1
    b4aa:	54e2      	strb	r2, [r4, r3]
    b4ac:	2001      	movs	r0, #1
    b4ae:	4b0c      	ldr	r3, [pc, #48]	; (b4e0 <LORAWAN_Send+0xec>)
    b4b0:	4798      	blx	r3
    b4b2:	2320      	movs	r3, #32
    b4b4:	3460      	adds	r4, #96	; 0x60
    b4b6:	7822      	ldrb	r2, [r4, #0]
    b4b8:	4313      	orrs	r3, r2
    b4ba:	7023      	strb	r3, [r4, #0]
    b4bc:	e7b0      	b.n	b420 <LORAWAN_Send+0x2c>
    b4be:	4b09      	ldr	r3, [pc, #36]	; (b4e4 <LORAWAN_Send+0xf0>)
    b4c0:	4798      	blx	r3
    b4c2:	2808      	cmp	r0, #8
    b4c4:	d1ab      	bne.n	b41e <LORAWAN_Send+0x2a>
    b4c6:	e7dc      	b.n	b482 <LORAWAN_Send+0x8e>
    b4c8:	2200      	movs	r2, #0
    b4ca:	2511      	movs	r5, #17
    b4cc:	601a      	str	r2, [r3, #0]
    b4ce:	e7e9      	b.n	b4a4 <LORAWAN_Send+0xb0>
    b4d0:	20001908 	.word	0x20001908
    b4d4:	00008e5d 	.word	0x00008e5d
    b4d8:	0000adb5 	.word	0x0000adb5
    b4dc:	0000ae5d 	.word	0x0000ae5d
    b4e0:	0000eeb1 	.word	0x0000eeb1
    b4e4:	0000e909 	.word	0x0000e909

0000b4e8 <AutomaticReplyCallback>:
    b4e8:	b510      	push	{r4, lr}
    b4ea:	4c0d      	ldr	r4, [pc, #52]	; (b520 <AutomaticReplyCallback+0x38>)
    b4ec:	0023      	movs	r3, r4
    b4ee:	33c8      	adds	r3, #200	; 0xc8
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	2b01      	cmp	r3, #1
    b4f4:	d10e      	bne.n	b514 <AutomaticReplyCallback+0x2c>
    b4f6:	0022      	movs	r2, r4
    b4f8:	210e      	movs	r1, #14
    b4fa:	3250      	adds	r2, #80	; 0x50
    b4fc:	7813      	ldrb	r3, [r2, #0]
    b4fe:	438b      	bics	r3, r1
    b500:	7013      	strb	r3, [r2, #0]
    b502:	4b08      	ldr	r3, [pc, #32]	; (b524 <AutomaticReplyCallback+0x3c>)
    b504:	2000      	movs	r0, #0
    b506:	4798      	blx	r3
    b508:	2208      	movs	r2, #8
    b50a:	3460      	adds	r4, #96	; 0x60
    b50c:	7823      	ldrb	r3, [r4, #0]
    b50e:	4393      	bics	r3, r2
    b510:	7023      	strb	r3, [r4, #0]
    b512:	bd10      	pop	{r4, pc}
    b514:	2b04      	cmp	r3, #4
    b516:	d1f4      	bne.n	b502 <AutomaticReplyCallback+0x1a>
    b518:	4b03      	ldr	r3, [pc, #12]	; (b528 <AutomaticReplyCallback+0x40>)
    b51a:	4798      	blx	r3
    b51c:	e7f1      	b.n	b502 <AutomaticReplyCallback+0x1a>
    b51e:	46c0      	nop			; (mov r8, r8)
    b520:	20001908 	.word	0x20001908
    b524:	0000b3f5 	.word	0x0000b3f5
    b528:	0000f955 	.word	0x0000f955

0000b52c <LorawanLinkCheckConfigure>:
    b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b52e:	23fa      	movs	r3, #250	; 0xfa
    b530:	4c20      	ldr	r4, [pc, #128]	; (b5b4 <LorawanLinkCheckConfigure+0x88>)
    b532:	009b      	lsls	r3, r3, #2
    b534:	0025      	movs	r5, r4
    b536:	4343      	muls	r3, r0
    b538:	0006      	movs	r6, r0
    b53a:	2102      	movs	r1, #2
    b53c:	2000      	movs	r0, #0
    b53e:	4f1e      	ldr	r7, [pc, #120]	; (b5b8 <LorawanLinkCheckConfigure+0x8c>)
    b540:	65e3      	str	r3, [r4, #92]	; 0x5c
    b542:	3550      	adds	r5, #80	; 0x50
    b544:	47b8      	blx	r7
    b546:	2e00      	cmp	r6, #0
    b548:	d127      	bne.n	b59a <LorawanLinkCheckConfigure+0x6e>
    b54a:	0023      	movs	r3, r4
    b54c:	33bb      	adds	r3, #187	; 0xbb
    b54e:	7818      	ldrb	r0, [r3, #0]
    b550:	4b1a      	ldr	r3, [pc, #104]	; (b5bc <LorawanLinkCheckConfigure+0x90>)
    b552:	4798      	blx	r3
    b554:	2202      	movs	r2, #2
    b556:	786b      	ldrb	r3, [r5, #1]
    b558:	210b      	movs	r1, #11
    b55a:	4393      	bics	r3, r2
    b55c:	706b      	strb	r3, [r5, #1]
    b55e:	2001      	movs	r0, #1
    b560:	47b8      	blx	r7
    b562:	0023      	movs	r3, r4
    b564:	2701      	movs	r7, #1
    b566:	33ac      	adds	r3, #172	; 0xac
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	0030      	movs	r0, r6
    b56c:	0032      	movs	r2, r6
    b56e:	36ff      	adds	r6, #255	; 0xff
    b570:	429a      	cmp	r2, r3
    b572:	d304      	bcc.n	b57e <LorawanLinkCheckConfigure+0x52>
    b574:	2800      	cmp	r0, #0
    b576:	d001      	beq.n	b57c <LorawanLinkCheckConfigure+0x50>
    b578:	34ac      	adds	r4, #172	; 0xac
    b57a:	7023      	strb	r3, [r4, #0]
    b57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b57e:	2103      	movs	r1, #3
    b580:	4351      	muls	r1, r2
    b582:	1861      	adds	r1, r4, r1
    b584:	3165      	adds	r1, #101	; 0x65
    b586:	780d      	ldrb	r5, [r1, #0]
    b588:	2d02      	cmp	r5, #2
    b58a:	d103      	bne.n	b594 <LorawanLinkCheckConfigure+0x68>
    b58c:	0038      	movs	r0, r7
    b58e:	3b01      	subs	r3, #1
    b590:	700e      	strb	r6, [r1, #0]
    b592:	b2db      	uxtb	r3, r3
    b594:	3201      	adds	r2, #1
    b596:	b2d2      	uxtb	r2, r2
    b598:	e7ea      	b.n	b570 <LorawanLinkCheckConfigure+0x44>
    b59a:	2302      	movs	r3, #2
    b59c:	786a      	ldrb	r2, [r5, #1]
    b59e:	210b      	movs	r1, #11
    b5a0:	4313      	orrs	r3, r2
    b5a2:	706b      	strb	r3, [r5, #1]
    b5a4:	2001      	movs	r0, #1
    b5a6:	47b8      	blx	r7
    b5a8:	782b      	ldrb	r3, [r5, #0]
    b5aa:	07db      	lsls	r3, r3, #31
    b5ac:	d5e6      	bpl.n	b57c <LorawanLinkCheckConfigure+0x50>
    b5ae:	4b04      	ldr	r3, [pc, #16]	; (b5c0 <LorawanLinkCheckConfigure+0x94>)
    b5b0:	4798      	blx	r3
    b5b2:	e7e3      	b.n	b57c <LorawanLinkCheckConfigure+0x50>
    b5b4:	20001908 	.word	0x20001908
    b5b8:	00008e5d 	.word	0x00008e5d
    b5bc:	00009bf9 	.word	0x00009bf9
    b5c0:	0000b1ed 	.word	0x0000b1ed

0000b5c4 <UpdateCurrentDataRate>:
    b5c4:	b510      	push	{r4, lr}
    b5c6:	4b04      	ldr	r3, [pc, #16]	; (b5d8 <UpdateCurrentDataRate+0x14>)
    b5c8:	210c      	movs	r1, #12
    b5ca:	33b3      	adds	r3, #179	; 0xb3
    b5cc:	7018      	strb	r0, [r3, #0]
    b5ce:	2001      	movs	r0, #1
    b5d0:	4b02      	ldr	r3, [pc, #8]	; (b5dc <UpdateCurrentDataRate+0x18>)
    b5d2:	4798      	blx	r3
    b5d4:	bd10      	pop	{r4, pc}
    b5d6:	46c0      	nop			; (mov r8, r8)
    b5d8:	20001908 	.word	0x20001908
    b5dc:	00008e5d 	.word	0x00008e5d

0000b5e0 <UpdateDLSettings>:
    b5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b5e2:	466b      	mov	r3, sp
    b5e4:	1dde      	adds	r6, r3, #7
    b5e6:	1d9c      	adds	r4, r3, #6
    b5e8:	71d8      	strb	r0, [r3, #7]
    b5ea:	7021      	strb	r1, [r4, #0]
    b5ec:	2017      	movs	r0, #23
    b5ee:	0031      	movs	r1, r6
    b5f0:	4d0c      	ldr	r5, [pc, #48]	; (b624 <UpdateDLSettings+0x44>)
    b5f2:	47a8      	blx	r5
    b5f4:	2808      	cmp	r0, #8
    b5f6:	d107      	bne.n	b608 <UpdateDLSettings+0x28>
    b5f8:	4b0b      	ldr	r3, [pc, #44]	; (b628 <UpdateDLSettings+0x48>)
    b5fa:	7832      	ldrb	r2, [r6, #0]
    b5fc:	334e      	adds	r3, #78	; 0x4e
    b5fe:	701a      	strb	r2, [r3, #0]
    b600:	2100      	movs	r1, #0
    b602:	3807      	subs	r0, #7
    b604:	4b09      	ldr	r3, [pc, #36]	; (b62c <UpdateDLSettings+0x4c>)
    b606:	4798      	blx	r3
    b608:	0021      	movs	r1, r4
    b60a:	2018      	movs	r0, #24
    b60c:	47a8      	blx	r5
    b60e:	2808      	cmp	r0, #8
    b610:	d107      	bne.n	b622 <UpdateDLSettings+0x42>
    b612:	2101      	movs	r1, #1
    b614:	4b04      	ldr	r3, [pc, #16]	; (b628 <UpdateDLSettings+0x48>)
    b616:	7822      	ldrb	r2, [r4, #0]
    b618:	33c2      	adds	r3, #194	; 0xc2
    b61a:	701a      	strb	r2, [r3, #0]
    b61c:	0008      	movs	r0, r1
    b61e:	4b03      	ldr	r3, [pc, #12]	; (b62c <UpdateDLSettings+0x4c>)
    b620:	4798      	blx	r3
    b622:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    b624:	00008b95 	.word	0x00008b95
    b628:	20001908 	.word	0x20001908
    b62c:	00008e5d 	.word	0x00008e5d

0000b630 <UpdateTxPower>:
    b630:	b510      	push	{r4, lr}
    b632:	4b04      	ldr	r3, [pc, #16]	; (b644 <UpdateTxPower+0x14>)
    b634:	210a      	movs	r1, #10
    b636:	33b5      	adds	r3, #181	; 0xb5
    b638:	7018      	strb	r0, [r3, #0]
    b63a:	2000      	movs	r0, #0
    b63c:	4b02      	ldr	r3, [pc, #8]	; (b648 <UpdateTxPower+0x18>)
    b63e:	4798      	blx	r3
    b640:	bd10      	pop	{r4, pc}
    b642:	46c0      	nop			; (mov r8, r8)
    b644:	20001908 	.word	0x20001908
    b648:	00008e5d 	.word	0x00008e5d

0000b64c <UpdateRetransmissionAckTimeoutState>:
    b64c:	4b10      	ldr	r3, [pc, #64]	; (b690 <UpdateRetransmissionAckTimeoutState+0x44>)
    b64e:	b513      	push	{r0, r1, r4, lr}
    b650:	001a      	movs	r2, r3
    b652:	32c8      	adds	r2, #200	; 0xc8
    b654:	7812      	ldrb	r2, [r2, #0]
    b656:	2a01      	cmp	r2, #1
    b658:	d108      	bne.n	b66c <UpdateRetransmissionAckTimeoutState+0x20>
    b65a:	0018      	movs	r0, r3
    b65c:	210e      	movs	r1, #14
    b65e:	3050      	adds	r0, #80	; 0x50
    b660:	7802      	ldrb	r2, [r0, #0]
    b662:	438a      	bics	r2, r1
    b664:	0011      	movs	r1, r2
    b666:	220c      	movs	r2, #12
    b668:	430a      	orrs	r2, r1
    b66a:	7002      	strb	r2, [r0, #0]
    b66c:	001a      	movs	r2, r3
    b66e:	32a6      	adds	r2, #166	; 0xa6
    b670:	8811      	ldrh	r1, [r2, #0]
    b672:	222c      	movs	r2, #44	; 0x2c
    b674:	32ff      	adds	r2, #255	; 0xff
    b676:	5c9a      	ldrb	r2, [r3, r2]
    b678:	33bc      	adds	r3, #188	; 0xbc
    b67a:	1a8a      	subs	r2, r1, r2
    b67c:	21fa      	movs	r1, #250	; 0xfa
    b67e:	0089      	lsls	r1, r1, #2
    b680:	4351      	muls	r1, r2
    b682:	2200      	movs	r2, #0
    b684:	7818      	ldrb	r0, [r3, #0]
    b686:	4c03      	ldr	r4, [pc, #12]	; (b694 <UpdateRetransmissionAckTimeoutState+0x48>)
    b688:	9200      	str	r2, [sp, #0]
    b68a:	4b03      	ldr	r3, [pc, #12]	; (b698 <UpdateRetransmissionAckTimeoutState+0x4c>)
    b68c:	47a0      	blx	r4
    b68e:	bd13      	pop	{r0, r1, r4, pc}
    b690:	20001908 	.word	0x20001908
    b694:	000098f5 	.word	0x000098f5
    b698:	0000ceb9 	.word	0x0000ceb9

0000b69c <UpdateReceiveWindow2Parameters>:
    b69c:	4b06      	ldr	r3, [pc, #24]	; (b6b8 <UpdateReceiveWindow2Parameters+0x1c>)
    b69e:	b510      	push	{r4, lr}
    b6a0:	001a      	movs	r2, r3
    b6a2:	334a      	adds	r3, #74	; 0x4a
    b6a4:	8018      	strh	r0, [r3, #0]
    b6a6:	324e      	adds	r2, #78	; 0x4e
    b6a8:	0c00      	lsrs	r0, r0, #16
    b6aa:	8058      	strh	r0, [r3, #2]
    b6ac:	7011      	strb	r1, [r2, #0]
    b6ae:	2001      	movs	r0, #1
    b6b0:	2100      	movs	r1, #0
    b6b2:	4b02      	ldr	r3, [pc, #8]	; (b6bc <UpdateReceiveWindow2Parameters+0x20>)
    b6b4:	4798      	blx	r3
    b6b6:	bd10      	pop	{r4, pc}
    b6b8:	20001908 	.word	0x20001908
    b6bc:	00008e5d 	.word	0x00008e5d

0000b6c0 <ResetParametersForConfirmedTransmission>:
    b6c0:	4b0a      	ldr	r3, [pc, #40]	; (b6ec <ResetParametersForConfirmedTransmission+0x2c>)
    b6c2:	001a      	movs	r2, r3
    b6c4:	32c8      	adds	r2, #200	; 0xc8
    b6c6:	7812      	ldrb	r2, [r2, #0]
    b6c8:	2a01      	cmp	r2, #1
    b6ca:	d105      	bne.n	b6d8 <ResetParametersForConfirmedTransmission+0x18>
    b6cc:	0019      	movs	r1, r3
    b6ce:	200e      	movs	r0, #14
    b6d0:	3150      	adds	r1, #80	; 0x50
    b6d2:	780a      	ldrb	r2, [r1, #0]
    b6d4:	4382      	bics	r2, r0
    b6d6:	700a      	strb	r2, [r1, #0]
    b6d8:	001a      	movs	r2, r3
    b6da:	2100      	movs	r1, #0
    b6dc:	3360      	adds	r3, #96	; 0x60
    b6de:	32b0      	adds	r2, #176	; 0xb0
    b6e0:	7011      	strb	r1, [r2, #0]
    b6e2:	781a      	ldrb	r2, [r3, #0]
    b6e4:	3101      	adds	r1, #1
    b6e6:	438a      	bics	r2, r1
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	4770      	bx	lr
    b6ec:	20001908 	.word	0x20001908

0000b6f0 <ResetParametersForUnconfirmedTransmission>:
    b6f0:	4b07      	ldr	r3, [pc, #28]	; (b710 <ResetParametersForUnconfirmedTransmission+0x20>)
    b6f2:	001a      	movs	r2, r3
    b6f4:	32c8      	adds	r2, #200	; 0xc8
    b6f6:	7812      	ldrb	r2, [r2, #0]
    b6f8:	2a01      	cmp	r2, #1
    b6fa:	d105      	bne.n	b708 <ResetParametersForUnconfirmedTransmission+0x18>
    b6fc:	0019      	movs	r1, r3
    b6fe:	200e      	movs	r0, #14
    b700:	3150      	adds	r1, #80	; 0x50
    b702:	780a      	ldrb	r2, [r1, #0]
    b704:	4382      	bics	r2, r0
    b706:	700a      	strb	r2, [r1, #0]
    b708:	2200      	movs	r2, #0
    b70a:	33af      	adds	r3, #175	; 0xaf
    b70c:	701a      	strb	r2, [r3, #0]
    b70e:	4770      	bx	lr
    b710:	20001908 	.word	0x20001908

0000b714 <SetJoinFailState>:
    b714:	b570      	push	{r4, r5, r6, lr}
    b716:	4c11      	ldr	r4, [pc, #68]	; (b75c <SetJoinFailState+0x48>)
    b718:	2504      	movs	r5, #4
    b71a:	0020      	movs	r0, r4
    b71c:	3060      	adds	r0, #96	; 0x60
    b71e:	7802      	ldrb	r2, [r0, #0]
    b720:	0021      	movs	r1, r4
    b722:	43aa      	bics	r2, r5
    b724:	7002      	strb	r2, [r0, #0]
    b726:	22f0      	movs	r2, #240	; 0xf0
    b728:	3150      	adds	r1, #80	; 0x50
    b72a:	780b      	ldrb	r3, [r1, #0]
    b72c:	4013      	ands	r3, r2
    b72e:	700b      	strb	r3, [r1, #0]
    b730:	490b      	ldr	r1, [pc, #44]	; (b760 <SetJoinFailState+0x4c>)
    b732:	794a      	ldrb	r2, [r1, #5]
    b734:	790b      	ldrb	r3, [r1, #4]
    b736:	0212      	lsls	r2, r2, #8
    b738:	431a      	orrs	r2, r3
    b73a:	798b      	ldrb	r3, [r1, #6]
    b73c:	041b      	lsls	r3, r3, #16
    b73e:	431a      	orrs	r2, r3
    b740:	79cb      	ldrb	r3, [r1, #7]
    b742:	061b      	lsls	r3, r3, #24
    b744:	4313      	orrs	r3, r2
    b746:	d001      	beq.n	b74c <SetJoinFailState+0x38>
    b748:	2000      	movs	r0, #0
    b74a:	4798      	blx	r3
    b74c:	2300      	movs	r3, #0
    b74e:	34c4      	adds	r4, #196	; 0xc4
    b750:	7023      	strb	r3, [r4, #0]
    b752:	210b      	movs	r1, #11
    b754:	4b03      	ldr	r3, [pc, #12]	; (b764 <SetJoinFailState+0x50>)
    b756:	2001      	movs	r0, #1
    b758:	4798      	blx	r3
    b75a:	bd70      	pop	{r4, r5, r6, pc}
    b75c:	20001908 	.word	0x20001908
    b760:	20001b48 	.word	0x20001b48
    b764:	00008e5d 	.word	0x00008e5d

0000b768 <ExecuteRxParamSetupReq>:
    b768:	b5f0      	push	{r4, r5, r6, r7, lr}
    b76a:	b085      	sub	sp, #20
    b76c:	7805      	ldrb	r5, [r0, #0]
    b76e:	0004      	movs	r4, r0
    b770:	1c41      	adds	r1, r0, #1
    b772:	2204      	movs	r2, #4
    b774:	4b36      	ldr	r3, [pc, #216]	; (b850 <ExecuteRxParamSetupReq+0xe8>)
    b776:	a803      	add	r0, sp, #12
    b778:	4798      	blx	r3
    b77a:	2264      	movs	r2, #100	; 0x64
    b77c:	9b03      	ldr	r3, [sp, #12]
    b77e:	a903      	add	r1, sp, #12
    b780:	021b      	lsls	r3, r3, #8
    b782:	0a1b      	lsrs	r3, r3, #8
    b784:	4353      	muls	r3, r2
    b786:	9303      	str	r3, [sp, #12]
    b788:	1d23      	adds	r3, r4, #4
    b78a:	9301      	str	r3, [sp, #4]
    b78c:	072b      	lsls	r3, r5, #28
    b78e:	0f1b      	lsrs	r3, r3, #28
    b790:	b2da      	uxtb	r2, r3
    b792:	9200      	str	r2, [sp, #0]
    b794:	aa02      	add	r2, sp, #8
    b796:	1c96      	adds	r6, r2, #2
    b798:	066d      	lsls	r5, r5, #25
    b79a:	7033      	strb	r3, [r6, #0]
    b79c:	1cd7      	adds	r7, r2, #3
    b79e:	0f6d      	lsrs	r5, r5, #29
    b7a0:	2001      	movs	r0, #1
    b7a2:	4b2c      	ldr	r3, [pc, #176]	; (b854 <ExecuteRxParamSetupReq+0xec>)
    b7a4:	703d      	strb	r5, [r7, #0]
    b7a6:	4798      	blx	r3
    b7a8:	4c2b      	ldr	r4, [pc, #172]	; (b858 <ExecuteRxParamSetupReq+0xf0>)
    b7aa:	2808      	cmp	r0, #8
    b7ac:	d109      	bne.n	b7c2 <ExecuteRxParamSetupReq+0x5a>
    b7ae:	0023      	movs	r3, r4
    b7b0:	33ac      	adds	r3, #172	; 0xac
    b7b2:	781a      	ldrb	r2, [r3, #0]
    b7b4:	2303      	movs	r3, #3
    b7b6:	4353      	muls	r3, r2
    b7b8:	18e3      	adds	r3, r4, r3
    b7ba:	3360      	adds	r3, #96	; 0x60
    b7bc:	799a      	ldrb	r2, [r3, #6]
    b7be:	4310      	orrs	r0, r2
    b7c0:	7198      	strb	r0, [r3, #6]
    b7c2:	0031      	movs	r1, r6
    b7c4:	200f      	movs	r0, #15
    b7c6:	4e23      	ldr	r6, [pc, #140]	; (b854 <ExecuteRxParamSetupReq+0xec>)
    b7c8:	47b0      	blx	r6
    b7ca:	2808      	cmp	r0, #8
    b7cc:	d10a      	bne.n	b7e4 <ExecuteRxParamSetupReq+0x7c>
    b7ce:	0023      	movs	r3, r4
    b7d0:	33ac      	adds	r3, #172	; 0xac
    b7d2:	781a      	ldrb	r2, [r3, #0]
    b7d4:	2303      	movs	r3, #3
    b7d6:	4353      	muls	r3, r2
    b7d8:	2210      	movs	r2, #16
    b7da:	18e3      	adds	r3, r4, r3
    b7dc:	3360      	adds	r3, #96	; 0x60
    b7de:	7999      	ldrb	r1, [r3, #6]
    b7e0:	430a      	orrs	r2, r1
    b7e2:	719a      	strb	r2, [r3, #6]
    b7e4:	0039      	movs	r1, r7
    b7e6:	2018      	movs	r0, #24
    b7e8:	47b0      	blx	r6
    b7ea:	2808      	cmp	r0, #8
    b7ec:	d10a      	bne.n	b804 <ExecuteRxParamSetupReq+0x9c>
    b7ee:	0023      	movs	r3, r4
    b7f0:	33ac      	adds	r3, #172	; 0xac
    b7f2:	781a      	ldrb	r2, [r3, #0]
    b7f4:	2303      	movs	r3, #3
    b7f6:	4353      	muls	r3, r2
    b7f8:	2220      	movs	r2, #32
    b7fa:	18e3      	adds	r3, r4, r3
    b7fc:	3360      	adds	r3, #96	; 0x60
    b7fe:	7999      	ldrb	r1, [r3, #6]
    b800:	430a      	orrs	r2, r1
    b802:	719a      	strb	r2, [r3, #6]
    b804:	0023      	movs	r3, r4
    b806:	33ac      	adds	r3, #172	; 0xac
    b808:	781a      	ldrb	r2, [r3, #0]
    b80a:	2303      	movs	r3, #3
    b80c:	4353      	muls	r3, r2
    b80e:	18e3      	adds	r3, r4, r3
    b810:	3360      	adds	r3, #96	; 0x60
    b812:	799e      	ldrb	r6, [r3, #6]
    b814:	06f3      	lsls	r3, r6, #27
    b816:	d518      	bpl.n	b84a <ExecuteRxParamSetupReq+0xe2>
    b818:	0733      	lsls	r3, r6, #28
    b81a:	d516      	bpl.n	b84a <ExecuteRxParamSetupReq+0xe2>
    b81c:	06b6      	lsls	r6, r6, #26
    b81e:	0ff6      	lsrs	r6, r6, #31
    b820:	2e01      	cmp	r6, #1
    b822:	d112      	bne.n	b84a <ExecuteRxParamSetupReq+0xe2>
    b824:	0023      	movs	r3, r4
    b826:	33c2      	adds	r3, #194	; 0xc2
    b828:	701d      	strb	r5, [r3, #0]
    b82a:	0031      	movs	r1, r6
    b82c:	0030      	movs	r0, r6
    b82e:	4d0b      	ldr	r5, [pc, #44]	; (b85c <ExecuteRxParamSetupReq+0xf4>)
    b830:	47a8      	blx	r5
    b832:	9900      	ldr	r1, [sp, #0]
    b834:	9803      	ldr	r0, [sp, #12]
    b836:	4b0a      	ldr	r3, [pc, #40]	; (b860 <ExecuteRxParamSetupReq+0xf8>)
    b838:	4798      	blx	r3
    b83a:	2340      	movs	r3, #64	; 0x40
    b83c:	3450      	adds	r4, #80	; 0x50
    b83e:	7862      	ldrb	r2, [r4, #1]
    b840:	210b      	movs	r1, #11
    b842:	4313      	orrs	r3, r2
    b844:	7063      	strb	r3, [r4, #1]
    b846:	0030      	movs	r0, r6
    b848:	47a8      	blx	r5
    b84a:	9801      	ldr	r0, [sp, #4]
    b84c:	b005      	add	sp, #20
    b84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b850:	00013ba5 	.word	0x00013ba5
    b854:	00008b95 	.word	0x00008b95
    b858:	20001908 	.word	0x20001908
    b85c:	00008e5d 	.word	0x00008e5d
    b860:	0000b69d 	.word	0x0000b69d

0000b864 <ExecuteDutyCycle>:
    b864:	b570      	push	{r4, r5, r6, lr}
    b866:	7803      	ldrb	r3, [r0, #0]
    b868:	1c46      	adds	r6, r0, #1
    b86a:	2b0f      	cmp	r3, #15
    b86c:	d80f      	bhi.n	b88e <ExecuteDutyCycle+0x2a>
    b86e:	4c09      	ldr	r4, [pc, #36]	; (b894 <ExecuteDutyCycle+0x30>)
    b870:	210b      	movs	r1, #11
    b872:	0022      	movs	r2, r4
    b874:	2000      	movs	r0, #0
    b876:	3264      	adds	r2, #100	; 0x64
    b878:	4d07      	ldr	r5, [pc, #28]	; (b898 <ExecuteDutyCycle+0x34>)
    b87a:	7013      	strb	r3, [r2, #0]
    b87c:	47a8      	blx	r5
    b87e:	2320      	movs	r3, #32
    b880:	3450      	adds	r4, #80	; 0x50
    b882:	7862      	ldrb	r2, [r4, #1]
    b884:	210b      	movs	r1, #11
    b886:	4313      	orrs	r3, r2
    b888:	7063      	strb	r3, [r4, #1]
    b88a:	2001      	movs	r0, #1
    b88c:	47a8      	blx	r5
    b88e:	0030      	movs	r0, r6
    b890:	bd70      	pop	{r4, r5, r6, pc}
    b892:	46c0      	nop			; (mov r8, r8)
    b894:	20001908 	.word	0x20001908
    b898:	00008e5d 	.word	0x00008e5d

0000b89c <ExecuteDlChannel>:
    b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b89e:	b089      	sub	sp, #36	; 0x24
    b8a0:	7805      	ldrb	r5, [r0, #0]
    b8a2:	ab02      	add	r3, sp, #8
    b8a4:	1c41      	adds	r1, r0, #1
    b8a6:	0007      	movs	r7, r0
    b8a8:	719d      	strb	r5, [r3, #6]
    b8aa:	1d9e      	adds	r6, r3, #6
    b8ac:	2204      	movs	r2, #4
    b8ae:	4b23      	ldr	r3, [pc, #140]	; (b93c <ExecuteDlChannel+0xa0>)
    b8b0:	a805      	add	r0, sp, #20
    b8b2:	4798      	blx	r3
    b8b4:	9b05      	ldr	r3, [sp, #20]
    b8b6:	a904      	add	r1, sp, #16
    b8b8:	021c      	lsls	r4, r3, #8
    b8ba:	2364      	movs	r3, #100	; 0x64
    b8bc:	0a24      	lsrs	r4, r4, #8
    b8be:	435c      	muls	r4, r3
    b8c0:	1d3b      	adds	r3, r7, #4
    b8c2:	9301      	str	r3, [sp, #4]
    b8c4:	2301      	movs	r3, #1
    b8c6:	2015      	movs	r0, #21
    b8c8:	704b      	strb	r3, [r1, #1]
    b8ca:	4b1d      	ldr	r3, [pc, #116]	; (b940 <ExecuteDlChannel+0xa4>)
    b8cc:	9405      	str	r4, [sp, #20]
    b8ce:	700d      	strb	r5, [r1, #0]
    b8d0:	4798      	blx	r3
    b8d2:	2808      	cmp	r0, #8
    b8d4:	d12f      	bne.n	b936 <ExecuteDlChannel+0x9a>
    b8d6:	ab02      	add	r3, sp, #8
    b8d8:	1ddd      	adds	r5, r3, #7
    b8da:	2300      	movs	r3, #0
    b8dc:	702b      	strb	r3, [r5, #0]
    b8de:	7833      	ldrb	r3, [r6, #0]
    b8e0:	af06      	add	r7, sp, #24
    b8e2:	713b      	strb	r3, [r7, #4]
    b8e4:	002a      	movs	r2, r5
    b8e6:	0031      	movs	r1, r6
    b8e8:	300e      	adds	r0, #14
    b8ea:	4b16      	ldr	r3, [pc, #88]	; (b944 <ExecuteDlChannel+0xa8>)
    b8ec:	9406      	str	r4, [sp, #24]
    b8ee:	4798      	blx	r3
    b8f0:	280a      	cmp	r0, #10
    b8f2:	d00d      	beq.n	b910 <ExecuteDlChannel+0x74>
    b8f4:	782a      	ldrb	r2, [r5, #0]
    b8f6:	2a01      	cmp	r2, #1
    b8f8:	d10a      	bne.n	b910 <ExecuteDlChannel+0x74>
    b8fa:	4b13      	ldr	r3, [pc, #76]	; (b948 <ExecuteDlChannel+0xac>)
    b8fc:	0019      	movs	r1, r3
    b8fe:	31ac      	adds	r1, #172	; 0xac
    b900:	7808      	ldrb	r0, [r1, #0]
    b902:	2103      	movs	r1, #3
    b904:	4341      	muls	r1, r0
    b906:	185b      	adds	r3, r3, r1
    b908:	3360      	adds	r3, #96	; 0x60
    b90a:	79d9      	ldrb	r1, [r3, #7]
    b90c:	430a      	orrs	r2, r1
    b90e:	71da      	strb	r2, [r3, #7]
    b910:	0039      	movs	r1, r7
    b912:	2032      	movs	r0, #50	; 0x32
    b914:	4b0d      	ldr	r3, [pc, #52]	; (b94c <ExecuteDlChannel+0xb0>)
    b916:	4798      	blx	r3
    b918:	2808      	cmp	r0, #8
    b91a:	d10c      	bne.n	b936 <ExecuteDlChannel+0x9a>
    b91c:	4b0a      	ldr	r3, [pc, #40]	; (b948 <ExecuteDlChannel+0xac>)
    b91e:	001a      	movs	r2, r3
    b920:	32ac      	adds	r2, #172	; 0xac
    b922:	7811      	ldrb	r1, [r2, #0]
    b924:	2203      	movs	r2, #3
    b926:	434a      	muls	r2, r1
    b928:	189b      	adds	r3, r3, r2
    b92a:	2280      	movs	r2, #128	; 0x80
    b92c:	3360      	adds	r3, #96	; 0x60
    b92e:	7999      	ldrb	r1, [r3, #6]
    b930:	4252      	negs	r2, r2
    b932:	430a      	orrs	r2, r1
    b934:	719a      	strb	r2, [r3, #6]
    b936:	9801      	ldr	r0, [sp, #4]
    b938:	b009      	add	sp, #36	; 0x24
    b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b93c:	00013ba5 	.word	0x00013ba5
    b940:	00008b95 	.word	0x00008b95
    b944:	00008b79 	.word	0x00008b79
    b948:	20001908 	.word	0x20001908
    b94c:	00008bb1 	.word	0x00008bb1

0000b950 <ExecuteTxParamSetup>:
    b950:	220f      	movs	r2, #15
    b952:	b513      	push	{r0, r1, r4, lr}
    b954:	7803      	ldrb	r3, [r0, #0]
    b956:	4c0f      	ldr	r4, [pc, #60]	; (b994 <ExecuteTxParamSetup+0x44>)
    b958:	401a      	ands	r2, r3
    b95a:	5ca2      	ldrb	r2, [r4, r2]
    b95c:	2401      	movs	r4, #1
    b95e:	a901      	add	r1, sp, #4
    b960:	700a      	strb	r2, [r1, #0]
    b962:	111a      	asrs	r2, r3, #4
    b964:	115b      	asrs	r3, r3, #5
    b966:	4023      	ands	r3, r4
    b968:	40a3      	lsls	r3, r4
    b96a:	4022      	ands	r2, r4
    b96c:	4313      	orrs	r3, r2
    b96e:	704b      	strb	r3, [r1, #1]
    b970:	1904      	adds	r4, r0, r4
    b972:	4b09      	ldr	r3, [pc, #36]	; (b998 <ExecuteTxParamSetup+0x48>)
    b974:	2033      	movs	r0, #51	; 0x33
    b976:	4798      	blx	r3
    b978:	2808      	cmp	r0, #8
    b97a:	d009      	beq.n	b990 <ExecuteTxParamSetup+0x40>
    b97c:	4b07      	ldr	r3, [pc, #28]	; (b99c <ExecuteTxParamSetup+0x4c>)
    b97e:	001a      	movs	r2, r3
    b980:	32ac      	adds	r2, #172	; 0xac
    b982:	7811      	ldrb	r1, [r2, #0]
    b984:	2203      	movs	r2, #3
    b986:	434a      	muls	r2, r1
    b988:	189b      	adds	r3, r3, r2
    b98a:	22ff      	movs	r2, #255	; 0xff
    b98c:	3365      	adds	r3, #101	; 0x65
    b98e:	701a      	strb	r2, [r3, #0]
    b990:	0020      	movs	r0, r4
    b992:	bd16      	pop	{r1, r2, r4, pc}
    b994:	0001ad2d 	.word	0x0001ad2d
    b998:	00008bb1 	.word	0x00008bb1
    b99c:	20001908 	.word	0x20001908

0000b9a0 <ExecuteLinkAdr>:
    b9a0:	220f      	movs	r2, #15
    b9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9a4:	0005      	movs	r5, r0
    b9a6:	7803      	ldrb	r3, [r0, #0]
    b9a8:	b087      	sub	sp, #28
    b9aa:	401a      	ands	r2, r3
    b9ac:	a903      	add	r1, sp, #12
    b9ae:	700a      	strb	r2, [r1, #0]
    b9b0:	aa02      	add	r2, sp, #8
    b9b2:	1d94      	adds	r4, r2, #6
    b9b4:	1d57      	adds	r7, r2, #5
    b9b6:	091b      	lsrs	r3, r3, #4
    b9b8:	1c41      	adds	r1, r0, #1
    b9ba:	703b      	strb	r3, [r7, #0]
    b9bc:	2202      	movs	r2, #2
    b9be:	0020      	movs	r0, r4
    b9c0:	4b3e      	ldr	r3, [pc, #248]	; (babc <ExecuteLinkAdr+0x11c>)
    b9c2:	4798      	blx	r3
    b9c4:	466a      	mov	r2, sp
    b9c6:	1d2b      	adds	r3, r5, #4
    b9c8:	9301      	str	r3, [sp, #4]
    b9ca:	8823      	ldrh	r3, [r4, #0]
    b9cc:	2424      	movs	r4, #36	; 0x24
    b9ce:	2101      	movs	r1, #1
    b9d0:	9300      	str	r3, [sp, #0]
    b9d2:	8812      	ldrh	r2, [r2, #0]
    b9d4:	ab02      	add	r3, sp, #8
    b9d6:	815a      	strh	r2, [r3, #10]
    b9d8:	78ea      	ldrb	r2, [r5, #3]
    b9da:	4e39      	ldr	r6, [pc, #228]	; (bac0 <ExecuteLinkAdr+0x120>)
    b9dc:	0652      	lsls	r2, r2, #25
    b9de:	0f52      	lsrs	r2, r2, #29
    b9e0:	34ff      	adds	r4, #255	; 0xff
    b9e2:	721a      	strb	r2, [r3, #8]
    b9e4:	5d33      	ldrb	r3, [r6, r4]
    b9e6:	2036      	movs	r0, #54	; 0x36
    b9e8:	438b      	bics	r3, r1
    b9ea:	1849      	adds	r1, r1, r1
    b9ec:	438b      	bics	r3, r1
    b9ee:	3102      	adds	r1, #2
    b9f0:	438b      	bics	r3, r1
    b9f2:	5533      	strb	r3, [r6, r4]
    b9f4:	466b      	mov	r3, sp
    b9f6:	881b      	ldrh	r3, [r3, #0]
    b9f8:	a905      	add	r1, sp, #20
    b9fa:	804b      	strh	r3, [r1, #2]
    b9fc:	4b31      	ldr	r3, [pc, #196]	; (bac4 <ExecuteLinkAdr+0x124>)
    b9fe:	700a      	strb	r2, [r1, #0]
    ba00:	4798      	blx	r3
    ba02:	2808      	cmp	r0, #8
    ba04:	d11c      	bne.n	ba40 <ExecuteLinkAdr+0xa0>
    ba06:	2201      	movs	r2, #1
    ba08:	5d33      	ldrb	r3, [r6, r4]
    ba0a:	a904      	add	r1, sp, #16
    ba0c:	4313      	orrs	r3, r2
    ba0e:	5533      	strb	r3, [r6, r4]
    ba10:	aa02      	add	r2, sp, #8
    ba12:	4b2d      	ldr	r3, [pc, #180]	; (bac8 <ExecuteLinkAdr+0x128>)
    ba14:	300b      	adds	r0, #11
    ba16:	4798      	blx	r3
    ba18:	0039      	movs	r1, r7
    ba1a:	2010      	movs	r0, #16
    ba1c:	4b29      	ldr	r3, [pc, #164]	; (bac4 <ExecuteLinkAdr+0x124>)
    ba1e:	4798      	blx	r3
    ba20:	2808      	cmp	r0, #8
    ba22:	d10d      	bne.n	ba40 <ExecuteLinkAdr+0xa0>
    ba24:	ab02      	add	r3, sp, #8
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	7839      	ldrb	r1, [r7, #0]
    ba2a:	071a      	lsls	r2, r3, #28
    ba2c:	0f12      	lsrs	r2, r2, #28
    ba2e:	4291      	cmp	r1, r2
    ba30:	db06      	blt.n	ba40 <ExecuteLinkAdr+0xa0>
    ba32:	091b      	lsrs	r3, r3, #4
    ba34:	4299      	cmp	r1, r3
    ba36:	dc03      	bgt.n	ba40 <ExecuteLinkAdr+0xa0>
    ba38:	2202      	movs	r2, #2
    ba3a:	5d33      	ldrb	r3, [r6, r4]
    ba3c:	4313      	orrs	r3, r2
    ba3e:	5533      	strb	r3, [r6, r4]
    ba40:	ae03      	add	r6, sp, #12
    ba42:	4b20      	ldr	r3, [pc, #128]	; (bac4 <ExecuteLinkAdr+0x124>)
    ba44:	0031      	movs	r1, r6
    ba46:	201d      	movs	r0, #29
    ba48:	4798      	blx	r3
    ba4a:	4b1d      	ldr	r3, [pc, #116]	; (bac0 <ExecuteLinkAdr+0x120>)
    ba4c:	2808      	cmp	r0, #8
    ba4e:	d103      	bne.n	ba58 <ExecuteLinkAdr+0xb8>
    ba50:	2204      	movs	r2, #4
    ba52:	5d19      	ldrb	r1, [r3, r4]
    ba54:	430a      	orrs	r2, r1
    ba56:	551a      	strb	r2, [r3, r4]
    ba58:	2207      	movs	r2, #7
    ba5a:	5d18      	ldrb	r0, [r3, r4]
    ba5c:	4010      	ands	r0, r2
    ba5e:	4290      	cmp	r0, r2
    ba60:	d122      	bne.n	baa8 <ExecuteLinkAdr+0x108>
    ba62:	001a      	movs	r2, r3
    ba64:	4669      	mov	r1, sp
    ba66:	3228      	adds	r2, #40	; 0x28
    ba68:	7809      	ldrb	r1, [r1, #0]
    ba6a:	32ff      	adds	r2, #255	; 0xff
    ba6c:	7011      	strb	r1, [r2, #0]
    ba6e:	9900      	ldr	r1, [sp, #0]
    ba70:	2470      	movs	r4, #112	; 0x70
    ba72:	0a09      	lsrs	r1, r1, #8
    ba74:	7051      	strb	r1, [r2, #1]
    ba76:	2292      	movs	r2, #146	; 0x92
    ba78:	7839      	ldrb	r1, [r7, #0]
    ba7a:	0052      	lsls	r2, r2, #1
    ba7c:	5499      	strb	r1, [r3, r2]
    ba7e:	212a      	movs	r1, #42	; 0x2a
    ba80:	78ea      	ldrb	r2, [r5, #3]
    ba82:	31ff      	adds	r1, #255	; 0xff
    ba84:	0912      	lsrs	r2, r2, #4
    ba86:	4002      	ands	r2, r0
    ba88:	5c58      	ldrb	r0, [r3, r1]
    ba8a:	0112      	lsls	r2, r2, #4
    ba8c:	43a0      	bics	r0, r4
    ba8e:	4302      	orrs	r2, r0
    ba90:	545a      	strb	r2, [r3, r1]
    ba92:	78e8      	ldrb	r0, [r5, #3]
    ba94:	3c61      	subs	r4, #97	; 0x61
    ba96:	b2d2      	uxtb	r2, r2
    ba98:	4020      	ands	r0, r4
    ba9a:	43a2      	bics	r2, r4
    ba9c:	4302      	orrs	r2, r0
    ba9e:	545a      	strb	r2, [r3, r1]
    baa0:	2226      	movs	r2, #38	; 0x26
    baa2:	7831      	ldrb	r1, [r6, #0]
    baa4:	32ff      	adds	r2, #255	; 0xff
    baa6:	5499      	strb	r1, [r3, r2]
    baa8:	2293      	movs	r2, #147	; 0x93
    baaa:	4905      	ldr	r1, [pc, #20]	; (bac0 <ExecuteLinkAdr+0x120>)
    baac:	0052      	lsls	r2, r2, #1
    baae:	5c8b      	ldrb	r3, [r1, r2]
    bab0:	9801      	ldr	r0, [sp, #4]
    bab2:	3301      	adds	r3, #1
    bab4:	548b      	strb	r3, [r1, r2]
    bab6:	b007      	add	sp, #28
    bab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baba:	46c0      	nop			; (mov r8, r8)
    babc:	00013ba5 	.word	0x00013ba5
    bac0:	20001908 	.word	0x20001908
    bac4:	00008b95 	.word	0x00008b95
    bac8:	00008b79 	.word	0x00008b79

0000bacc <PrepareJoinRequestFrame>:
    bacc:	2210      	movs	r2, #16
    bace:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bad0:	4d1b      	ldr	r5, [pc, #108]	; (bb40 <PrepareJoinRequestFrame+0x74>)
    bad2:	4b1c      	ldr	r3, [pc, #112]	; (bb44 <PrepareJoinRequestFrame+0x78>)
    bad4:	32ff      	adds	r2, #255	; 0xff
    bad6:	2100      	movs	r1, #0
    bad8:	0028      	movs	r0, r5
    bada:	4798      	blx	r3
    badc:	2300      	movs	r3, #0
    bade:	203c      	movs	r0, #60	; 0x3c
    bae0:	4c19      	ldr	r4, [pc, #100]	; (bb48 <PrepareJoinRequestFrame+0x7c>)
    bae2:	702b      	strb	r3, [r5, #0]
    bae4:	1ac1      	subs	r1, r0, r3
    bae6:	5c61      	ldrb	r1, [r4, r1]
    bae8:	18ea      	adds	r2, r5, r3
    baea:	3301      	adds	r3, #1
    baec:	7051      	strb	r1, [r2, #1]
    baee:	2b08      	cmp	r3, #8
    baf0:	d1f8      	bne.n	bae4 <PrepareJoinRequestFrame+0x18>
    baf2:	2300      	movs	r3, #0
    baf4:	2044      	movs	r0, #68	; 0x44
    baf6:	1ac1      	subs	r1, r0, r3
    baf8:	5c61      	ldrb	r1, [r4, r1]
    bafa:	18ea      	adds	r2, r5, r3
    bafc:	3301      	adds	r3, #1
    bafe:	7251      	strb	r1, [r2, #9]
    bb00:	2b08      	cmp	r3, #8
    bb02:	d1f8      	bne.n	baf6 <PrepareJoinRequestFrame+0x2a>
    bb04:	4b11      	ldr	r3, [pc, #68]	; (bb4c <PrepareJoinRequestFrame+0x80>)
    bb06:	4798      	blx	r3
    bb08:	4b11      	ldr	r3, [pc, #68]	; (bb50 <PrepareJoinRequestFrame+0x84>)
    bb0a:	4912      	ldr	r1, [pc, #72]	; (bb54 <PrepareJoinRequestFrame+0x88>)
    bb0c:	4798      	blx	r3
    bb0e:	3498      	adds	r4, #152	; 0x98
    bb10:	8021      	strh	r1, [r4, #0]
    bb12:	2202      	movs	r2, #2
    bb14:	0021      	movs	r1, r4
    bb16:	4810      	ldr	r0, [pc, #64]	; (bb58 <PrepareJoinRequestFrame+0x8c>)
    bb18:	4c10      	ldr	r4, [pc, #64]	; (bb5c <PrepareJoinRequestFrame+0x90>)
    bb1a:	47a0      	blx	r4
    bb1c:	4e10      	ldr	r6, [pc, #64]	; (bb60 <PrepareJoinRequestFrame+0x94>)
    bb1e:	2313      	movs	r3, #19
    bb20:	0031      	movs	r1, r6
    bb22:	002a      	movs	r2, r5
    bb24:	480f      	ldr	r0, [pc, #60]	; (bb64 <PrepareJoinRequestFrame+0x98>)
    bb26:	4d10      	ldr	r5, [pc, #64]	; (bb68 <PrepareJoinRequestFrame+0x9c>)
    bb28:	47a8      	blx	r5
    bb2a:	0031      	movs	r1, r6
    bb2c:	2204      	movs	r2, #4
    bb2e:	a801      	add	r0, sp, #4
    bb30:	47a0      	blx	r4
    bb32:	2204      	movs	r2, #4
    bb34:	a901      	add	r1, sp, #4
    bb36:	480d      	ldr	r0, [pc, #52]	; (bb6c <PrepareJoinRequestFrame+0xa0>)
    bb38:	47a0      	blx	r4
    bb3a:	2017      	movs	r0, #23
    bb3c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    bb3e:	46c0      	nop			; (mov r8, r8)
    bb40:	20001a35 	.word	0x20001a35
    bb44:	00013c29 	.word	0x00013c29
    bb48:	20001908 	.word	0x20001908
    bb4c:	00013da9 	.word	0x00013da9
    bb50:	00010c9d 	.word	0x00010c9d
    bb54:	0000ffff 	.word	0x0000ffff
    bb58:	20001a46 	.word	0x20001a46
    bb5c:	00013ba5 	.word	0x00013ba5
    bb60:	20000f24 	.word	0x20000f24
    bb64:	2000192d 	.word	0x2000192d
    bb68:	0000e779 	.word	0x0000e779
    bb6c:	20001a48 	.word	0x20001a48

0000bb70 <ConfigureRadioRx>:
    bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb72:	b087      	sub	sp, #28
    bb74:	466b      	mov	r3, sp
    bb76:	2600      	movs	r6, #0
    bb78:	1ddc      	adds	r4, r3, #7
    bb7a:	71d8      	strb	r0, [r3, #7]
    bb7c:	729e      	strb	r6, [r3, #10]
    bb7e:	466a      	mov	r2, sp
    bb80:	2301      	movs	r3, #1
    bb82:	72d3      	strb	r3, [r2, #11]
    bb84:	2215      	movs	r2, #21
    bb86:	ad03      	add	r5, sp, #12
    bb88:	4f11      	ldr	r7, [pc, #68]	; (bbd0 <ConfigureRadioRx+0x60>)
    bb8a:	9100      	str	r1, [sp, #0]
    bb8c:	446a      	add	r2, sp
    bb8e:	0021      	movs	r1, r4
    bb90:	2021      	movs	r0, #33	; 0x21
    bb92:	80ae      	strh	r6, [r5, #4]
    bb94:	47b8      	blx	r7
    bb96:	2216      	movs	r2, #22
    bb98:	0021      	movs	r1, r4
    bb9a:	446a      	add	r2, sp
    bb9c:	2022      	movs	r0, #34	; 0x22
    bb9e:	47b8      	blx	r7
    bba0:	2217      	movs	r2, #23
    bba2:	0021      	movs	r1, r4
    bba4:	446a      	add	r2, sp
    bba6:	2023      	movs	r0, #35	; 0x23
    bba8:	47b8      	blx	r7
    bbaa:	9b00      	ldr	r3, [sp, #0]
    bbac:	0028      	movs	r0, r5
    bbae:	9303      	str	r3, [sp, #12]
    bbb0:	4b08      	ldr	r3, [pc, #32]	; (bbd4 <ConfigureRadioRx+0x64>)
    bbb2:	80ae      	strh	r6, [r5, #4]
    bbb4:	4798      	blx	r3
    bbb6:	230a      	movs	r3, #10
    bbb8:	446b      	add	r3, sp
    bbba:	0019      	movs	r1, r3
    bbbc:	4c06      	ldr	r4, [pc, #24]	; (bbd8 <ConfigureRadioRx+0x68>)
    bbbe:	2014      	movs	r0, #20
    bbc0:	47a0      	blx	r4
    bbc2:	230b      	movs	r3, #11
    bbc4:	446b      	add	r3, sp
    bbc6:	0019      	movs	r1, r3
    bbc8:	2006      	movs	r0, #6
    bbca:	47a0      	blx	r4
    bbcc:	b007      	add	sp, #28
    bbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbd0:	00008b79 	.word	0x00008b79
    bbd4:	0000b195 	.word	0x0000b195
    bbd8:	0000f021 	.word	0x0000f021

0000bbdc <LorawanReceiveWindow1Callback>:
    bbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bbde:	4c18      	ldr	r4, [pc, #96]	; (bc40 <LorawanReceiveWindow1Callback+0x64>)
    bbe0:	0023      	movs	r3, r4
    bbe2:	3350      	adds	r3, #80	; 0x50
    bbe4:	781b      	ldrb	r3, [r3, #0]
    bbe6:	b25a      	sxtb	r2, r3
    bbe8:	2a00      	cmp	r2, #0
    bbea:	db28      	blt.n	bc3e <LorawanReceiveWindow1Callback+0x62>
    bbec:	0022      	movs	r2, r4
    bbee:	32c8      	adds	r2, #200	; 0xc8
    bbf0:	7812      	ldrb	r2, [r2, #0]
    bbf2:	2a04      	cmp	r2, #4
    bbf4:	d103      	bne.n	bbfe <LorawanReceiveWindow1Callback+0x22>
    bbf6:	07db      	lsls	r3, r3, #31
    bbf8:	d501      	bpl.n	bbfe <LorawanReceiveWindow1Callback+0x22>
    bbfa:	4b12      	ldr	r3, [pc, #72]	; (bc44 <LorawanReceiveWindow1Callback+0x68>)
    bbfc:	4798      	blx	r3
    bbfe:	0021      	movs	r1, r4
    bc00:	220e      	movs	r2, #14
    bc02:	3150      	adds	r1, #80	; 0x50
    bc04:	780b      	ldrb	r3, [r1, #0]
    bc06:	ad01      	add	r5, sp, #4
    bc08:	4393      	bics	r3, r2
    bc0a:	001a      	movs	r2, r3
    bc0c:	2306      	movs	r3, #6
    bc0e:	4313      	orrs	r3, r2
    bc10:	0022      	movs	r2, r4
    bc12:	700b      	strb	r3, [r1, #0]
    bc14:	3248      	adds	r2, #72	; 0x48
    bc16:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bc18:	7811      	ldrb	r1, [r2, #0]
    bc1a:	0a1b      	lsrs	r3, r3, #8
    bc1c:	3449      	adds	r4, #73	; 0x49
    bc1e:	0609      	lsls	r1, r1, #24
    bc20:	4319      	orrs	r1, r3
    bc22:	7820      	ldrb	r0, [r4, #0]
    bc24:	4b08      	ldr	r3, [pc, #32]	; (bc48 <LorawanReceiveWindow1Callback+0x6c>)
    bc26:	4798      	blx	r3
    bc28:	2300      	movs	r3, #0
    bc2a:	702b      	strb	r3, [r5, #0]
    bc2c:	466b      	mov	r3, sp
    bc2e:	0021      	movs	r1, r4
    bc30:	1d9a      	adds	r2, r3, #6
    bc32:	2003      	movs	r0, #3
    bc34:	4b05      	ldr	r3, [pc, #20]	; (bc4c <LorawanReceiveWindow1Callback+0x70>)
    bc36:	4798      	blx	r3
    bc38:	0028      	movs	r0, r5
    bc3a:	4b05      	ldr	r3, [pc, #20]	; (bc50 <LorawanReceiveWindow1Callback+0x74>)
    bc3c:	4798      	blx	r3
    bc3e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bc40:	20001908 	.word	0x20001908
    bc44:	0000e941 	.word	0x0000e941
    bc48:	0000bb71 	.word	0x0000bb71
    bc4c:	00008b79 	.word	0x00008b79
    bc50:	00010351 	.word	0x00010351

0000bc54 <ConfigureRadioTx>:
    bc54:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc56:	2517      	movs	r5, #23
    bc58:	2300      	movs	r3, #0
    bc5a:	2616      	movs	r6, #22
    bc5c:	2701      	movs	r7, #1
    bc5e:	b087      	sub	sp, #28
    bc60:	ac01      	add	r4, sp, #4
    bc62:	446d      	add	r5, sp
    bc64:	9001      	str	r0, [sp, #4]
    bc66:	702b      	strb	r3, [r5, #0]
    bc68:	0020      	movs	r0, r4
    bc6a:	4b10      	ldr	r3, [pc, #64]	; (bcac <ConfigureRadioTx+0x58>)
    bc6c:	446e      	add	r6, sp
    bc6e:	9102      	str	r1, [sp, #8]
    bc70:	9203      	str	r2, [sp, #12]
    bc72:	7037      	strb	r7, [r6, #0]
    bc74:	4798      	blx	r3
    bc76:	79e3      	ldrb	r3, [r4, #7]
    bc78:	4c0d      	ldr	r4, [pc, #52]	; (bcb0 <ConfigureRadioTx+0x5c>)
    bc7a:	2b00      	cmp	r3, #0
    bc7c:	d00b      	beq.n	bc96 <ConfigureRadioTx+0x42>
    bc7e:	2391      	movs	r3, #145	; 0x91
    bc80:	4a0c      	ldr	r2, [pc, #48]	; (bcb4 <ConfigureRadioTx+0x60>)
    bc82:	005b      	lsls	r3, r3, #1
    bc84:	54d7      	strb	r7, [r2, r3]
    bc86:	490c      	ldr	r1, [pc, #48]	; (bcb8 <ConfigureRadioTx+0x64>)
    bc88:	200b      	movs	r0, #11
    bc8a:	4b0c      	ldr	r3, [pc, #48]	; (bcbc <ConfigureRadioTx+0x68>)
    bc8c:	4798      	blx	r3
    bc8e:	210a      	movs	r1, #10
    bc90:	200b      	movs	r0, #11
    bc92:	4469      	add	r1, sp
    bc94:	47a0      	blx	r4
    bc96:	a903      	add	r1, sp, #12
    bc98:	2004      	movs	r0, #4
    bc9a:	47a0      	blx	r4
    bc9c:	0031      	movs	r1, r6
    bc9e:	2014      	movs	r0, #20
    bca0:	47a0      	blx	r4
    bca2:	0029      	movs	r1, r5
    bca4:	2006      	movs	r0, #6
    bca6:	47a0      	blx	r4
    bca8:	b007      	add	sp, #28
    bcaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcac:	0000b195 	.word	0x0000b195
    bcb0:	0000f021 	.word	0x0000f021
    bcb4:	20001908 	.word	0x20001908
    bcb8:	20001a29 	.word	0x20001a29
    bcbc:	0000ef35 	.word	0x0000ef35

0000bcc0 <LorawanGetChAndInitiateRadioTransmit>:
    bcc0:	2301      	movs	r3, #1
    bcc2:	b530      	push	{r4, r5, lr}
    bcc4:	4c46      	ldr	r4, [pc, #280]	; (bde0 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    bcc6:	b089      	sub	sp, #36	; 0x24
    bcc8:	a902      	add	r1, sp, #8
    bcca:	700b      	strb	r3, [r1, #0]
    bccc:	0023      	movs	r3, r4
    bcce:	33b5      	adds	r3, #181	; 0xb5
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	704b      	strb	r3, [r1, #1]
    bcd4:	0023      	movs	r3, r4
    bcd6:	33b3      	adds	r3, #179	; 0xb3
    bcd8:	781b      	ldrb	r3, [r3, #0]
    bcda:	708b      	strb	r3, [r1, #2]
    bcdc:	0023      	movs	r3, r4
    bcde:	33c8      	adds	r3, #200	; 0xc8
    bce0:	781b      	ldrb	r3, [r3, #0]
    bce2:	2b01      	cmp	r3, #1
    bce4:	d108      	bne.n	bcf8 <LorawanGetChAndInitiateRadioTransmit+0x38>
    bce6:	0020      	movs	r0, r4
    bce8:	220e      	movs	r2, #14
    bcea:	3050      	adds	r0, #80	; 0x50
    bcec:	7803      	ldrb	r3, [r0, #0]
    bcee:	4393      	bics	r3, r2
    bcf0:	001a      	movs	r2, r3
    bcf2:	230c      	movs	r3, #12
    bcf4:	4313      	orrs	r3, r2
    bcf6:	7003      	strb	r3, [r0, #0]
    bcf8:	aa05      	add	r2, sp, #20
    bcfa:	202d      	movs	r0, #45	; 0x2d
    bcfc:	4d39      	ldr	r5, [pc, #228]	; (bde4 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    bcfe:	47a8      	blx	r5
    bd00:	0023      	movs	r3, r4
    bd02:	2808      	cmp	r0, #8
    bd04:	d132      	bne.n	bd6c <LorawanGetChAndInitiateRadioTransmit+0xac>
    bd06:	33c8      	adds	r3, #200	; 0xc8
    bd08:	781b      	ldrb	r3, [r3, #0]
    bd0a:	ad03      	add	r5, sp, #12
    bd0c:	2b04      	cmp	r3, #4
    bd0e:	d104      	bne.n	bd1a <LorawanGetChAndInitiateRadioTransmit+0x5a>
    bd10:	3b03      	subs	r3, #3
    bd12:	702b      	strb	r3, [r5, #0]
    bd14:	0028      	movs	r0, r5
    bd16:	4b34      	ldr	r3, [pc, #208]	; (bde8 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    bd18:	4798      	blx	r3
    bd1a:	9805      	ldr	r0, [sp, #20]
    bd1c:	4b33      	ldr	r3, [pc, #204]	; (bdec <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    bd1e:	9906      	ldr	r1, [sp, #24]
    bd20:	9a07      	ldr	r2, [sp, #28]
    bd22:	4798      	blx	r3
    bd24:	0023      	movs	r3, r4
    bd26:	339a      	adds	r3, #154	; 0x9a
    bd28:	881b      	ldrh	r3, [r3, #0]
    bd2a:	0028      	movs	r0, r5
    bd2c:	702b      	strb	r3, [r5, #0]
    bd2e:	4b30      	ldr	r3, [pc, #192]	; (bdf0 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    bd30:	606b      	str	r3, [r5, #4]
    bd32:	4b30      	ldr	r3, [pc, #192]	; (bdf4 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    bd34:	4798      	blx	r3
    bd36:	2800      	cmp	r0, #0
    bd38:	d109      	bne.n	bd4e <LorawanGetChAndInitiateRadioTransmit+0x8e>
    bd3a:	220e      	movs	r2, #14
    bd3c:	3450      	adds	r4, #80	; 0x50
    bd3e:	7823      	ldrb	r3, [r4, #0]
    bd40:	4393      	bics	r3, r2
    bd42:	001a      	movs	r2, r3
    bd44:	2302      	movs	r3, #2
    bd46:	4313      	orrs	r3, r2
    bd48:	7023      	strb	r3, [r4, #0]
    bd4a:	b009      	add	sp, #36	; 0x24
    bd4c:	bd30      	pop	{r4, r5, pc}
    bd4e:	232c      	movs	r3, #44	; 0x2c
    bd50:	2200      	movs	r2, #0
    bd52:	33ff      	adds	r3, #255	; 0xff
    bd54:	5ce3      	ldrb	r3, [r4, r3]
    bd56:	4928      	ldr	r1, [pc, #160]	; (bdf8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    bd58:	34c7      	adds	r4, #199	; 0xc7
    bd5a:	4359      	muls	r1, r3
    bd5c:	4b27      	ldr	r3, [pc, #156]	; (bdfc <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    bd5e:	7820      	ldrb	r0, [r4, #0]
    bd60:	18c9      	adds	r1, r1, r3
    bd62:	4b27      	ldr	r3, [pc, #156]	; (be00 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    bd64:	9200      	str	r2, [sp, #0]
    bd66:	4c27      	ldr	r4, [pc, #156]	; (be04 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    bd68:	47a0      	blx	r4
    bd6a:	e7ee      	b.n	bd4a <LorawanGetChAndInitiateRadioTransmit+0x8a>
    bd6c:	33e4      	adds	r3, #228	; 0xe4
    bd6e:	781b      	ldrb	r3, [r3, #0]
    bd70:	079a      	lsls	r2, r3, #30
    bd72:	d516      	bpl.n	bda2 <LorawanGetChAndInitiateRadioTransmit+0xe2>
    bd74:	aa03      	add	r2, sp, #12
    bd76:	4924      	ldr	r1, [pc, #144]	; (be08 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    bd78:	2024      	movs	r0, #36	; 0x24
    bd7a:	47a8      	blx	r5
    bd7c:	9b03      	ldr	r3, [sp, #12]
    bd7e:	1c5a      	adds	r2, r3, #1
    bd80:	d001      	beq.n	bd86 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    bd82:	3314      	adds	r3, #20
    bd84:	9303      	str	r3, [sp, #12]
    bd86:	232c      	movs	r3, #44	; 0x2c
    bd88:	21fa      	movs	r1, #250	; 0xfa
    bd8a:	33ff      	adds	r3, #255	; 0xff
    bd8c:	5ce3      	ldrb	r3, [r4, r3]
    bd8e:	9a03      	ldr	r2, [sp, #12]
    bd90:	0089      	lsls	r1, r1, #2
    bd92:	1ad3      	subs	r3, r2, r3
    bd94:	2200      	movs	r2, #0
    bd96:	4359      	muls	r1, r3
    bd98:	34bd      	adds	r4, #189	; 0xbd
    bd9a:	7820      	ldrb	r0, [r4, #0]
    bd9c:	9200      	str	r2, [sp, #0]
    bd9e:	4b1b      	ldr	r3, [pc, #108]	; (be0c <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    bda0:	e7e1      	b.n	bd66 <LorawanGetChAndInitiateRadioTransmit+0xa6>
    bda2:	075b      	lsls	r3, r3, #29
    bda4:	d508      	bpl.n	bdb8 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    bda6:	aa03      	add	r2, sp, #12
    bda8:	4917      	ldr	r1, [pc, #92]	; (be08 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    bdaa:	2031      	movs	r0, #49	; 0x31
    bdac:	47a8      	blx	r5
    bdae:	9b03      	ldr	r3, [sp, #12]
    bdb0:	1c5a      	adds	r2, r3, #1
    bdb2:	d0e8      	beq.n	bd86 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    bdb4:	3301      	adds	r3, #1
    bdb6:	e7e5      	b.n	bd84 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    bdb8:	0023      	movs	r3, r4
    bdba:	2201      	movs	r2, #1
    bdbc:	3360      	adds	r3, #96	; 0x60
    bdbe:	781b      	ldrb	r3, [r3, #0]
    bdc0:	401a      	ands	r2, r3
    bdc2:	d109      	bne.n	bdd8 <LorawanGetChAndInitiateRadioTransmit+0x118>
    bdc4:	232c      	movs	r3, #44	; 0x2c
    bdc6:	33ff      	adds	r3, #255	; 0xff
    bdc8:	5ce3      	ldrb	r3, [r4, r3]
    bdca:	490b      	ldr	r1, [pc, #44]	; (bdf8 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    bdcc:	34bd      	adds	r4, #189	; 0xbd
    bdce:	4359      	muls	r1, r3
    bdd0:	4b0a      	ldr	r3, [pc, #40]	; (bdfc <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    bdd2:	7820      	ldrb	r0, [r4, #0]
    bdd4:	18c9      	adds	r1, r1, r3
    bdd6:	e7e1      	b.n	bd9c <LorawanGetChAndInitiateRadioTransmit+0xdc>
    bdd8:	4b0d      	ldr	r3, [pc, #52]	; (be10 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    bdda:	4798      	blx	r3
    bddc:	e7b5      	b.n	bd4a <LorawanGetChAndInitiateRadioTransmit+0x8a>
    bdde:	46c0      	nop			; (mov r8, r8)
    bde0:	20001908 	.word	0x20001908
    bde4:	00008b79 	.word	0x00008b79
    bde8:	00010351 	.word	0x00010351
    bdec:	0000bc55 	.word	0x0000bc55
    bdf0:	20001a45 	.word	0x20001a45
    bdf4:	0000f971 	.word	0x0000f971
    bdf8:	fffffc18 	.word	0xfffffc18
    bdfc:	001e8480 	.word	0x001e8480
    be00:	0000be15 	.word	0x0000be15
    be04:	000098f5 	.word	0x000098f5
    be08:	200019bb 	.word	0x200019bb
    be0c:	0000bec9 	.word	0x0000bec9
    be10:	0000b64d 	.word	0x0000b64d

0000be14 <TransmissionErrorCallback>:
    be14:	b530      	push	{r4, r5, lr}
    be16:	4c22      	ldr	r4, [pc, #136]	; (bea0 <TransmissionErrorCallback+0x8c>)
    be18:	2501      	movs	r5, #1
    be1a:	0023      	movs	r3, r4
    be1c:	b08b      	sub	sp, #44	; 0x2c
    be1e:	a903      	add	r1, sp, #12
    be20:	700d      	strb	r5, [r1, #0]
    be22:	33b5      	adds	r3, #181	; 0xb5
    be24:	781b      	ldrb	r3, [r3, #0]
    be26:	aa07      	add	r2, sp, #28
    be28:	704b      	strb	r3, [r1, #1]
    be2a:	0023      	movs	r3, r4
    be2c:	33b3      	adds	r3, #179	; 0xb3
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	202d      	movs	r0, #45	; 0x2d
    be32:	708b      	strb	r3, [r1, #2]
    be34:	4b1b      	ldr	r3, [pc, #108]	; (bea4 <TransmissionErrorCallback+0x90>)
    be36:	4798      	blx	r3
    be38:	2808      	cmp	r0, #8
    be3a:	d121      	bne.n	be80 <TransmissionErrorCallback+0x6c>
    be3c:	a804      	add	r0, sp, #16
    be3e:	4b1a      	ldr	r3, [pc, #104]	; (bea8 <TransmissionErrorCallback+0x94>)
    be40:	7005      	strb	r5, [r0, #0]
    be42:	4798      	blx	r3
    be44:	9807      	ldr	r0, [sp, #28]
    be46:	4b19      	ldr	r3, [pc, #100]	; (beac <TransmissionErrorCallback+0x98>)
    be48:	9908      	ldr	r1, [sp, #32]
    be4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be4c:	4798      	blx	r3
    be4e:	0023      	movs	r3, r4
    be50:	339a      	adds	r3, #154	; 0x9a
    be52:	881b      	ldrh	r3, [r3, #0]
    be54:	a805      	add	r0, sp, #20
    be56:	7003      	strb	r3, [r0, #0]
    be58:	4b15      	ldr	r3, [pc, #84]	; (beb0 <TransmissionErrorCallback+0x9c>)
    be5a:	6043      	str	r3, [r0, #4]
    be5c:	4b15      	ldr	r3, [pc, #84]	; (beb4 <TransmissionErrorCallback+0xa0>)
    be5e:	4798      	blx	r3
    be60:	2800      	cmp	r0, #0
    be62:	d01b      	beq.n	be9c <TransmissionErrorCallback+0x88>
    be64:	0023      	movs	r3, r4
    be66:	33c8      	adds	r3, #200	; 0xc8
    be68:	781b      	ldrb	r3, [r3, #0]
    be6a:	42ab      	cmp	r3, r5
    be6c:	d108      	bne.n	be80 <TransmissionErrorCallback+0x6c>
    be6e:	0021      	movs	r1, r4
    be70:	220e      	movs	r2, #14
    be72:	3150      	adds	r1, #80	; 0x50
    be74:	780b      	ldrb	r3, [r1, #0]
    be76:	4393      	bics	r3, r2
    be78:	001a      	movs	r2, r3
    be7a:	230c      	movs	r3, #12
    be7c:	4313      	orrs	r3, r2
    be7e:	700b      	strb	r3, [r1, #0]
    be80:	232c      	movs	r3, #44	; 0x2c
    be82:	2200      	movs	r2, #0
    be84:	33ff      	adds	r3, #255	; 0xff
    be86:	5ce3      	ldrb	r3, [r4, r3]
    be88:	490b      	ldr	r1, [pc, #44]	; (beb8 <TransmissionErrorCallback+0xa4>)
    be8a:	34c7      	adds	r4, #199	; 0xc7
    be8c:	4359      	muls	r1, r3
    be8e:	4b0b      	ldr	r3, [pc, #44]	; (bebc <TransmissionErrorCallback+0xa8>)
    be90:	7820      	ldrb	r0, [r4, #0]
    be92:	18c9      	adds	r1, r1, r3
    be94:	9200      	str	r2, [sp, #0]
    be96:	4b0a      	ldr	r3, [pc, #40]	; (bec0 <TransmissionErrorCallback+0xac>)
    be98:	4c0a      	ldr	r4, [pc, #40]	; (bec4 <TransmissionErrorCallback+0xb0>)
    be9a:	47a0      	blx	r4
    be9c:	b00b      	add	sp, #44	; 0x2c
    be9e:	bd30      	pop	{r4, r5, pc}
    bea0:	20001908 	.word	0x20001908
    bea4:	00008b79 	.word	0x00008b79
    bea8:	00010351 	.word	0x00010351
    beac:	0000bc55 	.word	0x0000bc55
    beb0:	20001a45 	.word	0x20001a45
    beb4:	0000f971 	.word	0x0000f971
    beb8:	fffffc18 	.word	0xfffffc18
    bebc:	001e8480 	.word	0x001e8480
    bec0:	0000be15 	.word	0x0000be15
    bec4:	000098f5 	.word	0x000098f5

0000bec8 <UnconfirmedTransmissionCallback>:
    bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    beca:	4c38      	ldr	r4, [pc, #224]	; (bfac <UnconfirmedTransmissionCallback+0xe4>)
    becc:	b08b      	sub	sp, #44	; 0x2c
    bece:	0023      	movs	r3, r4
    bed0:	339a      	adds	r3, #154	; 0x9a
    bed2:	881b      	ldrh	r3, [r3, #0]
    bed4:	af05      	add	r7, sp, #20
    bed6:	703b      	strb	r3, [r7, #0]
    bed8:	4b35      	ldr	r3, [pc, #212]	; (bfb0 <UnconfirmedTransmissionCallback+0xe8>)
    beda:	a903      	add	r1, sp, #12
    bedc:	9306      	str	r3, [sp, #24]
    bede:	2301      	movs	r3, #1
    bee0:	700b      	strb	r3, [r1, #0]
    bee2:	0023      	movs	r3, r4
    bee4:	0026      	movs	r6, r4
    bee6:	33b5      	adds	r3, #181	; 0xb5
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	36b3      	adds	r6, #179	; 0xb3
    beec:	704b      	strb	r3, [r1, #1]
    beee:	7833      	ldrb	r3, [r6, #0]
    bef0:	aa07      	add	r2, sp, #28
    bef2:	202d      	movs	r0, #45	; 0x2d
    bef4:	4d2f      	ldr	r5, [pc, #188]	; (bfb4 <UnconfirmedTransmissionCallback+0xec>)
    bef6:	708b      	strb	r3, [r1, #2]
    bef8:	47a8      	blx	r5
    befa:	2808      	cmp	r0, #8
    befc:	d12c      	bne.n	bf58 <UnconfirmedTransmissionCallback+0x90>
    befe:	2301      	movs	r3, #1
    bf00:	a804      	add	r0, sp, #16
    bf02:	7003      	strb	r3, [r0, #0]
    bf04:	4b2c      	ldr	r3, [pc, #176]	; (bfb8 <UnconfirmedTransmissionCallback+0xf0>)
    bf06:	4798      	blx	r3
    bf08:	9807      	ldr	r0, [sp, #28]
    bf0a:	4b2c      	ldr	r3, [pc, #176]	; (bfbc <UnconfirmedTransmissionCallback+0xf4>)
    bf0c:	9908      	ldr	r1, [sp, #32]
    bf0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf10:	4798      	blx	r3
    bf12:	0038      	movs	r0, r7
    bf14:	4b2a      	ldr	r3, [pc, #168]	; (bfc0 <UnconfirmedTransmissionCallback+0xf8>)
    bf16:	4798      	blx	r3
    bf18:	2800      	cmp	r0, #0
    bf1a:	d01b      	beq.n	bf54 <UnconfirmedTransmissionCallback+0x8c>
    bf1c:	0023      	movs	r3, r4
    bf1e:	33c8      	adds	r3, #200	; 0xc8
    bf20:	781b      	ldrb	r3, [r3, #0]
    bf22:	2b01      	cmp	r3, #1
    bf24:	d108      	bne.n	bf38 <UnconfirmedTransmissionCallback+0x70>
    bf26:	0021      	movs	r1, r4
    bf28:	220e      	movs	r2, #14
    bf2a:	3150      	adds	r1, #80	; 0x50
    bf2c:	780b      	ldrb	r3, [r1, #0]
    bf2e:	4393      	bics	r3, r2
    bf30:	001a      	movs	r2, r3
    bf32:	230c      	movs	r3, #12
    bf34:	4313      	orrs	r3, r2
    bf36:	700b      	strb	r3, [r1, #0]
    bf38:	232c      	movs	r3, #44	; 0x2c
    bf3a:	2200      	movs	r2, #0
    bf3c:	33ff      	adds	r3, #255	; 0xff
    bf3e:	5ce3      	ldrb	r3, [r4, r3]
    bf40:	4920      	ldr	r1, [pc, #128]	; (bfc4 <UnconfirmedTransmissionCallback+0xfc>)
    bf42:	34c7      	adds	r4, #199	; 0xc7
    bf44:	4359      	muls	r1, r3
    bf46:	4b20      	ldr	r3, [pc, #128]	; (bfc8 <UnconfirmedTransmissionCallback+0x100>)
    bf48:	7820      	ldrb	r0, [r4, #0]
    bf4a:	18c9      	adds	r1, r1, r3
    bf4c:	4b1f      	ldr	r3, [pc, #124]	; (bfcc <UnconfirmedTransmissionCallback+0x104>)
    bf4e:	9200      	str	r2, [sp, #0]
    bf50:	4c1f      	ldr	r4, [pc, #124]	; (bfd0 <UnconfirmedTransmissionCallback+0x108>)
    bf52:	47a0      	blx	r4
    bf54:	b00b      	add	sp, #44	; 0x2c
    bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf58:	23fa      	movs	r3, #250	; 0xfa
    bf5a:	00db      	lsls	r3, r3, #3
    bf5c:	9304      	str	r3, [sp, #16]
    bf5e:	0023      	movs	r3, r4
    bf60:	33e4      	adds	r3, #228	; 0xe4
    bf62:	781b      	ldrb	r3, [r3, #0]
    bf64:	079a      	lsls	r2, r3, #30
    bf66:	d516      	bpl.n	bf96 <UnconfirmedTransmissionCallback+0xce>
    bf68:	aa04      	add	r2, sp, #16
    bf6a:	0031      	movs	r1, r6
    bf6c:	2024      	movs	r0, #36	; 0x24
    bf6e:	47a8      	blx	r5
    bf70:	9b04      	ldr	r3, [sp, #16]
    bf72:	1c5a      	adds	r2, r3, #1
    bf74:	d001      	beq.n	bf7a <UnconfirmedTransmissionCallback+0xb2>
    bf76:	3314      	adds	r3, #20
    bf78:	9304      	str	r3, [sp, #16]
    bf7a:	232c      	movs	r3, #44	; 0x2c
    bf7c:	33ff      	adds	r3, #255	; 0xff
    bf7e:	5ce3      	ldrb	r3, [r4, r3]
    bf80:	9a04      	ldr	r2, [sp, #16]
    bf82:	21fa      	movs	r1, #250	; 0xfa
    bf84:	1ad3      	subs	r3, r2, r3
    bf86:	2200      	movs	r2, #0
    bf88:	0089      	lsls	r1, r1, #2
    bf8a:	34bd      	adds	r4, #189	; 0xbd
    bf8c:	4359      	muls	r1, r3
    bf8e:	7820      	ldrb	r0, [r4, #0]
    bf90:	4b10      	ldr	r3, [pc, #64]	; (bfd4 <UnconfirmedTransmissionCallback+0x10c>)
    bf92:	9200      	str	r2, [sp, #0]
    bf94:	e7dc      	b.n	bf50 <UnconfirmedTransmissionCallback+0x88>
    bf96:	075b      	lsls	r3, r3, #29
    bf98:	d5ef      	bpl.n	bf7a <UnconfirmedTransmissionCallback+0xb2>
    bf9a:	aa04      	add	r2, sp, #16
    bf9c:	0031      	movs	r1, r6
    bf9e:	2031      	movs	r0, #49	; 0x31
    bfa0:	47a8      	blx	r5
    bfa2:	9b04      	ldr	r3, [sp, #16]
    bfa4:	1c5a      	adds	r2, r3, #1
    bfa6:	d0e8      	beq.n	bf7a <UnconfirmedTransmissionCallback+0xb2>
    bfa8:	3301      	adds	r3, #1
    bfaa:	e7e5      	b.n	bf78 <UnconfirmedTransmissionCallback+0xb0>
    bfac:	20001908 	.word	0x20001908
    bfb0:	20001a45 	.word	0x20001a45
    bfb4:	00008b79 	.word	0x00008b79
    bfb8:	00010351 	.word	0x00010351
    bfbc:	0000bc55 	.word	0x0000bc55
    bfc0:	0000f971 	.word	0x0000f971
    bfc4:	fffffc18 	.word	0xfffffc18
    bfc8:	001e8480 	.word	0x001e8480
    bfcc:	0000be15 	.word	0x0000be15
    bfd0:	000098f5 	.word	0x000098f5
    bfd4:	0000bec9 	.word	0x0000bec9

0000bfd8 <UpdateJoinInProgress>:
    bfd8:	b570      	push	{r4, r5, r6, lr}
    bfda:	2504      	movs	r5, #4
    bfdc:	4c0a      	ldr	r4, [pc, #40]	; (c008 <UpdateJoinInProgress+0x30>)
    bfde:	0002      	movs	r2, r0
    bfe0:	0021      	movs	r1, r4
    bfe2:	3460      	adds	r4, #96	; 0x60
    bfe4:	7826      	ldrb	r6, [r4, #0]
    bfe6:	2001      	movs	r0, #1
    bfe8:	4335      	orrs	r5, r6
    bfea:	7025      	strb	r5, [r4, #0]
    bfec:	2407      	movs	r4, #7
    bfee:	4022      	ands	r2, r4
    bff0:	4082      	lsls	r2, r0
    bff2:	3150      	adds	r1, #80	; 0x50
    bff4:	780b      	ldrb	r3, [r1, #0]
    bff6:	1924      	adds	r4, r4, r4
    bff8:	4383      	bics	r3, r0
    bffa:	43a3      	bics	r3, r4
    bffc:	4313      	orrs	r3, r2
    bffe:	700b      	strb	r3, [r1, #0]
    c000:	210b      	movs	r1, #11
    c002:	4b02      	ldr	r3, [pc, #8]	; (c00c <UpdateJoinInProgress+0x34>)
    c004:	4798      	blx	r3
    c006:	bd70      	pop	{r4, r5, r6, pc}
    c008:	20001908 	.word	0x20001908
    c00c:	00008e5d 	.word	0x00008e5d

0000c010 <LORAWAN_Join>:
    c010:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c012:	4c2c      	ldr	r4, [pc, #176]	; (c0c4 <LORAWAN_Join+0xb4>)
    c014:	0005      	movs	r5, r0
    c016:	0023      	movs	r3, r4
    c018:	3350      	adds	r3, #80	; 0x50
    c01a:	781b      	ldrb	r3, [r3, #0]
    c01c:	210f      	movs	r1, #15
    c01e:	b25a      	sxtb	r2, r3
    c020:	2a00      	cmp	r2, #0
    c022:	db3c      	blt.n	c09e <LORAWAN_Join+0x8e>
    c024:	3903      	subs	r1, #3
    c026:	065b      	lsls	r3, r3, #25
    c028:	d439      	bmi.n	c09e <LORAWAN_Join+0x8e>
    c02a:	0023      	movs	r3, r4
    c02c:	3360      	adds	r3, #96	; 0x60
    c02e:	781b      	ldrb	r3, [r3, #0]
    c030:	3107      	adds	r1, #7
    c032:	075b      	lsls	r3, r3, #29
    c034:	d433      	bmi.n	c09e <LORAWAN_Join+0x8e>
    c036:	0023      	movs	r3, r4
    c038:	33c8      	adds	r3, #200	; 0xc8
    c03a:	781b      	ldrb	r3, [r3, #0]
    c03c:	2b04      	cmp	r3, #4
    c03e:	d029      	beq.n	c094 <LORAWAN_Join+0x84>
    c040:	0023      	movs	r3, r4
    c042:	33c8      	adds	r3, #200	; 0xc8
    c044:	781b      	ldrb	r3, [r3, #0]
    c046:	2b01      	cmp	r3, #1
    c048:	d105      	bne.n	c056 <LORAWAN_Join+0x46>
    c04a:	0023      	movs	r3, r4
    c04c:	3350      	adds	r3, #80	; 0x50
    c04e:	781a      	ldrb	r2, [r3, #0]
    c050:	230e      	movs	r3, #14
    c052:	421a      	tst	r2, r3
    c054:	d122      	bne.n	c09c <LORAWAN_Join+0x8c>
    c056:	2102      	movs	r1, #2
    c058:	2001      	movs	r0, #1
    c05a:	4e1b      	ldr	r6, [pc, #108]	; (c0c8 <LORAWAN_Join+0xb8>)
    c05c:	7025      	strb	r5, [r4, #0]
    c05e:	47b0      	blx	r6
    c060:	0023      	movs	r3, r4
    c062:	33aa      	adds	r3, #170	; 0xaa
    c064:	781b      	ldrb	r3, [r3, #0]
    c066:	2d00      	cmp	r5, #0
    c068:	d11b      	bne.n	c0a2 <LORAWAN_Join+0x92>
    c06a:	210b      	movs	r1, #11
    c06c:	400b      	ands	r3, r1
    c06e:	428b      	cmp	r3, r1
    c070:	d115      	bne.n	c09e <LORAWAN_Join+0x8e>
    c072:	0022      	movs	r2, r4
    c074:	2001      	movs	r0, #1
    c076:	3250      	adds	r2, #80	; 0x50
    c078:	7813      	ldrb	r3, [r2, #0]
    c07a:	3460      	adds	r4, #96	; 0x60
    c07c:	4383      	bics	r3, r0
    c07e:	7013      	strb	r3, [r2, #0]
    c080:	2304      	movs	r3, #4
    c082:	7822      	ldrb	r2, [r4, #0]
    c084:	4313      	orrs	r3, r2
    c086:	7023      	strb	r3, [r4, #0]
    c088:	47b0      	blx	r6
    c08a:	0028      	movs	r0, r5
    c08c:	4b0f      	ldr	r3, [pc, #60]	; (c0cc <LORAWAN_Join+0xbc>)
    c08e:	4798      	blx	r3
    c090:	2108      	movs	r1, #8
    c092:	e004      	b.n	c09e <LORAWAN_Join+0x8e>
    c094:	4b0e      	ldr	r3, [pc, #56]	; (c0d0 <LORAWAN_Join+0xc0>)
    c096:	4798      	blx	r3
    c098:	2808      	cmp	r0, #8
    c09a:	d0d1      	beq.n	c040 <LORAWAN_Join+0x30>
    c09c:	2111      	movs	r1, #17
    c09e:	0008      	movs	r0, r1
    c0a0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    c0a2:	2234      	movs	r2, #52	; 0x34
    c0a4:	210b      	movs	r1, #11
    c0a6:	4013      	ands	r3, r2
    c0a8:	4293      	cmp	r3, r2
    c0aa:	d1f8      	bne.n	c09e <LORAWAN_Join+0x8e>
    c0ac:	2007      	movs	r0, #7
    c0ae:	4b09      	ldr	r3, [pc, #36]	; (c0d4 <LORAWAN_Join+0xc4>)
    c0b0:	4798      	blx	r3
    c0b2:	2200      	movs	r2, #0
    c0b4:	34c6      	adds	r4, #198	; 0xc6
    c0b6:	7820      	ldrb	r0, [r4, #0]
    c0b8:	4b07      	ldr	r3, [pc, #28]	; (c0d8 <LORAWAN_Join+0xc8>)
    c0ba:	9200      	str	r2, [sp, #0]
    c0bc:	4907      	ldr	r1, [pc, #28]	; (c0dc <LORAWAN_Join+0xcc>)
    c0be:	4c08      	ldr	r4, [pc, #32]	; (c0e0 <LORAWAN_Join+0xd0>)
    c0c0:	47a0      	blx	r4
    c0c2:	e7e5      	b.n	c090 <LORAWAN_Join+0x80>
    c0c4:	20001908 	.word	0x20001908
    c0c8:	00008e5d 	.word	0x00008e5d
    c0cc:	0000eeb1 	.word	0x0000eeb1
    c0d0:	0000e909 	.word	0x0000e909
    c0d4:	0000bfd9 	.word	0x0000bfd9
    c0d8:	0000b079 	.word	0x0000b079
    c0dc:	0000c350 	.word	0x0000c350
    c0e0:	000098f5 	.word	0x000098f5

0000c0e4 <EncryptFRMPayload>:
    c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0e6:	0007      	movs	r7, r0
    c0e8:	2401      	movs	r4, #1
    c0ea:	b089      	sub	sp, #36	; 0x24
    c0ec:	9305      	str	r3, [sp, #20]
    c0ee:	ab0e      	add	r3, sp, #56	; 0x38
    c0f0:	9204      	str	r2, [sp, #16]
    c0f2:	cb04      	ldmia	r3!, {r2}
    c0f4:	9103      	str	r1, [sp, #12]
    c0f6:	781d      	ldrb	r5, [r3, #0]
    c0f8:	090b      	lsrs	r3, r1, #4
    c0fa:	9206      	str	r2, [sp, #24]
    c0fc:	9302      	str	r3, [sp, #8]
    c0fe:	9b02      	ldr	r3, [sp, #8]
    c100:	429c      	cmp	r4, r3
    c102:	d922      	bls.n	c14a <EncryptFRMPayload+0x66>
    c104:	260f      	movs	r6, #15
    c106:	9b03      	ldr	r3, [sp, #12]
    c108:	4033      	ands	r3, r6
    c10a:	1e1e      	subs	r6, r3, #0
    c10c:	d01b      	beq.n	c146 <EncryptFRMPayload+0x62>
    c10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c110:	0022      	movs	r2, r4
    c112:	9300      	str	r3, [sp, #0]
    c114:	9905      	ldr	r1, [sp, #20]
    c116:	2301      	movs	r3, #1
    c118:	9804      	ldr	r0, [sp, #16]
    c11a:	4c1d      	ldr	r4, [pc, #116]	; (c190 <EncryptFRMPayload+0xac>)
    c11c:	47a0      	blx	r4
    c11e:	4c1d      	ldr	r4, [pc, #116]	; (c194 <EncryptFRMPayload+0xb0>)
    c120:	4b1d      	ldr	r3, [pc, #116]	; (c198 <EncryptFRMPayload+0xb4>)
    c122:	9906      	ldr	r1, [sp, #24]
    c124:	0020      	movs	r0, r4
    c126:	4798      	blx	r3
    c128:	9b02      	ldr	r3, [sp, #8]
    c12a:	011a      	lsls	r2, r3, #4
    c12c:	2300      	movs	r3, #0
    c12e:	18ba      	adds	r2, r7, r2
    c130:	5d1f      	ldrb	r7, [r3, r4]
    c132:	5cd0      	ldrb	r0, [r2, r3]
    c134:	18e9      	adds	r1, r5, r3
    c136:	4078      	eors	r0, r7
    c138:	9f10      	ldr	r7, [sp, #64]	; 0x40
    c13a:	b2c9      	uxtb	r1, r1
    c13c:	3301      	adds	r3, #1
    c13e:	5478      	strb	r0, [r7, r1]
    c140:	b2d9      	uxtb	r1, r3
    c142:	428e      	cmp	r6, r1
    c144:	d8f4      	bhi.n	c130 <EncryptFRMPayload+0x4c>
    c146:	b009      	add	sp, #36	; 0x24
    c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c14c:	0022      	movs	r2, r4
    c14e:	9300      	str	r3, [sp, #0]
    c150:	9905      	ldr	r1, [sp, #20]
    c152:	2301      	movs	r3, #1
    c154:	9804      	ldr	r0, [sp, #16]
    c156:	4e0e      	ldr	r6, [pc, #56]	; (c190 <EncryptFRMPayload+0xac>)
    c158:	47b0      	blx	r6
    c15a:	4e0e      	ldr	r6, [pc, #56]	; (c194 <EncryptFRMPayload+0xb0>)
    c15c:	4b0e      	ldr	r3, [pc, #56]	; (c198 <EncryptFRMPayload+0xb4>)
    c15e:	9906      	ldr	r1, [sp, #24]
    c160:	0030      	movs	r0, r6
    c162:	4798      	blx	r3
    c164:	2300      	movs	r3, #0
    c166:	1e62      	subs	r2, r4, #1
    c168:	0112      	lsls	r2, r2, #4
    c16a:	18ba      	adds	r2, r7, r2
    c16c:	9207      	str	r2, [sp, #28]
    c16e:	9a07      	ldr	r2, [sp, #28]
    c170:	18e9      	adds	r1, r5, r3
    c172:	5cd0      	ldrb	r0, [r2, r3]
    c174:	5d9a      	ldrb	r2, [r3, r6]
    c176:	b2c9      	uxtb	r1, r1
    c178:	4050      	eors	r0, r2
    c17a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c17c:	3301      	adds	r3, #1
    c17e:	5450      	strb	r0, [r2, r1]
    c180:	2b10      	cmp	r3, #16
    c182:	d1f4      	bne.n	c16e <EncryptFRMPayload+0x8a>
    c184:	3510      	adds	r5, #16
    c186:	3401      	adds	r4, #1
    c188:	b2ed      	uxtb	r5, r5
    c18a:	b2e4      	uxtb	r4, r4
    c18c:	e7b7      	b.n	c0fe <EncryptFRMPayload+0x1a>
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	0000b155 	.word	0x0000b155
    c194:	20000f24 	.word	0x20000f24
    c198:	0000e739 	.word	0x0000e739

0000c19c <AssemblePacket>:
    c19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c19e:	2710      	movs	r7, #16
    c1a0:	b08b      	sub	sp, #44	; 0x2c
    c1a2:	9304      	str	r3, [sp, #16]
    c1a4:	ab04      	add	r3, sp, #16
    c1a6:	829f      	strh	r7, [r3, #20]
    c1a8:	2316      	movs	r3, #22
    c1aa:	9205      	str	r2, [sp, #20]
    c1ac:	aa04      	add	r2, sp, #16
    c1ae:	189b      	adds	r3, r3, r2
    c1b0:	2500      	movs	r5, #0
    c1b2:	2210      	movs	r2, #16
    c1b4:	ac08      	add	r4, sp, #32
    c1b6:	9006      	str	r0, [sp, #24]
    c1b8:	9107      	str	r1, [sp, #28]
    c1ba:	32ff      	adds	r2, #255	; 0xff
    c1bc:	0029      	movs	r1, r5
    c1be:	4ea1      	ldr	r6, [pc, #644]	; (c444 <AssemblePacket+0x2a8>)
    c1c0:	7025      	strb	r5, [r4, #0]
    c1c2:	48a1      	ldr	r0, [pc, #644]	; (c448 <AssemblePacket+0x2ac>)
    c1c4:	801d      	strh	r5, [r3, #0]
    c1c6:	47b0      	blx	r6
    c1c8:	003a      	movs	r2, r7
    c1ca:	0029      	movs	r1, r5
    c1cc:	489f      	ldr	r0, [pc, #636]	; (c44c <AssemblePacket+0x2b0>)
    c1ce:	47b0      	blx	r6
    c1d0:	221f      	movs	r2, #31
    c1d2:	7823      	ldrb	r3, [r4, #0]
    c1d4:	9906      	ldr	r1, [sp, #24]
    c1d6:	4013      	ands	r3, r2
    c1d8:	42a9      	cmp	r1, r5
    c1da:	d041      	beq.n	c260 <AssemblePacket+0xc4>
    c1dc:	3a9f      	subs	r2, #159	; 0x9f
    c1de:	4313      	orrs	r3, r2
    c1e0:	7023      	strb	r3, [r4, #0]
    c1e2:	4b9b      	ldr	r3, [pc, #620]	; (c450 <AssemblePacket+0x2b4>)
    c1e4:	3281      	adds	r2, #129	; 0x81
    c1e6:	3360      	adds	r3, #96	; 0x60
    c1e8:	7819      	ldrb	r1, [r3, #0]
    c1ea:	430a      	orrs	r2, r1
    c1ec:	701a      	strb	r2, [r3, #0]
    c1ee:	22e0      	movs	r2, #224	; 0xe0
    c1f0:	7823      	ldrb	r3, [r4, #0]
    c1f2:	4895      	ldr	r0, [pc, #596]	; (c448 <AssemblePacket+0x2ac>)
    c1f4:	4013      	ands	r3, r2
    c1f6:	7023      	strb	r3, [r4, #0]
    c1f8:	4c95      	ldr	r4, [pc, #596]	; (c450 <AssemblePacket+0x2b4>)
    c1fa:	7403      	strb	r3, [r0, #16]
    c1fc:	3adc      	subs	r2, #220	; 0xdc
    c1fe:	4b95      	ldr	r3, [pc, #596]	; (c454 <AssemblePacket+0x2b8>)
    c200:	3011      	adds	r0, #17
    c202:	1c61      	adds	r1, r4, #1
    c204:	4798      	blx	r3
    c206:	2315      	movs	r3, #21
    c208:	aa04      	add	r2, sp, #16
    c20a:	8293      	strh	r3, [r2, #20]
    c20c:	2300      	movs	r3, #0
    c20e:	469c      	mov	ip, r3
    c210:	0023      	movs	r3, r4
    c212:	3350      	adds	r3, #80	; 0x50
    c214:	781b      	ldrb	r3, [r3, #0]
    c216:	069b      	lsls	r3, r3, #26
    c218:	d400      	bmi.n	c21c <AssemblePacket+0x80>
    c21a:	e0e2      	b.n	c3e2 <AssemblePacket+0x246>
    c21c:	0023      	movs	r3, r4
    c21e:	33b3      	adds	r3, #179	; 0xb3
    c220:	781a      	ldrb	r2, [r3, #0]
    c222:	4b8d      	ldr	r3, [pc, #564]	; (c458 <AssemblePacket+0x2bc>)
    c224:	781d      	ldrb	r5, [r3, #0]
    c226:	42aa      	cmp	r2, r5
    c228:	d200      	bcs.n	c22c <AssemblePacket+0x90>
    c22a:	e0da      	b.n	c3e2 <AssemblePacket+0x246>
    c22c:	0021      	movs	r1, r4
    c22e:	0026      	movs	r6, r4
    c230:	2780      	movs	r7, #128	; 0x80
    c232:	3196      	adds	r1, #150	; 0x96
    c234:	880b      	ldrh	r3, [r1, #0]
    c236:	36a8      	adds	r6, #168	; 0xa8
    c238:	3301      	adds	r3, #1
    c23a:	b29b      	uxth	r3, r3
    c23c:	800b      	strh	r3, [r1, #0]
    c23e:	7836      	ldrb	r6, [r6, #0]
    c240:	427f      	negs	r7, r7
    c242:	1c38      	adds	r0, r7, #0
    c244:	42b3      	cmp	r3, r6
    c246:	d10f      	bne.n	c268 <AssemblePacket+0xcc>
    c248:	0023      	movs	r3, r4
    c24a:	4662      	mov	r2, ip
    c24c:	33c1      	adds	r3, #193	; 0xc1
    c24e:	701a      	strb	r2, [r3, #0]
    c250:	2040      	movs	r0, #64	; 0x40
    c252:	2310      	movs	r3, #16
    c254:	3460      	adds	r4, #96	; 0x60
    c256:	7822      	ldrb	r2, [r4, #0]
    c258:	4338      	orrs	r0, r7
    c25a:	4313      	orrs	r3, r2
    c25c:	7023      	strb	r3, [r4, #0]
    c25e:	e02e      	b.n	c2be <AssemblePacket+0x122>
    c260:	2240      	movs	r2, #64	; 0x40
    c262:	4313      	orrs	r3, r2
    c264:	7023      	strb	r3, [r4, #0]
    c266:	e7c2      	b.n	c1ee <AssemblePacket+0x52>
    c268:	42b3      	cmp	r3, r6
    c26a:	d928      	bls.n	c2be <AssemblePacket+0x122>
    c26c:	42aa      	cmp	r2, r5
    c26e:	d100      	bne.n	c272 <AssemblePacket+0xd6>
    c270:	e0b0      	b.n	c3d4 <AssemblePacket+0x238>
    c272:	0021      	movs	r1, r4
    c274:	0020      	movs	r0, r4
    c276:	31c1      	adds	r1, #193	; 0xc1
    c278:	780b      	ldrb	r3, [r1, #0]
    c27a:	30a9      	adds	r0, #169	; 0xa9
    c27c:	3301      	adds	r3, #1
    c27e:	b2db      	uxtb	r3, r3
    c280:	700b      	strb	r3, [r1, #0]
    c282:	7800      	ldrb	r0, [r0, #0]
    c284:	3801      	subs	r0, #1
    c286:	4283      	cmp	r3, r0
    c288:	dbe2      	blt.n	c250 <AssemblePacket+0xb4>
    c28a:	4663      	mov	r3, ip
    c28c:	700b      	strb	r3, [r1, #0]
    c28e:	42aa      	cmp	r2, r5
    c290:	d90d      	bls.n	c2ae <AssemblePacket+0x112>
    c292:	2313      	movs	r3, #19
    c294:	a904      	add	r1, sp, #16
    c296:	3a01      	subs	r2, #1
    c298:	185b      	adds	r3, r3, r1
    c29a:	4d6f      	ldr	r5, [pc, #444]	; (c458 <AssemblePacket+0x2bc>)
    c29c:	701a      	strb	r2, [r3, #0]
    c29e:	2613      	movs	r6, #19
    c2a0:	ab04      	add	r3, sp, #16
    c2a2:	18f6      	adds	r6, r6, r3
    c2a4:	782a      	ldrb	r2, [r5, #0]
    c2a6:	7833      	ldrb	r3, [r6, #0]
    c2a8:	429a      	cmp	r2, r3
    c2aa:	d800      	bhi.n	c2ae <AssemblePacket+0x112>
    c2ac:	e084      	b.n	c3b8 <AssemblePacket+0x21c>
    c2ae:	2210      	movs	r2, #16
    c2b0:	2040      	movs	r0, #64	; 0x40
    c2b2:	4b67      	ldr	r3, [pc, #412]	; (c450 <AssemblePacket+0x2b4>)
    c2b4:	4338      	orrs	r0, r7
    c2b6:	3360      	adds	r3, #96	; 0x60
    c2b8:	7819      	ldrb	r1, [r3, #0]
    c2ba:	430a      	orrs	r2, r1
    c2bc:	701a      	strb	r2, [r3, #0]
    c2be:	4b64      	ldr	r3, [pc, #400]	; (c450 <AssemblePacket+0x2b4>)
    c2c0:	2402      	movs	r4, #2
    c2c2:	0019      	movs	r1, r3
    c2c4:	3160      	adds	r1, #96	; 0x60
    c2c6:	780a      	ldrb	r2, [r1, #0]
    c2c8:	4222      	tst	r2, r4
    c2ca:	d003      	beq.n	c2d4 <AssemblePacket+0x138>
    c2cc:	2520      	movs	r5, #32
    c2ce:	43a2      	bics	r2, r4
    c2d0:	4328      	orrs	r0, r5
    c2d2:	700a      	strb	r2, [r1, #0]
    c2d4:	2210      	movs	r2, #16
    c2d6:	0004      	movs	r4, r0
    c2d8:	33ac      	adds	r3, #172	; 0xac
    c2da:	781e      	ldrb	r6, [r3, #0]
    c2dc:	4394      	bics	r4, r2
    c2de:	2e00      	cmp	r6, #0
    c2e0:	d003      	beq.n	c2ea <AssemblePacket+0x14e>
    c2e2:	9b04      	ldr	r3, [sp, #16]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d000      	beq.n	c2ea <AssemblePacket+0x14e>
    c2e8:	e07d      	b.n	c3e6 <AssemblePacket+0x24a>
    c2ea:	230f      	movs	r3, #15
    c2ec:	439c      	bics	r4, r3
    c2ee:	0020      	movs	r0, r4
    c2f0:	ac09      	add	r4, sp, #36	; 0x24
    c2f2:	8825      	ldrh	r5, [r4, #0]
    c2f4:	4f54      	ldr	r7, [pc, #336]	; (c448 <AssemblePacket+0x2ac>)
    c2f6:	2202      	movs	r2, #2
    c2f8:	5578      	strb	r0, [r7, r5]
    c2fa:	1c68      	adds	r0, r5, #1
    c2fc:	b280      	uxth	r0, r0
    c2fe:	19c0      	adds	r0, r0, r7
    c300:	4956      	ldr	r1, [pc, #344]	; (c45c <AssemblePacket+0x2c0>)
    c302:	4b54      	ldr	r3, [pc, #336]	; (c454 <AssemblePacket+0x2b8>)
    c304:	3503      	adds	r5, #3
    c306:	4798      	blx	r3
    c308:	8025      	strh	r5, [r4, #0]
    c30a:	2e00      	cmp	r6, #0
    c30c:	d007      	beq.n	c31e <AssemblePacket+0x182>
    c30e:	9b04      	ldr	r3, [sp, #16]
    c310:	2b00      	cmp	r3, #0
    c312:	d004      	beq.n	c31e <AssemblePacket+0x182>
    c314:	2201      	movs	r2, #1
    c316:	0021      	movs	r1, r4
    c318:	0038      	movs	r0, r7
    c31a:	4b51      	ldr	r3, [pc, #324]	; (c460 <AssemblePacket+0x2c4>)
    c31c:	4798      	blx	r3
    c31e:	466a      	mov	r2, sp
    c320:	8823      	ldrh	r3, [r4, #0]
    c322:	7f12      	ldrb	r2, [r2, #28]
    c324:	1c5d      	adds	r5, r3, #1
    c326:	54fa      	strb	r2, [r7, r3]
    c328:	9b04      	ldr	r3, [sp, #16]
    c32a:	b2ad      	uxth	r5, r5
    c32c:	8025      	strh	r5, [r4, #0]
    c32e:	2b00      	cmp	r3, #0
    c330:	d062      	beq.n	c3f8 <AssemblePacket+0x25c>
    c332:	001a      	movs	r2, r3
    c334:	1978      	adds	r0, r7, r5
    c336:	9905      	ldr	r1, [sp, #20]
    c338:	4b46      	ldr	r3, [pc, #280]	; (c454 <AssemblePacket+0x2b8>)
    c33a:	4798      	blx	r3
    c33c:	466b      	mov	r3, sp
    c33e:	4a44      	ldr	r2, [pc, #272]	; (c450 <AssemblePacket+0x2b4>)
    c340:	7c19      	ldrb	r1, [r3, #16]
    c342:	6813      	ldr	r3, [r2, #0]
    c344:	b2ed      	uxtb	r5, r5
    c346:	0a18      	lsrs	r0, r3, #8
    c348:	7913      	ldrb	r3, [r2, #4]
    c34a:	9501      	str	r5, [sp, #4]
    c34c:	061b      	lsls	r3, r3, #24
    c34e:	4303      	orrs	r3, r0
    c350:	9303      	str	r3, [sp, #12]
    c352:	4b44      	ldr	r3, [pc, #272]	; (c464 <AssemblePacket+0x2c8>)
    c354:	9702      	str	r7, [sp, #8]
    c356:	9300      	str	r3, [sp, #0]
    c358:	6d53      	ldr	r3, [r2, #84]	; 0x54
    c35a:	9805      	ldr	r0, [sp, #20]
    c35c:	2200      	movs	r2, #0
    c35e:	4d42      	ldr	r5, [pc, #264]	; (c468 <AssemblePacket+0x2cc>)
    c360:	47a8      	blx	r5
    c362:	8823      	ldrh	r3, [r4, #0]
    c364:	9a04      	ldr	r2, [sp, #16]
    c366:	189b      	adds	r3, r3, r2
    c368:	8023      	strh	r3, [r4, #0]
    c36a:	4c39      	ldr	r4, [pc, #228]	; (c450 <AssemblePacket+0x2b4>)
    c36c:	ae09      	add	r6, sp, #36	; 0x24
    c36e:	6823      	ldr	r3, [r4, #0]
    c370:	8832      	ldrh	r2, [r6, #0]
    c372:	0a19      	lsrs	r1, r3, #8
    c374:	7923      	ldrb	r3, [r4, #4]
    c376:	3a10      	subs	r2, #16
    c378:	061b      	lsls	r3, r3, #24
    c37a:	430b      	orrs	r3, r1
    c37c:	9300      	str	r3, [sp, #0]
    c37e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    c380:	b2d2      	uxtb	r2, r2
    c382:	2349      	movs	r3, #73	; 0x49
    c384:	2000      	movs	r0, #0
    c386:	4d39      	ldr	r5, [pc, #228]	; (c46c <AssemblePacket+0x2d0>)
    c388:	47a8      	blx	r5
    c38a:	4f2f      	ldr	r7, [pc, #188]	; (c448 <AssemblePacket+0x2ac>)
    c38c:	2210      	movs	r2, #16
    c38e:	492f      	ldr	r1, [pc, #188]	; (c44c <AssemblePacket+0x2b0>)
    c390:	0038      	movs	r0, r7
    c392:	4b30      	ldr	r3, [pc, #192]	; (c454 <AssemblePacket+0x2b8>)
    c394:	4798      	blx	r3
    c396:	7833      	ldrb	r3, [r6, #0]
    c398:	003a      	movs	r2, r7
    c39a:	492c      	ldr	r1, [pc, #176]	; (c44c <AssemblePacket+0x2b0>)
    c39c:	4834      	ldr	r0, [pc, #208]	; (c470 <AssemblePacket+0x2d4>)
    c39e:	4d35      	ldr	r5, [pc, #212]	; (c474 <AssemblePacket+0x2d8>)
    c3a0:	47a8      	blx	r5
    c3a2:	8836      	ldrh	r6, [r6, #0]
    c3a4:	2204      	movs	r2, #4
    c3a6:	19f0      	adds	r0, r6, r7
    c3a8:	4928      	ldr	r1, [pc, #160]	; (c44c <AssemblePacket+0x2b0>)
    c3aa:	4b2a      	ldr	r3, [pc, #168]	; (c454 <AssemblePacket+0x2b8>)
    c3ac:	4798      	blx	r3
    c3ae:	3e0c      	subs	r6, #12
    c3b0:	349a      	adds	r4, #154	; 0x9a
    c3b2:	8026      	strh	r6, [r4, #0]
    c3b4:	b00b      	add	sp, #44	; 0x2c
    c3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3b8:	4b2f      	ldr	r3, [pc, #188]	; (c478 <AssemblePacket+0x2dc>)
    c3ba:	0031      	movs	r1, r6
    c3bc:	2011      	movs	r0, #17
    c3be:	4798      	blx	r3
    c3c0:	7833      	ldrb	r3, [r6, #0]
    c3c2:	2808      	cmp	r0, #8
    c3c4:	d03a      	beq.n	c43c <AssemblePacket+0x2a0>
    c3c6:	782a      	ldrb	r2, [r5, #0]
    c3c8:	429a      	cmp	r2, r3
    c3ca:	d300      	bcc.n	c3ce <AssemblePacket+0x232>
    c3cc:	e767      	b.n	c29e <AssemblePacket+0x102>
    c3ce:	3b01      	subs	r3, #1
    c3d0:	7033      	strb	r3, [r6, #0]
    c3d2:	e764      	b.n	c29e <AssemblePacket+0x102>
    c3d4:	4663      	mov	r3, ip
    c3d6:	800b      	strh	r3, [r1, #0]
    c3d8:	2210      	movs	r2, #16
    c3da:	3460      	adds	r4, #96	; 0x60
    c3dc:	7823      	ldrb	r3, [r4, #0]
    c3de:	4393      	bics	r3, r2
    c3e0:	e73c      	b.n	c25c <AssemblePacket+0xc0>
    c3e2:	2000      	movs	r0, #0
    c3e4:	e7f8      	b.n	c3d8 <AssemblePacket+0x23c>
    c3e6:	4b25      	ldr	r3, [pc, #148]	; (c47c <AssemblePacket+0x2e0>)
    c3e8:	4798      	blx	r3
    c3ea:	220f      	movs	r2, #15
    c3ec:	0003      	movs	r3, r0
    c3ee:	0020      	movs	r0, r4
    c3f0:	4013      	ands	r3, r2
    c3f2:	4390      	bics	r0, r2
    c3f4:	4318      	orrs	r0, r3
    c3f6:	e77b      	b.n	c2f0 <AssemblePacket+0x154>
    c3f8:	4d15      	ldr	r5, [pc, #84]	; (c450 <AssemblePacket+0x2b4>)
    c3fa:	002b      	movs	r3, r5
    c3fc:	33ac      	adds	r3, #172	; 0xac
    c3fe:	781b      	ldrb	r3, [r3, #0]
    c400:	2b00      	cmp	r3, #0
    c402:	d0b2      	beq.n	c36a <AssemblePacket+0x1ce>
    c404:	2616      	movs	r6, #22
    c406:	ab04      	add	r3, sp, #16
    c408:	18f6      	adds	r6, r6, r3
    c40a:	9a04      	ldr	r2, [sp, #16]
    c40c:	0031      	movs	r1, r6
    c40e:	481c      	ldr	r0, [pc, #112]	; (c480 <AssemblePacket+0x2e4>)
    c410:	4b13      	ldr	r3, [pc, #76]	; (c460 <AssemblePacket+0x2c4>)
    c412:	4798      	blx	r3
    c414:	682b      	ldr	r3, [r5, #0]
    c416:	7831      	ldrb	r1, [r6, #0]
    c418:	0a1a      	lsrs	r2, r3, #8
    c41a:	792b      	ldrb	r3, [r5, #4]
    c41c:	9702      	str	r7, [sp, #8]
    c41e:	061b      	lsls	r3, r3, #24
    c420:	4313      	orrs	r3, r2
    c422:	9303      	str	r3, [sp, #12]
    c424:	7823      	ldrb	r3, [r4, #0]
    c426:	9a04      	ldr	r2, [sp, #16]
    c428:	9301      	str	r3, [sp, #4]
    c42a:	4b11      	ldr	r3, [pc, #68]	; (c470 <AssemblePacket+0x2d4>)
    c42c:	4814      	ldr	r0, [pc, #80]	; (c480 <AssemblePacket+0x2e4>)
    c42e:	9300      	str	r3, [sp, #0]
    c430:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    c432:	4d0d      	ldr	r5, [pc, #52]	; (c468 <AssemblePacket+0x2cc>)
    c434:	47a8      	blx	r5
    c436:	8823      	ldrh	r3, [r4, #0]
    c438:	8832      	ldrh	r2, [r6, #0]
    c43a:	e794      	b.n	c366 <AssemblePacket+0x1ca>
    c43c:	34b3      	adds	r4, #179	; 0xb3
    c43e:	7023      	strb	r3, [r4, #0]
    c440:	e735      	b.n	c2ae <AssemblePacket+0x112>
    c442:	46c0      	nop			; (mov r8, r8)
    c444:	00013c29 	.word	0x00013c29
    c448:	20001a35 	.word	0x20001a35
    c44c:	20000f24 	.word	0x20000f24
    c450:	20001908 	.word	0x20001908
    c454:	00013ba5 	.word	0x00013ba5
    c458:	200019c6 	.word	0x200019c6
    c45c:	2000195c 	.word	0x2000195c
    c460:	0000aeb9 	.word	0x0000aeb9
    c464:	2000191d 	.word	0x2000191d
    c468:	0000c0e5 	.word	0x0000c0e5
    c46c:	0000b155 	.word	0x0000b155
    c470:	2000190d 	.word	0x2000190d
    c474:	0000e779 	.word	0x0000e779
    c478:	00008b95 	.word	0x00008b95
    c47c:	0000adb5 	.word	0x0000adb5
    c480:	20001b50 	.word	0x20001b50

0000c484 <UpdateTransactionCompleteCbParams>:
    c484:	2390      	movs	r3, #144	; 0x90
    c486:	2201      	movs	r2, #1
    c488:	b570      	push	{r4, r5, r6, lr}
    c48a:	4915      	ldr	r1, [pc, #84]	; (c4e0 <UpdateTransactionCompleteCbParams+0x5c>)
    c48c:	4c15      	ldr	r4, [pc, #84]	; (c4e4 <UpdateTransactionCompleteCbParams+0x60>)
    c48e:	005b      	lsls	r3, r3, #1
    c490:	54e2      	strb	r2, [r4, r3]
    c492:	784a      	ldrb	r2, [r1, #1]
    c494:	780b      	ldrb	r3, [r1, #0]
    c496:	0212      	lsls	r2, r2, #8
    c498:	431a      	orrs	r2, r3
    c49a:	788b      	ldrb	r3, [r1, #2]
    c49c:	041b      	lsls	r3, r3, #16
    c49e:	431a      	orrs	r2, r3
    c4a0:	78cb      	ldrb	r3, [r1, #3]
    c4a2:	061b      	lsls	r3, r3, #24
    c4a4:	4313      	orrs	r3, r2
    c4a6:	d012      	beq.n	c4ce <UpdateTransactionCompleteCbParams+0x4a>
    c4a8:	0022      	movs	r2, r4
    c4aa:	2504      	movs	r5, #4
    c4ac:	32cc      	adds	r2, #204	; 0xcc
    c4ae:	6812      	ldr	r2, [r2, #0]
    c4b0:	422a      	tst	r2, r5
    c4b2:	d00c      	beq.n	c4ce <UpdateTransactionCompleteCbParams+0x4a>
    c4b4:	0022      	movs	r2, r4
    c4b6:	32d0      	adds	r2, #208	; 0xd0
    c4b8:	6812      	ldr	r2, [r2, #0]
    c4ba:	2a00      	cmp	r2, #0
    c4bc:	d007      	beq.n	c4ce <UpdateTransactionCompleteCbParams+0x4a>
    c4be:	0021      	movs	r1, r4
    c4c0:	31d4      	adds	r1, #212	; 0xd4
    c4c2:	700d      	strb	r5, [r1, #0]
    c4c4:	0025      	movs	r5, r4
    c4c6:	35d8      	adds	r5, #216	; 0xd8
    c4c8:	7028      	strb	r0, [r5, #0]
    c4ca:	0010      	movs	r0, r2
    c4cc:	4798      	blx	r3
    c4ce:	2390      	movs	r3, #144	; 0x90
    c4d0:	005b      	lsls	r3, r3, #1
    c4d2:	5ce3      	ldrb	r3, [r4, r3]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d002      	beq.n	c4de <UpdateTransactionCompleteCbParams+0x5a>
    c4d8:	2300      	movs	r3, #0
    c4da:	34d0      	adds	r4, #208	; 0xd0
    c4dc:	6023      	str	r3, [r4, #0]
    c4de:	bd70      	pop	{r4, r5, r6, pc}
    c4e0:	20001b48 	.word	0x20001b48
    c4e4:	20001908 	.word	0x20001908

0000c4e8 <UpdateRxDataAvailableCbParams>:
    c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ea:	4e13      	ldr	r6, [pc, #76]	; (c538 <UpdateRxDataAvailableCbParams+0x50>)
    c4ec:	7874      	ldrb	r4, [r6, #1]
    c4ee:	7835      	ldrb	r5, [r6, #0]
    c4f0:	0224      	lsls	r4, r4, #8
    c4f2:	432c      	orrs	r4, r5
    c4f4:	78b5      	ldrb	r5, [r6, #2]
    c4f6:	042d      	lsls	r5, r5, #16
    c4f8:	432c      	orrs	r4, r5
    c4fa:	78f5      	ldrb	r5, [r6, #3]
    c4fc:	062d      	lsls	r5, r5, #24
    c4fe:	4325      	orrs	r5, r4
    c500:	d019      	beq.n	c536 <UpdateRxDataAvailableCbParams+0x4e>
    c502:	4c0e      	ldr	r4, [pc, #56]	; (c53c <UpdateRxDataAvailableCbParams+0x54>)
    c504:	2702      	movs	r7, #2
    c506:	0026      	movs	r6, r4
    c508:	36cc      	adds	r6, #204	; 0xcc
    c50a:	6836      	ldr	r6, [r6, #0]
    c50c:	423e      	tst	r6, r7
    c50e:	d012      	beq.n	c536 <UpdateRxDataAvailableCbParams+0x4e>
    c510:	0026      	movs	r6, r4
    c512:	36d4      	adds	r6, #212	; 0xd4
    c514:	7037      	strb	r7, [r6, #0]
    c516:	0027      	movs	r7, r4
    c518:	37d8      	adds	r7, #216	; 0xd8
    c51a:	6038      	str	r0, [r7, #0]
    c51c:	0020      	movs	r0, r4
    c51e:	30dc      	adds	r0, #220	; 0xdc
    c520:	6001      	str	r1, [r0, #0]
    c522:	0021      	movs	r1, r4
    c524:	31e0      	adds	r1, #224	; 0xe0
    c526:	700a      	strb	r2, [r1, #0]
    c528:	0022      	movs	r2, r4
    c52a:	34d0      	adds	r4, #208	; 0xd0
    c52c:	32e1      	adds	r2, #225	; 0xe1
    c52e:	7013      	strb	r3, [r2, #0]
    c530:	0031      	movs	r1, r6
    c532:	6820      	ldr	r0, [r4, #0]
    c534:	47a8      	blx	r5
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	20001b48 	.word	0x20001b48
    c53c:	20001908 	.word	0x20001908

0000c540 <LorawanNotifyAppOnRxdone>:
    c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c542:	4c25      	ldr	r4, [pc, #148]	; (c5d8 <LorawanNotifyAppOnRxdone+0x98>)
    c544:	0007      	movs	r7, r0
    c546:	0023      	movs	r3, r4
    c548:	33c8      	adds	r3, #200	; 0xc8
    c54a:	781b      	ldrb	r3, [r3, #0]
    c54c:	000d      	movs	r5, r1
    c54e:	0016      	movs	r6, r2
    c550:	2b01      	cmp	r3, #1
    c552:	d136      	bne.n	c5c2 <LorawanNotifyAppOnRxdone+0x82>
    c554:	0022      	movs	r2, r4
    c556:	210e      	movs	r1, #14
    c558:	3250      	adds	r2, #80	; 0x50
    c55a:	7813      	ldrb	r3, [r2, #0]
    c55c:	438b      	bics	r3, r1
    c55e:	7013      	strb	r3, [r2, #0]
    c560:	491e      	ldr	r1, [pc, #120]	; (c5dc <LorawanNotifyAppOnRxdone+0x9c>)
    c562:	784a      	ldrb	r2, [r1, #1]
    c564:	780b      	ldrb	r3, [r1, #0]
    c566:	0212      	lsls	r2, r2, #8
    c568:	431a      	orrs	r2, r3
    c56a:	788b      	ldrb	r3, [r1, #2]
    c56c:	041b      	lsls	r3, r3, #16
    c56e:	431a      	orrs	r2, r3
    c570:	78cb      	ldrb	r3, [r1, #3]
    c572:	061b      	lsls	r3, r3, #24
    c574:	4313      	orrs	r3, r2
    c576:	d023      	beq.n	c5c0 <LorawanNotifyAppOnRxdone+0x80>
    c578:	0022      	movs	r2, r4
    c57a:	2120      	movs	r1, #32
    c57c:	3260      	adds	r2, #96	; 0x60
    c57e:	7813      	ldrb	r3, [r2, #0]
    c580:	438b      	bics	r3, r1
    c582:	7013      	strb	r3, [r2, #0]
    c584:	0023      	movs	r3, r4
    c586:	33c8      	adds	r3, #200	; 0xc8
    c588:	781b      	ldrb	r3, [r3, #0]
    c58a:	7878      	ldrb	r0, [r7, #1]
    c58c:	469c      	mov	ip, r3
    c58e:	78fa      	ldrb	r2, [r7, #3]
    c590:	78b9      	ldrb	r1, [r7, #2]
    c592:	793b      	ldrb	r3, [r7, #4]
    c594:	4667      	mov	r7, ip
    c596:	0209      	lsls	r1, r1, #8
    c598:	4301      	orrs	r1, r0
    c59a:	0410      	lsls	r0, r2, #16
    c59c:	4308      	orrs	r0, r1
    c59e:	061b      	lsls	r3, r3, #24
    c5a0:	4318      	orrs	r0, r3
    c5a2:	0032      	movs	r2, r6
    c5a4:	2308      	movs	r3, #8
    c5a6:	0029      	movs	r1, r5
    c5a8:	2f04      	cmp	r7, #4
    c5aa:	d112      	bne.n	c5d2 <LorawanNotifyAppOnRxdone+0x92>
    c5ac:	4d0c      	ldr	r5, [pc, #48]	; (c5e0 <LorawanNotifyAppOnRxdone+0xa0>)
    c5ae:	47a8      	blx	r5
    c5b0:	2390      	movs	r3, #144	; 0x90
    c5b2:	005b      	lsls	r3, r3, #1
    c5b4:	5ce3      	ldrb	r3, [r4, r3]
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	d102      	bne.n	c5c0 <LorawanNotifyAppOnRxdone+0x80>
    c5ba:	2008      	movs	r0, #8
    c5bc:	4b09      	ldr	r3, [pc, #36]	; (c5e4 <LorawanNotifyAppOnRxdone+0xa4>)
    c5be:	4798      	blx	r3
    c5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5c2:	2b04      	cmp	r3, #4
    c5c4:	d1cc      	bne.n	c560 <LorawanNotifyAppOnRxdone+0x20>
    c5c6:	0023      	movs	r3, r4
    c5c8:	33bc      	adds	r3, #188	; 0xbc
    c5ca:	7818      	ldrb	r0, [r3, #0]
    c5cc:	4b06      	ldr	r3, [pc, #24]	; (c5e8 <LorawanNotifyAppOnRxdone+0xa8>)
    c5ce:	4798      	blx	r3
    c5d0:	e7c6      	b.n	c560 <LorawanNotifyAppOnRxdone+0x20>
    c5d2:	4d06      	ldr	r5, [pc, #24]	; (c5ec <LorawanNotifyAppOnRxdone+0xac>)
    c5d4:	47a8      	blx	r5
    c5d6:	e7eb      	b.n	c5b0 <LorawanNotifyAppOnRxdone+0x70>
    c5d8:	20001908 	.word	0x20001908
    c5dc:	20001b48 	.word	0x20001b48
    c5e0:	0000ea71 	.word	0x0000ea71
    c5e4:	0000c485 	.word	0x0000c485
    c5e8:	00009bf9 	.word	0x00009bf9
    c5ec:	0000c4e9 	.word	0x0000c4e9

0000c5f0 <LorawanSetReceiveWindow2Parameters>:
    c5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c5f2:	466b      	mov	r3, sp
    c5f4:	1cdd      	adds	r5, r3, #3
    c5f6:	9001      	str	r0, [sp, #4]
    c5f8:	7029      	strb	r1, [r5, #0]
    c5fa:	2001      	movs	r0, #1
    c5fc:	a901      	add	r1, sp, #4
    c5fe:	4c09      	ldr	r4, [pc, #36]	; (c624 <LorawanSetReceiveWindow2Parameters+0x34>)
    c600:	47a0      	blx	r4
    c602:	2808      	cmp	r0, #8
    c604:	d002      	beq.n	c60c <LorawanSetReceiveWindow2Parameters+0x1c>
    c606:	240a      	movs	r4, #10
    c608:	0020      	movs	r0, r4
    c60a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c60c:	0029      	movs	r1, r5
    c60e:	200f      	movs	r0, #15
    c610:	47a0      	blx	r4
    c612:	0004      	movs	r4, r0
    c614:	2808      	cmp	r0, #8
    c616:	d1f6      	bne.n	c606 <LorawanSetReceiveWindow2Parameters+0x16>
    c618:	7829      	ldrb	r1, [r5, #0]
    c61a:	9801      	ldr	r0, [sp, #4]
    c61c:	4b02      	ldr	r3, [pc, #8]	; (c628 <LorawanSetReceiveWindow2Parameters+0x38>)
    c61e:	4798      	blx	r3
    c620:	e7f2      	b.n	c608 <LorawanSetReceiveWindow2Parameters+0x18>
    c622:	46c0      	nop			; (mov r8, r8)
    c624:	00008b95 	.word	0x00008b95
    c628:	0000b69d 	.word	0x0000b69d

0000c62c <LorawanSetFrequency>:
    c62c:	b507      	push	{r0, r1, r2, lr}
    c62e:	466b      	mov	r3, sp
    c630:	9100      	str	r1, [sp, #0]
    c632:	7118      	strb	r0, [r3, #4]
    c634:	4669      	mov	r1, sp
    c636:	2000      	movs	r0, #0
    c638:	4b01      	ldr	r3, [pc, #4]	; (c640 <LorawanSetFrequency+0x14>)
    c63a:	4798      	blx	r3
    c63c:	bd0e      	pop	{r1, r2, r3, pc}
    c63e:	46c0      	nop			; (mov r8, r8)
    c640:	00008bb1 	.word	0x00008bb1

0000c644 <LorawanGetReceiveWindow2Parameters>:
    c644:	4a06      	ldr	r2, [pc, #24]	; (c660 <LorawanGetReceiveWindow2Parameters+0x1c>)
    c646:	0013      	movs	r3, r2
    c648:	334e      	adds	r3, #78	; 0x4e
    c64a:	781b      	ldrb	r3, [r3, #0]
    c64c:	7103      	strb	r3, [r0, #4]
    c64e:	0013      	movs	r3, r2
    c650:	324c      	adds	r2, #76	; 0x4c
    c652:	334a      	adds	r3, #74	; 0x4a
    c654:	8819      	ldrh	r1, [r3, #0]
    c656:	8813      	ldrh	r3, [r2, #0]
    c658:	041b      	lsls	r3, r3, #16
    c65a:	430b      	orrs	r3, r1
    c65c:	6003      	str	r3, [r0, #0]
    c65e:	4770      	bx	lr
    c660:	20001908 	.word	0x20001908

0000c664 <LORAWAN_GetAttr>:
    c664:	b530      	push	{r4, r5, lr}
    c666:	000b      	movs	r3, r1
    c668:	b085      	sub	sp, #20
    c66a:	0014      	movs	r4, r2
    c66c:	2835      	cmp	r0, #53	; 0x35
    c66e:	d837      	bhi.n	c6e0 <LORAWAN_GetAttr+0x7c>
    c670:	f004 f99a 	bl	109a8 <__gnu_thumb1_case_uhi>
    c674:	00580039 	.word	0x00580039
    c678:	006c005c 	.word	0x006c005c
    c67c:	00680064 	.word	0x00680064
    c680:	00760070 	.word	0x00760070
    c684:	007e007b 	.word	0x007e007b
    c688:	00840081 	.word	0x00840081
    c68c:	008f0087 	.word	0x008f0087
    c690:	00950092 	.word	0x00950092
    c694:	009c0099 	.word	0x009c0099
    c698:	00a2009f 	.word	0x00a2009f
    c69c:	00ce00a5 	.word	0x00ce00a5
    c6a0:	00a800ab 	.word	0x00a800ab
    c6a4:	00d500db 	.word	0x00d500db
    c6a8:	00c400c9 	.word	0x00c400c9
    c6ac:	003600bd 	.word	0x003600bd
    c6b0:	00b6008c 	.word	0x00b6008c
    c6b4:	00b300ba 	.word	0x00b300ba
    c6b8:	00d200b0 	.word	0x00d200b0
    c6bc:	003f00d8 	.word	0x003f00d8
    c6c0:	0041003f 	.word	0x0041003f
    c6c4:	00f100e3 	.word	0x00f100e3
    c6c8:	00e800ed 	.word	0x00e800ed
    c6cc:	003600f4 	.word	0x003600f4
    c6d0:	00fc00f8 	.word	0x00fc00f8
    c6d4:	01060101 	.word	0x01060101
    c6d8:	010f010b 	.word	0x010f010b
    c6dc:	01150112 	.word	0x01150112
    c6e0:	200a      	movs	r0, #10
    c6e2:	b005      	add	sp, #20
    c6e4:	bd30      	pop	{r4, r5, pc}
    c6e6:	2208      	movs	r2, #8
    c6e8:	4971      	ldr	r1, [pc, #452]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c6ea:	313d      	adds	r1, #61	; 0x3d
    c6ec:	0020      	movs	r0, r4
    c6ee:	4b71      	ldr	r3, [pc, #452]	; (c8b4 <LORAWAN_GetAttr+0x250>)
    c6f0:	4798      	blx	r3
    c6f2:	2008      	movs	r0, #8
    c6f4:	e7f5      	b.n	c6e2 <LORAWAN_GetAttr+0x7e>
    c6f6:	4669      	mov	r1, sp
    c6f8:	4b6f      	ldr	r3, [pc, #444]	; (c8b8 <LORAWAN_GetAttr+0x254>)
    c6fa:	201d      	movs	r0, #29
    c6fc:	4798      	blx	r3
    c6fe:	4b6c      	ldr	r3, [pc, #432]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c700:	a902      	add	r1, sp, #8
    c702:	33e8      	adds	r3, #232	; 0xe8
    c704:	881b      	ldrh	r3, [r3, #0]
    c706:	2208      	movs	r2, #8
    c708:	808b      	strh	r3, [r1, #4]
    c70a:	466b      	mov	r3, sp
    c70c:	791b      	ldrb	r3, [r3, #4]
    c70e:	718b      	strb	r3, [r1, #6]
    c710:	466b      	mov	r3, sp
    c712:	881b      	ldrh	r3, [r3, #0]
    c714:	800b      	strh	r3, [r1, #0]
    c716:	466b      	mov	r3, sp
    c718:	885b      	ldrh	r3, [r3, #2]
    c71a:	804b      	strh	r3, [r1, #2]
    c71c:	466b      	mov	r3, sp
    c71e:	795b      	ldrb	r3, [r3, #5]
    c720:	71cb      	strb	r3, [r1, #7]
    c722:	e7e3      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c724:	4962      	ldr	r1, [pc, #392]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c726:	2208      	movs	r2, #8
    c728:	3135      	adds	r1, #53	; 0x35
    c72a:	e7df      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c72c:	4b60      	ldr	r3, [pc, #384]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c72e:	681a      	ldr	r2, [r3, #0]
    c730:	791b      	ldrb	r3, [r3, #4]
    c732:	0a12      	lsrs	r2, r2, #8
    c734:	061b      	lsls	r3, r3, #24
    c736:	4313      	orrs	r3, r2
    c738:	6023      	str	r3, [r4, #0]
    c73a:	e7da      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c73c:	495c      	ldr	r1, [pc, #368]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c73e:	2210      	movs	r2, #16
    c740:	3105      	adds	r1, #5
    c742:	e7d3      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c744:	495a      	ldr	r1, [pc, #360]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c746:	2210      	movs	r2, #16
    c748:	3115      	adds	r1, #21
    c74a:	e7cf      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c74c:	4958      	ldr	r1, [pc, #352]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c74e:	2210      	movs	r2, #16
    c750:	3125      	adds	r1, #37	; 0x25
    c752:	e7cb      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c754:	4b56      	ldr	r3, [pc, #344]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c756:	3350      	adds	r3, #80	; 0x50
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	069b      	lsls	r3, r3, #26
    c75c:	0fdb      	lsrs	r3, r3, #31
    c75e:	e002      	b.n	c766 <LORAWAN_GetAttr+0x102>
    c760:	4b53      	ldr	r3, [pc, #332]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c762:	33b3      	adds	r3, #179	; 0xb3
    c764:	781b      	ldrb	r3, [r3, #0]
    c766:	7023      	strb	r3, [r4, #0]
    c768:	e7c3      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c76a:	4b51      	ldr	r3, [pc, #324]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c76c:	33b5      	adds	r3, #181	; 0xb5
    c76e:	e7f9      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c770:	4b4f      	ldr	r3, [pc, #316]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c772:	33cb      	adds	r3, #203	; 0xcb
    c774:	e7f6      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c776:	4b4e      	ldr	r3, [pc, #312]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c77a:	e7dd      	b.n	c738 <LORAWAN_GetAttr+0xd4>
    c77c:	4b4c      	ldr	r3, [pc, #304]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c780:	e7da      	b.n	c738 <LORAWAN_GetAttr+0xd4>
    c782:	4b4b      	ldr	r3, [pc, #300]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c784:	339c      	adds	r3, #156	; 0x9c
    c786:	881b      	ldrh	r3, [r3, #0]
    c788:	8023      	strh	r3, [r4, #0]
    c78a:	e7b2      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c78c:	4b48      	ldr	r3, [pc, #288]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c78e:	339e      	adds	r3, #158	; 0x9e
    c790:	e7f9      	b.n	c786 <LORAWAN_GetAttr+0x122>
    c792:	4b47      	ldr	r3, [pc, #284]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c794:	33a0      	adds	r3, #160	; 0xa0
    c796:	e7f6      	b.n	c786 <LORAWAN_GetAttr+0x122>
    c798:	4b45      	ldr	r3, [pc, #276]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c79a:	33a2      	adds	r3, #162	; 0xa2
    c79c:	e7f3      	b.n	c786 <LORAWAN_GetAttr+0x122>
    c79e:	4b44      	ldr	r3, [pc, #272]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7a0:	33a4      	adds	r3, #164	; 0xa4
    c7a2:	881b      	ldrh	r3, [r3, #0]
    c7a4:	e7df      	b.n	c766 <LORAWAN_GetAttr+0x102>
    c7a6:	4b42      	ldr	r3, [pc, #264]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7a8:	33a8      	adds	r3, #168	; 0xa8
    c7aa:	e7db      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7ac:	4b40      	ldr	r3, [pc, #256]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7ae:	33a9      	adds	r3, #169	; 0xa9
    c7b0:	e7d8      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7b2:	4b3f      	ldr	r3, [pc, #252]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7b4:	33a6      	adds	r3, #166	; 0xa6
    c7b6:	e7f4      	b.n	c7a2 <LORAWAN_GetAttr+0x13e>
    c7b8:	4b3d      	ldr	r3, [pc, #244]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7ba:	33ae      	adds	r3, #174	; 0xae
    c7bc:	e7d2      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7be:	4b3c      	ldr	r3, [pc, #240]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7c0:	33ad      	adds	r3, #173	; 0xad
    c7c2:	e7cf      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7c4:	4b3a      	ldr	r3, [pc, #232]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7c6:	33b4      	adds	r3, #180	; 0xb4
    c7c8:	e7cc      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7ca:	4b39      	ldr	r3, [pc, #228]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7cc:	3350      	adds	r3, #80	; 0x50
    c7ce:	781b      	ldrb	r3, [r3, #0]
    c7d0:	06db      	lsls	r3, r3, #27
    c7d2:	e7c3      	b.n	c75c <LORAWAN_GetAttr+0xf8>
    c7d4:	4b36      	ldr	r3, [pc, #216]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7d6:	33b2      	adds	r3, #178	; 0xb2
    c7d8:	e7c4      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7da:	4b35      	ldr	r3, [pc, #212]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7dc:	33b1      	adds	r3, #177	; 0xb1
    c7de:	e7c1      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c7e0:	4b33      	ldr	r3, [pc, #204]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7e2:	3364      	adds	r3, #100	; 0x64
    c7e4:	781b      	ldrb	r3, [r3, #0]
    c7e6:	e7cf      	b.n	c788 <LORAWAN_GetAttr+0x124>
    c7e8:	4b31      	ldr	r3, [pc, #196]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c7ec:	e7a4      	b.n	c738 <LORAWAN_GetAttr+0xd4>
    c7ee:	2016      	movs	r0, #22
    c7f0:	781b      	ldrb	r3, [r3, #0]
    c7f2:	a902      	add	r1, sp, #8
    c7f4:	700b      	strb	r3, [r1, #0]
    c7f6:	4b31      	ldr	r3, [pc, #196]	; (c8bc <LORAWAN_GetAttr+0x258>)
    c7f8:	4798      	blx	r3
    c7fa:	e77a      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	a902      	add	r1, sp, #8
    c800:	700b      	strb	r3, [r1, #0]
    c802:	2012      	movs	r0, #18
    c804:	e7f7      	b.n	c7f6 <LORAWAN_GetAttr+0x192>
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	a902      	add	r1, sp, #8
    c80a:	700b      	strb	r3, [r1, #0]
    c80c:	2000      	movs	r0, #0
    c80e:	e7f2      	b.n	c7f6 <LORAWAN_GetAttr+0x192>
    c810:	0010      	movs	r0, r2
    c812:	4b2b      	ldr	r3, [pc, #172]	; (c8c0 <LORAWAN_GetAttr+0x25c>)
    c814:	4798      	blx	r3
    c816:	e76c      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c818:	4b25      	ldr	r3, [pc, #148]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c81a:	33ca      	adds	r3, #202	; 0xca
    c81c:	e7a2      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c81e:	4b24      	ldr	r3, [pc, #144]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c820:	33c8      	adds	r3, #200	; 0xc8
    c822:	e79f      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c824:	4b22      	ldr	r3, [pc, #136]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c826:	33c9      	adds	r3, #201	; 0xc9
    c828:	e79c      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c82a:	21fa      	movs	r1, #250	; 0xfa
    c82c:	4b20      	ldr	r3, [pc, #128]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c82e:	0089      	lsls	r1, r1, #2
    c830:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    c832:	4b24      	ldr	r3, [pc, #144]	; (c8c4 <LORAWAN_GetAttr+0x260>)
    c834:	4798      	blx	r3
    c836:	8020      	strh	r0, [r4, #0]
    c838:	e75b      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c83a:	4b1d      	ldr	r3, [pc, #116]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c83c:	3352      	adds	r3, #82	; 0x52
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	079b      	lsls	r3, r3, #30
    c842:	e78b      	b.n	c75c <LORAWAN_GetAttr+0xf8>
    c844:	491a      	ldr	r1, [pc, #104]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c846:	2210      	movs	r2, #16
    c848:	310d      	adds	r1, #13
    c84a:	31ff      	adds	r1, #255	; 0xff
    c84c:	e74e      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c84e:	4918      	ldr	r1, [pc, #96]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c850:	2210      	movs	r2, #16
    c852:	31fc      	adds	r1, #252	; 0xfc
    c854:	e74a      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c856:	2204      	movs	r2, #4
    c858:	491b      	ldr	r1, [pc, #108]	; (c8c8 <LORAWAN_GetAttr+0x264>)
    c85a:	e747      	b.n	c6ec <LORAWAN_GetAttr+0x88>
    c85c:	4b14      	ldr	r3, [pc, #80]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c85e:	33fe      	adds	r3, #254	; 0xfe
    c860:	8bdb      	ldrh	r3, [r3, #30]
    c862:	e791      	b.n	c788 <LORAWAN_GetAttr+0x124>
    c864:	0010      	movs	r0, r2
    c866:	4b19      	ldr	r3, [pc, #100]	; (c8cc <LORAWAN_GetAttr+0x268>)
    c868:	4798      	blx	r3
    c86a:	e73a      	b.n	c6e2 <LORAWAN_GetAttr+0x7e>
    c86c:	0011      	movs	r1, r2
    c86e:	4b12      	ldr	r3, [pc, #72]	; (c8b8 <LORAWAN_GetAttr+0x254>)
    c870:	201f      	movs	r0, #31
    c872:	4798      	blx	r3
    c874:	e73d      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c876:	4b0e      	ldr	r3, [pc, #56]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c878:	3360      	adds	r3, #96	; 0x60
    c87a:	781b      	ldrb	r3, [r3, #0]
    c87c:	071b      	lsls	r3, r3, #28
    c87e:	e76d      	b.n	c75c <LORAWAN_GetAttr+0xf8>
    c880:	4b0b      	ldr	r3, [pc, #44]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c882:	3360      	adds	r3, #96	; 0x60
    c884:	781b      	ldrb	r3, [r3, #0]
    c886:	07db      	lsls	r3, r3, #31
    c888:	e768      	b.n	c75c <LORAWAN_GetAttr+0xf8>
    c88a:	202f      	movs	r0, #47	; 0x2f
    c88c:	4b0b      	ldr	r3, [pc, #44]	; (c8bc <LORAWAN_GetAttr+0x258>)
    c88e:	4798      	blx	r3
    c890:	e727      	b.n	c6e2 <LORAWAN_GetAttr+0x7e>
    c892:	490f      	ldr	r1, [pc, #60]	; (c8d0 <LORAWAN_GetAttr+0x26c>)
    c894:	2024      	movs	r0, #36	; 0x24
    c896:	e7f9      	b.n	c88c <LORAWAN_GetAttr+0x228>
    c898:	4b05      	ldr	r3, [pc, #20]	; (c8b0 <LORAWAN_GetAttr+0x24c>)
    c89a:	33b0      	adds	r3, #176	; 0xb0
    c89c:	e762      	b.n	c764 <LORAWAN_GetAttr+0x100>
    c89e:	4b0d      	ldr	r3, [pc, #52]	; (c8d4 <LORAWAN_GetAttr+0x270>)
    c8a0:	4798      	blx	r3
    c8a2:	4b0d      	ldr	r3, [pc, #52]	; (c8d8 <LORAWAN_GetAttr+0x274>)
    c8a4:	0005      	movs	r5, r0
    c8a6:	4798      	blx	r3
    c8a8:	3808      	subs	r0, #8
    c8aa:	1b40      	subs	r0, r0, r5
    c8ac:	7020      	strb	r0, [r4, #0]
    c8ae:	e720      	b.n	c6f2 <LORAWAN_GetAttr+0x8e>
    c8b0:	20001908 	.word	0x20001908
    c8b4:	00013ba5 	.word	0x00013ba5
    c8b8:	0000ef35 	.word	0x0000ef35
    c8bc:	00008b79 	.word	0x00008b79
    c8c0:	0000c645 	.word	0x0000c645
    c8c4:	000109bd 	.word	0x000109bd
    c8c8:	20001a00 	.word	0x20001a00
    c8cc:	00008cdd 	.word	0x00008cdd
    c8d0:	200019bb 	.word	0x200019bb
    c8d4:	0000adb5 	.word	0x0000adb5
    c8d8:	0000ae5d 	.word	0x0000ae5d

0000c8dc <LORAWAN_TxDone>:
    c8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8de:	6843      	ldr	r3, [r0, #4]
    c8e0:	b08f      	sub	sp, #60	; 0x3c
    c8e2:	ae07      	add	r6, sp, #28
    c8e4:	7805      	ldrb	r5, [r0, #0]
    c8e6:	9303      	str	r3, [sp, #12]
    c8e8:	0032      	movs	r2, r6
    c8ea:	4bd3      	ldr	r3, [pc, #844]	; (cc38 <LORAWAN_TxDone+0x35c>)
    c8ec:	2100      	movs	r1, #0
    c8ee:	2027      	movs	r0, #39	; 0x27
    c8f0:	4798      	blx	r3
    c8f2:	4cd2      	ldr	r4, [pc, #840]	; (cc3c <LORAWAN_TxDone+0x360>)
    c8f4:	0023      	movs	r3, r4
    c8f6:	3350      	adds	r3, #80	; 0x50
    c8f8:	781b      	ldrb	r3, [r3, #0]
    c8fa:	2b7f      	cmp	r3, #127	; 0x7f
    c8fc:	d900      	bls.n	c900 <LORAWAN_TxDone+0x24>
    c8fe:	e202      	b.n	cd06 <LORAWAN_TxDone+0x42a>
    c900:	4bcf      	ldr	r3, [pc, #828]	; (cc40 <LORAWAN_TxDone+0x364>)
    c902:	201b      	movs	r0, #27
    c904:	781a      	ldrb	r2, [r3, #0]
    c906:	2a04      	cmp	r2, #4
    c908:	d100      	bne.n	c90c <LORAWAN_TxDone+0x30>
    c90a:	e0b1      	b.n	ca70 <LORAWAN_TxDone+0x194>
    c90c:	781b      	ldrb	r3, [r3, #0]
    c90e:	2b02      	cmp	r3, #2
    c910:	d11f      	bne.n	c952 <LORAWAN_TxDone+0x76>
    c912:	3321      	adds	r3, #33	; 0x21
    c914:	33ff      	adds	r3, #255	; 0xff
    c916:	5ce2      	ldrb	r2, [r4, r3]
    c918:	2a00      	cmp	r2, #0
    c91a:	d005      	beq.n	c928 <LORAWAN_TxDone+0x4c>
    c91c:	2200      	movs	r2, #0
    c91e:	49c9      	ldr	r1, [pc, #804]	; (cc44 <LORAWAN_TxDone+0x368>)
    c920:	54e2      	strb	r2, [r4, r3]
    c922:	200b      	movs	r0, #11
    c924:	4bc8      	ldr	r3, [pc, #800]	; (cc48 <LORAWAN_TxDone+0x36c>)
    c926:	4798      	blx	r3
    c928:	2d07      	cmp	r5, #7
    c92a:	d000      	beq.n	c92e <LORAWAN_TxDone+0x52>
    c92c:	e0a5      	b.n	ca7a <LORAWAN_TxDone+0x19e>
    c92e:	79f3      	ldrb	r3, [r6, #7]
    c930:	2b00      	cmp	r3, #0
    c932:	d00e      	beq.n	c952 <LORAWAN_TxDone+0x76>
    c934:	0023      	movs	r3, r4
    c936:	3360      	adds	r3, #96	; 0x60
    c938:	7818      	ldrb	r0, [r3, #0]
    c93a:	0026      	movs	r6, r4
    c93c:	2304      	movs	r3, #4
    c93e:	36e6      	adds	r6, #230	; 0xe6
    c940:	4018      	ands	r0, r3
    c942:	4dc2      	ldr	r5, [pc, #776]	; (cc4c <LORAWAN_TxDone+0x370>)
    c944:	d007      	beq.n	c956 <LORAWAN_TxDone+0x7a>
    c946:	2000      	movs	r0, #0
    c948:	2109      	movs	r1, #9
    c94a:	8030      	strh	r0, [r6, #0]
    c94c:	47a8      	blx	r5
    c94e:	4bc0      	ldr	r3, [pc, #768]	; (cc50 <LORAWAN_TxDone+0x374>)
    c950:	4798      	blx	r3
    c952:	b00f      	add	sp, #60	; 0x3c
    c954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c956:	8833      	ldrh	r3, [r6, #0]
    c958:	2109      	movs	r1, #9
    c95a:	3301      	adds	r3, #1
    c95c:	8033      	strh	r3, [r6, #0]
    c95e:	47a8      	blx	r5
    c960:	0023      	movs	r3, r4
    c962:	33e8      	adds	r3, #232	; 0xe8
    c964:	881b      	ldrh	r3, [r3, #0]
    c966:	4abb      	ldr	r2, [pc, #748]	; (cc54 <LORAWAN_TxDone+0x378>)
    c968:	4293      	cmp	r3, r2
    c96a:	d002      	beq.n	c972 <LORAWAN_TxDone+0x96>
    c96c:	8832      	ldrh	r2, [r6, #0]
    c96e:	429a      	cmp	r2, r3
    c970:	d266      	bcs.n	ca40 <LORAWAN_TxDone+0x164>
    c972:	2395      	movs	r3, #149	; 0x95
    c974:	005b      	lsls	r3, r3, #1
    c976:	5ce3      	ldrb	r3, [r4, r3]
    c978:	2b00      	cmp	r3, #0
    c97a:	d061      	beq.n	ca40 <LORAWAN_TxDone+0x164>
    c97c:	2701      	movs	r7, #1
    c97e:	0023      	movs	r3, r4
    c980:	a905      	add	r1, sp, #20
    c982:	700f      	strb	r7, [r1, #0]
    c984:	33b5      	adds	r3, #181	; 0xb5
    c986:	781b      	ldrb	r3, [r3, #0]
    c988:	aa0b      	add	r2, sp, #44	; 0x2c
    c98a:	704b      	strb	r3, [r1, #1]
    c98c:	0023      	movs	r3, r4
    c98e:	33b3      	adds	r3, #179	; 0xb3
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	202d      	movs	r0, #45	; 0x2d
    c994:	708b      	strb	r3, [r1, #2]
    c996:	4bb0      	ldr	r3, [pc, #704]	; (cc58 <LORAWAN_TxDone+0x37c>)
    c998:	4798      	blx	r3
    c99a:	2808      	cmp	r0, #8
    c99c:	d135      	bne.n	ca0a <LORAWAN_TxDone+0x12e>
    c99e:	a806      	add	r0, sp, #24
    c9a0:	4bae      	ldr	r3, [pc, #696]	; (cc5c <LORAWAN_TxDone+0x380>)
    c9a2:	7007      	strb	r7, [r0, #0]
    c9a4:	4798      	blx	r3
    c9a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c9a8:	990c      	ldr	r1, [sp, #48]	; 0x30
    c9aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c9ac:	4bac      	ldr	r3, [pc, #688]	; (cc60 <LORAWAN_TxDone+0x384>)
    c9ae:	4798      	blx	r3
    c9b0:	0023      	movs	r3, r4
    c9b2:	339a      	adds	r3, #154	; 0x9a
    c9b4:	881b      	ldrh	r3, [r3, #0]
    c9b6:	a809      	add	r0, sp, #36	; 0x24
    c9b8:	7003      	strb	r3, [r0, #0]
    c9ba:	4baa      	ldr	r3, [pc, #680]	; (cc64 <LORAWAN_TxDone+0x388>)
    c9bc:	6043      	str	r3, [r0, #4]
    c9be:	4baa      	ldr	r3, [pc, #680]	; (cc68 <LORAWAN_TxDone+0x38c>)
    c9c0:	4798      	blx	r3
    c9c2:	1e06      	subs	r6, r0, #0
    c9c4:	d108      	bne.n	c9d8 <LORAWAN_TxDone+0xfc>
    c9c6:	220e      	movs	r2, #14
    c9c8:	3450      	adds	r4, #80	; 0x50
    c9ca:	7823      	ldrb	r3, [r4, #0]
    c9cc:	4393      	bics	r3, r2
    c9ce:	001a      	movs	r2, r3
    c9d0:	2302      	movs	r3, #2
    c9d2:	4313      	orrs	r3, r2
    c9d4:	7023      	strb	r3, [r4, #0]
    c9d6:	e7bc      	b.n	c952 <LORAWAN_TxDone+0x76>
    c9d8:	0023      	movs	r3, r4
    c9da:	3360      	adds	r3, #96	; 0x60
    c9dc:	7818      	ldrb	r0, [r3, #0]
    c9de:	0023      	movs	r3, r4
    c9e0:	4038      	ands	r0, r7
    c9e2:	33e6      	adds	r3, #230	; 0xe6
    c9e4:	4fa1      	ldr	r7, [pc, #644]	; (cc6c <LORAWAN_TxDone+0x390>)
    c9e6:	4ca2      	ldr	r4, [pc, #648]	; (cc70 <LORAWAN_TxDone+0x394>)
    c9e8:	2800      	cmp	r0, #0
    c9ea:	d009      	beq.n	ca00 <LORAWAN_TxDone+0x124>
    c9ec:	2000      	movs	r0, #0
    c9ee:	2109      	movs	r1, #9
    c9f0:	8018      	strh	r0, [r3, #0]
    c9f2:	47a8      	blx	r5
    c9f4:	4b9f      	ldr	r3, [pc, #636]	; (cc74 <LORAWAN_TxDone+0x398>)
    c9f6:	4798      	blx	r3
    c9f8:	47a0      	blx	r4
    c9fa:	0030      	movs	r0, r6
    c9fc:	47b8      	blx	r7
    c9fe:	e7a8      	b.n	c952 <LORAWAN_TxDone+0x76>
    ca00:	2109      	movs	r1, #9
    ca02:	8018      	strh	r0, [r3, #0]
    ca04:	47a8      	blx	r5
    ca06:	4b9c      	ldr	r3, [pc, #624]	; (cc78 <LORAWAN_TxDone+0x39c>)
    ca08:	e7f5      	b.n	c9f6 <LORAWAN_TxDone+0x11a>
    ca0a:	0023      	movs	r3, r4
    ca0c:	3360      	adds	r3, #96	; 0x60
    ca0e:	7818      	ldrb	r0, [r3, #0]
    ca10:	0023      	movs	r3, r4
    ca12:	4007      	ands	r7, r0
    ca14:	4e95      	ldr	r6, [pc, #596]	; (cc6c <LORAWAN_TxDone+0x390>)
    ca16:	33e6      	adds	r3, #230	; 0xe6
    ca18:	4c95      	ldr	r4, [pc, #596]	; (cc70 <LORAWAN_TxDone+0x394>)
    ca1a:	2f00      	cmp	r7, #0
    ca1c:	d00a      	beq.n	ca34 <LORAWAN_TxDone+0x158>
    ca1e:	2700      	movs	r7, #0
    ca20:	2109      	movs	r1, #9
    ca22:	0038      	movs	r0, r7
    ca24:	801f      	strh	r7, [r3, #0]
    ca26:	47a8      	blx	r5
    ca28:	4b92      	ldr	r3, [pc, #584]	; (cc74 <LORAWAN_TxDone+0x398>)
    ca2a:	4798      	blx	r3
    ca2c:	47a0      	blx	r4
    ca2e:	0038      	movs	r0, r7
    ca30:	47b0      	blx	r6
    ca32:	e78e      	b.n	c952 <LORAWAN_TxDone+0x76>
    ca34:	2109      	movs	r1, #9
    ca36:	0038      	movs	r0, r7
    ca38:	801f      	strh	r7, [r3, #0]
    ca3a:	47a8      	blx	r5
    ca3c:	4b8e      	ldr	r3, [pc, #568]	; (cc78 <LORAWAN_TxDone+0x39c>)
    ca3e:	e7f4      	b.n	ca2a <LORAWAN_TxDone+0x14e>
    ca40:	0023      	movs	r3, r4
    ca42:	2000      	movs	r0, #0
    ca44:	33e6      	adds	r3, #230	; 0xe6
    ca46:	2109      	movs	r1, #9
    ca48:	8018      	strh	r0, [r3, #0]
    ca4a:	47a8      	blx	r5
    ca4c:	0022      	movs	r2, r4
    ca4e:	210e      	movs	r1, #14
    ca50:	3250      	adds	r2, #80	; 0x50
    ca52:	7813      	ldrb	r3, [r2, #0]
    ca54:	3460      	adds	r4, #96	; 0x60
    ca56:	438b      	bics	r3, r1
    ca58:	7013      	strb	r3, [r2, #0]
    ca5a:	2220      	movs	r2, #32
    ca5c:	7823      	ldrb	r3, [r4, #0]
    ca5e:	4393      	bics	r3, r2
    ca60:	7023      	strb	r3, [r4, #0]
    ca62:	4c83      	ldr	r4, [pc, #524]	; (cc70 <LORAWAN_TxDone+0x394>)
    ca64:	07db      	lsls	r3, r3, #31
    ca66:	d506      	bpl.n	ca76 <LORAWAN_TxDone+0x19a>
    ca68:	4b82      	ldr	r3, [pc, #520]	; (cc74 <LORAWAN_TxDone+0x398>)
    ca6a:	4798      	blx	r3
    ca6c:	47a0      	blx	r4
    ca6e:	2007      	movs	r0, #7
    ca70:	4b7e      	ldr	r3, [pc, #504]	; (cc6c <LORAWAN_TxDone+0x390>)
    ca72:	4798      	blx	r3
    ca74:	e76d      	b.n	c952 <LORAWAN_TxDone+0x76>
    ca76:	4b80      	ldr	r3, [pc, #512]	; (cc78 <LORAWAN_TxDone+0x39c>)
    ca78:	e7f7      	b.n	ca6a <LORAWAN_TxDone+0x18e>
    ca7a:	2d00      	cmp	r5, #0
    ca7c:	d000      	beq.n	ca80 <LORAWAN_TxDone+0x1a4>
    ca7e:	e768      	b.n	c952 <LORAWAN_TxDone+0x76>
    ca80:	0023      	movs	r3, r4
    ca82:	33d0      	adds	r3, #208	; 0xd0
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	0026      	movs	r6, r4
    ca88:	9302      	str	r3, [sp, #8]
    ca8a:	0023      	movs	r3, r4
    ca8c:	33e6      	adds	r3, #230	; 0xe6
    ca8e:	801d      	strh	r5, [r3, #0]
    ca90:	2109      	movs	r1, #9
    ca92:	4b6e      	ldr	r3, [pc, #440]	; (cc4c <LORAWAN_TxDone+0x370>)
    ca94:	0028      	movs	r0, r5
    ca96:	36af      	adds	r6, #175	; 0xaf
    ca98:	4798      	blx	r3
    ca9a:	7833      	ldrb	r3, [r6, #0]
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d000      	beq.n	caa2 <LORAWAN_TxDone+0x1c6>
    caa0:	e0b4      	b.n	cc0c <LORAWAN_TxDone+0x330>
    caa2:	0027      	movs	r7, r4
    caa4:	37b0      	adds	r7, #176	; 0xb0
    caa6:	783a      	ldrb	r2, [r7, #0]
    caa8:	2a00      	cmp	r2, #0
    caaa:	d000      	beq.n	caae <LORAWAN_TxDone+0x1d2>
    caac:	e0ae      	b.n	cc0c <LORAWAN_TxDone+0x330>
    caae:	4b73      	ldr	r3, [pc, #460]	; (cc7c <LORAWAN_TxDone+0x3a0>)
    cab0:	781b      	ldrb	r3, [r3, #0]
    cab2:	07db      	lsls	r3, r3, #31
    cab4:	d513      	bpl.n	cade <LORAWAN_TxDone+0x202>
    cab6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    cab8:	2116      	movs	r1, #22
    caba:	3301      	adds	r3, #1
    cabc:	6563      	str	r3, [r4, #84]	; 0x54
    cabe:	0028      	movs	r0, r5
    cac0:	4b62      	ldr	r3, [pc, #392]	; (cc4c <LORAWAN_TxDone+0x370>)
    cac2:	4798      	blx	r3
    cac4:	9b02      	ldr	r3, [sp, #8]
    cac6:	781b      	ldrb	r3, [r3, #0]
    cac8:	2b01      	cmp	r3, #1
    caca:	d000      	beq.n	cace <LORAWAN_TxDone+0x1f2>
    cacc:	e09a      	b.n	cc04 <LORAWAN_TxDone+0x328>
    cace:	0022      	movs	r2, r4
    cad0:	3260      	adds	r2, #96	; 0x60
    cad2:	7811      	ldrb	r1, [r2, #0]
    cad4:	430b      	orrs	r3, r1
    cad6:	7013      	strb	r3, [r2, #0]
    cad8:	783b      	ldrb	r3, [r7, #0]
    cada:	3301      	adds	r3, #1
    cadc:	703b      	strb	r3, [r7, #0]
    cade:	0023      	movs	r3, r4
    cae0:	2200      	movs	r2, #0
    cae2:	33c4      	adds	r3, #196	; 0xc4
    cae4:	701a      	strb	r2, [r3, #0]
    cae6:	0022      	movs	r2, r4
    cae8:	210e      	movs	r1, #14
    caea:	2604      	movs	r6, #4
    caec:	3250      	adds	r2, #80	; 0x50
    caee:	7813      	ldrb	r3, [r2, #0]
    caf0:	0027      	movs	r7, r4
    caf2:	438b      	bics	r3, r1
    caf4:	4333      	orrs	r3, r6
    caf6:	7013      	strb	r3, [r2, #0]
    caf8:	0023      	movs	r3, r4
    cafa:	33b3      	adds	r3, #179	; 0xb3
    cafc:	781b      	ldrb	r3, [r3, #0]
    cafe:	a906      	add	r1, sp, #24
    cb00:	708b      	strb	r3, [r1, #2]
    cb02:	0023      	movs	r3, r4
    cb04:	33c2      	adds	r3, #194	; 0xc2
    cb06:	781b      	ldrb	r3, [r3, #0]
    cb08:	3760      	adds	r7, #96	; 0x60
    cb0a:	704b      	strb	r3, [r1, #1]
    cb0c:	783b      	ldrb	r3, [r7, #0]
    cb0e:	ad0b      	add	r5, sp, #44	; 0x2c
    cb10:	075b      	lsls	r3, r3, #29
    cb12:	0fdb      	lsrs	r3, r3, #31
    cb14:	700b      	strb	r3, [r1, #0]
    cb16:	002a      	movs	r2, r5
    cb18:	4b4f      	ldr	r3, [pc, #316]	; (cc58 <LORAWAN_TxDone+0x37c>)
    cb1a:	2019      	movs	r0, #25
    cb1c:	4798      	blx	r3
    cb1e:	783b      	ldrb	r3, [r7, #0]
    cb20:	4233      	tst	r3, r6
    cb22:	d100      	bne.n	cb26 <LORAWAN_TxDone+0x24a>
    cb24:	e0b4      	b.n	cc90 <LORAWAN_TxDone+0x3b4>
    cb26:	2300      	movs	r3, #0
    cb28:	af09      	add	r7, sp, #36	; 0x24
    cb2a:	703b      	strb	r3, [r7, #0]
    cb2c:	003a      	movs	r2, r7
    cb2e:	2100      	movs	r1, #0
    cb30:	2009      	movs	r0, #9
    cb32:	4b49      	ldr	r3, [pc, #292]	; (cc58 <LORAWAN_TxDone+0x37c>)
    cb34:	4798      	blx	r3
    cb36:	0039      	movs	r1, r7
    cb38:	aa05      	add	r2, sp, #20
    cb3a:	0030      	movs	r0, r6
    cb3c:	4b46      	ldr	r3, [pc, #280]	; (cc58 <LORAWAN_TxDone+0x37c>)
    cb3e:	4798      	blx	r3
    cb40:	0021      	movs	r1, r4
    cb42:	792b      	ldrb	r3, [r5, #4]
    cb44:	3149      	adds	r1, #73	; 0x49
    cb46:	700b      	strb	r3, [r1, #0]
    cb48:	0023      	movs	r3, r4
    cb4a:	270b      	movs	r7, #11
    cb4c:	782a      	ldrb	r2, [r5, #0]
    cb4e:	3345      	adds	r3, #69	; 0x45
    cb50:	701a      	strb	r2, [r3, #0]
    cb52:	786a      	ldrb	r2, [r5, #1]
    cb54:	2004      	movs	r0, #4
    cb56:	705a      	strb	r2, [r3, #1]
    cb58:	78aa      	ldrb	r2, [r5, #2]
    cb5a:	2600      	movs	r6, #0
    cb5c:	709a      	strb	r2, [r3, #2]
    cb5e:	78ea      	ldrb	r2, [r5, #3]
    cb60:	70da      	strb	r2, [r3, #3]
    cb62:	ab02      	add	r3, sp, #8
    cb64:	18ff      	adds	r7, r7, r3
    cb66:	003a      	movs	r2, r7
    cb68:	4b3b      	ldr	r3, [pc, #236]	; (cc58 <LORAWAN_TxDone+0x37c>)
    cb6a:	4798      	blx	r3
    cb6c:	0023      	movs	r3, r4
    cb6e:	3360      	adds	r3, #96	; 0x60
    cb70:	781d      	ldrb	r5, [r3, #0]
    cb72:	2304      	movs	r3, #4
    cb74:	401d      	ands	r5, r3
    cb76:	2300      	movs	r3, #0
    cb78:	0022      	movs	r2, r4
    cb7a:	56fb      	ldrsb	r3, [r7, r3]
    cb7c:	42b5      	cmp	r5, r6
    cb7e:	d100      	bne.n	cb82 <LORAWAN_TxDone+0x2a6>
    cb80:	e089      	b.n	cc96 <LORAWAN_TxDone+0x3ba>
    cb82:	2100      	movs	r1, #0
    cb84:	32a2      	adds	r2, #162	; 0xa2
    cb86:	8817      	ldrh	r7, [r2, #0]
    cb88:	aa05      	add	r2, sp, #20
    cb8a:	5651      	ldrsb	r1, [r2, r1]
    cb8c:	4d3c      	ldr	r5, [pc, #240]	; (cc80 <LORAWAN_TxDone+0x3a4>)
    cb8e:	187a      	adds	r2, r7, r1
    cb90:	9202      	str	r2, [sp, #8]
    cb92:	0022      	movs	r2, r4
    cb94:	32a0      	adds	r2, #160	; 0xa0
    cb96:	8811      	ldrh	r1, [r2, #0]
    cb98:	27fa      	movs	r7, #250	; 0xfa
    cb9a:	18c9      	adds	r1, r1, r3
    cb9c:	232c      	movs	r3, #44	; 0x2c
    cb9e:	33ff      	adds	r3, #255	; 0xff
    cba0:	5ce3      	ldrb	r3, [r4, r3]
    cba2:	00bf      	lsls	r7, r7, #2
    cba4:	1ac9      	subs	r1, r1, r3
    cba6:	0023      	movs	r3, r4
    cba8:	33b6      	adds	r3, #182	; 0xb6
    cbaa:	7818      	ldrb	r0, [r3, #0]
    cbac:	4379      	muls	r1, r7
    cbae:	4b35      	ldr	r3, [pc, #212]	; (cc84 <LORAWAN_TxDone+0x3a8>)
    cbb0:	0032      	movs	r2, r6
    cbb2:	9600      	str	r6, [sp, #0]
    cbb4:	47a8      	blx	r5
    cbb6:	232c      	movs	r3, #44	; 0x2c
    cbb8:	33ff      	adds	r3, #255	; 0xff
    cbba:	5ce1      	ldrb	r1, [r4, r3]
    cbbc:	9b02      	ldr	r3, [sp, #8]
    cbbe:	34b7      	adds	r4, #183	; 0xb7
    cbc0:	1a59      	subs	r1, r3, r1
    cbc2:	7820      	ldrb	r0, [r4, #0]
    cbc4:	4379      	muls	r1, r7
    cbc6:	9600      	str	r6, [sp, #0]
    cbc8:	4b2f      	ldr	r3, [pc, #188]	; (cc88 <LORAWAN_TxDone+0x3ac>)
    cbca:	0032      	movs	r2, r6
    cbcc:	47a8      	blx	r5
    cbce:	4b1b      	ldr	r3, [pc, #108]	; (cc3c <LORAWAN_TxDone+0x360>)
    cbd0:	2102      	movs	r1, #2
    cbd2:	001a      	movs	r2, r3
    cbd4:	32e4      	adds	r2, #228	; 0xe4
    cbd6:	7812      	ldrb	r2, [r2, #0]
    cbd8:	4011      	ands	r1, r2
    cbda:	d100      	bne.n	cbde <LORAWAN_TxDone+0x302>
    cbdc:	e08e      	b.n	ccfc <LORAWAN_TxDone+0x420>
    cbde:	466a      	mov	r2, sp
    cbe0:	8992      	ldrh	r2, [r2, #12]
    cbe2:	a909      	add	r1, sp, #36	; 0x24
    cbe4:	800a      	strh	r2, [r1, #0]
    cbe6:	001a      	movs	r2, r3
    cbe8:	3260      	adds	r2, #96	; 0x60
    cbea:	7812      	ldrb	r2, [r2, #0]
    cbec:	3364      	adds	r3, #100	; 0x64
    cbee:	0752      	lsls	r2, r2, #29
    cbf0:	0fd2      	lsrs	r2, r2, #31
    cbf2:	710a      	strb	r2, [r1, #4]
    cbf4:	781a      	ldrb	r2, [r3, #0]
    cbf6:	2301      	movs	r3, #1
    cbf8:	4093      	lsls	r3, r2
    cbfa:	201f      	movs	r0, #31
    cbfc:	804b      	strh	r3, [r1, #2]
    cbfe:	4b23      	ldr	r3, [pc, #140]	; (cc8c <LORAWAN_TxDone+0x3b0>)
    cc00:	4798      	blx	r3
    cc02:	e6a6      	b.n	c952 <LORAWAN_TxDone+0x76>
    cc04:	7833      	ldrb	r3, [r6, #0]
    cc06:	3301      	adds	r3, #1
    cc08:	7033      	strb	r3, [r6, #0]
    cc0a:	e768      	b.n	cade <LORAWAN_TxDone+0x202>
    cc0c:	0022      	movs	r2, r4
    cc0e:	3250      	adds	r2, #80	; 0x50
    cc10:	7811      	ldrb	r1, [r2, #0]
    cc12:	2201      	movs	r2, #1
    cc14:	4211      	tst	r1, r2
    cc16:	d100      	bne.n	cc1a <LORAWAN_TxDone+0x33e>
    cc18:	e761      	b.n	cade <LORAWAN_TxDone+0x202>
    cc1a:	0021      	movs	r1, r4
    cc1c:	3160      	adds	r1, #96	; 0x60
    cc1e:	7809      	ldrb	r1, [r1, #0]
    cc20:	4211      	tst	r1, r2
    cc22:	d104      	bne.n	cc2e <LORAWAN_TxDone+0x352>
    cc24:	189b      	adds	r3, r3, r2
    cc26:	0022      	movs	r2, r4
    cc28:	32af      	adds	r2, #175	; 0xaf
    cc2a:	7013      	strb	r3, [r2, #0]
    cc2c:	e757      	b.n	cade <LORAWAN_TxDone+0x202>
    cc2e:	0022      	movs	r2, r4
    cc30:	32b0      	adds	r2, #176	; 0xb0
    cc32:	7813      	ldrb	r3, [r2, #0]
    cc34:	3301      	adds	r3, #1
    cc36:	e7f8      	b.n	cc2a <LORAWAN_TxDone+0x34e>
    cc38:	0000c665 	.word	0x0000c665
    cc3c:	20001908 	.word	0x20001908
    cc40:	20001a34 	.word	0x20001a34
    cc44:	20001a29 	.word	0x20001a29
    cc48:	0000f021 	.word	0x0000f021
    cc4c:	00008e5d 	.word	0x00008e5d
    cc50:	0000b715 	.word	0x0000b715
    cc54:	0000ffff 	.word	0x0000ffff
    cc58:	00008b79 	.word	0x00008b79
    cc5c:	00010351 	.word	0x00010351
    cc60:	0000bc55 	.word	0x0000bc55
    cc64:	20001a45 	.word	0x20001a45
    cc68:	0000f971 	.word	0x0000f971
    cc6c:	0000c485 	.word	0x0000c485
    cc70:	0000ad71 	.word	0x0000ad71
    cc74:	0000b6c1 	.word	0x0000b6c1
    cc78:	0000b6f1 	.word	0x0000b6f1
    cc7c:	20001958 	.word	0x20001958
    cc80:	000098f5 	.word	0x000098f5
    cc84:	0000bbdd 	.word	0x0000bbdd
    cc88:	0000d095 	.word	0x0000d095
    cc8c:	00008bb1 	.word	0x00008bb1
    cc90:	aa05      	add	r2, sp, #20
    cc92:	492d      	ldr	r1, [pc, #180]	; (cd48 <LORAWAN_TxDone+0x46c>)
    cc94:	e751      	b.n	cb3a <LORAWAN_TxDone+0x25e>
    cc96:	329c      	adds	r2, #156	; 0x9c
    cc98:	8811      	ldrh	r1, [r2, #0]
    cc9a:	26fa      	movs	r6, #250	; 0xfa
    cc9c:	18c9      	adds	r1, r1, r3
    cc9e:	232c      	movs	r3, #44	; 0x2c
    cca0:	33ff      	adds	r3, #255	; 0xff
    cca2:	5ce3      	ldrb	r3, [r4, r3]
    cca4:	00b6      	lsls	r6, r6, #2
    cca6:	1ac9      	subs	r1, r1, r3
    cca8:	0023      	movs	r3, r4
    ccaa:	33b8      	adds	r3, #184	; 0xb8
    ccac:	7818      	ldrb	r0, [r3, #0]
    ccae:	4371      	muls	r1, r6
    ccb0:	4b26      	ldr	r3, [pc, #152]	; (cd4c <LORAWAN_TxDone+0x470>)
    ccb2:	9500      	str	r5, [sp, #0]
    ccb4:	002a      	movs	r2, r5
    ccb6:	4f26      	ldr	r7, [pc, #152]	; (cd50 <LORAWAN_TxDone+0x474>)
    ccb8:	47b8      	blx	r7
    ccba:	0023      	movs	r3, r4
    ccbc:	33c8      	adds	r3, #200	; 0xc8
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	2b04      	cmp	r3, #4
    ccc2:	d105      	bne.n	ccd0 <LORAWAN_TxDone+0x3f4>
    ccc4:	2000      	movs	r0, #0
    ccc6:	ab05      	add	r3, sp, #20
    ccc8:	5618      	ldrsb	r0, [r3, r0]
    ccca:	4b22      	ldr	r3, [pc, #136]	; (cd54 <LORAWAN_TxDone+0x478>)
    cccc:	4798      	blx	r3
    ccce:	e77e      	b.n	cbce <LORAWAN_TxDone+0x2f2>
    ccd0:	2b01      	cmp	r3, #1
    ccd2:	d000      	beq.n	ccd6 <LORAWAN_TxDone+0x3fa>
    ccd4:	e77b      	b.n	cbce <LORAWAN_TxDone+0x2f2>
    ccd6:	0023      	movs	r3, r4
    ccd8:	339e      	adds	r3, #158	; 0x9e
    ccda:	8819      	ldrh	r1, [r3, #0]
    ccdc:	ab05      	add	r3, sp, #20
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	002a      	movs	r2, r5
    cce2:	b25b      	sxtb	r3, r3
    cce4:	18c9      	adds	r1, r1, r3
    cce6:	232c      	movs	r3, #44	; 0x2c
    cce8:	33ff      	adds	r3, #255	; 0xff
    ccea:	5ce3      	ldrb	r3, [r4, r3]
    ccec:	34b9      	adds	r4, #185	; 0xb9
    ccee:	1ac9      	subs	r1, r1, r3
    ccf0:	7820      	ldrb	r0, [r4, #0]
    ccf2:	4371      	muls	r1, r6
    ccf4:	9500      	str	r5, [sp, #0]
    ccf6:	4b18      	ldr	r3, [pc, #96]	; (cd58 <LORAWAN_TxDone+0x47c>)
    ccf8:	47b8      	blx	r7
    ccfa:	e768      	b.n	cbce <LORAWAN_TxDone+0x2f2>
    ccfc:	0753      	lsls	r3, r2, #29
    ccfe:	d400      	bmi.n	cd02 <LORAWAN_TxDone+0x426>
    cd00:	e627      	b.n	c952 <LORAWAN_TxDone+0x76>
    cd02:	2020      	movs	r0, #32
    cd04:	e77b      	b.n	cbfe <LORAWAN_TxDone+0x322>
    cd06:	4915      	ldr	r1, [pc, #84]	; (cd5c <LORAWAN_TxDone+0x480>)
    cd08:	784a      	ldrb	r2, [r1, #1]
    cd0a:	780b      	ldrb	r3, [r1, #0]
    cd0c:	0212      	lsls	r2, r2, #8
    cd0e:	431a      	orrs	r2, r3
    cd10:	788b      	ldrb	r3, [r1, #2]
    cd12:	041b      	lsls	r3, r3, #16
    cd14:	431a      	orrs	r2, r3
    cd16:	78cb      	ldrb	r3, [r1, #3]
    cd18:	061b      	lsls	r3, r3, #24
    cd1a:	4313      	orrs	r3, r2
    cd1c:	d100      	bne.n	cd20 <LORAWAN_TxDone+0x444>
    cd1e:	e618      	b.n	c952 <LORAWAN_TxDone+0x76>
    cd20:	4a0f      	ldr	r2, [pc, #60]	; (cd60 <LORAWAN_TxDone+0x484>)
    cd22:	7811      	ldrb	r1, [r2, #0]
    cd24:	221c      	movs	r2, #28
    cd26:	2904      	cmp	r1, #4
    cd28:	d003      	beq.n	cd32 <LORAWAN_TxDone+0x456>
    cd2a:	2200      	movs	r2, #0
    cd2c:	2d07      	cmp	r5, #7
    cd2e:	d100      	bne.n	cd32 <LORAWAN_TxDone+0x456>
    cd30:	002a      	movs	r2, r5
    cd32:	0021      	movs	r1, r4
    cd34:	2004      	movs	r0, #4
    cd36:	31d4      	adds	r1, #212	; 0xd4
    cd38:	7008      	strb	r0, [r1, #0]
    cd3a:	0020      	movs	r0, r4
    cd3c:	34d0      	adds	r4, #208	; 0xd0
    cd3e:	30d8      	adds	r0, #216	; 0xd8
    cd40:	7002      	strb	r2, [r0, #0]
    cd42:	6820      	ldr	r0, [r4, #0]
    cd44:	4798      	blx	r3
    cd46:	e604      	b.n	c952 <LORAWAN_TxDone+0x76>
    cd48:	20001956 	.word	0x20001956
    cd4c:	0000bbdd 	.word	0x0000bbdd
    cd50:	000098f5 	.word	0x000098f5
    cd54:	0000e9c1 	.word	0x0000e9c1
    cd58:	0000d095 	.word	0x0000d095
    cd5c:	20001b48 	.word	0x20001b48
    cd60:	20001a34 	.word	0x20001a34

0000cd64 <radioCallback>:
    cd64:	4b10      	ldr	r3, [pc, #64]	; (cda8 <radioCallback+0x44>)
    cd66:	b510      	push	{r4, lr}
    cd68:	7018      	strb	r0, [r3, #0]
    cd6a:	3801      	subs	r0, #1
    cd6c:	b2c0      	uxtb	r0, r0
    cd6e:	000c      	movs	r4, r1
    cd70:	281f      	cmp	r0, #31
    cd72:	d809      	bhi.n	cd88 <radioCallback+0x24>
    cd74:	2301      	movs	r3, #1
    cd76:	4083      	lsls	r3, r0
    cd78:	4a0c      	ldr	r2, [pc, #48]	; (cdac <radioCallback+0x48>)
    cd7a:	4213      	tst	r3, r2
    cd7c:	d109      	bne.n	cd92 <radioCallback+0x2e>
    cd7e:	220a      	movs	r2, #10
    cd80:	4213      	tst	r3, r2
    cd82:	d102      	bne.n	cd8a <radioCallback+0x26>
    cd84:	2b00      	cmp	r3, #0
    cd86:	db08      	blt.n	cd9a <radioCallback+0x36>
    cd88:	bd10      	pop	{r4, pc}
    cd8a:	0008      	movs	r0, r1
    cd8c:	4b08      	ldr	r3, [pc, #32]	; (cdb0 <radioCallback+0x4c>)
    cd8e:	4798      	blx	r3
    cd90:	e7fa      	b.n	cd88 <radioCallback+0x24>
    cd92:	2002      	movs	r0, #2
    cd94:	4b07      	ldr	r3, [pc, #28]	; (cdb4 <radioCallback+0x50>)
    cd96:	4798      	blx	r3
    cd98:	e7f6      	b.n	cd88 <radioCallback+0x24>
    cd9a:	4b07      	ldr	r3, [pc, #28]	; (cdb8 <radioCallback+0x54>)
    cd9c:	681b      	ldr	r3, [r3, #0]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d0f2      	beq.n	cd88 <radioCallback+0x24>
    cda2:	4798      	blx	r3
    cda4:	6020      	str	r0, [r4, #0]
    cda6:	e7ef      	b.n	cd88 <radioCallback+0x24>
    cda8:	20001a34 	.word	0x20001a34
    cdac:	00008081 	.word	0x00008081
    cdb0:	0000c8dd 	.word	0x0000c8dd
    cdb4:	0000eeb1 	.word	0x0000eeb1
    cdb8:	20001b44 	.word	0x20001b44

0000cdbc <LorawanCheckAndDoRetryOnTimeout>:
    cdbc:	b513      	push	{r0, r1, r4, lr}
    cdbe:	4c34      	ldr	r4, [pc, #208]	; (ce90 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    cdc0:	0023      	movs	r3, r4
    cdc2:	3360      	adds	r3, #96	; 0x60
    cdc4:	781b      	ldrb	r3, [r3, #0]
    cdc6:	0022      	movs	r2, r4
    cdc8:	07db      	lsls	r3, r3, #31
    cdca:	d54e      	bpl.n	ce6a <LorawanCheckAndDoRetryOnTimeout+0xae>
    cdcc:	0023      	movs	r3, r4
    cdce:	32b0      	adds	r2, #176	; 0xb0
    cdd0:	33ae      	adds	r3, #174	; 0xae
    cdd2:	7812      	ldrb	r2, [r2, #0]
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	429a      	cmp	r2, r3
    cdd8:	d839      	bhi.n	ce4e <LorawanCheckAndDoRetryOnTimeout+0x92>
    cdda:	2395      	movs	r3, #149	; 0x95
    cddc:	005b      	lsls	r3, r3, #1
    cdde:	5ce3      	ldrb	r3, [r4, r3]
    cde0:	2b00      	cmp	r3, #0
    cde2:	d034      	beq.n	ce4e <LorawanCheckAndDoRetryOnTimeout+0x92>
    cde4:	0023      	movs	r3, r4
    cde6:	33c8      	adds	r3, #200	; 0xc8
    cde8:	781b      	ldrb	r3, [r3, #0]
    cdea:	2b01      	cmp	r3, #1
    cdec:	d11a      	bne.n	ce24 <LorawanCheckAndDoRetryOnTimeout+0x68>
    cdee:	0021      	movs	r1, r4
    cdf0:	220e      	movs	r2, #14
    cdf2:	3150      	adds	r1, #80	; 0x50
    cdf4:	780b      	ldrb	r3, [r1, #0]
    cdf6:	4393      	bics	r3, r2
    cdf8:	001a      	movs	r2, r3
    cdfa:	230c      	movs	r3, #12
    cdfc:	4313      	orrs	r3, r2
    cdfe:	700b      	strb	r3, [r1, #0]
    ce00:	0023      	movs	r3, r4
    ce02:	33a6      	adds	r3, #166	; 0xa6
    ce04:	8819      	ldrh	r1, [r3, #0]
    ce06:	232c      	movs	r3, #44	; 0x2c
    ce08:	33ff      	adds	r3, #255	; 0xff
    ce0a:	5ce3      	ldrb	r3, [r4, r3]
    ce0c:	2200      	movs	r2, #0
    ce0e:	1acb      	subs	r3, r1, r3
    ce10:	21fa      	movs	r1, #250	; 0xfa
    ce12:	34bc      	adds	r4, #188	; 0xbc
    ce14:	0089      	lsls	r1, r1, #2
    ce16:	7820      	ldrb	r0, [r4, #0]
    ce18:	4359      	muls	r1, r3
    ce1a:	9200      	str	r2, [sp, #0]
    ce1c:	4b1d      	ldr	r3, [pc, #116]	; (ce94 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    ce1e:	4c1e      	ldr	r4, [pc, #120]	; (ce98 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    ce20:	47a0      	blx	r4
    ce22:	bd13      	pop	{r0, r1, r4, pc}
    ce24:	2b04      	cmp	r3, #4
    ce26:	d1fc      	bne.n	ce22 <LorawanCheckAndDoRetryOnTimeout+0x66>
    ce28:	4b1c      	ldr	r3, [pc, #112]	; (ce9c <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    ce2a:	4798      	blx	r3
    ce2c:	349a      	adds	r4, #154	; 0x9a
    ce2e:	300d      	adds	r0, #13
    ce30:	8823      	ldrh	r3, [r4, #0]
    ce32:	b280      	uxth	r0, r0
    ce34:	4283      	cmp	r3, r0
    ce36:	d802      	bhi.n	ce3e <LorawanCheckAndDoRetryOnTimeout+0x82>
    ce38:	4b19      	ldr	r3, [pc, #100]	; (cea0 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    ce3a:	4798      	blx	r3
    ce3c:	e7f1      	b.n	ce22 <LorawanCheckAndDoRetryOnTimeout+0x66>
    ce3e:	4b19      	ldr	r3, [pc, #100]	; (cea4 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    ce40:	4798      	blx	r3
    ce42:	4b19      	ldr	r3, [pc, #100]	; (cea8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    ce44:	4798      	blx	r3
    ce46:	200e      	movs	r0, #14
    ce48:	4b18      	ldr	r3, [pc, #96]	; (ceac <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    ce4a:	4798      	blx	r3
    ce4c:	e7e9      	b.n	ce22 <LorawanCheckAndDoRetryOnTimeout+0x66>
    ce4e:	4b15      	ldr	r3, [pc, #84]	; (cea4 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    ce50:	4798      	blx	r3
    ce52:	4b15      	ldr	r3, [pc, #84]	; (cea8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    ce54:	4798      	blx	r3
    ce56:	34c8      	adds	r4, #200	; 0xc8
    ce58:	4b14      	ldr	r3, [pc, #80]	; (ceac <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    ce5a:	2012      	movs	r0, #18
    ce5c:	4798      	blx	r3
    ce5e:	7823      	ldrb	r3, [r4, #0]
    ce60:	2b04      	cmp	r3, #4
    ce62:	d1de      	bne.n	ce22 <LorawanCheckAndDoRetryOnTimeout+0x66>
    ce64:	4b12      	ldr	r3, [pc, #72]	; (ceb0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    ce66:	4798      	blx	r3
    ce68:	e7db      	b.n	ce22 <LorawanCheckAndDoRetryOnTimeout+0x66>
    ce6a:	0023      	movs	r3, r4
    ce6c:	32af      	adds	r2, #175	; 0xaf
    ce6e:	33ad      	adds	r3, #173	; 0xad
    ce70:	7812      	ldrb	r2, [r2, #0]
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	429a      	cmp	r2, r3
    ce76:	d804      	bhi.n	ce82 <LorawanCheckAndDoRetryOnTimeout+0xc6>
    ce78:	2395      	movs	r3, #149	; 0x95
    ce7a:	005b      	lsls	r3, r3, #1
    ce7c:	5ce3      	ldrb	r3, [r4, r3]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d1da      	bne.n	ce38 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    ce82:	4b0c      	ldr	r3, [pc, #48]	; (ceb4 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    ce84:	4798      	blx	r3
    ce86:	4b08      	ldr	r3, [pc, #32]	; (cea8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    ce88:	4798      	blx	r3
    ce8a:	2008      	movs	r0, #8
    ce8c:	e7dc      	b.n	ce48 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    ce8e:	46c0      	nop			; (mov r8, r8)
    ce90:	20001908 	.word	0x20001908
    ce94:	0000ceb9 	.word	0x0000ceb9
    ce98:	000098f5 	.word	0x000098f5
    ce9c:	0000ae5d 	.word	0x0000ae5d
    cea0:	0000bcc1 	.word	0x0000bcc1
    cea4:	0000b6c1 	.word	0x0000b6c1
    cea8:	0000ad71 	.word	0x0000ad71
    ceac:	0000c485 	.word	0x0000c485
    ceb0:	0000f955 	.word	0x0000f955
    ceb4:	0000b6f1 	.word	0x0000b6f1

0000ceb8 <AckRetransmissionCallback>:
    ceb8:	b510      	push	{r4, lr}
    ceba:	4c1c      	ldr	r4, [pc, #112]	; (cf2c <AckRetransmissionCallback+0x74>)
    cebc:	0023      	movs	r3, r4
    cebe:	3350      	adds	r3, #80	; 0x50
    cec0:	781b      	ldrb	r3, [r3, #0]
    cec2:	2b7f      	cmp	r3, #127	; 0x7f
    cec4:	d82e      	bhi.n	cf24 <AckRetransmissionCallback+0x6c>
    cec6:	0023      	movs	r3, r4
    cec8:	33c8      	adds	r3, #200	; 0xc8
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	2b04      	cmp	r3, #4
    cece:	d102      	bne.n	ced6 <AckRetransmissionCallback+0x1e>
    ced0:	4b17      	ldr	r3, [pc, #92]	; (cf30 <AckRetransmissionCallback+0x78>)
    ced2:	4798      	blx	r3
    ced4:	e01f      	b.n	cf16 <AckRetransmissionCallback+0x5e>
    ced6:	2b01      	cmp	r3, #1
    ced8:	d11d      	bne.n	cf16 <AckRetransmissionCallback+0x5e>
    ceda:	0022      	movs	r2, r4
    cedc:	0023      	movs	r3, r4
    cede:	32b0      	adds	r2, #176	; 0xb0
    cee0:	33ae      	adds	r3, #174	; 0xae
    cee2:	7812      	ldrb	r2, [r2, #0]
    cee4:	781b      	ldrb	r3, [r3, #0]
    cee6:	429a      	cmp	r2, r3
    cee8:	d816      	bhi.n	cf18 <AckRetransmissionCallback+0x60>
    ceea:	2395      	movs	r3, #149	; 0x95
    ceec:	005b      	lsls	r3, r3, #1
    ceee:	5ce3      	ldrb	r3, [r4, r3]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d011      	beq.n	cf18 <AckRetransmissionCallback+0x60>
    cef4:	4b0f      	ldr	r3, [pc, #60]	; (cf34 <AckRetransmissionCallback+0x7c>)
    cef6:	4798      	blx	r3
    cef8:	349a      	adds	r4, #154	; 0x9a
    cefa:	300d      	adds	r0, #13
    cefc:	8823      	ldrh	r3, [r4, #0]
    cefe:	b280      	uxth	r0, r0
    cf00:	4283      	cmp	r3, r0
    cf02:	d801      	bhi.n	cf08 <AckRetransmissionCallback+0x50>
    cf04:	4b0c      	ldr	r3, [pc, #48]	; (cf38 <AckRetransmissionCallback+0x80>)
    cf06:	e7e4      	b.n	ced2 <AckRetransmissionCallback+0x1a>
    cf08:	4b0c      	ldr	r3, [pc, #48]	; (cf3c <AckRetransmissionCallback+0x84>)
    cf0a:	4798      	blx	r3
    cf0c:	4b0c      	ldr	r3, [pc, #48]	; (cf40 <AckRetransmissionCallback+0x88>)
    cf0e:	4798      	blx	r3
    cf10:	200e      	movs	r0, #14
    cf12:	4b0c      	ldr	r3, [pc, #48]	; (cf44 <AckRetransmissionCallback+0x8c>)
    cf14:	4798      	blx	r3
    cf16:	bd10      	pop	{r4, pc}
    cf18:	4b08      	ldr	r3, [pc, #32]	; (cf3c <AckRetransmissionCallback+0x84>)
    cf1a:	4798      	blx	r3
    cf1c:	4b08      	ldr	r3, [pc, #32]	; (cf40 <AckRetransmissionCallback+0x88>)
    cf1e:	4798      	blx	r3
    cf20:	2012      	movs	r0, #18
    cf22:	e7f6      	b.n	cf12 <AckRetransmissionCallback+0x5a>
    cf24:	4b05      	ldr	r3, [pc, #20]	; (cf3c <AckRetransmissionCallback+0x84>)
    cf26:	4798      	blx	r3
    cf28:	4b05      	ldr	r3, [pc, #20]	; (cf40 <AckRetransmissionCallback+0x88>)
    cf2a:	e7d2      	b.n	ced2 <AckRetransmissionCallback+0x1a>
    cf2c:	20001908 	.word	0x20001908
    cf30:	0000cdbd 	.word	0x0000cdbd
    cf34:	0000ae5d 	.word	0x0000ae5d
    cf38:	0000bcc1 	.word	0x0000bcc1
    cf3c:	0000b6c1 	.word	0x0000b6c1
    cf40:	0000ad71 	.word	0x0000ad71
    cf44:	0000c485 	.word	0x0000c485

0000cf48 <LORAWAN_RxTimeout>:
    cf48:	4b22      	ldr	r3, [pc, #136]	; (cfd4 <LORAWAN_RxTimeout+0x8c>)
    cf4a:	b510      	push	{r4, lr}
    cf4c:	001a      	movs	r2, r3
    cf4e:	3250      	adds	r2, #80	; 0x50
    cf50:	7812      	ldrb	r2, [r2, #0]
    cf52:	b251      	sxtb	r1, r2
    cf54:	2900      	cmp	r1, #0
    cf56:	db21      	blt.n	cf9c <LORAWAN_RxTimeout+0x54>
    cf58:	0019      	movs	r1, r3
    cf5a:	31c8      	adds	r1, #200	; 0xc8
    cf5c:	7809      	ldrb	r1, [r1, #0]
    cf5e:	2904      	cmp	r1, #4
    cf60:	d104      	bne.n	cf6c <LORAWAN_RxTimeout+0x24>
    cf62:	07d1      	lsls	r1, r2, #31
    cf64:	d502      	bpl.n	cf6c <LORAWAN_RxTimeout+0x24>
    cf66:	4b1c      	ldr	r3, [pc, #112]	; (cfd8 <LORAWAN_RxTimeout+0x90>)
    cf68:	4798      	blx	r3
    cf6a:	bd10      	pop	{r4, pc}
    cf6c:	210e      	movs	r1, #14
    cf6e:	0010      	movs	r0, r2
    cf70:	4008      	ands	r0, r1
    cf72:	2806      	cmp	r0, #6
    cf74:	d107      	bne.n	cf86 <LORAWAN_RxTimeout+0x3e>
    cf76:	3350      	adds	r3, #80	; 0x50
    cf78:	781a      	ldrb	r2, [r3, #0]
    cf7a:	438a      	bics	r2, r1
    cf7c:	0011      	movs	r1, r2
    cf7e:	2208      	movs	r2, #8
    cf80:	430a      	orrs	r2, r1
    cf82:	701a      	strb	r2, [r3, #0]
    cf84:	e7f1      	b.n	cf6a <LORAWAN_RxTimeout+0x22>
    cf86:	3360      	adds	r3, #96	; 0x60
    cf88:	781b      	ldrb	r3, [r3, #0]
    cf8a:	075b      	lsls	r3, r3, #29
    cf8c:	d502      	bpl.n	cf94 <LORAWAN_RxTimeout+0x4c>
    cf8e:	4b13      	ldr	r3, [pc, #76]	; (cfdc <LORAWAN_RxTimeout+0x94>)
    cf90:	4798      	blx	r3
    cf92:	e7ea      	b.n	cf6a <LORAWAN_RxTimeout+0x22>
    cf94:	07d3      	lsls	r3, r2, #31
    cf96:	d5e8      	bpl.n	cf6a <LORAWAN_RxTimeout+0x22>
    cf98:	4b11      	ldr	r3, [pc, #68]	; (cfe0 <LORAWAN_RxTimeout+0x98>)
    cf9a:	e7f9      	b.n	cf90 <LORAWAN_RxTimeout+0x48>
    cf9c:	4811      	ldr	r0, [pc, #68]	; (cfe4 <LORAWAN_RxTimeout+0x9c>)
    cf9e:	7841      	ldrb	r1, [r0, #1]
    cfa0:	7802      	ldrb	r2, [r0, #0]
    cfa2:	0209      	lsls	r1, r1, #8
    cfa4:	4311      	orrs	r1, r2
    cfa6:	7882      	ldrb	r2, [r0, #2]
    cfa8:	0412      	lsls	r2, r2, #16
    cfaa:	4311      	orrs	r1, r2
    cfac:	78c2      	ldrb	r2, [r0, #3]
    cfae:	0612      	lsls	r2, r2, #24
    cfb0:	430a      	orrs	r2, r1
    cfb2:	d0da      	beq.n	cf6a <LORAWAN_RxTimeout+0x22>
    cfb4:	2190      	movs	r1, #144	; 0x90
    cfb6:	2001      	movs	r0, #1
    cfb8:	0049      	lsls	r1, r1, #1
    cfba:	5458      	strb	r0, [r3, r1]
    cfbc:	0019      	movs	r1, r3
    cfbe:	2404      	movs	r4, #4
    cfc0:	31d4      	adds	r1, #212	; 0xd4
    cfc2:	700c      	strb	r4, [r1, #0]
    cfc4:	001c      	movs	r4, r3
    cfc6:	33d0      	adds	r3, #208	; 0xd0
    cfc8:	34d8      	adds	r4, #216	; 0xd8
    cfca:	7020      	strb	r0, [r4, #0]
    cfcc:	6818      	ldr	r0, [r3, #0]
    cfce:	4790      	blx	r2
    cfd0:	e7cb      	b.n	cf6a <LORAWAN_RxTimeout+0x22>
    cfd2:	46c0      	nop			; (mov r8, r8)
    cfd4:	20001908 	.word	0x20001908
    cfd8:	0000ea45 	.word	0x0000ea45
    cfdc:	0000b715 	.word	0x0000b715
    cfe0:	0000cdbd 	.word	0x0000cdbd
    cfe4:	20001b48 	.word	0x20001b48

0000cfe8 <LorawanConfigureRadioForRX2>:
    cfe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cfea:	466b      	mov	r3, sp
    cfec:	4c21      	ldr	r4, [pc, #132]	; (d074 <LorawanConfigureRadioForRX2+0x8c>)
    cfee:	1cdd      	adds	r5, r3, #3
    cff0:	0023      	movs	r3, r4
    cff2:	2100      	movs	r1, #0
    cff4:	3360      	adds	r3, #96	; 0x60
    cff6:	781b      	ldrb	r3, [r3, #0]
    cff8:	0007      	movs	r7, r0
    cffa:	7029      	strb	r1, [r5, #0]
    cffc:	075b      	lsls	r3, r3, #29
    cffe:	d52c      	bpl.n	d05a <LorawanConfigureRadioForRX2+0x72>
    d000:	002a      	movs	r2, r5
    d002:	2009      	movs	r0, #9
    d004:	4b1c      	ldr	r3, [pc, #112]	; (d078 <LorawanConfigureRadioForRX2+0x90>)
    d006:	4798      	blx	r3
    d008:	0022      	movs	r2, r4
    d00a:	0023      	movs	r3, r4
    d00c:	324c      	adds	r2, #76	; 0x4c
    d00e:	8811      	ldrh	r1, [r2, #0]
    d010:	334a      	adds	r3, #74	; 0x4a
    d012:	881b      	ldrh	r3, [r3, #0]
    d014:	0409      	lsls	r1, r1, #16
    d016:	4319      	orrs	r1, r3
    d018:	7828      	ldrb	r0, [r5, #0]
    d01a:	4b18      	ldr	r3, [pc, #96]	; (d07c <LorawanConfigureRadioForRX2+0x94>)
    d01c:	4798      	blx	r3
    d01e:	2300      	movs	r3, #0
    d020:	0022      	movs	r2, r4
    d022:	ae01      	add	r6, sp, #4
    d024:	7033      	strb	r3, [r6, #0]
    d026:	32c8      	adds	r2, #200	; 0xc8
    d028:	7812      	ldrb	r2, [r2, #0]
    d02a:	2a04      	cmp	r2, #4
    d02c:	d11a      	bne.n	d064 <LorawanConfigureRadioForRX2+0x7c>
    d02e:	3450      	adds	r4, #80	; 0x50
    d030:	7822      	ldrb	r2, [r4, #0]
    d032:	07d2      	lsls	r2, r2, #31
    d034:	d516      	bpl.n	d064 <LorawanConfigureRadioForRX2+0x7c>
    d036:	8073      	strh	r3, [r6, #2]
    d038:	0030      	movs	r0, r6
    d03a:	4b11      	ldr	r3, [pc, #68]	; (d080 <LorawanConfigureRadioForRX2+0x98>)
    d03c:	4798      	blx	r3
    d03e:	1e04      	subs	r4, r0, #0
    d040:	d00a      	beq.n	d058 <LorawanConfigureRadioForRX2+0x70>
    d042:	4b10      	ldr	r3, [pc, #64]	; (d084 <LorawanConfigureRadioForRX2+0x9c>)
    d044:	4798      	blx	r3
    d046:	4b10      	ldr	r3, [pc, #64]	; (d088 <LorawanConfigureRadioForRX2+0xa0>)
    d048:	4798      	blx	r3
    d04a:	4b10      	ldr	r3, [pc, #64]	; (d08c <LorawanConfigureRadioForRX2+0xa4>)
    d04c:	4798      	blx	r3
    d04e:	2f00      	cmp	r7, #0
    d050:	d002      	beq.n	d058 <LorawanConfigureRadioForRX2+0x70>
    d052:	0020      	movs	r0, r4
    d054:	4b0e      	ldr	r3, [pc, #56]	; (d090 <LorawanConfigureRadioForRX2+0xa8>)
    d056:	4798      	blx	r3
    d058:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d05a:	0023      	movs	r3, r4
    d05c:	334e      	adds	r3, #78	; 0x4e
    d05e:	781b      	ldrb	r3, [r3, #0]
    d060:	702b      	strb	r3, [r5, #0]
    d062:	e7d1      	b.n	d008 <LorawanConfigureRadioForRX2+0x20>
    d064:	466b      	mov	r3, sp
    d066:	0029      	movs	r1, r5
    d068:	1d9a      	adds	r2, r3, #6
    d06a:	2003      	movs	r0, #3
    d06c:	4b02      	ldr	r3, [pc, #8]	; (d078 <LorawanConfigureRadioForRX2+0x90>)
    d06e:	4798      	blx	r3
    d070:	e7e2      	b.n	d038 <LorawanConfigureRadioForRX2+0x50>
    d072:	46c0      	nop			; (mov r8, r8)
    d074:	20001908 	.word	0x20001908
    d078:	00008b79 	.word	0x00008b79
    d07c:	0000bb71 	.word	0x0000bb71
    d080:	00010351 	.word	0x00010351
    d084:	0000b6c1 	.word	0x0000b6c1
    d088:	0000b6f1 	.word	0x0000b6f1
    d08c:	0000ad71 	.word	0x0000ad71
    d090:	0000c485 	.word	0x0000c485

0000d094 <LorawanReceiveWindow2Callback>:
    d094:	b570      	push	{r4, r5, r6, lr}
    d096:	4c16      	ldr	r4, [pc, #88]	; (d0f0 <LorawanReceiveWindow2Callback+0x5c>)
    d098:	0025      	movs	r5, r4
    d09a:	3550      	adds	r5, #80	; 0x50
    d09c:	782b      	ldrb	r3, [r5, #0]
    d09e:	2b7f      	cmp	r3, #127	; 0x7f
    d0a0:	d811      	bhi.n	d0c6 <LorawanReceiveWindow2Callback+0x32>
    d0a2:	4b14      	ldr	r3, [pc, #80]	; (d0f4 <LorawanReceiveWindow2Callback+0x60>)
    d0a4:	4798      	blx	r3
    d0a6:	2801      	cmp	r0, #1
    d0a8:	d109      	bne.n	d0be <LorawanReceiveWindow2Callback+0x2a>
    d0aa:	220e      	movs	r2, #14
    d0ac:	782b      	ldrb	r3, [r5, #0]
    d0ae:	4393      	bics	r3, r2
    d0b0:	001a      	movs	r2, r3
    d0b2:	230a      	movs	r3, #10
    d0b4:	4313      	orrs	r3, r2
    d0b6:	702b      	strb	r3, [r5, #0]
    d0b8:	4b0f      	ldr	r3, [pc, #60]	; (d0f8 <LorawanReceiveWindow2Callback+0x64>)
    d0ba:	4798      	blx	r3
    d0bc:	bd70      	pop	{r4, r5, r6, pc}
    d0be:	2301      	movs	r3, #1
    d0c0:	34c4      	adds	r4, #196	; 0xc4
    d0c2:	7023      	strb	r3, [r4, #0]
    d0c4:	e7fa      	b.n	d0bc <LorawanReceiveWindow2Callback+0x28>
    d0c6:	2104      	movs	r1, #4
    d0c8:	3460      	adds	r4, #96	; 0x60
    d0ca:	7822      	ldrb	r2, [r4, #0]
    d0cc:	420a      	tst	r2, r1
    d0ce:	d007      	beq.n	d0e0 <LorawanReceiveWindow2Callback+0x4c>
    d0d0:	2001      	movs	r0, #1
    d0d2:	4383      	bics	r3, r0
    d0d4:	438a      	bics	r2, r1
    d0d6:	702b      	strb	r3, [r5, #0]
    d0d8:	3107      	adds	r1, #7
    d0da:	4b08      	ldr	r3, [pc, #32]	; (d0fc <LorawanReceiveWindow2Callback+0x68>)
    d0dc:	7022      	strb	r2, [r4, #0]
    d0de:	4798      	blx	r3
    d0e0:	4b07      	ldr	r3, [pc, #28]	; (d100 <LorawanReceiveWindow2Callback+0x6c>)
    d0e2:	4798      	blx	r3
    d0e4:	4b07      	ldr	r3, [pc, #28]	; (d104 <LorawanReceiveWindow2Callback+0x70>)
    d0e6:	4798      	blx	r3
    d0e8:	4b07      	ldr	r3, [pc, #28]	; (d108 <LorawanReceiveWindow2Callback+0x74>)
    d0ea:	4798      	blx	r3
    d0ec:	e7e6      	b.n	d0bc <LorawanReceiveWindow2Callback+0x28>
    d0ee:	46c0      	nop			; (mov r8, r8)
    d0f0:	20001908 	.word	0x20001908
    d0f4:	0000f955 	.word	0x0000f955
    d0f8:	0000cfe9 	.word	0x0000cfe9
    d0fc:	00008e5d 	.word	0x00008e5d
    d100:	0000b6f1 	.word	0x0000b6f1
    d104:	0000b6c1 	.word	0x0000b6c1
    d108:	0000ad71 	.word	0x0000ad71

0000d10c <SetReceptionNotOkState>:
    d10c:	2290      	movs	r2, #144	; 0x90
    d10e:	2101      	movs	r1, #1
    d110:	4b19      	ldr	r3, [pc, #100]	; (d178 <SetReceptionNotOkState+0x6c>)
    d112:	0052      	lsls	r2, r2, #1
    d114:	b510      	push	{r4, lr}
    d116:	5499      	strb	r1, [r3, r2]
    d118:	001a      	movs	r2, r3
    d11a:	0019      	movs	r1, r3
    d11c:	32c8      	adds	r2, #200	; 0xc8
    d11e:	7812      	ldrb	r2, [r2, #0]
    d120:	3150      	adds	r1, #80	; 0x50
    d122:	200e      	movs	r0, #14
    d124:	2a01      	cmp	r2, #1
    d126:	d11d      	bne.n	d164 <SetReceptionNotOkState+0x58>
    d128:	780a      	ldrb	r2, [r1, #0]
    d12a:	4002      	ands	r2, r0
    d12c:	2a0a      	cmp	r2, #10
    d12e:	d006      	beq.n	d13e <SetReceptionNotOkState+0x32>
    d130:	2a06      	cmp	r2, #6
    d132:	d113      	bne.n	d15c <SetReceptionNotOkState+0x50>
    d134:	001a      	movs	r2, r3
    d136:	32c4      	adds	r2, #196	; 0xc4
    d138:	7812      	ldrb	r2, [r2, #0]
    d13a:	2a00      	cmp	r2, #0
    d13c:	d00e      	beq.n	d15c <SetReceptionNotOkState+0x50>
    d13e:	0019      	movs	r1, r3
    d140:	2001      	movs	r0, #1
    d142:	3160      	adds	r1, #96	; 0x60
    d144:	780a      	ldrb	r2, [r1, #0]
    d146:	240e      	movs	r4, #14
    d148:	4382      	bics	r2, r0
    d14a:	700a      	strb	r2, [r1, #0]
    d14c:	001a      	movs	r2, r3
    d14e:	3250      	adds	r2, #80	; 0x50
    d150:	7811      	ldrb	r1, [r2, #0]
    d152:	43a1      	bics	r1, r4
    d154:	7011      	strb	r1, [r2, #0]
    d156:	7851      	ldrb	r1, [r2, #1]
    d158:	4381      	bics	r1, r0
    d15a:	7051      	strb	r1, [r2, #1]
    d15c:	2200      	movs	r2, #0
    d15e:	33c4      	adds	r3, #196	; 0xc4
    d160:	701a      	strb	r2, [r3, #0]
    d162:	bd10      	pop	{r4, pc}
    d164:	230a      	movs	r3, #10
    d166:	780a      	ldrb	r2, [r1, #0]
    d168:	4382      	bics	r2, r0
    d16a:	4313      	orrs	r3, r2
    d16c:	700b      	strb	r3, [r1, #0]
    d16e:	2000      	movs	r0, #0
    d170:	4b02      	ldr	r3, [pc, #8]	; (d17c <SetReceptionNotOkState+0x70>)
    d172:	4798      	blx	r3
    d174:	e7f5      	b.n	d162 <SetReceptionNotOkState+0x56>
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	20001908 	.word	0x20001908
    d17c:	0000cfe9 	.word	0x0000cfe9

0000d180 <UpdateCurrentDataRateAfterDataRangeChanges>:
    d180:	4b09      	ldr	r3, [pc, #36]	; (d1a8 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    d182:	001a      	movs	r2, r3
    d184:	32bf      	adds	r2, #191	; 0xbf
    d186:	7811      	ldrb	r1, [r2, #0]
    d188:	001a      	movs	r2, r3
    d18a:	32b3      	adds	r2, #179	; 0xb3
    d18c:	7810      	ldrb	r0, [r2, #0]
    d18e:	4288      	cmp	r0, r1
    d190:	d900      	bls.n	d194 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    d192:	7011      	strb	r1, [r2, #0]
    d194:	001a      	movs	r2, r3
    d196:	33b3      	adds	r3, #179	; 0xb3
    d198:	32be      	adds	r2, #190	; 0xbe
    d19a:	7812      	ldrb	r2, [r2, #0]
    d19c:	7819      	ldrb	r1, [r3, #0]
    d19e:	4291      	cmp	r1, r2
    d1a0:	d200      	bcs.n	d1a4 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    d1a2:	701a      	strb	r2, [r3, #0]
    d1a4:	4770      	bx	lr
    d1a6:	46c0      	nop			; (mov r8, r8)
    d1a8:	20001908 	.word	0x20001908

0000d1ac <ExecuteNewChannel>:
    d1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ae:	b08d      	sub	sp, #52	; 0x34
    d1b0:	7804      	ldrb	r4, [r0, #0]
    d1b2:	ab02      	add	r3, sp, #8
    d1b4:	0006      	movs	r6, r0
    d1b6:	71dc      	strb	r4, [r3, #7]
    d1b8:	1c41      	adds	r1, r0, #1
    d1ba:	2204      	movs	r2, #4
    d1bc:	4b54      	ldr	r3, [pc, #336]	; (d310 <ExecuteNewChannel+0x164>)
    d1be:	a808      	add	r0, sp, #32
    d1c0:	4798      	blx	r3
    d1c2:	9b08      	ldr	r3, [sp, #32]
    d1c4:	a904      	add	r1, sp, #16
    d1c6:	021d      	lsls	r5, r3, #8
    d1c8:	2364      	movs	r3, #100	; 0x64
    d1ca:	0a2d      	lsrs	r5, r5, #8
    d1cc:	435d      	muls	r5, r3
    d1ce:	1d73      	adds	r3, r6, #5
    d1d0:	9301      	str	r3, [sp, #4]
    d1d2:	7933      	ldrb	r3, [r6, #4]
    d1d4:	2015      	movs	r0, #21
    d1d6:	9300      	str	r3, [sp, #0]
    d1d8:	2300      	movs	r3, #0
    d1da:	4e4e      	ldr	r6, [pc, #312]	; (d314 <ExecuteNewChannel+0x168>)
    d1dc:	700c      	strb	r4, [r1, #0]
    d1de:	9508      	str	r5, [sp, #32]
    d1e0:	704b      	strb	r3, [r1, #1]
    d1e2:	47b0      	blx	r6
    d1e4:	4c4c      	ldr	r4, [pc, #304]	; (d318 <ExecuteNewChannel+0x16c>)
    d1e6:	2808      	cmp	r0, #8
    d1e8:	d12b      	bne.n	d242 <ExecuteNewChannel+0x96>
    d1ea:	466a      	mov	r2, sp
    d1ec:	ab02      	add	r3, sp, #8
    d1ee:	79db      	ldrb	r3, [r3, #7]
    d1f0:	7812      	ldrb	r2, [r2, #0]
    d1f2:	af06      	add	r7, sp, #24
    d1f4:	a90a      	add	r1, sp, #40	; 0x28
    d1f6:	3806      	subs	r0, #6
    d1f8:	703b      	strb	r3, [r7, #0]
    d1fa:	707a      	strb	r2, [r7, #1]
    d1fc:	710b      	strb	r3, [r1, #4]
    d1fe:	950a      	str	r5, [sp, #40]	; 0x28
    d200:	47b0      	blx	r6
    d202:	2808      	cmp	r0, #8
    d204:	d001      	beq.n	d20a <ExecuteNewChannel+0x5e>
    d206:	2d00      	cmp	r5, #0
    d208:	d10b      	bne.n	d222 <ExecuteNewChannel+0x76>
    d20a:	0023      	movs	r3, r4
    d20c:	33ac      	adds	r3, #172	; 0xac
    d20e:	781a      	ldrb	r2, [r3, #0]
    d210:	2303      	movs	r3, #3
    d212:	4353      	muls	r3, r2
    d214:	2280      	movs	r2, #128	; 0x80
    d216:	18e3      	adds	r3, r4, r3
    d218:	3360      	adds	r3, #96	; 0x60
    d21a:	7999      	ldrb	r1, [r3, #6]
    d21c:	4252      	negs	r2, r2
    d21e:	430a      	orrs	r2, r1
    d220:	719a      	strb	r2, [r3, #6]
    d222:	0039      	movs	r1, r7
    d224:	2012      	movs	r0, #18
    d226:	47b0      	blx	r6
    d228:	2808      	cmp	r0, #8
    d22a:	d10a      	bne.n	d242 <ExecuteNewChannel+0x96>
    d22c:	0023      	movs	r3, r4
    d22e:	33ac      	adds	r3, #172	; 0xac
    d230:	781a      	ldrb	r2, [r3, #0]
    d232:	2303      	movs	r3, #3
    d234:	4353      	muls	r3, r2
    d236:	2240      	movs	r2, #64	; 0x40
    d238:	18e3      	adds	r3, r4, r3
    d23a:	3360      	adds	r3, #96	; 0x60
    d23c:	7999      	ldrb	r1, [r3, #6]
    d23e:	430a      	orrs	r2, r1
    d240:	719a      	strb	r2, [r3, #6]
    d242:	0023      	movs	r3, r4
    d244:	33ac      	adds	r3, #172	; 0xac
    d246:	781a      	ldrb	r2, [r3, #0]
    d248:	2303      	movs	r3, #3
    d24a:	4353      	muls	r3, r2
    d24c:	18e3      	adds	r3, r4, r3
    d24e:	3360      	adds	r3, #96	; 0x60
    d250:	799b      	ldrb	r3, [r3, #6]
    d252:	09da      	lsrs	r2, r3, #7
    d254:	2a01      	cmp	r2, #1
    d256:	d150      	bne.n	d2fa <ExecuteNewChannel+0x14e>
    d258:	065b      	lsls	r3, r3, #25
    d25a:	d54e      	bpl.n	d2fa <ExecuteNewChannel+0x14e>
    d25c:	4e2f      	ldr	r6, [pc, #188]	; (d31c <ExecuteNewChannel+0x170>)
    d25e:	2d00      	cmp	r5, #0
    d260:	d04e      	beq.n	d300 <ExecuteNewChannel+0x154>
    d262:	a906      	add	r1, sp, #24
    d264:	2012      	movs	r0, #18
    d266:	47b0      	blx	r6
    d268:	ad07      	add	r5, sp, #28
    d26a:	a90a      	add	r1, sp, #40	; 0x28
    d26c:	2000      	movs	r0, #0
    d26e:	47b0      	blx	r6
    d270:	002a      	movs	r2, r5
    d272:	2100      	movs	r1, #0
    d274:	2014      	movs	r0, #20
    d276:	4f2a      	ldr	r7, [pc, #168]	; (d320 <ExecuteNewChannel+0x174>)
    d278:	47b8      	blx	r7
    d27a:	0023      	movs	r3, r4
    d27c:	782a      	ldrb	r2, [r5, #0]
    d27e:	33be      	adds	r3, #190	; 0xbe
    d280:	701a      	strb	r2, [r3, #0]
    d282:	0023      	movs	r3, r4
    d284:	786a      	ldrb	r2, [r5, #1]
    d286:	33bf      	adds	r3, #191	; 0xbf
    d288:	701a      	strb	r2, [r3, #0]
    d28a:	34e4      	adds	r4, #228	; 0xe4
    d28c:	4b25      	ldr	r3, [pc, #148]	; (d324 <ExecuteNewChannel+0x178>)
    d28e:	4798      	blx	r3
    d290:	7823      	ldrb	r3, [r4, #0]
    d292:	079b      	lsls	r3, r3, #30
    d294:	d50e      	bpl.n	d2b4 <ExecuteNewChannel+0x108>
    d296:	2416      	movs	r4, #22
    d298:	ab02      	add	r3, sp, #8
    d29a:	18e4      	adds	r4, r4, r3
    d29c:	1dd9      	adds	r1, r3, #7
    d29e:	0022      	movs	r2, r4
    d2a0:	201e      	movs	r0, #30
    d2a2:	47b8      	blx	r7
    d2a4:	ab02      	add	r3, sp, #8
    d2a6:	79db      	ldrb	r3, [r3, #7]
    d2a8:	a909      	add	r1, sp, #36	; 0x24
    d2aa:	708b      	strb	r3, [r1, #2]
    d2ac:	8823      	ldrh	r3, [r4, #0]
    d2ae:	201e      	movs	r0, #30
    d2b0:	800b      	strh	r3, [r1, #0]
    d2b2:	47b0      	blx	r6
    d2b4:	ab02      	add	r3, sp, #8
    d2b6:	79db      	ldrb	r3, [r3, #7]
    d2b8:	a905      	add	r1, sp, #20
    d2ba:	700b      	strb	r3, [r1, #0]
    d2bc:	2301      	movs	r3, #1
    d2be:	2016      	movs	r0, #22
    d2c0:	704b      	strb	r3, [r1, #1]
    d2c2:	4b16      	ldr	r3, [pc, #88]	; (d31c <ExecuteNewChannel+0x170>)
    d2c4:	4798      	blx	r3
    d2c6:	ad09      	add	r5, sp, #36	; 0x24
    d2c8:	2100      	movs	r1, #0
    d2ca:	002a      	movs	r2, r5
    d2cc:	4b14      	ldr	r3, [pc, #80]	; (d320 <ExecuteNewChannel+0x174>)
    d2ce:	2014      	movs	r0, #20
    d2d0:	4798      	blx	r3
    d2d2:	4c11      	ldr	r4, [pc, #68]	; (d318 <ExecuteNewChannel+0x16c>)
    d2d4:	782a      	ldrb	r2, [r5, #0]
    d2d6:	0023      	movs	r3, r4
    d2d8:	33be      	adds	r3, #190	; 0xbe
    d2da:	701a      	strb	r2, [r3, #0]
    d2dc:	0023      	movs	r3, r4
    d2de:	786a      	ldrb	r2, [r5, #1]
    d2e0:	33bf      	adds	r3, #191	; 0xbf
    d2e2:	701a      	strb	r2, [r3, #0]
    d2e4:	4b0f      	ldr	r3, [pc, #60]	; (d324 <ExecuteNewChannel+0x178>)
    d2e6:	4798      	blx	r3
    d2e8:	2304      	movs	r3, #4
    d2ea:	3450      	adds	r4, #80	; 0x50
    d2ec:	7862      	ldrb	r2, [r4, #1]
    d2ee:	210b      	movs	r1, #11
    d2f0:	4313      	orrs	r3, r2
    d2f2:	7063      	strb	r3, [r4, #1]
    d2f4:	2001      	movs	r0, #1
    d2f6:	4b0c      	ldr	r3, [pc, #48]	; (d328 <ExecuteNewChannel+0x17c>)
    d2f8:	4798      	blx	r3
    d2fa:	9801      	ldr	r0, [sp, #4]
    d2fc:	b00d      	add	sp, #52	; 0x34
    d2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d300:	ab02      	add	r3, sp, #8
    d302:	79db      	ldrb	r3, [r3, #7]
    d304:	a905      	add	r1, sp, #20
    d306:	2016      	movs	r0, #22
    d308:	700b      	strb	r3, [r1, #0]
    d30a:	704d      	strb	r5, [r1, #1]
    d30c:	47b0      	blx	r6
    d30e:	e7da      	b.n	d2c6 <ExecuteNewChannel+0x11a>
    d310:	00013ba5 	.word	0x00013ba5
    d314:	00008b95 	.word	0x00008b95
    d318:	20001908 	.word	0x20001908
    d31c:	00008bb1 	.word	0x00008bb1
    d320:	00008b79 	.word	0x00008b79
    d324:	0000d181 	.word	0x0000d181
    d328:	00008e5d 	.word	0x00008e5d

0000d32c <MacExecuteCommands>:
    d32c:	2300      	movs	r3, #0
    d32e:	b5f0      	push	{r4, r5, r6, r7, lr}
    d330:	0007      	movs	r7, r0
    d332:	2601      	movs	r6, #1
    d334:	b087      	sub	sp, #28
    d336:	9002      	str	r0, [sp, #8]
    d338:	9103      	str	r1, [sp, #12]
    d33a:	9300      	str	r3, [sp, #0]
    d33c:	9b02      	ldr	r3, [sp, #8]
    d33e:	9a03      	ldr	r2, [sp, #12]
    d340:	4c69      	ldr	r4, [pc, #420]	; (d4e8 <MacExecuteCommands+0x1bc>)
    d342:	1898      	adds	r0, r3, r2
    d344:	4287      	cmp	r7, r0
    d346:	d353      	bcc.n	d3f0 <MacExecuteCommands+0xc4>
    d348:	2393      	movs	r3, #147	; 0x93
    d34a:	005b      	lsls	r3, r3, #1
    d34c:	5ce3      	ldrb	r3, [r4, r3]
    d34e:	2b00      	cmp	r3, #0
    d350:	d000      	beq.n	d354 <MacExecuteCommands+0x28>
    d352:	e072      	b.n	d43a <MacExecuteCommands+0x10e>
    d354:	0038      	movs	r0, r7
    d356:	b007      	add	sp, #28
    d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d35a:	0023      	movs	r3, r4
    d35c:	787a      	ldrb	r2, [r7, #1]
    d35e:	33b1      	adds	r3, #177	; 0xb1
    d360:	701a      	strb	r2, [r3, #0]
    d362:	0023      	movs	r3, r4
    d364:	78ba      	ldrb	r2, [r7, #2]
    d366:	33b2      	adds	r3, #178	; 0xb2
    d368:	701a      	strb	r2, [r3, #0]
    d36a:	2203      	movs	r2, #3
    d36c:	9b01      	ldr	r3, [sp, #4]
    d36e:	1cfd      	adds	r5, r7, #3
    d370:	4353      	muls	r3, r2
    d372:	18e3      	adds	r3, r4, r3
    d374:	3365      	adds	r3, #101	; 0x65
    d376:	32fc      	adds	r2, #252	; 0xfc
    d378:	701a      	strb	r2, [r3, #0]
    d37a:	0022      	movs	r2, r4
    d37c:	2103      	movs	r1, #3
    d37e:	32ac      	adds	r2, #172	; 0xac
    d380:	7813      	ldrb	r3, [r2, #0]
    d382:	4359      	muls	r1, r3
    d384:	1864      	adds	r4, r4, r1
    d386:	3465      	adds	r4, #101	; 0x65
    d388:	7821      	ldrb	r1, [r4, #0]
    d38a:	29ff      	cmp	r1, #255	; 0xff
    d38c:	d003      	beq.n	d396 <MacExecuteCommands+0x6a>
    d38e:	2b0f      	cmp	r3, #15
    d390:	d801      	bhi.n	d396 <MacExecuteCommands+0x6a>
    d392:	3301      	adds	r3, #1
    d394:	7013      	strb	r3, [r2, #0]
    d396:	002f      	movs	r7, r5
    d398:	e7d0      	b.n	d33c <MacExecuteCommands+0x10>
    d39a:	0028      	movs	r0, r5
    d39c:	4b53      	ldr	r3, [pc, #332]	; (d4ec <MacExecuteCommands+0x1c0>)
    d39e:	4798      	blx	r3
    d3a0:	0005      	movs	r5, r0
    d3a2:	e7ea      	b.n	d37a <MacExecuteCommands+0x4e>
    d3a4:	0028      	movs	r0, r5
    d3a6:	4b52      	ldr	r3, [pc, #328]	; (d4f0 <MacExecuteCommands+0x1c4>)
    d3a8:	e7f9      	b.n	d39e <MacExecuteCommands+0x72>
    d3aa:	0028      	movs	r0, r5
    d3ac:	4b51      	ldr	r3, [pc, #324]	; (d4f4 <MacExecuteCommands+0x1c8>)
    d3ae:	e7f6      	b.n	d39e <MacExecuteCommands+0x72>
    d3b0:	0028      	movs	r0, r5
    d3b2:	4b51      	ldr	r3, [pc, #324]	; (d4f8 <MacExecuteCommands+0x1cc>)
    d3b4:	e7f3      	b.n	d39e <MacExecuteCommands+0x72>
    d3b6:	230f      	movs	r3, #15
    d3b8:	7878      	ldrb	r0, [r7, #1]
    d3ba:	1cbd      	adds	r5, r7, #2
    d3bc:	4018      	ands	r0, r3
    d3be:	4b4f      	ldr	r3, [pc, #316]	; (d4fc <MacExecuteCommands+0x1d0>)
    d3c0:	4798      	blx	r3
    d3c2:	0022      	movs	r2, r4
    d3c4:	2380      	movs	r3, #128	; 0x80
    d3c6:	3250      	adds	r2, #80	; 0x50
    d3c8:	7851      	ldrb	r1, [r2, #1]
    d3ca:	425b      	negs	r3, r3
    d3cc:	430b      	orrs	r3, r1
    d3ce:	7053      	strb	r3, [r2, #1]
    d3d0:	210b      	movs	r1, #11
    d3d2:	0030      	movs	r0, r6
    d3d4:	4b4a      	ldr	r3, [pc, #296]	; (d500 <MacExecuteCommands+0x1d4>)
    d3d6:	4798      	blx	r3
    d3d8:	e7cf      	b.n	d37a <MacExecuteCommands+0x4e>
    d3da:	0028      	movs	r0, r5
    d3dc:	4b49      	ldr	r3, [pc, #292]	; (d504 <MacExecuteCommands+0x1d8>)
    d3de:	e7de      	b.n	d39e <MacExecuteCommands+0x72>
    d3e0:	0028      	movs	r0, r5
    d3e2:	4b49      	ldr	r3, [pc, #292]	; (d508 <MacExecuteCommands+0x1dc>)
    d3e4:	e7db      	b.n	d39e <MacExecuteCommands+0x72>
    d3e6:	22ff      	movs	r2, #255	; 0xff
    d3e8:	0005      	movs	r5, r0
    d3ea:	701a      	strb	r2, [r3, #0]
    d3ec:	9600      	str	r6, [sp, #0]
    d3ee:	e7c4      	b.n	d37a <MacExecuteCommands+0x4e>
    d3f0:	9b00      	ldr	r3, [sp, #0]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d1a8      	bne.n	d348 <MacExecuteCommands+0x1c>
    d3f6:	0023      	movs	r3, r4
    d3f8:	33ac      	adds	r3, #172	; 0xac
    d3fa:	781b      	ldrb	r3, [r3, #0]
    d3fc:	2501      	movs	r5, #1
    d3fe:	9301      	str	r3, [sp, #4]
    d400:	2303      	movs	r3, #3
    d402:	9a01      	ldr	r2, [sp, #4]
    d404:	4353      	muls	r3, r2
    d406:	18e3      	adds	r3, r4, r3
    d408:	0019      	movs	r1, r3
    d40a:	3160      	adds	r1, #96	; 0x60
    d40c:	798a      	ldrb	r2, [r1, #6]
    d40e:	3365      	adds	r3, #101	; 0x65
    d410:	43b2      	bics	r2, r6
    d412:	402a      	ands	r2, r5
    d414:	718a      	strb	r2, [r1, #6]
    d416:	79ca      	ldrb	r2, [r1, #7]
    d418:	197d      	adds	r5, r7, r5
    d41a:	43b2      	bics	r2, r6
    d41c:	71ca      	strb	r2, [r1, #7]
    d41e:	783a      	ldrb	r2, [r7, #0]
    d420:	701a      	strb	r2, [r3, #0]
    d422:	783a      	ldrb	r2, [r7, #0]
    d424:	3a02      	subs	r2, #2
    d426:	2a08      	cmp	r2, #8
    d428:	d8dd      	bhi.n	d3e6 <MacExecuteCommands+0xba>
    d42a:	0010      	movs	r0, r2
    d42c:	f003 faa8 	bl	10980 <__gnu_thumb1_case_sqi>
    d430:	bdbab595 	.word	0xbdbab595
    d434:	d5c3c0a5 	.word	0xd5c3c0a5
    d438:	d8          	.byte	0xd8
    d439:	00          	.byte	0x00
    d43a:	2324      	movs	r3, #36	; 0x24
    d43c:	33ff      	adds	r3, #255	; 0xff
    d43e:	5ce3      	ldrb	r3, [r4, r3]
    d440:	43db      	mvns	r3, r3
    d442:	075b      	lsls	r3, r3, #29
    d444:	d000      	beq.n	d448 <MacExecuteCommands+0x11c>
    d446:	e785      	b.n	d354 <MacExecuteCommands+0x28>
    d448:	232a      	movs	r3, #42	; 0x2a
    d44a:	33ff      	adds	r3, #255	; 0xff
    d44c:	5ce5      	ldrb	r5, [r4, r3]
    d44e:	2326      	movs	r3, #38	; 0x26
    d450:	33ff      	adds	r3, #255	; 0xff
    d452:	5ce3      	ldrb	r3, [r4, r3]
    d454:	a905      	add	r1, sp, #20
    d456:	9300      	str	r3, [sp, #0]
    d458:	2392      	movs	r3, #146	; 0x92
    d45a:	005b      	lsls	r3, r3, #1
    d45c:	5ce3      	ldrb	r3, [r4, r3]
    d45e:	066a      	lsls	r2, r5, #25
    d460:	9301      	str	r3, [sp, #4]
    d462:	2328      	movs	r3, #40	; 0x28
    d464:	33ff      	adds	r3, #255	; 0xff
    d466:	5ce0      	ldrb	r0, [r4, r3]
    d468:	3301      	adds	r3, #1
    d46a:	5ce3      	ldrb	r3, [r4, r3]
    d46c:	0f52      	lsrs	r2, r2, #29
    d46e:	021b      	lsls	r3, r3, #8
    d470:	4303      	orrs	r3, r0
    d472:	800b      	strh	r3, [r1, #0]
    d474:	201c      	movs	r0, #28
    d476:	4b25      	ldr	r3, [pc, #148]	; (d50c <MacExecuteCommands+0x1e0>)
    d478:	708a      	strb	r2, [r1, #2]
    d47a:	4798      	blx	r3
    d47c:	2100      	movs	r1, #0
    d47e:	aa04      	add	r2, sp, #16
    d480:	4b23      	ldr	r3, [pc, #140]	; (d510 <MacExecuteCommands+0x1e4>)
    d482:	2014      	movs	r0, #20
    d484:	4798      	blx	r3
    d486:	0023      	movs	r3, r4
    d488:	aa04      	add	r2, sp, #16
    d48a:	7812      	ldrb	r2, [r2, #0]
    d48c:	33be      	adds	r3, #190	; 0xbe
    d48e:	701a      	strb	r2, [r3, #0]
    d490:	0023      	movs	r3, r4
    d492:	aa04      	add	r2, sp, #16
    d494:	7852      	ldrb	r2, [r2, #1]
    d496:	33bf      	adds	r3, #191	; 0xbf
    d498:	701a      	strb	r2, [r3, #0]
    d49a:	4b1e      	ldr	r3, [pc, #120]	; (d514 <MacExecuteCommands+0x1e8>)
    d49c:	4798      	blx	r3
    d49e:	9800      	ldr	r0, [sp, #0]
    d4a0:	4b1d      	ldr	r3, [pc, #116]	; (d518 <MacExecuteCommands+0x1ec>)
    d4a2:	4798      	blx	r3
    d4a4:	0022      	movs	r2, r4
    d4a6:	2308      	movs	r3, #8
    d4a8:	3250      	adds	r2, #80	; 0x50
    d4aa:	7851      	ldrb	r1, [r2, #1]
    d4ac:	072d      	lsls	r5, r5, #28
    d4ae:	430b      	orrs	r3, r1
    d4b0:	7053      	strb	r3, [r2, #1]
    d4b2:	0f2d      	lsrs	r5, r5, #28
    d4b4:	9801      	ldr	r0, [sp, #4]
    d4b6:	4b19      	ldr	r3, [pc, #100]	; (d51c <MacExecuteCommands+0x1f0>)
    d4b8:	b2ee      	uxtb	r6, r5
    d4ba:	4798      	blx	r3
    d4bc:	34ad      	adds	r4, #173	; 0xad
    d4be:	2e00      	cmp	r6, #0
    d4c0:	d10e      	bne.n	d4e0 <MacExecuteCommands+0x1b4>
    d4c2:	7025      	strb	r5, [r4, #0]
    d4c4:	2114      	movs	r1, #20
    d4c6:	4c0e      	ldr	r4, [pc, #56]	; (d500 <MacExecuteCommands+0x1d4>)
    d4c8:	2000      	movs	r0, #0
    d4ca:	47a0      	blx	r4
    d4cc:	2210      	movs	r2, #16
    d4ce:	4b06      	ldr	r3, [pc, #24]	; (d4e8 <MacExecuteCommands+0x1bc>)
    d4d0:	2001      	movs	r0, #1
    d4d2:	3350      	adds	r3, #80	; 0x50
    d4d4:	7859      	ldrb	r1, [r3, #1]
    d4d6:	430a      	orrs	r2, r1
    d4d8:	705a      	strb	r2, [r3, #1]
    d4da:	210b      	movs	r1, #11
    d4dc:	47a0      	blx	r4
    d4de:	e739      	b.n	d354 <MacExecuteCommands+0x28>
    d4e0:	1e73      	subs	r3, r6, #1
    d4e2:	7023      	strb	r3, [r4, #0]
    d4e4:	e7ee      	b.n	d4c4 <MacExecuteCommands+0x198>
    d4e6:	46c0      	nop			; (mov r8, r8)
    d4e8:	20001908 	.word	0x20001908
    d4ec:	0000b9a1 	.word	0x0000b9a1
    d4f0:	0000b865 	.word	0x0000b865
    d4f4:	0000b769 	.word	0x0000b769
    d4f8:	0000d1ad 	.word	0x0000d1ad
    d4fc:	0000ae7d 	.word	0x0000ae7d
    d500:	00008e5d 	.word	0x00008e5d
    d504:	0000b951 	.word	0x0000b951
    d508:	0000b89d 	.word	0x0000b89d
    d50c:	00008bb1 	.word	0x00008bb1
    d510:	00008b79 	.word	0x00008b79
    d514:	0000d181 	.word	0x0000d181
    d518:	0000b631 	.word	0x0000b631
    d51c:	0000b5c5 	.word	0x0000b5c5

0000d520 <LorawanSetDataRange>:
    d520:	2201      	movs	r2, #1
    d522:	b530      	push	{r4, r5, lr}
    d524:	b085      	sub	sp, #20
    d526:	ab01      	add	r3, sp, #4
    d528:	ac02      	add	r4, sp, #8
    d52a:	7018      	strb	r0, [r3, #0]
    d52c:	7020      	strb	r0, [r4, #0]
    d52e:	7061      	strb	r1, [r4, #1]
    d530:	2015      	movs	r0, #21
    d532:	0019      	movs	r1, r3
    d534:	4d11      	ldr	r5, [pc, #68]	; (d57c <LorawanSetDataRange+0x5c>)
    d536:	705a      	strb	r2, [r3, #1]
    d538:	47a8      	blx	r5
    d53a:	2808      	cmp	r0, #8
    d53c:	d003      	beq.n	d546 <LorawanSetDataRange+0x26>
    d53e:	250a      	movs	r5, #10
    d540:	0028      	movs	r0, r5
    d542:	b005      	add	sp, #20
    d544:	bd30      	pop	{r4, r5, pc}
    d546:	0021      	movs	r1, r4
    d548:	2012      	movs	r0, #18
    d54a:	47a8      	blx	r5
    d54c:	0005      	movs	r5, r0
    d54e:	2808      	cmp	r0, #8
    d550:	d1f5      	bne.n	d53e <LorawanSetDataRange+0x1e>
    d552:	0021      	movs	r1, r4
    d554:	4b0a      	ldr	r3, [pc, #40]	; (d580 <LorawanSetDataRange+0x60>)
    d556:	ac03      	add	r4, sp, #12
    d558:	2012      	movs	r0, #18
    d55a:	4798      	blx	r3
    d55c:	0022      	movs	r2, r4
    d55e:	2100      	movs	r1, #0
    d560:	4b08      	ldr	r3, [pc, #32]	; (d584 <LorawanSetDataRange+0x64>)
    d562:	2014      	movs	r0, #20
    d564:	4798      	blx	r3
    d566:	4b08      	ldr	r3, [pc, #32]	; (d588 <LorawanSetDataRange+0x68>)
    d568:	7821      	ldrb	r1, [r4, #0]
    d56a:	001a      	movs	r2, r3
    d56c:	32be      	adds	r2, #190	; 0xbe
    d56e:	7011      	strb	r1, [r2, #0]
    d570:	7862      	ldrb	r2, [r4, #1]
    d572:	33bf      	adds	r3, #191	; 0xbf
    d574:	701a      	strb	r2, [r3, #0]
    d576:	4b05      	ldr	r3, [pc, #20]	; (d58c <LorawanSetDataRange+0x6c>)
    d578:	4798      	blx	r3
    d57a:	e7e1      	b.n	d540 <LorawanSetDataRange+0x20>
    d57c:	00008b95 	.word	0x00008b95
    d580:	00008bb1 	.word	0x00008bb1
    d584:	00008b79 	.word	0x00008b79
    d588:	20001908 	.word	0x20001908
    d58c:	0000d181 	.word	0x0000d181

0000d590 <LorawanSetChannelIdStatus>:
    d590:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d592:	466b      	mov	r3, sp
    d594:	7018      	strb	r0, [r3, #0]
    d596:	7059      	strb	r1, [r3, #1]
    d598:	2016      	movs	r0, #22
    d59a:	4669      	mov	r1, sp
    d59c:	4b0c      	ldr	r3, [pc, #48]	; (d5d0 <LorawanSetChannelIdStatus+0x40>)
    d59e:	4798      	blx	r3
    d5a0:	0004      	movs	r4, r0
    d5a2:	2808      	cmp	r0, #8
    d5a4:	d111      	bne.n	d5ca <LorawanSetChannelIdStatus+0x3a>
    d5a6:	ad01      	add	r5, sp, #4
    d5a8:	002a      	movs	r2, r5
    d5aa:	2100      	movs	r1, #0
    d5ac:	4b09      	ldr	r3, [pc, #36]	; (d5d4 <LorawanSetChannelIdStatus+0x44>)
    d5ae:	2014      	movs	r0, #20
    d5b0:	4798      	blx	r3
    d5b2:	4b09      	ldr	r3, [pc, #36]	; (d5d8 <LorawanSetChannelIdStatus+0x48>)
    d5b4:	7829      	ldrb	r1, [r5, #0]
    d5b6:	001a      	movs	r2, r3
    d5b8:	32be      	adds	r2, #190	; 0xbe
    d5ba:	7011      	strb	r1, [r2, #0]
    d5bc:	786a      	ldrb	r2, [r5, #1]
    d5be:	33bf      	adds	r3, #191	; 0xbf
    d5c0:	701a      	strb	r2, [r3, #0]
    d5c2:	4b06      	ldr	r3, [pc, #24]	; (d5dc <LorawanSetChannelIdStatus+0x4c>)
    d5c4:	4798      	blx	r3
    d5c6:	0020      	movs	r0, r4
    d5c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d5ca:	240a      	movs	r4, #10
    d5cc:	e7fb      	b.n	d5c6 <LorawanSetChannelIdStatus+0x36>
    d5ce:	46c0      	nop			; (mov r8, r8)
    d5d0:	00008bb1 	.word	0x00008bb1
    d5d4:	00008b79 	.word	0x00008b79
    d5d8:	20001908 	.word	0x20001908
    d5dc:	0000d181 	.word	0x0000d181

0000d5e0 <LORAWAN_RxDone>:
    d5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5e2:	4ddc      	ldr	r5, [pc, #880]	; (d954 <LORAWAN_RxDone+0x374>)
    d5e4:	b091      	sub	sp, #68	; 0x44
    d5e6:	002b      	movs	r3, r5
    d5e8:	3350      	adds	r3, #80	; 0x50
    d5ea:	781b      	ldrb	r3, [r3, #0]
    d5ec:	0007      	movs	r7, r0
    d5ee:	b25a      	sxtb	r2, r3
    d5f0:	000c      	movs	r4, r1
    d5f2:	2a00      	cmp	r2, #0
    d5f4:	da01      	bge.n	d5fa <LORAWAN_RxDone+0x1a>
    d5f6:	f000 fc90 	bl	df1a <LORAWAN_RxDone+0x93a>
    d5fa:	7801      	ldrb	r1, [r0, #0]
    d5fc:	221f      	movs	r2, #31
    d5fe:	000e      	movs	r6, r1
    d600:	4396      	bics	r6, r2
    d602:	2e20      	cmp	r6, #32
    d604:	d000      	beq.n	d608 <LORAWAN_RxDone+0x28>
    d606:	e131      	b.n	d86c <LORAWAN_RxDone+0x28c>
    d608:	782b      	ldrb	r3, [r5, #0]
    d60a:	2b00      	cmp	r3, #0
    d60c:	d001      	beq.n	d612 <LORAWAN_RxDone+0x32>
    d60e:	f000 fc6d 	bl	deec <LORAWAN_RxDone+0x90c>
    d612:	002b      	movs	r3, r5
    d614:	3360      	adds	r3, #96	; 0x60
    d616:	781b      	ldrb	r3, [r3, #0]
    d618:	075b      	lsls	r3, r3, #29
    d61a:	d401      	bmi.n	d620 <LORAWAN_RxDone+0x40>
    d61c:	f000 fc66 	bl	deec <LORAWAN_RxDone+0x90c>
    d620:	1e63      	subs	r3, r4, #1
    d622:	b2db      	uxtb	r3, r3
    d624:	9304      	str	r3, [sp, #16]
    d626:	4bcc      	ldr	r3, [pc, #816]	; (d958 <LORAWAN_RxDone+0x378>)
    d628:	469c      	mov	ip, r3
    d62a:	9b04      	ldr	r3, [sp, #16]
    d62c:	2b00      	cmp	r3, #0
    d62e:	d12c      	bne.n	d68a <LORAWAN_RxDone+0xaa>
    d630:	1f23      	subs	r3, r4, #4
    d632:	9305      	str	r3, [sp, #20]
    d634:	466b      	mov	r3, sp
    d636:	4660      	mov	r0, ip
    d638:	7d1b      	ldrb	r3, [r3, #20]
    d63a:	003a      	movs	r2, r7
    d63c:	49c7      	ldr	r1, [pc, #796]	; (d95c <LORAWAN_RxDone+0x37c>)
    d63e:	4ec8      	ldr	r6, [pc, #800]	; (d960 <LORAWAN_RxDone+0x380>)
    d640:	47b0      	blx	r6
    d642:	2204      	movs	r2, #4
    d644:	49c5      	ldr	r1, [pc, #788]	; (d95c <LORAWAN_RxDone+0x37c>)
    d646:	4bc7      	ldr	r3, [pc, #796]	; (d964 <LORAWAN_RxDone+0x384>)
    d648:	a80e      	add	r0, sp, #56	; 0x38
    d64a:	4798      	blx	r3
    d64c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    d64e:	1f23      	subs	r3, r4, #4
    d650:	18f9      	adds	r1, r7, r3
    d652:	2204      	movs	r2, #4
    d654:	4bc3      	ldr	r3, [pc, #780]	; (d964 <LORAWAN_RxDone+0x384>)
    d656:	a80e      	add	r0, sp, #56	; 0x38
    d658:	960b      	str	r6, [sp, #44]	; 0x2c
    d65a:	4798      	blx	r3
    d65c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d65e:	4bbd      	ldr	r3, [pc, #756]	; (d954 <LORAWAN_RxDone+0x374>)
    d660:	210e      	movs	r1, #14
    d662:	42b2      	cmp	r2, r6
    d664:	d01e      	beq.n	d6a4 <LORAWAN_RxDone+0xc4>
    d666:	001a      	movs	r2, r3
    d668:	3250      	adds	r2, #80	; 0x50
    d66a:	7812      	ldrb	r2, [r2, #0]
    d66c:	400a      	ands	r2, r1
    d66e:	2a0a      	cmp	r2, #10
    d670:	d005      	beq.n	d67e <LORAWAN_RxDone+0x9e>
    d672:	2a06      	cmp	r2, #6
    d674:	d105      	bne.n	d682 <LORAWAN_RxDone+0xa2>
    d676:	33c4      	adds	r3, #196	; 0xc4
    d678:	781b      	ldrb	r3, [r3, #0]
    d67a:	2b00      	cmp	r3, #0
    d67c:	d001      	beq.n	d682 <LORAWAN_RxDone+0xa2>
    d67e:	4bba      	ldr	r3, [pc, #744]	; (d968 <LORAWAN_RxDone+0x388>)
    d680:	4798      	blx	r3
    d682:	4bba      	ldr	r3, [pc, #744]	; (d96c <LORAWAN_RxDone+0x38c>)
    d684:	4798      	blx	r3
    d686:	200a      	movs	r0, #10
    d688:	e0eb      	b.n	d862 <LORAWAN_RxDone+0x282>
    d68a:	9b04      	ldr	r3, [sp, #16]
    d68c:	4661      	mov	r1, ip
    d68e:	1ae0      	subs	r0, r4, r3
    d690:	1838      	adds	r0, r7, r0
    d692:	4bb7      	ldr	r3, [pc, #732]	; (d970 <LORAWAN_RxDone+0x390>)
    d694:	4798      	blx	r3
    d696:	9b04      	ldr	r3, [sp, #16]
    d698:	2b10      	cmp	r3, #16
    d69a:	d901      	bls.n	d6a0 <LORAWAN_RxDone+0xc0>
    d69c:	3b10      	subs	r3, #16
    d69e:	e7c0      	b.n	d622 <LORAWAN_RxDone+0x42>
    d6a0:	2300      	movs	r3, #0
    d6a2:	e7bf      	b.n	d624 <LORAWAN_RxDone+0x44>
    d6a4:	001a      	movs	r2, r3
    d6a6:	3250      	adds	r2, #80	; 0x50
    d6a8:	7812      	ldrb	r2, [r2, #0]
    d6aa:	400a      	ands	r2, r1
    d6ac:	2a06      	cmp	r2, #6
    d6ae:	d103      	bne.n	d6b8 <LORAWAN_RxDone+0xd8>
    d6b0:	33b7      	adds	r3, #183	; 0xb7
    d6b2:	7818      	ldrb	r0, [r3, #0]
    d6b4:	4baf      	ldr	r3, [pc, #700]	; (d974 <LORAWAN_RxDone+0x394>)
    d6b6:	4798      	blx	r3
    d6b8:	7a3a      	ldrb	r2, [r7, #8]
    d6ba:	79fb      	ldrb	r3, [r7, #7]
    d6bc:	0212      	lsls	r2, r2, #8
    d6be:	431a      	orrs	r2, r3
    d6c0:	7a7b      	ldrb	r3, [r7, #9]
    d6c2:	2001      	movs	r0, #1
    d6c4:	041b      	lsls	r3, r3, #16
    d6c6:	431a      	orrs	r2, r3
    d6c8:	7abb      	ldrb	r3, [r7, #10]
    d6ca:	061b      	lsls	r3, r3, #24
    d6cc:	4313      	orrs	r3, r2
    d6ce:	0a19      	lsrs	r1, r3, #8
    d6d0:	706b      	strb	r3, [r5, #1]
    d6d2:	70a9      	strb	r1, [r5, #2]
    d6d4:	0c19      	lsrs	r1, r3, #16
    d6d6:	0e1b      	lsrs	r3, r3, #24
    d6d8:	70e9      	strb	r1, [r5, #3]
    d6da:	712b      	strb	r3, [r5, #4]
    d6dc:	250f      	movs	r5, #15
    d6de:	2103      	movs	r1, #3
    d6e0:	4ba5      	ldr	r3, [pc, #660]	; (d978 <LORAWAN_RxDone+0x398>)
    d6e2:	4798      	blx	r3
    d6e4:	7b38      	ldrb	r0, [r7, #12]
    d6e6:	4ba5      	ldr	r3, [pc, #660]	; (d97c <LORAWAN_RxDone+0x39c>)
    d6e8:	4028      	ands	r0, r5
    d6ea:	4798      	blx	r3
    d6ec:	7af8      	ldrb	r0, [r7, #11]
    d6ee:	4ba4      	ldr	r3, [pc, #656]	; (d980 <LORAWAN_RxDone+0x3a0>)
    d6f0:	0641      	lsls	r1, r0, #25
    d6f2:	0700      	lsls	r0, r0, #28
    d6f4:	0f49      	lsrs	r1, r1, #29
    d6f6:	0f00      	lsrs	r0, r0, #28
    d6f8:	4798      	blx	r3
    d6fa:	2c21      	cmp	r4, #33	; 0x21
    d6fc:	d000      	beq.n	d700 <LORAWAN_RxDone+0x120>
    d6fe:	e088      	b.n	d812 <LORAWAN_RxDone+0x232>
    d700:	ab04      	add	r3, sp, #16
    d702:	3c0f      	subs	r4, #15
    d704:	18e4      	adds	r4, r4, r3
    d706:	0022      	movs	r2, r4
    d708:	4b9e      	ldr	r3, [pc, #632]	; (d984 <LORAWAN_RxDone+0x3a4>)
    d70a:	499f      	ldr	r1, [pc, #636]	; (d988 <LORAWAN_RxDone+0x3a8>)
    d70c:	2007      	movs	r0, #7
    d70e:	4798      	blx	r3
    d710:	7823      	ldrb	r3, [r4, #0]
    d712:	2bff      	cmp	r3, #255	; 0xff
    d714:	d07d      	beq.n	d812 <LORAWAN_RxDone+0x232>
    d716:	2350      	movs	r3, #80	; 0x50
    d718:	43ab      	bics	r3, r5
    d71a:	9306      	str	r3, [sp, #24]
    d71c:	003b      	movs	r3, r7
    d71e:	330d      	adds	r3, #13
    d720:	9305      	str	r3, [sp, #20]
    d722:	2400      	movs	r4, #0
    d724:	2203      	movs	r2, #3
    d726:	9905      	ldr	r1, [sp, #20]
    d728:	4b8e      	ldr	r3, [pc, #568]	; (d964 <LORAWAN_RxDone+0x384>)
    d72a:	a80c      	add	r0, sp, #48	; 0x30
    d72c:	940c      	str	r4, [sp, #48]	; 0x30
    d72e:	4798      	blx	r3
    d730:	2364      	movs	r3, #100	; 0x64
    d732:	990c      	ldr	r1, [sp, #48]	; 0x30
    d734:	aa04      	add	r2, sp, #16
    d736:	4359      	muls	r1, r3
    d738:	3b52      	subs	r3, #82	; 0x52
    d73a:	189b      	adds	r3, r3, r2
    d73c:	7818      	ldrb	r0, [r3, #0]
    d73e:	9b04      	ldr	r3, [sp, #16]
    d740:	910c      	str	r1, [sp, #48]	; 0x30
    d742:	1818      	adds	r0, r3, r0
    d744:	b2c0      	uxtb	r0, r0
    d746:	74d0      	strb	r0, [r2, #19]
    d748:	42a1      	cmp	r1, r4
    d74a:	d100      	bne.n	d74e <LORAWAN_RxDone+0x16e>
    d74c:	e08b      	b.n	d866 <LORAWAN_RxDone+0x286>
    d74e:	466b      	mov	r3, sp
    d750:	7e1b      	ldrb	r3, [r3, #24]
    d752:	ae0e      	add	r6, sp, #56	; 0x38
    d754:	ad09      	add	r5, sp, #36	; 0x24
    d756:	7130      	strb	r0, [r6, #4]
    d758:	910e      	str	r1, [sp, #56]	; 0x38
    d75a:	7028      	strb	r0, [r5, #0]
    d75c:	706b      	strb	r3, [r5, #1]
    d75e:	0031      	movs	r1, r6
    d760:	2002      	movs	r0, #2
    d762:	4b8a      	ldr	r3, [pc, #552]	; (d98c <LORAWAN_RxDone+0x3ac>)
    d764:	4798      	blx	r3
    d766:	2808      	cmp	r0, #8
    d768:	d13f      	bne.n	d7ea <LORAWAN_RxDone+0x20a>
    d76a:	0031      	movs	r1, r6
    d76c:	0020      	movs	r0, r4
    d76e:	4e88      	ldr	r6, [pc, #544]	; (d990 <LORAWAN_RxDone+0x3b0>)
    d770:	47b0      	blx	r6
    d772:	0029      	movs	r1, r5
    d774:	2012      	movs	r0, #18
    d776:	ad0a      	add	r5, sp, #40	; 0x28
    d778:	47b0      	blx	r6
    d77a:	0021      	movs	r1, r4
    d77c:	002a      	movs	r2, r5
    d77e:	4b81      	ldr	r3, [pc, #516]	; (d984 <LORAWAN_RxDone+0x3a4>)
    d780:	2014      	movs	r0, #20
    d782:	4798      	blx	r3
    d784:	4c73      	ldr	r4, [pc, #460]	; (d954 <LORAWAN_RxDone+0x374>)
    d786:	782a      	ldrb	r2, [r5, #0]
    d788:	0023      	movs	r3, r4
    d78a:	33be      	adds	r3, #190	; 0xbe
    d78c:	701a      	strb	r2, [r3, #0]
    d78e:	0023      	movs	r3, r4
    d790:	786a      	ldrb	r2, [r5, #1]
    d792:	251a      	movs	r5, #26
    d794:	33bf      	adds	r3, #191	; 0xbf
    d796:	701a      	strb	r2, [r3, #0]
    d798:	4b7e      	ldr	r3, [pc, #504]	; (d994 <LORAWAN_RxDone+0x3b4>)
    d79a:	4798      	blx	r3
    d79c:	ab04      	add	r3, sp, #16
    d79e:	18ed      	adds	r5, r5, r3
    d7a0:	2313      	movs	r3, #19
    d7a2:	a904      	add	r1, sp, #16
    d7a4:	185b      	adds	r3, r3, r1
    d7a6:	0019      	movs	r1, r3
    d7a8:	002a      	movs	r2, r5
    d7aa:	4b76      	ldr	r3, [pc, #472]	; (d984 <LORAWAN_RxDone+0x3a4>)
    d7ac:	201e      	movs	r0, #30
    d7ae:	4798      	blx	r3
    d7b0:	0023      	movs	r3, r4
    d7b2:	33e4      	adds	r3, #228	; 0xe4
    d7b4:	781b      	ldrb	r3, [r3, #0]
    d7b6:	079b      	lsls	r3, r3, #30
    d7b8:	d507      	bpl.n	d7ca <LORAWAN_RxDone+0x1ea>
    d7ba:	ab04      	add	r3, sp, #16
    d7bc:	7cdb      	ldrb	r3, [r3, #19]
    d7be:	a90d      	add	r1, sp, #52	; 0x34
    d7c0:	708b      	strb	r3, [r1, #2]
    d7c2:	882b      	ldrh	r3, [r5, #0]
    d7c4:	201e      	movs	r0, #30
    d7c6:	800b      	strh	r3, [r1, #0]
    d7c8:	47b0      	blx	r6
    d7ca:	2313      	movs	r3, #19
    d7cc:	aa04      	add	r2, sp, #16
    d7ce:	189b      	adds	r3, r3, r2
    d7d0:	7818      	ldrb	r0, [r3, #0]
    d7d2:	2101      	movs	r1, #1
    d7d4:	4b70      	ldr	r3, [pc, #448]	; (d998 <LORAWAN_RxDone+0x3b8>)
    d7d6:	4798      	blx	r3
    d7d8:	2204      	movs	r2, #4
    d7da:	3450      	adds	r4, #80	; 0x50
    d7dc:	7863      	ldrb	r3, [r4, #1]
    d7de:	210b      	movs	r1, #11
    d7e0:	4313      	orrs	r3, r2
    d7e2:	7063      	strb	r3, [r4, #1]
    d7e4:	2001      	movs	r0, #1
    d7e6:	4b64      	ldr	r3, [pc, #400]	; (d978 <LORAWAN_RxDone+0x398>)
    d7e8:	4798      	blx	r3
    d7ea:	9b04      	ldr	r3, [sp, #16]
    d7ec:	3301      	adds	r3, #1
    d7ee:	b2db      	uxtb	r3, r3
    d7f0:	9304      	str	r3, [sp, #16]
    d7f2:	9b05      	ldr	r3, [sp, #20]
    d7f4:	3303      	adds	r3, #3
    d7f6:	9305      	str	r3, [sp, #20]
    d7f8:	9b04      	ldr	r3, [sp, #16]
    d7fa:	2b05      	cmp	r3, #5
    d7fc:	d191      	bne.n	d722 <LORAWAN_RxDone+0x142>
    d7fe:	2204      	movs	r2, #4
    d800:	4b54      	ldr	r3, [pc, #336]	; (d954 <LORAWAN_RxDone+0x374>)
    d802:	2001      	movs	r0, #1
    d804:	3350      	adds	r3, #80	; 0x50
    d806:	7859      	ldrb	r1, [r3, #1]
    d808:	430a      	orrs	r2, r1
    d80a:	705a      	strb	r2, [r3, #1]
    d80c:	210b      	movs	r1, #11
    d80e:	4b5a      	ldr	r3, [pc, #360]	; (d978 <LORAWAN_RxDone+0x398>)
    d810:	4798      	blx	r3
    d812:	4c62      	ldr	r4, [pc, #392]	; (d99c <LORAWAN_RxDone+0x3bc>)
    d814:	1c7e      	adds	r6, r7, #1
    d816:	3704      	adds	r7, #4
    d818:	0031      	movs	r1, r6
    d81a:	0020      	movs	r0, r4
    d81c:	003a      	movs	r2, r7
    d81e:	4b60      	ldr	r3, [pc, #384]	; (d9a0 <LORAWAN_RxDone+0x3c0>)
    d820:	4798      	blx	r3
    d822:	2302      	movs	r3, #2
    d824:	4a4b      	ldr	r2, [pc, #300]	; (d954 <LORAWAN_RxDone+0x374>)
    d826:	4d4c      	ldr	r5, [pc, #304]	; (d958 <LORAWAN_RxDone+0x378>)
    d828:	7553      	strb	r3, [r2, #21]
    d82a:	0020      	movs	r0, r4
    d82c:	0029      	movs	r1, r5
    d82e:	4b50      	ldr	r3, [pc, #320]	; (d970 <LORAWAN_RxDone+0x390>)
    d830:	4798      	blx	r3
    d832:	2105      	movs	r1, #5
    d834:	4b50      	ldr	r3, [pc, #320]	; (d978 <LORAWAN_RxDone+0x398>)
    d836:	2001      	movs	r0, #1
    d838:	4798      	blx	r3
    d83a:	0031      	movs	r1, r6
    d83c:	2601      	movs	r6, #1
    d83e:	4c59      	ldr	r4, [pc, #356]	; (d9a4 <LORAWAN_RxDone+0x3c4>)
    d840:	003a      	movs	r2, r7
    d842:	0020      	movs	r0, r4
    d844:	4b56      	ldr	r3, [pc, #344]	; (d9a0 <LORAWAN_RxDone+0x3c0>)
    d846:	4798      	blx	r3
    d848:	4b42      	ldr	r3, [pc, #264]	; (d954 <LORAWAN_RxDone+0x374>)
    d84a:	0029      	movs	r1, r5
    d84c:	715e      	strb	r6, [r3, #5]
    d84e:	0020      	movs	r0, r4
    d850:	4b47      	ldr	r3, [pc, #284]	; (d970 <LORAWAN_RxDone+0x390>)
    d852:	4798      	blx	r3
    d854:	2104      	movs	r1, #4
    d856:	4b48      	ldr	r3, [pc, #288]	; (d978 <LORAWAN_RxDone+0x398>)
    d858:	0030      	movs	r0, r6
    d85a:	4798      	blx	r3
    d85c:	4b52      	ldr	r3, [pc, #328]	; (d9a8 <LORAWAN_RxDone+0x3c8>)
    d85e:	4798      	blx	r3
    d860:	2008      	movs	r0, #8
    d862:	b011      	add	sp, #68	; 0x44
    d864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d866:	4b4c      	ldr	r3, [pc, #304]	; (d998 <LORAWAN_RxDone+0x3b8>)
    d868:	4798      	blx	r3
    d86a:	e7be      	b.n	d7ea <LORAWAN_RxDone+0x20a>
    d86c:	22bf      	movs	r2, #191	; 0xbf
    d86e:	3e60      	subs	r6, #96	; 0x60
    d870:	4032      	ands	r2, r6
    d872:	d000      	beq.n	d876 <LORAWAN_RxDone+0x296>
    d874:	e33a      	b.n	deec <LORAWAN_RxDone+0x90c>
    d876:	2601      	movs	r6, #1
    d878:	4233      	tst	r3, r6
    d87a:	d100      	bne.n	d87e <LORAWAN_RxDone+0x29e>
    d87c:	e336      	b.n	deec <LORAWAN_RxDone+0x90c>
    d87e:	7928      	ldrb	r0, [r5, #4]
    d880:	682b      	ldr	r3, [r5, #0]
    d882:	0600      	lsls	r0, r0, #24
    d884:	0a1b      	lsrs	r3, r3, #8
    d886:	4318      	orrs	r0, r3
    d888:	002b      	movs	r3, r5
    d88a:	33ac      	adds	r3, #172	; 0xac
    d88c:	701a      	strb	r2, [r3, #0]
    d88e:	9004      	str	r0, [sp, #16]
    d890:	78b8      	ldrb	r0, [r7, #2]
    d892:	787b      	ldrb	r3, [r7, #1]
    d894:	0200      	lsls	r0, r0, #8
    d896:	4318      	orrs	r0, r3
    d898:	78fb      	ldrb	r3, [r7, #3]
    d89a:	041b      	lsls	r3, r3, #16
    d89c:	4318      	orrs	r0, r3
    d89e:	793b      	ldrb	r3, [r7, #4]
    d8a0:	061b      	lsls	r3, r3, #24
    d8a2:	4303      	orrs	r3, r0
    d8a4:	9804      	ldr	r0, [sp, #16]
    d8a6:	4298      	cmp	r0, r3
    d8a8:	d050      	beq.n	d94c <LORAWAN_RxDone+0x36c>
    d8aa:	7a3a      	ldrb	r2, [r7, #8]
    d8ac:	0949      	lsrs	r1, r1, #5
    d8ae:	0038      	movs	r0, r7
    d8b0:	4b3e      	ldr	r3, [pc, #248]	; (d9ac <LORAWAN_RxDone+0x3cc>)
    d8b2:	4798      	blx	r3
    d8b4:	2808      	cmp	r0, #8
    d8b6:	d000      	beq.n	d8ba <LORAWAN_RxDone+0x2da>
    d8b8:	e6e3      	b.n	d682 <LORAWAN_RxDone+0xa2>
    d8ba:	35f8      	adds	r5, #248	; 0xf8
    d8bc:	4a3c      	ldr	r2, [pc, #240]	; (d9b0 <LORAWAN_RxDone+0x3d0>)
    d8be:	682b      	ldr	r3, [r5, #0]
    d8c0:	9204      	str	r2, [sp, #16]
    d8c2:	9606      	str	r6, [sp, #24]
    d8c4:	1f22      	subs	r2, r4, #4
    d8c6:	9205      	str	r2, [sp, #20]
    d8c8:	466a      	mov	r2, sp
    d8ca:	79f9      	ldrb	r1, [r7, #7]
    d8cc:	79b8      	ldrb	r0, [r7, #6]
    d8ce:	0209      	lsls	r1, r1, #8
    d8d0:	7d12      	ldrb	r2, [r2, #20]
    d8d2:	4301      	orrs	r1, r0
    d8d4:	9300      	str	r3, [sp, #0]
    d8d6:	2001      	movs	r0, #1
    d8d8:	2349      	movs	r3, #73	; 0x49
    d8da:	4d36      	ldr	r5, [pc, #216]	; (d9b4 <LORAWAN_RxDone+0x3d4>)
    d8dc:	47a8      	blx	r5
    d8de:	4d21      	ldr	r5, [pc, #132]	; (d964 <LORAWAN_RxDone+0x384>)
    d8e0:	2210      	movs	r2, #16
    d8e2:	491e      	ldr	r1, [pc, #120]	; (d95c <LORAWAN_RxDone+0x37c>)
    d8e4:	4834      	ldr	r0, [pc, #208]	; (d9b8 <LORAWAN_RxDone+0x3d8>)
    d8e6:	47a8      	blx	r5
    d8e8:	1f22      	subs	r2, r4, #4
    d8ea:	0039      	movs	r1, r7
    d8ec:	4833      	ldr	r0, [pc, #204]	; (d9bc <LORAWAN_RxDone+0x3dc>)
    d8ee:	47a8      	blx	r5
    d8f0:	0023      	movs	r3, r4
    d8f2:	330c      	adds	r3, #12
    d8f4:	b2db      	uxtb	r3, r3
    d8f6:	4a30      	ldr	r2, [pc, #192]	; (d9b8 <LORAWAN_RxDone+0x3d8>)
    d8f8:	4918      	ldr	r1, [pc, #96]	; (d95c <LORAWAN_RxDone+0x37c>)
    d8fa:	9804      	ldr	r0, [sp, #16]
    d8fc:	4e18      	ldr	r6, [pc, #96]	; (d960 <LORAWAN_RxDone+0x380>)
    d8fe:	47b0      	blx	r6
    d900:	2204      	movs	r2, #4
    d902:	4916      	ldr	r1, [pc, #88]	; (d95c <LORAWAN_RxDone+0x37c>)
    d904:	a80b      	add	r0, sp, #44	; 0x2c
    d906:	47a8      	blx	r5
    d908:	1f23      	subs	r3, r4, #4
    d90a:	18f9      	adds	r1, r7, r3
    d90c:	2204      	movs	r2, #4
    d90e:	a80e      	add	r0, sp, #56	; 0x38
    d910:	47a8      	blx	r5
    d912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d916:	4293      	cmp	r3, r2
    d918:	d056      	beq.n	d9c8 <LORAWAN_RxDone+0x3e8>
    d91a:	4b14      	ldr	r3, [pc, #80]	; (d96c <LORAWAN_RxDone+0x38c>)
    d91c:	4798      	blx	r3
    d91e:	4928      	ldr	r1, [pc, #160]	; (d9c0 <LORAWAN_RxDone+0x3e0>)
    d920:	784a      	ldrb	r2, [r1, #1]
    d922:	780b      	ldrb	r3, [r1, #0]
    d924:	0212      	lsls	r2, r2, #8
    d926:	431a      	orrs	r2, r3
    d928:	788b      	ldrb	r3, [r1, #2]
    d92a:	041b      	lsls	r3, r3, #16
    d92c:	431a      	orrs	r2, r3
    d92e:	78cb      	ldrb	r3, [r1, #3]
    d930:	061b      	lsls	r3, r3, #24
    d932:	4313      	orrs	r3, r2
    d934:	d100      	bne.n	d938 <LORAWAN_RxDone+0x358>
    d936:	e6a6      	b.n	d686 <LORAWAN_RxDone+0xa6>
    d938:	2120      	movs	r1, #32
    d93a:	2018      	movs	r0, #24
    d93c:	4b05      	ldr	r3, [pc, #20]	; (d954 <LORAWAN_RxDone+0x374>)
    d93e:	3360      	adds	r3, #96	; 0x60
    d940:	781a      	ldrb	r2, [r3, #0]
    d942:	438a      	bics	r2, r1
    d944:	701a      	strb	r2, [r3, #0]
    d946:	4b1f      	ldr	r3, [pc, #124]	; (d9c4 <LORAWAN_RxDone+0x3e4>)
    d948:	4798      	blx	r3
    d94a:	e69c      	b.n	d686 <LORAWAN_RxDone+0xa6>
    d94c:	4915      	ldr	r1, [pc, #84]	; (d9a4 <LORAWAN_RxDone+0x3c4>)
    d94e:	9206      	str	r2, [sp, #24]
    d950:	9104      	str	r1, [sp, #16]
    d952:	e7b7      	b.n	d8c4 <LORAWAN_RxDone+0x2e4>
    d954:	20001908 	.word	0x20001908
    d958:	2000192d 	.word	0x2000192d
    d95c:	20000f24 	.word	0x20000f24
    d960:	0000e779 	.word	0x0000e779
    d964:	00013ba5 	.word	0x00013ba5
    d968:	0000b715 	.word	0x0000b715
    d96c:	0000d10d 	.word	0x0000d10d
    d970:	0000e739 	.word	0x0000e739
    d974:	00009bf9 	.word	0x00009bf9
    d978:	00008e5d 	.word	0x00008e5d
    d97c:	0000ae7d 	.word	0x0000ae7d
    d980:	0000b5e1 	.word	0x0000b5e1
    d984:	00008b79 	.word	0x00008b79
    d988:	200019bb 	.word	0x200019bb
    d98c:	00008b95 	.word	0x00008b95
    d990:	00008bb1 	.word	0x00008bb1
    d994:	0000d181 	.word	0x0000d181
    d998:	0000d591 	.word	0x0000d591
    d99c:	2000191d 	.word	0x2000191d
    d9a0:	0000b119 	.word	0x0000b119
    d9a4:	2000190d 	.word	0x2000190d
    d9a8:	0000b079 	.word	0x0000b079
    d9ac:	0000eb65 	.word	0x0000eb65
    d9b0:	20001a04 	.word	0x20001a04
    d9b4:	0000b155 	.word	0x0000b155
    d9b8:	20001b50 	.word	0x20001b50
    d9bc:	20001b60 	.word	0x20001b60
    d9c0:	20001b48 	.word	0x20001b48
    d9c4:	0000c485 	.word	0x0000c485
    d9c8:	9b06      	ldr	r3, [sp, #24]
    d9ca:	2b00      	cmp	r3, #0
    d9cc:	d006      	beq.n	d9dc <LORAWAN_RxDone+0x3fc>
    d9ce:	003a      	movs	r2, r7
    d9d0:	0021      	movs	r1, r4
    d9d2:	0038      	movs	r0, r7
    d9d4:	4bd4      	ldr	r3, [pc, #848]	; (dd28 <LORAWAN_RxDone+0x748>)
    d9d6:	4798      	blx	r3
    d9d8:	2001      	movs	r0, #1
    d9da:	e742      	b.n	d862 <LORAWAN_RxDone+0x282>
    d9dc:	4ed3      	ldr	r6, [pc, #844]	; (dd2c <LORAWAN_RxDone+0x74c>)
    d9de:	79fb      	ldrb	r3, [r7, #7]
    d9e0:	0031      	movs	r1, r6
    d9e2:	79ba      	ldrb	r2, [r7, #6]
    d9e4:	021b      	lsls	r3, r3, #8
    d9e6:	3158      	adds	r1, #88	; 0x58
    d9e8:	4313      	orrs	r3, r2
    d9ea:	880a      	ldrh	r2, [r1, #0]
    d9ec:	4293      	cmp	r3, r2
    d9ee:	d357      	bcc.n	daa0 <LORAWAN_RxDone+0x4c0>
    d9f0:	0030      	movs	r0, r6
    d9f2:	30a4      	adds	r0, #164	; 0xa4
    d9f4:	8800      	ldrh	r0, [r0, #0]
    d9f6:	1a9a      	subs	r2, r3, r2
    d9f8:	4dcd      	ldr	r5, [pc, #820]	; (dd30 <LORAWAN_RxDone+0x750>)
    d9fa:	4282      	cmp	r2, r0
    d9fc:	dd3d      	ble.n	da7a <LORAWAN_RxDone+0x49a>
    d9fe:	0032      	movs	r2, r6
    da00:	2101      	movs	r1, #1
    da02:	3260      	adds	r2, #96	; 0x60
    da04:	7813      	ldrb	r3, [r2, #0]
    da06:	438b      	bics	r3, r1
    da08:	7013      	strb	r3, [r2, #0]
    da0a:	0033      	movs	r3, r6
    da0c:	33c8      	adds	r3, #200	; 0xc8
    da0e:	781b      	ldrb	r3, [r3, #0]
    da10:	428b      	cmp	r3, r1
    da12:	d10f      	bne.n	da34 <LORAWAN_RxDone+0x454>
    da14:	0032      	movs	r2, r6
    da16:	0034      	movs	r4, r6
    da18:	3250      	adds	r2, #80	; 0x50
    da1a:	7813      	ldrb	r3, [r2, #0]
    da1c:	310d      	adds	r1, #13
    da1e:	438b      	bics	r3, r1
    da20:	7013      	strb	r3, [r2, #0]
    da22:	34b9      	adds	r4, #185	; 0xb9
    da24:	7820      	ldrb	r0, [r4, #0]
    da26:	4bc3      	ldr	r3, [pc, #780]	; (dd34 <LORAWAN_RxDone+0x754>)
    da28:	4798      	blx	r3
    da2a:	2800      	cmp	r0, #0
    da2c:	d002      	beq.n	da34 <LORAWAN_RxDone+0x454>
    da2e:	7820      	ldrb	r0, [r4, #0]
    da30:	4bc1      	ldr	r3, [pc, #772]	; (dd38 <LORAWAN_RxDone+0x758>)
    da32:	4798      	blx	r3
    da34:	49c1      	ldr	r1, [pc, #772]	; (dd3c <LORAWAN_RxDone+0x75c>)
    da36:	784a      	ldrb	r2, [r1, #1]
    da38:	780b      	ldrb	r3, [r1, #0]
    da3a:	0212      	lsls	r2, r2, #8
    da3c:	431a      	orrs	r2, r3
    da3e:	788b      	ldrb	r3, [r1, #2]
    da40:	041b      	lsls	r3, r3, #16
    da42:	431a      	orrs	r2, r3
    da44:	78cb      	ldrb	r3, [r1, #3]
    da46:	061b      	lsls	r3, r3, #24
    da48:	4313      	orrs	r3, r2
    da4a:	d008      	beq.n	da5e <LORAWAN_RxDone+0x47e>
    da4c:	0032      	movs	r2, r6
    da4e:	2120      	movs	r1, #32
    da50:	3260      	adds	r2, #96	; 0x60
    da52:	7813      	ldrb	r3, [r2, #0]
    da54:	2017      	movs	r0, #23
    da56:	438b      	bics	r3, r1
    da58:	7013      	strb	r3, [r2, #0]
    da5a:	4bb9      	ldr	r3, [pc, #740]	; (dd40 <LORAWAN_RxDone+0x760>)
    da5c:	4798      	blx	r3
    da5e:	2401      	movs	r4, #1
    da60:	3650      	adds	r6, #80	; 0x50
    da62:	7873      	ldrb	r3, [r6, #1]
    da64:	43a3      	bics	r3, r4
    da66:	7073      	strb	r3, [r6, #1]
    da68:	78b3      	ldrb	r3, [r6, #2]
    da6a:	4323      	orrs	r3, r4
    da6c:	70b3      	strb	r3, [r6, #2]
    da6e:	4bb5      	ldr	r3, [pc, #724]	; (dd44 <LORAWAN_RxDone+0x764>)
    da70:	4798      	blx	r3
    da72:	210b      	movs	r1, #11
    da74:	0020      	movs	r0, r4
    da76:	47a8      	blx	r5
    da78:	e7ae      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    da7a:	800b      	strh	r3, [r1, #0]
    da7c:	2001      	movs	r0, #1
    da7e:	210a      	movs	r1, #10
    da80:	47a8      	blx	r5
    da82:	6db3      	ldr	r3, [r6, #88]	; 0x58
    da84:	3301      	adds	r3, #1
    da86:	d14a      	bne.n	db1e <LORAWAN_RxDone+0x53e>
    da88:	2401      	movs	r4, #1
    da8a:	3650      	adds	r6, #80	; 0x50
    da8c:	78b3      	ldrb	r3, [r6, #2]
    da8e:	4323      	orrs	r3, r4
    da90:	70b3      	strb	r3, [r6, #2]
    da92:	4bac      	ldr	r3, [pc, #688]	; (dd44 <LORAWAN_RxDone+0x764>)
    da94:	4798      	blx	r3
    da96:	210b      	movs	r1, #11
    da98:	0020      	movs	r0, r4
    da9a:	4ba5      	ldr	r3, [pc, #660]	; (dd30 <LORAWAN_RxDone+0x750>)
    da9c:	4798      	blx	r3
    da9e:	e79b      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    daa0:	2b00      	cmp	r3, #0
    daa2:	d10f      	bne.n	dac4 <LORAWAN_RxDone+0x4e4>
    daa4:	4ba8      	ldr	r3, [pc, #672]	; (dd48 <LORAWAN_RxDone+0x768>)
    daa6:	429a      	cmp	r2, r3
    daa8:	d10c      	bne.n	dac4 <LORAWAN_RxDone+0x4e4>
    daaa:	466b      	mov	r3, sp
    daac:	0032      	movs	r2, r6
    daae:	8b1b      	ldrh	r3, [r3, #24]
    dab0:	325a      	adds	r2, #90	; 0x5a
    dab2:	800b      	strh	r3, [r1, #0]
    dab4:	8813      	ldrh	r3, [r2, #0]
    dab6:	210a      	movs	r1, #10
    dab8:	3301      	adds	r3, #1
    daba:	8013      	strh	r3, [r2, #0]
    dabc:	2001      	movs	r0, #1
    dabe:	4b9c      	ldr	r3, [pc, #624]	; (dd30 <LORAWAN_RxDone+0x750>)
    dac0:	4798      	blx	r3
    dac2:	e7de      	b.n	da82 <LORAWAN_RxDone+0x4a2>
    dac4:	0033      	movs	r3, r6
    dac6:	33c8      	adds	r3, #200	; 0xc8
    dac8:	781b      	ldrb	r3, [r3, #0]
    daca:	2b01      	cmp	r3, #1
    dacc:	d10f      	bne.n	daee <LORAWAN_RxDone+0x50e>
    dace:	0032      	movs	r2, r6
    dad0:	210e      	movs	r1, #14
    dad2:	0034      	movs	r4, r6
    dad4:	3250      	adds	r2, #80	; 0x50
    dad6:	7813      	ldrb	r3, [r2, #0]
    dad8:	34b9      	adds	r4, #185	; 0xb9
    dada:	438b      	bics	r3, r1
    dadc:	7013      	strb	r3, [r2, #0]
    dade:	7820      	ldrb	r0, [r4, #0]
    dae0:	4b94      	ldr	r3, [pc, #592]	; (dd34 <LORAWAN_RxDone+0x754>)
    dae2:	4798      	blx	r3
    dae4:	2800      	cmp	r0, #0
    dae6:	d002      	beq.n	daee <LORAWAN_RxDone+0x50e>
    dae8:	7820      	ldrb	r0, [r4, #0]
    daea:	4b93      	ldr	r3, [pc, #588]	; (dd38 <LORAWAN_RxDone+0x758>)
    daec:	4798      	blx	r3
    daee:	4b95      	ldr	r3, [pc, #596]	; (dd44 <LORAWAN_RxDone+0x764>)
    daf0:	4798      	blx	r3
    daf2:	4992      	ldr	r1, [pc, #584]	; (dd3c <LORAWAN_RxDone+0x75c>)
    daf4:	784a      	ldrb	r2, [r1, #1]
    daf6:	780b      	ldrb	r3, [r1, #0]
    daf8:	0212      	lsls	r2, r2, #8
    dafa:	431a      	orrs	r2, r3
    dafc:	788b      	ldrb	r3, [r1, #2]
    dafe:	041b      	lsls	r3, r3, #16
    db00:	431a      	orrs	r2, r3
    db02:	78cb      	ldrb	r3, [r1, #3]
    db04:	061b      	lsls	r3, r3, #24
    db06:	4313      	orrs	r3, r2
    db08:	d100      	bne.n	db0c <LORAWAN_RxDone+0x52c>
    db0a:	e765      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    db0c:	2220      	movs	r2, #32
    db0e:	3660      	adds	r6, #96	; 0x60
    db10:	7833      	ldrb	r3, [r6, #0]
    db12:	2017      	movs	r0, #23
    db14:	4393      	bics	r3, r2
    db16:	7033      	strb	r3, [r6, #0]
    db18:	4b89      	ldr	r3, [pc, #548]	; (dd40 <LORAWAN_RxDone+0x760>)
    db1a:	4798      	blx	r3
    db1c:	e75c      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    db1e:	0033      	movs	r3, r6
    db20:	2200      	movs	r2, #0
    db22:	33af      	adds	r3, #175	; 0xaf
    db24:	701a      	strb	r2, [r3, #0]
    db26:	797b      	ldrb	r3, [r7, #5]
    db28:	2b7f      	cmp	r3, #127	; 0x7f
    db2a:	d909      	bls.n	db40 <LORAWAN_RxDone+0x560>
    db2c:	0032      	movs	r2, r6
    db2e:	2320      	movs	r3, #32
    db30:	3250      	adds	r2, #80	; 0x50
    db32:	7811      	ldrb	r1, [r2, #0]
    db34:	2001      	movs	r0, #1
    db36:	430b      	orrs	r3, r1
    db38:	7013      	strb	r3, [r2, #0]
    db3a:	210b      	movs	r1, #11
    db3c:	4b7c      	ldr	r3, [pc, #496]	; (dd30 <LORAWAN_RxDone+0x750>)
    db3e:	4798      	blx	r3
    db40:	797b      	ldrb	r3, [r7, #5]
    db42:	06db      	lsls	r3, r3, #27
    db44:	d505      	bpl.n	db52 <LORAWAN_RxDone+0x572>
    db46:	0032      	movs	r2, r6
    db48:	2308      	movs	r3, #8
    db4a:	3260      	adds	r2, #96	; 0x60
    db4c:	7811      	ldrb	r1, [r2, #0]
    db4e:	430b      	orrs	r3, r1
    db50:	7013      	strb	r3, [r2, #0]
    db52:	797b      	ldrb	r3, [r7, #5]
    db54:	065b      	lsls	r3, r3, #25
    db56:	d505      	bpl.n	db64 <LORAWAN_RxDone+0x584>
    db58:	0032      	movs	r2, r6
    db5a:	2310      	movs	r3, #16
    db5c:	3260      	adds	r2, #96	; 0x60
    db5e:	7811      	ldrb	r1, [r2, #0]
    db60:	430b      	orrs	r3, r1
    db62:	7013      	strb	r3, [r2, #0]
    db64:	221f      	movs	r2, #31
    db66:	783b      	ldrb	r3, [r7, #0]
    db68:	4393      	bics	r3, r2
    db6a:	2ba0      	cmp	r3, #160	; 0xa0
    db6c:	d105      	bne.n	db7a <LORAWAN_RxDone+0x59a>
    db6e:	0032      	movs	r2, r6
    db70:	3260      	adds	r2, #96	; 0x60
    db72:	7811      	ldrb	r1, [r2, #0]
    db74:	3b9e      	subs	r3, #158	; 0x9e
    db76:	430b      	orrs	r3, r1
    db78:	7013      	strb	r3, [r2, #0]
    db7a:	003d      	movs	r5, r7
    db7c:	7979      	ldrb	r1, [r7, #5]
    db7e:	3508      	adds	r5, #8
    db80:	070b      	lsls	r3, r1, #28
    db82:	d007      	beq.n	db94 <LORAWAN_RxDone+0x5b4>
    db84:	0709      	lsls	r1, r1, #28
    db86:	0028      	movs	r0, r5
    db88:	4b70      	ldr	r3, [pc, #448]	; (dd4c <LORAWAN_RxDone+0x76c>)
    db8a:	0f09      	lsrs	r1, r1, #28
    db8c:	4798      	blx	r3
    db8e:	2301      	movs	r3, #1
    db90:	0005      	movs	r5, r0
    db92:	9306      	str	r3, [sp, #24]
    db94:	7978      	ldrb	r0, [r7, #5]
    db96:	0703      	lsls	r3, r0, #28
    db98:	0f1b      	lsrs	r3, r3, #28
    db9a:	001a      	movs	r2, r3
    db9c:	320c      	adds	r2, #12
    db9e:	4294      	cmp	r4, r2
    dba0:	d100      	bne.n	dba4 <LORAWAN_RxDone+0x5c4>
    dba2:	e0b8      	b.n	dd16 <LORAWAN_RxDone+0x736>
    dba4:	1c6a      	adds	r2, r5, #1
    dba6:	1ae4      	subs	r4, r4, r3
    dba8:	9207      	str	r2, [sp, #28]
    dbaa:	782a      	ldrb	r2, [r5, #0]
    dbac:	b2e4      	uxtb	r4, r4
    dbae:	9204      	str	r2, [sp, #16]
    dbb0:	0022      	movs	r2, r4
    dbb2:	9904      	ldr	r1, [sp, #16]
    dbb4:	3a0c      	subs	r2, #12
    dbb6:	b2d2      	uxtb	r2, r2
    dbb8:	9205      	str	r2, [sp, #20]
    dbba:	3319      	adds	r3, #25
    dbbc:	4a5b      	ldr	r2, [pc, #364]	; (dd2c <LORAWAN_RxDone+0x74c>)
    dbbe:	2900      	cmp	r1, #0
    dbc0:	d100      	bne.n	dbc4 <LORAWAN_RxDone+0x5e4>
    dbc2:	e07f      	b.n	dcc4 <LORAWAN_RxDone+0x6e4>
    dbc4:	6810      	ldr	r0, [r2, #0]
    dbc6:	3c0d      	subs	r4, #13
    dbc8:	b2e1      	uxtb	r1, r4
    dbca:	0a04      	lsrs	r4, r0, #8
    dbcc:	7910      	ldrb	r0, [r2, #4]
    dbce:	9301      	str	r3, [sp, #4]
    dbd0:	0600      	lsls	r0, r0, #24
    dbd2:	4320      	orrs	r0, r4
    dbd4:	9003      	str	r0, [sp, #12]
    dbd6:	4b5e      	ldr	r3, [pc, #376]	; (dd50 <LORAWAN_RxDone+0x770>)
    dbd8:	485e      	ldr	r0, [pc, #376]	; (dd54 <LORAWAN_RxDone+0x774>)
    dbda:	9300      	str	r3, [sp, #0]
    dbdc:	9002      	str	r0, [sp, #8]
    dbde:	6d93      	ldr	r3, [r2, #88]	; 0x58
    dbe0:	2201      	movs	r2, #1
    dbe2:	4c5d      	ldr	r4, [pc, #372]	; (dd58 <LORAWAN_RxDone+0x778>)
    dbe4:	18a8      	adds	r0, r5, r2
    dbe6:	47a0      	blx	r4
    dbe8:	4c50      	ldr	r4, [pc, #320]	; (dd2c <LORAWAN_RxDone+0x74c>)
    dbea:	2300      	movs	r3, #0
    dbec:	0022      	movs	r2, r4
    dbee:	3296      	adds	r2, #150	; 0x96
    dbf0:	8013      	strh	r3, [r2, #0]
    dbf2:	0022      	movs	r2, r4
    dbf4:	32c1      	adds	r2, #193	; 0xc1
    dbf6:	7013      	strb	r3, [r2, #0]
    dbf8:	0022      	movs	r2, r4
    dbfa:	2110      	movs	r1, #16
    dbfc:	3260      	adds	r2, #96	; 0x60
    dbfe:	7813      	ldrb	r3, [r2, #0]
    dc00:	438b      	bics	r3, r1
    dc02:	7013      	strb	r3, [r2, #0]
    dc04:	0023      	movs	r3, r4
    dc06:	2201      	movs	r2, #1
    dc08:	3350      	adds	r3, #80	; 0x50
    dc0a:	7859      	ldrb	r1, [r3, #1]
    dc0c:	430a      	orrs	r2, r1
    dc0e:	705a      	strb	r2, [r3, #1]
    dc10:	220e      	movs	r2, #14
    dc12:	781b      	ldrb	r3, [r3, #0]
    dc14:	4013      	ands	r3, r2
    dc16:	2b06      	cmp	r3, #6
    dc18:	d109      	bne.n	dc2e <LORAWAN_RxDone+0x64e>
    dc1a:	0023      	movs	r3, r4
    dc1c:	33c8      	adds	r3, #200	; 0xc8
    dc1e:	781b      	ldrb	r3, [r3, #0]
    dc20:	2b01      	cmp	r3, #1
    dc22:	d104      	bne.n	dc2e <LORAWAN_RxDone+0x64e>
    dc24:	0023      	movs	r3, r4
    dc26:	33b9      	adds	r3, #185	; 0xb9
    dc28:	7818      	ldrb	r0, [r3, #0]
    dc2a:	4b43      	ldr	r3, [pc, #268]	; (dd38 <LORAWAN_RxDone+0x758>)
    dc2c:	4798      	blx	r3
    dc2e:	0026      	movs	r6, r4
    dc30:	2201      	movs	r2, #1
    dc32:	3660      	adds	r6, #96	; 0x60
    dc34:	7833      	ldrb	r3, [r6, #0]
    dc36:	4213      	tst	r3, r2
    dc38:	d100      	bne.n	dc3c <LORAWAN_RxDone+0x65c>
    dc3a:	e0d7      	b.n	ddec <LORAWAN_RxDone+0x80c>
    dc3c:	797b      	ldrb	r3, [r7, #5]
    dc3e:	321f      	adds	r2, #31
    dc40:	4213      	tst	r3, r2
    dc42:	d100      	bne.n	dc46 <LORAWAN_RxDone+0x666>
    dc44:	e0b8      	b.n	ddb8 <LORAWAN_RxDone+0x7d8>
    dc46:	4b45      	ldr	r3, [pc, #276]	; (dd5c <LORAWAN_RxDone+0x77c>)
    dc48:	4798      	blx	r3
    dc4a:	0023      	movs	r3, r4
    dc4c:	2101      	movs	r1, #1
    dc4e:	3350      	adds	r3, #80	; 0x50
    dc50:	785a      	ldrb	r2, [r3, #1]
    dc52:	438a      	bics	r2, r1
    dc54:	705a      	strb	r2, [r3, #1]
    dc56:	9a04      	ldr	r2, [sp, #16]
    dc58:	2a00      	cmp	r2, #0
    dc5a:	d100      	bne.n	dc5e <LORAWAN_RxDone+0x67e>
    dc5c:	e08c      	b.n	dd78 <LORAWAN_RxDone+0x798>
    dc5e:	9a05      	ldr	r2, [sp, #20]
    dc60:	0029      	movs	r1, r5
    dc62:	0038      	movs	r0, r7
    dc64:	4b3e      	ldr	r3, [pc, #248]	; (dd60 <LORAWAN_RxDone+0x780>)
    dc66:	4798      	blx	r3
    dc68:	4b3e      	ldr	r3, [pc, #248]	; (dd64 <LORAWAN_RxDone+0x784>)
    dc6a:	4d30      	ldr	r5, [pc, #192]	; (dd2c <LORAWAN_RxDone+0x74c>)
    dc6c:	781b      	ldrb	r3, [r3, #0]
    dc6e:	06db      	lsls	r3, r3, #27
    dc70:	d400      	bmi.n	dc74 <LORAWAN_RxDone+0x694>
    dc72:	e132      	b.n	deda <LORAWAN_RxDone+0x8fa>
    dc74:	2220      	movs	r2, #32
    dc76:	4b3c      	ldr	r3, [pc, #240]	; (dd68 <LORAWAN_RxDone+0x788>)
    dc78:	781b      	ldrb	r3, [r3, #0]
    dc7a:	401a      	ands	r2, r3
    dc7c:	9204      	str	r2, [sp, #16]
    dc7e:	d000      	beq.n	dc82 <LORAWAN_RxDone+0x6a2>
    dc80:	e12b      	b.n	deda <LORAWAN_RxDone+0x8fa>
    dc82:	320a      	adds	r2, #10
    dc84:	4213      	tst	r3, r2
    dc86:	d100      	bne.n	dc8a <LORAWAN_RxDone+0x6aa>
    dc88:	e127      	b.n	deda <LORAWAN_RxDone+0x8fa>
    dc8a:	002b      	movs	r3, r5
    dc8c:	33c0      	adds	r3, #192	; 0xc0
    dc8e:	781b      	ldrb	r3, [r3, #0]
    dc90:	a90d      	add	r1, sp, #52	; 0x34
    dc92:	704b      	strb	r3, [r1, #1]
    dc94:	002e      	movs	r6, r5
    dc96:	2301      	movs	r3, #1
    dc98:	36b3      	adds	r6, #179	; 0xb3
    dc9a:	700b      	strb	r3, [r1, #0]
    dc9c:	7833      	ldrb	r3, [r6, #0]
    dc9e:	aa0c      	add	r2, sp, #48	; 0x30
    dca0:	202e      	movs	r0, #46	; 0x2e
    dca2:	4f32      	ldr	r7, [pc, #200]	; (dd6c <LORAWAN_RxDone+0x78c>)
    dca4:	708b      	strb	r3, [r1, #2]
    dca6:	47b8      	blx	r7
    dca8:	9005      	str	r0, [sp, #20]
    dcaa:	2808      	cmp	r0, #8
    dcac:	d000      	beq.n	dcb0 <LORAWAN_RxDone+0x6d0>
    dcae:	e0cb      	b.n	de48 <LORAWAN_RxDone+0x868>
    dcb0:	4b2f      	ldr	r3, [pc, #188]	; (dd70 <LORAWAN_RxDone+0x790>)
    dcb2:	9804      	ldr	r0, [sp, #16]
    dcb4:	4798      	blx	r3
    dcb6:	4b2c      	ldr	r3, [pc, #176]	; (dd68 <LORAWAN_RxDone+0x788>)
    dcb8:	9a05      	ldr	r2, [sp, #20]
    dcba:	781b      	ldrb	r3, [r3, #0]
    dcbc:	4393      	bics	r3, r2
    dcbe:	4a2a      	ldr	r2, [pc, #168]	; (dd68 <LORAWAN_RxDone+0x788>)
    dcc0:	7013      	strb	r3, [r2, #0]
    dcc2:	e689      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    dcc4:	9905      	ldr	r1, [sp, #20]
    dcc6:	2900      	cmp	r1, #0
    dcc8:	d029      	beq.n	dd1e <LORAWAN_RxDone+0x73e>
    dcca:	0701      	lsls	r1, r0, #28
    dccc:	d11c      	bne.n	dd08 <LORAWAN_RxDone+0x728>
    dcce:	6811      	ldr	r1, [r2, #0]
    dcd0:	3c0d      	subs	r4, #13
    dcd2:	0a08      	lsrs	r0, r1, #8
    dcd4:	7911      	ldrb	r1, [r2, #4]
    dcd6:	9301      	str	r3, [sp, #4]
    dcd8:	0609      	lsls	r1, r1, #24
    dcda:	4301      	orrs	r1, r0
    dcdc:	9103      	str	r1, [sp, #12]
    dcde:	4b25      	ldr	r3, [pc, #148]	; (dd74 <LORAWAN_RxDone+0x794>)
    dce0:	491c      	ldr	r1, [pc, #112]	; (dd54 <LORAWAN_RxDone+0x774>)
    dce2:	b2e4      	uxtb	r4, r4
    dce4:	9102      	str	r1, [sp, #8]
    dce6:	9300      	str	r3, [sp, #0]
    dce8:	6d93      	ldr	r3, [r2, #88]	; 0x58
    dcea:	0021      	movs	r1, r4
    dcec:	2201      	movs	r2, #1
    dcee:	9807      	ldr	r0, [sp, #28]
    dcf0:	4d19      	ldr	r5, [pc, #100]	; (dd58 <LORAWAN_RxDone+0x778>)
    dcf2:	47a8      	blx	r5
    dcf4:	4b15      	ldr	r3, [pc, #84]	; (dd4c <LORAWAN_RxDone+0x76c>)
    dcf6:	0021      	movs	r1, r4
    dcf8:	9807      	ldr	r0, [sp, #28]
    dcfa:	4798      	blx	r3
    dcfc:	9b04      	ldr	r3, [sp, #16]
    dcfe:	9d04      	ldr	r5, [sp, #16]
    dd00:	9305      	str	r3, [sp, #20]
    dd02:	2301      	movs	r3, #1
    dd04:	9306      	str	r3, [sp, #24]
    dd06:	e76f      	b.n	dbe8 <LORAWAN_RxDone+0x608>
    dd08:	466b      	mov	r3, sp
    dd0a:	7c1b      	ldrb	r3, [r3, #16]
    dd0c:	36ac      	adds	r6, #172	; 0xac
    dd0e:	7033      	strb	r3, [r6, #0]
    dd10:	4b0c      	ldr	r3, [pc, #48]	; (dd44 <LORAWAN_RxDone+0x764>)
    dd12:	4798      	blx	r3
    dd14:	e660      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    dd16:	2500      	movs	r5, #0
    dd18:	9504      	str	r5, [sp, #16]
    dd1a:	9505      	str	r5, [sp, #20]
    dd1c:	e764      	b.n	dbe8 <LORAWAN_RxDone+0x608>
    dd1e:	9b05      	ldr	r3, [sp, #20]
    dd20:	9304      	str	r3, [sp, #16]
    dd22:	001d      	movs	r5, r3
    dd24:	e760      	b.n	dbe8 <LORAWAN_RxDone+0x608>
    dd26:	46c0      	nop			; (mov r8, r8)
    dd28:	0000ebb9 	.word	0x0000ebb9
    dd2c:	20001908 	.word	0x20001908
    dd30:	00008e5d 	.word	0x00008e5d
    dd34:	00009a8d 	.word	0x00009a8d
    dd38:	00009bf9 	.word	0x00009bf9
    dd3c:	20001b48 	.word	0x20001b48
    dd40:	0000c485 	.word	0x0000c485
    dd44:	0000d10d 	.word	0x0000d10d
    dd48:	0000ffff 	.word	0x0000ffff
    dd4c:	0000d32d 	.word	0x0000d32d
    dd50:	2000191d 	.word	0x2000191d
    dd54:	20001b50 	.word	0x20001b50
    dd58:	0000c0e5 	.word	0x0000c0e5
    dd5c:	0000b6c1 	.word	0x0000b6c1
    dd60:	0000c541 	.word	0x0000c541
    dd64:	20001958 	.word	0x20001958
    dd68:	20001968 	.word	0x20001968
    dd6c:	00008b79 	.word	0x00008b79
    dd70:	0000b3f5 	.word	0x0000b3f5
    dd74:	2000190d 	.word	0x2000190d
    dd78:	2120      	movs	r1, #32
    dd7a:	7832      	ldrb	r2, [r6, #0]
    dd7c:	438a      	bics	r2, r1
    dd7e:	7032      	strb	r2, [r6, #0]
    dd80:	0022      	movs	r2, r4
    dd82:	32c8      	adds	r2, #200	; 0xc8
    dd84:	7812      	ldrb	r2, [r2, #0]
    dd86:	2a01      	cmp	r2, #1
    dd88:	d10e      	bne.n	dda8 <LORAWAN_RxDone+0x7c8>
    dd8a:	781a      	ldrb	r2, [r3, #0]
    dd8c:	3912      	subs	r1, #18
    dd8e:	438a      	bics	r2, r1
    dd90:	701a      	strb	r2, [r3, #0]
    dd92:	2390      	movs	r3, #144	; 0x90
    dd94:	4a6f      	ldr	r2, [pc, #444]	; (df54 <LORAWAN_RxDone+0x974>)
    dd96:	005b      	lsls	r3, r3, #1
    dd98:	5cd3      	ldrb	r3, [r2, r3]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d000      	beq.n	dda0 <LORAWAN_RxDone+0x7c0>
    dd9e:	e763      	b.n	dc68 <LORAWAN_RxDone+0x688>
    dda0:	2008      	movs	r0, #8
    dda2:	4b6d      	ldr	r3, [pc, #436]	; (df58 <LORAWAN_RxDone+0x978>)
    dda4:	4798      	blx	r3
    dda6:	e75f      	b.n	dc68 <LORAWAN_RxDone+0x688>
    dda8:	2a04      	cmp	r2, #4
    ddaa:	d1f2      	bne.n	dd92 <LORAWAN_RxDone+0x7b2>
    ddac:	0023      	movs	r3, r4
    ddae:	33bc      	adds	r3, #188	; 0xbc
    ddb0:	7818      	ldrb	r0, [r3, #0]
    ddb2:	4b6a      	ldr	r3, [pc, #424]	; (df5c <LORAWAN_RxDone+0x97c>)
    ddb4:	4798      	blx	r3
    ddb6:	e7ec      	b.n	dd92 <LORAWAN_RxDone+0x7b2>
    ddb8:	9b06      	ldr	r3, [sp, #24]
    ddba:	2b00      	cmp	r3, #0
    ddbc:	d013      	beq.n	dde6 <LORAWAN_RxDone+0x806>
    ddbe:	0023      	movs	r3, r4
    ddc0:	33c8      	adds	r3, #200	; 0xc8
    ddc2:	781d      	ldrb	r5, [r3, #0]
    ddc4:	2d01      	cmp	r5, #1
    ddc6:	d10e      	bne.n	dde6 <LORAWAN_RxDone+0x806>
    ddc8:	4b65      	ldr	r3, [pc, #404]	; (df60 <LORAWAN_RxDone+0x980>)
    ddca:	4798      	blx	r3
    ddcc:	0022      	movs	r2, r4
    ddce:	3250      	adds	r2, #80	; 0x50
    ddd0:	7853      	ldrb	r3, [r2, #1]
    ddd2:	43ab      	bics	r3, r5
    ddd4:	7053      	strb	r3, [r2, #1]
    ddd6:	2220      	movs	r2, #32
    ddd8:	7833      	ldrb	r3, [r6, #0]
    ddda:	4393      	bics	r3, r2
    dddc:	7033      	strb	r3, [r6, #0]
    ddde:	2390      	movs	r3, #144	; 0x90
    dde0:	005b      	lsls	r3, r3, #1
    dde2:	5ce3      	ldrb	r3, [r4, r3]
    dde4:	e7d9      	b.n	dd9a <LORAWAN_RxDone+0x7ba>
    dde6:	4b5f      	ldr	r3, [pc, #380]	; (df64 <LORAWAN_RxDone+0x984>)
    dde8:	4798      	blx	r3
    ddea:	e73d      	b.n	dc68 <LORAWAN_RxDone+0x688>
    ddec:	9a04      	ldr	r2, [sp, #16]
    ddee:	2a00      	cmp	r2, #0
    ddf0:	d00b      	beq.n	de0a <LORAWAN_RxDone+0x82a>
    ddf2:	9a05      	ldr	r2, [sp, #20]
    ddf4:	0029      	movs	r1, r5
    ddf6:	0038      	movs	r0, r7
    ddf8:	4b5b      	ldr	r3, [pc, #364]	; (df68 <LORAWAN_RxDone+0x988>)
    ddfa:	4798      	blx	r3
    ddfc:	0022      	movs	r2, r4
    ddfe:	2101      	movs	r1, #1
    de00:	3250      	adds	r2, #80	; 0x50
    de02:	7853      	ldrb	r3, [r2, #1]
    de04:	438b      	bics	r3, r1
    de06:	7053      	strb	r3, [r2, #1]
    de08:	e72e      	b.n	dc68 <LORAWAN_RxDone+0x688>
    de0a:	2220      	movs	r2, #32
    de0c:	4393      	bics	r3, r2
    de0e:	7033      	strb	r3, [r6, #0]
    de10:	0023      	movs	r3, r4
    de12:	33c8      	adds	r3, #200	; 0xc8
    de14:	781b      	ldrb	r3, [r3, #0]
    de16:	2b01      	cmp	r3, #1
    de18:	d10e      	bne.n	de38 <LORAWAN_RxDone+0x858>
    de1a:	0022      	movs	r2, r4
    de1c:	210e      	movs	r1, #14
    de1e:	3250      	adds	r2, #80	; 0x50
    de20:	7813      	ldrb	r3, [r2, #0]
    de22:	438b      	bics	r3, r1
    de24:	7013      	strb	r3, [r2, #0]
    de26:	2390      	movs	r3, #144	; 0x90
    de28:	005b      	lsls	r3, r3, #1
    de2a:	5ce3      	ldrb	r3, [r4, r3]
    de2c:	2b00      	cmp	r3, #0
    de2e:	d1e5      	bne.n	ddfc <LORAWAN_RxDone+0x81c>
    de30:	2008      	movs	r0, #8
    de32:	4b49      	ldr	r3, [pc, #292]	; (df58 <LORAWAN_RxDone+0x978>)
    de34:	4798      	blx	r3
    de36:	e7e1      	b.n	ddfc <LORAWAN_RxDone+0x81c>
    de38:	2b04      	cmp	r3, #4
    de3a:	d1f4      	bne.n	de26 <LORAWAN_RxDone+0x846>
    de3c:	0023      	movs	r3, r4
    de3e:	33bc      	adds	r3, #188	; 0xbc
    de40:	7818      	ldrb	r0, [r3, #0]
    de42:	4b46      	ldr	r3, [pc, #280]	; (df5c <LORAWAN_RxDone+0x97c>)
    de44:	4798      	blx	r3
    de46:	e7ee      	b.n	de26 <LORAWAN_RxDone+0x846>
    de48:	35e4      	adds	r5, #228	; 0xe4
    de4a:	782b      	ldrb	r3, [r5, #0]
    de4c:	079a      	lsls	r2, r3, #30
    de4e:	d521      	bpl.n	de94 <LORAWAN_RxDone+0x8b4>
    de50:	aa0e      	add	r2, sp, #56	; 0x38
    de52:	0031      	movs	r1, r6
    de54:	2024      	movs	r0, #36	; 0x24
    de56:	47b8      	blx	r7
    de58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de5a:	1c5a      	adds	r2, r3, #1
    de5c:	d001      	beq.n	de62 <LORAWAN_RxDone+0x882>
    de5e:	3314      	adds	r3, #20
    de60:	930e      	str	r3, [sp, #56]	; 0x38
    de62:	0021      	movs	r1, r4
    de64:	220e      	movs	r2, #14
    de66:	3150      	adds	r1, #80	; 0x50
    de68:	780b      	ldrb	r3, [r1, #0]
    de6a:	4393      	bics	r3, r2
    de6c:	001a      	movs	r2, r3
    de6e:	230c      	movs	r3, #12
    de70:	4313      	orrs	r3, r2
    de72:	700b      	strb	r3, [r1, #0]
    de74:	232c      	movs	r3, #44	; 0x2c
    de76:	33ff      	adds	r3, #255	; 0xff
    de78:	5ce3      	ldrb	r3, [r4, r3]
    de7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de7c:	21fa      	movs	r1, #250	; 0xfa
    de7e:	1ad3      	subs	r3, r2, r3
    de80:	2200      	movs	r2, #0
    de82:	0089      	lsls	r1, r1, #2
    de84:	4359      	muls	r1, r3
    de86:	34ba      	adds	r4, #186	; 0xba
    de88:	4b38      	ldr	r3, [pc, #224]	; (df6c <LORAWAN_RxDone+0x98c>)
    de8a:	7820      	ldrb	r0, [r4, #0]
    de8c:	9200      	str	r2, [sp, #0]
    de8e:	4c38      	ldr	r4, [pc, #224]	; (df70 <LORAWAN_RxDone+0x990>)
    de90:	47a0      	blx	r4
    de92:	e5a1      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    de94:	075b      	lsls	r3, r3, #29
    de96:	d400      	bmi.n	de9a <LORAWAN_RxDone+0x8ba>
    de98:	e59e      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    de9a:	aa0e      	add	r2, sp, #56	; 0x38
    de9c:	0031      	movs	r1, r6
    de9e:	2031      	movs	r0, #49	; 0x31
    dea0:	47b8      	blx	r7
    dea2:	220e      	movs	r2, #14
    dea4:	4b33      	ldr	r3, [pc, #204]	; (df74 <LORAWAN_RxDone+0x994>)
    dea6:	781b      	ldrb	r3, [r3, #0]
    dea8:	4393      	bics	r3, r2
    deaa:	001a      	movs	r2, r3
    deac:	230c      	movs	r3, #12
    deae:	4313      	orrs	r3, r2
    deb0:	4a30      	ldr	r2, [pc, #192]	; (df74 <LORAWAN_RxDone+0x994>)
    deb2:	7013      	strb	r3, [r2, #0]
    deb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    deb6:	1c5a      	adds	r2, r3, #1
    deb8:	d001      	beq.n	debe <LORAWAN_RxDone+0x8de>
    deba:	3301      	adds	r3, #1
    debc:	930e      	str	r3, [sp, #56]	; 0x38
    debe:	232c      	movs	r3, #44	; 0x2c
    dec0:	33ff      	adds	r3, #255	; 0xff
    dec2:	5ce3      	ldrb	r3, [r4, r3]
    dec4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dec6:	21fa      	movs	r1, #250	; 0xfa
    dec8:	1ad3      	subs	r3, r2, r3
    deca:	2200      	movs	r2, #0
    decc:	0089      	lsls	r1, r1, #2
    dece:	34bd      	adds	r4, #189	; 0xbd
    ded0:	4359      	muls	r1, r3
    ded2:	7820      	ldrb	r0, [r4, #0]
    ded4:	4b28      	ldr	r3, [pc, #160]	; (df78 <LORAWAN_RxDone+0x998>)
    ded6:	9200      	str	r2, [sp, #0]
    ded8:	e7d9      	b.n	de8e <LORAWAN_RxDone+0x8ae>
    deda:	35c8      	adds	r5, #200	; 0xc8
    dedc:	782b      	ldrb	r3, [r5, #0]
    dede:	2b04      	cmp	r3, #4
    dee0:	d000      	beq.n	dee4 <LORAWAN_RxDone+0x904>
    dee2:	e579      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    dee4:	0038      	movs	r0, r7
    dee6:	4b25      	ldr	r3, [pc, #148]	; (df7c <LORAWAN_RxDone+0x99c>)
    dee8:	4798      	blx	r3
    deea:	e575      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    deec:	4b24      	ldr	r3, [pc, #144]	; (df80 <LORAWAN_RxDone+0x9a0>)
    deee:	4798      	blx	r3
    def0:	4924      	ldr	r1, [pc, #144]	; (df84 <LORAWAN_RxDone+0x9a4>)
    def2:	784a      	ldrb	r2, [r1, #1]
    def4:	780b      	ldrb	r3, [r1, #0]
    def6:	0212      	lsls	r2, r2, #8
    def8:	431a      	orrs	r2, r3
    defa:	788b      	ldrb	r3, [r1, #2]
    defc:	041b      	lsls	r3, r3, #16
    defe:	431a      	orrs	r2, r3
    df00:	78cb      	ldrb	r3, [r1, #3]
    df02:	061b      	lsls	r3, r3, #24
    df04:	4313      	orrs	r3, r2
    df06:	d101      	bne.n	df0c <LORAWAN_RxDone+0x92c>
    df08:	f7ff fbbd 	bl	d686 <LORAWAN_RxDone+0xa6>
    df0c:	2220      	movs	r2, #32
    df0e:	3560      	adds	r5, #96	; 0x60
    df10:	782b      	ldrb	r3, [r5, #0]
    df12:	2019      	movs	r0, #25
    df14:	4393      	bics	r3, r2
    df16:	702b      	strb	r3, [r5, #0]
    df18:	e515      	b.n	d946 <LORAWAN_RxDone+0x366>
    df1a:	491a      	ldr	r1, [pc, #104]	; (df84 <LORAWAN_RxDone+0x9a4>)
    df1c:	784a      	ldrb	r2, [r1, #1]
    df1e:	780b      	ldrb	r3, [r1, #0]
    df20:	0212      	lsls	r2, r2, #8
    df22:	431a      	orrs	r2, r3
    df24:	788b      	ldrb	r3, [r1, #2]
    df26:	041b      	lsls	r3, r3, #16
    df28:	431a      	orrs	r2, r3
    df2a:	78cb      	ldrb	r3, [r1, #3]
    df2c:	061b      	lsls	r3, r3, #24
    df2e:	4313      	orrs	r3, r2
    df30:	d100      	bne.n	df34 <LORAWAN_RxDone+0x954>
    df32:	e551      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    df34:	4b14      	ldr	r3, [pc, #80]	; (df88 <LORAWAN_RxDone+0x9a8>)
    df36:	4d15      	ldr	r5, [pc, #84]	; (df8c <LORAWAN_RxDone+0x9ac>)
    df38:	781b      	ldrb	r3, [r3, #0]
    df3a:	2b10      	cmp	r3, #16
    df3c:	d105      	bne.n	df4a <LORAWAN_RxDone+0x96a>
    df3e:	0001      	movs	r1, r0
    df40:	0022      	movs	r2, r4
    df42:	2000      	movs	r0, #0
    df44:	3b0c      	subs	r3, #12
    df46:	47a8      	blx	r5
    df48:	e546      	b.n	d9d8 <LORAWAN_RxDone+0x3f8>
    df4a:	2300      	movs	r3, #0
    df4c:	0001      	movs	r1, r0
    df4e:	0022      	movs	r2, r4
    df50:	0018      	movs	r0, r3
    df52:	e7f8      	b.n	df46 <LORAWAN_RxDone+0x966>
    df54:	20001908 	.word	0x20001908
    df58:	0000c485 	.word	0x0000c485
    df5c:	00009bf9 	.word	0x00009bf9
    df60:	0000b6c1 	.word	0x0000b6c1
    df64:	0000b64d 	.word	0x0000b64d
    df68:	0000c541 	.word	0x0000c541
    df6c:	0000b4e9 	.word	0x0000b4e9
    df70:	000098f5 	.word	0x000098f5
    df74:	20001958 	.word	0x20001958
    df78:	0000bec9 	.word	0x0000bec9
    df7c:	0000e955 	.word	0x0000e955
    df80:	0000d10d 	.word	0x0000d10d
    df84:	20001b48 	.word	0x20001b48
    df88:	20001a34 	.word	0x20001a34
    df8c:	0000c4e9 	.word	0x0000c4e9

0000df90 <LorawanSetEdClass>:
    df90:	2390      	movs	r3, #144	; 0x90
    df92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    df94:	4d19      	ldr	r5, [pc, #100]	; (dffc <LorawanSetEdClass+0x6c>)
    df96:	005b      	lsls	r3, r3, #1
    df98:	5ceb      	ldrb	r3, [r5, r3]
    df9a:	0004      	movs	r4, r0
    df9c:	2011      	movs	r0, #17
    df9e:	2b00      	cmp	r3, #0
    dfa0:	d013      	beq.n	dfca <LorawanSetEdClass+0x3a>
    dfa2:	002b      	movs	r3, r5
    dfa4:	33c9      	adds	r3, #201	; 0xc9
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	3807      	subs	r0, #7
    dfaa:	4223      	tst	r3, r4
    dfac:	d00d      	beq.n	dfca <LorawanSetEdClass+0x3a>
    dfae:	002b      	movs	r3, r5
    dfb0:	33c8      	adds	r3, #200	; 0xc8
    dfb2:	7819      	ldrb	r1, [r3, #0]
    dfb4:	428c      	cmp	r4, r1
    dfb6:	d007      	beq.n	dfc8 <LorawanSetEdClass+0x38>
    dfb8:	2901      	cmp	r1, #1
    dfba:	d107      	bne.n	dfcc <LorawanSetEdClass+0x3c>
    dfbc:	2c04      	cmp	r4, #4
    dfbe:	d104      	bne.n	dfca <LorawanSetEdClass+0x3a>
    dfc0:	701c      	strb	r4, [r3, #0]
    dfc2:	2000      	movs	r0, #0
    dfc4:	4b0e      	ldr	r3, [pc, #56]	; (e000 <LorawanSetEdClass+0x70>)
    dfc6:	4798      	blx	r3
    dfc8:	2008      	movs	r0, #8
    dfca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    dfcc:	2904      	cmp	r1, #4
    dfce:	d1fc      	bne.n	dfca <LorawanSetEdClass+0x3a>
    dfd0:	2c01      	cmp	r4, #1
    dfd2:	d1fa      	bne.n	dfca <LorawanSetEdClass+0x3a>
    dfd4:	701c      	strb	r4, [r3, #0]
    dfd6:	0021      	movs	r1, r4
    dfd8:	4b09      	ldr	r3, [pc, #36]	; (e000 <LorawanSetEdClass+0x70>)
    dfda:	2000      	movs	r0, #0
    dfdc:	4798      	blx	r3
    dfde:	002a      	movs	r2, r5
    dfe0:	210e      	movs	r1, #14
    dfe2:	3250      	adds	r2, #80	; 0x50
    dfe4:	7813      	ldrb	r3, [r2, #0]
    dfe6:	a801      	add	r0, sp, #4
    dfe8:	438b      	bics	r3, r1
    dfea:	7013      	strb	r3, [r2, #0]
    dfec:	35f0      	adds	r5, #240	; 0xf0
    dfee:	4b05      	ldr	r3, [pc, #20]	; (e004 <LorawanSetEdClass+0x74>)
    dff0:	7004      	strb	r4, [r0, #0]
    dff2:	4798      	blx	r3
    dff4:	7828      	ldrb	r0, [r5, #0]
    dff6:	4b04      	ldr	r3, [pc, #16]	; (e008 <LorawanSetEdClass+0x78>)
    dff8:	4798      	blx	r3
    dffa:	e7e5      	b.n	dfc8 <LorawanSetEdClass+0x38>
    dffc:	20001908 	.word	0x20001908
    e000:	00008e5d 	.word	0x00008e5d
    e004:	00010351 	.word	0x00010351
    e008:	00009bf9 	.word	0x00009bf9

0000e00c <LORAWAN_SetAttr>:
    e00c:	2290      	movs	r2, #144	; 0x90
    e00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e010:	4cc2      	ldr	r4, [pc, #776]	; (e31c <LORAWAN_SetAttr+0x310>)
    e012:	0052      	lsls	r2, r2, #1
    e014:	5ca2      	ldrb	r2, [r4, r2]
    e016:	000b      	movs	r3, r1
    e018:	2511      	movs	r5, #17
    e01a:	2a00      	cmp	r2, #0
    e01c:	d04e      	beq.n	e0bc <LORAWAN_SetAttr+0xb0>
    e01e:	282d      	cmp	r0, #45	; 0x2d
    e020:	d85f      	bhi.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e022:	f002 fcc1 	bl	109a8 <__gnu_thumb1_case_uhi>
    e026:	002e      	.short	0x002e
    e028:	009a007d 	.word	0x009a007d
    e02c:	00ab00d9 	.word	0x00ab00d9
    e030:	00f700c7 	.word	0x00f700c7
    e034:	01300110 	.word	0x01300110
    e038:	01480142 	.word	0x01480142
    e03c:	015d0154 	.word	0x015d0154
    e040:	01850176 	.word	0x01850176
    e044:	018f018a 	.word	0x018f018a
    e048:	01990194 	.word	0x01990194
    e04c:	01a3019e 	.word	0x01a3019e
    e050:	01aa01c5 	.word	0x01aa01c5
    e054:	01ce01a7 	.word	0x01ce01a7
    e058:	01c001ca 	.word	0x01c001ca
    e05c:	01b601bc 	.word	0x01b601bc
    e060:	005e005e 	.word	0x005e005e
    e064:	005e016e 	.word	0x005e016e
    e068:	005e005e 	.word	0x005e005e
    e06c:	005e005e 	.word	0x005e005e
    e070:	01d2005e 	.word	0x01d2005e
    e074:	01d5004d 	.word	0x01d5004d
    e078:	01ea01fc 	.word	0x01ea01fc
    e07c:	005e01d9 	.word	0x005e01d9
    e080:	0216      	.short	0x0216
    e082:	250a      	movs	r5, #10
    e084:	2900      	cmp	r1, #0
    e086:	d019      	beq.n	e0bc <LORAWAN_SetAttr+0xb0>
    e088:	0020      	movs	r0, r4
    e08a:	2208      	movs	r2, #8
    e08c:	4ba4      	ldr	r3, [pc, #656]	; (e320 <LORAWAN_SetAttr+0x314>)
    e08e:	303d      	adds	r0, #61	; 0x3d
    e090:	4798      	blx	r3
    e092:	4ea4      	ldr	r6, [pc, #656]	; (e324 <LORAWAN_SetAttr+0x318>)
    e094:	2108      	movs	r1, #8
    e096:	2001      	movs	r0, #1
    e098:	47b0      	blx	r6
    e09a:	0022      	movs	r2, r4
    e09c:	32aa      	adds	r2, #170	; 0xaa
    e09e:	7813      	ldrb	r3, [r2, #0]
    e0a0:	3d09      	subs	r5, #9
    e0a2:	432b      	orrs	r3, r5
    e0a4:	2109      	movs	r1, #9
    e0a6:	0028      	movs	r0, r5
    e0a8:	3450      	adds	r4, #80	; 0x50
    e0aa:	7013      	strb	r3, [r2, #0]
    e0ac:	47b0      	blx	r6
    e0ae:	7823      	ldrb	r3, [r4, #0]
    e0b0:	0028      	movs	r0, r5
    e0b2:	43ab      	bics	r3, r5
    e0b4:	210b      	movs	r1, #11
    e0b6:	7023      	strb	r3, [r4, #0]
    e0b8:	47b0      	blx	r6
    e0ba:	3507      	adds	r5, #7
    e0bc:	0028      	movs	r0, r5
    e0be:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    e0c0:	0022      	movs	r2, r4
    e0c2:	32e4      	adds	r2, #228	; 0xe4
    e0c4:	7812      	ldrb	r2, [r2, #0]
    e0c6:	250a      	movs	r5, #10
    e0c8:	0752      	lsls	r2, r2, #29
    e0ca:	d5f7      	bpl.n	e0bc <LORAWAN_SetAttr+0xb0>
    e0cc:	79c9      	ldrb	r1, [r1, #7]
    e0ce:	4a96      	ldr	r2, [pc, #600]	; (e328 <LORAWAN_SetAttr+0x31c>)
    e0d0:	2900      	cmp	r1, #0
    e0d2:	d111      	bne.n	e0f8 <LORAWAN_SetAttr+0xec>
    e0d4:	466b      	mov	r3, sp
    e0d6:	201d      	movs	r0, #29
    e0d8:	7159      	strb	r1, [r3, #5]
    e0da:	4669      	mov	r1, sp
    e0dc:	4790      	blx	r2
    e0de:	2800      	cmp	r0, #0
    e0e0:	d001      	beq.n	e0e6 <LORAWAN_SetAttr+0xda>
    e0e2:	250a      	movs	r5, #10
    e0e4:	e7ea      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e0e6:	0023      	movs	r3, r4
    e0e8:	2109      	movs	r1, #9
    e0ea:	33e8      	adds	r3, #232	; 0xe8
    e0ec:	34e6      	adds	r4, #230	; 0xe6
    e0ee:	8018      	strh	r0, [r3, #0]
    e0f0:	8020      	strh	r0, [r4, #0]
    e0f2:	4b8c      	ldr	r3, [pc, #560]	; (e324 <LORAWAN_SetAttr+0x318>)
    e0f4:	4798      	blx	r3
    e0f6:	e011      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e0f8:	466e      	mov	r6, sp
    e0fa:	2502      	movs	r5, #2
    e0fc:	5f59      	ldrsh	r1, [r3, r5]
    e0fe:	8818      	ldrh	r0, [r3, #0]
    e100:	889d      	ldrh	r5, [r3, #4]
    e102:	799b      	ldrb	r3, [r3, #6]
    e104:	8030      	strh	r0, [r6, #0]
    e106:	7133      	strb	r3, [r6, #4]
    e108:	2301      	movs	r3, #1
    e10a:	8071      	strh	r1, [r6, #2]
    e10c:	201d      	movs	r0, #29
    e10e:	4669      	mov	r1, sp
    e110:	7173      	strb	r3, [r6, #5]
    e112:	4790      	blx	r2
    e114:	2800      	cmp	r0, #0
    e116:	d1e4      	bne.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e118:	34e8      	adds	r4, #232	; 0xe8
    e11a:	8025      	strh	r5, [r4, #0]
    e11c:	2508      	movs	r5, #8
    e11e:	e7cd      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e120:	250a      	movs	r5, #10
    e122:	2900      	cmp	r1, #0
    e124:	d0ca      	beq.n	e0bc <LORAWAN_SetAttr+0xb0>
    e126:	0020      	movs	r0, r4
    e128:	2208      	movs	r2, #8
    e12a:	4b7d      	ldr	r3, [pc, #500]	; (e320 <LORAWAN_SetAttr+0x314>)
    e12c:	3035      	adds	r0, #53	; 0x35
    e12e:	4798      	blx	r3
    e130:	2107      	movs	r1, #7
    e132:	2001      	movs	r0, #1
    e134:	4d7b      	ldr	r5, [pc, #492]	; (e324 <LORAWAN_SetAttr+0x318>)
    e136:	47a8      	blx	r5
    e138:	0022      	movs	r2, r4
    e13a:	2302      	movs	r3, #2
    e13c:	32aa      	adds	r2, #170	; 0xaa
    e13e:	7811      	ldrb	r1, [r2, #0]
    e140:	430b      	orrs	r3, r1
    e142:	7013      	strb	r3, [r2, #0]
    e144:	2109      	movs	r1, #9
    e146:	2001      	movs	r0, #1
    e148:	47a8      	blx	r5
    e14a:	2001      	movs	r0, #1
    e14c:	210b      	movs	r1, #11
    e14e:	3450      	adds	r4, #80	; 0x50
    e150:	7823      	ldrb	r3, [r4, #0]
    e152:	4383      	bics	r3, r0
    e154:	7023      	strb	r3, [r4, #0]
    e156:	47a8      	blx	r5
    e158:	e7e0      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e15a:	680b      	ldr	r3, [r1, #0]
    e15c:	2001      	movs	r0, #1
    e15e:	0a19      	lsrs	r1, r3, #8
    e160:	70a1      	strb	r1, [r4, #2]
    e162:	0c19      	lsrs	r1, r3, #16
    e164:	7063      	strb	r3, [r4, #1]
    e166:	70e1      	strb	r1, [r4, #3]
    e168:	0e1b      	lsrs	r3, r3, #24
    e16a:	2103      	movs	r1, #3
    e16c:	4d6d      	ldr	r5, [pc, #436]	; (e324 <LORAWAN_SetAttr+0x318>)
    e16e:	7123      	strb	r3, [r4, #4]
    e170:	47a8      	blx	r5
    e172:	0022      	movs	r2, r4
    e174:	32aa      	adds	r2, #170	; 0xaa
    e176:	7811      	ldrb	r1, [r2, #0]
    e178:	2304      	movs	r3, #4
    e17a:	e7e1      	b.n	e140 <LORAWAN_SetAttr+0x134>
    e17c:	250a      	movs	r5, #10
    e17e:	2900      	cmp	r1, #0
    e180:	d09c      	beq.n	e0bc <LORAWAN_SetAttr+0xb0>
    e182:	3506      	adds	r5, #6
    e184:	002a      	movs	r2, r5
    e186:	4b66      	ldr	r3, [pc, #408]	; (e320 <LORAWAN_SetAttr+0x314>)
    e188:	1d60      	adds	r0, r4, #5
    e18a:	4798      	blx	r3
    e18c:	4e65      	ldr	r6, [pc, #404]	; (e324 <LORAWAN_SetAttr+0x318>)
    e18e:	2104      	movs	r1, #4
    e190:	2001      	movs	r0, #1
    e192:	47b0      	blx	r6
    e194:	0023      	movs	r3, r4
    e196:	33aa      	adds	r3, #170	; 0xaa
    e198:	781a      	ldrb	r2, [r3, #0]
    e19a:	2109      	movs	r1, #9
    e19c:	4315      	orrs	r5, r2
    e19e:	2001      	movs	r0, #1
    e1a0:	701d      	strb	r5, [r3, #0]
    e1a2:	47b0      	blx	r6
    e1a4:	2001      	movs	r0, #1
    e1a6:	3450      	adds	r4, #80	; 0x50
    e1a8:	7823      	ldrb	r3, [r4, #0]
    e1aa:	210b      	movs	r1, #11
    e1ac:	4383      	bics	r3, r0
    e1ae:	7023      	strb	r3, [r4, #0]
    e1b0:	47b0      	blx	r6
    e1b2:	e7b3      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e1b4:	250a      	movs	r5, #10
    e1b6:	2900      	cmp	r1, #0
    e1b8:	d100      	bne.n	e1bc <LORAWAN_SetAttr+0x1b0>
    e1ba:	e77f      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e1bc:	0020      	movs	r0, r4
    e1be:	2210      	movs	r2, #16
    e1c0:	4b57      	ldr	r3, [pc, #348]	; (e320 <LORAWAN_SetAttr+0x314>)
    e1c2:	3015      	adds	r0, #21
    e1c4:	4798      	blx	r3
    e1c6:	2105      	movs	r1, #5
    e1c8:	2001      	movs	r0, #1
    e1ca:	4d56      	ldr	r5, [pc, #344]	; (e324 <LORAWAN_SetAttr+0x318>)
    e1cc:	47a8      	blx	r5
    e1ce:	0022      	movs	r2, r4
    e1d0:	32aa      	adds	r2, #170	; 0xaa
    e1d2:	7811      	ldrb	r1, [r2, #0]
    e1d4:	2320      	movs	r3, #32
    e1d6:	e7b3      	b.n	e140 <LORAWAN_SetAttr+0x134>
    e1d8:	250a      	movs	r5, #10
    e1da:	2900      	cmp	r1, #0
    e1dc:	d100      	bne.n	e1e0 <LORAWAN_SetAttr+0x1d4>
    e1de:	e76d      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e1e0:	0020      	movs	r0, r4
    e1e2:	2210      	movs	r2, #16
    e1e4:	4b4e      	ldr	r3, [pc, #312]	; (e320 <LORAWAN_SetAttr+0x314>)
    e1e6:	3025      	adds	r0, #37	; 0x25
    e1e8:	4798      	blx	r3
    e1ea:	4e4e      	ldr	r6, [pc, #312]	; (e324 <LORAWAN_SetAttr+0x318>)
    e1ec:	2106      	movs	r1, #6
    e1ee:	2001      	movs	r0, #1
    e1f0:	47b0      	blx	r6
    e1f2:	0022      	movs	r2, r4
    e1f4:	32aa      	adds	r2, #170	; 0xaa
    e1f6:	7813      	ldrb	r3, [r2, #0]
    e1f8:	3d02      	subs	r5, #2
    e1fa:	432b      	orrs	r3, r5
    e1fc:	2109      	movs	r1, #9
    e1fe:	2001      	movs	r0, #1
    e200:	7013      	strb	r3, [r2, #0]
    e202:	47b0      	blx	r6
    e204:	2001      	movs	r0, #1
    e206:	3450      	adds	r4, #80	; 0x50
    e208:	7823      	ldrb	r3, [r4, #0]
    e20a:	210b      	movs	r1, #11
    e20c:	4383      	bics	r3, r0
    e20e:	7023      	strb	r3, [r4, #0]
    e210:	47b0      	blx	r6
    e212:	e753      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e214:	780b      	ldrb	r3, [r1, #0]
    e216:	2001      	movs	r0, #1
    e218:	0021      	movs	r1, r4
    e21a:	2520      	movs	r5, #32
    e21c:	3150      	adds	r1, #80	; 0x50
    e21e:	4003      	ands	r3, r0
    e220:	015a      	lsls	r2, r3, #5
    e222:	780b      	ldrb	r3, [r1, #0]
    e224:	43ab      	bics	r3, r5
    e226:	4313      	orrs	r3, r2
    e228:	700b      	strb	r3, [r1, #0]
    e22a:	0023      	movs	r3, r4
    e22c:	2200      	movs	r2, #0
    e22e:	3396      	adds	r3, #150	; 0x96
    e230:	3460      	adds	r4, #96	; 0x60
    e232:	801a      	strh	r2, [r3, #0]
    e234:	7823      	ldrb	r3, [r4, #0]
    e236:	3210      	adds	r2, #16
    e238:	4393      	bics	r3, r2
    e23a:	7023      	strb	r3, [r4, #0]
    e23c:	210b      	movs	r1, #11
    e23e:	4b39      	ldr	r3, [pc, #228]	; (e324 <LORAWAN_SetAttr+0x318>)
    e240:	4798      	blx	r3
    e242:	3d18      	subs	r5, #24
    e244:	e73a      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e246:	466a      	mov	r2, sp
    e248:	780b      	ldrb	r3, [r1, #0]
    e24a:	7013      	strb	r3, [r2, #0]
    e24c:	0022      	movs	r2, r4
    e24e:	32be      	adds	r2, #190	; 0xbe
    e250:	7812      	ldrb	r2, [r2, #0]
    e252:	429a      	cmp	r2, r3
    e254:	d900      	bls.n	e258 <LORAWAN_SetAttr+0x24c>
    e256:	e744      	b.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e258:	0022      	movs	r2, r4
    e25a:	32bf      	adds	r2, #191	; 0xbf
    e25c:	7812      	ldrb	r2, [r2, #0]
    e25e:	429a      	cmp	r2, r3
    e260:	d200      	bcs.n	e264 <LORAWAN_SetAttr+0x258>
    e262:	e73e      	b.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e264:	4669      	mov	r1, sp
    e266:	2010      	movs	r0, #16
    e268:	4b30      	ldr	r3, [pc, #192]	; (e32c <LORAWAN_SetAttr+0x320>)
    e26a:	4798      	blx	r3
    e26c:	0005      	movs	r5, r0
    e26e:	2808      	cmp	r0, #8
    e270:	d000      	beq.n	e274 <LORAWAN_SetAttr+0x268>
    e272:	e736      	b.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e274:	466b      	mov	r3, sp
    e276:	210c      	movs	r1, #12
    e278:	2001      	movs	r0, #1
    e27a:	781b      	ldrb	r3, [r3, #0]
    e27c:	34b3      	adds	r4, #179	; 0xb3
    e27e:	7023      	strb	r3, [r4, #0]
    e280:	4b28      	ldr	r3, [pc, #160]	; (e324 <LORAWAN_SetAttr+0x318>)
    e282:	4798      	blx	r3
    e284:	e71a      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e286:	466a      	mov	r2, sp
    e288:	780b      	ldrb	r3, [r1, #0]
    e28a:	201d      	movs	r0, #29
    e28c:	7013      	strb	r3, [r2, #0]
    e28e:	4669      	mov	r1, sp
    e290:	4b26      	ldr	r3, [pc, #152]	; (e32c <LORAWAN_SetAttr+0x320>)
    e292:	4798      	blx	r3
    e294:	0005      	movs	r5, r0
    e296:	2808      	cmp	r0, #8
    e298:	d000      	beq.n	e29c <LORAWAN_SetAttr+0x290>
    e29a:	e722      	b.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e29c:	466b      	mov	r3, sp
    e29e:	781b      	ldrb	r3, [r3, #0]
    e2a0:	34b5      	adds	r4, #181	; 0xb5
    e2a2:	7023      	strb	r3, [r4, #0]
    e2a4:	210a      	movs	r1, #10
    e2a6:	2000      	movs	r0, #0
    e2a8:	e7ea      	b.n	e280 <LORAWAN_SetAttr+0x274>
    e2aa:	780b      	ldrb	r3, [r1, #0]
    e2ac:	2103      	movs	r1, #3
    e2ae:	34cb      	adds	r4, #203	; 0xcb
    e2b0:	7023      	strb	r3, [r4, #0]
    e2b2:	2000      	movs	r0, #0
    e2b4:	e71d      	b.n	e0f2 <LORAWAN_SetAttr+0xe6>
    e2b6:	680b      	ldr	r3, [r1, #0]
    e2b8:	250a      	movs	r5, #10
    e2ba:	1c5a      	adds	r2, r3, #1
    e2bc:	d100      	bne.n	e2c0 <LORAWAN_SetAttr+0x2b4>
    e2be:	e6fd      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e2c0:	2116      	movs	r1, #22
    e2c2:	2000      	movs	r0, #0
    e2c4:	6563      	str	r3, [r4, #84]	; 0x54
    e2c6:	4b17      	ldr	r3, [pc, #92]	; (e324 <LORAWAN_SetAttr+0x318>)
    e2c8:	4798      	blx	r3
    e2ca:	3d02      	subs	r5, #2
    e2cc:	e6f6      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e2ce:	680b      	ldr	r3, [r1, #0]
    e2d0:	250a      	movs	r5, #10
    e2d2:	1c5a      	adds	r2, r3, #1
    e2d4:	d100      	bne.n	e2d8 <LORAWAN_SetAttr+0x2cc>
    e2d6:	e6f1      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e2d8:	65a3      	str	r3, [r4, #88]	; 0x58
    e2da:	0029      	movs	r1, r5
    e2dc:	2001      	movs	r0, #1
    e2de:	e7f2      	b.n	e2c6 <LORAWAN_SetAttr+0x2ba>
    e2e0:	0026      	movs	r6, r4
    e2e2:	880b      	ldrh	r3, [r1, #0]
    e2e4:	369c      	adds	r6, #156	; 0x9c
    e2e6:	210c      	movs	r1, #12
    e2e8:	2000      	movs	r0, #0
    e2ea:	4d0e      	ldr	r5, [pc, #56]	; (e324 <LORAWAN_SetAttr+0x318>)
    e2ec:	8033      	strh	r3, [r6, #0]
    e2ee:	47a8      	blx	r5
    e2f0:	22fa      	movs	r2, #250	; 0xfa
    e2f2:	8833      	ldrh	r3, [r6, #0]
    e2f4:	0092      	lsls	r2, r2, #2
    e2f6:	189b      	adds	r3, r3, r2
    e2f8:	349e      	adds	r4, #158	; 0x9e
    e2fa:	8023      	strh	r3, [r4, #0]
    e2fc:	210d      	movs	r1, #13
    e2fe:	2000      	movs	r0, #0
    e300:	e729      	b.n	e156 <LORAWAN_SetAttr+0x14a>
    e302:	780b      	ldrb	r3, [r1, #0]
    e304:	250a      	movs	r5, #10
    e306:	2b0f      	cmp	r3, #15
    e308:	d900      	bls.n	e30c <LORAWAN_SetAttr+0x300>
    e30a:	e6d7      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e30c:	3464      	adds	r4, #100	; 0x64
    e30e:	7023      	strb	r3, [r4, #0]
    e310:	e7db      	b.n	e2ca <LORAWAN_SetAttr+0x2be>
    e312:	880b      	ldrh	r3, [r1, #0]
    e314:	34a0      	adds	r4, #160	; 0xa0
    e316:	8023      	strh	r3, [r4, #0]
    e318:	210e      	movs	r1, #14
    e31a:	e7ca      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e31c:	20001908 	.word	0x20001908
    e320:	00013ba5 	.word	0x00013ba5
    e324:	00008e5d 	.word	0x00008e5d
    e328:	0000f021 	.word	0x0000f021
    e32c:	00008b95 	.word	0x00008b95
    e330:	880b      	ldrh	r3, [r1, #0]
    e332:	34a2      	adds	r4, #162	; 0xa2
    e334:	8023      	strh	r3, [r4, #0]
    e336:	210f      	movs	r1, #15
    e338:	e7bb      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e33a:	880b      	ldrh	r3, [r1, #0]
    e33c:	34a4      	adds	r4, #164	; 0xa4
    e33e:	8023      	strh	r3, [r4, #0]
    e340:	2110      	movs	r1, #16
    e342:	e7b6      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e344:	780b      	ldrb	r3, [r1, #0]
    e346:	34a8      	adds	r4, #168	; 0xa8
    e348:	7023      	strb	r3, [r4, #0]
    e34a:	2112      	movs	r1, #18
    e34c:	e7b1      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e34e:	780b      	ldrb	r3, [r1, #0]
    e350:	34a9      	adds	r4, #169	; 0xa9
    e352:	7023      	strb	r3, [r4, #0]
    e354:	2113      	movs	r1, #19
    e356:	e7ac      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e358:	880b      	ldrh	r3, [r1, #0]
    e35a:	34a6      	adds	r4, #166	; 0xa6
    e35c:	8023      	strh	r3, [r4, #0]
    e35e:	2111      	movs	r1, #17
    e360:	e7a7      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e362:	780b      	ldrb	r3, [r1, #0]
    e364:	34ae      	adds	r4, #174	; 0xae
    e366:	7023      	strb	r3, [r4, #0]
    e368:	2115      	movs	r1, #21
    e36a:	e7a2      	b.n	e2b2 <LORAWAN_SetAttr+0x2a6>
    e36c:	780b      	ldrb	r3, [r1, #0]
    e36e:	34ad      	adds	r4, #173	; 0xad
    e370:	7023      	strb	r3, [r4, #0]
    e372:	e6d3      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e374:	780b      	ldrb	r3, [r1, #0]
    e376:	34b4      	adds	r4, #180	; 0xb4
    e378:	e7fa      	b.n	e370 <LORAWAN_SetAttr+0x364>
    e37a:	2001      	movs	r0, #1
    e37c:	780b      	ldrb	r3, [r1, #0]
    e37e:	2110      	movs	r1, #16
    e380:	3450      	adds	r4, #80	; 0x50
    e382:	4003      	ands	r3, r0
    e384:	011a      	lsls	r2, r3, #4
    e386:	7823      	ldrb	r3, [r4, #0]
    e388:	438b      	bics	r3, r1
    e38a:	4313      	orrs	r3, r2
    e38c:	7023      	strb	r3, [r4, #0]
    e38e:	3905      	subs	r1, #5
    e390:	e6af      	b.n	e0f2 <LORAWAN_SetAttr+0xe6>
    e392:	7818      	ldrb	r0, [r3, #0]
    e394:	7909      	ldrb	r1, [r1, #4]
    e396:	4b38      	ldr	r3, [pc, #224]	; (e478 <LORAWAN_SetAttr+0x46c>)
    e398:	4798      	blx	r3
    e39a:	0005      	movs	r5, r0
    e39c:	e68e      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e39e:	7818      	ldrb	r0, [r3, #0]
    e3a0:	7909      	ldrb	r1, [r1, #4]
    e3a2:	4b36      	ldr	r3, [pc, #216]	; (e47c <LORAWAN_SetAttr+0x470>)
    e3a4:	e7f8      	b.n	e398 <LORAWAN_SetAttr+0x38c>
    e3a6:	7808      	ldrb	r0, [r1, #0]
    e3a8:	4b35      	ldr	r3, [pc, #212]	; (e480 <LORAWAN_SetAttr+0x474>)
    e3aa:	6849      	ldr	r1, [r1, #4]
    e3ac:	4798      	blx	r3
    e3ae:	e7f4      	b.n	e39a <LORAWAN_SetAttr+0x38e>
    e3b0:	7909      	ldrb	r1, [r1, #4]
    e3b2:	6818      	ldr	r0, [r3, #0]
    e3b4:	4b33      	ldr	r3, [pc, #204]	; (e484 <LORAWAN_SetAttr+0x478>)
    e3b6:	4798      	blx	r3
    e3b8:	e7ef      	b.n	e39a <LORAWAN_SetAttr+0x38e>
    e3ba:	7808      	ldrb	r0, [r1, #0]
    e3bc:	4b32      	ldr	r3, [pc, #200]	; (e488 <LORAWAN_SetAttr+0x47c>)
    e3be:	4798      	blx	r3
    e3c0:	e7eb      	b.n	e39a <LORAWAN_SetAttr+0x38e>
    e3c2:	8808      	ldrh	r0, [r1, #0]
    e3c4:	4b31      	ldr	r3, [pc, #196]	; (e48c <LORAWAN_SetAttr+0x480>)
    e3c6:	4798      	blx	r3
    e3c8:	e6a8      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e3ca:	4a31      	ldr	r2, [pc, #196]	; (e490 <LORAWAN_SetAttr+0x484>)
    e3cc:	6011      	str	r1, [r2, #0]
    e3ce:	e688      	b.n	e0e2 <LORAWAN_SetAttr+0xd6>
    e3d0:	7808      	ldrb	r0, [r1, #0]
    e3d2:	4b30      	ldr	r3, [pc, #192]	; (e494 <LORAWAN_SetAttr+0x488>)
    e3d4:	4798      	blx	r3
    e3d6:	e7e0      	b.n	e39a <LORAWAN_SetAttr+0x38e>
    e3d8:	0020      	movs	r0, r4
    e3da:	300d      	adds	r0, #13
    e3dc:	4b2e      	ldr	r3, [pc, #184]	; (e498 <LORAWAN_SetAttr+0x48c>)
    e3de:	2210      	movs	r2, #16
    e3e0:	30ff      	adds	r0, #255	; 0xff
    e3e2:	4798      	blx	r3
    e3e4:	2107      	movs	r1, #7
    e3e6:	2000      	movs	r0, #0
    e3e8:	4d2c      	ldr	r5, [pc, #176]	; (e49c <LORAWAN_SetAttr+0x490>)
    e3ea:	47a8      	blx	r5
    e3ec:	2001      	movs	r0, #1
    e3ee:	34aa      	adds	r4, #170	; 0xaa
    e3f0:	7863      	ldrb	r3, [r4, #1]
    e3f2:	2109      	movs	r1, #9
    e3f4:	4303      	orrs	r3, r0
    e3f6:	7063      	strb	r3, [r4, #1]
    e3f8:	e6ad      	b.n	e156 <LORAWAN_SetAttr+0x14a>
    e3fa:	0020      	movs	r0, r4
    e3fc:	2210      	movs	r2, #16
    e3fe:	4b26      	ldr	r3, [pc, #152]	; (e498 <LORAWAN_SetAttr+0x48c>)
    e400:	30fc      	adds	r0, #252	; 0xfc
    e402:	4798      	blx	r3
    e404:	2108      	movs	r1, #8
    e406:	2000      	movs	r0, #0
    e408:	4d24      	ldr	r5, [pc, #144]	; (e49c <LORAWAN_SetAttr+0x490>)
    e40a:	47a8      	blx	r5
    e40c:	2380      	movs	r3, #128	; 0x80
    e40e:	34aa      	adds	r4, #170	; 0xaa
    e410:	7822      	ldrb	r2, [r4, #0]
    e412:	425b      	negs	r3, r3
    e414:	4313      	orrs	r3, r2
    e416:	7023      	strb	r3, [r4, #0]
    e418:	2109      	movs	r1, #9
    e41a:	2001      	movs	r0, #1
    e41c:	e69b      	b.n	e156 <LORAWAN_SetAttr+0x14a>
    e41e:	0023      	movs	r3, r4
    e420:	3350      	adds	r3, #80	; 0x50
    e422:	781b      	ldrb	r3, [r3, #0]
    e424:	6809      	ldr	r1, [r1, #0]
    e426:	07db      	lsls	r3, r3, #31
    e428:	d508      	bpl.n	e43c <LORAWAN_SetAttr+0x430>
    e42a:	6823      	ldr	r3, [r4, #0]
    e42c:	250a      	movs	r5, #10
    e42e:	0a1a      	lsrs	r2, r3, #8
    e430:	7923      	ldrb	r3, [r4, #4]
    e432:	061b      	lsls	r3, r3, #24
    e434:	4313      	orrs	r3, r2
    e436:	4299      	cmp	r1, r3
    e438:	d100      	bne.n	e43c <LORAWAN_SetAttr+0x430>
    e43a:	e63f      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e43c:	0023      	movs	r3, r4
    e43e:	33f8      	adds	r3, #248	; 0xf8
    e440:	6019      	str	r1, [r3, #0]
    e442:	2000      	movs	r0, #0
    e444:	2106      	movs	r1, #6
    e446:	4d15      	ldr	r5, [pc, #84]	; (e49c <LORAWAN_SetAttr+0x490>)
    e448:	34aa      	adds	r4, #170	; 0xaa
    e44a:	47a8      	blx	r5
    e44c:	7822      	ldrb	r2, [r4, #0]
    e44e:	2340      	movs	r3, #64	; 0x40
    e450:	e7e0      	b.n	e414 <LORAWAN_SetAttr+0x408>
    e452:	7809      	ldrb	r1, [r1, #0]
    e454:	2900      	cmp	r1, #0
    e456:	d009      	beq.n	e46c <LORAWAN_SetAttr+0x460>
    e458:	2202      	movs	r2, #2
    e45a:	34e4      	adds	r4, #228	; 0xe4
    e45c:	7823      	ldrb	r3, [r4, #0]
    e45e:	2508      	movs	r5, #8
    e460:	4213      	tst	r3, r2
    e462:	d100      	bne.n	e466 <LORAWAN_SetAttr+0x45a>
    e464:	e62a      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e466:	4393      	bics	r3, r2
    e468:	7023      	strb	r3, [r4, #0]
    e46a:	e627      	b.n	e0bc <LORAWAN_SetAttr+0xb0>
    e46c:	4a0c      	ldr	r2, [pc, #48]	; (e4a0 <LORAWAN_SetAttr+0x494>)
    e46e:	4b0d      	ldr	r3, [pc, #52]	; (e4a4 <LORAWAN_SetAttr+0x498>)
    e470:	200e      	movs	r0, #14
    e472:	4798      	blx	r3
    e474:	e652      	b.n	e11c <LORAWAN_SetAttr+0x110>
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	0000d591 	.word	0x0000d591
    e47c:	0000d521 	.word	0x0000d521
    e480:	0000c62d 	.word	0x0000c62d
    e484:	0000c5f1 	.word	0x0000c5f1
    e488:	0000df91 	.word	0x0000df91
    e48c:	0000b52d 	.word	0x0000b52d
    e490:	20001b44 	.word	0x20001b44
    e494:	0000eb11 	.word	0x0000eb11
    e498:	00013ba5 	.word	0x00013ba5
    e49c:	00008e5d 	.word	0x00008e5d
    e4a0:	200019ec 	.word	0x200019ec
    e4a4:	00008b79 	.word	0x00008b79

0000e4a8 <LORAWAN_Reset>:
    e4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4aa:	b087      	sub	sp, #28
    e4ac:	ab02      	add	r3, sp, #8
    e4ae:	1ddd      	adds	r5, r3, #7
    e4b0:	23ff      	movs	r3, #255	; 0xff
    e4b2:	4c7d      	ldr	r4, [pc, #500]	; (e6a8 <LORAWAN_Reset+0x200>)
    e4b4:	702b      	strb	r3, [r5, #0]
    e4b6:	0023      	movs	r3, r4
    e4b8:	9001      	str	r0, [sp, #4]
    e4ba:	33c3      	adds	r3, #195	; 0xc3
    e4bc:	781b      	ldrb	r3, [r3, #0]
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d001      	beq.n	e4c6 <LORAWAN_Reset+0x1e>
    e4c2:	4b7a      	ldr	r3, [pc, #488]	; (e6ac <LORAWAN_Reset+0x204>)
    e4c4:	4798      	blx	r3
    e4c6:	002a      	movs	r2, r5
    e4c8:	4b79      	ldr	r3, [pc, #484]	; (e6b0 <LORAWAN_Reset+0x208>)
    e4ca:	2100      	movs	r1, #0
    e4cc:	2023      	movs	r0, #35	; 0x23
    e4ce:	4798      	blx	r3
    e4d0:	782b      	ldrb	r3, [r5, #0]
    e4d2:	9a01      	ldr	r2, [sp, #4]
    e4d4:	4293      	cmp	r3, r2
    e4d6:	d001      	beq.n	e4dc <LORAWAN_Reset+0x34>
    e4d8:	4b76      	ldr	r3, [pc, #472]	; (e6b4 <LORAWAN_Reset+0x20c>)
    e4da:	4798      	blx	r3
    e4dc:	0021      	movs	r1, r4
    e4de:	2334      	movs	r3, #52	; 0x34
    e4e0:	31cb      	adds	r1, #203	; 0xcb
    e4e2:	700b      	strb	r3, [r1, #0]
    e4e4:	2000      	movs	r0, #0
    e4e6:	4b74      	ldr	r3, [pc, #464]	; (e6b8 <LORAWAN_Reset+0x210>)
    e4e8:	4798      	blx	r3
    e4ea:	0023      	movs	r3, r4
    e4ec:	2201      	movs	r2, #1
    e4ee:	33c8      	adds	r3, #200	; 0xc8
    e4f0:	701a      	strb	r2, [r3, #0]
    e4f2:	0023      	movs	r3, r4
    e4f4:	2205      	movs	r2, #5
    e4f6:	33c9      	adds	r3, #201	; 0xc9
    e4f8:	701a      	strb	r2, [r3, #0]
    e4fa:	0023      	movs	r3, r4
    e4fc:	32fa      	adds	r2, #250	; 0xfa
    e4fe:	33b1      	adds	r3, #177	; 0xb1
    e500:	701a      	strb	r2, [r3, #0]
    e502:	0023      	movs	r3, r4
    e504:	2500      	movs	r5, #0
    e506:	33b2      	adds	r3, #178	; 0xb2
    e508:	701d      	strb	r5, [r3, #0]
    e50a:	0023      	movs	r3, r4
    e50c:	339a      	adds	r3, #154	; 0x9a
    e50e:	801d      	strh	r5, [r3, #0]
    e510:	0023      	movs	r3, r4
    e512:	3398      	adds	r3, #152	; 0x98
    e514:	801d      	strh	r5, [r3, #0]
    e516:	0023      	movs	r3, r4
    e518:	3364      	adds	r3, #100	; 0x64
    e51a:	701d      	strb	r5, [r3, #0]
    e51c:	0023      	movs	r3, r4
    e51e:	3396      	adds	r3, #150	; 0x96
    e520:	801d      	strh	r5, [r3, #0]
    e522:	0023      	movs	r3, r4
    e524:	33c1      	adds	r3, #193	; 0xc1
    e526:	701d      	strb	r5, [r3, #0]
    e528:	0023      	movs	r3, r4
    e52a:	33c2      	adds	r3, #194	; 0xc2
    e52c:	701d      	strb	r5, [r3, #0]
    e52e:	0023      	movs	r3, r4
    e530:	3af9      	subs	r2, #249	; 0xf9
    e532:	33cc      	adds	r3, #204	; 0xcc
    e534:	601a      	str	r2, [r3, #0]
    e536:	0023      	movs	r3, r4
    e538:	33d0      	adds	r3, #208	; 0xd0
    e53a:	601d      	str	r5, [r3, #0]
    e53c:	0023      	movs	r3, r4
    e53e:	33e6      	adds	r3, #230	; 0xe6
    e540:	801d      	strh	r5, [r3, #0]
    e542:	0023      	movs	r3, r4
    e544:	33e8      	adds	r3, #232	; 0xe8
    e546:	801d      	strh	r5, [r3, #0]
    e548:	320a      	adds	r2, #10
    e54a:	0029      	movs	r1, r5
    e54c:	4b5b      	ldr	r3, [pc, #364]	; (e6bc <LORAWAN_Reset+0x214>)
    e54e:	485c      	ldr	r0, [pc, #368]	; (e6c0 <LORAWAN_Reset+0x218>)
    e550:	65a5      	str	r5, [r4, #88]	; 0x58
    e552:	6565      	str	r5, [r4, #84]	; 0x54
    e554:	4798      	blx	r3
    e556:	2390      	movs	r3, #144	; 0x90
    e558:	2201      	movs	r2, #1
    e55a:	2607      	movs	r6, #7
    e55c:	005b      	lsls	r3, r3, #1
    e55e:	54e2      	strb	r2, [r4, r3]
    e560:	0029      	movs	r1, r5
    e562:	0032      	movs	r2, r6
    e564:	4b55      	ldr	r3, [pc, #340]	; (e6bc <LORAWAN_Reset+0x214>)
    e566:	4857      	ldr	r0, [pc, #348]	; (e6c4 <LORAWAN_Reset+0x21c>)
    e568:	4798      	blx	r3
    e56a:	0023      	movs	r3, r4
    e56c:	3360      	adds	r3, #96	; 0x60
    e56e:	801d      	strh	r5, [r3, #0]
    e570:	0023      	movs	r3, r4
    e572:	33ae      	adds	r3, #174	; 0xae
    e574:	701e      	strb	r6, [r3, #0]
    e576:	0023      	movs	r3, r4
    e578:	33ad      	adds	r3, #173	; 0xad
    e57a:	701d      	strb	r5, [r3, #0]
    e57c:	0023      	movs	r3, r4
    e57e:	33b0      	adds	r3, #176	; 0xb0
    e580:	701d      	strb	r5, [r3, #0]
    e582:	0023      	movs	r3, r4
    e584:	33af      	adds	r3, #175	; 0xaf
    e586:	701d      	strb	r5, [r3, #0]
    e588:	9801      	ldr	r0, [sp, #4]
    e58a:	4b4f      	ldr	r3, [pc, #316]	; (e6c8 <LORAWAN_Reset+0x220>)
    e58c:	6525      	str	r5, [r4, #80]	; 0x50
    e58e:	4798      	blx	r3
    e590:	0007      	movs	r7, r0
    e592:	2808      	cmp	r0, #8
    e594:	d000      	beq.n	e598 <LORAWAN_Reset+0xf0>
    e596:	e085      	b.n	e6a4 <LORAWAN_Reset+0x1fc>
    e598:	4e4c      	ldr	r6, [pc, #304]	; (e6cc <LORAWAN_Reset+0x224>)
    e59a:	4a4d      	ldr	r2, [pc, #308]	; (e6d0 <LORAWAN_Reset+0x228>)
    e59c:	0029      	movs	r1, r5
    e59e:	47b0      	blx	r6
    e5a0:	4a4c      	ldr	r2, [pc, #304]	; (e6d4 <LORAWAN_Reset+0x22c>)
    e5a2:	0029      	movs	r1, r5
    e5a4:	200e      	movs	r0, #14
    e5a6:	47b0      	blx	r6
    e5a8:	0023      	movs	r3, r4
    e5aa:	4a4b      	ldr	r2, [pc, #300]	; (e6d8 <LORAWAN_Reset+0x230>)
    e5ac:	33b4      	adds	r3, #180	; 0xb4
    e5ae:	0029      	movs	r1, r5
    e5b0:	2006      	movs	r0, #6
    e5b2:	701d      	strb	r5, [r3, #0]
    e5b4:	47b0      	blx	r6
    e5b6:	4b49      	ldr	r3, [pc, #292]	; (e6dc <LORAWAN_Reset+0x234>)
    e5b8:	4798      	blx	r3
    e5ba:	466b      	mov	r3, sp
    e5bc:	791b      	ldrb	r3, [r3, #4]
    e5be:	34ca      	adds	r4, #202	; 0xca
    e5c0:	7023      	strb	r3, [r4, #0]
    e5c2:	0029      	movs	r1, r5
    e5c4:	4b46      	ldr	r3, [pc, #280]	; (e6e0 <LORAWAN_Reset+0x238>)
    e5c6:	0028      	movs	r0, r5
    e5c8:	4798      	blx	r3
    e5ca:	2210      	movs	r2, #16
    e5cc:	4b41      	ldr	r3, [pc, #260]	; (e6d4 <LORAWAN_Reset+0x22c>)
    e5ce:	781b      	ldrb	r3, [r3, #0]
    e5d0:	4213      	tst	r3, r2
    e5d2:	d006      	beq.n	e5e2 <LORAWAN_Reset+0x13a>
    e5d4:	ab02      	add	r3, sp, #8
    e5d6:	1d99      	adds	r1, r3, #6
    e5d8:	2301      	movs	r3, #1
    e5da:	0038      	movs	r0, r7
    e5dc:	700b      	strb	r3, [r1, #0]
    e5de:	4b36      	ldr	r3, [pc, #216]	; (e6b8 <LORAWAN_Reset+0x210>)
    e5e0:	4798      	blx	r3
    e5e2:	4b40      	ldr	r3, [pc, #256]	; (e6e4 <LORAWAN_Reset+0x23c>)
    e5e4:	4940      	ldr	r1, [pc, #256]	; (e6e8 <LORAWAN_Reset+0x240>)
    e5e6:	201e      	movs	r0, #30
    e5e8:	4798      	blx	r3
    e5ea:	4c2f      	ldr	r4, [pc, #188]	; (e6a8 <LORAWAN_Reset+0x200>)
    e5ec:	0023      	movs	r3, r4
    e5ee:	33e4      	adds	r3, #228	; 0xe4
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	075b      	lsls	r3, r3, #29
    e5f4:	d507      	bpl.n	e606 <LORAWAN_Reset+0x15e>
    e5f6:	2100      	movs	r1, #0
    e5f8:	aa04      	add	r2, sp, #16
    e5fa:	2030      	movs	r0, #48	; 0x30
    e5fc:	47b0      	blx	r6
    e5fe:	a904      	add	r1, sp, #16
    e600:	2027      	movs	r0, #39	; 0x27
    e602:	4b3a      	ldr	r3, [pc, #232]	; (e6ec <LORAWAN_Reset+0x244>)
    e604:	4798      	blx	r3
    e606:	4a3a      	ldr	r2, [pc, #232]	; (e6f0 <LORAWAN_Reset+0x248>)
    e608:	2100      	movs	r1, #0
    e60a:	2009      	movs	r0, #9
    e60c:	47b0      	blx	r6
    e60e:	4a39      	ldr	r2, [pc, #228]	; (e6f4 <LORAWAN_Reset+0x24c>)
    e610:	2100      	movs	r1, #0
    e612:	200a      	movs	r0, #10
    e614:	47b0      	blx	r6
    e616:	4a38      	ldr	r2, [pc, #224]	; (e6f8 <LORAWAN_Reset+0x250>)
    e618:	2100      	movs	r1, #0
    e61a:	2034      	movs	r0, #52	; 0x34
    e61c:	47b0      	blx	r6
    e61e:	ad04      	add	r5, sp, #16
    e620:	4a36      	ldr	r2, [pc, #216]	; (e6fc <LORAWAN_Reset+0x254>)
    e622:	2100      	movs	r1, #0
    e624:	2035      	movs	r0, #53	; 0x35
    e626:	47b0      	blx	r6
    e628:	002a      	movs	r2, r5
    e62a:	2100      	movs	r1, #0
    e62c:	2014      	movs	r0, #20
    e62e:	47b0      	blx	r6
    e630:	0023      	movs	r3, r4
    e632:	782a      	ldrb	r2, [r5, #0]
    e634:	33be      	adds	r3, #190	; 0xbe
    e636:	701a      	strb	r2, [r3, #0]
    e638:	0023      	movs	r3, r4
    e63a:	786a      	ldrb	r2, [r5, #1]
    e63c:	33bf      	adds	r3, #191	; 0xbf
    e63e:	701a      	strb	r2, [r3, #0]
    e640:	0023      	movs	r3, r4
    e642:	2500      	movs	r5, #0
    e644:	33aa      	adds	r3, #170	; 0xaa
    e646:	801d      	strh	r5, [r3, #0]
    e648:	2245      	movs	r2, #69	; 0x45
    e64a:	0029      	movs	r1, r5
    e64c:	0020      	movs	r0, r4
    e64e:	4b1b      	ldr	r3, [pc, #108]	; (e6bc <LORAWAN_Reset+0x214>)
    e650:	4798      	blx	r3
    e652:	0023      	movs	r3, r4
    e654:	22fa      	movs	r2, #250	; 0xfa
    e656:	339c      	adds	r3, #156	; 0x9c
    e658:	0092      	lsls	r2, r2, #2
    e65a:	801a      	strh	r2, [r3, #0]
    e65c:	0022      	movs	r2, r4
    e65e:	23fa      	movs	r3, #250	; 0xfa
    e660:	329e      	adds	r2, #158	; 0x9e
    e662:	00db      	lsls	r3, r3, #3
    e664:	8013      	strh	r3, [r2, #0]
    e666:	0022      	movs	r2, r4
    e668:	4925      	ldr	r1, [pc, #148]	; (e700 <LORAWAN_Reset+0x258>)
    e66a:	32a0      	adds	r2, #160	; 0xa0
    e66c:	8011      	strh	r1, [r2, #0]
    e66e:	0022      	movs	r2, r4
    e670:	4924      	ldr	r1, [pc, #144]	; (e704 <LORAWAN_Reset+0x25c>)
    e672:	32a2      	adds	r2, #162	; 0xa2
    e674:	8011      	strh	r1, [r2, #0]
    e676:	0022      	movs	r2, r4
    e678:	32a6      	adds	r2, #166	; 0xa6
    e67a:	8013      	strh	r3, [r2, #0]
    e67c:	0023      	movs	r3, r4
    e67e:	2220      	movs	r2, #32
    e680:	33a9      	adds	r3, #169	; 0xa9
    e682:	701a      	strb	r2, [r3, #0]
    e684:	0023      	movs	r3, r4
    e686:	1892      	adds	r2, r2, r2
    e688:	33a8      	adds	r3, #168	; 0xa8
    e68a:	701a      	strb	r2, [r3, #0]
    e68c:	2380      	movs	r3, #128	; 0x80
    e68e:	34a4      	adds	r4, #164	; 0xa4
    e690:	01db      	lsls	r3, r3, #7
    e692:	8023      	strh	r3, [r4, #0]
    e694:	0028      	movs	r0, r5
    e696:	4b1c      	ldr	r3, [pc, #112]	; (e708 <LORAWAN_Reset+0x260>)
    e698:	4798      	blx	r3
    e69a:	4b1c      	ldr	r3, [pc, #112]	; (e70c <LORAWAN_Reset+0x264>)
    e69c:	4798      	blx	r3
    e69e:	0038      	movs	r0, r7
    e6a0:	b007      	add	sp, #28
    e6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6a4:	270a      	movs	r7, #10
    e6a6:	e7fa      	b.n	e69e <LORAWAN_Reset+0x1f6>
    e6a8:	20001908 	.word	0x20001908
    e6ac:	0000adf5 	.word	0x0000adf5
    e6b0:	0000c665 	.word	0x0000c665
    e6b4:	00008ce9 	.word	0x00008ce9
    e6b8:	0000f021 	.word	0x0000f021
    e6bc:	00013c29 	.word	0x00013c29
    e6c0:	200019dc 	.word	0x200019dc
    e6c4:	20001a2b 	.word	0x20001a2b
    e6c8:	00008c09 	.word	0x00008c09
    e6cc:	00008b79 	.word	0x00008b79
    e6d0:	20001951 	.word	0x20001951
    e6d4:	200019ec 	.word	0x200019ec
    e6d8:	200019c8 	.word	0x200019c8
    e6dc:	0000f23d 	.word	0x0000f23d
    e6e0:	00008e5d 	.word	0x00008e5d
    e6e4:	0000ef35 	.word	0x0000ef35
    e6e8:	20001a33 	.word	0x20001a33
    e6ec:	0000e00d 	.word	0x0000e00d
    e6f0:	20001956 	.word	0x20001956
    e6f4:	20001952 	.word	0x20001952
    e6f8:	200019bd 	.word	0x200019bd
    e6fc:	200019bb 	.word	0x200019bb
    e700:	00001388 	.word	0x00001388
    e704:	00001770 	.word	0x00001770
    e708:	0000b52d 	.word	0x0000b52d
    e70c:	0000eaa5 	.word	0x0000eaa5

0000e710 <LORAWAN_ReadyToSleep>:
    e710:	4b08      	ldr	r3, [pc, #32]	; (e734 <LORAWAN_ReadyToSleep+0x24>)
    e712:	001a      	movs	r2, r3
    e714:	32c8      	adds	r2, #200	; 0xc8
    e716:	7812      	ldrb	r2, [r2, #0]
    e718:	2a01      	cmp	r2, #1
    e71a:	d002      	beq.n	e722 <LORAWAN_ReadyToSleep+0x12>
    e71c:	2000      	movs	r0, #0
    e71e:	2a04      	cmp	r2, #4
    e720:	d106      	bne.n	e730 <LORAWAN_ReadyToSleep+0x20>
    e722:	3350      	adds	r3, #80	; 0x50
    e724:	7818      	ldrb	r0, [r3, #0]
    e726:	230e      	movs	r3, #14
    e728:	4018      	ands	r0, r3
    e72a:	4243      	negs	r3, r0
    e72c:	4158      	adcs	r0, r3
    e72e:	b2c0      	uxtb	r0, r0
    e730:	4770      	bx	lr
    e732:	46c0      	nop			; (mov r8, r8)
    e734:	20001908 	.word	0x20001908

0000e738 <AESEncodeLoRa>:
    e738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e73a:	0004      	movs	r4, r0
    e73c:	2210      	movs	r2, #16
    e73e:	4668      	mov	r0, sp
    e740:	4b03      	ldr	r3, [pc, #12]	; (e750 <AESEncodeLoRa+0x18>)
    e742:	4798      	blx	r3
    e744:	4669      	mov	r1, sp
    e746:	0020      	movs	r0, r4
    e748:	4b02      	ldr	r3, [pc, #8]	; (e754 <AESEncodeLoRa+0x1c>)
    e74a:	4798      	blx	r3
    e74c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e74e:	46c0      	nop			; (mov r8, r8)
    e750:	00013ba5 	.word	0x00013ba5
    e754:	00008d31 	.word	0x00008d31

0000e758 <FillSubKey.constprop.0>:
    e758:	b530      	push	{r4, r5, lr}
    e75a:	2310      	movs	r3, #16
    e75c:	2400      	movs	r4, #0
    e75e:	3b01      	subs	r3, #1
    e760:	b2db      	uxtb	r3, r3
    e762:	2bff      	cmp	r3, #255	; 0xff
    e764:	d100      	bne.n	e768 <FillSubKey.constprop.0+0x10>
    e766:	bd30      	pop	{r4, r5, pc}
    e768:	18c5      	adds	r5, r0, r3
    e76a:	782a      	ldrb	r2, [r5, #0]
    e76c:	0052      	lsls	r2, r2, #1
    e76e:	4322      	orrs	r2, r4
    e770:	54ca      	strb	r2, [r1, r3]
    e772:	782c      	ldrb	r4, [r5, #0]
    e774:	09e4      	lsrs	r4, r4, #7
    e776:	e7f2      	b.n	e75e <FillSubKey.constprop.0+0x6>

0000e778 <AESCmac>:
    e778:	b5f0      	push	{r4, r5, r6, r7, lr}
    e77a:	b09d      	sub	sp, #116	; 0x74
    e77c:	ad18      	add	r5, sp, #96	; 0x60
    e77e:	4c59      	ldr	r4, [pc, #356]	; (e8e4 <AESCmac+0x16c>)
    e780:	9001      	str	r0, [sp, #4]
    e782:	9103      	str	r1, [sp, #12]
    e784:	9202      	str	r2, [sp, #8]
    e786:	2100      	movs	r1, #0
    e788:	2210      	movs	r2, #16
    e78a:	0028      	movs	r0, r5
    e78c:	001f      	movs	r7, r3
    e78e:	47a0      	blx	r4
    e790:	2387      	movs	r3, #135	; 0x87
    e792:	ae14      	add	r6, sp, #80	; 0x50
    e794:	2210      	movs	r2, #16
    e796:	2100      	movs	r1, #0
    e798:	0030      	movs	r0, r6
    e79a:	73eb      	strb	r3, [r5, #15]
    e79c:	47a0      	blx	r4
    e79e:	9901      	ldr	r1, [sp, #4]
    e7a0:	0030      	movs	r0, r6
    e7a2:	4b51      	ldr	r3, [pc, #324]	; (e8e8 <AESCmac+0x170>)
    e7a4:	4798      	blx	r3
    e7a6:	7832      	ldrb	r2, [r6, #0]
    e7a8:	ac04      	add	r4, sp, #16
    e7aa:	4b50      	ldr	r3, [pc, #320]	; (e8ec <AESCmac+0x174>)
    e7ac:	0021      	movs	r1, r4
    e7ae:	0030      	movs	r0, r6
    e7b0:	2a7f      	cmp	r2, #127	; 0x7f
    e7b2:	d83e      	bhi.n	e832 <AESCmac+0xba>
    e7b4:	4798      	blx	r3
    e7b6:	ab04      	add	r3, sp, #16
    e7b8:	781a      	ldrb	r2, [r3, #0]
    e7ba:	ac08      	add	r4, sp, #32
    e7bc:	4b4b      	ldr	r3, [pc, #300]	; (e8ec <AESCmac+0x174>)
    e7be:	0021      	movs	r1, r4
    e7c0:	a804      	add	r0, sp, #16
    e7c2:	2a7f      	cmp	r2, #127	; 0x7f
    e7c4:	d83f      	bhi.n	e846 <AESCmac+0xce>
    e7c6:	4798      	blx	r3
    e7c8:	0039      	movs	r1, r7
    e7ca:	310f      	adds	r1, #15
    e7cc:	110b      	asrs	r3, r1, #4
    e7ce:	d04d      	beq.n	e86c <AESCmac+0xf4>
    e7d0:	b2db      	uxtb	r3, r3
    e7d2:	9300      	str	r3, [sp, #0]
    e7d4:	073b      	lsls	r3, r7, #28
    e7d6:	d14b      	bne.n	e870 <AESCmac+0xf8>
    e7d8:	9b00      	ldr	r3, [sp, #0]
    e7da:	20ff      	movs	r0, #255	; 0xff
    e7dc:	1e5a      	subs	r2, r3, #1
    e7de:	0112      	lsls	r2, r2, #4
    e7e0:	b2d2      	uxtb	r2, r2
    e7e2:	0013      	movs	r3, r2
    e7e4:	0100      	lsls	r0, r0, #4
    e7e6:	4001      	ands	r1, r0
    e7e8:	ad14      	add	r5, sp, #80	; 0x50
    e7ea:	1a98      	subs	r0, r3, r2
    e7ec:	b2c0      	uxtb	r0, r0
    e7ee:	428b      	cmp	r3, r1
    e7f0:	db33      	blt.n	e85a <AESCmac+0xe2>
    e7f2:	2210      	movs	r2, #16
    e7f4:	2100      	movs	r1, #0
    e7f6:	a80c      	add	r0, sp, #48	; 0x30
    e7f8:	4b3a      	ldr	r3, [pc, #232]	; (e8e4 <AESCmac+0x16c>)
    e7fa:	4798      	blx	r3
    e7fc:	2400      	movs	r4, #0
    e7fe:	9b00      	ldr	r3, [sp, #0]
    e800:	3b01      	subs	r3, #1
    e802:	429c      	cmp	r4, r3
    e804:	db57      	blt.n	e8b6 <AESCmac+0x13e>
    e806:	2400      	movs	r4, #0
    e808:	ad10      	add	r5, sp, #64	; 0x40
    e80a:	a80c      	add	r0, sp, #48	; 0x30
    e80c:	a914      	add	r1, sp, #80	; 0x50
    e80e:	5c23      	ldrb	r3, [r4, r0]
    e810:	5c62      	ldrb	r2, [r4, r1]
    e812:	4053      	eors	r3, r2
    e814:	5563      	strb	r3, [r4, r5]
    e816:	3401      	adds	r4, #1
    e818:	2c10      	cmp	r4, #16
    e81a:	d1f8      	bne.n	e80e <AESCmac+0x96>
    e81c:	9901      	ldr	r1, [sp, #4]
    e81e:	0028      	movs	r0, r5
    e820:	4b31      	ldr	r3, [pc, #196]	; (e8e8 <AESCmac+0x170>)
    e822:	4798      	blx	r3
    e824:	0022      	movs	r2, r4
    e826:	0029      	movs	r1, r5
    e828:	9803      	ldr	r0, [sp, #12]
    e82a:	4b31      	ldr	r3, [pc, #196]	; (e8f0 <AESCmac+0x178>)
    e82c:	4798      	blx	r3
    e82e:	b01d      	add	sp, #116	; 0x74
    e830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e832:	4798      	blx	r3
    e834:	2300      	movs	r3, #0
    e836:	5d1a      	ldrb	r2, [r3, r4]
    e838:	5ce9      	ldrb	r1, [r5, r3]
    e83a:	404a      	eors	r2, r1
    e83c:	551a      	strb	r2, [r3, r4]
    e83e:	3301      	adds	r3, #1
    e840:	2b10      	cmp	r3, #16
    e842:	d1f8      	bne.n	e836 <AESCmac+0xbe>
    e844:	e7b7      	b.n	e7b6 <AESCmac+0x3e>
    e846:	4798      	blx	r3
    e848:	2300      	movs	r3, #0
    e84a:	5d1a      	ldrb	r2, [r3, r4]
    e84c:	5ce9      	ldrb	r1, [r5, r3]
    e84e:	404a      	eors	r2, r1
    e850:	551a      	strb	r2, [r3, r4]
    e852:	3301      	adds	r3, #1
    e854:	2b10      	cmp	r3, #16
    e856:	d1f8      	bne.n	e84a <AESCmac+0xd2>
    e858:	e7b6      	b.n	e7c8 <AESCmac+0x50>
    e85a:	9c02      	ldr	r4, [sp, #8]
    e85c:	ae04      	add	r6, sp, #16
    e85e:	5ce4      	ldrb	r4, [r4, r3]
    e860:	5c36      	ldrb	r6, [r6, r0]
    e862:	3301      	adds	r3, #1
    e864:	4074      	eors	r4, r6
    e866:	542c      	strb	r4, [r5, r0]
    e868:	b2db      	uxtb	r3, r3
    e86a:	e7be      	b.n	e7ea <AESCmac+0x72>
    e86c:	2301      	movs	r3, #1
    e86e:	9300      	str	r3, [sp, #0]
    e870:	2300      	movs	r3, #0
    e872:	220f      	movs	r2, #15
    e874:	003e      	movs	r6, r7
    e876:	001c      	movs	r4, r3
    e878:	2080      	movs	r0, #128	; 0x80
    e87a:	4396      	bics	r6, r2
    e87c:	4017      	ands	r7, r2
    e87e:	aa18      	add	r2, sp, #96	; 0x60
    e880:	b2d9      	uxtb	r1, r3
    e882:	428f      	cmp	r7, r1
    e884:	d911      	bls.n	e8aa <AESCmac+0x132>
    e886:	9902      	ldr	r1, [sp, #8]
    e888:	1989      	adds	r1, r1, r6
    e88a:	5cc9      	ldrb	r1, [r1, r3]
    e88c:	54d1      	strb	r1, [r2, r3]
    e88e:	3301      	adds	r3, #1
    e890:	2b10      	cmp	r3, #16
    e892:	d1f5      	bne.n	e880 <AESCmac+0x108>
    e894:	2300      	movs	r3, #0
    e896:	a914      	add	r1, sp, #80	; 0x50
    e898:	a808      	add	r0, sp, #32
    e89a:	5cea      	ldrb	r2, [r5, r3]
    e89c:	5c1c      	ldrb	r4, [r3, r0]
    e89e:	4062      	eors	r2, r4
    e8a0:	545a      	strb	r2, [r3, r1]
    e8a2:	3301      	adds	r3, #1
    e8a4:	2b10      	cmp	r3, #16
    e8a6:	d1f8      	bne.n	e89a <AESCmac+0x122>
    e8a8:	e7a3      	b.n	e7f2 <AESCmac+0x7a>
    e8aa:	428f      	cmp	r7, r1
    e8ac:	d101      	bne.n	e8b2 <AESCmac+0x13a>
    e8ae:	54d0      	strb	r0, [r2, r3]
    e8b0:	e7ed      	b.n	e88e <AESCmac+0x116>
    e8b2:	54d4      	strb	r4, [r2, r3]
    e8b4:	e7eb      	b.n	e88e <AESCmac+0x116>
    e8b6:	2200      	movs	r2, #0
    e8b8:	9802      	ldr	r0, [sp, #8]
    e8ba:	0123      	lsls	r3, r4, #4
    e8bc:	a910      	add	r1, sp, #64	; 0x40
    e8be:	18c0      	adds	r0, r0, r3
    e8c0:	ad0c      	add	r5, sp, #48	; 0x30
    e8c2:	5c83      	ldrb	r3, [r0, r2]
    e8c4:	5d56      	ldrb	r6, [r2, r5]
    e8c6:	4073      	eors	r3, r6
    e8c8:	5453      	strb	r3, [r2, r1]
    e8ca:	3201      	adds	r2, #1
    e8cc:	2a10      	cmp	r2, #16
    e8ce:	d1f8      	bne.n	e8c2 <AESCmac+0x14a>
    e8d0:	4b07      	ldr	r3, [pc, #28]	; (e8f0 <AESCmac+0x178>)
    e8d2:	0028      	movs	r0, r5
    e8d4:	4798      	blx	r3
    e8d6:	3401      	adds	r4, #1
    e8d8:	9901      	ldr	r1, [sp, #4]
    e8da:	0028      	movs	r0, r5
    e8dc:	4b02      	ldr	r3, [pc, #8]	; (e8e8 <AESCmac+0x170>)
    e8de:	4798      	blx	r3
    e8e0:	b2e4      	uxtb	r4, r4
    e8e2:	e78c      	b.n	e7fe <AESCmac+0x86>
    e8e4:	00013c29 	.word	0x00013c29
    e8e8:	0000e739 	.word	0x0000e739
    e8ec:	0000e759 	.word	0x0000e759
    e8f0:	00013ba5 	.word	0x00013ba5

0000e8f4 <LorawanClasscUlAckTimerCallback>:
    e8f4:	2102      	movs	r1, #2
    e8f6:	4b03      	ldr	r3, [pc, #12]	; (e904 <LorawanClasscUlAckTimerCallback+0x10>)
    e8f8:	3360      	adds	r3, #96	; 0x60
    e8fa:	781a      	ldrb	r2, [r3, #0]
    e8fc:	438a      	bics	r2, r1
    e8fe:	701a      	strb	r2, [r3, #0]
    e900:	4770      	bx	lr
    e902:	46c0      	nop			; (mov r8, r8)
    e904:	20001908 	.word	0x20001908

0000e908 <LorawanClasscValidateSend>:
    e908:	2390      	movs	r3, #144	; 0x90
    e90a:	b510      	push	{r4, lr}
    e90c:	4c0a      	ldr	r4, [pc, #40]	; (e938 <LorawanClasscValidateSend+0x30>)
    e90e:	005b      	lsls	r3, r3, #1
    e910:	5ce3      	ldrb	r3, [r4, r3]
    e912:	2b00      	cmp	r3, #0
    e914:	d008      	beq.n	e928 <LorawanClasscValidateSend+0x20>
    e916:	220e      	movs	r2, #14
    e918:	3450      	adds	r4, #80	; 0x50
    e91a:	7823      	ldrb	r3, [r4, #0]
    e91c:	2008      	movs	r0, #8
    e91e:	4013      	ands	r3, r2
    e920:	2b02      	cmp	r3, #2
    e922:	d100      	bne.n	e926 <LorawanClasscValidateSend+0x1e>
    e924:	2011      	movs	r0, #17
    e926:	bd10      	pop	{r4, pc}
    e928:	0023      	movs	r3, r4
    e92a:	33f0      	adds	r3, #240	; 0xf0
    e92c:	7818      	ldrb	r0, [r3, #0]
    e92e:	4b03      	ldr	r3, [pc, #12]	; (e93c <LorawanClasscValidateSend+0x34>)
    e930:	4798      	blx	r3
    e932:	2800      	cmp	r0, #0
    e934:	d1ef      	bne.n	e916 <LorawanClasscValidateSend+0xe>
    e936:	e7f5      	b.n	e924 <LorawanClasscValidateSend+0x1c>
    e938:	20001908 	.word	0x20001908
    e93c:	00009a8d 	.word	0x00009a8d

0000e940 <LorawanClasscReceiveWindow1Callback>:
    e940:	2301      	movs	r3, #1
    e942:	b507      	push	{r0, r1, r2, lr}
    e944:	a801      	add	r0, sp, #4
    e946:	7003      	strb	r3, [r0, #0]
    e948:	4b01      	ldr	r3, [pc, #4]	; (e950 <LorawanClasscReceiveWindow1Callback+0x10>)
    e94a:	4798      	blx	r3
    e94c:	bd07      	pop	{r0, r1, r2, pc}
    e94e:	46c0      	nop			; (mov r8, r8)
    e950:	00010351 	.word	0x00010351

0000e954 <LorawanClasscRxDone>:
    e954:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e956:	221f      	movs	r2, #31
    e958:	7803      	ldrb	r3, [r0, #0]
    e95a:	4c13      	ldr	r4, [pc, #76]	; (e9a8 <LorawanClasscRxDone+0x54>)
    e95c:	4393      	bics	r3, r2
    e95e:	2ba0      	cmp	r3, #160	; 0xa0
    e960:	d10c      	bne.n	e97c <LorawanClasscRxDone+0x28>
    e962:	0025      	movs	r5, r4
    e964:	35f0      	adds	r5, #240	; 0xf0
    e966:	7828      	ldrb	r0, [r5, #0]
    e968:	4b10      	ldr	r3, [pc, #64]	; (e9ac <LorawanClasscRxDone+0x58>)
    e96a:	4798      	blx	r3
    e96c:	1e02      	subs	r2, r0, #0
    e96e:	d014      	beq.n	e99a <LorawanClasscRxDone+0x46>
    e970:	0022      	movs	r2, r4
    e972:	2102      	movs	r1, #2
    e974:	3260      	adds	r2, #96	; 0x60
    e976:	7813      	ldrb	r3, [r2, #0]
    e978:	438b      	bics	r3, r1
    e97a:	7013      	strb	r3, [r2, #0]
    e97c:	3450      	adds	r4, #80	; 0x50
    e97e:	7823      	ldrb	r3, [r4, #0]
    e980:	220e      	movs	r2, #14
    e982:	0019      	movs	r1, r3
    e984:	4011      	ands	r1, r2
    e986:	2906      	cmp	r1, #6
    e988:	d103      	bne.n	e992 <LorawanClasscRxDone+0x3e>
    e98a:	4393      	bics	r3, r2
    e98c:	3a04      	subs	r2, #4
    e98e:	4313      	orrs	r3, r2
    e990:	7023      	strb	r3, [r4, #0]
    e992:	2000      	movs	r0, #0
    e994:	4b06      	ldr	r3, [pc, #24]	; (e9b0 <LorawanClasscRxDone+0x5c>)
    e996:	4798      	blx	r3
    e998:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    e99a:	7828      	ldrb	r0, [r5, #0]
    e99c:	4b05      	ldr	r3, [pc, #20]	; (e9b4 <LorawanClasscRxDone+0x60>)
    e99e:	9200      	str	r2, [sp, #0]
    e9a0:	4905      	ldr	r1, [pc, #20]	; (e9b8 <LorawanClasscRxDone+0x64>)
    e9a2:	4d06      	ldr	r5, [pc, #24]	; (e9bc <LorawanClasscRxDone+0x68>)
    e9a4:	47a8      	blx	r5
    e9a6:	e7e9      	b.n	e97c <LorawanClasscRxDone+0x28>
    e9a8:	20001908 	.word	0x20001908
    e9ac:	00009a8d 	.word	0x00009a8d
    e9b0:	0000cfe9 	.word	0x0000cfe9
    e9b4:	0000e8f5 	.word	0x0000e8f5
    e9b8:	001e8480 	.word	0x001e8480
    e9bc:	000098f5 	.word	0x000098f5

0000e9c0 <LorawanClasscTxDone>:
    e9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e9c2:	4c1b      	ldr	r4, [pc, #108]	; (ea30 <LorawanClasscTxDone+0x70>)
    e9c4:	0023      	movs	r3, r4
    e9c6:	339e      	adds	r3, #158	; 0x9e
    e9c8:	881d      	ldrh	r5, [r3, #0]
    e9ca:	0023      	movs	r3, r4
    e9cc:	3360      	adds	r3, #96	; 0x60
    e9ce:	781b      	ldrb	r3, [r3, #0]
    e9d0:	07db      	lsls	r3, r3, #31
    e9d2:	d525      	bpl.n	ea20 <LorawanClasscTxDone+0x60>
    e9d4:	0023      	movs	r3, r4
    e9d6:	0022      	movs	r2, r4
    e9d8:	33ae      	adds	r3, #174	; 0xae
    e9da:	781b      	ldrb	r3, [r3, #0]
    e9dc:	32b0      	adds	r2, #176	; 0xb0
    e9de:	3301      	adds	r3, #1
    e9e0:	7812      	ldrb	r2, [r2, #0]
    e9e2:	4293      	cmp	r3, r2
    e9e4:	db07      	blt.n	e9f6 <LorawanClasscTxDone+0x36>
    e9e6:	2395      	movs	r3, #149	; 0x95
    e9e8:	005b      	lsls	r3, r3, #1
    e9ea:	5ce3      	ldrb	r3, [r4, r3]
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	d002      	beq.n	e9f6 <LorawanClasscTxDone+0x36>
    e9f0:	23fa      	movs	r3, #250	; 0xfa
    e9f2:	00db      	lsls	r3, r3, #3
    e9f4:	18ed      	adds	r5, r5, r3
    e9f6:	0023      	movs	r3, r4
    e9f8:	33f0      	adds	r3, #240	; 0xf0
    e9fa:	1945      	adds	r5, r0, r5
    e9fc:	7818      	ldrb	r0, [r3, #0]
    e9fe:	4b0d      	ldr	r3, [pc, #52]	; (ea34 <LorawanClasscTxDone+0x74>)
    ea00:	4798      	blx	r3
    ea02:	34bc      	adds	r4, #188	; 0xbc
    ea04:	21fa      	movs	r1, #250	; 0xfa
    ea06:	7820      	ldrb	r0, [r4, #0]
    ea08:	2400      	movs	r4, #0
    ea0a:	0089      	lsls	r1, r1, #2
    ea0c:	4369      	muls	r1, r5
    ea0e:	0022      	movs	r2, r4
    ea10:	4d09      	ldr	r5, [pc, #36]	; (ea38 <LorawanClasscTxDone+0x78>)
    ea12:	9400      	str	r4, [sp, #0]
    ea14:	4b09      	ldr	r3, [pc, #36]	; (ea3c <LorawanClasscTxDone+0x7c>)
    ea16:	47a8      	blx	r5
    ea18:	0020      	movs	r0, r4
    ea1a:	4b09      	ldr	r3, [pc, #36]	; (ea40 <LorawanClasscTxDone+0x80>)
    ea1c:	4798      	blx	r3
    ea1e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    ea20:	0023      	movs	r3, r4
    ea22:	0022      	movs	r2, r4
    ea24:	33ad      	adds	r3, #173	; 0xad
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	32af      	adds	r2, #175	; 0xaf
    ea2a:	3301      	adds	r3, #1
    ea2c:	e7d8      	b.n	e9e0 <LorawanClasscTxDone+0x20>
    ea2e:	46c0      	nop			; (mov r8, r8)
    ea30:	20001908 	.word	0x20001908
    ea34:	00009bf9 	.word	0x00009bf9
    ea38:	000098f5 	.word	0x000098f5
    ea3c:	0000ceb9 	.word	0x0000ceb9
    ea40:	0000cfe9 	.word	0x0000cfe9

0000ea44 <LorawanClasscRxTimeout>:
    ea44:	b510      	push	{r4, lr}
    ea46:	4b08      	ldr	r3, [pc, #32]	; (ea68 <LorawanClasscRxTimeout+0x24>)
    ea48:	210e      	movs	r1, #14
    ea4a:	3350      	adds	r3, #80	; 0x50
    ea4c:	781a      	ldrb	r2, [r3, #0]
    ea4e:	0010      	movs	r0, r2
    ea50:	4008      	ands	r0, r1
    ea52:	2806      	cmp	r0, #6
    ea54:	d106      	bne.n	ea64 <LorawanClasscRxTimeout+0x20>
    ea56:	438a      	bics	r2, r1
    ea58:	3904      	subs	r1, #4
    ea5a:	430a      	orrs	r2, r1
    ea5c:	701a      	strb	r2, [r3, #0]
    ea5e:	2000      	movs	r0, #0
    ea60:	4b02      	ldr	r3, [pc, #8]	; (ea6c <LorawanClasscRxTimeout+0x28>)
    ea62:	4798      	blx	r3
    ea64:	bd10      	pop	{r4, pc}
    ea66:	46c0      	nop			; (mov r8, r8)
    ea68:	20001908 	.word	0x20001908
    ea6c:	0000cfe9 	.word	0x0000cfe9

0000ea70 <LorawanClasscNotifyAppOnReceive>:
    ea70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea72:	001f      	movs	r7, r3
    ea74:	4b08      	ldr	r3, [pc, #32]	; (ea98 <LorawanClasscNotifyAppOnReceive+0x28>)
    ea76:	0004      	movs	r4, r0
    ea78:	33f0      	adds	r3, #240	; 0xf0
    ea7a:	7818      	ldrb	r0, [r3, #0]
    ea7c:	4b07      	ldr	r3, [pc, #28]	; (ea9c <LorawanClasscNotifyAppOnReceive+0x2c>)
    ea7e:	000d      	movs	r5, r1
    ea80:	0016      	movs	r6, r2
    ea82:	4798      	blx	r3
    ea84:	2800      	cmp	r0, #0
    ea86:	d105      	bne.n	ea94 <LorawanClasscNotifyAppOnReceive+0x24>
    ea88:	0020      	movs	r0, r4
    ea8a:	003b      	movs	r3, r7
    ea8c:	0032      	movs	r2, r6
    ea8e:	0029      	movs	r1, r5
    ea90:	4c03      	ldr	r4, [pc, #12]	; (eaa0 <LorawanClasscNotifyAppOnReceive+0x30>)
    ea92:	47a0      	blx	r4
    ea94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea96:	46c0      	nop			; (mov r8, r8)
    ea98:	20001908 	.word	0x20001908
    ea9c:	00009a8d 	.word	0x00009a8d
    eaa0:	0000c4e9 	.word	0x0000c4e9

0000eaa4 <LorawanMcastInit>:
    eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaa6:	4c15      	ldr	r4, [pc, #84]	; (eafc <LorawanMcastInit+0x58>)
    eaa8:	2201      	movs	r2, #1
    eaaa:	0023      	movs	r3, r4
    eaac:	33f4      	adds	r3, #244	; 0xf4
    eaae:	701a      	strb	r2, [r3, #0]
    eab0:	0023      	movs	r3, r4
    eab2:	2201      	movs	r2, #1
    eab4:	2710      	movs	r7, #16
    eab6:	33f8      	adds	r3, #248	; 0xf8
    eab8:	4252      	negs	r2, r2
    eaba:	601a      	str	r2, [r3, #0]
    eabc:	4e10      	ldr	r6, [pc, #64]	; (eb00 <LorawanMcastInit+0x5c>)
    eabe:	003a      	movs	r2, r7
    eac0:	2100      	movs	r1, #0
    eac2:	4810      	ldr	r0, [pc, #64]	; (eb04 <LorawanMcastInit+0x60>)
    eac4:	47b0      	blx	r6
    eac6:	4d10      	ldr	r5, [pc, #64]	; (eb08 <LorawanMcastInit+0x64>)
    eac8:	003a      	movs	r2, r7
    eaca:	0028      	movs	r0, r5
    eacc:	2100      	movs	r1, #0
    eace:	47b0      	blx	r6
    ead0:	0022      	movs	r2, r4
    ead2:	2102      	movs	r1, #2
    ead4:	3250      	adds	r2, #80	; 0x50
    ead6:	7893      	ldrb	r3, [r2, #2]
    ead8:	2000      	movs	r0, #0
    eada:	438b      	bics	r3, r1
    eadc:	7093      	strb	r3, [r2, #2]
    eade:	223f      	movs	r2, #63	; 0x3f
    eae0:	34aa      	adds	r4, #170	; 0xaa
    eae2:	7823      	ldrb	r3, [r4, #0]
    eae4:	3103      	adds	r1, #3
    eae6:	4013      	ands	r3, r2
    eae8:	7023      	strb	r3, [r4, #0]
    eaea:	7863      	ldrb	r3, [r4, #1]
    eaec:	3a3e      	subs	r2, #62	; 0x3e
    eaee:	4393      	bics	r3, r2
    eaf0:	7063      	strb	r3, [r4, #1]
    eaf2:	4b06      	ldr	r3, [pc, #24]	; (eb0c <LorawanMcastInit+0x68>)
    eaf4:	6228      	str	r0, [r5, #32]
    eaf6:	4798      	blx	r3
    eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eafa:	46c0      	nop			; (mov r8, r8)
    eafc:	20001908 	.word	0x20001908
    eb00:	00013c29 	.word	0x00013c29
    eb04:	20001a14 	.word	0x20001a14
    eb08:	20001a04 	.word	0x20001a04
    eb0c:	00008e5d 	.word	0x00008e5d

0000eb10 <LorawanMcastEnable>:
    eb10:	b510      	push	{r4, lr}
    eb12:	4b12      	ldr	r3, [pc, #72]	; (eb5c <LorawanMcastEnable+0x4c>)
    eb14:	2800      	cmp	r0, #0
    eb16:	d019      	beq.n	eb4c <LorawanMcastEnable+0x3c>
    eb18:	001a      	movs	r2, r3
    eb1a:	21e0      	movs	r1, #224	; 0xe0
    eb1c:	32aa      	adds	r2, #170	; 0xaa
    eb1e:	8812      	ldrh	r2, [r2, #0]
    eb20:	0049      	lsls	r1, r1, #1
    eb22:	400a      	ands	r2, r1
    eb24:	200a      	movs	r0, #10
    eb26:	428a      	cmp	r2, r1
    eb28:	d10f      	bne.n	eb4a <LorawanMcastEnable+0x3a>
    eb2a:	001a      	movs	r2, r3
    eb2c:	32c8      	adds	r2, #200	; 0xc8
    eb2e:	7811      	ldrb	r1, [r2, #0]
    eb30:	2206      	movs	r2, #6
    eb32:	4211      	tst	r1, r2
    eb34:	d009      	beq.n	eb4a <LorawanMcastEnable+0x3a>
    eb36:	3350      	adds	r3, #80	; 0x50
    eb38:	7899      	ldrb	r1, [r3, #2]
    eb3a:	3a04      	subs	r2, #4
    eb3c:	430a      	orrs	r2, r1
    eb3e:	210b      	movs	r1, #11
    eb40:	709a      	strb	r2, [r3, #2]
    eb42:	3809      	subs	r0, #9
    eb44:	4b06      	ldr	r3, [pc, #24]	; (eb60 <LorawanMcastEnable+0x50>)
    eb46:	4798      	blx	r3
    eb48:	2008      	movs	r0, #8
    eb4a:	bd10      	pop	{r4, pc}
    eb4c:	2102      	movs	r1, #2
    eb4e:	3350      	adds	r3, #80	; 0x50
    eb50:	789a      	ldrb	r2, [r3, #2]
    eb52:	2001      	movs	r0, #1
    eb54:	438a      	bics	r2, r1
    eb56:	709a      	strb	r2, [r3, #2]
    eb58:	3109      	adds	r1, #9
    eb5a:	e7f3      	b.n	eb44 <LorawanMcastEnable+0x34>
    eb5c:	20001908 	.word	0x20001908
    eb60:	00008e5d 	.word	0x00008e5d

0000eb64 <LorawanMcastValidateHdr>:
    eb64:	0003      	movs	r3, r0
    eb66:	b570      	push	{r4, r5, r6, lr}
    eb68:	7845      	ldrb	r5, [r0, #1]
    eb6a:	7880      	ldrb	r0, [r0, #2]
    eb6c:	4c11      	ldr	r4, [pc, #68]	; (ebb4 <LorawanMcastValidateHdr+0x50>)
    eb6e:	0200      	lsls	r0, r0, #8
    eb70:	4328      	orrs	r0, r5
    eb72:	78dd      	ldrb	r5, [r3, #3]
    eb74:	042d      	lsls	r5, r5, #16
    eb76:	4328      	orrs	r0, r5
    eb78:	791d      	ldrb	r5, [r3, #4]
    eb7a:	062d      	lsls	r5, r5, #24
    eb7c:	4305      	orrs	r5, r0
    eb7e:	0020      	movs	r0, r4
    eb80:	30f8      	adds	r0, #248	; 0xf8
    eb82:	6806      	ldr	r6, [r0, #0]
    eb84:	200a      	movs	r0, #10
    eb86:	42b5      	cmp	r5, r6
    eb88:	d112      	bne.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    eb8a:	0025      	movs	r5, r4
    eb8c:	35c8      	adds	r5, #200	; 0xc8
    eb8e:	782e      	ldrb	r6, [r5, #0]
    eb90:	2506      	movs	r5, #6
    eb92:	422e      	tst	r6, r5
    eb94:	d00c      	beq.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    eb96:	3452      	adds	r4, #82	; 0x52
    eb98:	7824      	ldrb	r4, [r4, #0]
    eb9a:	07a4      	lsls	r4, r4, #30
    eb9c:	d508      	bpl.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    eb9e:	2a00      	cmp	r2, #0
    eba0:	d006      	beq.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    eba2:	795a      	ldrb	r2, [r3, #5]
    eba4:	236f      	movs	r3, #111	; 0x6f
    eba6:	421a      	tst	r2, r3
    eba8:	d102      	bne.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    ebaa:	2903      	cmp	r1, #3
    ebac:	d100      	bne.n	ebb0 <LorawanMcastValidateHdr+0x4c>
    ebae:	3802      	subs	r0, #2
    ebb0:	bd70      	pop	{r4, r5, r6, pc}
    ebb2:	46c0      	nop			; (mov r8, r8)
    ebb4:	20001908 	.word	0x20001908

0000ebb8 <LorawanMcastProcessPkt>:
    ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebba:	0016      	movs	r6, r2
    ebbc:	b087      	sub	sp, #28
    ebbe:	9005      	str	r0, [sp, #20]
    ebc0:	79f3      	ldrb	r3, [r6, #7]
    ebc2:	7992      	ldrb	r2, [r2, #6]
    ebc4:	4c2f      	ldr	r4, [pc, #188]	; (ec84 <LorawanMcastProcessPkt+0xcc>)
    ebc6:	021b      	lsls	r3, r3, #8
    ebc8:	4313      	orrs	r3, r2
    ebca:	0022      	movs	r2, r4
    ebcc:	32fe      	adds	r2, #254	; 0xfe
    ebce:	000d      	movs	r5, r1
    ebd0:	8bd1      	ldrh	r1, [r2, #30]
    ebd2:	270a      	movs	r7, #10
    ebd4:	4299      	cmp	r1, r3
    ebd6:	d83d      	bhi.n	ec54 <LorawanMcastProcessPkt+0x9c>
    ebd8:	83d3      	strh	r3, [r2, #30]
    ebda:	2105      	movs	r1, #5
    ebdc:	4b2a      	ldr	r3, [pc, #168]	; (ec88 <LorawanMcastProcessPkt+0xd0>)
    ebde:	2000      	movs	r0, #0
    ebe0:	4798      	blx	r3
    ebe2:	0022      	movs	r2, r4
    ebe4:	32f8      	adds	r2, #248	; 0xf8
    ebe6:	6812      	ldr	r2, [r2, #0]
    ebe8:	0023      	movs	r3, r4
    ebea:	9203      	str	r2, [sp, #12]
    ebec:	4a27      	ldr	r2, [pc, #156]	; (ec8c <LorawanMcastProcessPkt+0xd4>)
    ebee:	0029      	movs	r1, r5
    ebf0:	9202      	str	r2, [sp, #8]
    ebf2:	2219      	movs	r2, #25
    ebf4:	9201      	str	r2, [sp, #4]
    ebf6:	4a26      	ldr	r2, [pc, #152]	; (ec90 <LorawanMcastProcessPkt+0xd8>)
    ebf8:	9805      	ldr	r0, [sp, #20]
    ebfa:	9200      	str	r2, [sp, #0]
    ebfc:	33fc      	adds	r3, #252	; 0xfc
    ebfe:	390d      	subs	r1, #13
    ec00:	b2c9      	uxtb	r1, r1
    ec02:	6a1b      	ldr	r3, [r3, #32]
    ec04:	2201      	movs	r2, #1
    ec06:	4f23      	ldr	r7, [pc, #140]	; (ec94 <LorawanMcastProcessPkt+0xdc>)
    ec08:	3009      	adds	r0, #9
    ec0a:	47b8      	blx	r7
    ec0c:	4922      	ldr	r1, [pc, #136]	; (ec98 <LorawanMcastProcessPkt+0xe0>)
    ec0e:	2708      	movs	r7, #8
    ec10:	784a      	ldrb	r2, [r1, #1]
    ec12:	780b      	ldrb	r3, [r1, #0]
    ec14:	0212      	lsls	r2, r2, #8
    ec16:	431a      	orrs	r2, r3
    ec18:	788b      	ldrb	r3, [r1, #2]
    ec1a:	041b      	lsls	r3, r3, #16
    ec1c:	431a      	orrs	r2, r3
    ec1e:	78cb      	ldrb	r3, [r1, #3]
    ec20:	061b      	lsls	r3, r3, #24
    ec22:	4313      	orrs	r3, r2
    ec24:	d016      	beq.n	ec54 <LorawanMcastProcessPkt+0x9c>
    ec26:	2220      	movs	r2, #32
    ec28:	3460      	adds	r4, #96	; 0x60
    ec2a:	7823      	ldrb	r3, [r4, #0]
    ec2c:	9905      	ldr	r1, [sp, #20]
    ec2e:	4393      	bics	r3, r2
    ec30:	7023      	strb	r3, [r4, #0]
    ec32:	78b3      	ldrb	r3, [r6, #2]
    ec34:	002a      	movs	r2, r5
    ec36:	40bb      	lsls	r3, r7
    ec38:	7870      	ldrb	r0, [r6, #1]
    ec3a:	3a0c      	subs	r2, #12
    ec3c:	4303      	orrs	r3, r0
    ec3e:	78f0      	ldrb	r0, [r6, #3]
    ec40:	b2d2      	uxtb	r2, r2
    ec42:	0400      	lsls	r0, r0, #16
    ec44:	4303      	orrs	r3, r0
    ec46:	7930      	ldrb	r0, [r6, #4]
    ec48:	19c9      	adds	r1, r1, r7
    ec4a:	0600      	lsls	r0, r0, #24
    ec4c:	4318      	orrs	r0, r3
    ec4e:	4c13      	ldr	r4, [pc, #76]	; (ec9c <LorawanMcastProcessPkt+0xe4>)
    ec50:	003b      	movs	r3, r7
    ec52:	47a0      	blx	r4
    ec54:	4a0b      	ldr	r2, [pc, #44]	; (ec84 <LorawanMcastProcessPkt+0xcc>)
    ec56:	200e      	movs	r0, #14
    ec58:	0011      	movs	r1, r2
    ec5a:	3150      	adds	r1, #80	; 0x50
    ec5c:	780b      	ldrb	r3, [r1, #0]
    ec5e:	001c      	movs	r4, r3
    ec60:	4004      	ands	r4, r0
    ec62:	2c06      	cmp	r4, #6
    ec64:	d107      	bne.n	ec76 <LorawanMcastProcessPkt+0xbe>
    ec66:	32c8      	adds	r2, #200	; 0xc8
    ec68:	7812      	ldrb	r2, [r2, #0]
    ec6a:	2a04      	cmp	r2, #4
    ec6c:	d103      	bne.n	ec76 <LorawanMcastProcessPkt+0xbe>
    ec6e:	4383      	bics	r3, r0
    ec70:	3206      	adds	r2, #6
    ec72:	4313      	orrs	r3, r2
    ec74:	700b      	strb	r3, [r1, #0]
    ec76:	2000      	movs	r0, #0
    ec78:	4b09      	ldr	r3, [pc, #36]	; (eca0 <LorawanMcastProcessPkt+0xe8>)
    ec7a:	4798      	blx	r3
    ec7c:	0038      	movs	r0, r7
    ec7e:	b007      	add	sp, #28
    ec80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec82:	46c0      	nop			; (mov r8, r8)
    ec84:	20001908 	.word	0x20001908
    ec88:	00008e5d 	.word	0x00008e5d
    ec8c:	20001b50 	.word	0x20001b50
    ec90:	20001a14 	.word	0x20001a14
    ec94:	0000c0e5 	.word	0x0000c0e5
    ec98:	20001b48 	.word	0x20001b48
    ec9c:	0000c4e9 	.word	0x0000c4e9
    eca0:	0000cfe9 	.word	0x0000cfe9

0000eca4 <Lorawan_Pds_fid1_CB>:
    eca4:	4b04      	ldr	r3, [pc, #16]	; (ecb8 <Lorawan_Pds_fid1_CB+0x14>)
    eca6:	0019      	movs	r1, r3
    eca8:	31fc      	adds	r1, #252	; 0xfc
    ecaa:	6a0a      	ldr	r2, [r1, #32]
    ecac:	3201      	adds	r2, #1
    ecae:	620a      	str	r2, [r1, #32]
    ecb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ecb2:	3201      	adds	r2, #1
    ecb4:	655a      	str	r2, [r3, #84]	; 0x54
    ecb6:	4770      	bx	lr
    ecb8:	20001908 	.word	0x20001908

0000ecbc <Lorawan_Pds_fid2_CB>:
    ecbc:	2171      	movs	r1, #113	; 0x71
    ecbe:	4b06      	ldr	r3, [pc, #24]	; (ecd8 <Lorawan_Pds_fid2_CB+0x1c>)
    ecc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ecc2:	3350      	adds	r3, #80	; 0x50
    ecc4:	3201      	adds	r2, #1
    ecc6:	609a      	str	r2, [r3, #8]
    ecc8:	781a      	ldrb	r2, [r3, #0]
    ecca:	400a      	ands	r2, r1
    eccc:	701a      	strb	r2, [r3, #0]
    ecce:	785a      	ldrb	r2, [r3, #1]
    ecd0:	3970      	subs	r1, #112	; 0x70
    ecd2:	438a      	bics	r2, r1
    ecd4:	705a      	strb	r2, [r3, #1]
    ecd6:	4770      	bx	lr
    ecd8:	20001908 	.word	0x20001908

0000ecdc <LORAWAN_TxHandler>:
    ecdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecde:	b087      	sub	sp, #28
    ece0:	466b      	mov	r3, sp
    ece2:	2501      	movs	r5, #1
    ece4:	4c30      	ldr	r4, [pc, #192]	; (eda8 <LORAWAN_TxHandler+0xcc>)
    ece6:	701d      	strb	r5, [r3, #0]
    ece8:	0023      	movs	r3, r4
    ecea:	466a      	mov	r2, sp
    ecec:	33b5      	adds	r3, #181	; 0xb5
    ecee:	781b      	ldrb	r3, [r3, #0]
    ecf0:	4669      	mov	r1, sp
    ecf2:	7053      	strb	r3, [r2, #1]
    ecf4:	0023      	movs	r3, r4
    ecf6:	33b3      	adds	r3, #179	; 0xb3
    ecf8:	781b      	ldrb	r3, [r3, #0]
    ecfa:	202d      	movs	r0, #45	; 0x2d
    ecfc:	7093      	strb	r3, [r2, #2]
    ecfe:	aa03      	add	r2, sp, #12
    ed00:	4b2a      	ldr	r3, [pc, #168]	; (edac <LORAWAN_TxHandler+0xd0>)
    ed02:	4798      	blx	r3
    ed04:	2808      	cmp	r0, #8
    ed06:	d004      	beq.n	ed12 <LORAWAN_TxHandler+0x36>
    ed08:	4b29      	ldr	r3, [pc, #164]	; (edb0 <LORAWAN_TxHandler+0xd4>)
    ed0a:	4798      	blx	r3
    ed0c:	2000      	movs	r0, #0
    ed0e:	b007      	add	sp, #28
    ed10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed12:	0023      	movs	r3, r4
    ed14:	33c8      	adds	r3, #200	; 0xc8
    ed16:	781b      	ldrb	r3, [r3, #0]
    ed18:	ae01      	add	r6, sp, #4
    ed1a:	2b04      	cmp	r3, #4
    ed1c:	d103      	bne.n	ed26 <LORAWAN_TxHandler+0x4a>
    ed1e:	0030      	movs	r0, r6
    ed20:	4b24      	ldr	r3, [pc, #144]	; (edb4 <LORAWAN_TxHandler+0xd8>)
    ed22:	7035      	strb	r5, [r6, #0]
    ed24:	4798      	blx	r3
    ed26:	4b24      	ldr	r3, [pc, #144]	; (edb8 <LORAWAN_TxHandler+0xdc>)
    ed28:	9803      	ldr	r0, [sp, #12]
    ed2a:	9904      	ldr	r1, [sp, #16]
    ed2c:	9a05      	ldr	r2, [sp, #20]
    ed2e:	4798      	blx	r3
    ed30:	0023      	movs	r3, r4
    ed32:	33d0      	adds	r3, #208	; 0xd0
    ed34:	681d      	ldr	r5, [r3, #0]
    ed36:	2395      	movs	r3, #149	; 0x95
    ed38:	4f20      	ldr	r7, [pc, #128]	; (edbc <LORAWAN_TxHandler+0xe0>)
    ed3a:	005b      	lsls	r3, r3, #1
    ed3c:	2d00      	cmp	r5, #0
    ed3e:	d023      	beq.n	ed88 <LORAWAN_TxHandler+0xac>
    ed40:	2201      	movs	r2, #1
    ed42:	54e2      	strb	r2, [r4, r3]
    ed44:	7828      	ldrb	r0, [r5, #0]
    ed46:	7a2b      	ldrb	r3, [r5, #8]
    ed48:	1e42      	subs	r2, r0, #1
    ed4a:	4190      	sbcs	r0, r2
    ed4c:	7869      	ldrb	r1, [r5, #1]
    ed4e:	686a      	ldr	r2, [r5, #4]
    ed50:	b2c0      	uxtb	r0, r0
    ed52:	47b8      	blx	r7
    ed54:	0023      	movs	r3, r4
    ed56:	339a      	adds	r3, #154	; 0x9a
    ed58:	881b      	ldrh	r3, [r3, #0]
    ed5a:	0030      	movs	r0, r6
    ed5c:	7033      	strb	r3, [r6, #0]
    ed5e:	4b18      	ldr	r3, [pc, #96]	; (edc0 <LORAWAN_TxHandler+0xe4>)
    ed60:	6073      	str	r3, [r6, #4]
    ed62:	4b18      	ldr	r3, [pc, #96]	; (edc4 <LORAWAN_TxHandler+0xe8>)
    ed64:	4798      	blx	r3
    ed66:	2800      	cmp	r0, #0
    ed68:	d114      	bne.n	ed94 <LORAWAN_TxHandler+0xb8>
    ed6a:	0021      	movs	r1, r4
    ed6c:	220e      	movs	r2, #14
    ed6e:	3150      	adds	r1, #80	; 0x50
    ed70:	780b      	ldrb	r3, [r1, #0]
    ed72:	4393      	bics	r3, r2
    ed74:	001a      	movs	r2, r3
    ed76:	2302      	movs	r3, #2
    ed78:	4313      	orrs	r3, r2
    ed7a:	700b      	strb	r3, [r1, #0]
    ed7c:	2208      	movs	r2, #8
    ed7e:	3460      	adds	r4, #96	; 0x60
    ed80:	7823      	ldrb	r3, [r4, #0]
    ed82:	4393      	bics	r3, r2
    ed84:	7023      	strb	r3, [r4, #0]
    ed86:	e7c1      	b.n	ed0c <LORAWAN_TxHandler+0x30>
    ed88:	54e5      	strb	r5, [r4, r3]
    ed8a:	002a      	movs	r2, r5
    ed8c:	002b      	movs	r3, r5
    ed8e:	0029      	movs	r1, r5
    ed90:	0028      	movs	r0, r5
    ed92:	e7de      	b.n	ed52 <LORAWAN_TxHandler+0x76>
    ed94:	0022      	movs	r2, r4
    ed96:	2120      	movs	r1, #32
    ed98:	3260      	adds	r2, #96	; 0x60
    ed9a:	7813      	ldrb	r3, [r2, #0]
    ed9c:	438b      	bics	r3, r1
    ed9e:	7013      	strb	r3, [r2, #0]
    eda0:	4b03      	ldr	r3, [pc, #12]	; (edb0 <LORAWAN_TxHandler+0xd4>)
    eda2:	4798      	blx	r3
    eda4:	e7ea      	b.n	ed7c <LORAWAN_TxHandler+0xa0>
    eda6:	46c0      	nop			; (mov r8, r8)
    eda8:	20001908 	.word	0x20001908
    edac:	00008b79 	.word	0x00008b79
    edb0:	0000c485 	.word	0x0000c485
    edb4:	00010351 	.word	0x00010351
    edb8:	0000bc55 	.word	0x0000bc55
    edbc:	0000c19d 	.word	0x0000c19d
    edc0:	20001a45 	.word	0x20001a45
    edc4:	0000f971 	.word	0x0000f971

0000edc8 <LORAWAN_JoinReqHandler>:
    edc8:	b530      	push	{r4, r5, lr}
    edca:	b087      	sub	sp, #28
    edcc:	466a      	mov	r2, sp
    edce:	2300      	movs	r3, #0
    edd0:	4c1e      	ldr	r4, [pc, #120]	; (ee4c <LORAWAN_JoinReqHandler+0x84>)
    edd2:	7013      	strb	r3, [r2, #0]
    edd4:	0023      	movs	r3, r4
    edd6:	33b5      	adds	r3, #181	; 0xb5
    edd8:	781b      	ldrb	r3, [r3, #0]
    edda:	4669      	mov	r1, sp
    eddc:	7053      	strb	r3, [r2, #1]
    edde:	0023      	movs	r3, r4
    ede0:	33b3      	adds	r3, #179	; 0xb3
    ede2:	781b      	ldrb	r3, [r3, #0]
    ede4:	202d      	movs	r0, #45	; 0x2d
    ede6:	7093      	strb	r3, [r2, #2]
    ede8:	aa03      	add	r2, sp, #12
    edea:	4b19      	ldr	r3, [pc, #100]	; (ee50 <LORAWAN_JoinReqHandler+0x88>)
    edec:	4798      	blx	r3
    edee:	2808      	cmp	r0, #8
    edf0:	d004      	beq.n	edfc <LORAWAN_JoinReqHandler+0x34>
    edf2:	4b18      	ldr	r3, [pc, #96]	; (ee54 <LORAWAN_JoinReqHandler+0x8c>)
    edf4:	4798      	blx	r3
    edf6:	2000      	movs	r0, #0
    edf8:	b007      	add	sp, #28
    edfa:	bd30      	pop	{r4, r5, pc}
    edfc:	4b16      	ldr	r3, [pc, #88]	; (ee58 <LORAWAN_JoinReqHandler+0x90>)
    edfe:	9803      	ldr	r0, [sp, #12]
    ee00:	9904      	ldr	r1, [sp, #16]
    ee02:	9a05      	ldr	r2, [sp, #20]
    ee04:	4798      	blx	r3
    ee06:	0023      	movs	r3, r4
    ee08:	33c8      	adds	r3, #200	; 0xc8
    ee0a:	781b      	ldrb	r3, [r3, #0]
    ee0c:	ad01      	add	r5, sp, #4
    ee0e:	2b04      	cmp	r3, #4
    ee10:	d104      	bne.n	ee1c <LORAWAN_JoinReqHandler+0x54>
    ee12:	3b03      	subs	r3, #3
    ee14:	702b      	strb	r3, [r5, #0]
    ee16:	0028      	movs	r0, r5
    ee18:	4b10      	ldr	r3, [pc, #64]	; (ee5c <LORAWAN_JoinReqHandler+0x94>)
    ee1a:	4798      	blx	r3
    ee1c:	2395      	movs	r3, #149	; 0x95
    ee1e:	2200      	movs	r2, #0
    ee20:	005b      	lsls	r3, r3, #1
    ee22:	54e2      	strb	r2, [r4, r3]
    ee24:	4b0e      	ldr	r3, [pc, #56]	; (ee60 <LORAWAN_JoinReqHandler+0x98>)
    ee26:	4798      	blx	r3
    ee28:	4b0e      	ldr	r3, [pc, #56]	; (ee64 <LORAWAN_JoinReqHandler+0x9c>)
    ee2a:	7028      	strb	r0, [r5, #0]
    ee2c:	606b      	str	r3, [r5, #4]
    ee2e:	0028      	movs	r0, r5
    ee30:	4b0d      	ldr	r3, [pc, #52]	; (ee68 <LORAWAN_JoinReqHandler+0xa0>)
    ee32:	4798      	blx	r3
    ee34:	2800      	cmp	r0, #0
    ee36:	d1dc      	bne.n	edf2 <LORAWAN_JoinReqHandler+0x2a>
    ee38:	220e      	movs	r2, #14
    ee3a:	3450      	adds	r4, #80	; 0x50
    ee3c:	7823      	ldrb	r3, [r4, #0]
    ee3e:	4393      	bics	r3, r2
    ee40:	001a      	movs	r2, r3
    ee42:	2302      	movs	r3, #2
    ee44:	4313      	orrs	r3, r2
    ee46:	7023      	strb	r3, [r4, #0]
    ee48:	e7d5      	b.n	edf6 <LORAWAN_JoinReqHandler+0x2e>
    ee4a:	46c0      	nop			; (mov r8, r8)
    ee4c:	20001908 	.word	0x20001908
    ee50:	00008b79 	.word	0x00008b79
    ee54:	0000b715 	.word	0x0000b715
    ee58:	0000bc55 	.word	0x0000bc55
    ee5c:	00010351 	.word	0x00010351
    ee60:	0000bacd 	.word	0x0000bacd
    ee64:	20001a35 	.word	0x20001a35
    ee68:	0000f971 	.word	0x0000f971

0000ee6c <LORAWAN_RxHandler>:
    ee6c:	b513      	push	{r0, r1, r4, lr}
    ee6e:	4b0c      	ldr	r3, [pc, #48]	; (eea0 <LORAWAN_RxHandler+0x34>)
    ee70:	781b      	ldrb	r3, [r3, #0]
    ee72:	2b08      	cmp	r3, #8
    ee74:	d011      	beq.n	ee9a <LORAWAN_RxHandler+0x2e>
    ee76:	2b10      	cmp	r3, #16
    ee78:	d001      	beq.n	ee7e <LORAWAN_RxHandler+0x12>
    ee7a:	2b01      	cmp	r3, #1
    ee7c:	d10b      	bne.n	ee96 <LORAWAN_RxHandler+0x2a>
    ee7e:	466b      	mov	r3, sp
    ee80:	1c9c      	adds	r4, r3, #2
    ee82:	0021      	movs	r1, r4
    ee84:	a801      	add	r0, sp, #4
    ee86:	4b07      	ldr	r3, [pc, #28]	; (eea4 <LORAWAN_RxHandler+0x38>)
    ee88:	4798      	blx	r3
    ee8a:	9801      	ldr	r0, [sp, #4]
    ee8c:	2800      	cmp	r0, #0
    ee8e:	d002      	beq.n	ee96 <LORAWAN_RxHandler+0x2a>
    ee90:	7821      	ldrb	r1, [r4, #0]
    ee92:	4b05      	ldr	r3, [pc, #20]	; (eea8 <LORAWAN_RxHandler+0x3c>)
    ee94:	4798      	blx	r3
    ee96:	2000      	movs	r0, #0
    ee98:	bd16      	pop	{r1, r2, r4, pc}
    ee9a:	4b04      	ldr	r3, [pc, #16]	; (eeac <LORAWAN_RxHandler+0x40>)
    ee9c:	4798      	blx	r3
    ee9e:	e7fa      	b.n	ee96 <LORAWAN_RxHandler+0x2a>
    eea0:	20001a34 	.word	0x20001a34
    eea4:	0000fb45 	.word	0x0000fb45
    eea8:	0000d5e1 	.word	0x0000d5e1
    eeac:	0000cf49 	.word	0x0000cf49

0000eeb0 <LORAWAN_PostTask>:
    eeb0:	b510      	push	{r4, lr}
    eeb2:	4b08      	ldr	r3, [pc, #32]	; (eed4 <LORAWAN_PostTask+0x24>)
    eeb4:	0004      	movs	r4, r0
    eeb6:	4798      	blx	r3
    eeb8:	2201      	movs	r2, #1
    eeba:	40a2      	lsls	r2, r4
    eebc:	4906      	ldr	r1, [pc, #24]	; (eed8 <LORAWAN_PostTask+0x28>)
    eebe:	780b      	ldrb	r3, [r1, #0]
    eec0:	4313      	orrs	r3, r2
    eec2:	b2db      	uxtb	r3, r3
    eec4:	700b      	strb	r3, [r1, #0]
    eec6:	4b05      	ldr	r3, [pc, #20]	; (eedc <LORAWAN_PostTask+0x2c>)
    eec8:	4798      	blx	r3
    eeca:	2004      	movs	r0, #4
    eecc:	4b04      	ldr	r3, [pc, #16]	; (eee0 <LORAWAN_PostTask+0x30>)
    eece:	4798      	blx	r3
    eed0:	bd10      	pop	{r4, pc}
    eed2:	46c0      	nop			; (mov r8, r8)
    eed4:	00004245 	.word	0x00004245
    eed8:	20000f34 	.word	0x20000f34
    eedc:	00004251 	.word	0x00004251
    eee0:	00009f19 	.word	0x00009f19

0000eee4 <LORAWAN_TaskHandler>:
    eee4:	b570      	push	{r4, r5, r6, lr}
    eee6:	2601      	movs	r6, #1
    eee8:	4d0e      	ldr	r5, [pc, #56]	; (ef24 <LORAWAN_TaskHandler+0x40>)
    eeea:	e015      	b.n	ef18 <LORAWAN_TaskHandler+0x34>
    eeec:	2400      	movs	r4, #0
    eeee:	782b      	ldrb	r3, [r5, #0]
    eef0:	4123      	asrs	r3, r4
    eef2:	4233      	tst	r3, r6
    eef4:	d00d      	beq.n	ef12 <LORAWAN_TaskHandler+0x2e>
    eef6:	4b0c      	ldr	r3, [pc, #48]	; (ef28 <LORAWAN_TaskHandler+0x44>)
    eef8:	4798      	blx	r3
    eefa:	0032      	movs	r2, r6
    eefc:	40a2      	lsls	r2, r4
    eefe:	782b      	ldrb	r3, [r5, #0]
    ef00:	00a4      	lsls	r4, r4, #2
    ef02:	4393      	bics	r3, r2
    ef04:	702b      	strb	r3, [r5, #0]
    ef06:	4b09      	ldr	r3, [pc, #36]	; (ef2c <LORAWAN_TaskHandler+0x48>)
    ef08:	4798      	blx	r3
    ef0a:	4b09      	ldr	r3, [pc, #36]	; (ef30 <LORAWAN_TaskHandler+0x4c>)
    ef0c:	58e3      	ldr	r3, [r4, r3]
    ef0e:	4798      	blx	r3
    ef10:	e7ea      	b.n	eee8 <LORAWAN_TaskHandler+0x4>
    ef12:	3401      	adds	r4, #1
    ef14:	2c03      	cmp	r4, #3
    ef16:	d1ea      	bne.n	eeee <LORAWAN_TaskHandler+0xa>
    ef18:	7828      	ldrb	r0, [r5, #0]
    ef1a:	b2c0      	uxtb	r0, r0
    ef1c:	2800      	cmp	r0, #0
    ef1e:	d1e5      	bne.n	eeec <LORAWAN_TaskHandler+0x8>
    ef20:	bd70      	pop	{r4, r5, r6, pc}
    ef22:	46c0      	nop			; (mov r8, r8)
    ef24:	20000f34 	.word	0x20000f34
    ef28:	00004245 	.word	0x00004245
    ef2c:	00004251 	.word	0x00004251
    ef30:	0001ae60 	.word	0x0001ae60

0000ef34 <RADIO_GetAttr>:
    ef34:	b510      	push	{r4, lr}
    ef36:	000b      	movs	r3, r1
    ef38:	281f      	cmp	r0, #31
    ef3a:	d900      	bls.n	ef3e <RADIO_GetAttr+0xa>
    ef3c:	e067      	b.n	f00e <RADIO_GetAttr+0xda>
    ef3e:	f001 fd29 	bl	10994 <__gnu_thumb1_case_uqi>
    ef42:	1410      	.short	0x1410
    ef44:	66201c19 	.word	0x66201c19
    ef48:	312e2a27 	.word	0x312e2a27
    ef4c:	3d3a3734 	.word	0x3d3a3734
    ef50:	46434054 	.word	0x46434054
    ef54:	66245149 	.word	0x66245149
    ef58:	66666659 	.word	0x66666659
    ef5c:	5c666617 	.word	0x5c666617
    ef60:	6360      	.short	0x6360
    ef62:	4a2c      	ldr	r2, [pc, #176]	; (f014 <RADIO_GetAttr+0xe0>)
    ef64:	7e12      	ldrb	r2, [r2, #24]
    ef66:	701a      	strb	r2, [r3, #0]
    ef68:	e002      	b.n	ef70 <RADIO_GetAttr+0x3c>
    ef6a:	4a2a      	ldr	r2, [pc, #168]	; (f014 <RADIO_GetAttr+0xe0>)
    ef6c:	6812      	ldr	r2, [r2, #0]
    ef6e:	601a      	str	r2, [r3, #0]
    ef70:	2000      	movs	r0, #0
    ef72:	bd10      	pop	{r4, pc}
    ef74:	4a27      	ldr	r2, [pc, #156]	; (f014 <RADIO_GetAttr+0xe0>)
    ef76:	6852      	ldr	r2, [r2, #4]
    ef78:	e7f9      	b.n	ef6e <RADIO_GetAttr+0x3a>
    ef7a:	4a26      	ldr	r2, [pc, #152]	; (f014 <RADIO_GetAttr+0xe0>)
    ef7c:	8a92      	ldrh	r2, [r2, #20]
    ef7e:	801a      	strh	r2, [r3, #0]
    ef80:	e7f6      	b.n	ef70 <RADIO_GetAttr+0x3c>
    ef82:	4a24      	ldr	r2, [pc, #144]	; (f014 <RADIO_GetAttr+0xe0>)
    ef84:	3203      	adds	r2, #3
    ef86:	7fd2      	ldrb	r2, [r2, #31]
    ef88:	e7ed      	b.n	ef66 <RADIO_GetAttr+0x32>
    ef8a:	4a22      	ldr	r2, [pc, #136]	; (f014 <RADIO_GetAttr+0xe0>)
    ef8c:	3204      	adds	r2, #4
    ef8e:	e7fa      	b.n	ef86 <RADIO_GetAttr+0x52>
    ef90:	4a20      	ldr	r2, [pc, #128]	; (f014 <RADIO_GetAttr+0xe0>)
    ef92:	3206      	adds	r2, #6
    ef94:	e7f7      	b.n	ef86 <RADIO_GetAttr+0x52>
    ef96:	4a1f      	ldr	r2, [pc, #124]	; (f014 <RADIO_GetAttr+0xe0>)
    ef98:	3236      	adds	r2, #54	; 0x36
    ef9a:	7812      	ldrb	r2, [r2, #0]
    ef9c:	e7e3      	b.n	ef66 <RADIO_GetAttr+0x32>
    ef9e:	4a1d      	ldr	r2, [pc, #116]	; (f014 <RADIO_GetAttr+0xe0>)
    efa0:	3205      	adds	r2, #5
    efa2:	e7f0      	b.n	ef86 <RADIO_GetAttr+0x52>
    efa4:	4a1b      	ldr	r2, [pc, #108]	; (f014 <RADIO_GetAttr+0xe0>)
    efa6:	3234      	adds	r2, #52	; 0x34
    efa8:	e7f7      	b.n	ef9a <RADIO_GetAttr+0x66>
    efaa:	4a1a      	ldr	r2, [pc, #104]	; (f014 <RADIO_GetAttr+0xe0>)
    efac:	8ad2      	ldrh	r2, [r2, #22]
    efae:	e7e6      	b.n	ef7e <RADIO_GetAttr+0x4a>
    efb0:	4a18      	ldr	r2, [pc, #96]	; (f014 <RADIO_GetAttr+0xe0>)
    efb2:	3233      	adds	r2, #51	; 0x33
    efb4:	e7f1      	b.n	ef9a <RADIO_GetAttr+0x66>
    efb6:	4a17      	ldr	r2, [pc, #92]	; (f014 <RADIO_GetAttr+0xe0>)
    efb8:	68d2      	ldr	r2, [r2, #12]
    efba:	e7d8      	b.n	ef6e <RADIO_GetAttr+0x3a>
    efbc:	4a15      	ldr	r2, [pc, #84]	; (f014 <RADIO_GetAttr+0xe0>)
    efbe:	6892      	ldr	r2, [r2, #8]
    efc0:	e7d5      	b.n	ef6e <RADIO_GetAttr+0x3a>
    efc2:	4a14      	ldr	r2, [pc, #80]	; (f014 <RADIO_GetAttr+0xe0>)
    efc4:	3237      	adds	r2, #55	; 0x37
    efc6:	e7e8      	b.n	ef9a <RADIO_GetAttr+0x66>
    efc8:	4a12      	ldr	r2, [pc, #72]	; (f014 <RADIO_GetAttr+0xe0>)
    efca:	3238      	adds	r2, #56	; 0x38
    efcc:	e7e5      	b.n	ef9a <RADIO_GetAttr+0x66>
    efce:	4a11      	ldr	r2, [pc, #68]	; (f014 <RADIO_GetAttr+0xe0>)
    efd0:	3239      	adds	r2, #57	; 0x39
    efd2:	e7e2      	b.n	ef9a <RADIO_GetAttr+0x66>
    efd4:	4a0f      	ldr	r2, [pc, #60]	; (f014 <RADIO_GetAttr+0xe0>)
    efd6:	4910      	ldr	r1, [pc, #64]	; (f018 <RADIO_GetAttr+0xe4>)
    efd8:	3202      	adds	r2, #2
    efda:	7fd2      	ldrb	r2, [r2, #31]
    efdc:	0018      	movs	r0, r3
    efde:	4b0f      	ldr	r3, [pc, #60]	; (f01c <RADIO_GetAttr+0xe8>)
    efe0:	4798      	blx	r3
    efe2:	e7c5      	b.n	ef70 <RADIO_GetAttr+0x3c>
    efe4:	4a0b      	ldr	r2, [pc, #44]	; (f014 <RADIO_GetAttr+0xe0>)
    efe6:	3202      	adds	r2, #2
    efe8:	e7cd      	b.n	ef86 <RADIO_GetAttr+0x52>
    efea:	4a0a      	ldr	r2, [pc, #40]	; (f014 <RADIO_GetAttr+0xe0>)
    efec:	3232      	adds	r2, #50	; 0x32
    efee:	7812      	ldrb	r2, [r2, #0]
    eff0:	b252      	sxtb	r2, r2
    eff2:	e7b8      	b.n	ef66 <RADIO_GetAttr+0x32>
    eff4:	4a07      	ldr	r2, [pc, #28]	; (f014 <RADIO_GetAttr+0xe0>)
    eff6:	3235      	adds	r2, #53	; 0x35
    eff8:	e7cf      	b.n	ef9a <RADIO_GetAttr+0x66>
    effa:	4906      	ldr	r1, [pc, #24]	; (f014 <RADIO_GetAttr+0xe0>)
    effc:	2206      	movs	r2, #6
    effe:	313c      	adds	r1, #60	; 0x3c
    f000:	e7ec      	b.n	efdc <RADIO_GetAttr+0xa8>
    f002:	4a04      	ldr	r2, [pc, #16]	; (f014 <RADIO_GetAttr+0xe0>)
    f004:	3254      	adds	r2, #84	; 0x54
    f006:	e7c8      	b.n	ef9a <RADIO_GetAttr+0x66>
    f008:	4a02      	ldr	r2, [pc, #8]	; (f014 <RADIO_GetAttr+0xe0>)
    f00a:	3256      	adds	r2, #86	; 0x56
    f00c:	e7ef      	b.n	efee <RADIO_GetAttr+0xba>
    f00e:	2005      	movs	r0, #5
    f010:	e7af      	b.n	ef72 <RADIO_GetAttr+0x3e>
    f012:	46c0      	nop			; (mov r8, r8)
    f014:	20001728 	.word	0x20001728
    f018:	20001741 	.word	0x20001741
    f01c:	00013ba5 	.word	0x00013ba5

0000f020 <RADIO_SetAttr>:
    f020:	b5f0      	push	{r4, r5, r6, r7, lr}
    f022:	4b77      	ldr	r3, [pc, #476]	; (f200 <RADIO_SetAttr+0x1e0>)
    f024:	b085      	sub	sp, #20
    f026:	0006      	movs	r6, r0
    f028:	000d      	movs	r5, r1
    f02a:	4798      	blx	r3
    f02c:	2404      	movs	r4, #4
    f02e:	2801      	cmp	r0, #1
    f030:	d11a      	bne.n	f068 <RADIO_SetAttr+0x48>
    f032:	2e1d      	cmp	r6, #29
    f034:	d900      	bls.n	f038 <RADIO_SetAttr+0x18>
    f036:	e0e0      	b.n	f1fa <RADIO_SetAttr+0x1da>
    f038:	0030      	movs	r0, r6
    f03a:	f001 fcab 	bl	10994 <__gnu_thumb1_case_uqi>
    f03e:	514d      	.short	0x514d
    f040:	de6d6965 	.word	0xde6d6965
    f044:	8f8b8179 	.word	0x8f8b8179
    f048:	a7a49b97 	.word	0xa7a49b97
    f04c:	bcb3abde 	.word	0xbcb3abde
    f050:	de72cdc5 	.word	0xde72cdc5
    f054:	dededed5 	.word	0xdededed5
    f058:	18dede0f 	.word	0x18dede0f
    f05c:	2403      	movs	r4, #3
    f05e:	2d00      	cmp	r5, #0
    f060:	d002      	beq.n	f068 <RADIO_SetAttr+0x48>
    f062:	4b68      	ldr	r3, [pc, #416]	; (f204 <RADIO_SetAttr+0x1e4>)
    f064:	611d      	str	r5, [r3, #16]
    f066:	2400      	movs	r4, #0
    f068:	0020      	movs	r0, r4
    f06a:	b005      	add	sp, #20
    f06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f06e:	796e      	ldrb	r6, [r5, #5]
    f070:	2e00      	cmp	r6, #0
    f072:	d109      	bne.n	f088 <RADIO_SetAttr+0x68>
    f074:	4b63      	ldr	r3, [pc, #396]	; (f204 <RADIO_SetAttr+0x1e4>)
    f076:	001a      	movs	r2, r3
    f078:	649e      	str	r6, [r3, #72]	; 0x48
    f07a:	879e      	strh	r6, [r3, #60]	; 0x3c
    f07c:	87de      	strh	r6, [r3, #62]	; 0x3e
    f07e:	3240      	adds	r2, #64	; 0x40
    f080:	3341      	adds	r3, #65	; 0x41
    f082:	7016      	strb	r6, [r2, #0]
    f084:	701e      	strb	r6, [r3, #0]
    f086:	e7ee      	b.n	f066 <RADIO_SetAttr+0x46>
    f088:	882b      	ldrh	r3, [r5, #0]
    f08a:	2403      	movs	r4, #3
    f08c:	9301      	str	r3, [sp, #4]
    f08e:	2b00      	cmp	r3, #0
    f090:	d0ea      	beq.n	f068 <RADIO_SetAttr+0x48>
    f092:	792f      	ldrb	r7, [r5, #4]
    f094:	2f00      	cmp	r7, #0
    f096:	d0e7      	beq.n	f068 <RADIO_SetAttr+0x48>
    f098:	20fa      	movs	r0, #250	; 0xfa
    f09a:	0080      	lsls	r0, r0, #2
    f09c:	0039      	movs	r1, r7
    f09e:	4358      	muls	r0, r3
    f0a0:	4b59      	ldr	r3, [pc, #356]	; (f208 <RADIO_SetAttr+0x1e8>)
    f0a2:	4798      	blx	r3
    f0a4:	4b59      	ldr	r3, [pc, #356]	; (f20c <RADIO_SetAttr+0x1ec>)
    f0a6:	4798      	blx	r3
    f0a8:	4959      	ldr	r1, [pc, #356]	; (f210 <RADIO_SetAttr+0x1f0>)
    f0aa:	9002      	str	r0, [sp, #8]
    f0ac:	4b59      	ldr	r3, [pc, #356]	; (f214 <RADIO_SetAttr+0x1f4>)
    f0ae:	4798      	blx	r3
    f0b0:	9003      	str	r0, [sp, #12]
    f0b2:	2800      	cmp	r0, #0
    f0b4:	d1d8      	bne.n	f068 <RADIO_SetAttr+0x48>
    f0b6:	2302      	movs	r3, #2
    f0b8:	5eed      	ldrsh	r5, [r5, r3]
    f0ba:	9802      	ldr	r0, [sp, #8]
    f0bc:	4b56      	ldr	r3, [pc, #344]	; (f218 <RADIO_SetAttr+0x1f8>)
    f0be:	4798      	blx	r3
    f0c0:	466b      	mov	r3, sp
    f0c2:	4c50      	ldr	r4, [pc, #320]	; (f204 <RADIO_SetAttr+0x1e4>)
    f0c4:	889b      	ldrh	r3, [r3, #4]
    f0c6:	64a0      	str	r0, [r4, #72]	; 0x48
    f0c8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    f0ca:	0023      	movs	r3, r4
    f0cc:	87e5      	strh	r5, [r4, #62]	; 0x3e
    f0ce:	3340      	adds	r3, #64	; 0x40
    f0d0:	3441      	adds	r4, #65	; 0x41
    f0d2:	701f      	strb	r7, [r3, #0]
    f0d4:	7026      	strb	r6, [r4, #0]
    f0d6:	e7c6      	b.n	f066 <RADIO_SetAttr+0x46>
    f0d8:	782a      	ldrb	r2, [r5, #0]
    f0da:	4b4a      	ldr	r3, [pc, #296]	; (f204 <RADIO_SetAttr+0x1e4>)
    f0dc:	761a      	strb	r2, [r3, #24]
    f0de:	e7c2      	b.n	f066 <RADIO_SetAttr+0x46>
    f0e0:	4a4e      	ldr	r2, [pc, #312]	; (f21c <RADIO_SetAttr+0x1fc>)
    f0e2:	682b      	ldr	r3, [r5, #0]
    f0e4:	1899      	adds	r1, r3, r2
    f0e6:	4a4e      	ldr	r2, [pc, #312]	; (f220 <RADIO_SetAttr+0x200>)
    f0e8:	4291      	cmp	r1, r2
    f0ea:	d90a      	bls.n	f102 <RADIO_SetAttr+0xe2>
    f0ec:	4a4d      	ldr	r2, [pc, #308]	; (f224 <RADIO_SetAttr+0x204>)
    f0ee:	494e      	ldr	r1, [pc, #312]	; (f228 <RADIO_SetAttr+0x208>)
    f0f0:	189a      	adds	r2, r3, r2
    f0f2:	428a      	cmp	r2, r1
    f0f4:	d905      	bls.n	f102 <RADIO_SetAttr+0xe2>
    f0f6:	4a4d      	ldr	r2, [pc, #308]	; (f22c <RADIO_SetAttr+0x20c>)
    f0f8:	494d      	ldr	r1, [pc, #308]	; (f230 <RADIO_SetAttr+0x210>)
    f0fa:	189a      	adds	r2, r3, r2
    f0fc:	2405      	movs	r4, #5
    f0fe:	428a      	cmp	r2, r1
    f100:	d8b2      	bhi.n	f068 <RADIO_SetAttr+0x48>
    f102:	4a40      	ldr	r2, [pc, #256]	; (f204 <RADIO_SetAttr+0x1e4>)
    f104:	6013      	str	r3, [r2, #0]
    f106:	e7ae      	b.n	f066 <RADIO_SetAttr+0x46>
    f108:	682a      	ldr	r2, [r5, #0]
    f10a:	4b3e      	ldr	r3, [pc, #248]	; (f204 <RADIO_SetAttr+0x1e4>)
    f10c:	605a      	str	r2, [r3, #4]
    f10e:	e7aa      	b.n	f066 <RADIO_SetAttr+0x46>
    f110:	882a      	ldrh	r2, [r5, #0]
    f112:	4b3c      	ldr	r3, [pc, #240]	; (f204 <RADIO_SetAttr+0x1e4>)
    f114:	829a      	strh	r2, [r3, #20]
    f116:	e7a6      	b.n	f066 <RADIO_SetAttr+0x46>
    f118:	4b3a      	ldr	r3, [pc, #232]	; (f204 <RADIO_SetAttr+0x1e4>)
    f11a:	782a      	ldrb	r2, [r5, #0]
    f11c:	3303      	adds	r3, #3
    f11e:	77da      	strb	r2, [r3, #31]
    f120:	e7a1      	b.n	f066 <RADIO_SetAttr+0x46>
    f122:	782a      	ldrb	r2, [r5, #0]
    f124:	2405      	movs	r4, #5
    f126:	2a01      	cmp	r2, #1
    f128:	d89e      	bhi.n	f068 <RADIO_SetAttr+0x48>
    f12a:	4b36      	ldr	r3, [pc, #216]	; (f204 <RADIO_SetAttr+0x1e4>)
    f12c:	3304      	adds	r3, #4
    f12e:	e7f6      	b.n	f11e <RADIO_SetAttr+0xfe>
    f130:	782a      	ldrb	r2, [r5, #0]
    f132:	2405      	movs	r4, #5
    f134:	2a01      	cmp	r2, #1
    f136:	d900      	bls.n	f13a <RADIO_SetAttr+0x11a>
    f138:	e796      	b.n	f068 <RADIO_SetAttr+0x48>
    f13a:	4b32      	ldr	r3, [pc, #200]	; (f204 <RADIO_SetAttr+0x1e4>)
    f13c:	3306      	adds	r3, #6
    f13e:	e7ee      	b.n	f11e <RADIO_SetAttr+0xfe>
    f140:	782a      	ldrb	r2, [r5, #0]
    f142:	2405      	movs	r4, #5
    f144:	1fd3      	subs	r3, r2, #7
    f146:	2b02      	cmp	r3, #2
    f148:	d900      	bls.n	f14c <RADIO_SetAttr+0x12c>
    f14a:	e78d      	b.n	f068 <RADIO_SetAttr+0x48>
    f14c:	4b2d      	ldr	r3, [pc, #180]	; (f204 <RADIO_SetAttr+0x1e4>)
    f14e:	3336      	adds	r3, #54	; 0x36
    f150:	701a      	strb	r2, [r3, #0]
    f152:	e788      	b.n	f066 <RADIO_SetAttr+0x46>
    f154:	4b2b      	ldr	r3, [pc, #172]	; (f204 <RADIO_SetAttr+0x1e4>)
    f156:	782a      	ldrb	r2, [r5, #0]
    f158:	3305      	adds	r3, #5
    f15a:	e7e0      	b.n	f11e <RADIO_SetAttr+0xfe>
    f15c:	782a      	ldrb	r2, [r5, #0]
    f15e:	2405      	movs	r4, #5
    f160:	2a01      	cmp	r2, #1
    f162:	d900      	bls.n	f166 <RADIO_SetAttr+0x146>
    f164:	e780      	b.n	f068 <RADIO_SetAttr+0x48>
    f166:	4b27      	ldr	r3, [pc, #156]	; (f204 <RADIO_SetAttr+0x1e4>)
    f168:	3334      	adds	r3, #52	; 0x34
    f16a:	e7f1      	b.n	f150 <RADIO_SetAttr+0x130>
    f16c:	882a      	ldrh	r2, [r5, #0]
    f16e:	4b25      	ldr	r3, [pc, #148]	; (f204 <RADIO_SetAttr+0x1e4>)
    f170:	82da      	strh	r2, [r3, #22]
    f172:	e778      	b.n	f066 <RADIO_SetAttr+0x46>
    f174:	782a      	ldrb	r2, [r5, #0]
    f176:	2405      	movs	r4, #5
    f178:	1e53      	subs	r3, r2, #1
    f17a:	2b03      	cmp	r3, #3
    f17c:	d900      	bls.n	f180 <RADIO_SetAttr+0x160>
    f17e:	e773      	b.n	f068 <RADIO_SetAttr+0x48>
    f180:	4b20      	ldr	r3, [pc, #128]	; (f204 <RADIO_SetAttr+0x1e4>)
    f182:	3333      	adds	r3, #51	; 0x33
    f184:	e7e4      	b.n	f150 <RADIO_SetAttr+0x130>
    f186:	4b1f      	ldr	r3, [pc, #124]	; (f204 <RADIO_SetAttr+0x1e4>)
    f188:	682a      	ldr	r2, [r5, #0]
    f18a:	60da      	str	r2, [r3, #12]
    f18c:	682a      	ldr	r2, [r5, #0]
    f18e:	4b1d      	ldr	r3, [pc, #116]	; (f204 <RADIO_SetAttr+0x1e4>)
    f190:	609a      	str	r2, [r3, #8]
    f192:	e768      	b.n	f066 <RADIO_SetAttr+0x46>
    f194:	782a      	ldrb	r2, [r5, #0]
    f196:	2405      	movs	r4, #5
    f198:	2a03      	cmp	r2, #3
    f19a:	d900      	bls.n	f19e <RADIO_SetAttr+0x17e>
    f19c:	e764      	b.n	f068 <RADIO_SetAttr+0x48>
    f19e:	4b19      	ldr	r3, [pc, #100]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1a0:	3337      	adds	r3, #55	; 0x37
    f1a2:	e7d5      	b.n	f150 <RADIO_SetAttr+0x130>
    f1a4:	782a      	ldrb	r2, [r5, #0]
    f1a6:	2405      	movs	r4, #5
    f1a8:	1e53      	subs	r3, r2, #1
    f1aa:	2b16      	cmp	r3, #22
    f1ac:	d900      	bls.n	f1b0 <RADIO_SetAttr+0x190>
    f1ae:	e75b      	b.n	f068 <RADIO_SetAttr+0x48>
    f1b0:	4b14      	ldr	r3, [pc, #80]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1b2:	3338      	adds	r3, #56	; 0x38
    f1b4:	e7cc      	b.n	f150 <RADIO_SetAttr+0x130>
    f1b6:	782a      	ldrb	r2, [r5, #0]
    f1b8:	2405      	movs	r4, #5
    f1ba:	1e53      	subs	r3, r2, #1
    f1bc:	2b16      	cmp	r3, #22
    f1be:	d900      	bls.n	f1c2 <RADIO_SetAttr+0x1a2>
    f1c0:	e752      	b.n	f068 <RADIO_SetAttr+0x48>
    f1c2:	4b10      	ldr	r3, [pc, #64]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1c4:	3339      	adds	r3, #57	; 0x39
    f1c6:	e7c3      	b.n	f150 <RADIO_SetAttr+0x130>
    f1c8:	4b0e      	ldr	r3, [pc, #56]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1ca:	0029      	movs	r1, r5
    f1cc:	3302      	adds	r3, #2
    f1ce:	7fda      	ldrb	r2, [r3, #31]
    f1d0:	4818      	ldr	r0, [pc, #96]	; (f234 <RADIO_SetAttr+0x214>)
    f1d2:	4b19      	ldr	r3, [pc, #100]	; (f238 <RADIO_SetAttr+0x218>)
    f1d4:	4798      	blx	r3
    f1d6:	e746      	b.n	f066 <RADIO_SetAttr+0x46>
    f1d8:	782b      	ldrb	r3, [r5, #0]
    f1da:	1c1a      	adds	r2, r3, #0
    f1dc:	2b08      	cmp	r3, #8
    f1de:	d900      	bls.n	f1e2 <RADIO_SetAttr+0x1c2>
    f1e0:	2208      	movs	r2, #8
    f1e2:	4b08      	ldr	r3, [pc, #32]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1e4:	3302      	adds	r3, #2
    f1e6:	e79a      	b.n	f11e <RADIO_SetAttr+0xfe>
    f1e8:	2405      	movs	r4, #5
    f1ea:	782a      	ldrb	r2, [r5, #0]
    f1ec:	1fd3      	subs	r3, r2, #7
    f1ee:	42a3      	cmp	r3, r4
    f1f0:	d900      	bls.n	f1f4 <RADIO_SetAttr+0x1d4>
    f1f2:	e739      	b.n	f068 <RADIO_SetAttr+0x48>
    f1f4:	4b03      	ldr	r3, [pc, #12]	; (f204 <RADIO_SetAttr+0x1e4>)
    f1f6:	3335      	adds	r3, #53	; 0x35
    f1f8:	e7aa      	b.n	f150 <RADIO_SetAttr+0x130>
    f1fa:	2405      	movs	r4, #5
    f1fc:	e734      	b.n	f068 <RADIO_SetAttr+0x48>
    f1fe:	46c0      	nop			; (mov r8, r8)
    f200:	0000f955 	.word	0x0000f955
    f204:	20001728 	.word	0x20001728
    f208:	00010ad1 	.word	0x00010ad1
    f20c:	00011c5d 	.word	0x00011c5d
    f210:	43fa0000 	.word	0x43fa0000
    f214:	00010ccd 	.word	0x00010ccd
    f218:	00010db1 	.word	0x00010db1
    f21c:	f7d58bc0 	.word	0xf7d58bc0
    f220:	0243d580 	.word	0x0243d580
    f224:	e78fe580 	.word	0xe78fe580
    f228:	06dac2c0 	.word	0x06dac2c0
    f22c:	cc9eec80 	.word	0xcc9eec80
    f230:	096ae380 	.word	0x096ae380
    f234:	20001741 	.word	0x20001741
    f238:	00013ba5 	.word	0x00013ba5

0000f23c <RADIO_Init>:
    f23c:	b510      	push	{r4, lr}
    f23e:	4b0c      	ldr	r3, [pc, #48]	; (f270 <RADIO_Init+0x34>)
    f240:	4798      	blx	r3
    f242:	4b0c      	ldr	r3, [pc, #48]	; (f274 <RADIO_Init+0x38>)
    f244:	201f      	movs	r0, #31
    f246:	4798      	blx	r3
    f248:	4c0b      	ldr	r4, [pc, #44]	; (f278 <RADIO_Init+0x3c>)
    f24a:	490c      	ldr	r1, [pc, #48]	; (f27c <RADIO_Init+0x40>)
    f24c:	2001      	movs	r0, #1
    f24e:	47a0      	blx	r4
    f250:	490b      	ldr	r1, [pc, #44]	; (f280 <RADIO_Init+0x44>)
    f252:	2002      	movs	r0, #2
    f254:	47a0      	blx	r4
    f256:	490b      	ldr	r1, [pc, #44]	; (f284 <RADIO_Init+0x48>)
    f258:	2004      	movs	r0, #4
    f25a:	47a0      	blx	r4
    f25c:	490a      	ldr	r1, [pc, #40]	; (f288 <RADIO_Init+0x4c>)
    f25e:	2008      	movs	r0, #8
    f260:	47a0      	blx	r4
    f262:	490a      	ldr	r1, [pc, #40]	; (f28c <RADIO_Init+0x50>)
    f264:	2010      	movs	r0, #16
    f266:	47a0      	blx	r4
    f268:	4909      	ldr	r1, [pc, #36]	; (f290 <RADIO_Init+0x54>)
    f26a:	2020      	movs	r0, #32
    f26c:	47a0      	blx	r4
    f26e:	bd10      	pop	{r4, pc}
    f270:	0001015d 	.word	0x0001015d
    f274:	0000f961 	.word	0x0000f961
    f278:	000040b9 	.word	0x000040b9
    f27c:	0000f6ed 	.word	0x0000f6ed
    f280:	0000f765 	.word	0x0000f765
    f284:	0000f7d5 	.word	0x0000f7d5
    f288:	0000f825 	.word	0x0000f825
    f28c:	0000f84d 	.word	0x0000f84d
    f290:	0000f875 	.word	0x0000f875

0000f294 <Radio_WriteFrequency>:
    f294:	b570      	push	{r4, r5, r6, lr}
    f296:	490d      	ldr	r1, [pc, #52]	; (f2cc <Radio_WriteFrequency+0x38>)
    f298:	4d0d      	ldr	r5, [pc, #52]	; (f2d0 <Radio_WriteFrequency+0x3c>)
    f29a:	0006      	movs	r6, r0
    f29c:	47a8      	blx	r5
    f29e:	4b0d      	ldr	r3, [pc, #52]	; (f2d4 <Radio_WriteFrequency+0x40>)
    f2a0:	0004      	movs	r4, r0
    f2a2:	490a      	ldr	r1, [pc, #40]	; (f2cc <Radio_WriteFrequency+0x38>)
    f2a4:	0030      	movs	r0, r6
    f2a6:	4798      	blx	r3
    f2a8:	0208      	lsls	r0, r1, #8
    f2aa:	4908      	ldr	r1, [pc, #32]	; (f2cc <Radio_WriteFrequency+0x38>)
    f2ac:	47a8      	blx	r5
    f2ae:	0224      	lsls	r4, r4, #8
    f2b0:	1904      	adds	r4, r0, r4
    f2b2:	0c21      	lsrs	r1, r4, #16
    f2b4:	4d08      	ldr	r5, [pc, #32]	; (f2d8 <Radio_WriteFrequency+0x44>)
    f2b6:	b2c9      	uxtb	r1, r1
    f2b8:	2006      	movs	r0, #6
    f2ba:	47a8      	blx	r5
    f2bc:	0a21      	lsrs	r1, r4, #8
    f2be:	b2c9      	uxtb	r1, r1
    f2c0:	2007      	movs	r0, #7
    f2c2:	47a8      	blx	r5
    f2c4:	b2e1      	uxtb	r1, r4
    f2c6:	2008      	movs	r0, #8
    f2c8:	47a8      	blx	r5
    f2ca:	bd70      	pop	{r4, r5, r6, pc}
    f2cc:	00003d09 	.word	0x00003d09
    f2d0:	000109bd 	.word	0x000109bd
    f2d4:	00010ac9 	.word	0x00010ac9
    f2d8:	00003fe5 	.word	0x00003fe5

0000f2dc <Radio_WriteConfiguration>:
    f2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2de:	4cb0      	ldr	r4, [pc, #704]	; (f5a0 <Radio_WriteConfiguration+0x2c4>)
    f2e0:	2200      	movs	r2, #0
    f2e2:	0023      	movs	r3, r4
    f2e4:	b085      	sub	sp, #20
    f2e6:	9002      	str	r0, [sp, #8]
    f2e8:	3334      	adds	r3, #52	; 0x34
    f2ea:	0010      	movs	r0, r2
    f2ec:	7819      	ldrb	r1, [r3, #0]
    f2ee:	4bad      	ldr	r3, [pc, #692]	; (f5a4 <Radio_WriteConfiguration+0x2c8>)
    f2f0:	4798      	blx	r3
    f2f2:	4bad      	ldr	r3, [pc, #692]	; (f5a8 <Radio_WriteConfiguration+0x2cc>)
    f2f4:	6820      	ldr	r0, [r4, #0]
    f2f6:	4798      	blx	r3
    f2f8:	1ce3      	adds	r3, r4, #3
    f2fa:	1d62      	adds	r2, r4, #5
    f2fc:	7fdb      	ldrb	r3, [r3, #31]
    f2fe:	7fd2      	ldrb	r2, [r2, #31]
    f300:	b25b      	sxtb	r3, r3
    f302:	4eaa      	ldr	r6, [pc, #680]	; (f5ac <Radio_WriteConfiguration+0x2d0>)
    f304:	4daa      	ldr	r5, [pc, #680]	; (f5b0 <Radio_WriteConfiguration+0x2d4>)
    f306:	2a00      	cmp	r2, #0
    f308:	d000      	beq.n	f30c <Radio_WriteConfiguration+0x30>
    f30a:	e0fc      	b.n	f506 <Radio_WriteConfiguration+0x22a>
    f30c:	1c1f      	adds	r7, r3, #0
    f30e:	2b0f      	cmp	r3, #15
    f310:	dc00      	bgt.n	f314 <Radio_WriteConfiguration+0x38>
    f312:	e0ec      	b.n	f4ee <Radio_WriteConfiguration+0x212>
    f314:	270f      	movs	r7, #15
    f316:	b27b      	sxtb	r3, r7
    f318:	204d      	movs	r0, #77	; 0x4d
    f31a:	9301      	str	r3, [sp, #4]
    f31c:	47b0      	blx	r6
    f31e:	21f8      	movs	r1, #248	; 0xf8
    f320:	4008      	ands	r0, r1
    f322:	39f4      	subs	r1, #244	; 0xf4
    f324:	4301      	orrs	r1, r0
    f326:	204d      	movs	r0, #77	; 0x4d
    f328:	47a8      	blx	r5
    f32a:	b27b      	sxtb	r3, r7
    f32c:	2b00      	cmp	r3, #0
    f32e:	db00      	blt.n	f332 <Radio_WriteConfiguration+0x56>
    f330:	e0e4      	b.n	f4fc <Radio_WriteConfiguration+0x220>
    f332:	3703      	adds	r7, #3
    f334:	b2f9      	uxtb	r1, r7
    f336:	2720      	movs	r7, #32
    f338:	4339      	orrs	r1, r7
    f33a:	2009      	movs	r0, #9
    f33c:	47a8      	blx	r5
    f33e:	0023      	movs	r3, r4
    f340:	3334      	adds	r3, #52	; 0x34
    f342:	781f      	ldrb	r7, [r3, #0]
    f344:	2f01      	cmp	r7, #1
    f346:	d000      	beq.n	f34a <Radio_WriteConfiguration+0x6e>
    f348:	e144      	b.n	f5d4 <Radio_WriteConfiguration+0x2f8>
    f34a:	7e21      	ldrb	r1, [r4, #24]
    f34c:	2039      	movs	r0, #57	; 0x39
    f34e:	47a8      	blx	r5
    f350:	4b98      	ldr	r3, [pc, #608]	; (f5b4 <Radio_WriteConfiguration+0x2d8>)
    f352:	201d      	movs	r0, #29
    f354:	7819      	ldrb	r1, [r3, #0]
    f356:	0023      	movs	r3, r4
    f358:	3333      	adds	r3, #51	; 0x33
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	0109      	lsls	r1, r1, #4
    f35e:	005b      	lsls	r3, r3, #1
    f360:	4319      	orrs	r1, r3
    f362:	1de3      	adds	r3, r4, #7
    f364:	7fdb      	ldrb	r3, [r3, #31]
    f366:	401f      	ands	r7, r3
    f368:	4339      	orrs	r1, r7
    f36a:	b2c9      	uxtb	r1, r1
    f36c:	47a8      	blx	r5
    f36e:	1d23      	adds	r3, r4, #4
    f370:	7fd9      	ldrb	r1, [r3, #31]
    f372:	2304      	movs	r3, #4
    f374:	0089      	lsls	r1, r1, #2
    f376:	4019      	ands	r1, r3
    f378:	0023      	movs	r3, r4
    f37a:	3335      	adds	r3, #53	; 0x35
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	201e      	movs	r0, #30
    f380:	011b      	lsls	r3, r3, #4
    f382:	4319      	orrs	r1, r3
    f384:	9b02      	ldr	r3, [sp, #8]
    f386:	059b      	lsls	r3, r3, #22
    f388:	0f9b      	lsrs	r3, r3, #30
    f38a:	4319      	orrs	r1, r3
    f38c:	b2c9      	uxtb	r1, r1
    f38e:	47a8      	blx	r5
    f390:	2300      	movs	r3, #0
    f392:	8ae1      	ldrh	r1, [r4, #22]
    f394:	4299      	cmp	r1, r3
    f396:	d011      	beq.n	f3bc <Radio_WriteConfiguration+0xe0>
    f398:	4a86      	ldr	r2, [pc, #536]	; (f5b4 <Radio_WriteConfiguration+0x2d8>)
    f39a:	7812      	ldrb	r2, [r2, #0]
    f39c:	2a08      	cmp	r2, #8
    f39e:	d100      	bne.n	f3a2 <Radio_WriteConfiguration+0xc6>
    f3a0:	e0e4      	b.n	f56c <Radio_WriteConfiguration+0x290>
    f3a2:	2a09      	cmp	r2, #9
    f3a4:	d100      	bne.n	f3a8 <Radio_WriteConfiguration+0xcc>
    f3a6:	e0e3      	b.n	f570 <Radio_WriteConfiguration+0x294>
    f3a8:	2a07      	cmp	r2, #7
    f3aa:	d000      	beq.n	f3ae <Radio_WriteConfiguration+0xd2>
    f3ac:	e0e3      	b.n	f576 <Radio_WriteConfiguration+0x29a>
    f3ae:	337d      	adds	r3, #125	; 0x7d
    f3b0:	4359      	muls	r1, r3
    f3b2:	0023      	movs	r3, r4
    f3b4:	3335      	adds	r3, #53	; 0x35
    f3b6:	781b      	ldrb	r3, [r3, #0]
    f3b8:	40d9      	lsrs	r1, r3
    f3ba:	000b      	movs	r3, r1
    f3bc:	b2d9      	uxtb	r1, r3
    f3be:	2024      	movs	r0, #36	; 0x24
    f3c0:	4d7b      	ldr	r5, [pc, #492]	; (f5b0 <Radio_WriteConfiguration+0x2d4>)
    f3c2:	47a8      	blx	r5
    f3c4:	466b      	mov	r3, sp
    f3c6:	201f      	movs	r0, #31
    f3c8:	7a19      	ldrb	r1, [r3, #8]
    f3ca:	47a8      	blx	r5
    f3cc:	2026      	movs	r0, #38	; 0x26
    f3ce:	47b0      	blx	r6
    f3d0:	0023      	movs	r3, r4
    f3d2:	3335      	adds	r3, #53	; 0x35
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	2b0c      	cmp	r3, #12
    f3d8:	d105      	bne.n	f3e6 <Radio_WriteConfiguration+0x10a>
    f3da:	0023      	movs	r3, r4
    f3dc:	3336      	adds	r3, #54	; 0x36
    f3de:	781b      	ldrb	r3, [r3, #0]
    f3e0:	3b07      	subs	r3, #7
    f3e2:	2b01      	cmp	r3, #1
    f3e4:	d906      	bls.n	f3f4 <Radio_WriteConfiguration+0x118>
    f3e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f3e8:	4b73      	ldr	r3, [pc, #460]	; (f5b8 <Radio_WriteConfiguration+0x2dc>)
    f3ea:	4013      	ands	r3, r2
    f3ec:	4a73      	ldr	r2, [pc, #460]	; (f5bc <Radio_WriteConfiguration+0x2e0>)
    f3ee:	4293      	cmp	r3, r2
    f3f0:	d000      	beq.n	f3f4 <Radio_WriteConfiguration+0x118>
    f3f2:	e0c2      	b.n	f57a <Radio_WriteConfiguration+0x29e>
    f3f4:	2108      	movs	r1, #8
    f3f6:	4308      	orrs	r0, r1
    f3f8:	b2c0      	uxtb	r0, r0
    f3fa:	2104      	movs	r1, #4
    f3fc:	4301      	orrs	r1, r0
    f3fe:	2026      	movs	r0, #38	; 0x26
    f400:	47a8      	blx	r5
    f402:	2031      	movs	r0, #49	; 0x31
    f404:	47b0      	blx	r6
    f406:	21f8      	movs	r1, #248	; 0xf8
    f408:	4008      	ands	r0, r1
    f40a:	39f5      	subs	r1, #245	; 0xf5
    f40c:	4301      	orrs	r1, r0
    f40e:	2031      	movs	r0, #49	; 0x31
    f410:	47a8      	blx	r5
    f412:	210a      	movs	r1, #10
    f414:	2037      	movs	r0, #55	; 0x37
    f416:	47a8      	blx	r5
    f418:	0023      	movs	r3, r4
    f41a:	3331      	adds	r3, #49	; 0x31
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2b12      	cmp	r3, #18
    f420:	d11e      	bne.n	f460 <Radio_WriteConfiguration+0x184>
    f422:	0023      	movs	r3, r4
    f424:	3336      	adds	r3, #54	; 0x36
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	3b07      	subs	r3, #7
    f42a:	2b01      	cmp	r3, #1
    f42c:	d80b      	bhi.n	f446 <Radio_WriteConfiguration+0x16a>
    f42e:	2031      	movs	r0, #49	; 0x31
    f430:	47b0      	blx	r6
    f432:	217f      	movs	r1, #127	; 0x7f
    f434:	4001      	ands	r1, r0
    f436:	2031      	movs	r0, #49	; 0x31
    f438:	47a8      	blx	r5
    f43a:	2140      	movs	r1, #64	; 0x40
    f43c:	202f      	movs	r0, #47	; 0x2f
    f43e:	47a8      	blx	r5
    f440:	2100      	movs	r1, #0
    f442:	2030      	movs	r0, #48	; 0x30
    f444:	47a8      	blx	r5
    f446:	0023      	movs	r3, r4
    f448:	3336      	adds	r3, #54	; 0x36
    f44a:	781b      	ldrb	r3, [r3, #0]
    f44c:	2b09      	cmp	r3, #9
    f44e:	d107      	bne.n	f460 <Radio_WriteConfiguration+0x184>
    f450:	2031      	movs	r0, #49	; 0x31
    f452:	47b0      	blx	r6
    f454:	2180      	movs	r1, #128	; 0x80
    f456:	4249      	negs	r1, r1
    f458:	4301      	orrs	r1, r0
    f45a:	b2c9      	uxtb	r1, r1
    f45c:	2031      	movs	r0, #49	; 0x31
    f45e:	47a8      	blx	r5
    f460:	2033      	movs	r0, #51	; 0x33
    f462:	47b0      	blx	r6
    f464:	1da3      	adds	r3, r4, #6
    f466:	7fd9      	ldrb	r1, [r3, #31]
    f468:	2340      	movs	r3, #64	; 0x40
    f46a:	0189      	lsls	r1, r1, #6
    f46c:	4398      	bics	r0, r3
    f46e:	4019      	ands	r1, r3
    f470:	4301      	orrs	r1, r0
    f472:	b2c9      	uxtb	r1, r1
    f474:	2033      	movs	r0, #51	; 0x33
    f476:	47a8      	blx	r5
    f478:	8aa1      	ldrh	r1, [r4, #20]
    f47a:	2020      	movs	r0, #32
    f47c:	0a09      	lsrs	r1, r1, #8
    f47e:	47a8      	blx	r5
    f480:	7d21      	ldrb	r1, [r4, #20]
    f482:	2021      	movs	r0, #33	; 0x21
    f484:	47a8      	blx	r5
    f486:	2100      	movs	r1, #0
    f488:	200d      	movs	r0, #13
    f48a:	47a8      	blx	r5
    f48c:	2100      	movs	r1, #0
    f48e:	200e      	movs	r0, #14
    f490:	47a8      	blx	r5
    f492:	2100      	movs	r1, #0
    f494:	200f      	movs	r0, #15
    f496:	47a8      	blx	r5
    f498:	0023      	movs	r3, r4
    f49a:	3331      	adds	r3, #49	; 0x31
    f49c:	781b      	ldrb	r3, [r3, #0]
    f49e:	2b12      	cmp	r3, #18
    f4a0:	d120      	bne.n	f4e4 <Radio_WriteConfiguration+0x208>
    f4a2:	0023      	movs	r3, r4
    f4a4:	3336      	adds	r3, #54	; 0x36
    f4a6:	781b      	ldrb	r3, [r3, #0]
    f4a8:	2b09      	cmp	r3, #9
    f4aa:	d000      	beq.n	f4ae <Radio_WriteConfiguration+0x1d2>
    f4ac:	e072      	b.n	f594 <Radio_WriteConfiguration+0x2b8>
    f4ae:	4a44      	ldr	r2, [pc, #272]	; (f5c0 <Radio_WriteConfiguration+0x2e4>)
    f4b0:	6823      	ldr	r3, [r4, #0]
    f4b2:	1899      	adds	r1, r3, r2
    f4b4:	4a43      	ldr	r2, [pc, #268]	; (f5c4 <Radio_WriteConfiguration+0x2e8>)
    f4b6:	4291      	cmp	r1, r2
    f4b8:	d862      	bhi.n	f580 <Radio_WriteConfiguration+0x2a4>
    f4ba:	2102      	movs	r1, #2
    f4bc:	2036      	movs	r0, #54	; 0x36
    f4be:	47a8      	blx	r5
    f4c0:	2164      	movs	r1, #100	; 0x64
    f4c2:	203a      	movs	r0, #58	; 0x3a
    f4c4:	47a8      	blx	r5
    f4c6:	0023      	movs	r3, r4
    f4c8:	3336      	adds	r3, #54	; 0x36
    f4ca:	781b      	ldrb	r3, [r3, #0]
    f4cc:	2165      	movs	r1, #101	; 0x65
    f4ce:	203a      	movs	r0, #58	; 0x3a
    f4d0:	2b09      	cmp	r3, #9
    f4d2:	d162      	bne.n	f59a <Radio_WriteConfiguration+0x2be>
    f4d4:	3406      	adds	r4, #6
    f4d6:	7fe3      	ldrb	r3, [r4, #31]
    f4d8:	2b01      	cmp	r3, #1
    f4da:	d15e      	bne.n	f59a <Radio_WriteConfiguration+0x2be>
    f4dc:	47a8      	blx	r5
    f4de:	2119      	movs	r1, #25
    f4e0:	203b      	movs	r0, #59	; 0x3b
    f4e2:	47a8      	blx	r5
    f4e4:	21ff      	movs	r1, #255	; 0xff
    f4e6:	2012      	movs	r0, #18
    f4e8:	47a8      	blx	r5
    f4ea:	b005      	add	sp, #20
    f4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4ee:	b25b      	sxtb	r3, r3
    f4f0:	3303      	adds	r3, #3
    f4f2:	db00      	blt.n	f4f6 <Radio_WriteConfiguration+0x21a>
    f4f4:	e70f      	b.n	f316 <Radio_WriteConfiguration+0x3a>
    f4f6:	4b34      	ldr	r3, [pc, #208]	; (f5c8 <Radio_WriteConfiguration+0x2ec>)
    f4f8:	781f      	ldrb	r7, [r3, #0]
    f4fa:	e70c      	b.n	f316 <Radio_WriteConfiguration+0x3a>
    f4fc:	2170      	movs	r1, #112	; 0x70
    f4fe:	9b01      	ldr	r3, [sp, #4]
    f500:	4319      	orrs	r1, r3
    f502:	b2c9      	uxtb	r1, r1
    f504:	e719      	b.n	f33a <Radio_WriteConfiguration+0x5e>
    f506:	2b01      	cmp	r3, #1
    f508:	dd07      	ble.n	f51a <Radio_WriteConfiguration+0x23e>
    f50a:	2714      	movs	r7, #20
    f50c:	2b13      	cmp	r3, #19
    f50e:	dc06      	bgt.n	f51e <Radio_WriteConfiguration+0x242>
    f510:	1c1f      	adds	r7, r3, #0
    f512:	2b11      	cmp	r3, #17
    f514:	dd02      	ble.n	f51c <Radio_WriteConfiguration+0x240>
    f516:	2711      	movs	r7, #17
    f518:	e000      	b.n	f51c <Radio_WriteConfiguration+0x240>
    f51a:	2702      	movs	r7, #2
    f51c:	b27f      	sxtb	r7, r7
    f51e:	200b      	movs	r0, #11
    f520:	47b0      	blx	r6
    f522:	9003      	str	r0, [sp, #12]
    f524:	204d      	movs	r0, #77	; 0x4d
    f526:	47b0      	blx	r6
    f528:	2307      	movs	r3, #7
    f52a:	4398      	bics	r0, r3
    f52c:	b2c1      	uxtb	r1, r0
    f52e:	2f14      	cmp	r7, #20
    f530:	d112      	bne.n	f558 <Radio_WriteConfiguration+0x27c>
    f532:	4319      	orrs	r1, r3
    f534:	9b03      	ldr	r3, [sp, #12]
    f536:	37cb      	adds	r7, #203	; 0xcb
    f538:	403b      	ands	r3, r7
    f53a:	001f      	movs	r7, r3
    f53c:	230f      	movs	r3, #15
    f53e:	9301      	str	r3, [sp, #4]
    f540:	204d      	movs	r0, #77	; 0x4d
    f542:	47a8      	blx	r5
    f544:	2180      	movs	r1, #128	; 0x80
    f546:	9b01      	ldr	r3, [sp, #4]
    f548:	4249      	negs	r1, r1
    f54a:	4319      	orrs	r1, r3
    f54c:	b2c9      	uxtb	r1, r1
    f54e:	2009      	movs	r0, #9
    f550:	47a8      	blx	r5
    f552:	0039      	movs	r1, r7
    f554:	200b      	movs	r0, #11
    f556:	e6f1      	b.n	f33c <Radio_WriteConfiguration+0x60>
    f558:	3f02      	subs	r7, #2
    f55a:	b27b      	sxtb	r3, r7
    f55c:	2720      	movs	r7, #32
    f55e:	2004      	movs	r0, #4
    f560:	9301      	str	r3, [sp, #4]
    f562:	9b03      	ldr	r3, [sp, #12]
    f564:	4301      	orrs	r1, r0
    f566:	431f      	orrs	r7, r3
    f568:	b2ff      	uxtb	r7, r7
    f56a:	e7e9      	b.n	f540 <Radio_WriteConfiguration+0x264>
    f56c:	23fa      	movs	r3, #250	; 0xfa
    f56e:	e71f      	b.n	f3b0 <Radio_WriteConfiguration+0xd4>
    f570:	23fa      	movs	r3, #250	; 0xfa
    f572:	005b      	lsls	r3, r3, #1
    f574:	e71c      	b.n	f3b0 <Radio_WriteConfiguration+0xd4>
    f576:	0019      	movs	r1, r3
    f578:	e71b      	b.n	f3b2 <Radio_WriteConfiguration+0xd6>
    f57a:	21f7      	movs	r1, #247	; 0xf7
    f57c:	4008      	ands	r0, r1
    f57e:	e73c      	b.n	f3fa <Radio_WriteConfiguration+0x11e>
    f580:	4a12      	ldr	r2, [pc, #72]	; (f5cc <Radio_WriteConfiguration+0x2f0>)
    f582:	189b      	adds	r3, r3, r2
    f584:	4a12      	ldr	r2, [pc, #72]	; (f5d0 <Radio_WriteConfiguration+0x2f4>)
    f586:	4293      	cmp	r3, r2
    f588:	d804      	bhi.n	f594 <Radio_WriteConfiguration+0x2b8>
    f58a:	2102      	movs	r1, #2
    f58c:	2036      	movs	r0, #54	; 0x36
    f58e:	47a8      	blx	r5
    f590:	217f      	movs	r1, #127	; 0x7f
    f592:	e796      	b.n	f4c2 <Radio_WriteConfiguration+0x1e6>
    f594:	2103      	movs	r1, #3
    f596:	2036      	movs	r0, #54	; 0x36
    f598:	e794      	b.n	f4c4 <Radio_WriteConfiguration+0x1e8>
    f59a:	47a8      	blx	r5
    f59c:	211d      	movs	r1, #29
    f59e:	e79f      	b.n	f4e0 <Radio_WriteConfiguration+0x204>
    f5a0:	20001728 	.word	0x20001728
    f5a4:	00009f51 	.word	0x00009f51
    f5a8:	0000f295 	.word	0x0000f295
    f5ac:	0000400d 	.word	0x0000400d
    f5b0:	00003fe5 	.word	0x00003fe5
    f5b4:	2000175e 	.word	0x2000175e
    f5b8:	00ffff00 	.word	0x00ffff00
    f5bc:	00070b00 	.word	0x00070b00
    f5c0:	cc9eec80 	.word	0xcc9eec80
    f5c4:	096ae380 	.word	0x096ae380
    f5c8:	0001ae6c 	.word	0x0001ae6c
    f5cc:	e78fe580 	.word	0xe78fe580
    f5d0:	06dac2c0 	.word	0x06dac2c0
    f5d4:	6863      	ldr	r3, [r4, #4]
    f5d6:	492c      	ldr	r1, [pc, #176]	; (f688 <Radio_WriteConfiguration+0x3ac>)
    f5d8:	0218      	lsls	r0, r3, #8
    f5da:	4b2c      	ldr	r3, [pc, #176]	; (f68c <Radio_WriteConfiguration+0x3b0>)
    f5dc:	4798      	blx	r3
    f5de:	0007      	movs	r7, r0
    f5e0:	0a01      	lsrs	r1, r0, #8
    f5e2:	b2c9      	uxtb	r1, r1
    f5e4:	2004      	movs	r0, #4
    f5e6:	47a8      	blx	r5
    f5e8:	b2f9      	uxtb	r1, r7
    f5ea:	2005      	movs	r0, #5
    f5ec:	47a8      	blx	r5
    f5ee:	4b27      	ldr	r3, [pc, #156]	; (f68c <Radio_WriteConfiguration+0x3b0>)
    f5f0:	68a1      	ldr	r1, [r4, #8]
    f5f2:	4827      	ldr	r0, [pc, #156]	; (f690 <Radio_WriteConfiguration+0x3b4>)
    f5f4:	4798      	blx	r3
    f5f6:	0007      	movs	r7, r0
    f5f8:	0a01      	lsrs	r1, r0, #8
    f5fa:	b2c9      	uxtb	r1, r1
    f5fc:	2002      	movs	r0, #2
    f5fe:	47a8      	blx	r5
    f600:	b2f9      	uxtb	r1, r7
    f602:	2003      	movs	r0, #3
    f604:	47a8      	blx	r5
    f606:	2100      	movs	r1, #0
    f608:	205d      	movs	r0, #93	; 0x5d
    f60a:	47a8      	blx	r5
    f60c:	8aa1      	ldrh	r1, [r4, #20]
    f60e:	2025      	movs	r0, #37	; 0x25
    f610:	0a09      	lsrs	r1, r1, #8
    f612:	47a8      	blx	r5
    f614:	7d21      	ldrb	r1, [r4, #20]
    f616:	2026      	movs	r0, #38	; 0x26
    f618:	47a8      	blx	r5
    f61a:	219e      	movs	r1, #158	; 0x9e
    f61c:	200d      	movs	r0, #13
    f61e:	47a8      	blx	r5
    f620:	21a0      	movs	r1, #160	; 0xa0
    f622:	2035      	movs	r0, #53	; 0x35
    f624:	47a8      	blx	r5
    f626:	200a      	movs	r0, #10
    f628:	47b0      	blx	r6
    f62a:	0023      	movs	r3, r4
    f62c:	3337      	adds	r3, #55	; 0x37
    f62e:	7819      	ldrb	r1, [r3, #0]
    f630:	2360      	movs	r3, #96	; 0x60
    f632:	0149      	lsls	r1, r1, #5
    f634:	4398      	bics	r0, r3
    f636:	4301      	orrs	r1, r0
    f638:	b2c9      	uxtb	r1, r1
    f63a:	200a      	movs	r0, #10
    f63c:	47a8      	blx	r5
    f63e:	1d23      	adds	r3, r4, #4
    f640:	7fdb      	ldrb	r3, [r3, #31]
    f642:	21c0      	movs	r1, #192	; 0xc0
    f644:	2b00      	cmp	r3, #0
    f646:	d000      	beq.n	f64a <Radio_WriteConfiguration+0x36e>
    f648:	3110      	adds	r1, #16
    f64a:	2030      	movs	r0, #48	; 0x30
    f64c:	47a8      	blx	r5
    f64e:	2600      	movs	r6, #0
    f650:	1ca3      	adds	r3, r4, #2
    f652:	7fd9      	ldrb	r1, [r3, #31]
    f654:	428e      	cmp	r6, r1
    f656:	d30d      	bcc.n	f674 <Radio_WriteConfiguration+0x398>
    f658:	2900      	cmp	r1, #0
    f65a:	d003      	beq.n	f664 <Radio_WriteConfiguration+0x388>
    f65c:	2310      	movs	r3, #16
    f65e:	3901      	subs	r1, #1
    f660:	4319      	orrs	r1, r3
    f662:	b2c9      	uxtb	r1, r1
    f664:	2027      	movs	r0, #39	; 0x27
    f666:	47a8      	blx	r5
    f668:	21ff      	movs	r1, #255	; 0xff
    f66a:	203e      	movs	r0, #62	; 0x3e
    f66c:	47a8      	blx	r5
    f66e:	21ff      	movs	r1, #255	; 0xff
    f670:	203f      	movs	r0, #63	; 0x3f
    f672:	e739      	b.n	f4e8 <Radio_WriteConfiguration+0x20c>
    f674:	0030      	movs	r0, r6
    f676:	19a3      	adds	r3, r4, r6
    f678:	3028      	adds	r0, #40	; 0x28
    f67a:	7e59      	ldrb	r1, [r3, #25]
    f67c:	b2c0      	uxtb	r0, r0
    f67e:	3601      	adds	r6, #1
    f680:	47a8      	blx	r5
    f682:	b2f6      	uxtb	r6, r6
    f684:	e7e4      	b.n	f650 <Radio_WriteConfiguration+0x374>
    f686:	46c0      	nop			; (mov r8, r8)
    f688:	00003d09 	.word	0x00003d09
    f68c:	000109bd 	.word	0x000109bd
    f690:	01e84800 	.word	0x01e84800

0000f694 <RADIO_getMappingAndOpmode>:
    f694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f696:	0006      	movs	r6, r0
    f698:	4d06      	ldr	r5, [pc, #24]	; (f6b4 <RADIO_getMappingAndOpmode+0x20>)
    f69a:	2040      	movs	r0, #64	; 0x40
    f69c:	001f      	movs	r7, r3
    f69e:	0014      	movs	r4, r2
    f6a0:	9101      	str	r1, [sp, #4]
    f6a2:	47a8      	blx	r5
    f6a4:	4004      	ands	r4, r0
    f6a6:	413c      	asrs	r4, r7
    f6a8:	2001      	movs	r0, #1
    f6aa:	7034      	strb	r4, [r6, #0]
    f6ac:	47a8      	blx	r5
    f6ae:	9b01      	ldr	r3, [sp, #4]
    f6b0:	7018      	strb	r0, [r3, #0]
    f6b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f6b4:	0000400d 	.word	0x0000400d

0000f6b8 <RADIO_UnhandledInterrupt.part.0>:
    f6b8:	b510      	push	{r4, lr}
    f6ba:	21ff      	movs	r1, #255	; 0xff
    f6bc:	2012      	movs	r0, #18
    f6be:	4b01      	ldr	r3, [pc, #4]	; (f6c4 <RADIO_UnhandledInterrupt.part.0+0xc>)
    f6c0:	4798      	blx	r3
    f6c2:	bd10      	pop	{r4, pc}
    f6c4:	00003fe5 	.word	0x00003fe5

0000f6c8 <RADIO_UnhandledInterrupt>:
    f6c8:	b510      	push	{r4, lr}
    f6ca:	2801      	cmp	r0, #1
    f6cc:	d102      	bne.n	f6d4 <RADIO_UnhandledInterrupt+0xc>
    f6ce:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <RADIO_UnhandledInterrupt+0x1c>)
    f6d0:	4798      	blx	r3
    f6d2:	bd10      	pop	{r4, pc}
    f6d4:	21ff      	movs	r1, #255	; 0xff
    f6d6:	203e      	movs	r0, #62	; 0x3e
    f6d8:	4c03      	ldr	r4, [pc, #12]	; (f6e8 <RADIO_UnhandledInterrupt+0x20>)
    f6da:	47a0      	blx	r4
    f6dc:	21ff      	movs	r1, #255	; 0xff
    f6de:	203f      	movs	r0, #63	; 0x3f
    f6e0:	47a0      	blx	r4
    f6e2:	e7f6      	b.n	f6d2 <RADIO_UnhandledInterrupt+0xa>
    f6e4:	0000f6b9 	.word	0x0000f6b9
    f6e8:	00003fe5 	.word	0x00003fe5

0000f6ec <RADIO_DIO0>:
    f6ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f6ee:	466b      	mov	r3, sp
    f6f0:	1ddc      	adds	r4, r3, #7
    f6f2:	1d9d      	adds	r5, r3, #6
    f6f4:	22c0      	movs	r2, #192	; 0xc0
    f6f6:	2306      	movs	r3, #6
    f6f8:	0028      	movs	r0, r5
    f6fa:	0021      	movs	r1, r4
    f6fc:	4e12      	ldr	r6, [pc, #72]	; (f748 <RADIO_DIO0+0x5c>)
    f6fe:	47b0      	blx	r6
    f700:	7823      	ldrb	r3, [r4, #0]
    f702:	7828      	ldrb	r0, [r5, #0]
    f704:	b25a      	sxtb	r2, r3
    f706:	b2c0      	uxtb	r0, r0
    f708:	2a00      	cmp	r2, #0
    f70a:	da0b      	bge.n	f724 <RADIO_DIO0+0x38>
    f70c:	2800      	cmp	r0, #0
    f70e:	d004      	beq.n	f71a <RADIO_DIO0+0x2e>
    f710:	2801      	cmp	r0, #1
    f712:	d005      	beq.n	f720 <RADIO_DIO0+0x34>
    f714:	4b0d      	ldr	r3, [pc, #52]	; (f74c <RADIO_DIO0+0x60>)
    f716:	4798      	blx	r3
    f718:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f71a:	4b0d      	ldr	r3, [pc, #52]	; (f750 <RADIO_DIO0+0x64>)
    f71c:	4798      	blx	r3
    f71e:	e7fb      	b.n	f718 <RADIO_DIO0+0x2c>
    f720:	4b0c      	ldr	r3, [pc, #48]	; (f754 <RADIO_DIO0+0x68>)
    f722:	e7fb      	b.n	f71c <RADIO_DIO0+0x30>
    f724:	2800      	cmp	r0, #0
    f726:	d10a      	bne.n	f73e <RADIO_DIO0+0x52>
    f728:	2207      	movs	r2, #7
    f72a:	4013      	ands	r3, r2
    f72c:	7023      	strb	r3, [r4, #0]
    f72e:	2b03      	cmp	r3, #3
    f730:	d101      	bne.n	f736 <RADIO_DIO0+0x4a>
    f732:	4b09      	ldr	r3, [pc, #36]	; (f758 <RADIO_DIO0+0x6c>)
    f734:	e7f2      	b.n	f71c <RADIO_DIO0+0x30>
    f736:	2b05      	cmp	r3, #5
    f738:	d102      	bne.n	f740 <RADIO_DIO0+0x54>
    f73a:	4b08      	ldr	r3, [pc, #32]	; (f75c <RADIO_DIO0+0x70>)
    f73c:	e7ee      	b.n	f71c <RADIO_DIO0+0x30>
    f73e:	2000      	movs	r0, #0
    f740:	4b07      	ldr	r3, [pc, #28]	; (f760 <RADIO_DIO0+0x74>)
    f742:	4798      	blx	r3
    f744:	e7e8      	b.n	f718 <RADIO_DIO0+0x2c>
    f746:	46c0      	nop			; (mov r8, r8)
    f748:	0000f695 	.word	0x0000f695
    f74c:	0000f6b9 	.word	0x0000f6b9
    f750:	0000fe6d 	.word	0x0000fe6d
    f754:	0000fd7d 	.word	0x0000fd7d
    f758:	0000fdf9 	.word	0x0000fdf9
    f75c:	0000fee9 	.word	0x0000fee9
    f760:	0000f6c9 	.word	0x0000f6c9

0000f764 <RADIO_DIO1>:
    f764:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f766:	466b      	mov	r3, sp
    f768:	1ddc      	adds	r4, r3, #7
    f76a:	1d9d      	adds	r5, r3, #6
    f76c:	2230      	movs	r2, #48	; 0x30
    f76e:	2304      	movs	r3, #4
    f770:	0021      	movs	r1, r4
    f772:	0028      	movs	r0, r5
    f774:	4e11      	ldr	r6, [pc, #68]	; (f7bc <RADIO_DIO1+0x58>)
    f776:	47b0      	blx	r6
    f778:	7822      	ldrb	r2, [r4, #0]
    f77a:	782b      	ldrb	r3, [r5, #0]
    f77c:	b251      	sxtb	r1, r2
    f77e:	2900      	cmp	r1, #0
    f780:	da0c      	bge.n	f79c <RADIO_DIO1+0x38>
    f782:	b2db      	uxtb	r3, r3
    f784:	2b00      	cmp	r3, #0
    f786:	d004      	beq.n	f792 <RADIO_DIO1+0x2e>
    f788:	2b01      	cmp	r3, #1
    f78a:	d005      	beq.n	f798 <RADIO_DIO1+0x34>
    f78c:	4b0c      	ldr	r3, [pc, #48]	; (f7c0 <RADIO_DIO1+0x5c>)
    f78e:	4798      	blx	r3
    f790:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f792:	4b0c      	ldr	r3, [pc, #48]	; (f7c4 <RADIO_DIO1+0x60>)
    f794:	4798      	blx	r3
    f796:	e7fb      	b.n	f790 <RADIO_DIO1+0x2c>
    f798:	4b0b      	ldr	r3, [pc, #44]	; (f7c8 <RADIO_DIO1+0x64>)
    f79a:	e7fb      	b.n	f794 <RADIO_DIO1+0x30>
    f79c:	2107      	movs	r1, #7
    f79e:	b2db      	uxtb	r3, r3
    f7a0:	400a      	ands	r2, r1
    f7a2:	7022      	strb	r2, [r4, #0]
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d005      	beq.n	f7b4 <RADIO_DIO1+0x50>
    f7a8:	2b01      	cmp	r3, #1
    f7aa:	d1f1      	bne.n	f790 <RADIO_DIO1+0x2c>
    f7ac:	2a03      	cmp	r2, #3
    f7ae:	d1ef      	bne.n	f790 <RADIO_DIO1+0x2c>
    f7b0:	4b06      	ldr	r3, [pc, #24]	; (f7cc <RADIO_DIO1+0x68>)
    f7b2:	e7ef      	b.n	f794 <RADIO_DIO1+0x30>
    f7b4:	4b06      	ldr	r3, [pc, #24]	; (f7d0 <RADIO_DIO1+0x6c>)
    f7b6:	2a05      	cmp	r2, #5
    f7b8:	d1ea      	bne.n	f790 <RADIO_DIO1+0x2c>
    f7ba:	e7eb      	b.n	f794 <RADIO_DIO1+0x30>
    f7bc:	0000f695 	.word	0x0000f695
    f7c0:	0000f6b9 	.word	0x0000f6b9
    f7c4:	0000fd01 	.word	0x0000fd01
    f7c8:	0000a035 	.word	0x0000a035
    f7cc:	0000fb29 	.word	0x0000fb29
    f7d0:	0000fa8d 	.word	0x0000fa8d

0000f7d4 <RADIO_DIO2>:
    f7d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f7d6:	466b      	mov	r3, sp
    f7d8:	1ddc      	adds	r4, r3, #7
    f7da:	1d9d      	adds	r5, r3, #6
    f7dc:	220c      	movs	r2, #12
    f7de:	2302      	movs	r3, #2
    f7e0:	0021      	movs	r1, r4
    f7e2:	0028      	movs	r0, r5
    f7e4:	4e0b      	ldr	r6, [pc, #44]	; (f814 <RADIO_DIO2+0x40>)
    f7e6:	47b0      	blx	r6
    f7e8:	7823      	ldrb	r3, [r4, #0]
    f7ea:	782a      	ldrb	r2, [r5, #0]
    f7ec:	b259      	sxtb	r1, r3
    f7ee:	2900      	cmp	r1, #0
    f7f0:	da05      	bge.n	f7fe <RADIO_DIO2+0x2a>
    f7f2:	4b09      	ldr	r3, [pc, #36]	; (f818 <RADIO_DIO2+0x44>)
    f7f4:	2a02      	cmp	r2, #2
    f7f6:	d90a      	bls.n	f80e <RADIO_DIO2+0x3a>
    f7f8:	4b08      	ldr	r3, [pc, #32]	; (f81c <RADIO_DIO2+0x48>)
    f7fa:	4798      	blx	r3
    f7fc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f7fe:	2107      	movs	r1, #7
    f800:	400b      	ands	r3, r1
    f802:	7023      	strb	r3, [r4, #0]
    f804:	2a03      	cmp	r2, #3
    f806:	d1f9      	bne.n	f7fc <RADIO_DIO2+0x28>
    f808:	2b05      	cmp	r3, #5
    f80a:	d1f7      	bne.n	f7fc <RADIO_DIO2+0x28>
    f80c:	4b04      	ldr	r3, [pc, #16]	; (f820 <RADIO_DIO2+0x4c>)
    f80e:	4798      	blx	r3
    f810:	e7f4      	b.n	f7fc <RADIO_DIO2+0x28>
    f812:	46c0      	nop			; (mov r8, r8)
    f814:	0000f695 	.word	0x0000f695
    f818:	0000a035 	.word	0x0000a035
    f81c:	0000f6b9 	.word	0x0000f6b9
    f820:	0000fa5d 	.word	0x0000fa5d

0000f824 <RADIO_DIO3>:
    f824:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f826:	466b      	mov	r3, sp
    f828:	4668      	mov	r0, sp
    f82a:	1ddc      	adds	r4, r3, #7
    f82c:	2203      	movs	r2, #3
    f82e:	2300      	movs	r3, #0
    f830:	0021      	movs	r1, r4
    f832:	3006      	adds	r0, #6
    f834:	4d03      	ldr	r5, [pc, #12]	; (f844 <RADIO_DIO3+0x20>)
    f836:	47a8      	blx	r5
    f838:	7823      	ldrb	r3, [r4, #0]
    f83a:	2b7f      	cmp	r3, #127	; 0x7f
    f83c:	d901      	bls.n	f842 <RADIO_DIO3+0x1e>
    f83e:	4b02      	ldr	r3, [pc, #8]	; (f848 <RADIO_DIO3+0x24>)
    f840:	4798      	blx	r3
    f842:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f844:	0000f695 	.word	0x0000f695
    f848:	0000f6b9 	.word	0x0000f6b9

0000f84c <RADIO_DIO4>:
    f84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f84e:	466b      	mov	r3, sp
    f850:	4668      	mov	r0, sp
    f852:	1ddc      	adds	r4, r3, #7
    f854:	2306      	movs	r3, #6
    f856:	22c0      	movs	r2, #192	; 0xc0
    f858:	18c0      	adds	r0, r0, r3
    f85a:	0021      	movs	r1, r4
    f85c:	4d03      	ldr	r5, [pc, #12]	; (f86c <RADIO_DIO4+0x20>)
    f85e:	47a8      	blx	r5
    f860:	7823      	ldrb	r3, [r4, #0]
    f862:	2b7f      	cmp	r3, #127	; 0x7f
    f864:	d901      	bls.n	f86a <RADIO_DIO4+0x1e>
    f866:	4b02      	ldr	r3, [pc, #8]	; (f870 <RADIO_DIO4+0x24>)
    f868:	4798      	blx	r3
    f86a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f86c:	0000f695 	.word	0x0000f695
    f870:	0000f6b9 	.word	0x0000f6b9

0000f874 <RADIO_DIO5>:
    f874:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f876:	466b      	mov	r3, sp
    f878:	4668      	mov	r0, sp
    f87a:	1ddc      	adds	r4, r3, #7
    f87c:	2230      	movs	r2, #48	; 0x30
    f87e:	2304      	movs	r3, #4
    f880:	0021      	movs	r1, r4
    f882:	3006      	adds	r0, #6
    f884:	4d03      	ldr	r5, [pc, #12]	; (f894 <RADIO_DIO5+0x20>)
    f886:	47a8      	blx	r5
    f888:	7823      	ldrb	r3, [r4, #0]
    f88a:	2b7f      	cmp	r3, #127	; 0x7f
    f88c:	d901      	bls.n	f892 <RADIO_DIO5+0x1e>
    f88e:	4b02      	ldr	r3, [pc, #8]	; (f898 <RADIO_DIO5+0x24>)
    f890:	4798      	blx	r3
    f892:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f894:	0000f695 	.word	0x0000f695
    f898:	0000f6b9 	.word	0x0000f6b9

0000f89c <radioPostTask>:
    f89c:	b510      	push	{r4, lr}
    f89e:	0004      	movs	r4, r0
    f8a0:	4b05      	ldr	r3, [pc, #20]	; (f8b8 <radioPostTask+0x1c>)
    f8a2:	4798      	blx	r3
    f8a4:	4b05      	ldr	r3, [pc, #20]	; (f8bc <radioPostTask+0x20>)
    f8a6:	8818      	ldrh	r0, [r3, #0]
    f8a8:	4320      	orrs	r0, r4
    f8aa:	8018      	strh	r0, [r3, #0]
    f8ac:	4b04      	ldr	r3, [pc, #16]	; (f8c0 <radioPostTask+0x24>)
    f8ae:	4798      	blx	r3
    f8b0:	2002      	movs	r0, #2
    f8b2:	4b04      	ldr	r3, [pc, #16]	; (f8c4 <radioPostTask+0x28>)
    f8b4:	4798      	blx	r3
    f8b6:	bd10      	pop	{r4, pc}
    f8b8:	00004245 	.word	0x00004245
    f8bc:	20000f36 	.word	0x20000f36
    f8c0:	00004251 	.word	0x00004251
    f8c4:	00009f19 	.word	0x00009f19

0000f8c8 <radioClearTask>:
    f8c8:	b510      	push	{r4, lr}
    f8ca:	0004      	movs	r4, r0
    f8cc:	4b04      	ldr	r3, [pc, #16]	; (f8e0 <radioClearTask+0x18>)
    f8ce:	4798      	blx	r3
    f8d0:	4a04      	ldr	r2, [pc, #16]	; (f8e4 <radioClearTask+0x1c>)
    f8d2:	8813      	ldrh	r3, [r2, #0]
    f8d4:	43a3      	bics	r3, r4
    f8d6:	8013      	strh	r3, [r2, #0]
    f8d8:	4b03      	ldr	r3, [pc, #12]	; (f8e8 <radioClearTask+0x20>)
    f8da:	4798      	blx	r3
    f8dc:	bd10      	pop	{r4, pc}
    f8de:	46c0      	nop			; (mov r8, r8)
    f8e0:	00004245 	.word	0x00004245
    f8e4:	20000f36 	.word	0x20000f36
    f8e8:	00004251 	.word	0x00004251

0000f8ec <RADIO_TaskHandler>:
    f8ec:	b570      	push	{r4, r5, r6, lr}
    f8ee:	2400      	movs	r4, #0
    f8f0:	4d10      	ldr	r5, [pc, #64]	; (f934 <RADIO_TaskHandler+0x48>)
    f8f2:	2601      	movs	r6, #1
    f8f4:	882b      	ldrh	r3, [r5, #0]
    f8f6:	42a3      	cmp	r3, r4
    f8f8:	d015      	beq.n	f926 <RADIO_TaskHandler+0x3a>
    f8fa:	882b      	ldrh	r3, [r5, #0]
    f8fc:	4123      	asrs	r3, r4
    f8fe:	4233      	tst	r3, r6
    f900:	d013      	beq.n	f92a <RADIO_TaskHandler+0x3e>
    f902:	40a6      	lsls	r6, r4
    f904:	4b0c      	ldr	r3, [pc, #48]	; (f938 <RADIO_TaskHandler+0x4c>)
    f906:	4798      	blx	r3
    f908:	882b      	ldrh	r3, [r5, #0]
    f90a:	00a4      	lsls	r4, r4, #2
    f90c:	43b3      	bics	r3, r6
    f90e:	802b      	strh	r3, [r5, #0]
    f910:	4b0a      	ldr	r3, [pc, #40]	; (f93c <RADIO_TaskHandler+0x50>)
    f912:	4798      	blx	r3
    f914:	4b0a      	ldr	r3, [pc, #40]	; (f940 <RADIO_TaskHandler+0x54>)
    f916:	58e3      	ldr	r3, [r4, r3]
    f918:	4798      	blx	r3
    f91a:	882b      	ldrh	r3, [r5, #0]
    f91c:	2b00      	cmp	r3, #0
    f91e:	d002      	beq.n	f926 <RADIO_TaskHandler+0x3a>
    f920:	2002      	movs	r0, #2
    f922:	4b08      	ldr	r3, [pc, #32]	; (f944 <RADIO_TaskHandler+0x58>)
    f924:	4798      	blx	r3
    f926:	2000      	movs	r0, #0
    f928:	bd70      	pop	{r4, r5, r6, pc}
    f92a:	3401      	adds	r4, #1
    f92c:	2c05      	cmp	r4, #5
    f92e:	d1e4      	bne.n	f8fa <RADIO_TaskHandler+0xe>
    f930:	e7f9      	b.n	f926 <RADIO_TaskHandler+0x3a>
    f932:	46c0      	nop			; (mov r8, r8)
    f934:	20000f36 	.word	0x20000f36
    f938:	00004245 	.word	0x00004245
    f93c:	00004251 	.word	0x00004251
    f940:	0001ae70 	.word	0x0001ae70
    f944:	00009f19 	.word	0x00009f19

0000f948 <RadioSetState>:
    f948:	4b01      	ldr	r3, [pc, #4]	; (f950 <RadioSetState+0x8>)
    f94a:	7018      	strb	r0, [r3, #0]
    f94c:	4770      	bx	lr
    f94e:	46c0      	nop			; (mov r8, r8)
    f950:	20001c63 	.word	0x20001c63

0000f954 <RADIO_GetState>:
    f954:	4b01      	ldr	r3, [pc, #4]	; (f95c <RADIO_GetState+0x8>)
    f956:	7818      	ldrb	r0, [r3, #0]
    f958:	b2c0      	uxtb	r0, r0
    f95a:	4770      	bx	lr
    f95c:	20001c63 	.word	0x20001c63

0000f960 <RADIO_SetCallbackBitmask>:
    f960:	4a02      	ldr	r2, [pc, #8]	; (f96c <RADIO_SetCallbackBitmask+0xc>)
    f962:	7813      	ldrb	r3, [r2, #0]
    f964:	4318      	orrs	r0, r3
    f966:	7010      	strb	r0, [r2, #0]
    f968:	4770      	bx	lr
    f96a:	46c0      	nop			; (mov r8, r8)
    f96c:	20001c62 	.word	0x20001c62

0000f970 <RADIO_Transmit>:
    f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f972:	4e12      	ldr	r6, [pc, #72]	; (f9bc <RADIO_Transmit+0x4c>)
    f974:	0007      	movs	r7, r0
    f976:	7833      	ldrb	r3, [r6, #0]
    f978:	2404      	movs	r4, #4
    f97a:	2b01      	cmp	r3, #1
    f97c:	d115      	bne.n	f9aa <RADIO_Transmit+0x3a>
    f97e:	4d10      	ldr	r5, [pc, #64]	; (f9c0 <RADIO_Transmit+0x50>)
    f980:	002b      	movs	r3, r5
    f982:	332f      	adds	r3, #47	; 0x2f
    f984:	7818      	ldrb	r0, [r3, #0]
    f986:	4b0f      	ldr	r3, [pc, #60]	; (f9c4 <RADIO_Transmit+0x54>)
    f988:	4798      	blx	r3
    f98a:	783a      	ldrb	r2, [r7, #0]
    f98c:	4b0e      	ldr	r3, [pc, #56]	; (f9c8 <RADIO_Transmit+0x58>)
    f98e:	3541      	adds	r5, #65	; 0x41
    f990:	701a      	strb	r2, [r3, #0]
    f992:	4b0e      	ldr	r3, [pc, #56]	; (f9cc <RADIO_Transmit+0x5c>)
    f994:	687a      	ldr	r2, [r7, #4]
    f996:	601a      	str	r2, [r3, #0]
    f998:	782d      	ldrb	r5, [r5, #0]
    f99a:	4b0d      	ldr	r3, [pc, #52]	; (f9d0 <RADIO_Transmit+0x60>)
    f99c:	2d00      	cmp	r5, #0
    f99e:	d006      	beq.n	f9ae <RADIO_Transmit+0x3e>
    f9a0:	2203      	movs	r2, #3
    f9a2:	2010      	movs	r0, #16
    f9a4:	7032      	strb	r2, [r6, #0]
    f9a6:	2400      	movs	r4, #0
    f9a8:	4798      	blx	r3
    f9aa:	0020      	movs	r0, r4
    f9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9ae:	2202      	movs	r2, #2
    f9b0:	0020      	movs	r0, r4
    f9b2:	7032      	strb	r2, [r6, #0]
    f9b4:	002c      	movs	r4, r5
    f9b6:	4798      	blx	r3
    f9b8:	e7f7      	b.n	f9aa <RADIO_Transmit+0x3a>
    f9ba:	46c0      	nop			; (mov r8, r8)
    f9bc:	20001c63 	.word	0x20001c63
    f9c0:	20001728 	.word	0x20001728
    f9c4:	00009bf9 	.word	0x00009bf9
    f9c8:	20000f4c 	.word	0x20000f4c
    f9cc:	20000f48 	.word	0x20000f48
    f9d0:	0000f89d 	.word	0x0000f89d

0000f9d4 <Radio_FSKTxPayloadHandler>:
    f9d4:	b570      	push	{r4, r5, r6, lr}
    f9d6:	4b1c      	ldr	r3, [pc, #112]	; (fa48 <Radio_FSKTxPayloadHandler+0x74>)
    f9d8:	000d      	movs	r5, r1
    f9da:	4798      	blx	r3
    f9dc:	4c1b      	ldr	r4, [pc, #108]	; (fa4c <Radio_FSKTxPayloadHandler+0x78>)
    f9de:	3457      	adds	r4, #87	; 0x57
    f9e0:	7820      	ldrb	r0, [r4, #0]
    f9e2:	b2c0      	uxtb	r0, r0
    f9e4:	2800      	cmp	r0, #0
    f9e6:	d112      	bne.n	fa0e <Radio_FSKTxPayloadHandler+0x3a>
    f9e8:	2d00      	cmp	r5, #0
    f9ea:	d007      	beq.n	f9fc <Radio_FSKTxPayloadHandler+0x28>
    f9ec:	4918      	ldr	r1, [pc, #96]	; (fa50 <Radio_FSKTxPayloadHandler+0x7c>)
    f9ee:	4b19      	ldr	r3, [pc, #100]	; (fa54 <Radio_FSKTxPayloadHandler+0x80>)
    f9f0:	2d13      	cmp	r5, #19
    f9f2:	d806      	bhi.n	fa02 <Radio_FSKTxPayloadHandler+0x2e>
    f9f4:	002a      	movs	r2, r5
    f9f6:	6809      	ldr	r1, [r1, #0]
    f9f8:	4798      	blx	r3
    f9fa:	7025      	strb	r5, [r4, #0]
    f9fc:	4b16      	ldr	r3, [pc, #88]	; (fa58 <Radio_FSKTxPayloadHandler+0x84>)
    f9fe:	4798      	blx	r3
    fa00:	bd70      	pop	{r4, r5, r6, pc}
    fa02:	2214      	movs	r2, #20
    fa04:	6809      	ldr	r1, [r1, #0]
    fa06:	4798      	blx	r3
    fa08:	2314      	movs	r3, #20
    fa0a:	7023      	strb	r3, [r4, #0]
    fa0c:	e7f6      	b.n	f9fc <Radio_FSKTxPayloadHandler+0x28>
    fa0e:	7823      	ldrb	r3, [r4, #0]
    fa10:	429d      	cmp	r5, r3
    fa12:	d0f3      	beq.n	f9fc <Radio_FSKTxPayloadHandler+0x28>
    fa14:	7822      	ldrb	r2, [r4, #0]
    fa16:	480e      	ldr	r0, [pc, #56]	; (fa50 <Radio_FSKTxPayloadHandler+0x7c>)
    fa18:	1aaa      	subs	r2, r5, r2
    fa1a:	b2d2      	uxtb	r2, r2
    fa1c:	4b0d      	ldr	r3, [pc, #52]	; (fa54 <Radio_FSKTxPayloadHandler+0x80>)
    fa1e:	2a14      	cmp	r2, #20
    fa20:	d807      	bhi.n	fa32 <Radio_FSKTxPayloadHandler+0x5e>
    fa22:	7826      	ldrb	r6, [r4, #0]
    fa24:	7822      	ldrb	r2, [r4, #0]
    fa26:	6801      	ldr	r1, [r0, #0]
    fa28:	1aaa      	subs	r2, r5, r2
    fa2a:	b2d2      	uxtb	r2, r2
    fa2c:	1989      	adds	r1, r1, r6
    fa2e:	2000      	movs	r0, #0
    fa30:	e7e2      	b.n	f9f8 <Radio_FSKTxPayloadHandler+0x24>
    fa32:	7822      	ldrb	r2, [r4, #0]
    fa34:	6801      	ldr	r1, [r0, #0]
    fa36:	2000      	movs	r0, #0
    fa38:	1889      	adds	r1, r1, r2
    fa3a:	2214      	movs	r2, #20
    fa3c:	4798      	blx	r3
    fa3e:	7823      	ldrb	r3, [r4, #0]
    fa40:	3314      	adds	r3, #20
    fa42:	b2db      	uxtb	r3, r3
    fa44:	e7e1      	b.n	fa0a <Radio_FSKTxPayloadHandler+0x36>
    fa46:	46c0      	nop			; (mov r8, r8)
    fa48:	000001ad 	.word	0x000001ad
    fa4c:	20001728 	.word	0x20001728
    fa50:	20000f48 	.word	0x20000f48
    fa54:	00004039 	.word	0x00004039
    fa58:	000001ed 	.word	0x000001ed

0000fa5c <RADIO_FSKSyncAddr>:
    fa5c:	4b08      	ldr	r3, [pc, #32]	; (fa80 <RADIO_FSKSyncAddr+0x24>)
    fa5e:	b510      	push	{r4, lr}
    fa60:	4798      	blx	r3
    fa62:	4b08      	ldr	r3, [pc, #32]	; (fa84 <RADIO_FSKSyncAddr+0x28>)
    fa64:	001a      	movs	r2, r3
    fa66:	3234      	adds	r2, #52	; 0x34
    fa68:	7812      	ldrb	r2, [r2, #0]
    fa6a:	2a00      	cmp	r2, #0
    fa6c:	d104      	bne.n	fa78 <RADIO_FSKSyncAddr+0x1c>
    fa6e:	0019      	movs	r1, r3
    fa70:	3357      	adds	r3, #87	; 0x57
    fa72:	312c      	adds	r1, #44	; 0x2c
    fa74:	700a      	strb	r2, [r1, #0]
    fa76:	701a      	strb	r2, [r3, #0]
    fa78:	4b03      	ldr	r3, [pc, #12]	; (fa88 <RADIO_FSKSyncAddr+0x2c>)
    fa7a:	4798      	blx	r3
    fa7c:	bd10      	pop	{r4, pc}
    fa7e:	46c0      	nop			; (mov r8, r8)
    fa80:	000001ad 	.word	0x000001ad
    fa84:	20001728 	.word	0x20001728
    fa88:	000001ed 	.word	0x000001ed

0000fa8c <RADIO_FSKFifoLevel>:
    fa8c:	b570      	push	{r4, r5, r6, lr}
    fa8e:	4b22      	ldr	r3, [pc, #136]	; (fb18 <RADIO_FSKFifoLevel+0x8c>)
    fa90:	4798      	blx	r3
    fa92:	4d22      	ldr	r5, [pc, #136]	; (fb1c <RADIO_FSKFifoLevel+0x90>)
    fa94:	002a      	movs	r2, r5
    fa96:	002b      	movs	r3, r5
    fa98:	322c      	adds	r2, #44	; 0x2c
    fa9a:	3357      	adds	r3, #87	; 0x57
    fa9c:	7810      	ldrb	r0, [r2, #0]
    fa9e:	7819      	ldrb	r1, [r3, #0]
    faa0:	4288      	cmp	r0, r1
    faa2:	d105      	bne.n	fab0 <RADIO_FSKFifoLevel+0x24>
    faa4:	7812      	ldrb	r2, [r2, #0]
    faa6:	2a00      	cmp	r2, #0
    faa8:	d002      	beq.n	fab0 <RADIO_FSKFifoLevel+0x24>
    faaa:	781b      	ldrb	r3, [r3, #0]
    faac:	2b00      	cmp	r3, #0
    faae:	d11f      	bne.n	faf0 <RADIO_FSKFifoLevel+0x64>
    fab0:	0029      	movs	r1, r5
    fab2:	312c      	adds	r1, #44	; 0x2c
    fab4:	7808      	ldrb	r0, [r1, #0]
    fab6:	b2c0      	uxtb	r0, r0
    fab8:	2800      	cmp	r0, #0
    faba:	d102      	bne.n	fac2 <RADIO_FSKFifoLevel+0x36>
    fabc:	2201      	movs	r2, #1
    fabe:	4b18      	ldr	r3, [pc, #96]	; (fb20 <RADIO_FSKFifoLevel+0x94>)
    fac0:	4798      	blx	r3
    fac2:	002e      	movs	r6, r5
    fac4:	002c      	movs	r4, r5
    fac6:	362c      	adds	r6, #44	; 0x2c
    fac8:	3457      	adds	r4, #87	; 0x57
    faca:	7833      	ldrb	r3, [r6, #0]
    facc:	7822      	ldrb	r2, [r4, #0]
    face:	1a9b      	subs	r3, r3, r2
    fad0:	b2db      	uxtb	r3, r3
    fad2:	2b1f      	cmp	r3, #31
    fad4:	d80f      	bhi.n	faf6 <RADIO_FSKFifoLevel+0x6a>
    fad6:	7823      	ldrb	r3, [r4, #0]
    fad8:	7832      	ldrb	r2, [r6, #0]
    fada:	7821      	ldrb	r1, [r4, #0]
    fadc:	2000      	movs	r0, #0
    fade:	1a52      	subs	r2, r2, r1
    fae0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fae2:	b2d2      	uxtb	r2, r2
    fae4:	18c9      	adds	r1, r1, r3
    fae6:	4b0e      	ldr	r3, [pc, #56]	; (fb20 <RADIO_FSKFifoLevel+0x94>)
    fae8:	4798      	blx	r3
    faea:	7833      	ldrb	r3, [r6, #0]
    faec:	b2db      	uxtb	r3, r3
    faee:	7023      	strb	r3, [r4, #0]
    faf0:	4b0c      	ldr	r3, [pc, #48]	; (fb24 <RADIO_FSKFifoLevel+0x98>)
    faf2:	4798      	blx	r3
    faf4:	bd70      	pop	{r4, r5, r6, pc}
    faf6:	7833      	ldrb	r3, [r6, #0]
    faf8:	7822      	ldrb	r2, [r4, #0]
    fafa:	1a9b      	subs	r3, r3, r2
    fafc:	b2db      	uxtb	r3, r3
    fafe:	2b20      	cmp	r3, #32
    fb00:	d9f6      	bls.n	faf0 <RADIO_FSKFifoLevel+0x64>
    fb02:	7823      	ldrb	r3, [r4, #0]
    fb04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    fb06:	2220      	movs	r2, #32
    fb08:	18c9      	adds	r1, r1, r3
    fb0a:	2000      	movs	r0, #0
    fb0c:	4b04      	ldr	r3, [pc, #16]	; (fb20 <RADIO_FSKFifoLevel+0x94>)
    fb0e:	4798      	blx	r3
    fb10:	7823      	ldrb	r3, [r4, #0]
    fb12:	3320      	adds	r3, #32
    fb14:	e7ea      	b.n	faec <RADIO_FSKFifoLevel+0x60>
    fb16:	46c0      	nop			; (mov r8, r8)
    fb18:	000001ad 	.word	0x000001ad
    fb1c:	20001728 	.word	0x20001728
    fb20:	00004079 	.word	0x00004079
    fb24:	000001ed 	.word	0x000001ed

0000fb28 <RADIO_FSKFifoEmpty>:
    fb28:	b510      	push	{r4, lr}
    fb2a:	4b03      	ldr	r3, [pc, #12]	; (fb38 <RADIO_FSKFifoEmpty+0x10>)
    fb2c:	7819      	ldrb	r1, [r3, #0]
    fb2e:	4b03      	ldr	r3, [pc, #12]	; (fb3c <RADIO_FSKFifoEmpty+0x14>)
    fb30:	6818      	ldr	r0, [r3, #0]
    fb32:	4b03      	ldr	r3, [pc, #12]	; (fb40 <RADIO_FSKFifoEmpty+0x18>)
    fb34:	4798      	blx	r3
    fb36:	bd10      	pop	{r4, pc}
    fb38:	20000f4c 	.word	0x20000f4c
    fb3c:	20000f48 	.word	0x20000f48
    fb40:	0000f9d5 	.word	0x0000f9d5

0000fb44 <RADIO_GetData>:
    fb44:	4b03      	ldr	r3, [pc, #12]	; (fb54 <RADIO_GetData+0x10>)
    fb46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fb48:	332c      	adds	r3, #44	; 0x2c
    fb4a:	6002      	str	r2, [r0, #0]
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	2000      	movs	r0, #0
    fb50:	800b      	strh	r3, [r1, #0]
    fb52:	4770      	bx	lr
    fb54:	20001728 	.word	0x20001728

0000fb58 <Radio_EnableRfControl>:
    fb58:	b510      	push	{r4, lr}
    fb5a:	4b08      	ldr	r3, [pc, #32]	; (fb7c <Radio_EnableRfControl+0x24>)
    fb5c:	0001      	movs	r1, r0
    fb5e:	681a      	ldr	r2, [r3, #0]
    fb60:	4807      	ldr	r0, [pc, #28]	; (fb80 <Radio_EnableRfControl+0x28>)
    fb62:	4c08      	ldr	r4, [pc, #32]	; (fb84 <Radio_EnableRfControl+0x2c>)
    fb64:	1812      	adds	r2, r2, r0
    fb66:	2000      	movs	r0, #0
    fb68:	42a2      	cmp	r2, r4
    fb6a:	d804      	bhi.n	fb76 <Radio_EnableRfControl+0x1e>
    fb6c:	3305      	adds	r3, #5
    fb6e:	7fdb      	ldrb	r3, [r3, #31]
    fb70:	1e58      	subs	r0, r3, #1
    fb72:	4183      	sbcs	r3, r0
    fb74:	1c58      	adds	r0, r3, #1
    fb76:	4b04      	ldr	r3, [pc, #16]	; (fb88 <Radio_EnableRfControl+0x30>)
    fb78:	4798      	blx	r3
    fb7a:	bd10      	pop	{r4, pc}
    fb7c:	20001728 	.word	0x20001728
    fb80:	cc9eec80 	.word	0xcc9eec80
    fb84:	096ae380 	.word	0x096ae380
    fb88:	000040e5 	.word	0x000040e5

0000fb8c <RADIO_RxHandler>:
    fb8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fb8e:	4b33      	ldr	r3, [pc, #204]	; (fc5c <RADIO_RxHandler+0xd0>)
    fb90:	2000      	movs	r0, #0
    fb92:	4798      	blx	r3
    fb94:	4e32      	ldr	r6, [pc, #200]	; (fc60 <RADIO_RxHandler+0xd4>)
    fb96:	4b33      	ldr	r3, [pc, #204]	; (fc64 <RADIO_RxHandler+0xd8>)
    fb98:	8830      	ldrh	r0, [r6, #0]
    fb9a:	2800      	cmp	r0, #0
    fb9c:	d100      	bne.n	fba0 <RADIO_RxHandler+0x14>
    fb9e:	3004      	adds	r0, #4
    fba0:	4798      	blx	r3
    fba2:	4c31      	ldr	r4, [pc, #196]	; (fc68 <RADIO_RxHandler+0xdc>)
    fba4:	4d31      	ldr	r5, [pc, #196]	; (fc6c <RADIO_RxHandler+0xe0>)
    fba6:	0023      	movs	r3, r4
    fba8:	3334      	adds	r3, #52	; 0x34
    fbaa:	7819      	ldrb	r1, [r3, #0]
    fbac:	2901      	cmp	r1, #1
    fbae:	d122      	bne.n	fbf6 <RADIO_RxHandler+0x6a>
    fbb0:	2022      	movs	r0, #34	; 0x22
    fbb2:	47a8      	blx	r5
    fbb4:	2100      	movs	r1, #0
    fbb6:	2040      	movs	r0, #64	; 0x40
    fbb8:	47a8      	blx	r5
    fbba:	2100      	movs	r1, #0
    fbbc:	2041      	movs	r0, #65	; 0x41
    fbbe:	47a8      	blx	r5
    fbc0:	8832      	ldrh	r2, [r6, #0]
    fbc2:	4b2b      	ldr	r3, [pc, #172]	; (fc70 <RADIO_RxHandler+0xe4>)
    fbc4:	2a00      	cmp	r2, #0
    fbc6:	d131      	bne.n	fc2c <RADIO_RxHandler+0xa0>
    fbc8:	0021      	movs	r1, r4
    fbca:	2005      	movs	r0, #5
    fbcc:	3134      	adds	r1, #52	; 0x34
    fbce:	7809      	ldrb	r1, [r1, #0]
    fbd0:	4798      	blx	r3
    fbd2:	68e3      	ldr	r3, [r4, #12]
    fbd4:	2b00      	cmp	r3, #0
    fbd6:	d00c      	beq.n	fbf2 <RADIO_RxHandler+0x66>
    fbd8:	8832      	ldrh	r2, [r6, #0]
    fbda:	2a00      	cmp	r2, #0
    fbdc:	d009      	beq.n	fbf2 <RADIO_RxHandler+0x66>
    fbde:	21fa      	movs	r1, #250	; 0xfa
    fbe0:	2200      	movs	r2, #0
    fbe2:	342f      	adds	r4, #47	; 0x2f
    fbe4:	0089      	lsls	r1, r1, #2
    fbe6:	7820      	ldrb	r0, [r4, #0]
    fbe8:	4359      	muls	r1, r3
    fbea:	9200      	str	r2, [sp, #0]
    fbec:	4b21      	ldr	r3, [pc, #132]	; (fc74 <RADIO_RxHandler+0xe8>)
    fbee:	4c22      	ldr	r4, [pc, #136]	; (fc78 <RADIO_RxHandler+0xec>)
    fbf0:	47a0      	blx	r4
    fbf2:	2000      	movs	r0, #0
    fbf4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    fbf6:	0023      	movs	r3, r4
    fbf8:	3338      	adds	r3, #56	; 0x38
    fbfa:	7819      	ldrb	r1, [r3, #0]
    fbfc:	2012      	movs	r0, #18
    fbfe:	47a8      	blx	r5
    fc00:	0023      	movs	r3, r4
    fc02:	3339      	adds	r3, #57	; 0x39
    fc04:	7819      	ldrb	r1, [r3, #0]
    fc06:	2013      	movs	r0, #19
    fc08:	47a8      	blx	r5
    fc0a:	210c      	movs	r1, #12
    fc0c:	2040      	movs	r0, #64	; 0x40
    fc0e:	47a8      	blx	r5
    fc10:	2100      	movs	r1, #0
    fc12:	2041      	movs	r0, #65	; 0x41
    fc14:	47a8      	blx	r5
    fc16:	0022      	movs	r2, r4
    fc18:	2300      	movs	r3, #0
    fc1a:	3256      	adds	r2, #86	; 0x56
    fc1c:	7013      	strb	r3, [r2, #0]
    fc1e:	0022      	movs	r2, r4
    fc20:	322c      	adds	r2, #44	; 0x2c
    fc22:	7013      	strb	r3, [r2, #0]
    fc24:	0022      	movs	r2, r4
    fc26:	3257      	adds	r2, #87	; 0x57
    fc28:	7013      	strb	r3, [r2, #0]
    fc2a:	e7c9      	b.n	fbc0 <RADIO_RxHandler+0x34>
    fc2c:	0022      	movs	r2, r4
    fc2e:	3234      	adds	r2, #52	; 0x34
    fc30:	7811      	ldrb	r1, [r2, #0]
    fc32:	2200      	movs	r2, #0
    fc34:	2901      	cmp	r1, #1
    fc36:	d101      	bne.n	fc3c <RADIO_RxHandler+0xb0>
    fc38:	2006      	movs	r0, #6
    fc3a:	e7c9      	b.n	fbd0 <RADIO_RxHandler+0x44>
    fc3c:	0011      	movs	r1, r2
    fc3e:	2005      	movs	r0, #5
    fc40:	4798      	blx	r3
    fc42:	21fa      	movs	r1, #250	; 0xfa
    fc44:	8833      	ldrh	r3, [r6, #0]
    fc46:	0089      	lsls	r1, r1, #2
    fc48:	4359      	muls	r1, r3
    fc4a:	0023      	movs	r3, r4
    fc4c:	2200      	movs	r2, #0
    fc4e:	332e      	adds	r3, #46	; 0x2e
    fc50:	7818      	ldrb	r0, [r3, #0]
    fc52:	4d09      	ldr	r5, [pc, #36]	; (fc78 <RADIO_RxHandler+0xec>)
    fc54:	9200      	str	r2, [sp, #0]
    fc56:	4b09      	ldr	r3, [pc, #36]	; (fc7c <RADIO_RxHandler+0xf0>)
    fc58:	47a8      	blx	r5
    fc5a:	e7ba      	b.n	fbd2 <RADIO_RxHandler+0x46>
    fc5c:	0000fb59 	.word	0x0000fb59
    fc60:	20000f38 	.word	0x20000f38
    fc64:	0000f2dd 	.word	0x0000f2dd
    fc68:	20001728 	.word	0x20001728
    fc6c:	00003fe5 	.word	0x00003fe5
    fc70:	00009f51 	.word	0x00009f51
    fc74:	0000fcb5 	.word	0x0000fcb5
    fc78:	000098f5 	.word	0x000098f5
    fc7c:	0000fd45 	.word	0x0000fd45

0000fc80 <Radio_DisableRfControl>:
    fc80:	b510      	push	{r4, lr}
    fc82:	4b08      	ldr	r3, [pc, #32]	; (fca4 <Radio_DisableRfControl+0x24>)
    fc84:	0001      	movs	r1, r0
    fc86:	681a      	ldr	r2, [r3, #0]
    fc88:	4807      	ldr	r0, [pc, #28]	; (fca8 <Radio_DisableRfControl+0x28>)
    fc8a:	4c08      	ldr	r4, [pc, #32]	; (fcac <Radio_DisableRfControl+0x2c>)
    fc8c:	1812      	adds	r2, r2, r0
    fc8e:	2000      	movs	r0, #0
    fc90:	42a2      	cmp	r2, r4
    fc92:	d804      	bhi.n	fc9e <Radio_DisableRfControl+0x1e>
    fc94:	3305      	adds	r3, #5
    fc96:	7fdb      	ldrb	r3, [r3, #31]
    fc98:	1e58      	subs	r0, r3, #1
    fc9a:	4183      	sbcs	r3, r0
    fc9c:	1c58      	adds	r0, r3, #1
    fc9e:	4b04      	ldr	r3, [pc, #16]	; (fcb0 <Radio_DisableRfControl+0x30>)
    fca0:	4798      	blx	r3
    fca2:	bd10      	pop	{r4, pc}
    fca4:	20001728 	.word	0x20001728
    fca8:	cc9eec80 	.word	0xcc9eec80
    fcac:	096ae380 	.word	0x096ae380
    fcb0:	000040f9 	.word	0x000040f9

0000fcb4 <Radio_WatchdogTimeout>:
    fcb4:	b510      	push	{r4, lr}
    fcb6:	4b0e      	ldr	r3, [pc, #56]	; (fcf0 <Radio_WatchdogTimeout+0x3c>)
    fcb8:	781a      	ldrb	r2, [r3, #0]
    fcba:	2a04      	cmp	r2, #4
    fcbc:	d10b      	bne.n	fcd6 <Radio_WatchdogTimeout+0x22>
    fcbe:	2320      	movs	r3, #32
    fcc0:	4a0c      	ldr	r2, [pc, #48]	; (fcf4 <Radio_WatchdogTimeout+0x40>)
    fcc2:	2000      	movs	r0, #0
    fcc4:	8811      	ldrh	r1, [r2, #0]
    fcc6:	430b      	orrs	r3, r1
    fcc8:	8013      	strh	r3, [r2, #0]
    fcca:	4b0b      	ldr	r3, [pc, #44]	; (fcf8 <Radio_WatchdogTimeout+0x44>)
    fccc:	4798      	blx	r3
    fcce:	2002      	movs	r0, #2
    fcd0:	4b0a      	ldr	r3, [pc, #40]	; (fcfc <Radio_WatchdogTimeout+0x48>)
    fcd2:	4798      	blx	r3
    fcd4:	bd10      	pop	{r4, pc}
    fcd6:	781b      	ldrb	r3, [r3, #0]
    fcd8:	2b02      	cmp	r3, #2
    fcda:	d1fb      	bne.n	fcd4 <Radio_WatchdogTimeout+0x20>
    fcdc:	4a05      	ldr	r2, [pc, #20]	; (fcf4 <Radio_WatchdogTimeout+0x40>)
    fcde:	330e      	adds	r3, #14
    fce0:	8811      	ldrh	r1, [r2, #0]
    fce2:	2001      	movs	r0, #1
    fce4:	430b      	orrs	r3, r1
    fce6:	8013      	strh	r3, [r2, #0]
    fce8:	4b03      	ldr	r3, [pc, #12]	; (fcf8 <Radio_WatchdogTimeout+0x44>)
    fcea:	4798      	blx	r3
    fcec:	2001      	movs	r0, #1
    fcee:	e7ef      	b.n	fcd0 <Radio_WatchdogTimeout+0x1c>
    fcf0:	20001c63 	.word	0x20001c63
    fcf4:	20001c60 	.word	0x20001c60
    fcf8:	0000fc81 	.word	0x0000fc81
    fcfc:	0000f89d 	.word	0x0000f89d

0000fd00 <RADIO_RxTimeout>:
    fd00:	b510      	push	{r4, lr}
    fd02:	4b0a      	ldr	r3, [pc, #40]	; (fd2c <RADIO_RxTimeout+0x2c>)
    fd04:	332f      	adds	r3, #47	; 0x2f
    fd06:	7818      	ldrb	r0, [r3, #0]
    fd08:	4b09      	ldr	r3, [pc, #36]	; (fd30 <RADIO_RxTimeout+0x30>)
    fd0a:	4798      	blx	r3
    fd0c:	2000      	movs	r0, #0
    fd0e:	4b09      	ldr	r3, [pc, #36]	; (fd34 <RADIO_RxTimeout+0x34>)
    fd10:	4798      	blx	r3
    fd12:	2180      	movs	r1, #128	; 0x80
    fd14:	2012      	movs	r0, #18
    fd16:	4b08      	ldr	r3, [pc, #32]	; (fd38 <RADIO_RxTimeout+0x38>)
    fd18:	4798      	blx	r3
    fd1a:	2340      	movs	r3, #64	; 0x40
    fd1c:	4a07      	ldr	r2, [pc, #28]	; (fd3c <RADIO_RxTimeout+0x3c>)
    fd1e:	2002      	movs	r0, #2
    fd20:	8811      	ldrh	r1, [r2, #0]
    fd22:	430b      	orrs	r3, r1
    fd24:	8013      	strh	r3, [r2, #0]
    fd26:	4b06      	ldr	r3, [pc, #24]	; (fd40 <RADIO_RxTimeout+0x40>)
    fd28:	4798      	blx	r3
    fd2a:	bd10      	pop	{r4, pc}
    fd2c:	20001728 	.word	0x20001728
    fd30:	00009bf9 	.word	0x00009bf9
    fd34:	0000fc81 	.word	0x0000fc81
    fd38:	00003fe5 	.word	0x00003fe5
    fd3c:	20001c60 	.word	0x20001c60
    fd40:	0000f89d 	.word	0x0000f89d

0000fd44 <Radio_RxFSKTimeout>:
    fd44:	b510      	push	{r4, lr}
    fd46:	4b08      	ldr	r3, [pc, #32]	; (fd68 <Radio_RxFSKTimeout+0x24>)
    fd48:	332f      	adds	r3, #47	; 0x2f
    fd4a:	7818      	ldrb	r0, [r3, #0]
    fd4c:	4b07      	ldr	r3, [pc, #28]	; (fd6c <Radio_RxFSKTimeout+0x28>)
    fd4e:	4798      	blx	r3
    fd50:	2000      	movs	r0, #0
    fd52:	4b07      	ldr	r3, [pc, #28]	; (fd70 <Radio_RxFSKTimeout+0x2c>)
    fd54:	4798      	blx	r3
    fd56:	2380      	movs	r3, #128	; 0x80
    fd58:	4a06      	ldr	r2, [pc, #24]	; (fd74 <Radio_RxFSKTimeout+0x30>)
    fd5a:	2002      	movs	r0, #2
    fd5c:	8811      	ldrh	r1, [r2, #0]
    fd5e:	430b      	orrs	r3, r1
    fd60:	8013      	strh	r3, [r2, #0]
    fd62:	4b05      	ldr	r3, [pc, #20]	; (fd78 <Radio_RxFSKTimeout+0x34>)
    fd64:	4798      	blx	r3
    fd66:	bd10      	pop	{r4, pc}
    fd68:	20001728 	.word	0x20001728
    fd6c:	00009bf9 	.word	0x00009bf9
    fd70:	0000fc81 	.word	0x0000fc81
    fd74:	20001c60 	.word	0x20001c60
    fd78:	0000f89d 	.word	0x0000f89d

0000fd7c <RADIO_TxDone>:
    fd7c:	b570      	push	{r4, r5, r6, lr}
    fd7e:	4b14      	ldr	r3, [pc, #80]	; (fdd0 <RADIO_TxDone+0x54>)
    fd80:	332f      	adds	r3, #47	; 0x2f
    fd82:	7818      	ldrb	r0, [r3, #0]
    fd84:	4b13      	ldr	r3, [pc, #76]	; (fdd4 <RADIO_TxDone+0x58>)
    fd86:	4798      	blx	r3
    fd88:	2001      	movs	r0, #1
    fd8a:	4b13      	ldr	r3, [pc, #76]	; (fdd8 <RADIO_TxDone+0x5c>)
    fd8c:	4798      	blx	r3
    fd8e:	4b13      	ldr	r3, [pc, #76]	; (fddc <RADIO_TxDone+0x60>)
    fd90:	2108      	movs	r1, #8
    fd92:	2012      	movs	r0, #18
    fd94:	4798      	blx	r3
    fd96:	4b12      	ldr	r3, [pc, #72]	; (fde0 <RADIO_TxDone+0x64>)
    fd98:	781a      	ldrb	r2, [r3, #0]
    fd9a:	4b12      	ldr	r3, [pc, #72]	; (fde4 <RADIO_TxDone+0x68>)
    fd9c:	2a02      	cmp	r2, #2
    fd9e:	d002      	beq.n	fda6 <RADIO_TxDone+0x2a>
    fda0:	881a      	ldrh	r2, [r3, #0]
    fda2:	0692      	lsls	r2, r2, #26
    fda4:	d413      	bmi.n	fdce <RADIO_TxDone+0x52>
    fda6:	2001      	movs	r0, #1
    fda8:	881a      	ldrh	r2, [r3, #0]
    fdaa:	4302      	orrs	r2, r0
    fdac:	801a      	strh	r2, [r3, #0]
    fdae:	4b0e      	ldr	r3, [pc, #56]	; (fde8 <RADIO_TxDone+0x6c>)
    fdb0:	4798      	blx	r3
    fdb2:	4b0e      	ldr	r3, [pc, #56]	; (fdec <RADIO_TxDone+0x70>)
    fdb4:	4798      	blx	r3
    fdb6:	4c0e      	ldr	r4, [pc, #56]	; (fdf0 <RADIO_TxDone+0x74>)
    fdb8:	4d0e      	ldr	r5, [pc, #56]	; (fdf4 <RADIO_TxDone+0x78>)
    fdba:	6822      	ldr	r2, [r4, #0]
    fdbc:	6863      	ldr	r3, [r4, #4]
    fdbe:	1a80      	subs	r0, r0, r2
    fdc0:	4199      	sbcs	r1, r3
    fdc2:	22fa      	movs	r2, #250	; 0xfa
    fdc4:	2300      	movs	r3, #0
    fdc6:	0092      	lsls	r2, r2, #2
    fdc8:	47a8      	blx	r5
    fdca:	6020      	str	r0, [r4, #0]
    fdcc:	6061      	str	r1, [r4, #4]
    fdce:	bd70      	pop	{r4, r5, r6, pc}
    fdd0:	20001728 	.word	0x20001728
    fdd4:	00009bf9 	.word	0x00009bf9
    fdd8:	0000fc81 	.word	0x0000fc81
    fddc:	00003fe5 	.word	0x00003fe5
    fde0:	20001c63 	.word	0x20001c63
    fde4:	20001c60 	.word	0x20001c60
    fde8:	0000f89d 	.word	0x0000f89d
    fdec:	0000989d 	.word	0x0000989d
    fdf0:	20000f40 	.word	0x20000f40
    fdf4:	00010d1d 	.word	0x00010d1d

0000fdf8 <RADIO_FSKPacketSent>:
    fdf8:	b570      	push	{r4, r5, r6, lr}
    fdfa:	4b13      	ldr	r3, [pc, #76]	; (fe48 <RADIO_FSKPacketSent+0x50>)
    fdfc:	203f      	movs	r0, #63	; 0x3f
    fdfe:	4798      	blx	r3
    fe00:	0703      	lsls	r3, r0, #28
    fe02:	d51f      	bpl.n	fe44 <RADIO_FSKPacketSent+0x4c>
    fe04:	4b11      	ldr	r3, [pc, #68]	; (fe4c <RADIO_FSKPacketSent+0x54>)
    fe06:	332f      	adds	r3, #47	; 0x2f
    fe08:	7818      	ldrb	r0, [r3, #0]
    fe0a:	4b11      	ldr	r3, [pc, #68]	; (fe50 <RADIO_FSKPacketSent+0x58>)
    fe0c:	4798      	blx	r3
    fe0e:	4b11      	ldr	r3, [pc, #68]	; (fe54 <RADIO_FSKPacketSent+0x5c>)
    fe10:	2001      	movs	r0, #1
    fe12:	4798      	blx	r3
    fe14:	4b10      	ldr	r3, [pc, #64]	; (fe58 <RADIO_FSKPacketSent+0x60>)
    fe16:	4c11      	ldr	r4, [pc, #68]	; (fe5c <RADIO_FSKPacketSent+0x64>)
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	2b02      	cmp	r3, #2
    fe1c:	d002      	beq.n	fe24 <RADIO_FSKPacketSent+0x2c>
    fe1e:	8823      	ldrh	r3, [r4, #0]
    fe20:	069b      	lsls	r3, r3, #26
    fe22:	d40f      	bmi.n	fe44 <RADIO_FSKPacketSent+0x4c>
    fe24:	4b0e      	ldr	r3, [pc, #56]	; (fe60 <RADIO_FSKPacketSent+0x68>)
    fe26:	4798      	blx	r3
    fe28:	4b0e      	ldr	r3, [pc, #56]	; (fe64 <RADIO_FSKPacketSent+0x6c>)
    fe2a:	681d      	ldr	r5, [r3, #0]
    fe2c:	685e      	ldr	r6, [r3, #4]
    fe2e:	1b40      	subs	r0, r0, r5
    fe30:	41b1      	sbcs	r1, r6
    fe32:	6018      	str	r0, [r3, #0]
    fe34:	6059      	str	r1, [r3, #4]
    fe36:	4b0c      	ldr	r3, [pc, #48]	; (fe68 <RADIO_FSKPacketSent+0x70>)
    fe38:	2001      	movs	r0, #1
    fe3a:	4798      	blx	r3
    fe3c:	2304      	movs	r3, #4
    fe3e:	8822      	ldrh	r2, [r4, #0]
    fe40:	4313      	orrs	r3, r2
    fe42:	8023      	strh	r3, [r4, #0]
    fe44:	bd70      	pop	{r4, r5, r6, pc}
    fe46:	46c0      	nop			; (mov r8, r8)
    fe48:	0000400d 	.word	0x0000400d
    fe4c:	20001728 	.word	0x20001728
    fe50:	00009bf9 	.word	0x00009bf9
    fe54:	0000fc81 	.word	0x0000fc81
    fe58:	20001c63 	.word	0x20001c63
    fe5c:	20001c60 	.word	0x20001c60
    fe60:	0000989d 	.word	0x0000989d
    fe64:	20000f40 	.word	0x20000f40
    fe68:	0000f89d 	.word	0x0000f89d

0000fe6c <RADIO_RxDone>:
    fe6c:	b570      	push	{r4, r5, r6, lr}
    fe6e:	2012      	movs	r0, #18
    fe70:	4e16      	ldr	r6, [pc, #88]	; (fecc <RADIO_RxDone+0x60>)
    fe72:	47b0      	blx	r6
    fe74:	4b16      	ldr	r3, [pc, #88]	; (fed0 <RADIO_RxDone+0x64>)
    fe76:	0005      	movs	r5, r0
    fe78:	2170      	movs	r1, #112	; 0x70
    fe7a:	2012      	movs	r0, #18
    fe7c:	4798      	blx	r3
    fe7e:	2350      	movs	r3, #80	; 0x50
    fe80:	402b      	ands	r3, r5
    fe82:	2b50      	cmp	r3, #80	; 0x50
    fe84:	d119      	bne.n	feba <RADIO_RxDone+0x4e>
    fe86:	4c13      	ldr	r4, [pc, #76]	; (fed4 <RADIO_RxDone+0x68>)
    fe88:	0023      	movs	r3, r4
    fe8a:	332f      	adds	r3, #47	; 0x2f
    fe8c:	7818      	ldrb	r0, [r3, #0]
    fe8e:	4b12      	ldr	r3, [pc, #72]	; (fed8 <RADIO_RxDone+0x6c>)
    fe90:	4798      	blx	r3
    fe92:	4b12      	ldr	r3, [pc, #72]	; (fedc <RADIO_RxDone+0x70>)
    fe94:	2000      	movs	r0, #0
    fe96:	4798      	blx	r3
    fe98:	3404      	adds	r4, #4
    fe9a:	201c      	movs	r0, #28
    fe9c:	47b0      	blx	r6
    fe9e:	7fe2      	ldrb	r2, [r4, #31]
    fea0:	4b0f      	ldr	r3, [pc, #60]	; (fee0 <RADIO_RxDone+0x74>)
    fea2:	4910      	ldr	r1, [pc, #64]	; (fee4 <RADIO_RxDone+0x78>)
    fea4:	2a00      	cmp	r2, #0
    fea6:	d003      	beq.n	feb0 <RADIO_RxDone+0x44>
    fea8:	06aa      	lsls	r2, r5, #26
    feaa:	d407      	bmi.n	febc <RADIO_RxDone+0x50>
    feac:	0642      	lsls	r2, r0, #25
    feae:	d505      	bpl.n	febc <RADIO_RxDone+0x50>
    feb0:	2002      	movs	r0, #2
    feb2:	881a      	ldrh	r2, [r3, #0]
    feb4:	4302      	orrs	r2, r0
    feb6:	801a      	strh	r2, [r3, #0]
    feb8:	4788      	blx	r1
    feba:	bd70      	pop	{r4, r5, r6, pc}
    febc:	2280      	movs	r2, #128	; 0x80
    febe:	8818      	ldrh	r0, [r3, #0]
    fec0:	0052      	lsls	r2, r2, #1
    fec2:	4302      	orrs	r2, r0
    fec4:	801a      	strh	r2, [r3, #0]
    fec6:	2002      	movs	r0, #2
    fec8:	e7f6      	b.n	feb8 <RADIO_RxDone+0x4c>
    feca:	46c0      	nop			; (mov r8, r8)
    fecc:	0000400d 	.word	0x0000400d
    fed0:	00003fe5 	.word	0x00003fe5
    fed4:	20001728 	.word	0x20001728
    fed8:	00009bf9 	.word	0x00009bf9
    fedc:	0000fc81 	.word	0x0000fc81
    fee0:	20001c60 	.word	0x20001c60
    fee4:	0000f89d 	.word	0x0000f89d

0000fee8 <RADIO_FSKPayloadReady>:
    fee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    feea:	203f      	movs	r0, #63	; 0x3f
    feec:	4b39      	ldr	r3, [pc, #228]	; (ffd4 <RADIO_FSKPayloadReady+0xec>)
    feee:	4798      	blx	r3
    fef0:	0743      	lsls	r3, r0, #29
    fef2:	d559      	bpl.n	ffa8 <RADIO_FSKPayloadReady+0xc0>
    fef4:	4c38      	ldr	r4, [pc, #224]	; (ffd8 <RADIO_FSKPayloadReady+0xf0>)
    fef6:	4d39      	ldr	r5, [pc, #228]	; (ffdc <RADIO_FSKPayloadReady+0xf4>)
    fef8:	1d23      	adds	r3, r4, #4
    fefa:	7fdb      	ldrb	r3, [r3, #31]
    fefc:	2b01      	cmp	r3, #1
    fefe:	d154      	bne.n	ffaa <RADIO_FSKPayloadReady+0xc2>
    ff00:	2202      	movs	r2, #2
    ff02:	4210      	tst	r0, r2
    ff04:	d048      	beq.n	ff98 <RADIO_FSKPayloadReady+0xb0>
    ff06:	0023      	movs	r3, r4
    ff08:	332f      	adds	r3, #47	; 0x2f
    ff0a:	7818      	ldrb	r0, [r3, #0]
    ff0c:	4e34      	ldr	r6, [pc, #208]	; (ffe0 <RADIO_FSKPayloadReady+0xf8>)
    ff0e:	47b0      	blx	r6
    ff10:	0023      	movs	r3, r4
    ff12:	332e      	adds	r3, #46	; 0x2e
    ff14:	7818      	ldrb	r0, [r3, #0]
    ff16:	47b0      	blx	r6
    ff18:	4b32      	ldr	r3, [pc, #200]	; (ffe4 <RADIO_FSKPayloadReady+0xfc>)
    ff1a:	4798      	blx	r3
    ff1c:	0022      	movs	r2, r4
    ff1e:	0023      	movs	r3, r4
    ff20:	322c      	adds	r2, #44	; 0x2c
    ff22:	3357      	adds	r3, #87	; 0x57
    ff24:	7810      	ldrb	r0, [r2, #0]
    ff26:	7819      	ldrb	r1, [r3, #0]
    ff28:	4288      	cmp	r0, r1
    ff2a:	d105      	bne.n	ff38 <RADIO_FSKPayloadReady+0x50>
    ff2c:	7812      	ldrb	r2, [r2, #0]
    ff2e:	2a00      	cmp	r2, #0
    ff30:	d002      	beq.n	ff38 <RADIO_FSKPayloadReady+0x50>
    ff32:	781b      	ldrb	r3, [r3, #0]
    ff34:	2b00      	cmp	r3, #0
    ff36:	d118      	bne.n	ff6a <RADIO_FSKPayloadReady+0x82>
    ff38:	0021      	movs	r1, r4
    ff3a:	312c      	adds	r1, #44	; 0x2c
    ff3c:	7808      	ldrb	r0, [r1, #0]
    ff3e:	b2c0      	uxtb	r0, r0
    ff40:	2800      	cmp	r0, #0
    ff42:	d102      	bne.n	ff4a <RADIO_FSKPayloadReady+0x62>
    ff44:	2201      	movs	r2, #1
    ff46:	4b28      	ldr	r3, [pc, #160]	; (ffe8 <RADIO_FSKPayloadReady+0x100>)
    ff48:	4798      	blx	r3
    ff4a:	0026      	movs	r6, r4
    ff4c:	0027      	movs	r7, r4
    ff4e:	3657      	adds	r6, #87	; 0x57
    ff50:	7830      	ldrb	r0, [r6, #0]
    ff52:	372c      	adds	r7, #44	; 0x2c
    ff54:	b2c0      	uxtb	r0, r0
    ff56:	2800      	cmp	r0, #0
    ff58:	d110      	bne.n	ff7c <RADIO_FSKPayloadReady+0x94>
    ff5a:	783a      	ldrb	r2, [r7, #0]
    ff5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ff5e:	b2d2      	uxtb	r2, r2
    ff60:	4b21      	ldr	r3, [pc, #132]	; (ffe8 <RADIO_FSKPayloadReady+0x100>)
    ff62:	4798      	blx	r3
    ff64:	783b      	ldrb	r3, [r7, #0]
    ff66:	b2db      	uxtb	r3, r3
    ff68:	7033      	strb	r3, [r6, #0]
    ff6a:	4b20      	ldr	r3, [pc, #128]	; (ffec <RADIO_FSKPayloadReady+0x104>)
    ff6c:	4798      	blx	r3
    ff6e:	4b20      	ldr	r3, [pc, #128]	; (fff0 <RADIO_FSKPayloadReady+0x108>)
    ff70:	2000      	movs	r0, #0
    ff72:	4798      	blx	r3
    ff74:	2308      	movs	r3, #8
    ff76:	882a      	ldrh	r2, [r5, #0]
    ff78:	4313      	orrs	r3, r2
    ff7a:	e011      	b.n	ffa0 <RADIO_FSKPayloadReady+0xb8>
    ff7c:	783b      	ldrb	r3, [r7, #0]
    ff7e:	7832      	ldrb	r2, [r6, #0]
    ff80:	1a9b      	subs	r3, r3, r2
    ff82:	2b00      	cmp	r3, #0
    ff84:	ddf1      	ble.n	ff6a <RADIO_FSKPayloadReady+0x82>
    ff86:	7833      	ldrb	r3, [r6, #0]
    ff88:	783a      	ldrb	r2, [r7, #0]
    ff8a:	7831      	ldrb	r1, [r6, #0]
    ff8c:	2000      	movs	r0, #0
    ff8e:	1a52      	subs	r2, r2, r1
    ff90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ff92:	b2d2      	uxtb	r2, r2
    ff94:	18c9      	adds	r1, r1, r3
    ff96:	e7e3      	b.n	ff60 <RADIO_FSKPayloadReady+0x78>
    ff98:	2380      	movs	r3, #128	; 0x80
    ff9a:	8829      	ldrh	r1, [r5, #0]
    ff9c:	005b      	lsls	r3, r3, #1
    ff9e:	430b      	orrs	r3, r1
    ffa0:	802b      	strh	r3, [r5, #0]
    ffa2:	2002      	movs	r0, #2
    ffa4:	4b13      	ldr	r3, [pc, #76]	; (fff4 <RADIO_FSKPayloadReady+0x10c>)
    ffa6:	4798      	blx	r3
    ffa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ffaa:	0023      	movs	r3, r4
    ffac:	332f      	adds	r3, #47	; 0x2f
    ffae:	4e0c      	ldr	r6, [pc, #48]	; (ffe0 <RADIO_FSKPayloadReady+0xf8>)
    ffb0:	7818      	ldrb	r0, [r3, #0]
    ffb2:	47b0      	blx	r6
    ffb4:	0023      	movs	r3, r4
    ffb6:	332e      	adds	r3, #46	; 0x2e
    ffb8:	7818      	ldrb	r0, [r3, #0]
    ffba:	47b0      	blx	r6
    ffbc:	4e0e      	ldr	r6, [pc, #56]	; (fff8 <RADIO_FSKPayloadReady+0x110>)
    ffbe:	2201      	movs	r2, #1
    ffc0:	0031      	movs	r1, r6
    ffc2:	2000      	movs	r0, #0
    ffc4:	4f08      	ldr	r7, [pc, #32]	; (ffe8 <RADIO_FSKPayloadReady+0x100>)
    ffc6:	47b8      	blx	r7
    ffc8:	7832      	ldrb	r2, [r6, #0]
    ffca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ffcc:	b2d2      	uxtb	r2, r2
    ffce:	2000      	movs	r0, #0
    ffd0:	47b8      	blx	r7
    ffd2:	e7cc      	b.n	ff6e <RADIO_FSKPayloadReady+0x86>
    ffd4:	0000400d 	.word	0x0000400d
    ffd8:	20001728 	.word	0x20001728
    ffdc:	20001c60 	.word	0x20001c60
    ffe0:	00009bf9 	.word	0x00009bf9
    ffe4:	000001ad 	.word	0x000001ad
    ffe8:	00004079 	.word	0x00004079
    ffec:	000001ed 	.word	0x000001ed
    fff0:	0000fc81 	.word	0x0000fc81
    fff4:	0000f89d 	.word	0x0000f89d
    fff8:	20001754 	.word	0x20001754

0000fffc <Radio_SetClockInput>:
    fffc:	b510      	push	{r4, lr}
    fffe:	4b08      	ldr	r3, [pc, #32]	; (10020 <Radio_SetClockInput+0x24>)
   10000:	3355      	adds	r3, #85	; 0x55
   10002:	781b      	ldrb	r3, [r3, #0]
   10004:	2b00      	cmp	r3, #0
   10006:	d10a      	bne.n	1001e <Radio_SetClockInput+0x22>
   10008:	4b06      	ldr	r3, [pc, #24]	; (10024 <Radio_SetClockInput+0x28>)
   1000a:	204b      	movs	r0, #75	; 0x4b
   1000c:	4798      	blx	r3
   1000e:	2110      	movs	r1, #16
   10010:	4301      	orrs	r1, r0
   10012:	4b05      	ldr	r3, [pc, #20]	; (10028 <Radio_SetClockInput+0x2c>)
   10014:	b2c9      	uxtb	r1, r1
   10016:	204b      	movs	r0, #75	; 0x4b
   10018:	4798      	blx	r3
   1001a:	4b04      	ldr	r3, [pc, #16]	; (1002c <Radio_SetClockInput+0x30>)
   1001c:	4798      	blx	r3
   1001e:	bd10      	pop	{r4, pc}
   10020:	20001728 	.word	0x20001728
   10024:	0000400d 	.word	0x0000400d
   10028:	00003fe5 	.word	0x00003fe5
   1002c:	00004115 	.word	0x00004115

00010030 <RADIO_TxHandler>:
   10030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10032:	4b32      	ldr	r3, [pc, #200]	; (100fc <RADIO_TxHandler+0xcc>)
   10034:	4798      	blx	r3
   10036:	2001      	movs	r0, #1
   10038:	4b31      	ldr	r3, [pc, #196]	; (10100 <RADIO_TxHandler+0xd0>)
   1003a:	4798      	blx	r3
   1003c:	4c31      	ldr	r4, [pc, #196]	; (10104 <RADIO_TxHandler+0xd4>)
   1003e:	0023      	movs	r3, r4
   10040:	332d      	adds	r3, #45	; 0x2d
   10042:	7818      	ldrb	r0, [r3, #0]
   10044:	4b30      	ldr	r3, [pc, #192]	; (10108 <RADIO_TxHandler+0xd8>)
   10046:	4798      	blx	r3
   10048:	0023      	movs	r3, r4
   1004a:	3341      	adds	r3, #65	; 0x41
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	2b00      	cmp	r3, #0
   10050:	d102      	bne.n	10058 <RADIO_TxHandler+0x28>
   10052:	2004      	movs	r0, #4
   10054:	4b2d      	ldr	r3, [pc, #180]	; (1010c <RADIO_TxHandler+0xdc>)
   10056:	4798      	blx	r3
   10058:	4b2d      	ldr	r3, [pc, #180]	; (10110 <RADIO_TxHandler+0xe0>)
   1005a:	4e2e      	ldr	r6, [pc, #184]	; (10114 <RADIO_TxHandler+0xe4>)
   1005c:	781f      	ldrb	r7, [r3, #0]
   1005e:	4d2e      	ldr	r5, [pc, #184]	; (10118 <RADIO_TxHandler+0xe8>)
   10060:	2f01      	cmp	r7, #1
   10062:	d138      	bne.n	100d6 <RADIO_TxHandler+0xa6>
   10064:	7831      	ldrb	r1, [r6, #0]
   10066:	2022      	movs	r0, #34	; 0x22
   10068:	47a8      	blx	r5
   1006a:	4b2c      	ldr	r3, [pc, #176]	; (1011c <RADIO_TxHandler+0xec>)
   1006c:	200a      	movs	r0, #10
   1006e:	4798      	blx	r3
   10070:	21f0      	movs	r1, #240	; 0xf0
   10072:	4008      	ands	r0, r1
   10074:	39e8      	subs	r1, #232	; 0xe8
   10076:	4301      	orrs	r1, r0
   10078:	200a      	movs	r0, #10
   1007a:	47a8      	blx	r5
   1007c:	2140      	movs	r1, #64	; 0x40
   1007e:	0008      	movs	r0, r1
   10080:	47a8      	blx	r5
   10082:	2100      	movs	r1, #0
   10084:	2041      	movs	r0, #65	; 0x41
   10086:	47a8      	blx	r5
   10088:	4b21      	ldr	r3, [pc, #132]	; (10110 <RADIO_TxHandler+0xe0>)
   1008a:	003a      	movs	r2, r7
   1008c:	7819      	ldrb	r1, [r3, #0]
   1008e:	0038      	movs	r0, r7
   10090:	4b23      	ldr	r3, [pc, #140]	; (10120 <RADIO_TxHandler+0xf0>)
   10092:	4798      	blx	r3
   10094:	4b23      	ldr	r3, [pc, #140]	; (10124 <RADIO_TxHandler+0xf4>)
   10096:	7832      	ldrb	r2, [r6, #0]
   10098:	6819      	ldr	r1, [r3, #0]
   1009a:	2000      	movs	r0, #0
   1009c:	4b22      	ldr	r3, [pc, #136]	; (10128 <RADIO_TxHandler+0xf8>)
   1009e:	4798      	blx	r3
   100a0:	0023      	movs	r3, r4
   100a2:	3334      	adds	r3, #52	; 0x34
   100a4:	7819      	ldrb	r1, [r3, #0]
   100a6:	2200      	movs	r2, #0
   100a8:	2003      	movs	r0, #3
   100aa:	4b1d      	ldr	r3, [pc, #116]	; (10120 <RADIO_TxHandler+0xf0>)
   100ac:	4798      	blx	r3
   100ae:	4b1f      	ldr	r3, [pc, #124]	; (1012c <RADIO_TxHandler+0xfc>)
   100b0:	4798      	blx	r3
   100b2:	4b1f      	ldr	r3, [pc, #124]	; (10130 <RADIO_TxHandler+0x100>)
   100b4:	6018      	str	r0, [r3, #0]
   100b6:	6059      	str	r1, [r3, #4]
   100b8:	68e3      	ldr	r3, [r4, #12]
   100ba:	2b00      	cmp	r3, #0
   100bc:	d009      	beq.n	100d2 <RADIO_TxHandler+0xa2>
   100be:	21fa      	movs	r1, #250	; 0xfa
   100c0:	2200      	movs	r2, #0
   100c2:	342f      	adds	r4, #47	; 0x2f
   100c4:	0089      	lsls	r1, r1, #2
   100c6:	7820      	ldrb	r0, [r4, #0]
   100c8:	4359      	muls	r1, r3
   100ca:	9200      	str	r2, [sp, #0]
   100cc:	4b19      	ldr	r3, [pc, #100]	; (10134 <RADIO_TxHandler+0x104>)
   100ce:	4c1a      	ldr	r4, [pc, #104]	; (10138 <RADIO_TxHandler+0x108>)
   100d0:	47a0      	blx	r4
   100d2:	2000      	movs	r0, #0
   100d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   100d6:	2110      	movs	r1, #16
   100d8:	2040      	movs	r0, #64	; 0x40
   100da:	47a8      	blx	r5
   100dc:	2100      	movs	r1, #0
   100de:	2041      	movs	r0, #65	; 0x41
   100e0:	47a8      	blx	r5
   100e2:	0023      	movs	r3, r4
   100e4:	2000      	movs	r0, #0
   100e6:	3357      	adds	r3, #87	; 0x57
   100e8:	7831      	ldrb	r1, [r6, #0]
   100ea:	7018      	strb	r0, [r3, #0]
   100ec:	47a8      	blx	r5
   100ee:	4b0d      	ldr	r3, [pc, #52]	; (10124 <RADIO_TxHandler+0xf4>)
   100f0:	7831      	ldrb	r1, [r6, #0]
   100f2:	6818      	ldr	r0, [r3, #0]
   100f4:	4b11      	ldr	r3, [pc, #68]	; (1013c <RADIO_TxHandler+0x10c>)
   100f6:	4798      	blx	r3
   100f8:	e7d2      	b.n	100a0 <RADIO_TxHandler+0x70>
   100fa:	46c0      	nop			; (mov r8, r8)
   100fc:	0000fffd 	.word	0x0000fffd
   10100:	0000fb59 	.word	0x0000fb59
   10104:	20001728 	.word	0x20001728
   10108:	00009bf9 	.word	0x00009bf9
   1010c:	0000f2dd 	.word	0x0000f2dd
   10110:	2000175c 	.word	0x2000175c
   10114:	20000f4c 	.word	0x20000f4c
   10118:	00003fe5 	.word	0x00003fe5
   1011c:	0000400d 	.word	0x0000400d
   10120:	00009f51 	.word	0x00009f51
   10124:	20000f48 	.word	0x20000f48
   10128:	00004039 	.word	0x00004039
   1012c:	0000989d 	.word	0x0000989d
   10130:	20000f40 	.word	0x20000f40
   10134:	0000fcb5 	.word	0x0000fcb5
   10138:	000098f5 	.word	0x000098f5
   1013c:	0000f9d5 	.word	0x0000f9d5

00010140 <Radio_ResetClockInput>:
   10140:	b510      	push	{r4, lr}
   10142:	4b04      	ldr	r3, [pc, #16]	; (10154 <Radio_ResetClockInput+0x14>)
   10144:	3355      	adds	r3, #85	; 0x55
   10146:	781b      	ldrb	r3, [r3, #0]
   10148:	2b00      	cmp	r3, #0
   1014a:	d101      	bne.n	10150 <Radio_ResetClockInput+0x10>
   1014c:	4b02      	ldr	r3, [pc, #8]	; (10158 <Radio_ResetClockInput+0x18>)
   1014e:	4798      	blx	r3
   10150:	bd10      	pop	{r4, pc}
   10152:	46c0      	nop			; (mov r8, r8)
   10154:	20001728 	.word	0x20001728
   10158:	00004131 	.word	0x00004131

0001015c <RADIO_InitDefaultAttributes>:
   1015c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1015e:	2501      	movs	r5, #1
   10160:	4b64      	ldr	r3, [pc, #400]	; (102f4 <RADIO_InitDefaultAttributes+0x198>)
   10162:	4c65      	ldr	r4, [pc, #404]	; (102f8 <RADIO_InitDefaultAttributes+0x19c>)
   10164:	701d      	strb	r5, [r3, #0]
   10166:	4b65      	ldr	r3, [pc, #404]	; (102fc <RADIO_InitDefaultAttributes+0x1a0>)
   10168:	2207      	movs	r2, #7
   1016a:	6023      	str	r3, [r4, #0]
   1016c:	4b64      	ldr	r3, [pc, #400]	; (10300 <RADIO_InitDefaultAttributes+0x1a4>)
   1016e:	18a1      	adds	r1, r4, r2
   10170:	6063      	str	r3, [r4, #4]
   10172:	4b64      	ldr	r3, [pc, #400]	; (10304 <RADIO_InitDefaultAttributes+0x1a8>)
   10174:	0027      	movs	r7, r4
   10176:	60a3      	str	r3, [r4, #8]
   10178:	0023      	movs	r3, r4
   1017a:	3334      	adds	r3, #52	; 0x34
   1017c:	701d      	strb	r5, [r3, #0]
   1017e:	0023      	movs	r3, r4
   10180:	3336      	adds	r3, #54	; 0x36
   10182:	701a      	strb	r2, [r3, #0]
   10184:	1ce3      	adds	r3, r4, #3
   10186:	77dd      	strb	r5, [r3, #31]
   10188:	0023      	movs	r3, r4
   1018a:	3333      	adds	r3, #51	; 0x33
   1018c:	701d      	strb	r5, [r3, #0]
   1018e:	2300      	movs	r3, #0
   10190:	77cb      	strb	r3, [r1, #31]
   10192:	2108      	movs	r1, #8
   10194:	82a1      	strh	r1, [r4, #20]
   10196:	0021      	movs	r1, r4
   10198:	3135      	adds	r1, #53	; 0x35
   1019a:	700a      	strb	r2, [r1, #0]
   1019c:	1d22      	adds	r2, r4, #4
   1019e:	77d5      	strb	r5, [r2, #31]
   101a0:	1d62      	adds	r2, r4, #5
   101a2:	77d3      	strb	r3, [r2, #31]
   101a4:	1da2      	adds	r2, r4, #6
   101a6:	77d3      	strb	r3, [r2, #31]
   101a8:	2194      	movs	r1, #148	; 0x94
   101aa:	22c1      	movs	r2, #193	; 0xc1
   101ac:	76a1      	strb	r1, [r4, #26]
   101ae:	7662      	strb	r2, [r4, #25]
   101b0:	76e2      	strb	r2, [r4, #27]
   101b2:	3991      	subs	r1, #145	; 0x91
   101b4:	1ca2      	adds	r2, r4, #2
   101b6:	77d1      	strb	r1, [r2, #31]
   101b8:	2234      	movs	r2, #52	; 0x34
   101ba:	7622      	strb	r2, [r4, #24]
   101bc:	0022      	movs	r2, r4
   101be:	317d      	adds	r1, #125	; 0x7d
   101c0:	3232      	adds	r2, #50	; 0x32
   101c2:	7011      	strb	r1, [r2, #0]
   101c4:	4a50      	ldr	r2, [pc, #320]	; (10308 <RADIO_InitDefaultAttributes+0x1ac>)
   101c6:	397e      	subs	r1, #126	; 0x7e
   101c8:	60e2      	str	r2, [r4, #12]
   101ca:	0022      	movs	r2, r4
   101cc:	3237      	adds	r2, #55	; 0x37
   101ce:	7011      	strb	r1, [r2, #0]
   101d0:	0022      	movs	r2, r4
   101d2:	3109      	adds	r1, #9
   101d4:	3238      	adds	r2, #56	; 0x38
   101d6:	7011      	strb	r1, [r2, #0]
   101d8:	0022      	movs	r2, r4
   101da:	3107      	adds	r1, #7
   101dc:	3239      	adds	r2, #57	; 0x39
   101de:	7011      	strb	r1, [r2, #0]
   101e0:	0022      	movs	r2, r4
   101e2:	322c      	adds	r2, #44	; 0x2c
   101e4:	7013      	strb	r3, [r2, #0]
   101e6:	4a49      	ldr	r2, [pc, #292]	; (1030c <RADIO_InitDefaultAttributes+0x1b0>)
   101e8:	82e3      	strh	r3, [r4, #22]
   101ea:	62a2      	str	r2, [r4, #40]	; 0x28
   101ec:	0022      	movs	r2, r4
   101ee:	324c      	adds	r2, #76	; 0x4c
   101f0:	8013      	strh	r3, [r2, #0]
   101f2:	0022      	movs	r2, r4
   101f4:	324e      	adds	r2, #78	; 0x4e
   101f6:	7013      	strb	r3, [r2, #0]
   101f8:	0022      	movs	r2, r4
   101fa:	324f      	adds	r2, #79	; 0x4f
   101fc:	7013      	strb	r3, [r2, #0]
   101fe:	0022      	movs	r2, r4
   10200:	3240      	adds	r2, #64	; 0x40
   10202:	7013      	strb	r3, [r2, #0]
   10204:	0022      	movs	r2, r4
   10206:	3241      	adds	r2, #65	; 0x41
   10208:	7013      	strb	r3, [r2, #0]
   1020a:	0022      	movs	r2, r4
   1020c:	3254      	adds	r2, #84	; 0x54
   1020e:	7013      	strb	r3, [r2, #0]
   10210:	0022      	movs	r2, r4
   10212:	3255      	adds	r2, #85	; 0x55
   10214:	7015      	strb	r5, [r2, #0]
   10216:	0022      	movs	r2, r4
   10218:	3257      	adds	r2, #87	; 0x57
   1021a:	6463      	str	r3, [r4, #68]	; 0x44
   1021c:	64a3      	str	r3, [r4, #72]	; 0x48
   1021e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   10220:	87e3      	strh	r3, [r4, #62]	; 0x3e
   10222:	7013      	strb	r3, [r2, #0]
   10224:	3730      	adds	r7, #48	; 0x30
   10226:	783b      	ldrb	r3, [r7, #0]
   10228:	2b00      	cmp	r3, #0
   1022a:	d151      	bne.n	102d0 <RADIO_InitDefaultAttributes+0x174>
   1022c:	4838      	ldr	r0, [pc, #224]	; (10310 <RADIO_InitDefaultAttributes+0x1b4>)
   1022e:	4e39      	ldr	r6, [pc, #228]	; (10314 <RADIO_InitDefaultAttributes+0x1b8>)
   10230:	47b0      	blx	r6
   10232:	2808      	cmp	r0, #8
   10234:	d149      	bne.n	102ca <RADIO_InitDefaultAttributes+0x16e>
   10236:	4838      	ldr	r0, [pc, #224]	; (10318 <RADIO_InitDefaultAttributes+0x1bc>)
   10238:	47b0      	blx	r6
   1023a:	2808      	cmp	r0, #8
   1023c:	d145      	bne.n	102ca <RADIO_InitDefaultAttributes+0x16e>
   1023e:	4837      	ldr	r0, [pc, #220]	; (1031c <RADIO_InitDefaultAttributes+0x1c0>)
   10240:	47b0      	blx	r6
   10242:	2808      	cmp	r0, #8
   10244:	d141      	bne.n	102ca <RADIO_InitDefaultAttributes+0x16e>
   10246:	4836      	ldr	r0, [pc, #216]	; (10320 <RADIO_InitDefaultAttributes+0x1c4>)
   10248:	47b0      	blx	r6
   1024a:	2808      	cmp	r0, #8
   1024c:	d13d      	bne.n	102ca <RADIO_InitDefaultAttributes+0x16e>
   1024e:	703d      	strb	r5, [r7, #0]
   10250:	4b34      	ldr	r3, [pc, #208]	; (10324 <RADIO_InitDefaultAttributes+0x1c8>)
   10252:	4798      	blx	r3
   10254:	4b34      	ldr	r3, [pc, #208]	; (10328 <RADIO_InitDefaultAttributes+0x1cc>)
   10256:	4798      	blx	r3
   10258:	2800      	cmp	r0, #0
   1025a:	d107      	bne.n	1026c <RADIO_InitDefaultAttributes+0x110>
   1025c:	0023      	movs	r3, r4
   1025e:	3355      	adds	r3, #85	; 0x55
   10260:	7018      	strb	r0, [r3, #0]
   10262:	4b32      	ldr	r3, [pc, #200]	; (1032c <RADIO_InitDefaultAttributes+0x1d0>)
   10264:	4798      	blx	r3
   10266:	0023      	movs	r3, r4
   10268:	3354      	adds	r3, #84	; 0x54
   1026a:	7018      	strb	r0, [r3, #0]
   1026c:	4b30      	ldr	r3, [pc, #192]	; (10330 <RADIO_InitDefaultAttributes+0x1d4>)
   1026e:	4798      	blx	r3
   10270:	2201      	movs	r2, #1
   10272:	2100      	movs	r1, #0
   10274:	0010      	movs	r0, r2
   10276:	4f2f      	ldr	r7, [pc, #188]	; (10334 <RADIO_InitDefaultAttributes+0x1d8>)
   10278:	47b8      	blx	r7
   1027a:	6820      	ldr	r0, [r4, #0]
   1027c:	4b2e      	ldr	r3, [pc, #184]	; (10338 <RADIO_InitDefaultAttributes+0x1dc>)
   1027e:	4798      	blx	r3
   10280:	2142      	movs	r1, #66	; 0x42
   10282:	203b      	movs	r0, #59	; 0x3b
   10284:	4d2d      	ldr	r5, [pc, #180]	; (1033c <RADIO_InitDefaultAttributes+0x1e0>)
   10286:	47a8      	blx	r5
   10288:	203b      	movs	r0, #59	; 0x3b
   1028a:	4b2d      	ldr	r3, [pc, #180]	; (10340 <RADIO_InitDefaultAttributes+0x1e4>)
   1028c:	4798      	blx	r3
   1028e:	2620      	movs	r6, #32
   10290:	4006      	ands	r6, r0
   10292:	d1f9      	bne.n	10288 <RADIO_InitDefaultAttributes+0x12c>
   10294:	2123      	movs	r1, #35	; 0x23
   10296:	200c      	movs	r0, #12
   10298:	47a8      	blx	r5
   1029a:	21aa      	movs	r1, #170	; 0xaa
   1029c:	201f      	movs	r0, #31
   1029e:	47a8      	blx	r5
   102a0:	21ff      	movs	r1, #255	; 0xff
   102a2:	2032      	movs	r0, #50	; 0x32
   102a4:	47a8      	blx	r5
   102a6:	2140      	movs	r1, #64	; 0x40
   102a8:	2031      	movs	r0, #49	; 0x31
   102aa:	47a8      	blx	r5
   102ac:	2201      	movs	r2, #1
   102ae:	0030      	movs	r0, r6
   102b0:	0011      	movs	r1, r2
   102b2:	47b8      	blx	r7
   102b4:	21ff      	movs	r1, #255	; 0xff
   102b6:	2023      	movs	r0, #35	; 0x23
   102b8:	47a8      	blx	r5
   102ba:	4b21      	ldr	r3, [pc, #132]	; (10340 <RADIO_InitDefaultAttributes+0x1e4>)
   102bc:	2042      	movs	r0, #66	; 0x42
   102be:	4798      	blx	r3
   102c0:	3431      	adds	r4, #49	; 0x31
   102c2:	4b20      	ldr	r3, [pc, #128]	; (10344 <RADIO_InitDefaultAttributes+0x1e8>)
   102c4:	7020      	strb	r0, [r4, #0]
   102c6:	4798      	blx	r3
   102c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102ca:	4b1f      	ldr	r3, [pc, #124]	; (10348 <RADIO_InitDefaultAttributes+0x1ec>)
   102cc:	4798      	blx	r3
   102ce:	e7bf      	b.n	10250 <RADIO_InitDefaultAttributes+0xf4>
   102d0:	0023      	movs	r3, r4
   102d2:	332d      	adds	r3, #45	; 0x2d
   102d4:	4d1d      	ldr	r5, [pc, #116]	; (1034c <RADIO_InitDefaultAttributes+0x1f0>)
   102d6:	7818      	ldrb	r0, [r3, #0]
   102d8:	47a8      	blx	r5
   102da:	0023      	movs	r3, r4
   102dc:	332e      	adds	r3, #46	; 0x2e
   102de:	7818      	ldrb	r0, [r3, #0]
   102e0:	47a8      	blx	r5
   102e2:	0023      	movs	r3, r4
   102e4:	332f      	adds	r3, #47	; 0x2f
   102e6:	7818      	ldrb	r0, [r3, #0]
   102e8:	47a8      	blx	r5
   102ea:	0023      	movs	r3, r4
   102ec:	3350      	adds	r3, #80	; 0x50
   102ee:	7818      	ldrb	r0, [r3, #0]
   102f0:	47a8      	blx	r5
   102f2:	e7ad      	b.n	10250 <RADIO_InitDefaultAttributes+0xf4>
   102f4:	20001c63 	.word	0x20001c63
   102f8:	20001728 	.word	0x20001728
   102fc:	33be27a0 	.word	0x33be27a0
   10300:	000061a8 	.word	0x000061a8
   10304:	0000c350 	.word	0x0000c350
   10308:	00003a98 	.word	0x00003a98
   1030c:	20001b60 	.word	0x20001b60
   10310:	20001755 	.word	0x20001755
   10314:	000098c1 	.word	0x000098c1
   10318:	20001756 	.word	0x20001756
   1031c:	20001757 	.word	0x20001757
   10320:	20001778 	.word	0x20001778
   10324:	00003fa5 	.word	0x00003fa5
   10328:	00004111 	.word	0x00004111
   1032c:	0000410d 	.word	0x0000410d
   10330:	0000fffd 	.word	0x0000fffd
   10334:	00009f51 	.word	0x00009f51
   10338:	0000f295 	.word	0x0000f295
   1033c:	00003fe5 	.word	0x00003fe5
   10340:	0000400d 	.word	0x0000400d
   10344:	00010141 	.word	0x00010141
   10348:	00009805 	.word	0x00009805
   1034c:	00009bf9 	.word	0x00009bf9

00010350 <RADIO_Receive>:
   10350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10352:	7803      	ldrb	r3, [r0, #0]
   10354:	0006      	movs	r6, r0
   10356:	4d24      	ldr	r5, [pc, #144]	; (103e8 <RADIO_Receive+0x98>)
   10358:	2b00      	cmp	r3, #0
   1035a:	d11d      	bne.n	10398 <RADIO_Receive+0x48>
   1035c:	782b      	ldrb	r3, [r5, #0]
   1035e:	2004      	movs	r0, #4
   10360:	2b01      	cmp	r3, #1
   10362:	d118      	bne.n	10396 <RADIO_Receive+0x46>
   10364:	4c21      	ldr	r4, [pc, #132]	; (103ec <RADIO_Receive+0x9c>)
   10366:	4f22      	ldr	r7, [pc, #136]	; (103f0 <RADIO_Receive+0xa0>)
   10368:	0023      	movs	r3, r4
   1036a:	332f      	adds	r3, #47	; 0x2f
   1036c:	7818      	ldrb	r0, [r3, #0]
   1036e:	47b8      	blx	r7
   10370:	0023      	movs	r3, r4
   10372:	3334      	adds	r3, #52	; 0x34
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	2b00      	cmp	r3, #0
   10378:	d102      	bne.n	10380 <RADIO_Receive+0x30>
   1037a:	342e      	adds	r4, #46	; 0x2e
   1037c:	7820      	ldrb	r0, [r4, #0]
   1037e:	47b8      	blx	r7
   10380:	8872      	ldrh	r2, [r6, #2]
   10382:	4b1c      	ldr	r3, [pc, #112]	; (103f4 <RADIO_Receive+0xa4>)
   10384:	2008      	movs	r0, #8
   10386:	801a      	strh	r2, [r3, #0]
   10388:	2304      	movs	r3, #4
   1038a:	702b      	strb	r3, [r5, #0]
   1038c:	4b1a      	ldr	r3, [pc, #104]	; (103f8 <RADIO_Receive+0xa8>)
   1038e:	4798      	blx	r3
   10390:	4b1a      	ldr	r3, [pc, #104]	; (103fc <RADIO_Receive+0xac>)
   10392:	4798      	blx	r3
   10394:	2000      	movs	r0, #0
   10396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10398:	782b      	ldrb	r3, [r5, #0]
   1039a:	2000      	movs	r0, #0
   1039c:	2b01      	cmp	r3, #1
   1039e:	d0fa      	beq.n	10396 <RADIO_Receive+0x46>
   103a0:	782b      	ldrb	r3, [r5, #0]
   103a2:	3003      	adds	r0, #3
   103a4:	2b04      	cmp	r3, #4
   103a6:	d1f6      	bne.n	10396 <RADIO_Receive+0x46>
   103a8:	4c10      	ldr	r4, [pc, #64]	; (103ec <RADIO_Receive+0x9c>)
   103aa:	4e11      	ldr	r6, [pc, #68]	; (103f0 <RADIO_Receive+0xa0>)
   103ac:	0023      	movs	r3, r4
   103ae:	332f      	adds	r3, #47	; 0x2f
   103b0:	7818      	ldrb	r0, [r3, #0]
   103b2:	47b0      	blx	r6
   103b4:	0023      	movs	r3, r4
   103b6:	3334      	adds	r3, #52	; 0x34
   103b8:	781b      	ldrb	r3, [r3, #0]
   103ba:	2b00      	cmp	r3, #0
   103bc:	d103      	bne.n	103c6 <RADIO_Receive+0x76>
   103be:	0023      	movs	r3, r4
   103c0:	332e      	adds	r3, #46	; 0x2e
   103c2:	7818      	ldrb	r0, [r3, #0]
   103c4:	47b0      	blx	r6
   103c6:	2200      	movs	r2, #0
   103c8:	3434      	adds	r4, #52	; 0x34
   103ca:	7821      	ldrb	r1, [r4, #0]
   103cc:	0010      	movs	r0, r2
   103ce:	4b0c      	ldr	r3, [pc, #48]	; (10400 <RADIO_Receive+0xb0>)
   103d0:	4798      	blx	r3
   103d2:	4b0c      	ldr	r3, [pc, #48]	; (10404 <RADIO_Receive+0xb4>)
   103d4:	4798      	blx	r3
   103d6:	2301      	movs	r3, #1
   103d8:	2008      	movs	r0, #8
   103da:	4c0b      	ldr	r4, [pc, #44]	; (10408 <RADIO_Receive+0xb8>)
   103dc:	702b      	strb	r3, [r5, #0]
   103de:	47a0      	blx	r4
   103e0:	2002      	movs	r0, #2
   103e2:	47a0      	blx	r4
   103e4:	e7d6      	b.n	10394 <RADIO_Receive+0x44>
   103e6:	46c0      	nop			; (mov r8, r8)
   103e8:	20001c63 	.word	0x20001c63
   103ec:	20001728 	.word	0x20001728
   103f0:	00009bf9 	.word	0x00009bf9
   103f4:	20000f38 	.word	0x20000f38
   103f8:	0000f89d 	.word	0x0000f89d
   103fc:	0000fffd 	.word	0x0000fffd
   10400:	00009f51 	.word	0x00009f51
   10404:	00010141 	.word	0x00010141
   10408:	0000f8c9 	.word	0x0000f8c9

0001040c <RADIO_TxDoneHandler>:
   1040c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1040e:	4b35      	ldr	r3, [pc, #212]	; (104e4 <RADIO_TxDoneHandler+0xd8>)
   10410:	b087      	sub	sp, #28
   10412:	881a      	ldrh	r2, [r3, #0]
   10414:	06d2      	lsls	r2, r2, #27
   10416:	0fd2      	lsrs	r2, r2, #31
   10418:	9200      	str	r2, [sp, #0]
   1041a:	466a      	mov	r2, sp
   1041c:	7810      	ldrb	r0, [r2, #0]
   1041e:	881a      	ldrh	r2, [r3, #0]
   10420:	2801      	cmp	r0, #1
   10422:	d12b      	bne.n	1047c <RADIO_TxDoneHandler+0x70>
   10424:	4c30      	ldr	r4, [pc, #192]	; (104e8 <RADIO_TxDoneHandler+0xdc>)
   10426:	2110      	movs	r1, #16
   10428:	0027      	movs	r7, r4
   1042a:	2500      	movs	r5, #0
   1042c:	438a      	bics	r2, r1
   1042e:	801a      	strh	r2, [r3, #0]
   10430:	3734      	adds	r7, #52	; 0x34
   10432:	0002      	movs	r2, r0
   10434:	7839      	ldrb	r1, [r7, #0]
   10436:	4b2d      	ldr	r3, [pc, #180]	; (104ec <RADIO_TxDoneHandler+0xe0>)
   10438:	4798      	blx	r3
   1043a:	68e3      	ldr	r3, [r4, #12]
   1043c:	ae03      	add	r6, sp, #12
   1043e:	9304      	str	r3, [sp, #16]
   10440:	7035      	strb	r5, [r6, #0]
   10442:	002a      	movs	r2, r5
   10444:	4b29      	ldr	r3, [pc, #164]	; (104ec <RADIO_TxDoneHandler+0xe0>)
   10446:	7839      	ldrb	r1, [r7, #0]
   10448:	0028      	movs	r0, r5
   1044a:	4798      	blx	r3
   1044c:	466a      	mov	r2, sp
   1044e:	4b28      	ldr	r3, [pc, #160]	; (104f0 <RADIO_TxDoneHandler+0xe4>)
   10450:	7812      	ldrb	r2, [r2, #0]
   10452:	701a      	strb	r2, [r3, #0]
   10454:	0023      	movs	r3, r4
   10456:	3357      	adds	r3, #87	; 0x57
   10458:	701d      	strb	r5, [r3, #0]
   1045a:	4b26      	ldr	r3, [pc, #152]	; (104f4 <RADIO_TxDoneHandler+0xe8>)
   1045c:	781b      	ldrb	r3, [r3, #0]
   1045e:	075b      	lsls	r3, r3, #29
   10460:	d505      	bpl.n	1046e <RADIO_TxDoneHandler+0x62>
   10462:	6923      	ldr	r3, [r4, #16]
   10464:	42ab      	cmp	r3, r5
   10466:	d002      	beq.n	1046e <RADIO_TxDoneHandler+0x62>
   10468:	0031      	movs	r1, r6
   1046a:	2004      	movs	r0, #4
   1046c:	4798      	blx	r3
   1046e:	4b22      	ldr	r3, [pc, #136]	; (104f8 <RADIO_TxDoneHandler+0xec>)
   10470:	4798      	blx	r3
   10472:	4b22      	ldr	r3, [pc, #136]	; (104fc <RADIO_TxDoneHandler+0xf0>)
   10474:	4798      	blx	r3
   10476:	2000      	movs	r0, #0
   10478:	b007      	add	sp, #28
   1047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1047c:	07d2      	lsls	r2, r2, #31
   1047e:	d402      	bmi.n	10486 <RADIO_TxDoneHandler+0x7a>
   10480:	881a      	ldrh	r2, [r3, #0]
   10482:	0752      	lsls	r2, r2, #29
   10484:	d527      	bpl.n	104d6 <RADIO_TxDoneHandler+0xca>
   10486:	2601      	movs	r6, #1
   10488:	2104      	movs	r1, #4
   1048a:	881a      	ldrh	r2, [r3, #0]
   1048c:	4f16      	ldr	r7, [pc, #88]	; (104e8 <RADIO_TxDoneHandler+0xdc>)
   1048e:	43b2      	bics	r2, r6
   10490:	801a      	strh	r2, [r3, #0]
   10492:	881a      	ldrh	r2, [r3, #0]
   10494:	2400      	movs	r4, #0
   10496:	438a      	bics	r2, r1
   10498:	801a      	strh	r2, [r3, #0]
   1049a:	4b19      	ldr	r3, [pc, #100]	; (10500 <RADIO_TxDoneHandler+0xf4>)
   1049c:	ad03      	add	r5, sp, #12
   1049e:	681b      	ldr	r3, [r3, #0]
   104a0:	702c      	strb	r4, [r5, #0]
   104a2:	9304      	str	r3, [sp, #16]
   104a4:	003b      	movs	r3, r7
   104a6:	3334      	adds	r3, #52	; 0x34
   104a8:	7819      	ldrb	r1, [r3, #0]
   104aa:	0022      	movs	r2, r4
   104ac:	0020      	movs	r0, r4
   104ae:	4b0f      	ldr	r3, [pc, #60]	; (104ec <RADIO_TxDoneHandler+0xe0>)
   104b0:	4798      	blx	r3
   104b2:	4b14      	ldr	r3, [pc, #80]	; (10504 <RADIO_TxDoneHandler+0xf8>)
   104b4:	4798      	blx	r3
   104b6:	4b0e      	ldr	r3, [pc, #56]	; (104f0 <RADIO_TxDoneHandler+0xe4>)
   104b8:	701e      	strb	r6, [r3, #0]
   104ba:	003b      	movs	r3, r7
   104bc:	3357      	adds	r3, #87	; 0x57
   104be:	701c      	strb	r4, [r3, #0]
   104c0:	4b0c      	ldr	r3, [pc, #48]	; (104f4 <RADIO_TxDoneHandler+0xe8>)
   104c2:	781b      	ldrb	r3, [r3, #0]
   104c4:	079b      	lsls	r3, r3, #30
   104c6:	d5d6      	bpl.n	10476 <RADIO_TxDoneHandler+0x6a>
   104c8:	693b      	ldr	r3, [r7, #16]
   104ca:	42a3      	cmp	r3, r4
   104cc:	d0d3      	beq.n	10476 <RADIO_TxDoneHandler+0x6a>
   104ce:	0029      	movs	r1, r5
   104d0:	2002      	movs	r0, #2
   104d2:	4798      	blx	r3
   104d4:	e7cf      	b.n	10476 <RADIO_TxDoneHandler+0x6a>
   104d6:	881b      	ldrh	r3, [r3, #0]
   104d8:	059b      	lsls	r3, r3, #22
   104da:	d5cc      	bpl.n	10476 <RADIO_TxDoneHandler+0x6a>
   104dc:	4b0a      	ldr	r3, [pc, #40]	; (10508 <RADIO_TxDoneHandler+0xfc>)
   104de:	4798      	blx	r3
   104e0:	e7c9      	b.n	10476 <RADIO_TxDoneHandler+0x6a>
   104e2:	46c0      	nop			; (mov r8, r8)
   104e4:	20001c60 	.word	0x20001c60
   104e8:	20001728 	.word	0x20001728
   104ec:	00009f51 	.word	0x00009f51
   104f0:	20001c63 	.word	0x20001c63
   104f4:	20001c62 	.word	0x20001c62
   104f8:	00003fa5 	.word	0x00003fa5
   104fc:	0001015d 	.word	0x0001015d
   10500:	20000f40 	.word	0x20000f40
   10504:	00010141 	.word	0x00010141
   10508:	000108cd 	.word	0x000108cd

0001050c <RADIO_RxDoneHandler>:
   1050c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1050e:	4b95      	ldr	r3, [pc, #596]	; (10764 <RADIO_RxDoneHandler+0x258>)
   10510:	b085      	sub	sp, #20
   10512:	881c      	ldrh	r4, [r3, #0]
   10514:	881a      	ldrh	r2, [r3, #0]
   10516:	06a4      	lsls	r4, r4, #26
   10518:	0fe4      	lsrs	r4, r4, #31
   1051a:	b2e0      	uxtb	r0, r4
   1051c:	2801      	cmp	r0, #1
   1051e:	d126      	bne.n	1056e <RADIO_RxDoneHandler+0x62>
   10520:	4d91      	ldr	r5, [pc, #580]	; (10768 <RADIO_RxDoneHandler+0x25c>)
   10522:	2120      	movs	r1, #32
   10524:	002e      	movs	r6, r5
   10526:	438a      	bics	r2, r1
   10528:	801a      	strh	r2, [r3, #0]
   1052a:	3634      	adds	r6, #52	; 0x34
   1052c:	0002      	movs	r2, r0
   1052e:	7831      	ldrb	r1, [r6, #0]
   10530:	4f8e      	ldr	r7, [pc, #568]	; (1076c <RADIO_RxDoneHandler+0x260>)
   10532:	47b8      	blx	r7
   10534:	2200      	movs	r2, #0
   10536:	7831      	ldrb	r1, [r6, #0]
   10538:	0010      	movs	r0, r2
   1053a:	47b8      	blx	r7
   1053c:	4b8c      	ldr	r3, [pc, #560]	; (10770 <RADIO_RxDoneHandler+0x264>)
   1053e:	4798      	blx	r3
   10540:	4b8c      	ldr	r3, [pc, #560]	; (10774 <RADIO_RxDoneHandler+0x268>)
   10542:	002a      	movs	r2, r5
   10544:	701c      	strb	r4, [r3, #0]
   10546:	2300      	movs	r3, #0
   10548:	322c      	adds	r2, #44	; 0x2c
   1054a:	7013      	strb	r3, [r2, #0]
   1054c:	002a      	movs	r2, r5
   1054e:	a901      	add	r1, sp, #4
   10550:	3257      	adds	r2, #87	; 0x57
   10552:	7013      	strb	r3, [r2, #0]
   10554:	700b      	strb	r3, [r1, #0]
   10556:	4b88      	ldr	r3, [pc, #544]	; (10778 <RADIO_RxDoneHandler+0x26c>)
   10558:	781b      	ldrb	r3, [r3, #0]
   1055a:	071b      	lsls	r3, r3, #28
   1055c:	d504      	bpl.n	10568 <RADIO_RxDoneHandler+0x5c>
   1055e:	692b      	ldr	r3, [r5, #16]
   10560:	2008      	movs	r0, #8
   10562:	2b00      	cmp	r3, #0
   10564:	d000      	beq.n	10568 <RADIO_RxDoneHandler+0x5c>
   10566:	e084      	b.n	10672 <RADIO_RxDoneHandler+0x166>
   10568:	2000      	movs	r0, #0
   1056a:	b005      	add	sp, #20
   1056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1056e:	0652      	lsls	r2, r2, #25
   10570:	d402      	bmi.n	10578 <RADIO_RxDoneHandler+0x6c>
   10572:	881a      	ldrh	r2, [r3, #0]
   10574:	0612      	lsls	r2, r2, #24
   10576:	d523      	bpl.n	105c0 <RADIO_RxDoneHandler+0xb4>
   10578:	2140      	movs	r1, #64	; 0x40
   1057a:	881a      	ldrh	r2, [r3, #0]
   1057c:	4c7a      	ldr	r4, [pc, #488]	; (10768 <RADIO_RxDoneHandler+0x25c>)
   1057e:	438a      	bics	r2, r1
   10580:	801a      	strh	r2, [r3, #0]
   10582:	881a      	ldrh	r2, [r3, #0]
   10584:	1849      	adds	r1, r1, r1
   10586:	438a      	bics	r2, r1
   10588:	801a      	strh	r2, [r3, #0]
   1058a:	0023      	movs	r3, r4
   1058c:	2200      	movs	r2, #0
   1058e:	3334      	adds	r3, #52	; 0x34
   10590:	7819      	ldrb	r1, [r3, #0]
   10592:	0010      	movs	r0, r2
   10594:	4b75      	ldr	r3, [pc, #468]	; (1076c <RADIO_RxDoneHandler+0x260>)
   10596:	4798      	blx	r3
   10598:	4b75      	ldr	r3, [pc, #468]	; (10770 <RADIO_RxDoneHandler+0x264>)
   1059a:	4798      	blx	r3
   1059c:	2201      	movs	r2, #1
   1059e:	4b75      	ldr	r3, [pc, #468]	; (10774 <RADIO_RxDoneHandler+0x268>)
   105a0:	a901      	add	r1, sp, #4
   105a2:	701a      	strb	r2, [r3, #0]
   105a4:	0022      	movs	r2, r4
   105a6:	2300      	movs	r3, #0
   105a8:	322c      	adds	r2, #44	; 0x2c
   105aa:	7013      	strb	r3, [r2, #0]
   105ac:	0022      	movs	r2, r4
   105ae:	3257      	adds	r2, #87	; 0x57
   105b0:	7013      	strb	r3, [r2, #0]
   105b2:	700b      	strb	r3, [r1, #0]
   105b4:	4b70      	ldr	r3, [pc, #448]	; (10778 <RADIO_RxDoneHandler+0x26c>)
   105b6:	781b      	ldrb	r3, [r3, #0]
   105b8:	071b      	lsls	r3, r3, #28
   105ba:	d5d5      	bpl.n	10568 <RADIO_RxDoneHandler+0x5c>
   105bc:	6923      	ldr	r3, [r4, #16]
   105be:	e7cf      	b.n	10560 <RADIO_RxDoneHandler+0x54>
   105c0:	881a      	ldrh	r2, [r3, #0]
   105c2:	0792      	lsls	r2, r2, #30
   105c4:	d56e      	bpl.n	106a4 <RADIO_RxDoneHandler+0x198>
   105c6:	2102      	movs	r1, #2
   105c8:	881a      	ldrh	r2, [r3, #0]
   105ca:	4d6c      	ldr	r5, [pc, #432]	; (1077c <RADIO_RxDoneHandler+0x270>)
   105cc:	438a      	bics	r2, r1
   105ce:	801a      	strh	r2, [r3, #0]
   105d0:	2013      	movs	r0, #19
   105d2:	47a8      	blx	r5
   105d4:	4c64      	ldr	r4, [pc, #400]	; (10768 <RADIO_RxDoneHandler+0x25c>)
   105d6:	2100      	movs	r1, #0
   105d8:	0026      	movs	r6, r4
   105da:	362c      	adds	r6, #44	; 0x2c
   105dc:	7030      	strb	r0, [r6, #0]
   105de:	4b68      	ldr	r3, [pc, #416]	; (10780 <RADIO_RxDoneHandler+0x274>)
   105e0:	200d      	movs	r0, #13
   105e2:	4798      	blx	r3
   105e4:	7832      	ldrb	r2, [r6, #0]
   105e6:	4b67      	ldr	r3, [pc, #412]	; (10784 <RADIO_RxDoneHandler+0x278>)
   105e8:	b2d2      	uxtb	r2, r2
   105ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   105ec:	2000      	movs	r0, #0
   105ee:	4798      	blx	r3
   105f0:	2019      	movs	r0, #25
   105f2:	47a8      	blx	r5
   105f4:	0023      	movs	r3, r4
   105f6:	b240      	sxtb	r0, r0
   105f8:	3332      	adds	r3, #50	; 0x32
   105fa:	2800      	cmp	r0, #0
   105fc:	da3b      	bge.n	10676 <RADIO_RxDoneHandler+0x16a>
   105fe:	4240      	negs	r0, r0
   10600:	1080      	asrs	r0, r0, #2
   10602:	4240      	negs	r0, r0
   10604:	7018      	strb	r0, [r3, #0]
   10606:	201a      	movs	r0, #26
   10608:	47a8      	blx	r5
   1060a:	0022      	movs	r2, r4
   1060c:	3232      	adds	r2, #50	; 0x32
   1060e:	7812      	ldrb	r2, [r2, #0]
   10610:	b203      	sxth	r3, r0
   10612:	b252      	sxtb	r2, r2
   10614:	4d5c      	ldr	r5, [pc, #368]	; (10788 <RADIO_RxDoneHandler+0x27c>)
   10616:	2a00      	cmp	r2, #0
   10618:	da36      	bge.n	10688 <RADIO_RxDoneHandler+0x17c>
   1061a:	6821      	ldr	r1, [r4, #0]
   1061c:	4e5b      	ldr	r6, [pc, #364]	; (1078c <RADIO_RxDoneHandler+0x280>)
   1061e:	198e      	adds	r6, r1, r6
   10620:	42ae      	cmp	r6, r5
   10622:	d82a      	bhi.n	1067a <RADIO_RxDoneHandler+0x16e>
   10624:	3263      	adds	r2, #99	; 0x63
   10626:	1880      	adds	r0, r0, r2
   10628:	111b      	asrs	r3, r3, #4
   1062a:	1818      	adds	r0, r3, r0
   1062c:	0023      	movs	r3, r4
   1062e:	3356      	adds	r3, #86	; 0x56
   10630:	7018      	strb	r0, [r3, #0]
   10632:	0023      	movs	r3, r4
   10634:	2200      	movs	r2, #0
   10636:	3334      	adds	r3, #52	; 0x34
   10638:	7819      	ldrb	r1, [r3, #0]
   1063a:	0010      	movs	r0, r2
   1063c:	4b4b      	ldr	r3, [pc, #300]	; (1076c <RADIO_RxDoneHandler+0x260>)
   1063e:	4798      	blx	r3
   10640:	4b4b      	ldr	r3, [pc, #300]	; (10770 <RADIO_RxDoneHandler+0x264>)
   10642:	4798      	blx	r3
   10644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10646:	a901      	add	r1, sp, #4
   10648:	604b      	str	r3, [r1, #4]
   1064a:	0023      	movs	r3, r4
   1064c:	332c      	adds	r3, #44	; 0x2c
   1064e:	781b      	ldrb	r3, [r3, #0]
   10650:	2201      	movs	r2, #1
   10652:	720b      	strb	r3, [r1, #8]
   10654:	2300      	movs	r3, #0
   10656:	700b      	strb	r3, [r1, #0]
   10658:	4b46      	ldr	r3, [pc, #280]	; (10774 <RADIO_RxDoneHandler+0x268>)
   1065a:	701a      	strb	r2, [r3, #0]
   1065c:	4b46      	ldr	r3, [pc, #280]	; (10778 <RADIO_RxDoneHandler+0x26c>)
   1065e:	7818      	ldrb	r0, [r3, #0]
   10660:	07c0      	lsls	r0, r0, #31
   10662:	0fc0      	lsrs	r0, r0, #31
   10664:	4290      	cmp	r0, r2
   10666:	d000      	beq.n	1066a <RADIO_RxDoneHandler+0x15e>
   10668:	e77e      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   1066a:	6923      	ldr	r3, [r4, #16]
   1066c:	2b00      	cmp	r3, #0
   1066e:	d100      	bne.n	10672 <RADIO_RxDoneHandler+0x166>
   10670:	e77a      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   10672:	4798      	blx	r3
   10674:	e778      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   10676:	1080      	asrs	r0, r0, #2
   10678:	e7c4      	b.n	10604 <RADIO_RxDoneHandler+0xf8>
   1067a:	4d45      	ldr	r5, [pc, #276]	; (10790 <RADIO_RxDoneHandler+0x284>)
   1067c:	1949      	adds	r1, r1, r5
   1067e:	4d45      	ldr	r5, [pc, #276]	; (10794 <RADIO_RxDoneHandler+0x288>)
   10680:	42a9      	cmp	r1, r5
   10682:	d8d6      	bhi.n	10632 <RADIO_RxDoneHandler+0x126>
   10684:	325c      	adds	r2, #92	; 0x5c
   10686:	e7ce      	b.n	10626 <RADIO_RxDoneHandler+0x11a>
   10688:	6822      	ldr	r2, [r4, #0]
   1068a:	4940      	ldr	r1, [pc, #256]	; (1078c <RADIO_RxDoneHandler+0x280>)
   1068c:	1851      	adds	r1, r2, r1
   1068e:	42a9      	cmp	r1, r5
   10690:	d801      	bhi.n	10696 <RADIO_RxDoneHandler+0x18a>
   10692:	3063      	adds	r0, #99	; 0x63
   10694:	e7c8      	b.n	10628 <RADIO_RxDoneHandler+0x11c>
   10696:	493e      	ldr	r1, [pc, #248]	; (10790 <RADIO_RxDoneHandler+0x284>)
   10698:	1852      	adds	r2, r2, r1
   1069a:	493e      	ldr	r1, [pc, #248]	; (10794 <RADIO_RxDoneHandler+0x288>)
   1069c:	428a      	cmp	r2, r1
   1069e:	d8c8      	bhi.n	10632 <RADIO_RxDoneHandler+0x126>
   106a0:	305c      	adds	r0, #92	; 0x5c
   106a2:	e7c1      	b.n	10628 <RADIO_RxDoneHandler+0x11c>
   106a4:	881a      	ldrh	r2, [r3, #0]
   106a6:	0712      	lsls	r2, r2, #28
   106a8:	0fd5      	lsrs	r5, r2, #31
   106aa:	2a00      	cmp	r2, #0
   106ac:	da27      	bge.n	106fe <RADIO_RxDoneHandler+0x1f2>
   106ae:	2108      	movs	r1, #8
   106b0:	881a      	ldrh	r2, [r3, #0]
   106b2:	4c2d      	ldr	r4, [pc, #180]	; (10768 <RADIO_RxDoneHandler+0x25c>)
   106b4:	438a      	bics	r2, r1
   106b6:	801a      	strh	r2, [r3, #0]
   106b8:	0023      	movs	r3, r4
   106ba:	2280      	movs	r2, #128	; 0x80
   106bc:	3332      	adds	r3, #50	; 0x32
   106be:	701a      	strb	r2, [r3, #0]
   106c0:	0023      	movs	r3, r4
   106c2:	2200      	movs	r2, #0
   106c4:	3334      	adds	r3, #52	; 0x34
   106c6:	7819      	ldrb	r1, [r3, #0]
   106c8:	0010      	movs	r0, r2
   106ca:	4b28      	ldr	r3, [pc, #160]	; (1076c <RADIO_RxDoneHandler+0x260>)
   106cc:	4798      	blx	r3
   106ce:	4b28      	ldr	r3, [pc, #160]	; (10770 <RADIO_RxDoneHandler+0x264>)
   106d0:	4798      	blx	r3
   106d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   106d4:	a901      	add	r1, sp, #4
   106d6:	604b      	str	r3, [r1, #4]
   106d8:	0023      	movs	r3, r4
   106da:	332c      	adds	r3, #44	; 0x2c
   106dc:	781b      	ldrb	r3, [r3, #0]
   106de:	0022      	movs	r2, r4
   106e0:	720b      	strb	r3, [r1, #8]
   106e2:	2300      	movs	r3, #0
   106e4:	3257      	adds	r2, #87	; 0x57
   106e6:	7013      	strb	r3, [r2, #0]
   106e8:	700b      	strb	r3, [r1, #0]
   106ea:	4b22      	ldr	r3, [pc, #136]	; (10774 <RADIO_RxDoneHandler+0x268>)
   106ec:	701d      	strb	r5, [r3, #0]
   106ee:	4b22      	ldr	r3, [pc, #136]	; (10778 <RADIO_RxDoneHandler+0x26c>)
   106f0:	7818      	ldrb	r0, [r3, #0]
   106f2:	07c0      	lsls	r0, r0, #31
   106f4:	0fc0      	lsrs	r0, r0, #31
   106f6:	2801      	cmp	r0, #1
   106f8:	d000      	beq.n	106fc <RADIO_RxDoneHandler+0x1f0>
   106fa:	e735      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   106fc:	e7b5      	b.n	1066a <RADIO_RxDoneHandler+0x15e>
   106fe:	881a      	ldrh	r2, [r3, #0]
   10700:	05d2      	lsls	r2, r2, #23
   10702:	0fd5      	lsrs	r5, r2, #31
   10704:	2a00      	cmp	r2, #0
   10706:	db00      	blt.n	1070a <RADIO_RxDoneHandler+0x1fe>
   10708:	e72e      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   1070a:	4c17      	ldr	r4, [pc, #92]	; (10768 <RADIO_RxDoneHandler+0x25c>)
   1070c:	881a      	ldrh	r2, [r3, #0]
   1070e:	0026      	movs	r6, r4
   10710:	4921      	ldr	r1, [pc, #132]	; (10798 <RADIO_RxDoneHandler+0x28c>)
   10712:	362c      	adds	r6, #44	; 0x2c
   10714:	400a      	ands	r2, r1
   10716:	801a      	strh	r2, [r3, #0]
   10718:	7832      	ldrb	r2, [r6, #0]
   1071a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1071c:	b2d2      	uxtb	r2, r2
   1071e:	2000      	movs	r0, #0
   10720:	4b18      	ldr	r3, [pc, #96]	; (10784 <RADIO_RxDoneHandler+0x278>)
   10722:	4798      	blx	r3
   10724:	0023      	movs	r3, r4
   10726:	2200      	movs	r2, #0
   10728:	3334      	adds	r3, #52	; 0x34
   1072a:	7819      	ldrb	r1, [r3, #0]
   1072c:	0010      	movs	r0, r2
   1072e:	4b0f      	ldr	r3, [pc, #60]	; (1076c <RADIO_RxDoneHandler+0x260>)
   10730:	4798      	blx	r3
   10732:	4b0f      	ldr	r3, [pc, #60]	; (10770 <RADIO_RxDoneHandler+0x264>)
   10734:	4798      	blx	r3
   10736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10738:	a901      	add	r1, sp, #4
   1073a:	604b      	str	r3, [r1, #4]
   1073c:	7833      	ldrb	r3, [r6, #0]
   1073e:	0022      	movs	r2, r4
   10740:	720b      	strb	r3, [r1, #8]
   10742:	2300      	movs	r3, #0
   10744:	3257      	adds	r2, #87	; 0x57
   10746:	7013      	strb	r3, [r2, #0]
   10748:	700b      	strb	r3, [r1, #0]
   1074a:	4b0a      	ldr	r3, [pc, #40]	; (10774 <RADIO_RxDoneHandler+0x268>)
   1074c:	701d      	strb	r5, [r3, #0]
   1074e:	4b0a      	ldr	r3, [pc, #40]	; (10778 <RADIO_RxDoneHandler+0x26c>)
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	06db      	lsls	r3, r3, #27
   10754:	d400      	bmi.n	10758 <RADIO_RxDoneHandler+0x24c>
   10756:	e707      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   10758:	6923      	ldr	r3, [r4, #16]
   1075a:	2b00      	cmp	r3, #0
   1075c:	d100      	bne.n	10760 <RADIO_RxDoneHandler+0x254>
   1075e:	e703      	b.n	10568 <RADIO_RxDoneHandler+0x5c>
   10760:	2010      	movs	r0, #16
   10762:	e786      	b.n	10672 <RADIO_RxDoneHandler+0x166>
   10764:	20001c60 	.word	0x20001c60
   10768:	20001728 	.word	0x20001728
   1076c:	00009f51 	.word	0x00009f51
   10770:	00010141 	.word	0x00010141
   10774:	20001c63 	.word	0x20001c63
   10778:	20001c62 	.word	0x20001c62
   1077c:	0000400d 	.word	0x0000400d
   10780:	00003fe5 	.word	0x00003fe5
   10784:	00004079 	.word	0x00004079
   10788:	096ae380 	.word	0x096ae380
   1078c:	cc9eec80 	.word	0xcc9eec80
   10790:	e78fe580 	.word	0xe78fe580
   10794:	06dac2c0 	.word	0x06dac2c0
   10798:	fffffeff 	.word	0xfffffeff

0001079c <Radio_LBTScanTimeout>:
   1079c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1079e:	4c1c      	ldr	r4, [pc, #112]	; (10810 <Radio_LBTScanTimeout+0x74>)
   107a0:	0025      	movs	r5, r4
   107a2:	0023      	movs	r3, r4
   107a4:	354f      	adds	r5, #79	; 0x4f
   107a6:	7829      	ldrb	r1, [r5, #0]
   107a8:	3340      	adds	r3, #64	; 0x40
   107aa:	3101      	adds	r1, #1
   107ac:	b2c9      	uxtb	r1, r1
   107ae:	7029      	strb	r1, [r5, #0]
   107b0:	781b      	ldrb	r3, [r3, #0]
   107b2:	428b      	cmp	r3, r1
   107b4:	d315      	bcc.n	107e2 <Radio_LBTScanTimeout+0x46>
   107b6:	260e      	movs	r6, #14
   107b8:	446e      	add	r6, sp
   107ba:	4b16      	ldr	r3, [pc, #88]	; (10814 <Radio_LBTScanTimeout+0x78>)
   107bc:	0030      	movs	r0, r6
   107be:	4798      	blx	r3
   107c0:	2300      	movs	r3, #0
   107c2:	5ef2      	ldrsh	r2, [r6, r3]
   107c4:	782b      	ldrb	r3, [r5, #0]
   107c6:	4353      	muls	r3, r2
   107c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   107ca:	189b      	adds	r3, r3, r2
   107cc:	6463      	str	r3, [r4, #68]	; 0x44
   107ce:	0023      	movs	r3, r4
   107d0:	2200      	movs	r2, #0
   107d2:	3350      	adds	r3, #80	; 0x50
   107d4:	7818      	ldrb	r0, [r3, #0]
   107d6:	9200      	str	r2, [sp, #0]
   107d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   107da:	4b0f      	ldr	r3, [pc, #60]	; (10818 <Radio_LBTScanTimeout+0x7c>)
   107dc:	4c0f      	ldr	r4, [pc, #60]	; (1081c <Radio_LBTScanTimeout+0x80>)
   107de:	47a0      	blx	r4
   107e0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   107e2:	2380      	movs	r3, #128	; 0x80
   107e4:	4a0e      	ldr	r2, [pc, #56]	; (10820 <Radio_LBTScanTimeout+0x84>)
   107e6:	009b      	lsls	r3, r3, #2
   107e8:	8810      	ldrh	r0, [r2, #0]
   107ea:	4303      	orrs	r3, r0
   107ec:	8013      	strh	r3, [r2, #0]
   107ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   107f0:	0058      	lsls	r0, r3, #1
   107f2:	1e4b      	subs	r3, r1, #1
   107f4:	4359      	muls	r1, r3
   107f6:	4b0b      	ldr	r3, [pc, #44]	; (10824 <Radio_LBTScanTimeout+0x88>)
   107f8:	b289      	uxth	r1, r1
   107fa:	4798      	blx	r3
   107fc:	0023      	movs	r3, r4
   107fe:	334c      	adds	r3, #76	; 0x4c
   10800:	8018      	strh	r0, [r3, #0]
   10802:	2300      	movs	r3, #0
   10804:	2001      	movs	r0, #1
   10806:	702b      	strb	r3, [r5, #0]
   10808:	6463      	str	r3, [r4, #68]	; 0x44
   1080a:	4b07      	ldr	r3, [pc, #28]	; (10828 <Radio_LBTScanTimeout+0x8c>)
   1080c:	4798      	blx	r3
   1080e:	e7e7      	b.n	107e0 <Radio_LBTScanTimeout+0x44>
   10810:	20001728 	.word	0x20001728
   10814:	0000a115 	.word	0x0000a115
   10818:	0001079d 	.word	0x0001079d
   1081c:	000098f5 	.word	0x000098f5
   10820:	20001c60 	.word	0x20001c60
   10824:	00010ad1 	.word	0x00010ad1
   10828:	0000f89d 	.word	0x0000f89d

0001082c <RADIO_ScanHandler>:
   1082c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1082e:	4b1e      	ldr	r3, [pc, #120]	; (108a8 <RADIO_ScanHandler+0x7c>)
   10830:	4798      	blx	r3
   10832:	2000      	movs	r0, #0
   10834:	4b1d      	ldr	r3, [pc, #116]	; (108ac <RADIO_ScanHandler+0x80>)
   10836:	4798      	blx	r3
   10838:	4b1d      	ldr	r3, [pc, #116]	; (108b0 <RADIO_ScanHandler+0x84>)
   1083a:	2004      	movs	r0, #4
   1083c:	4798      	blx	r3
   1083e:	4d1d      	ldr	r5, [pc, #116]	; (108b4 <RADIO_ScanHandler+0x88>)
   10840:	2600      	movs	r6, #0
   10842:	002b      	movs	r3, r5
   10844:	334c      	adds	r3, #76	; 0x4c
   10846:	801e      	strh	r6, [r3, #0]
   10848:	002b      	movs	r3, r5
   1084a:	3334      	adds	r3, #52	; 0x34
   1084c:	781c      	ldrb	r4, [r3, #0]
   1084e:	2c01      	cmp	r4, #1
   10850:	d11e      	bne.n	10890 <RADIO_ScanHandler+0x64>
   10852:	0022      	movs	r2, r4
   10854:	0021      	movs	r1, r4
   10856:	0030      	movs	r0, r6
   10858:	4f17      	ldr	r7, [pc, #92]	; (108b8 <RADIO_ScanHandler+0x8c>)
   1085a:	47b8      	blx	r7
   1085c:	4b17      	ldr	r3, [pc, #92]	; (108bc <RADIO_ScanHandler+0x90>)
   1085e:	2011      	movs	r0, #17
   10860:	4798      	blx	r3
   10862:	002b      	movs	r3, r5
   10864:	334e      	adds	r3, #78	; 0x4e
   10866:	7018      	strb	r0, [r3, #0]
   10868:	21ff      	movs	r1, #255	; 0xff
   1086a:	2011      	movs	r0, #17
   1086c:	4b14      	ldr	r3, [pc, #80]	; (108c0 <RADIO_ScanHandler+0x94>)
   1086e:	4798      	blx	r3
   10870:	0032      	movs	r2, r6
   10872:	0021      	movs	r1, r4
   10874:	2005      	movs	r0, #5
   10876:	47b8      	blx	r7
   10878:	2400      	movs	r4, #0
   1087a:	21fa      	movs	r1, #250	; 0xfa
   1087c:	3550      	adds	r5, #80	; 0x50
   1087e:	7828      	ldrb	r0, [r5, #0]
   10880:	4b10      	ldr	r3, [pc, #64]	; (108c4 <RADIO_ScanHandler+0x98>)
   10882:	4d11      	ldr	r5, [pc, #68]	; (108c8 <RADIO_ScanHandler+0x9c>)
   10884:	9400      	str	r4, [sp, #0]
   10886:	0022      	movs	r2, r4
   10888:	0089      	lsls	r1, r1, #2
   1088a:	47a8      	blx	r5
   1088c:	0020      	movs	r0, r4
   1088e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10890:	2c00      	cmp	r4, #0
   10892:	d1f1      	bne.n	10878 <RADIO_ScanHandler+0x4c>
   10894:	0021      	movs	r1, r4
   10896:	0020      	movs	r0, r4
   10898:	2201      	movs	r2, #1
   1089a:	4e07      	ldr	r6, [pc, #28]	; (108b8 <RADIO_ScanHandler+0x8c>)
   1089c:	47b0      	blx	r6
   1089e:	0022      	movs	r2, r4
   108a0:	0021      	movs	r1, r4
   108a2:	2005      	movs	r0, #5
   108a4:	47b0      	blx	r6
   108a6:	e7e7      	b.n	10878 <RADIO_ScanHandler+0x4c>
   108a8:	0000fffd 	.word	0x0000fffd
   108ac:	0000fb59 	.word	0x0000fb59
   108b0:	0000f2dd 	.word	0x0000f2dd
   108b4:	20001728 	.word	0x20001728
   108b8:	00009f51 	.word	0x00009f51
   108bc:	0000400d 	.word	0x0000400d
   108c0:	00003fe5 	.word	0x00003fe5
   108c4:	0001079d 	.word	0x0001079d
   108c8:	000098f5 	.word	0x000098f5

000108cc <radioScanDoneHandler>:
   108cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   108ce:	4a22      	ldr	r2, [pc, #136]	; (10958 <radioScanDoneHandler+0x8c>)
   108d0:	4922      	ldr	r1, [pc, #136]	; (1095c <radioScanDoneHandler+0x90>)
   108d2:	8813      	ldrh	r3, [r2, #0]
   108d4:	4d22      	ldr	r5, [pc, #136]	; (10960 <radioScanDoneHandler+0x94>)
   108d6:	400b      	ands	r3, r1
   108d8:	8013      	strh	r3, [r2, #0]
   108da:	002b      	movs	r3, r5
   108dc:	3334      	adds	r3, #52	; 0x34
   108de:	781c      	ldrb	r4, [r3, #0]
   108e0:	2c01      	cmp	r4, #1
   108e2:	d122      	bne.n	1092a <radioScanDoneHandler+0x5e>
   108e4:	21ff      	movs	r1, #255	; 0xff
   108e6:	2012      	movs	r0, #18
   108e8:	4e1e      	ldr	r6, [pc, #120]	; (10964 <radioScanDoneHandler+0x98>)
   108ea:	47b0      	blx	r6
   108ec:	002b      	movs	r3, r5
   108ee:	334e      	adds	r3, #78	; 0x4e
   108f0:	7819      	ldrb	r1, [r3, #0]
   108f2:	2011      	movs	r0, #17
   108f4:	47b0      	blx	r6
   108f6:	2200      	movs	r2, #0
   108f8:	0021      	movs	r1, r4
   108fa:	0010      	movs	r0, r2
   108fc:	4b1a      	ldr	r3, [pc, #104]	; (10968 <radioScanDoneHandler+0x9c>)
   108fe:	4798      	blx	r3
   10900:	2000      	movs	r0, #0
   10902:	4b1a      	ldr	r3, [pc, #104]	; (1096c <radioScanDoneHandler+0xa0>)
   10904:	4798      	blx	r3
   10906:	4b1a      	ldr	r3, [pc, #104]	; (10970 <radioScanDoneHandler+0xa4>)
   10908:	4798      	blx	r3
   1090a:	002b      	movs	r3, r5
   1090c:	334c      	adds	r3, #76	; 0x4c
   1090e:	2100      	movs	r1, #0
   10910:	5e59      	ldrsh	r1, [r3, r1]
   10912:	233e      	movs	r3, #62	; 0x3e
   10914:	5eea      	ldrsh	r2, [r5, r3]
   10916:	4b17      	ldr	r3, [pc, #92]	; (10974 <radioScanDoneHandler+0xa8>)
   10918:	4291      	cmp	r1, r2
   1091a:	da0c      	bge.n	10936 <radioScanDoneHandler+0x6a>
   1091c:	2002      	movs	r0, #2
   1091e:	4798      	blx	r3
   10920:	4b15      	ldr	r3, [pc, #84]	; (10978 <radioScanDoneHandler+0xac>)
   10922:	4798      	blx	r3
   10924:	2000      	movs	r0, #0
   10926:	b004      	add	sp, #16
   10928:	bd70      	pop	{r4, r5, r6, pc}
   1092a:	2c00      	cmp	r4, #0
   1092c:	d1e8      	bne.n	10900 <radioScanDoneHandler+0x34>
   1092e:	0022      	movs	r2, r4
   10930:	0021      	movs	r1, r4
   10932:	0020      	movs	r0, r4
   10934:	e7e2      	b.n	108fc <radioScanDoneHandler+0x30>
   10936:	2207      	movs	r2, #7
   10938:	ac01      	add	r4, sp, #4
   1093a:	2001      	movs	r0, #1
   1093c:	7022      	strb	r2, [r4, #0]
   1093e:	4798      	blx	r3
   10940:	4b0e      	ldr	r3, [pc, #56]	; (1097c <radioScanDoneHandler+0xb0>)
   10942:	781b      	ldrb	r3, [r3, #0]
   10944:	079b      	lsls	r3, r3, #30
   10946:	d5ed      	bpl.n	10924 <radioScanDoneHandler+0x58>
   10948:	692b      	ldr	r3, [r5, #16]
   1094a:	2b00      	cmp	r3, #0
   1094c:	d0ea      	beq.n	10924 <radioScanDoneHandler+0x58>
   1094e:	0021      	movs	r1, r4
   10950:	2002      	movs	r0, #2
   10952:	4798      	blx	r3
   10954:	e7e6      	b.n	10924 <radioScanDoneHandler+0x58>
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	20001c60 	.word	0x20001c60
   1095c:	fffffdff 	.word	0xfffffdff
   10960:	20001728 	.word	0x20001728
   10964:	00003fe5 	.word	0x00003fe5
   10968:	00009f51 	.word	0x00009f51
   1096c:	0000fc81 	.word	0x0000fc81
   10970:	00010141 	.word	0x00010141
   10974:	0000f949 	.word	0x0000f949
   10978:	00010031 	.word	0x00010031
   1097c:	20001c62 	.word	0x20001c62

00010980 <__gnu_thumb1_case_sqi>:
   10980:	b402      	push	{r1}
   10982:	4671      	mov	r1, lr
   10984:	0849      	lsrs	r1, r1, #1
   10986:	0049      	lsls	r1, r1, #1
   10988:	5609      	ldrsb	r1, [r1, r0]
   1098a:	0049      	lsls	r1, r1, #1
   1098c:	448e      	add	lr, r1
   1098e:	bc02      	pop	{r1}
   10990:	4770      	bx	lr
   10992:	46c0      	nop			; (mov r8, r8)

00010994 <__gnu_thumb1_case_uqi>:
   10994:	b402      	push	{r1}
   10996:	4671      	mov	r1, lr
   10998:	0849      	lsrs	r1, r1, #1
   1099a:	0049      	lsls	r1, r1, #1
   1099c:	5c09      	ldrb	r1, [r1, r0]
   1099e:	0049      	lsls	r1, r1, #1
   109a0:	448e      	add	lr, r1
   109a2:	bc02      	pop	{r1}
   109a4:	4770      	bx	lr
   109a6:	46c0      	nop			; (mov r8, r8)

000109a8 <__gnu_thumb1_case_uhi>:
   109a8:	b403      	push	{r0, r1}
   109aa:	4671      	mov	r1, lr
   109ac:	0849      	lsrs	r1, r1, #1
   109ae:	0040      	lsls	r0, r0, #1
   109b0:	0049      	lsls	r1, r1, #1
   109b2:	5a09      	ldrh	r1, [r1, r0]
   109b4:	0049      	lsls	r1, r1, #1
   109b6:	448e      	add	lr, r1
   109b8:	bc03      	pop	{r0, r1}
   109ba:	4770      	bx	lr

000109bc <__udivsi3>:
   109bc:	2200      	movs	r2, #0
   109be:	0843      	lsrs	r3, r0, #1
   109c0:	428b      	cmp	r3, r1
   109c2:	d374      	bcc.n	10aae <__udivsi3+0xf2>
   109c4:	0903      	lsrs	r3, r0, #4
   109c6:	428b      	cmp	r3, r1
   109c8:	d35f      	bcc.n	10a8a <__udivsi3+0xce>
   109ca:	0a03      	lsrs	r3, r0, #8
   109cc:	428b      	cmp	r3, r1
   109ce:	d344      	bcc.n	10a5a <__udivsi3+0x9e>
   109d0:	0b03      	lsrs	r3, r0, #12
   109d2:	428b      	cmp	r3, r1
   109d4:	d328      	bcc.n	10a28 <__udivsi3+0x6c>
   109d6:	0c03      	lsrs	r3, r0, #16
   109d8:	428b      	cmp	r3, r1
   109da:	d30d      	bcc.n	109f8 <__udivsi3+0x3c>
   109dc:	22ff      	movs	r2, #255	; 0xff
   109de:	0209      	lsls	r1, r1, #8
   109e0:	ba12      	rev	r2, r2
   109e2:	0c03      	lsrs	r3, r0, #16
   109e4:	428b      	cmp	r3, r1
   109e6:	d302      	bcc.n	109ee <__udivsi3+0x32>
   109e8:	1212      	asrs	r2, r2, #8
   109ea:	0209      	lsls	r1, r1, #8
   109ec:	d065      	beq.n	10aba <__udivsi3+0xfe>
   109ee:	0b03      	lsrs	r3, r0, #12
   109f0:	428b      	cmp	r3, r1
   109f2:	d319      	bcc.n	10a28 <__udivsi3+0x6c>
   109f4:	e000      	b.n	109f8 <__udivsi3+0x3c>
   109f6:	0a09      	lsrs	r1, r1, #8
   109f8:	0bc3      	lsrs	r3, r0, #15
   109fa:	428b      	cmp	r3, r1
   109fc:	d301      	bcc.n	10a02 <__udivsi3+0x46>
   109fe:	03cb      	lsls	r3, r1, #15
   10a00:	1ac0      	subs	r0, r0, r3
   10a02:	4152      	adcs	r2, r2
   10a04:	0b83      	lsrs	r3, r0, #14
   10a06:	428b      	cmp	r3, r1
   10a08:	d301      	bcc.n	10a0e <__udivsi3+0x52>
   10a0a:	038b      	lsls	r3, r1, #14
   10a0c:	1ac0      	subs	r0, r0, r3
   10a0e:	4152      	adcs	r2, r2
   10a10:	0b43      	lsrs	r3, r0, #13
   10a12:	428b      	cmp	r3, r1
   10a14:	d301      	bcc.n	10a1a <__udivsi3+0x5e>
   10a16:	034b      	lsls	r3, r1, #13
   10a18:	1ac0      	subs	r0, r0, r3
   10a1a:	4152      	adcs	r2, r2
   10a1c:	0b03      	lsrs	r3, r0, #12
   10a1e:	428b      	cmp	r3, r1
   10a20:	d301      	bcc.n	10a26 <__udivsi3+0x6a>
   10a22:	030b      	lsls	r3, r1, #12
   10a24:	1ac0      	subs	r0, r0, r3
   10a26:	4152      	adcs	r2, r2
   10a28:	0ac3      	lsrs	r3, r0, #11
   10a2a:	428b      	cmp	r3, r1
   10a2c:	d301      	bcc.n	10a32 <__udivsi3+0x76>
   10a2e:	02cb      	lsls	r3, r1, #11
   10a30:	1ac0      	subs	r0, r0, r3
   10a32:	4152      	adcs	r2, r2
   10a34:	0a83      	lsrs	r3, r0, #10
   10a36:	428b      	cmp	r3, r1
   10a38:	d301      	bcc.n	10a3e <__udivsi3+0x82>
   10a3a:	028b      	lsls	r3, r1, #10
   10a3c:	1ac0      	subs	r0, r0, r3
   10a3e:	4152      	adcs	r2, r2
   10a40:	0a43      	lsrs	r3, r0, #9
   10a42:	428b      	cmp	r3, r1
   10a44:	d301      	bcc.n	10a4a <__udivsi3+0x8e>
   10a46:	024b      	lsls	r3, r1, #9
   10a48:	1ac0      	subs	r0, r0, r3
   10a4a:	4152      	adcs	r2, r2
   10a4c:	0a03      	lsrs	r3, r0, #8
   10a4e:	428b      	cmp	r3, r1
   10a50:	d301      	bcc.n	10a56 <__udivsi3+0x9a>
   10a52:	020b      	lsls	r3, r1, #8
   10a54:	1ac0      	subs	r0, r0, r3
   10a56:	4152      	adcs	r2, r2
   10a58:	d2cd      	bcs.n	109f6 <__udivsi3+0x3a>
   10a5a:	09c3      	lsrs	r3, r0, #7
   10a5c:	428b      	cmp	r3, r1
   10a5e:	d301      	bcc.n	10a64 <__udivsi3+0xa8>
   10a60:	01cb      	lsls	r3, r1, #7
   10a62:	1ac0      	subs	r0, r0, r3
   10a64:	4152      	adcs	r2, r2
   10a66:	0983      	lsrs	r3, r0, #6
   10a68:	428b      	cmp	r3, r1
   10a6a:	d301      	bcc.n	10a70 <__udivsi3+0xb4>
   10a6c:	018b      	lsls	r3, r1, #6
   10a6e:	1ac0      	subs	r0, r0, r3
   10a70:	4152      	adcs	r2, r2
   10a72:	0943      	lsrs	r3, r0, #5
   10a74:	428b      	cmp	r3, r1
   10a76:	d301      	bcc.n	10a7c <__udivsi3+0xc0>
   10a78:	014b      	lsls	r3, r1, #5
   10a7a:	1ac0      	subs	r0, r0, r3
   10a7c:	4152      	adcs	r2, r2
   10a7e:	0903      	lsrs	r3, r0, #4
   10a80:	428b      	cmp	r3, r1
   10a82:	d301      	bcc.n	10a88 <__udivsi3+0xcc>
   10a84:	010b      	lsls	r3, r1, #4
   10a86:	1ac0      	subs	r0, r0, r3
   10a88:	4152      	adcs	r2, r2
   10a8a:	08c3      	lsrs	r3, r0, #3
   10a8c:	428b      	cmp	r3, r1
   10a8e:	d301      	bcc.n	10a94 <__udivsi3+0xd8>
   10a90:	00cb      	lsls	r3, r1, #3
   10a92:	1ac0      	subs	r0, r0, r3
   10a94:	4152      	adcs	r2, r2
   10a96:	0883      	lsrs	r3, r0, #2
   10a98:	428b      	cmp	r3, r1
   10a9a:	d301      	bcc.n	10aa0 <__udivsi3+0xe4>
   10a9c:	008b      	lsls	r3, r1, #2
   10a9e:	1ac0      	subs	r0, r0, r3
   10aa0:	4152      	adcs	r2, r2
   10aa2:	0843      	lsrs	r3, r0, #1
   10aa4:	428b      	cmp	r3, r1
   10aa6:	d301      	bcc.n	10aac <__udivsi3+0xf0>
   10aa8:	004b      	lsls	r3, r1, #1
   10aaa:	1ac0      	subs	r0, r0, r3
   10aac:	4152      	adcs	r2, r2
   10aae:	1a41      	subs	r1, r0, r1
   10ab0:	d200      	bcs.n	10ab4 <__udivsi3+0xf8>
   10ab2:	4601      	mov	r1, r0
   10ab4:	4152      	adcs	r2, r2
   10ab6:	4610      	mov	r0, r2
   10ab8:	4770      	bx	lr
   10aba:	e7ff      	b.n	10abc <__udivsi3+0x100>
   10abc:	b501      	push	{r0, lr}
   10abe:	2000      	movs	r0, #0
   10ac0:	f000 f8f0 	bl	10ca4 <__aeabi_idiv0>
   10ac4:	bd02      	pop	{r1, pc}
   10ac6:	46c0      	nop			; (mov r8, r8)

00010ac8 <__aeabi_uidivmod>:
   10ac8:	2900      	cmp	r1, #0
   10aca:	d0f7      	beq.n	10abc <__udivsi3+0x100>
   10acc:	e776      	b.n	109bc <__udivsi3>
   10ace:	4770      	bx	lr

00010ad0 <__divsi3>:
   10ad0:	4603      	mov	r3, r0
   10ad2:	430b      	orrs	r3, r1
   10ad4:	d47f      	bmi.n	10bd6 <__divsi3+0x106>
   10ad6:	2200      	movs	r2, #0
   10ad8:	0843      	lsrs	r3, r0, #1
   10ada:	428b      	cmp	r3, r1
   10adc:	d374      	bcc.n	10bc8 <__divsi3+0xf8>
   10ade:	0903      	lsrs	r3, r0, #4
   10ae0:	428b      	cmp	r3, r1
   10ae2:	d35f      	bcc.n	10ba4 <__divsi3+0xd4>
   10ae4:	0a03      	lsrs	r3, r0, #8
   10ae6:	428b      	cmp	r3, r1
   10ae8:	d344      	bcc.n	10b74 <__divsi3+0xa4>
   10aea:	0b03      	lsrs	r3, r0, #12
   10aec:	428b      	cmp	r3, r1
   10aee:	d328      	bcc.n	10b42 <__divsi3+0x72>
   10af0:	0c03      	lsrs	r3, r0, #16
   10af2:	428b      	cmp	r3, r1
   10af4:	d30d      	bcc.n	10b12 <__divsi3+0x42>
   10af6:	22ff      	movs	r2, #255	; 0xff
   10af8:	0209      	lsls	r1, r1, #8
   10afa:	ba12      	rev	r2, r2
   10afc:	0c03      	lsrs	r3, r0, #16
   10afe:	428b      	cmp	r3, r1
   10b00:	d302      	bcc.n	10b08 <__divsi3+0x38>
   10b02:	1212      	asrs	r2, r2, #8
   10b04:	0209      	lsls	r1, r1, #8
   10b06:	d065      	beq.n	10bd4 <__divsi3+0x104>
   10b08:	0b03      	lsrs	r3, r0, #12
   10b0a:	428b      	cmp	r3, r1
   10b0c:	d319      	bcc.n	10b42 <__divsi3+0x72>
   10b0e:	e000      	b.n	10b12 <__divsi3+0x42>
   10b10:	0a09      	lsrs	r1, r1, #8
   10b12:	0bc3      	lsrs	r3, r0, #15
   10b14:	428b      	cmp	r3, r1
   10b16:	d301      	bcc.n	10b1c <__divsi3+0x4c>
   10b18:	03cb      	lsls	r3, r1, #15
   10b1a:	1ac0      	subs	r0, r0, r3
   10b1c:	4152      	adcs	r2, r2
   10b1e:	0b83      	lsrs	r3, r0, #14
   10b20:	428b      	cmp	r3, r1
   10b22:	d301      	bcc.n	10b28 <__divsi3+0x58>
   10b24:	038b      	lsls	r3, r1, #14
   10b26:	1ac0      	subs	r0, r0, r3
   10b28:	4152      	adcs	r2, r2
   10b2a:	0b43      	lsrs	r3, r0, #13
   10b2c:	428b      	cmp	r3, r1
   10b2e:	d301      	bcc.n	10b34 <__divsi3+0x64>
   10b30:	034b      	lsls	r3, r1, #13
   10b32:	1ac0      	subs	r0, r0, r3
   10b34:	4152      	adcs	r2, r2
   10b36:	0b03      	lsrs	r3, r0, #12
   10b38:	428b      	cmp	r3, r1
   10b3a:	d301      	bcc.n	10b40 <__divsi3+0x70>
   10b3c:	030b      	lsls	r3, r1, #12
   10b3e:	1ac0      	subs	r0, r0, r3
   10b40:	4152      	adcs	r2, r2
   10b42:	0ac3      	lsrs	r3, r0, #11
   10b44:	428b      	cmp	r3, r1
   10b46:	d301      	bcc.n	10b4c <__divsi3+0x7c>
   10b48:	02cb      	lsls	r3, r1, #11
   10b4a:	1ac0      	subs	r0, r0, r3
   10b4c:	4152      	adcs	r2, r2
   10b4e:	0a83      	lsrs	r3, r0, #10
   10b50:	428b      	cmp	r3, r1
   10b52:	d301      	bcc.n	10b58 <__divsi3+0x88>
   10b54:	028b      	lsls	r3, r1, #10
   10b56:	1ac0      	subs	r0, r0, r3
   10b58:	4152      	adcs	r2, r2
   10b5a:	0a43      	lsrs	r3, r0, #9
   10b5c:	428b      	cmp	r3, r1
   10b5e:	d301      	bcc.n	10b64 <__divsi3+0x94>
   10b60:	024b      	lsls	r3, r1, #9
   10b62:	1ac0      	subs	r0, r0, r3
   10b64:	4152      	adcs	r2, r2
   10b66:	0a03      	lsrs	r3, r0, #8
   10b68:	428b      	cmp	r3, r1
   10b6a:	d301      	bcc.n	10b70 <__divsi3+0xa0>
   10b6c:	020b      	lsls	r3, r1, #8
   10b6e:	1ac0      	subs	r0, r0, r3
   10b70:	4152      	adcs	r2, r2
   10b72:	d2cd      	bcs.n	10b10 <__divsi3+0x40>
   10b74:	09c3      	lsrs	r3, r0, #7
   10b76:	428b      	cmp	r3, r1
   10b78:	d301      	bcc.n	10b7e <__divsi3+0xae>
   10b7a:	01cb      	lsls	r3, r1, #7
   10b7c:	1ac0      	subs	r0, r0, r3
   10b7e:	4152      	adcs	r2, r2
   10b80:	0983      	lsrs	r3, r0, #6
   10b82:	428b      	cmp	r3, r1
   10b84:	d301      	bcc.n	10b8a <__divsi3+0xba>
   10b86:	018b      	lsls	r3, r1, #6
   10b88:	1ac0      	subs	r0, r0, r3
   10b8a:	4152      	adcs	r2, r2
   10b8c:	0943      	lsrs	r3, r0, #5
   10b8e:	428b      	cmp	r3, r1
   10b90:	d301      	bcc.n	10b96 <__divsi3+0xc6>
   10b92:	014b      	lsls	r3, r1, #5
   10b94:	1ac0      	subs	r0, r0, r3
   10b96:	4152      	adcs	r2, r2
   10b98:	0903      	lsrs	r3, r0, #4
   10b9a:	428b      	cmp	r3, r1
   10b9c:	d301      	bcc.n	10ba2 <__divsi3+0xd2>
   10b9e:	010b      	lsls	r3, r1, #4
   10ba0:	1ac0      	subs	r0, r0, r3
   10ba2:	4152      	adcs	r2, r2
   10ba4:	08c3      	lsrs	r3, r0, #3
   10ba6:	428b      	cmp	r3, r1
   10ba8:	d301      	bcc.n	10bae <__divsi3+0xde>
   10baa:	00cb      	lsls	r3, r1, #3
   10bac:	1ac0      	subs	r0, r0, r3
   10bae:	4152      	adcs	r2, r2
   10bb0:	0883      	lsrs	r3, r0, #2
   10bb2:	428b      	cmp	r3, r1
   10bb4:	d301      	bcc.n	10bba <__divsi3+0xea>
   10bb6:	008b      	lsls	r3, r1, #2
   10bb8:	1ac0      	subs	r0, r0, r3
   10bba:	4152      	adcs	r2, r2
   10bbc:	0843      	lsrs	r3, r0, #1
   10bbe:	428b      	cmp	r3, r1
   10bc0:	d301      	bcc.n	10bc6 <__divsi3+0xf6>
   10bc2:	004b      	lsls	r3, r1, #1
   10bc4:	1ac0      	subs	r0, r0, r3
   10bc6:	4152      	adcs	r2, r2
   10bc8:	1a41      	subs	r1, r0, r1
   10bca:	d200      	bcs.n	10bce <__divsi3+0xfe>
   10bcc:	4601      	mov	r1, r0
   10bce:	4152      	adcs	r2, r2
   10bd0:	4610      	mov	r0, r2
   10bd2:	4770      	bx	lr
   10bd4:	e05d      	b.n	10c92 <__divsi3+0x1c2>
   10bd6:	0fca      	lsrs	r2, r1, #31
   10bd8:	d000      	beq.n	10bdc <__divsi3+0x10c>
   10bda:	4249      	negs	r1, r1
   10bdc:	1003      	asrs	r3, r0, #32
   10bde:	d300      	bcc.n	10be2 <__divsi3+0x112>
   10be0:	4240      	negs	r0, r0
   10be2:	4053      	eors	r3, r2
   10be4:	2200      	movs	r2, #0
   10be6:	469c      	mov	ip, r3
   10be8:	0903      	lsrs	r3, r0, #4
   10bea:	428b      	cmp	r3, r1
   10bec:	d32d      	bcc.n	10c4a <__divsi3+0x17a>
   10bee:	0a03      	lsrs	r3, r0, #8
   10bf0:	428b      	cmp	r3, r1
   10bf2:	d312      	bcc.n	10c1a <__divsi3+0x14a>
   10bf4:	22fc      	movs	r2, #252	; 0xfc
   10bf6:	0189      	lsls	r1, r1, #6
   10bf8:	ba12      	rev	r2, r2
   10bfa:	0a03      	lsrs	r3, r0, #8
   10bfc:	428b      	cmp	r3, r1
   10bfe:	d30c      	bcc.n	10c1a <__divsi3+0x14a>
   10c00:	0189      	lsls	r1, r1, #6
   10c02:	1192      	asrs	r2, r2, #6
   10c04:	428b      	cmp	r3, r1
   10c06:	d308      	bcc.n	10c1a <__divsi3+0x14a>
   10c08:	0189      	lsls	r1, r1, #6
   10c0a:	1192      	asrs	r2, r2, #6
   10c0c:	428b      	cmp	r3, r1
   10c0e:	d304      	bcc.n	10c1a <__divsi3+0x14a>
   10c10:	0189      	lsls	r1, r1, #6
   10c12:	d03a      	beq.n	10c8a <__divsi3+0x1ba>
   10c14:	1192      	asrs	r2, r2, #6
   10c16:	e000      	b.n	10c1a <__divsi3+0x14a>
   10c18:	0989      	lsrs	r1, r1, #6
   10c1a:	09c3      	lsrs	r3, r0, #7
   10c1c:	428b      	cmp	r3, r1
   10c1e:	d301      	bcc.n	10c24 <__divsi3+0x154>
   10c20:	01cb      	lsls	r3, r1, #7
   10c22:	1ac0      	subs	r0, r0, r3
   10c24:	4152      	adcs	r2, r2
   10c26:	0983      	lsrs	r3, r0, #6
   10c28:	428b      	cmp	r3, r1
   10c2a:	d301      	bcc.n	10c30 <__divsi3+0x160>
   10c2c:	018b      	lsls	r3, r1, #6
   10c2e:	1ac0      	subs	r0, r0, r3
   10c30:	4152      	adcs	r2, r2
   10c32:	0943      	lsrs	r3, r0, #5
   10c34:	428b      	cmp	r3, r1
   10c36:	d301      	bcc.n	10c3c <__divsi3+0x16c>
   10c38:	014b      	lsls	r3, r1, #5
   10c3a:	1ac0      	subs	r0, r0, r3
   10c3c:	4152      	adcs	r2, r2
   10c3e:	0903      	lsrs	r3, r0, #4
   10c40:	428b      	cmp	r3, r1
   10c42:	d301      	bcc.n	10c48 <__divsi3+0x178>
   10c44:	010b      	lsls	r3, r1, #4
   10c46:	1ac0      	subs	r0, r0, r3
   10c48:	4152      	adcs	r2, r2
   10c4a:	08c3      	lsrs	r3, r0, #3
   10c4c:	428b      	cmp	r3, r1
   10c4e:	d301      	bcc.n	10c54 <__divsi3+0x184>
   10c50:	00cb      	lsls	r3, r1, #3
   10c52:	1ac0      	subs	r0, r0, r3
   10c54:	4152      	adcs	r2, r2
   10c56:	0883      	lsrs	r3, r0, #2
   10c58:	428b      	cmp	r3, r1
   10c5a:	d301      	bcc.n	10c60 <__divsi3+0x190>
   10c5c:	008b      	lsls	r3, r1, #2
   10c5e:	1ac0      	subs	r0, r0, r3
   10c60:	4152      	adcs	r2, r2
   10c62:	d2d9      	bcs.n	10c18 <__divsi3+0x148>
   10c64:	0843      	lsrs	r3, r0, #1
   10c66:	428b      	cmp	r3, r1
   10c68:	d301      	bcc.n	10c6e <__divsi3+0x19e>
   10c6a:	004b      	lsls	r3, r1, #1
   10c6c:	1ac0      	subs	r0, r0, r3
   10c6e:	4152      	adcs	r2, r2
   10c70:	1a41      	subs	r1, r0, r1
   10c72:	d200      	bcs.n	10c76 <__divsi3+0x1a6>
   10c74:	4601      	mov	r1, r0
   10c76:	4663      	mov	r3, ip
   10c78:	4152      	adcs	r2, r2
   10c7a:	105b      	asrs	r3, r3, #1
   10c7c:	4610      	mov	r0, r2
   10c7e:	d301      	bcc.n	10c84 <__divsi3+0x1b4>
   10c80:	4240      	negs	r0, r0
   10c82:	2b00      	cmp	r3, #0
   10c84:	d500      	bpl.n	10c88 <__divsi3+0x1b8>
   10c86:	4249      	negs	r1, r1
   10c88:	4770      	bx	lr
   10c8a:	4663      	mov	r3, ip
   10c8c:	105b      	asrs	r3, r3, #1
   10c8e:	d300      	bcc.n	10c92 <__divsi3+0x1c2>
   10c90:	4240      	negs	r0, r0
   10c92:	b501      	push	{r0, lr}
   10c94:	2000      	movs	r0, #0
   10c96:	f000 f805 	bl	10ca4 <__aeabi_idiv0>
   10c9a:	bd02      	pop	{r1, pc}

00010c9c <__aeabi_idivmod>:
   10c9c:	2900      	cmp	r1, #0
   10c9e:	d0f8      	beq.n	10c92 <__divsi3+0x1c2>
   10ca0:	e716      	b.n	10ad0 <__divsi3>
   10ca2:	4770      	bx	lr

00010ca4 <__aeabi_idiv0>:
   10ca4:	4770      	bx	lr
   10ca6:	46c0      	nop			; (mov r8, r8)

00010ca8 <__aeabi_cfrcmple>:
   10ca8:	4684      	mov	ip, r0
   10caa:	1c08      	adds	r0, r1, #0
   10cac:	4661      	mov	r1, ip
   10cae:	e7ff      	b.n	10cb0 <__aeabi_cfcmpeq>

00010cb0 <__aeabi_cfcmpeq>:
   10cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10cb2:	f000 fcb5 	bl	11620 <__lesf2>
   10cb6:	2800      	cmp	r0, #0
   10cb8:	d401      	bmi.n	10cbe <__aeabi_cfcmpeq+0xe>
   10cba:	2100      	movs	r1, #0
   10cbc:	42c8      	cmn	r0, r1
   10cbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00010cc0 <__aeabi_fcmpeq>:
   10cc0:	b510      	push	{r4, lr}
   10cc2:	f000 fc47 	bl	11554 <__eqsf2>
   10cc6:	4240      	negs	r0, r0
   10cc8:	3001      	adds	r0, #1
   10cca:	bd10      	pop	{r4, pc}

00010ccc <__aeabi_fcmplt>:
   10ccc:	b510      	push	{r4, lr}
   10cce:	f000 fca7 	bl	11620 <__lesf2>
   10cd2:	2800      	cmp	r0, #0
   10cd4:	db01      	blt.n	10cda <__aeabi_fcmplt+0xe>
   10cd6:	2000      	movs	r0, #0
   10cd8:	bd10      	pop	{r4, pc}
   10cda:	2001      	movs	r0, #1
   10cdc:	bd10      	pop	{r4, pc}
   10cde:	46c0      	nop			; (mov r8, r8)

00010ce0 <__aeabi_fcmple>:
   10ce0:	b510      	push	{r4, lr}
   10ce2:	f000 fc9d 	bl	11620 <__lesf2>
   10ce6:	2800      	cmp	r0, #0
   10ce8:	dd01      	ble.n	10cee <__aeabi_fcmple+0xe>
   10cea:	2000      	movs	r0, #0
   10cec:	bd10      	pop	{r4, pc}
   10cee:	2001      	movs	r0, #1
   10cf0:	bd10      	pop	{r4, pc}
   10cf2:	46c0      	nop			; (mov r8, r8)

00010cf4 <__aeabi_fcmpgt>:
   10cf4:	b510      	push	{r4, lr}
   10cf6:	f000 fc53 	bl	115a0 <__gesf2>
   10cfa:	2800      	cmp	r0, #0
   10cfc:	dc01      	bgt.n	10d02 <__aeabi_fcmpgt+0xe>
   10cfe:	2000      	movs	r0, #0
   10d00:	bd10      	pop	{r4, pc}
   10d02:	2001      	movs	r0, #1
   10d04:	bd10      	pop	{r4, pc}
   10d06:	46c0      	nop			; (mov r8, r8)

00010d08 <__aeabi_fcmpge>:
   10d08:	b510      	push	{r4, lr}
   10d0a:	f000 fc49 	bl	115a0 <__gesf2>
   10d0e:	2800      	cmp	r0, #0
   10d10:	da01      	bge.n	10d16 <__aeabi_fcmpge+0xe>
   10d12:	2000      	movs	r0, #0
   10d14:	bd10      	pop	{r4, pc}
   10d16:	2001      	movs	r0, #1
   10d18:	bd10      	pop	{r4, pc}
   10d1a:	46c0      	nop			; (mov r8, r8)

00010d1c <__aeabi_uldivmod>:
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	d111      	bne.n	10d44 <__aeabi_uldivmod+0x28>
   10d20:	2a00      	cmp	r2, #0
   10d22:	d10f      	bne.n	10d44 <__aeabi_uldivmod+0x28>
   10d24:	2900      	cmp	r1, #0
   10d26:	d100      	bne.n	10d2a <__aeabi_uldivmod+0xe>
   10d28:	2800      	cmp	r0, #0
   10d2a:	d002      	beq.n	10d32 <__aeabi_uldivmod+0x16>
   10d2c:	2100      	movs	r1, #0
   10d2e:	43c9      	mvns	r1, r1
   10d30:	1c08      	adds	r0, r1, #0
   10d32:	b407      	push	{r0, r1, r2}
   10d34:	4802      	ldr	r0, [pc, #8]	; (10d40 <__aeabi_uldivmod+0x24>)
   10d36:	a102      	add	r1, pc, #8	; (adr r1, 10d40 <__aeabi_uldivmod+0x24>)
   10d38:	1840      	adds	r0, r0, r1
   10d3a:	9002      	str	r0, [sp, #8]
   10d3c:	bd03      	pop	{r0, r1, pc}
   10d3e:	46c0      	nop			; (mov r8, r8)
   10d40:	ffffff65 	.word	0xffffff65
   10d44:	b403      	push	{r0, r1}
   10d46:	4668      	mov	r0, sp
   10d48:	b501      	push	{r0, lr}
   10d4a:	9802      	ldr	r0, [sp, #8]
   10d4c:	f000 f868 	bl	10e20 <__udivmoddi4>
   10d50:	9b01      	ldr	r3, [sp, #4]
   10d52:	469e      	mov	lr, r3
   10d54:	b002      	add	sp, #8
   10d56:	bc0c      	pop	{r2, r3}
   10d58:	4770      	bx	lr
   10d5a:	46c0      	nop			; (mov r8, r8)

00010d5c <__aeabi_lmul>:
   10d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d5e:	46ce      	mov	lr, r9
   10d60:	4647      	mov	r7, r8
   10d62:	0415      	lsls	r5, r2, #16
   10d64:	0c2d      	lsrs	r5, r5, #16
   10d66:	002e      	movs	r6, r5
   10d68:	b580      	push	{r7, lr}
   10d6a:	0407      	lsls	r7, r0, #16
   10d6c:	0c14      	lsrs	r4, r2, #16
   10d6e:	0c3f      	lsrs	r7, r7, #16
   10d70:	4699      	mov	r9, r3
   10d72:	0c03      	lsrs	r3, r0, #16
   10d74:	437e      	muls	r6, r7
   10d76:	435d      	muls	r5, r3
   10d78:	4367      	muls	r7, r4
   10d7a:	4363      	muls	r3, r4
   10d7c:	197f      	adds	r7, r7, r5
   10d7e:	0c34      	lsrs	r4, r6, #16
   10d80:	19e4      	adds	r4, r4, r7
   10d82:	469c      	mov	ip, r3
   10d84:	42a5      	cmp	r5, r4
   10d86:	d903      	bls.n	10d90 <__aeabi_lmul+0x34>
   10d88:	2380      	movs	r3, #128	; 0x80
   10d8a:	025b      	lsls	r3, r3, #9
   10d8c:	4698      	mov	r8, r3
   10d8e:	44c4      	add	ip, r8
   10d90:	464b      	mov	r3, r9
   10d92:	4351      	muls	r1, r2
   10d94:	4343      	muls	r3, r0
   10d96:	0436      	lsls	r6, r6, #16
   10d98:	0c36      	lsrs	r6, r6, #16
   10d9a:	0c25      	lsrs	r5, r4, #16
   10d9c:	0424      	lsls	r4, r4, #16
   10d9e:	4465      	add	r5, ip
   10da0:	19a4      	adds	r4, r4, r6
   10da2:	1859      	adds	r1, r3, r1
   10da4:	1949      	adds	r1, r1, r5
   10da6:	0020      	movs	r0, r4
   10da8:	bc0c      	pop	{r2, r3}
   10daa:	4690      	mov	r8, r2
   10dac:	4699      	mov	r9, r3
   10dae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010db0 <__aeabi_f2uiz>:
   10db0:	219e      	movs	r1, #158	; 0x9e
   10db2:	b510      	push	{r4, lr}
   10db4:	05c9      	lsls	r1, r1, #23
   10db6:	1c04      	adds	r4, r0, #0
   10db8:	f7ff ffa6 	bl	10d08 <__aeabi_fcmpge>
   10dbc:	2800      	cmp	r0, #0
   10dbe:	d103      	bne.n	10dc8 <__aeabi_f2uiz+0x18>
   10dc0:	1c20      	adds	r0, r4, #0
   10dc2:	f000 ff2b 	bl	11c1c <__aeabi_f2iz>
   10dc6:	bd10      	pop	{r4, pc}
   10dc8:	219e      	movs	r1, #158	; 0x9e
   10dca:	1c20      	adds	r0, r4, #0
   10dcc:	05c9      	lsls	r1, r1, #23
   10dce:	f000 fd89 	bl	118e4 <__aeabi_fsub>
   10dd2:	f000 ff23 	bl	11c1c <__aeabi_f2iz>
   10dd6:	2380      	movs	r3, #128	; 0x80
   10dd8:	061b      	lsls	r3, r3, #24
   10dda:	469c      	mov	ip, r3
   10ddc:	4460      	add	r0, ip
   10dde:	e7f2      	b.n	10dc6 <__aeabi_f2uiz+0x16>

00010de0 <__aeabi_f2ulz>:
   10de0:	b570      	push	{r4, r5, r6, lr}
   10de2:	f002 fc59 	bl	13698 <__aeabi_f2d>
   10de6:	2200      	movs	r2, #0
   10de8:	4b0b      	ldr	r3, [pc, #44]	; (10e18 <__aeabi_f2ulz+0x38>)
   10dea:	000d      	movs	r5, r1
   10dec:	0004      	movs	r4, r0
   10dee:	f001 fe0f 	bl	12a10 <__aeabi_dmul>
   10df2:	f002 fd57 	bl	138a4 <__aeabi_d2uiz>
   10df6:	0006      	movs	r6, r0
   10df8:	f002 fc16 	bl	13628 <__aeabi_ui2d>
   10dfc:	2200      	movs	r2, #0
   10dfe:	4b07      	ldr	r3, [pc, #28]	; (10e1c <__aeabi_f2ulz+0x3c>)
   10e00:	f001 fe06 	bl	12a10 <__aeabi_dmul>
   10e04:	0002      	movs	r2, r0
   10e06:	000b      	movs	r3, r1
   10e08:	0020      	movs	r0, r4
   10e0a:	0029      	movs	r1, r5
   10e0c:	f002 f880 	bl	12f10 <__aeabi_dsub>
   10e10:	f002 fd48 	bl	138a4 <__aeabi_d2uiz>
   10e14:	0031      	movs	r1, r6
   10e16:	bd70      	pop	{r4, r5, r6, pc}
   10e18:	3df00000 	.word	0x3df00000
   10e1c:	41f00000 	.word	0x41f00000

00010e20 <__udivmoddi4>:
   10e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e22:	4657      	mov	r7, sl
   10e24:	464e      	mov	r6, r9
   10e26:	4645      	mov	r5, r8
   10e28:	46de      	mov	lr, fp
   10e2a:	b5e0      	push	{r5, r6, r7, lr}
   10e2c:	0004      	movs	r4, r0
   10e2e:	b083      	sub	sp, #12
   10e30:	000d      	movs	r5, r1
   10e32:	4692      	mov	sl, r2
   10e34:	4699      	mov	r9, r3
   10e36:	428b      	cmp	r3, r1
   10e38:	d82f      	bhi.n	10e9a <__udivmoddi4+0x7a>
   10e3a:	d02c      	beq.n	10e96 <__udivmoddi4+0x76>
   10e3c:	4649      	mov	r1, r9
   10e3e:	4650      	mov	r0, sl
   10e40:	f002 fd24 	bl	1388c <__clzdi2>
   10e44:	0029      	movs	r1, r5
   10e46:	0006      	movs	r6, r0
   10e48:	0020      	movs	r0, r4
   10e4a:	f002 fd1f 	bl	1388c <__clzdi2>
   10e4e:	1a33      	subs	r3, r6, r0
   10e50:	4698      	mov	r8, r3
   10e52:	3b20      	subs	r3, #32
   10e54:	469b      	mov	fp, r3
   10e56:	d500      	bpl.n	10e5a <__udivmoddi4+0x3a>
   10e58:	e074      	b.n	10f44 <__udivmoddi4+0x124>
   10e5a:	4653      	mov	r3, sl
   10e5c:	465a      	mov	r2, fp
   10e5e:	4093      	lsls	r3, r2
   10e60:	001f      	movs	r7, r3
   10e62:	4653      	mov	r3, sl
   10e64:	4642      	mov	r2, r8
   10e66:	4093      	lsls	r3, r2
   10e68:	001e      	movs	r6, r3
   10e6a:	42af      	cmp	r7, r5
   10e6c:	d829      	bhi.n	10ec2 <__udivmoddi4+0xa2>
   10e6e:	d026      	beq.n	10ebe <__udivmoddi4+0x9e>
   10e70:	465b      	mov	r3, fp
   10e72:	1ba4      	subs	r4, r4, r6
   10e74:	41bd      	sbcs	r5, r7
   10e76:	2b00      	cmp	r3, #0
   10e78:	da00      	bge.n	10e7c <__udivmoddi4+0x5c>
   10e7a:	e079      	b.n	10f70 <__udivmoddi4+0x150>
   10e7c:	2200      	movs	r2, #0
   10e7e:	2300      	movs	r3, #0
   10e80:	9200      	str	r2, [sp, #0]
   10e82:	9301      	str	r3, [sp, #4]
   10e84:	2301      	movs	r3, #1
   10e86:	465a      	mov	r2, fp
   10e88:	4093      	lsls	r3, r2
   10e8a:	9301      	str	r3, [sp, #4]
   10e8c:	2301      	movs	r3, #1
   10e8e:	4642      	mov	r2, r8
   10e90:	4093      	lsls	r3, r2
   10e92:	9300      	str	r3, [sp, #0]
   10e94:	e019      	b.n	10eca <__udivmoddi4+0xaa>
   10e96:	4282      	cmp	r2, r0
   10e98:	d9d0      	bls.n	10e3c <__udivmoddi4+0x1c>
   10e9a:	2200      	movs	r2, #0
   10e9c:	2300      	movs	r3, #0
   10e9e:	9200      	str	r2, [sp, #0]
   10ea0:	9301      	str	r3, [sp, #4]
   10ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d001      	beq.n	10eac <__udivmoddi4+0x8c>
   10ea8:	601c      	str	r4, [r3, #0]
   10eaa:	605d      	str	r5, [r3, #4]
   10eac:	9800      	ldr	r0, [sp, #0]
   10eae:	9901      	ldr	r1, [sp, #4]
   10eb0:	b003      	add	sp, #12
   10eb2:	bc3c      	pop	{r2, r3, r4, r5}
   10eb4:	4690      	mov	r8, r2
   10eb6:	4699      	mov	r9, r3
   10eb8:	46a2      	mov	sl, r4
   10eba:	46ab      	mov	fp, r5
   10ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ebe:	42a3      	cmp	r3, r4
   10ec0:	d9d6      	bls.n	10e70 <__udivmoddi4+0x50>
   10ec2:	2200      	movs	r2, #0
   10ec4:	2300      	movs	r3, #0
   10ec6:	9200      	str	r2, [sp, #0]
   10ec8:	9301      	str	r3, [sp, #4]
   10eca:	4643      	mov	r3, r8
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d0e8      	beq.n	10ea2 <__udivmoddi4+0x82>
   10ed0:	07fb      	lsls	r3, r7, #31
   10ed2:	0872      	lsrs	r2, r6, #1
   10ed4:	431a      	orrs	r2, r3
   10ed6:	4646      	mov	r6, r8
   10ed8:	087b      	lsrs	r3, r7, #1
   10eda:	e00e      	b.n	10efa <__udivmoddi4+0xda>
   10edc:	42ab      	cmp	r3, r5
   10ede:	d101      	bne.n	10ee4 <__udivmoddi4+0xc4>
   10ee0:	42a2      	cmp	r2, r4
   10ee2:	d80c      	bhi.n	10efe <__udivmoddi4+0xde>
   10ee4:	1aa4      	subs	r4, r4, r2
   10ee6:	419d      	sbcs	r5, r3
   10ee8:	2001      	movs	r0, #1
   10eea:	1924      	adds	r4, r4, r4
   10eec:	416d      	adcs	r5, r5
   10eee:	2100      	movs	r1, #0
   10ef0:	3e01      	subs	r6, #1
   10ef2:	1824      	adds	r4, r4, r0
   10ef4:	414d      	adcs	r5, r1
   10ef6:	2e00      	cmp	r6, #0
   10ef8:	d006      	beq.n	10f08 <__udivmoddi4+0xe8>
   10efa:	42ab      	cmp	r3, r5
   10efc:	d9ee      	bls.n	10edc <__udivmoddi4+0xbc>
   10efe:	3e01      	subs	r6, #1
   10f00:	1924      	adds	r4, r4, r4
   10f02:	416d      	adcs	r5, r5
   10f04:	2e00      	cmp	r6, #0
   10f06:	d1f8      	bne.n	10efa <__udivmoddi4+0xda>
   10f08:	465b      	mov	r3, fp
   10f0a:	9800      	ldr	r0, [sp, #0]
   10f0c:	9901      	ldr	r1, [sp, #4]
   10f0e:	1900      	adds	r0, r0, r4
   10f10:	4169      	adcs	r1, r5
   10f12:	2b00      	cmp	r3, #0
   10f14:	db22      	blt.n	10f5c <__udivmoddi4+0x13c>
   10f16:	002b      	movs	r3, r5
   10f18:	465a      	mov	r2, fp
   10f1a:	40d3      	lsrs	r3, r2
   10f1c:	002a      	movs	r2, r5
   10f1e:	4644      	mov	r4, r8
   10f20:	40e2      	lsrs	r2, r4
   10f22:	001c      	movs	r4, r3
   10f24:	465b      	mov	r3, fp
   10f26:	0015      	movs	r5, r2
   10f28:	2b00      	cmp	r3, #0
   10f2a:	db2c      	blt.n	10f86 <__udivmoddi4+0x166>
   10f2c:	0026      	movs	r6, r4
   10f2e:	409e      	lsls	r6, r3
   10f30:	0033      	movs	r3, r6
   10f32:	0026      	movs	r6, r4
   10f34:	4647      	mov	r7, r8
   10f36:	40be      	lsls	r6, r7
   10f38:	0032      	movs	r2, r6
   10f3a:	1a80      	subs	r0, r0, r2
   10f3c:	4199      	sbcs	r1, r3
   10f3e:	9000      	str	r0, [sp, #0]
   10f40:	9101      	str	r1, [sp, #4]
   10f42:	e7ae      	b.n	10ea2 <__udivmoddi4+0x82>
   10f44:	4642      	mov	r2, r8
   10f46:	2320      	movs	r3, #32
   10f48:	1a9b      	subs	r3, r3, r2
   10f4a:	4652      	mov	r2, sl
   10f4c:	40da      	lsrs	r2, r3
   10f4e:	4641      	mov	r1, r8
   10f50:	0013      	movs	r3, r2
   10f52:	464a      	mov	r2, r9
   10f54:	408a      	lsls	r2, r1
   10f56:	0017      	movs	r7, r2
   10f58:	431f      	orrs	r7, r3
   10f5a:	e782      	b.n	10e62 <__udivmoddi4+0x42>
   10f5c:	4642      	mov	r2, r8
   10f5e:	2320      	movs	r3, #32
   10f60:	1a9b      	subs	r3, r3, r2
   10f62:	002a      	movs	r2, r5
   10f64:	4646      	mov	r6, r8
   10f66:	409a      	lsls	r2, r3
   10f68:	0023      	movs	r3, r4
   10f6a:	40f3      	lsrs	r3, r6
   10f6c:	4313      	orrs	r3, r2
   10f6e:	e7d5      	b.n	10f1c <__udivmoddi4+0xfc>
   10f70:	4642      	mov	r2, r8
   10f72:	2320      	movs	r3, #32
   10f74:	2100      	movs	r1, #0
   10f76:	1a9b      	subs	r3, r3, r2
   10f78:	2200      	movs	r2, #0
   10f7a:	9100      	str	r1, [sp, #0]
   10f7c:	9201      	str	r2, [sp, #4]
   10f7e:	2201      	movs	r2, #1
   10f80:	40da      	lsrs	r2, r3
   10f82:	9201      	str	r2, [sp, #4]
   10f84:	e782      	b.n	10e8c <__udivmoddi4+0x6c>
   10f86:	4642      	mov	r2, r8
   10f88:	2320      	movs	r3, #32
   10f8a:	0026      	movs	r6, r4
   10f8c:	1a9b      	subs	r3, r3, r2
   10f8e:	40de      	lsrs	r6, r3
   10f90:	002f      	movs	r7, r5
   10f92:	46b4      	mov	ip, r6
   10f94:	4097      	lsls	r7, r2
   10f96:	4666      	mov	r6, ip
   10f98:	003b      	movs	r3, r7
   10f9a:	4333      	orrs	r3, r6
   10f9c:	e7c9      	b.n	10f32 <__udivmoddi4+0x112>
   10f9e:	46c0      	nop			; (mov r8, r8)

00010fa0 <__aeabi_fadd>:
   10fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fa2:	46c6      	mov	lr, r8
   10fa4:	024e      	lsls	r6, r1, #9
   10fa6:	0247      	lsls	r7, r0, #9
   10fa8:	0a76      	lsrs	r6, r6, #9
   10faa:	0a7b      	lsrs	r3, r7, #9
   10fac:	0044      	lsls	r4, r0, #1
   10fae:	0fc5      	lsrs	r5, r0, #31
   10fb0:	00f7      	lsls	r7, r6, #3
   10fb2:	0048      	lsls	r0, r1, #1
   10fb4:	4698      	mov	r8, r3
   10fb6:	b500      	push	{lr}
   10fb8:	0e24      	lsrs	r4, r4, #24
   10fba:	002a      	movs	r2, r5
   10fbc:	00db      	lsls	r3, r3, #3
   10fbe:	0e00      	lsrs	r0, r0, #24
   10fc0:	0fc9      	lsrs	r1, r1, #31
   10fc2:	46bc      	mov	ip, r7
   10fc4:	428d      	cmp	r5, r1
   10fc6:	d067      	beq.n	11098 <__aeabi_fadd+0xf8>
   10fc8:	1a22      	subs	r2, r4, r0
   10fca:	2a00      	cmp	r2, #0
   10fcc:	dc00      	bgt.n	10fd0 <__aeabi_fadd+0x30>
   10fce:	e0a5      	b.n	1111c <__aeabi_fadd+0x17c>
   10fd0:	2800      	cmp	r0, #0
   10fd2:	d13a      	bne.n	1104a <__aeabi_fadd+0xaa>
   10fd4:	2f00      	cmp	r7, #0
   10fd6:	d100      	bne.n	10fda <__aeabi_fadd+0x3a>
   10fd8:	e093      	b.n	11102 <__aeabi_fadd+0x162>
   10fda:	1e51      	subs	r1, r2, #1
   10fdc:	2900      	cmp	r1, #0
   10fde:	d000      	beq.n	10fe2 <__aeabi_fadd+0x42>
   10fe0:	e0bc      	b.n	1115c <__aeabi_fadd+0x1bc>
   10fe2:	2401      	movs	r4, #1
   10fe4:	1bdb      	subs	r3, r3, r7
   10fe6:	015a      	lsls	r2, r3, #5
   10fe8:	d546      	bpl.n	11078 <__aeabi_fadd+0xd8>
   10fea:	019b      	lsls	r3, r3, #6
   10fec:	099e      	lsrs	r6, r3, #6
   10fee:	0030      	movs	r0, r6
   10ff0:	f002 fc2e 	bl	13850 <__clzsi2>
   10ff4:	3805      	subs	r0, #5
   10ff6:	4086      	lsls	r6, r0
   10ff8:	4284      	cmp	r4, r0
   10ffa:	dd00      	ble.n	10ffe <__aeabi_fadd+0x5e>
   10ffc:	e09d      	b.n	1113a <__aeabi_fadd+0x19a>
   10ffe:	1b04      	subs	r4, r0, r4
   11000:	0032      	movs	r2, r6
   11002:	2020      	movs	r0, #32
   11004:	3401      	adds	r4, #1
   11006:	40e2      	lsrs	r2, r4
   11008:	1b04      	subs	r4, r0, r4
   1100a:	40a6      	lsls	r6, r4
   1100c:	0033      	movs	r3, r6
   1100e:	1e5e      	subs	r6, r3, #1
   11010:	41b3      	sbcs	r3, r6
   11012:	2400      	movs	r4, #0
   11014:	4313      	orrs	r3, r2
   11016:	075a      	lsls	r2, r3, #29
   11018:	d004      	beq.n	11024 <__aeabi_fadd+0x84>
   1101a:	220f      	movs	r2, #15
   1101c:	401a      	ands	r2, r3
   1101e:	2a04      	cmp	r2, #4
   11020:	d000      	beq.n	11024 <__aeabi_fadd+0x84>
   11022:	3304      	adds	r3, #4
   11024:	015a      	lsls	r2, r3, #5
   11026:	d529      	bpl.n	1107c <__aeabi_fadd+0xdc>
   11028:	3401      	adds	r4, #1
   1102a:	2cff      	cmp	r4, #255	; 0xff
   1102c:	d100      	bne.n	11030 <__aeabi_fadd+0x90>
   1102e:	e081      	b.n	11134 <__aeabi_fadd+0x194>
   11030:	002a      	movs	r2, r5
   11032:	019b      	lsls	r3, r3, #6
   11034:	0a5b      	lsrs	r3, r3, #9
   11036:	b2e4      	uxtb	r4, r4
   11038:	025b      	lsls	r3, r3, #9
   1103a:	05e4      	lsls	r4, r4, #23
   1103c:	0a58      	lsrs	r0, r3, #9
   1103e:	07d2      	lsls	r2, r2, #31
   11040:	4320      	orrs	r0, r4
   11042:	4310      	orrs	r0, r2
   11044:	bc04      	pop	{r2}
   11046:	4690      	mov	r8, r2
   11048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1104a:	2cff      	cmp	r4, #255	; 0xff
   1104c:	d0e3      	beq.n	11016 <__aeabi_fadd+0x76>
   1104e:	2180      	movs	r1, #128	; 0x80
   11050:	0038      	movs	r0, r7
   11052:	04c9      	lsls	r1, r1, #19
   11054:	4308      	orrs	r0, r1
   11056:	4684      	mov	ip, r0
   11058:	2a1b      	cmp	r2, #27
   1105a:	dd00      	ble.n	1105e <__aeabi_fadd+0xbe>
   1105c:	e082      	b.n	11164 <__aeabi_fadd+0x1c4>
   1105e:	2020      	movs	r0, #32
   11060:	4661      	mov	r1, ip
   11062:	40d1      	lsrs	r1, r2
   11064:	1a82      	subs	r2, r0, r2
   11066:	4660      	mov	r0, ip
   11068:	4090      	lsls	r0, r2
   1106a:	0002      	movs	r2, r0
   1106c:	1e50      	subs	r0, r2, #1
   1106e:	4182      	sbcs	r2, r0
   11070:	430a      	orrs	r2, r1
   11072:	1a9b      	subs	r3, r3, r2
   11074:	015a      	lsls	r2, r3, #5
   11076:	d4b8      	bmi.n	10fea <__aeabi_fadd+0x4a>
   11078:	075a      	lsls	r2, r3, #29
   1107a:	d1ce      	bne.n	1101a <__aeabi_fadd+0x7a>
   1107c:	08de      	lsrs	r6, r3, #3
   1107e:	002a      	movs	r2, r5
   11080:	2cff      	cmp	r4, #255	; 0xff
   11082:	d13a      	bne.n	110fa <__aeabi_fadd+0x15a>
   11084:	2e00      	cmp	r6, #0
   11086:	d100      	bne.n	1108a <__aeabi_fadd+0xea>
   11088:	e0ae      	b.n	111e8 <__aeabi_fadd+0x248>
   1108a:	2380      	movs	r3, #128	; 0x80
   1108c:	03db      	lsls	r3, r3, #15
   1108e:	4333      	orrs	r3, r6
   11090:	025b      	lsls	r3, r3, #9
   11092:	0a5b      	lsrs	r3, r3, #9
   11094:	24ff      	movs	r4, #255	; 0xff
   11096:	e7cf      	b.n	11038 <__aeabi_fadd+0x98>
   11098:	1a21      	subs	r1, r4, r0
   1109a:	2900      	cmp	r1, #0
   1109c:	dd52      	ble.n	11144 <__aeabi_fadd+0x1a4>
   1109e:	2800      	cmp	r0, #0
   110a0:	d031      	beq.n	11106 <__aeabi_fadd+0x166>
   110a2:	2cff      	cmp	r4, #255	; 0xff
   110a4:	d0b7      	beq.n	11016 <__aeabi_fadd+0x76>
   110a6:	2080      	movs	r0, #128	; 0x80
   110a8:	003e      	movs	r6, r7
   110aa:	04c0      	lsls	r0, r0, #19
   110ac:	4306      	orrs	r6, r0
   110ae:	46b4      	mov	ip, r6
   110b0:	291b      	cmp	r1, #27
   110b2:	dd00      	ble.n	110b6 <__aeabi_fadd+0x116>
   110b4:	e0aa      	b.n	1120c <__aeabi_fadd+0x26c>
   110b6:	2620      	movs	r6, #32
   110b8:	4660      	mov	r0, ip
   110ba:	40c8      	lsrs	r0, r1
   110bc:	1a71      	subs	r1, r6, r1
   110be:	4666      	mov	r6, ip
   110c0:	408e      	lsls	r6, r1
   110c2:	0031      	movs	r1, r6
   110c4:	1e4e      	subs	r6, r1, #1
   110c6:	41b1      	sbcs	r1, r6
   110c8:	4301      	orrs	r1, r0
   110ca:	185b      	adds	r3, r3, r1
   110cc:	0159      	lsls	r1, r3, #5
   110ce:	d5d3      	bpl.n	11078 <__aeabi_fadd+0xd8>
   110d0:	3401      	adds	r4, #1
   110d2:	2cff      	cmp	r4, #255	; 0xff
   110d4:	d100      	bne.n	110d8 <__aeabi_fadd+0x138>
   110d6:	e087      	b.n	111e8 <__aeabi_fadd+0x248>
   110d8:	2201      	movs	r2, #1
   110da:	4978      	ldr	r1, [pc, #480]	; (112bc <__aeabi_fadd+0x31c>)
   110dc:	401a      	ands	r2, r3
   110de:	085b      	lsrs	r3, r3, #1
   110e0:	400b      	ands	r3, r1
   110e2:	4313      	orrs	r3, r2
   110e4:	e797      	b.n	11016 <__aeabi_fadd+0x76>
   110e6:	2c00      	cmp	r4, #0
   110e8:	d000      	beq.n	110ec <__aeabi_fadd+0x14c>
   110ea:	e0a7      	b.n	1123c <__aeabi_fadd+0x29c>
   110ec:	2b00      	cmp	r3, #0
   110ee:	d000      	beq.n	110f2 <__aeabi_fadd+0x152>
   110f0:	e0b6      	b.n	11260 <__aeabi_fadd+0x2c0>
   110f2:	1e3b      	subs	r3, r7, #0
   110f4:	d162      	bne.n	111bc <__aeabi_fadd+0x21c>
   110f6:	2600      	movs	r6, #0
   110f8:	2200      	movs	r2, #0
   110fa:	0273      	lsls	r3, r6, #9
   110fc:	0a5b      	lsrs	r3, r3, #9
   110fe:	b2e4      	uxtb	r4, r4
   11100:	e79a      	b.n	11038 <__aeabi_fadd+0x98>
   11102:	0014      	movs	r4, r2
   11104:	e787      	b.n	11016 <__aeabi_fadd+0x76>
   11106:	2f00      	cmp	r7, #0
   11108:	d04d      	beq.n	111a6 <__aeabi_fadd+0x206>
   1110a:	1e48      	subs	r0, r1, #1
   1110c:	2800      	cmp	r0, #0
   1110e:	d157      	bne.n	111c0 <__aeabi_fadd+0x220>
   11110:	4463      	add	r3, ip
   11112:	2401      	movs	r4, #1
   11114:	015a      	lsls	r2, r3, #5
   11116:	d5af      	bpl.n	11078 <__aeabi_fadd+0xd8>
   11118:	2402      	movs	r4, #2
   1111a:	e7dd      	b.n	110d8 <__aeabi_fadd+0x138>
   1111c:	2a00      	cmp	r2, #0
   1111e:	d124      	bne.n	1116a <__aeabi_fadd+0x1ca>
   11120:	1c62      	adds	r2, r4, #1
   11122:	b2d2      	uxtb	r2, r2
   11124:	2a01      	cmp	r2, #1
   11126:	ddde      	ble.n	110e6 <__aeabi_fadd+0x146>
   11128:	1bde      	subs	r6, r3, r7
   1112a:	0172      	lsls	r2, r6, #5
   1112c:	d535      	bpl.n	1119a <__aeabi_fadd+0x1fa>
   1112e:	1afe      	subs	r6, r7, r3
   11130:	000d      	movs	r5, r1
   11132:	e75c      	b.n	10fee <__aeabi_fadd+0x4e>
   11134:	002a      	movs	r2, r5
   11136:	2300      	movs	r3, #0
   11138:	e77e      	b.n	11038 <__aeabi_fadd+0x98>
   1113a:	0033      	movs	r3, r6
   1113c:	4a60      	ldr	r2, [pc, #384]	; (112c0 <__aeabi_fadd+0x320>)
   1113e:	1a24      	subs	r4, r4, r0
   11140:	4013      	ands	r3, r2
   11142:	e768      	b.n	11016 <__aeabi_fadd+0x76>
   11144:	2900      	cmp	r1, #0
   11146:	d163      	bne.n	11210 <__aeabi_fadd+0x270>
   11148:	1c61      	adds	r1, r4, #1
   1114a:	b2c8      	uxtb	r0, r1
   1114c:	2801      	cmp	r0, #1
   1114e:	dd4e      	ble.n	111ee <__aeabi_fadd+0x24e>
   11150:	29ff      	cmp	r1, #255	; 0xff
   11152:	d049      	beq.n	111e8 <__aeabi_fadd+0x248>
   11154:	4463      	add	r3, ip
   11156:	085b      	lsrs	r3, r3, #1
   11158:	000c      	movs	r4, r1
   1115a:	e75c      	b.n	11016 <__aeabi_fadd+0x76>
   1115c:	2aff      	cmp	r2, #255	; 0xff
   1115e:	d041      	beq.n	111e4 <__aeabi_fadd+0x244>
   11160:	000a      	movs	r2, r1
   11162:	e779      	b.n	11058 <__aeabi_fadd+0xb8>
   11164:	2201      	movs	r2, #1
   11166:	1a9b      	subs	r3, r3, r2
   11168:	e784      	b.n	11074 <__aeabi_fadd+0xd4>
   1116a:	2c00      	cmp	r4, #0
   1116c:	d01d      	beq.n	111aa <__aeabi_fadd+0x20a>
   1116e:	28ff      	cmp	r0, #255	; 0xff
   11170:	d022      	beq.n	111b8 <__aeabi_fadd+0x218>
   11172:	2480      	movs	r4, #128	; 0x80
   11174:	04e4      	lsls	r4, r4, #19
   11176:	4252      	negs	r2, r2
   11178:	4323      	orrs	r3, r4
   1117a:	2a1b      	cmp	r2, #27
   1117c:	dd00      	ble.n	11180 <__aeabi_fadd+0x1e0>
   1117e:	e08a      	b.n	11296 <__aeabi_fadd+0x2f6>
   11180:	001c      	movs	r4, r3
   11182:	2520      	movs	r5, #32
   11184:	40d4      	lsrs	r4, r2
   11186:	1aaa      	subs	r2, r5, r2
   11188:	4093      	lsls	r3, r2
   1118a:	1e5a      	subs	r2, r3, #1
   1118c:	4193      	sbcs	r3, r2
   1118e:	4323      	orrs	r3, r4
   11190:	4662      	mov	r2, ip
   11192:	0004      	movs	r4, r0
   11194:	1ad3      	subs	r3, r2, r3
   11196:	000d      	movs	r5, r1
   11198:	e725      	b.n	10fe6 <__aeabi_fadd+0x46>
   1119a:	2e00      	cmp	r6, #0
   1119c:	d000      	beq.n	111a0 <__aeabi_fadd+0x200>
   1119e:	e726      	b.n	10fee <__aeabi_fadd+0x4e>
   111a0:	2200      	movs	r2, #0
   111a2:	2400      	movs	r4, #0
   111a4:	e7a9      	b.n	110fa <__aeabi_fadd+0x15a>
   111a6:	000c      	movs	r4, r1
   111a8:	e735      	b.n	11016 <__aeabi_fadd+0x76>
   111aa:	2b00      	cmp	r3, #0
   111ac:	d04d      	beq.n	1124a <__aeabi_fadd+0x2aa>
   111ae:	43d2      	mvns	r2, r2
   111b0:	2a00      	cmp	r2, #0
   111b2:	d0ed      	beq.n	11190 <__aeabi_fadd+0x1f0>
   111b4:	28ff      	cmp	r0, #255	; 0xff
   111b6:	d1e0      	bne.n	1117a <__aeabi_fadd+0x1da>
   111b8:	4663      	mov	r3, ip
   111ba:	24ff      	movs	r4, #255	; 0xff
   111bc:	000d      	movs	r5, r1
   111be:	e72a      	b.n	11016 <__aeabi_fadd+0x76>
   111c0:	29ff      	cmp	r1, #255	; 0xff
   111c2:	d00f      	beq.n	111e4 <__aeabi_fadd+0x244>
   111c4:	0001      	movs	r1, r0
   111c6:	e773      	b.n	110b0 <__aeabi_fadd+0x110>
   111c8:	2b00      	cmp	r3, #0
   111ca:	d061      	beq.n	11290 <__aeabi_fadd+0x2f0>
   111cc:	24ff      	movs	r4, #255	; 0xff
   111ce:	2f00      	cmp	r7, #0
   111d0:	d100      	bne.n	111d4 <__aeabi_fadd+0x234>
   111d2:	e720      	b.n	11016 <__aeabi_fadd+0x76>
   111d4:	2280      	movs	r2, #128	; 0x80
   111d6:	4641      	mov	r1, r8
   111d8:	03d2      	lsls	r2, r2, #15
   111da:	4211      	tst	r1, r2
   111dc:	d002      	beq.n	111e4 <__aeabi_fadd+0x244>
   111de:	4216      	tst	r6, r2
   111e0:	d100      	bne.n	111e4 <__aeabi_fadd+0x244>
   111e2:	003b      	movs	r3, r7
   111e4:	24ff      	movs	r4, #255	; 0xff
   111e6:	e716      	b.n	11016 <__aeabi_fadd+0x76>
   111e8:	24ff      	movs	r4, #255	; 0xff
   111ea:	2300      	movs	r3, #0
   111ec:	e724      	b.n	11038 <__aeabi_fadd+0x98>
   111ee:	2c00      	cmp	r4, #0
   111f0:	d1ea      	bne.n	111c8 <__aeabi_fadd+0x228>
   111f2:	2b00      	cmp	r3, #0
   111f4:	d058      	beq.n	112a8 <__aeabi_fadd+0x308>
   111f6:	2f00      	cmp	r7, #0
   111f8:	d100      	bne.n	111fc <__aeabi_fadd+0x25c>
   111fa:	e70c      	b.n	11016 <__aeabi_fadd+0x76>
   111fc:	4463      	add	r3, ip
   111fe:	015a      	lsls	r2, r3, #5
   11200:	d400      	bmi.n	11204 <__aeabi_fadd+0x264>
   11202:	e739      	b.n	11078 <__aeabi_fadd+0xd8>
   11204:	4a2e      	ldr	r2, [pc, #184]	; (112c0 <__aeabi_fadd+0x320>)
   11206:	000c      	movs	r4, r1
   11208:	4013      	ands	r3, r2
   1120a:	e704      	b.n	11016 <__aeabi_fadd+0x76>
   1120c:	2101      	movs	r1, #1
   1120e:	e75c      	b.n	110ca <__aeabi_fadd+0x12a>
   11210:	2c00      	cmp	r4, #0
   11212:	d11e      	bne.n	11252 <__aeabi_fadd+0x2b2>
   11214:	2b00      	cmp	r3, #0
   11216:	d040      	beq.n	1129a <__aeabi_fadd+0x2fa>
   11218:	43c9      	mvns	r1, r1
   1121a:	2900      	cmp	r1, #0
   1121c:	d00b      	beq.n	11236 <__aeabi_fadd+0x296>
   1121e:	28ff      	cmp	r0, #255	; 0xff
   11220:	d036      	beq.n	11290 <__aeabi_fadd+0x2f0>
   11222:	291b      	cmp	r1, #27
   11224:	dc47      	bgt.n	112b6 <__aeabi_fadd+0x316>
   11226:	001c      	movs	r4, r3
   11228:	2620      	movs	r6, #32
   1122a:	40cc      	lsrs	r4, r1
   1122c:	1a71      	subs	r1, r6, r1
   1122e:	408b      	lsls	r3, r1
   11230:	1e59      	subs	r1, r3, #1
   11232:	418b      	sbcs	r3, r1
   11234:	4323      	orrs	r3, r4
   11236:	4463      	add	r3, ip
   11238:	0004      	movs	r4, r0
   1123a:	e747      	b.n	110cc <__aeabi_fadd+0x12c>
   1123c:	2b00      	cmp	r3, #0
   1123e:	d118      	bne.n	11272 <__aeabi_fadd+0x2d2>
   11240:	1e3b      	subs	r3, r7, #0
   11242:	d02d      	beq.n	112a0 <__aeabi_fadd+0x300>
   11244:	000d      	movs	r5, r1
   11246:	24ff      	movs	r4, #255	; 0xff
   11248:	e6e5      	b.n	11016 <__aeabi_fadd+0x76>
   1124a:	003b      	movs	r3, r7
   1124c:	0004      	movs	r4, r0
   1124e:	000d      	movs	r5, r1
   11250:	e6e1      	b.n	11016 <__aeabi_fadd+0x76>
   11252:	28ff      	cmp	r0, #255	; 0xff
   11254:	d01c      	beq.n	11290 <__aeabi_fadd+0x2f0>
   11256:	2480      	movs	r4, #128	; 0x80
   11258:	04e4      	lsls	r4, r4, #19
   1125a:	4249      	negs	r1, r1
   1125c:	4323      	orrs	r3, r4
   1125e:	e7e0      	b.n	11222 <__aeabi_fadd+0x282>
   11260:	2f00      	cmp	r7, #0
   11262:	d100      	bne.n	11266 <__aeabi_fadd+0x2c6>
   11264:	e6d7      	b.n	11016 <__aeabi_fadd+0x76>
   11266:	1bde      	subs	r6, r3, r7
   11268:	0172      	lsls	r2, r6, #5
   1126a:	d51f      	bpl.n	112ac <__aeabi_fadd+0x30c>
   1126c:	1afb      	subs	r3, r7, r3
   1126e:	000d      	movs	r5, r1
   11270:	e6d1      	b.n	11016 <__aeabi_fadd+0x76>
   11272:	24ff      	movs	r4, #255	; 0xff
   11274:	2f00      	cmp	r7, #0
   11276:	d100      	bne.n	1127a <__aeabi_fadd+0x2da>
   11278:	e6cd      	b.n	11016 <__aeabi_fadd+0x76>
   1127a:	2280      	movs	r2, #128	; 0x80
   1127c:	4640      	mov	r0, r8
   1127e:	03d2      	lsls	r2, r2, #15
   11280:	4210      	tst	r0, r2
   11282:	d0af      	beq.n	111e4 <__aeabi_fadd+0x244>
   11284:	4216      	tst	r6, r2
   11286:	d1ad      	bne.n	111e4 <__aeabi_fadd+0x244>
   11288:	003b      	movs	r3, r7
   1128a:	000d      	movs	r5, r1
   1128c:	24ff      	movs	r4, #255	; 0xff
   1128e:	e6c2      	b.n	11016 <__aeabi_fadd+0x76>
   11290:	4663      	mov	r3, ip
   11292:	24ff      	movs	r4, #255	; 0xff
   11294:	e6bf      	b.n	11016 <__aeabi_fadd+0x76>
   11296:	2301      	movs	r3, #1
   11298:	e77a      	b.n	11190 <__aeabi_fadd+0x1f0>
   1129a:	003b      	movs	r3, r7
   1129c:	0004      	movs	r4, r0
   1129e:	e6ba      	b.n	11016 <__aeabi_fadd+0x76>
   112a0:	2680      	movs	r6, #128	; 0x80
   112a2:	2200      	movs	r2, #0
   112a4:	03f6      	lsls	r6, r6, #15
   112a6:	e6f0      	b.n	1108a <__aeabi_fadd+0xea>
   112a8:	003b      	movs	r3, r7
   112aa:	e6b4      	b.n	11016 <__aeabi_fadd+0x76>
   112ac:	1e33      	subs	r3, r6, #0
   112ae:	d000      	beq.n	112b2 <__aeabi_fadd+0x312>
   112b0:	e6e2      	b.n	11078 <__aeabi_fadd+0xd8>
   112b2:	2200      	movs	r2, #0
   112b4:	e721      	b.n	110fa <__aeabi_fadd+0x15a>
   112b6:	2301      	movs	r3, #1
   112b8:	e7bd      	b.n	11236 <__aeabi_fadd+0x296>
   112ba:	46c0      	nop			; (mov r8, r8)
   112bc:	7dffffff 	.word	0x7dffffff
   112c0:	fbffffff 	.word	0xfbffffff

000112c4 <__aeabi_fdiv>:
   112c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   112c6:	4657      	mov	r7, sl
   112c8:	464e      	mov	r6, r9
   112ca:	46de      	mov	lr, fp
   112cc:	4645      	mov	r5, r8
   112ce:	b5e0      	push	{r5, r6, r7, lr}
   112d0:	0244      	lsls	r4, r0, #9
   112d2:	0043      	lsls	r3, r0, #1
   112d4:	0fc6      	lsrs	r6, r0, #31
   112d6:	b083      	sub	sp, #12
   112d8:	1c0f      	adds	r7, r1, #0
   112da:	0a64      	lsrs	r4, r4, #9
   112dc:	0e1b      	lsrs	r3, r3, #24
   112de:	46b2      	mov	sl, r6
   112e0:	d053      	beq.n	1138a <__aeabi_fdiv+0xc6>
   112e2:	2bff      	cmp	r3, #255	; 0xff
   112e4:	d027      	beq.n	11336 <__aeabi_fdiv+0x72>
   112e6:	2280      	movs	r2, #128	; 0x80
   112e8:	00e4      	lsls	r4, r4, #3
   112ea:	04d2      	lsls	r2, r2, #19
   112ec:	4314      	orrs	r4, r2
   112ee:	227f      	movs	r2, #127	; 0x7f
   112f0:	4252      	negs	r2, r2
   112f2:	4690      	mov	r8, r2
   112f4:	4498      	add	r8, r3
   112f6:	2300      	movs	r3, #0
   112f8:	4699      	mov	r9, r3
   112fa:	469b      	mov	fp, r3
   112fc:	027d      	lsls	r5, r7, #9
   112fe:	0078      	lsls	r0, r7, #1
   11300:	0ffb      	lsrs	r3, r7, #31
   11302:	0a6d      	lsrs	r5, r5, #9
   11304:	0e00      	lsrs	r0, r0, #24
   11306:	9300      	str	r3, [sp, #0]
   11308:	d024      	beq.n	11354 <__aeabi_fdiv+0x90>
   1130a:	28ff      	cmp	r0, #255	; 0xff
   1130c:	d046      	beq.n	1139c <__aeabi_fdiv+0xd8>
   1130e:	2380      	movs	r3, #128	; 0x80
   11310:	2100      	movs	r1, #0
   11312:	00ed      	lsls	r5, r5, #3
   11314:	04db      	lsls	r3, r3, #19
   11316:	431d      	orrs	r5, r3
   11318:	387f      	subs	r0, #127	; 0x7f
   1131a:	4647      	mov	r7, r8
   1131c:	1a38      	subs	r0, r7, r0
   1131e:	464f      	mov	r7, r9
   11320:	430f      	orrs	r7, r1
   11322:	00bf      	lsls	r7, r7, #2
   11324:	46b9      	mov	r9, r7
   11326:	0033      	movs	r3, r6
   11328:	9a00      	ldr	r2, [sp, #0]
   1132a:	4f87      	ldr	r7, [pc, #540]	; (11548 <__aeabi_fdiv+0x284>)
   1132c:	4053      	eors	r3, r2
   1132e:	464a      	mov	r2, r9
   11330:	58ba      	ldr	r2, [r7, r2]
   11332:	9301      	str	r3, [sp, #4]
   11334:	4697      	mov	pc, r2
   11336:	2c00      	cmp	r4, #0
   11338:	d14e      	bne.n	113d8 <__aeabi_fdiv+0x114>
   1133a:	2308      	movs	r3, #8
   1133c:	4699      	mov	r9, r3
   1133e:	33f7      	adds	r3, #247	; 0xf7
   11340:	4698      	mov	r8, r3
   11342:	3bfd      	subs	r3, #253	; 0xfd
   11344:	469b      	mov	fp, r3
   11346:	027d      	lsls	r5, r7, #9
   11348:	0078      	lsls	r0, r7, #1
   1134a:	0ffb      	lsrs	r3, r7, #31
   1134c:	0a6d      	lsrs	r5, r5, #9
   1134e:	0e00      	lsrs	r0, r0, #24
   11350:	9300      	str	r3, [sp, #0]
   11352:	d1da      	bne.n	1130a <__aeabi_fdiv+0x46>
   11354:	2d00      	cmp	r5, #0
   11356:	d126      	bne.n	113a6 <__aeabi_fdiv+0xe2>
   11358:	2000      	movs	r0, #0
   1135a:	2101      	movs	r1, #1
   1135c:	0033      	movs	r3, r6
   1135e:	9a00      	ldr	r2, [sp, #0]
   11360:	4f7a      	ldr	r7, [pc, #488]	; (1154c <__aeabi_fdiv+0x288>)
   11362:	4053      	eors	r3, r2
   11364:	4642      	mov	r2, r8
   11366:	1a10      	subs	r0, r2, r0
   11368:	464a      	mov	r2, r9
   1136a:	430a      	orrs	r2, r1
   1136c:	0092      	lsls	r2, r2, #2
   1136e:	58ba      	ldr	r2, [r7, r2]
   11370:	001d      	movs	r5, r3
   11372:	4697      	mov	pc, r2
   11374:	9b00      	ldr	r3, [sp, #0]
   11376:	002c      	movs	r4, r5
   11378:	469a      	mov	sl, r3
   1137a:	468b      	mov	fp, r1
   1137c:	465b      	mov	r3, fp
   1137e:	2b02      	cmp	r3, #2
   11380:	d131      	bne.n	113e6 <__aeabi_fdiv+0x122>
   11382:	4653      	mov	r3, sl
   11384:	21ff      	movs	r1, #255	; 0xff
   11386:	2400      	movs	r4, #0
   11388:	e038      	b.n	113fc <__aeabi_fdiv+0x138>
   1138a:	2c00      	cmp	r4, #0
   1138c:	d117      	bne.n	113be <__aeabi_fdiv+0xfa>
   1138e:	2304      	movs	r3, #4
   11390:	4699      	mov	r9, r3
   11392:	2300      	movs	r3, #0
   11394:	4698      	mov	r8, r3
   11396:	3301      	adds	r3, #1
   11398:	469b      	mov	fp, r3
   1139a:	e7af      	b.n	112fc <__aeabi_fdiv+0x38>
   1139c:	20ff      	movs	r0, #255	; 0xff
   1139e:	2d00      	cmp	r5, #0
   113a0:	d10b      	bne.n	113ba <__aeabi_fdiv+0xf6>
   113a2:	2102      	movs	r1, #2
   113a4:	e7da      	b.n	1135c <__aeabi_fdiv+0x98>
   113a6:	0028      	movs	r0, r5
   113a8:	f002 fa52 	bl	13850 <__clzsi2>
   113ac:	1f43      	subs	r3, r0, #5
   113ae:	409d      	lsls	r5, r3
   113b0:	2376      	movs	r3, #118	; 0x76
   113b2:	425b      	negs	r3, r3
   113b4:	1a18      	subs	r0, r3, r0
   113b6:	2100      	movs	r1, #0
   113b8:	e7af      	b.n	1131a <__aeabi_fdiv+0x56>
   113ba:	2103      	movs	r1, #3
   113bc:	e7ad      	b.n	1131a <__aeabi_fdiv+0x56>
   113be:	0020      	movs	r0, r4
   113c0:	f002 fa46 	bl	13850 <__clzsi2>
   113c4:	1f43      	subs	r3, r0, #5
   113c6:	409c      	lsls	r4, r3
   113c8:	2376      	movs	r3, #118	; 0x76
   113ca:	425b      	negs	r3, r3
   113cc:	1a1b      	subs	r3, r3, r0
   113ce:	4698      	mov	r8, r3
   113d0:	2300      	movs	r3, #0
   113d2:	4699      	mov	r9, r3
   113d4:	469b      	mov	fp, r3
   113d6:	e791      	b.n	112fc <__aeabi_fdiv+0x38>
   113d8:	230c      	movs	r3, #12
   113da:	4699      	mov	r9, r3
   113dc:	33f3      	adds	r3, #243	; 0xf3
   113de:	4698      	mov	r8, r3
   113e0:	3bfc      	subs	r3, #252	; 0xfc
   113e2:	469b      	mov	fp, r3
   113e4:	e78a      	b.n	112fc <__aeabi_fdiv+0x38>
   113e6:	2b03      	cmp	r3, #3
   113e8:	d100      	bne.n	113ec <__aeabi_fdiv+0x128>
   113ea:	e0a5      	b.n	11538 <__aeabi_fdiv+0x274>
   113ec:	4655      	mov	r5, sl
   113ee:	2b01      	cmp	r3, #1
   113f0:	d000      	beq.n	113f4 <__aeabi_fdiv+0x130>
   113f2:	e081      	b.n	114f8 <__aeabi_fdiv+0x234>
   113f4:	2301      	movs	r3, #1
   113f6:	2100      	movs	r1, #0
   113f8:	2400      	movs	r4, #0
   113fa:	402b      	ands	r3, r5
   113fc:	0264      	lsls	r4, r4, #9
   113fe:	05c9      	lsls	r1, r1, #23
   11400:	0a60      	lsrs	r0, r4, #9
   11402:	07db      	lsls	r3, r3, #31
   11404:	4308      	orrs	r0, r1
   11406:	4318      	orrs	r0, r3
   11408:	b003      	add	sp, #12
   1140a:	bc3c      	pop	{r2, r3, r4, r5}
   1140c:	4690      	mov	r8, r2
   1140e:	4699      	mov	r9, r3
   11410:	46a2      	mov	sl, r4
   11412:	46ab      	mov	fp, r5
   11414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11416:	2480      	movs	r4, #128	; 0x80
   11418:	2300      	movs	r3, #0
   1141a:	03e4      	lsls	r4, r4, #15
   1141c:	21ff      	movs	r1, #255	; 0xff
   1141e:	e7ed      	b.n	113fc <__aeabi_fdiv+0x138>
   11420:	21ff      	movs	r1, #255	; 0xff
   11422:	2400      	movs	r4, #0
   11424:	e7ea      	b.n	113fc <__aeabi_fdiv+0x138>
   11426:	2301      	movs	r3, #1
   11428:	1a59      	subs	r1, r3, r1
   1142a:	291b      	cmp	r1, #27
   1142c:	dd66      	ble.n	114fc <__aeabi_fdiv+0x238>
   1142e:	9a01      	ldr	r2, [sp, #4]
   11430:	4013      	ands	r3, r2
   11432:	2100      	movs	r1, #0
   11434:	2400      	movs	r4, #0
   11436:	e7e1      	b.n	113fc <__aeabi_fdiv+0x138>
   11438:	2380      	movs	r3, #128	; 0x80
   1143a:	03db      	lsls	r3, r3, #15
   1143c:	421c      	tst	r4, r3
   1143e:	d038      	beq.n	114b2 <__aeabi_fdiv+0x1ee>
   11440:	421d      	tst	r5, r3
   11442:	d051      	beq.n	114e8 <__aeabi_fdiv+0x224>
   11444:	431c      	orrs	r4, r3
   11446:	0264      	lsls	r4, r4, #9
   11448:	0a64      	lsrs	r4, r4, #9
   1144a:	0033      	movs	r3, r6
   1144c:	21ff      	movs	r1, #255	; 0xff
   1144e:	e7d5      	b.n	113fc <__aeabi_fdiv+0x138>
   11450:	0163      	lsls	r3, r4, #5
   11452:	016c      	lsls	r4, r5, #5
   11454:	42a3      	cmp	r3, r4
   11456:	d23b      	bcs.n	114d0 <__aeabi_fdiv+0x20c>
   11458:	261b      	movs	r6, #27
   1145a:	2100      	movs	r1, #0
   1145c:	3801      	subs	r0, #1
   1145e:	2501      	movs	r5, #1
   11460:	001f      	movs	r7, r3
   11462:	0049      	lsls	r1, r1, #1
   11464:	005b      	lsls	r3, r3, #1
   11466:	2f00      	cmp	r7, #0
   11468:	db01      	blt.n	1146e <__aeabi_fdiv+0x1aa>
   1146a:	429c      	cmp	r4, r3
   1146c:	d801      	bhi.n	11472 <__aeabi_fdiv+0x1ae>
   1146e:	1b1b      	subs	r3, r3, r4
   11470:	4329      	orrs	r1, r5
   11472:	3e01      	subs	r6, #1
   11474:	2e00      	cmp	r6, #0
   11476:	d1f3      	bne.n	11460 <__aeabi_fdiv+0x19c>
   11478:	001c      	movs	r4, r3
   1147a:	1e63      	subs	r3, r4, #1
   1147c:	419c      	sbcs	r4, r3
   1147e:	430c      	orrs	r4, r1
   11480:	0001      	movs	r1, r0
   11482:	317f      	adds	r1, #127	; 0x7f
   11484:	2900      	cmp	r1, #0
   11486:	ddce      	ble.n	11426 <__aeabi_fdiv+0x162>
   11488:	0763      	lsls	r3, r4, #29
   1148a:	d004      	beq.n	11496 <__aeabi_fdiv+0x1d2>
   1148c:	230f      	movs	r3, #15
   1148e:	4023      	ands	r3, r4
   11490:	2b04      	cmp	r3, #4
   11492:	d000      	beq.n	11496 <__aeabi_fdiv+0x1d2>
   11494:	3404      	adds	r4, #4
   11496:	0123      	lsls	r3, r4, #4
   11498:	d503      	bpl.n	114a2 <__aeabi_fdiv+0x1de>
   1149a:	0001      	movs	r1, r0
   1149c:	4b2c      	ldr	r3, [pc, #176]	; (11550 <__aeabi_fdiv+0x28c>)
   1149e:	3180      	adds	r1, #128	; 0x80
   114a0:	401c      	ands	r4, r3
   114a2:	29fe      	cmp	r1, #254	; 0xfe
   114a4:	dd0d      	ble.n	114c2 <__aeabi_fdiv+0x1fe>
   114a6:	2301      	movs	r3, #1
   114a8:	9a01      	ldr	r2, [sp, #4]
   114aa:	21ff      	movs	r1, #255	; 0xff
   114ac:	4013      	ands	r3, r2
   114ae:	2400      	movs	r4, #0
   114b0:	e7a4      	b.n	113fc <__aeabi_fdiv+0x138>
   114b2:	2380      	movs	r3, #128	; 0x80
   114b4:	03db      	lsls	r3, r3, #15
   114b6:	431c      	orrs	r4, r3
   114b8:	0264      	lsls	r4, r4, #9
   114ba:	0a64      	lsrs	r4, r4, #9
   114bc:	0033      	movs	r3, r6
   114be:	21ff      	movs	r1, #255	; 0xff
   114c0:	e79c      	b.n	113fc <__aeabi_fdiv+0x138>
   114c2:	2301      	movs	r3, #1
   114c4:	9a01      	ldr	r2, [sp, #4]
   114c6:	01a4      	lsls	r4, r4, #6
   114c8:	0a64      	lsrs	r4, r4, #9
   114ca:	b2c9      	uxtb	r1, r1
   114cc:	4013      	ands	r3, r2
   114ce:	e795      	b.n	113fc <__aeabi_fdiv+0x138>
   114d0:	1b1b      	subs	r3, r3, r4
   114d2:	261a      	movs	r6, #26
   114d4:	2101      	movs	r1, #1
   114d6:	e7c2      	b.n	1145e <__aeabi_fdiv+0x19a>
   114d8:	9b00      	ldr	r3, [sp, #0]
   114da:	468b      	mov	fp, r1
   114dc:	469a      	mov	sl, r3
   114de:	2400      	movs	r4, #0
   114e0:	e74c      	b.n	1137c <__aeabi_fdiv+0xb8>
   114e2:	0263      	lsls	r3, r4, #9
   114e4:	d5e5      	bpl.n	114b2 <__aeabi_fdiv+0x1ee>
   114e6:	2500      	movs	r5, #0
   114e8:	2480      	movs	r4, #128	; 0x80
   114ea:	03e4      	lsls	r4, r4, #15
   114ec:	432c      	orrs	r4, r5
   114ee:	0264      	lsls	r4, r4, #9
   114f0:	0a64      	lsrs	r4, r4, #9
   114f2:	9b00      	ldr	r3, [sp, #0]
   114f4:	21ff      	movs	r1, #255	; 0xff
   114f6:	e781      	b.n	113fc <__aeabi_fdiv+0x138>
   114f8:	9501      	str	r5, [sp, #4]
   114fa:	e7c1      	b.n	11480 <__aeabi_fdiv+0x1bc>
   114fc:	0023      	movs	r3, r4
   114fe:	2020      	movs	r0, #32
   11500:	40cb      	lsrs	r3, r1
   11502:	1a41      	subs	r1, r0, r1
   11504:	408c      	lsls	r4, r1
   11506:	1e61      	subs	r1, r4, #1
   11508:	418c      	sbcs	r4, r1
   1150a:	431c      	orrs	r4, r3
   1150c:	0763      	lsls	r3, r4, #29
   1150e:	d004      	beq.n	1151a <__aeabi_fdiv+0x256>
   11510:	230f      	movs	r3, #15
   11512:	4023      	ands	r3, r4
   11514:	2b04      	cmp	r3, #4
   11516:	d000      	beq.n	1151a <__aeabi_fdiv+0x256>
   11518:	3404      	adds	r4, #4
   1151a:	0163      	lsls	r3, r4, #5
   1151c:	d505      	bpl.n	1152a <__aeabi_fdiv+0x266>
   1151e:	2301      	movs	r3, #1
   11520:	9a01      	ldr	r2, [sp, #4]
   11522:	2101      	movs	r1, #1
   11524:	4013      	ands	r3, r2
   11526:	2400      	movs	r4, #0
   11528:	e768      	b.n	113fc <__aeabi_fdiv+0x138>
   1152a:	2301      	movs	r3, #1
   1152c:	9a01      	ldr	r2, [sp, #4]
   1152e:	01a4      	lsls	r4, r4, #6
   11530:	0a64      	lsrs	r4, r4, #9
   11532:	4013      	ands	r3, r2
   11534:	2100      	movs	r1, #0
   11536:	e761      	b.n	113fc <__aeabi_fdiv+0x138>
   11538:	2380      	movs	r3, #128	; 0x80
   1153a:	03db      	lsls	r3, r3, #15
   1153c:	431c      	orrs	r4, r3
   1153e:	0264      	lsls	r4, r4, #9
   11540:	0a64      	lsrs	r4, r4, #9
   11542:	4653      	mov	r3, sl
   11544:	21ff      	movs	r1, #255	; 0xff
   11546:	e759      	b.n	113fc <__aeabi_fdiv+0x138>
   11548:	0001ae84 	.word	0x0001ae84
   1154c:	0001aec4 	.word	0x0001aec4
   11550:	f7ffffff 	.word	0xf7ffffff

00011554 <__eqsf2>:
   11554:	b570      	push	{r4, r5, r6, lr}
   11556:	0042      	lsls	r2, r0, #1
   11558:	0245      	lsls	r5, r0, #9
   1155a:	024e      	lsls	r6, r1, #9
   1155c:	004c      	lsls	r4, r1, #1
   1155e:	0fc3      	lsrs	r3, r0, #31
   11560:	0a6d      	lsrs	r5, r5, #9
   11562:	0e12      	lsrs	r2, r2, #24
   11564:	0a76      	lsrs	r6, r6, #9
   11566:	0e24      	lsrs	r4, r4, #24
   11568:	0fc9      	lsrs	r1, r1, #31
   1156a:	2001      	movs	r0, #1
   1156c:	2aff      	cmp	r2, #255	; 0xff
   1156e:	d006      	beq.n	1157e <__eqsf2+0x2a>
   11570:	2cff      	cmp	r4, #255	; 0xff
   11572:	d003      	beq.n	1157c <__eqsf2+0x28>
   11574:	42a2      	cmp	r2, r4
   11576:	d101      	bne.n	1157c <__eqsf2+0x28>
   11578:	42b5      	cmp	r5, r6
   1157a:	d006      	beq.n	1158a <__eqsf2+0x36>
   1157c:	bd70      	pop	{r4, r5, r6, pc}
   1157e:	2d00      	cmp	r5, #0
   11580:	d1fc      	bne.n	1157c <__eqsf2+0x28>
   11582:	2cff      	cmp	r4, #255	; 0xff
   11584:	d1fa      	bne.n	1157c <__eqsf2+0x28>
   11586:	2e00      	cmp	r6, #0
   11588:	d1f8      	bne.n	1157c <__eqsf2+0x28>
   1158a:	428b      	cmp	r3, r1
   1158c:	d006      	beq.n	1159c <__eqsf2+0x48>
   1158e:	2001      	movs	r0, #1
   11590:	2a00      	cmp	r2, #0
   11592:	d1f3      	bne.n	1157c <__eqsf2+0x28>
   11594:	0028      	movs	r0, r5
   11596:	1e45      	subs	r5, r0, #1
   11598:	41a8      	sbcs	r0, r5
   1159a:	e7ef      	b.n	1157c <__eqsf2+0x28>
   1159c:	2000      	movs	r0, #0
   1159e:	e7ed      	b.n	1157c <__eqsf2+0x28>

000115a0 <__gesf2>:
   115a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115a2:	0042      	lsls	r2, r0, #1
   115a4:	0245      	lsls	r5, r0, #9
   115a6:	024c      	lsls	r4, r1, #9
   115a8:	0fc3      	lsrs	r3, r0, #31
   115aa:	0048      	lsls	r0, r1, #1
   115ac:	0a6d      	lsrs	r5, r5, #9
   115ae:	0e12      	lsrs	r2, r2, #24
   115b0:	0a64      	lsrs	r4, r4, #9
   115b2:	0e00      	lsrs	r0, r0, #24
   115b4:	0fc9      	lsrs	r1, r1, #31
   115b6:	2aff      	cmp	r2, #255	; 0xff
   115b8:	d01e      	beq.n	115f8 <__gesf2+0x58>
   115ba:	28ff      	cmp	r0, #255	; 0xff
   115bc:	d021      	beq.n	11602 <__gesf2+0x62>
   115be:	2a00      	cmp	r2, #0
   115c0:	d10a      	bne.n	115d8 <__gesf2+0x38>
   115c2:	426e      	negs	r6, r5
   115c4:	416e      	adcs	r6, r5
   115c6:	b2f6      	uxtb	r6, r6
   115c8:	2800      	cmp	r0, #0
   115ca:	d10f      	bne.n	115ec <__gesf2+0x4c>
   115cc:	2c00      	cmp	r4, #0
   115ce:	d10d      	bne.n	115ec <__gesf2+0x4c>
   115d0:	2000      	movs	r0, #0
   115d2:	2d00      	cmp	r5, #0
   115d4:	d009      	beq.n	115ea <__gesf2+0x4a>
   115d6:	e005      	b.n	115e4 <__gesf2+0x44>
   115d8:	2800      	cmp	r0, #0
   115da:	d101      	bne.n	115e0 <__gesf2+0x40>
   115dc:	2c00      	cmp	r4, #0
   115de:	d001      	beq.n	115e4 <__gesf2+0x44>
   115e0:	428b      	cmp	r3, r1
   115e2:	d011      	beq.n	11608 <__gesf2+0x68>
   115e4:	2101      	movs	r1, #1
   115e6:	4258      	negs	r0, r3
   115e8:	4308      	orrs	r0, r1
   115ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115ec:	2e00      	cmp	r6, #0
   115ee:	d0f7      	beq.n	115e0 <__gesf2+0x40>
   115f0:	2001      	movs	r0, #1
   115f2:	3901      	subs	r1, #1
   115f4:	4308      	orrs	r0, r1
   115f6:	e7f8      	b.n	115ea <__gesf2+0x4a>
   115f8:	2d00      	cmp	r5, #0
   115fa:	d0de      	beq.n	115ba <__gesf2+0x1a>
   115fc:	2002      	movs	r0, #2
   115fe:	4240      	negs	r0, r0
   11600:	e7f3      	b.n	115ea <__gesf2+0x4a>
   11602:	2c00      	cmp	r4, #0
   11604:	d0db      	beq.n	115be <__gesf2+0x1e>
   11606:	e7f9      	b.n	115fc <__gesf2+0x5c>
   11608:	4282      	cmp	r2, r0
   1160a:	dceb      	bgt.n	115e4 <__gesf2+0x44>
   1160c:	db04      	blt.n	11618 <__gesf2+0x78>
   1160e:	42a5      	cmp	r5, r4
   11610:	d8e8      	bhi.n	115e4 <__gesf2+0x44>
   11612:	2000      	movs	r0, #0
   11614:	42a5      	cmp	r5, r4
   11616:	d2e8      	bcs.n	115ea <__gesf2+0x4a>
   11618:	2101      	movs	r1, #1
   1161a:	1e58      	subs	r0, r3, #1
   1161c:	4308      	orrs	r0, r1
   1161e:	e7e4      	b.n	115ea <__gesf2+0x4a>

00011620 <__lesf2>:
   11620:	b5f0      	push	{r4, r5, r6, r7, lr}
   11622:	0042      	lsls	r2, r0, #1
   11624:	024d      	lsls	r5, r1, #9
   11626:	004c      	lsls	r4, r1, #1
   11628:	0246      	lsls	r6, r0, #9
   1162a:	0a76      	lsrs	r6, r6, #9
   1162c:	0e12      	lsrs	r2, r2, #24
   1162e:	0fc3      	lsrs	r3, r0, #31
   11630:	0a6d      	lsrs	r5, r5, #9
   11632:	0e24      	lsrs	r4, r4, #24
   11634:	0fc9      	lsrs	r1, r1, #31
   11636:	2aff      	cmp	r2, #255	; 0xff
   11638:	d016      	beq.n	11668 <__lesf2+0x48>
   1163a:	2cff      	cmp	r4, #255	; 0xff
   1163c:	d018      	beq.n	11670 <__lesf2+0x50>
   1163e:	2a00      	cmp	r2, #0
   11640:	d10a      	bne.n	11658 <__lesf2+0x38>
   11642:	4270      	negs	r0, r6
   11644:	4170      	adcs	r0, r6
   11646:	b2c0      	uxtb	r0, r0
   11648:	2c00      	cmp	r4, #0
   1164a:	d015      	beq.n	11678 <__lesf2+0x58>
   1164c:	2800      	cmp	r0, #0
   1164e:	d005      	beq.n	1165c <__lesf2+0x3c>
   11650:	2001      	movs	r0, #1
   11652:	3901      	subs	r1, #1
   11654:	4308      	orrs	r0, r1
   11656:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11658:	2c00      	cmp	r4, #0
   1165a:	d013      	beq.n	11684 <__lesf2+0x64>
   1165c:	4299      	cmp	r1, r3
   1165e:	d014      	beq.n	1168a <__lesf2+0x6a>
   11660:	2001      	movs	r0, #1
   11662:	425b      	negs	r3, r3
   11664:	4318      	orrs	r0, r3
   11666:	e7f6      	b.n	11656 <__lesf2+0x36>
   11668:	2002      	movs	r0, #2
   1166a:	2e00      	cmp	r6, #0
   1166c:	d1f3      	bne.n	11656 <__lesf2+0x36>
   1166e:	e7e4      	b.n	1163a <__lesf2+0x1a>
   11670:	2002      	movs	r0, #2
   11672:	2d00      	cmp	r5, #0
   11674:	d1ef      	bne.n	11656 <__lesf2+0x36>
   11676:	e7e2      	b.n	1163e <__lesf2+0x1e>
   11678:	2d00      	cmp	r5, #0
   1167a:	d1e7      	bne.n	1164c <__lesf2+0x2c>
   1167c:	2000      	movs	r0, #0
   1167e:	2e00      	cmp	r6, #0
   11680:	d0e9      	beq.n	11656 <__lesf2+0x36>
   11682:	e7ed      	b.n	11660 <__lesf2+0x40>
   11684:	2d00      	cmp	r5, #0
   11686:	d1e9      	bne.n	1165c <__lesf2+0x3c>
   11688:	e7ea      	b.n	11660 <__lesf2+0x40>
   1168a:	42a2      	cmp	r2, r4
   1168c:	dc06      	bgt.n	1169c <__lesf2+0x7c>
   1168e:	dbdf      	blt.n	11650 <__lesf2+0x30>
   11690:	42ae      	cmp	r6, r5
   11692:	d803      	bhi.n	1169c <__lesf2+0x7c>
   11694:	2000      	movs	r0, #0
   11696:	42ae      	cmp	r6, r5
   11698:	d3da      	bcc.n	11650 <__lesf2+0x30>
   1169a:	e7dc      	b.n	11656 <__lesf2+0x36>
   1169c:	2001      	movs	r0, #1
   1169e:	4249      	negs	r1, r1
   116a0:	4308      	orrs	r0, r1
   116a2:	e7d8      	b.n	11656 <__lesf2+0x36>

000116a4 <__aeabi_fmul>:
   116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116a6:	4657      	mov	r7, sl
   116a8:	464e      	mov	r6, r9
   116aa:	4645      	mov	r5, r8
   116ac:	46de      	mov	lr, fp
   116ae:	b5e0      	push	{r5, r6, r7, lr}
   116b0:	0247      	lsls	r7, r0, #9
   116b2:	0046      	lsls	r6, r0, #1
   116b4:	4688      	mov	r8, r1
   116b6:	0a7f      	lsrs	r7, r7, #9
   116b8:	0e36      	lsrs	r6, r6, #24
   116ba:	0fc4      	lsrs	r4, r0, #31
   116bc:	2e00      	cmp	r6, #0
   116be:	d047      	beq.n	11750 <__aeabi_fmul+0xac>
   116c0:	2eff      	cmp	r6, #255	; 0xff
   116c2:	d024      	beq.n	1170e <__aeabi_fmul+0x6a>
   116c4:	00fb      	lsls	r3, r7, #3
   116c6:	2780      	movs	r7, #128	; 0x80
   116c8:	04ff      	lsls	r7, r7, #19
   116ca:	431f      	orrs	r7, r3
   116cc:	2300      	movs	r3, #0
   116ce:	4699      	mov	r9, r3
   116d0:	469a      	mov	sl, r3
   116d2:	3e7f      	subs	r6, #127	; 0x7f
   116d4:	4643      	mov	r3, r8
   116d6:	025d      	lsls	r5, r3, #9
   116d8:	0058      	lsls	r0, r3, #1
   116da:	0fdb      	lsrs	r3, r3, #31
   116dc:	0a6d      	lsrs	r5, r5, #9
   116de:	0e00      	lsrs	r0, r0, #24
   116e0:	4698      	mov	r8, r3
   116e2:	d043      	beq.n	1176c <__aeabi_fmul+0xc8>
   116e4:	28ff      	cmp	r0, #255	; 0xff
   116e6:	d03b      	beq.n	11760 <__aeabi_fmul+0xbc>
   116e8:	00eb      	lsls	r3, r5, #3
   116ea:	2580      	movs	r5, #128	; 0x80
   116ec:	2200      	movs	r2, #0
   116ee:	04ed      	lsls	r5, r5, #19
   116f0:	431d      	orrs	r5, r3
   116f2:	387f      	subs	r0, #127	; 0x7f
   116f4:	1836      	adds	r6, r6, r0
   116f6:	1c73      	adds	r3, r6, #1
   116f8:	4641      	mov	r1, r8
   116fa:	469b      	mov	fp, r3
   116fc:	464b      	mov	r3, r9
   116fe:	4061      	eors	r1, r4
   11700:	4313      	orrs	r3, r2
   11702:	2b0f      	cmp	r3, #15
   11704:	d864      	bhi.n	117d0 <__aeabi_fmul+0x12c>
   11706:	4875      	ldr	r0, [pc, #468]	; (118dc <__aeabi_fmul+0x238>)
   11708:	009b      	lsls	r3, r3, #2
   1170a:	58c3      	ldr	r3, [r0, r3]
   1170c:	469f      	mov	pc, r3
   1170e:	2f00      	cmp	r7, #0
   11710:	d142      	bne.n	11798 <__aeabi_fmul+0xf4>
   11712:	2308      	movs	r3, #8
   11714:	4699      	mov	r9, r3
   11716:	3b06      	subs	r3, #6
   11718:	26ff      	movs	r6, #255	; 0xff
   1171a:	469a      	mov	sl, r3
   1171c:	e7da      	b.n	116d4 <__aeabi_fmul+0x30>
   1171e:	4641      	mov	r1, r8
   11720:	2a02      	cmp	r2, #2
   11722:	d028      	beq.n	11776 <__aeabi_fmul+0xd2>
   11724:	2a03      	cmp	r2, #3
   11726:	d100      	bne.n	1172a <__aeabi_fmul+0x86>
   11728:	e0ce      	b.n	118c8 <__aeabi_fmul+0x224>
   1172a:	2a01      	cmp	r2, #1
   1172c:	d000      	beq.n	11730 <__aeabi_fmul+0x8c>
   1172e:	e0ac      	b.n	1188a <__aeabi_fmul+0x1e6>
   11730:	4011      	ands	r1, r2
   11732:	2000      	movs	r0, #0
   11734:	2200      	movs	r2, #0
   11736:	b2cc      	uxtb	r4, r1
   11738:	0240      	lsls	r0, r0, #9
   1173a:	05d2      	lsls	r2, r2, #23
   1173c:	0a40      	lsrs	r0, r0, #9
   1173e:	07e4      	lsls	r4, r4, #31
   11740:	4310      	orrs	r0, r2
   11742:	4320      	orrs	r0, r4
   11744:	bc3c      	pop	{r2, r3, r4, r5}
   11746:	4690      	mov	r8, r2
   11748:	4699      	mov	r9, r3
   1174a:	46a2      	mov	sl, r4
   1174c:	46ab      	mov	fp, r5
   1174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11750:	2f00      	cmp	r7, #0
   11752:	d115      	bne.n	11780 <__aeabi_fmul+0xdc>
   11754:	2304      	movs	r3, #4
   11756:	4699      	mov	r9, r3
   11758:	3b03      	subs	r3, #3
   1175a:	2600      	movs	r6, #0
   1175c:	469a      	mov	sl, r3
   1175e:	e7b9      	b.n	116d4 <__aeabi_fmul+0x30>
   11760:	20ff      	movs	r0, #255	; 0xff
   11762:	2202      	movs	r2, #2
   11764:	2d00      	cmp	r5, #0
   11766:	d0c5      	beq.n	116f4 <__aeabi_fmul+0x50>
   11768:	2203      	movs	r2, #3
   1176a:	e7c3      	b.n	116f4 <__aeabi_fmul+0x50>
   1176c:	2d00      	cmp	r5, #0
   1176e:	d119      	bne.n	117a4 <__aeabi_fmul+0x100>
   11770:	2000      	movs	r0, #0
   11772:	2201      	movs	r2, #1
   11774:	e7be      	b.n	116f4 <__aeabi_fmul+0x50>
   11776:	2401      	movs	r4, #1
   11778:	22ff      	movs	r2, #255	; 0xff
   1177a:	400c      	ands	r4, r1
   1177c:	2000      	movs	r0, #0
   1177e:	e7db      	b.n	11738 <__aeabi_fmul+0x94>
   11780:	0038      	movs	r0, r7
   11782:	f002 f865 	bl	13850 <__clzsi2>
   11786:	2676      	movs	r6, #118	; 0x76
   11788:	1f43      	subs	r3, r0, #5
   1178a:	409f      	lsls	r7, r3
   1178c:	2300      	movs	r3, #0
   1178e:	4276      	negs	r6, r6
   11790:	1a36      	subs	r6, r6, r0
   11792:	4699      	mov	r9, r3
   11794:	469a      	mov	sl, r3
   11796:	e79d      	b.n	116d4 <__aeabi_fmul+0x30>
   11798:	230c      	movs	r3, #12
   1179a:	4699      	mov	r9, r3
   1179c:	3b09      	subs	r3, #9
   1179e:	26ff      	movs	r6, #255	; 0xff
   117a0:	469a      	mov	sl, r3
   117a2:	e797      	b.n	116d4 <__aeabi_fmul+0x30>
   117a4:	0028      	movs	r0, r5
   117a6:	f002 f853 	bl	13850 <__clzsi2>
   117aa:	1f43      	subs	r3, r0, #5
   117ac:	409d      	lsls	r5, r3
   117ae:	2376      	movs	r3, #118	; 0x76
   117b0:	425b      	negs	r3, r3
   117b2:	1a18      	subs	r0, r3, r0
   117b4:	2200      	movs	r2, #0
   117b6:	e79d      	b.n	116f4 <__aeabi_fmul+0x50>
   117b8:	2080      	movs	r0, #128	; 0x80
   117ba:	2400      	movs	r4, #0
   117bc:	03c0      	lsls	r0, r0, #15
   117be:	22ff      	movs	r2, #255	; 0xff
   117c0:	e7ba      	b.n	11738 <__aeabi_fmul+0x94>
   117c2:	003d      	movs	r5, r7
   117c4:	4652      	mov	r2, sl
   117c6:	e7ab      	b.n	11720 <__aeabi_fmul+0x7c>
   117c8:	003d      	movs	r5, r7
   117ca:	0021      	movs	r1, r4
   117cc:	4652      	mov	r2, sl
   117ce:	e7a7      	b.n	11720 <__aeabi_fmul+0x7c>
   117d0:	0c3b      	lsrs	r3, r7, #16
   117d2:	469c      	mov	ip, r3
   117d4:	042a      	lsls	r2, r5, #16
   117d6:	0c12      	lsrs	r2, r2, #16
   117d8:	0c2b      	lsrs	r3, r5, #16
   117da:	0014      	movs	r4, r2
   117dc:	4660      	mov	r0, ip
   117de:	4665      	mov	r5, ip
   117e0:	043f      	lsls	r7, r7, #16
   117e2:	0c3f      	lsrs	r7, r7, #16
   117e4:	437c      	muls	r4, r7
   117e6:	4342      	muls	r2, r0
   117e8:	435d      	muls	r5, r3
   117ea:	437b      	muls	r3, r7
   117ec:	0c27      	lsrs	r7, r4, #16
   117ee:	189b      	adds	r3, r3, r2
   117f0:	18ff      	adds	r7, r7, r3
   117f2:	42ba      	cmp	r2, r7
   117f4:	d903      	bls.n	117fe <__aeabi_fmul+0x15a>
   117f6:	2380      	movs	r3, #128	; 0x80
   117f8:	025b      	lsls	r3, r3, #9
   117fa:	469c      	mov	ip, r3
   117fc:	4465      	add	r5, ip
   117fe:	0424      	lsls	r4, r4, #16
   11800:	043a      	lsls	r2, r7, #16
   11802:	0c24      	lsrs	r4, r4, #16
   11804:	1912      	adds	r2, r2, r4
   11806:	0193      	lsls	r3, r2, #6
   11808:	1e5c      	subs	r4, r3, #1
   1180a:	41a3      	sbcs	r3, r4
   1180c:	0c3f      	lsrs	r7, r7, #16
   1180e:	0e92      	lsrs	r2, r2, #26
   11810:	197d      	adds	r5, r7, r5
   11812:	431a      	orrs	r2, r3
   11814:	01ad      	lsls	r5, r5, #6
   11816:	4315      	orrs	r5, r2
   11818:	012b      	lsls	r3, r5, #4
   1181a:	d504      	bpl.n	11826 <__aeabi_fmul+0x182>
   1181c:	2301      	movs	r3, #1
   1181e:	465e      	mov	r6, fp
   11820:	086a      	lsrs	r2, r5, #1
   11822:	401d      	ands	r5, r3
   11824:	4315      	orrs	r5, r2
   11826:	0032      	movs	r2, r6
   11828:	327f      	adds	r2, #127	; 0x7f
   1182a:	2a00      	cmp	r2, #0
   1182c:	dd25      	ble.n	1187a <__aeabi_fmul+0x1d6>
   1182e:	076b      	lsls	r3, r5, #29
   11830:	d004      	beq.n	1183c <__aeabi_fmul+0x198>
   11832:	230f      	movs	r3, #15
   11834:	402b      	ands	r3, r5
   11836:	2b04      	cmp	r3, #4
   11838:	d000      	beq.n	1183c <__aeabi_fmul+0x198>
   1183a:	3504      	adds	r5, #4
   1183c:	012b      	lsls	r3, r5, #4
   1183e:	d503      	bpl.n	11848 <__aeabi_fmul+0x1a4>
   11840:	0032      	movs	r2, r6
   11842:	4b27      	ldr	r3, [pc, #156]	; (118e0 <__aeabi_fmul+0x23c>)
   11844:	3280      	adds	r2, #128	; 0x80
   11846:	401d      	ands	r5, r3
   11848:	2afe      	cmp	r2, #254	; 0xfe
   1184a:	dc94      	bgt.n	11776 <__aeabi_fmul+0xd2>
   1184c:	2401      	movs	r4, #1
   1184e:	01a8      	lsls	r0, r5, #6
   11850:	0a40      	lsrs	r0, r0, #9
   11852:	b2d2      	uxtb	r2, r2
   11854:	400c      	ands	r4, r1
   11856:	e76f      	b.n	11738 <__aeabi_fmul+0x94>
   11858:	2080      	movs	r0, #128	; 0x80
   1185a:	03c0      	lsls	r0, r0, #15
   1185c:	4207      	tst	r7, r0
   1185e:	d007      	beq.n	11870 <__aeabi_fmul+0x1cc>
   11860:	4205      	tst	r5, r0
   11862:	d105      	bne.n	11870 <__aeabi_fmul+0x1cc>
   11864:	4328      	orrs	r0, r5
   11866:	0240      	lsls	r0, r0, #9
   11868:	0a40      	lsrs	r0, r0, #9
   1186a:	4644      	mov	r4, r8
   1186c:	22ff      	movs	r2, #255	; 0xff
   1186e:	e763      	b.n	11738 <__aeabi_fmul+0x94>
   11870:	4338      	orrs	r0, r7
   11872:	0240      	lsls	r0, r0, #9
   11874:	0a40      	lsrs	r0, r0, #9
   11876:	22ff      	movs	r2, #255	; 0xff
   11878:	e75e      	b.n	11738 <__aeabi_fmul+0x94>
   1187a:	2401      	movs	r4, #1
   1187c:	1aa3      	subs	r3, r4, r2
   1187e:	2b1b      	cmp	r3, #27
   11880:	dd05      	ble.n	1188e <__aeabi_fmul+0x1ea>
   11882:	400c      	ands	r4, r1
   11884:	2200      	movs	r2, #0
   11886:	2000      	movs	r0, #0
   11888:	e756      	b.n	11738 <__aeabi_fmul+0x94>
   1188a:	465e      	mov	r6, fp
   1188c:	e7cb      	b.n	11826 <__aeabi_fmul+0x182>
   1188e:	002a      	movs	r2, r5
   11890:	2020      	movs	r0, #32
   11892:	40da      	lsrs	r2, r3
   11894:	1ac3      	subs	r3, r0, r3
   11896:	409d      	lsls	r5, r3
   11898:	002b      	movs	r3, r5
   1189a:	1e5d      	subs	r5, r3, #1
   1189c:	41ab      	sbcs	r3, r5
   1189e:	4313      	orrs	r3, r2
   118a0:	075a      	lsls	r2, r3, #29
   118a2:	d004      	beq.n	118ae <__aeabi_fmul+0x20a>
   118a4:	220f      	movs	r2, #15
   118a6:	401a      	ands	r2, r3
   118a8:	2a04      	cmp	r2, #4
   118aa:	d000      	beq.n	118ae <__aeabi_fmul+0x20a>
   118ac:	3304      	adds	r3, #4
   118ae:	015a      	lsls	r2, r3, #5
   118b0:	d504      	bpl.n	118bc <__aeabi_fmul+0x218>
   118b2:	2401      	movs	r4, #1
   118b4:	2201      	movs	r2, #1
   118b6:	400c      	ands	r4, r1
   118b8:	2000      	movs	r0, #0
   118ba:	e73d      	b.n	11738 <__aeabi_fmul+0x94>
   118bc:	2401      	movs	r4, #1
   118be:	019b      	lsls	r3, r3, #6
   118c0:	0a58      	lsrs	r0, r3, #9
   118c2:	400c      	ands	r4, r1
   118c4:	2200      	movs	r2, #0
   118c6:	e737      	b.n	11738 <__aeabi_fmul+0x94>
   118c8:	2080      	movs	r0, #128	; 0x80
   118ca:	2401      	movs	r4, #1
   118cc:	03c0      	lsls	r0, r0, #15
   118ce:	4328      	orrs	r0, r5
   118d0:	0240      	lsls	r0, r0, #9
   118d2:	0a40      	lsrs	r0, r0, #9
   118d4:	400c      	ands	r4, r1
   118d6:	22ff      	movs	r2, #255	; 0xff
   118d8:	e72e      	b.n	11738 <__aeabi_fmul+0x94>
   118da:	46c0      	nop			; (mov r8, r8)
   118dc:	0001af04 	.word	0x0001af04
   118e0:	f7ffffff 	.word	0xf7ffffff

000118e4 <__aeabi_fsub>:
   118e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118e6:	464f      	mov	r7, r9
   118e8:	46d6      	mov	lr, sl
   118ea:	4646      	mov	r6, r8
   118ec:	0044      	lsls	r4, r0, #1
   118ee:	b5c0      	push	{r6, r7, lr}
   118f0:	0fc2      	lsrs	r2, r0, #31
   118f2:	0247      	lsls	r7, r0, #9
   118f4:	0248      	lsls	r0, r1, #9
   118f6:	0a40      	lsrs	r0, r0, #9
   118f8:	4684      	mov	ip, r0
   118fa:	4666      	mov	r6, ip
   118fc:	0a7b      	lsrs	r3, r7, #9
   118fe:	0048      	lsls	r0, r1, #1
   11900:	0fc9      	lsrs	r1, r1, #31
   11902:	469a      	mov	sl, r3
   11904:	0e24      	lsrs	r4, r4, #24
   11906:	0015      	movs	r5, r2
   11908:	00db      	lsls	r3, r3, #3
   1190a:	0e00      	lsrs	r0, r0, #24
   1190c:	4689      	mov	r9, r1
   1190e:	00f6      	lsls	r6, r6, #3
   11910:	28ff      	cmp	r0, #255	; 0xff
   11912:	d100      	bne.n	11916 <__aeabi_fsub+0x32>
   11914:	e08f      	b.n	11a36 <__aeabi_fsub+0x152>
   11916:	2101      	movs	r1, #1
   11918:	464f      	mov	r7, r9
   1191a:	404f      	eors	r7, r1
   1191c:	0039      	movs	r1, r7
   1191e:	4291      	cmp	r1, r2
   11920:	d066      	beq.n	119f0 <__aeabi_fsub+0x10c>
   11922:	1a22      	subs	r2, r4, r0
   11924:	2a00      	cmp	r2, #0
   11926:	dc00      	bgt.n	1192a <__aeabi_fsub+0x46>
   11928:	e09d      	b.n	11a66 <__aeabi_fsub+0x182>
   1192a:	2800      	cmp	r0, #0
   1192c:	d13d      	bne.n	119aa <__aeabi_fsub+0xc6>
   1192e:	2e00      	cmp	r6, #0
   11930:	d100      	bne.n	11934 <__aeabi_fsub+0x50>
   11932:	e08b      	b.n	11a4c <__aeabi_fsub+0x168>
   11934:	1e51      	subs	r1, r2, #1
   11936:	2900      	cmp	r1, #0
   11938:	d000      	beq.n	1193c <__aeabi_fsub+0x58>
   1193a:	e0b5      	b.n	11aa8 <__aeabi_fsub+0x1c4>
   1193c:	2401      	movs	r4, #1
   1193e:	1b9b      	subs	r3, r3, r6
   11940:	015a      	lsls	r2, r3, #5
   11942:	d544      	bpl.n	119ce <__aeabi_fsub+0xea>
   11944:	019b      	lsls	r3, r3, #6
   11946:	099f      	lsrs	r7, r3, #6
   11948:	0038      	movs	r0, r7
   1194a:	f001 ff81 	bl	13850 <__clzsi2>
   1194e:	3805      	subs	r0, #5
   11950:	4087      	lsls	r7, r0
   11952:	4284      	cmp	r4, r0
   11954:	dd00      	ble.n	11958 <__aeabi_fsub+0x74>
   11956:	e096      	b.n	11a86 <__aeabi_fsub+0x1a2>
   11958:	1b04      	subs	r4, r0, r4
   1195a:	003a      	movs	r2, r7
   1195c:	2020      	movs	r0, #32
   1195e:	3401      	adds	r4, #1
   11960:	40e2      	lsrs	r2, r4
   11962:	1b04      	subs	r4, r0, r4
   11964:	40a7      	lsls	r7, r4
   11966:	003b      	movs	r3, r7
   11968:	1e5f      	subs	r7, r3, #1
   1196a:	41bb      	sbcs	r3, r7
   1196c:	2400      	movs	r4, #0
   1196e:	4313      	orrs	r3, r2
   11970:	075a      	lsls	r2, r3, #29
   11972:	d004      	beq.n	1197e <__aeabi_fsub+0x9a>
   11974:	220f      	movs	r2, #15
   11976:	401a      	ands	r2, r3
   11978:	2a04      	cmp	r2, #4
   1197a:	d000      	beq.n	1197e <__aeabi_fsub+0x9a>
   1197c:	3304      	adds	r3, #4
   1197e:	015a      	lsls	r2, r3, #5
   11980:	d527      	bpl.n	119d2 <__aeabi_fsub+0xee>
   11982:	3401      	adds	r4, #1
   11984:	2cff      	cmp	r4, #255	; 0xff
   11986:	d100      	bne.n	1198a <__aeabi_fsub+0xa6>
   11988:	e079      	b.n	11a7e <__aeabi_fsub+0x19a>
   1198a:	2201      	movs	r2, #1
   1198c:	019b      	lsls	r3, r3, #6
   1198e:	0a5b      	lsrs	r3, r3, #9
   11990:	b2e4      	uxtb	r4, r4
   11992:	402a      	ands	r2, r5
   11994:	025b      	lsls	r3, r3, #9
   11996:	05e4      	lsls	r4, r4, #23
   11998:	0a58      	lsrs	r0, r3, #9
   1199a:	07d2      	lsls	r2, r2, #31
   1199c:	4320      	orrs	r0, r4
   1199e:	4310      	orrs	r0, r2
   119a0:	bc1c      	pop	{r2, r3, r4}
   119a2:	4690      	mov	r8, r2
   119a4:	4699      	mov	r9, r3
   119a6:	46a2      	mov	sl, r4
   119a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119aa:	2cff      	cmp	r4, #255	; 0xff
   119ac:	d0e0      	beq.n	11970 <__aeabi_fsub+0x8c>
   119ae:	2180      	movs	r1, #128	; 0x80
   119b0:	04c9      	lsls	r1, r1, #19
   119b2:	430e      	orrs	r6, r1
   119b4:	2a1b      	cmp	r2, #27
   119b6:	dc7b      	bgt.n	11ab0 <__aeabi_fsub+0x1cc>
   119b8:	0031      	movs	r1, r6
   119ba:	2020      	movs	r0, #32
   119bc:	40d1      	lsrs	r1, r2
   119be:	1a82      	subs	r2, r0, r2
   119c0:	4096      	lsls	r6, r2
   119c2:	1e72      	subs	r2, r6, #1
   119c4:	4196      	sbcs	r6, r2
   119c6:	430e      	orrs	r6, r1
   119c8:	1b9b      	subs	r3, r3, r6
   119ca:	015a      	lsls	r2, r3, #5
   119cc:	d4ba      	bmi.n	11944 <__aeabi_fsub+0x60>
   119ce:	075a      	lsls	r2, r3, #29
   119d0:	d1d0      	bne.n	11974 <__aeabi_fsub+0x90>
   119d2:	2201      	movs	r2, #1
   119d4:	08df      	lsrs	r7, r3, #3
   119d6:	402a      	ands	r2, r5
   119d8:	2cff      	cmp	r4, #255	; 0xff
   119da:	d133      	bne.n	11a44 <__aeabi_fsub+0x160>
   119dc:	2f00      	cmp	r7, #0
   119de:	d100      	bne.n	119e2 <__aeabi_fsub+0xfe>
   119e0:	e0a8      	b.n	11b34 <__aeabi_fsub+0x250>
   119e2:	2380      	movs	r3, #128	; 0x80
   119e4:	03db      	lsls	r3, r3, #15
   119e6:	433b      	orrs	r3, r7
   119e8:	025b      	lsls	r3, r3, #9
   119ea:	0a5b      	lsrs	r3, r3, #9
   119ec:	24ff      	movs	r4, #255	; 0xff
   119ee:	e7d1      	b.n	11994 <__aeabi_fsub+0xb0>
   119f0:	1a21      	subs	r1, r4, r0
   119f2:	2900      	cmp	r1, #0
   119f4:	dd4c      	ble.n	11a90 <__aeabi_fsub+0x1ac>
   119f6:	2800      	cmp	r0, #0
   119f8:	d02a      	beq.n	11a50 <__aeabi_fsub+0x16c>
   119fa:	2cff      	cmp	r4, #255	; 0xff
   119fc:	d0b8      	beq.n	11970 <__aeabi_fsub+0x8c>
   119fe:	2080      	movs	r0, #128	; 0x80
   11a00:	04c0      	lsls	r0, r0, #19
   11a02:	4306      	orrs	r6, r0
   11a04:	291b      	cmp	r1, #27
   11a06:	dd00      	ble.n	11a0a <__aeabi_fsub+0x126>
   11a08:	e0af      	b.n	11b6a <__aeabi_fsub+0x286>
   11a0a:	0030      	movs	r0, r6
   11a0c:	2720      	movs	r7, #32
   11a0e:	40c8      	lsrs	r0, r1
   11a10:	1a79      	subs	r1, r7, r1
   11a12:	408e      	lsls	r6, r1
   11a14:	1e71      	subs	r1, r6, #1
   11a16:	418e      	sbcs	r6, r1
   11a18:	4306      	orrs	r6, r0
   11a1a:	199b      	adds	r3, r3, r6
   11a1c:	0159      	lsls	r1, r3, #5
   11a1e:	d5d6      	bpl.n	119ce <__aeabi_fsub+0xea>
   11a20:	3401      	adds	r4, #1
   11a22:	2cff      	cmp	r4, #255	; 0xff
   11a24:	d100      	bne.n	11a28 <__aeabi_fsub+0x144>
   11a26:	e085      	b.n	11b34 <__aeabi_fsub+0x250>
   11a28:	2201      	movs	r2, #1
   11a2a:	497a      	ldr	r1, [pc, #488]	; (11c14 <__aeabi_fsub+0x330>)
   11a2c:	401a      	ands	r2, r3
   11a2e:	085b      	lsrs	r3, r3, #1
   11a30:	400b      	ands	r3, r1
   11a32:	4313      	orrs	r3, r2
   11a34:	e79c      	b.n	11970 <__aeabi_fsub+0x8c>
   11a36:	2e00      	cmp	r6, #0
   11a38:	d000      	beq.n	11a3c <__aeabi_fsub+0x158>
   11a3a:	e770      	b.n	1191e <__aeabi_fsub+0x3a>
   11a3c:	e76b      	b.n	11916 <__aeabi_fsub+0x32>
   11a3e:	1e3b      	subs	r3, r7, #0
   11a40:	d1c5      	bne.n	119ce <__aeabi_fsub+0xea>
   11a42:	2200      	movs	r2, #0
   11a44:	027b      	lsls	r3, r7, #9
   11a46:	0a5b      	lsrs	r3, r3, #9
   11a48:	b2e4      	uxtb	r4, r4
   11a4a:	e7a3      	b.n	11994 <__aeabi_fsub+0xb0>
   11a4c:	0014      	movs	r4, r2
   11a4e:	e78f      	b.n	11970 <__aeabi_fsub+0x8c>
   11a50:	2e00      	cmp	r6, #0
   11a52:	d04d      	beq.n	11af0 <__aeabi_fsub+0x20c>
   11a54:	1e48      	subs	r0, r1, #1
   11a56:	2800      	cmp	r0, #0
   11a58:	d157      	bne.n	11b0a <__aeabi_fsub+0x226>
   11a5a:	199b      	adds	r3, r3, r6
   11a5c:	2401      	movs	r4, #1
   11a5e:	015a      	lsls	r2, r3, #5
   11a60:	d5b5      	bpl.n	119ce <__aeabi_fsub+0xea>
   11a62:	2402      	movs	r4, #2
   11a64:	e7e0      	b.n	11a28 <__aeabi_fsub+0x144>
   11a66:	2a00      	cmp	r2, #0
   11a68:	d125      	bne.n	11ab6 <__aeabi_fsub+0x1d2>
   11a6a:	1c62      	adds	r2, r4, #1
   11a6c:	b2d2      	uxtb	r2, r2
   11a6e:	2a01      	cmp	r2, #1
   11a70:	dd72      	ble.n	11b58 <__aeabi_fsub+0x274>
   11a72:	1b9f      	subs	r7, r3, r6
   11a74:	017a      	lsls	r2, r7, #5
   11a76:	d535      	bpl.n	11ae4 <__aeabi_fsub+0x200>
   11a78:	1af7      	subs	r7, r6, r3
   11a7a:	000d      	movs	r5, r1
   11a7c:	e764      	b.n	11948 <__aeabi_fsub+0x64>
   11a7e:	2201      	movs	r2, #1
   11a80:	2300      	movs	r3, #0
   11a82:	402a      	ands	r2, r5
   11a84:	e786      	b.n	11994 <__aeabi_fsub+0xb0>
   11a86:	003b      	movs	r3, r7
   11a88:	4a63      	ldr	r2, [pc, #396]	; (11c18 <__aeabi_fsub+0x334>)
   11a8a:	1a24      	subs	r4, r4, r0
   11a8c:	4013      	ands	r3, r2
   11a8e:	e76f      	b.n	11970 <__aeabi_fsub+0x8c>
   11a90:	2900      	cmp	r1, #0
   11a92:	d16c      	bne.n	11b6e <__aeabi_fsub+0x28a>
   11a94:	1c61      	adds	r1, r4, #1
   11a96:	b2c8      	uxtb	r0, r1
   11a98:	2801      	cmp	r0, #1
   11a9a:	dd4e      	ble.n	11b3a <__aeabi_fsub+0x256>
   11a9c:	29ff      	cmp	r1, #255	; 0xff
   11a9e:	d049      	beq.n	11b34 <__aeabi_fsub+0x250>
   11aa0:	199b      	adds	r3, r3, r6
   11aa2:	085b      	lsrs	r3, r3, #1
   11aa4:	000c      	movs	r4, r1
   11aa6:	e763      	b.n	11970 <__aeabi_fsub+0x8c>
   11aa8:	2aff      	cmp	r2, #255	; 0xff
   11aaa:	d041      	beq.n	11b30 <__aeabi_fsub+0x24c>
   11aac:	000a      	movs	r2, r1
   11aae:	e781      	b.n	119b4 <__aeabi_fsub+0xd0>
   11ab0:	2601      	movs	r6, #1
   11ab2:	1b9b      	subs	r3, r3, r6
   11ab4:	e789      	b.n	119ca <__aeabi_fsub+0xe6>
   11ab6:	2c00      	cmp	r4, #0
   11ab8:	d01c      	beq.n	11af4 <__aeabi_fsub+0x210>
   11aba:	28ff      	cmp	r0, #255	; 0xff
   11abc:	d021      	beq.n	11b02 <__aeabi_fsub+0x21e>
   11abe:	2480      	movs	r4, #128	; 0x80
   11ac0:	04e4      	lsls	r4, r4, #19
   11ac2:	4252      	negs	r2, r2
   11ac4:	4323      	orrs	r3, r4
   11ac6:	2a1b      	cmp	r2, #27
   11ac8:	dd00      	ble.n	11acc <__aeabi_fsub+0x1e8>
   11aca:	e096      	b.n	11bfa <__aeabi_fsub+0x316>
   11acc:	001c      	movs	r4, r3
   11ace:	2520      	movs	r5, #32
   11ad0:	40d4      	lsrs	r4, r2
   11ad2:	1aaa      	subs	r2, r5, r2
   11ad4:	4093      	lsls	r3, r2
   11ad6:	1e5a      	subs	r2, r3, #1
   11ad8:	4193      	sbcs	r3, r2
   11ada:	4323      	orrs	r3, r4
   11adc:	1af3      	subs	r3, r6, r3
   11ade:	0004      	movs	r4, r0
   11ae0:	000d      	movs	r5, r1
   11ae2:	e72d      	b.n	11940 <__aeabi_fsub+0x5c>
   11ae4:	2f00      	cmp	r7, #0
   11ae6:	d000      	beq.n	11aea <__aeabi_fsub+0x206>
   11ae8:	e72e      	b.n	11948 <__aeabi_fsub+0x64>
   11aea:	2200      	movs	r2, #0
   11aec:	2400      	movs	r4, #0
   11aee:	e7a9      	b.n	11a44 <__aeabi_fsub+0x160>
   11af0:	000c      	movs	r4, r1
   11af2:	e73d      	b.n	11970 <__aeabi_fsub+0x8c>
   11af4:	2b00      	cmp	r3, #0
   11af6:	d058      	beq.n	11baa <__aeabi_fsub+0x2c6>
   11af8:	43d2      	mvns	r2, r2
   11afa:	2a00      	cmp	r2, #0
   11afc:	d0ee      	beq.n	11adc <__aeabi_fsub+0x1f8>
   11afe:	28ff      	cmp	r0, #255	; 0xff
   11b00:	d1e1      	bne.n	11ac6 <__aeabi_fsub+0x1e2>
   11b02:	0033      	movs	r3, r6
   11b04:	24ff      	movs	r4, #255	; 0xff
   11b06:	000d      	movs	r5, r1
   11b08:	e732      	b.n	11970 <__aeabi_fsub+0x8c>
   11b0a:	29ff      	cmp	r1, #255	; 0xff
   11b0c:	d010      	beq.n	11b30 <__aeabi_fsub+0x24c>
   11b0e:	0001      	movs	r1, r0
   11b10:	e778      	b.n	11a04 <__aeabi_fsub+0x120>
   11b12:	2b00      	cmp	r3, #0
   11b14:	d06e      	beq.n	11bf4 <__aeabi_fsub+0x310>
   11b16:	24ff      	movs	r4, #255	; 0xff
   11b18:	2e00      	cmp	r6, #0
   11b1a:	d100      	bne.n	11b1e <__aeabi_fsub+0x23a>
   11b1c:	e728      	b.n	11970 <__aeabi_fsub+0x8c>
   11b1e:	2280      	movs	r2, #128	; 0x80
   11b20:	4651      	mov	r1, sl
   11b22:	03d2      	lsls	r2, r2, #15
   11b24:	4211      	tst	r1, r2
   11b26:	d003      	beq.n	11b30 <__aeabi_fsub+0x24c>
   11b28:	4661      	mov	r1, ip
   11b2a:	4211      	tst	r1, r2
   11b2c:	d100      	bne.n	11b30 <__aeabi_fsub+0x24c>
   11b2e:	0033      	movs	r3, r6
   11b30:	24ff      	movs	r4, #255	; 0xff
   11b32:	e71d      	b.n	11970 <__aeabi_fsub+0x8c>
   11b34:	24ff      	movs	r4, #255	; 0xff
   11b36:	2300      	movs	r3, #0
   11b38:	e72c      	b.n	11994 <__aeabi_fsub+0xb0>
   11b3a:	2c00      	cmp	r4, #0
   11b3c:	d1e9      	bne.n	11b12 <__aeabi_fsub+0x22e>
   11b3e:	2b00      	cmp	r3, #0
   11b40:	d063      	beq.n	11c0a <__aeabi_fsub+0x326>
   11b42:	2e00      	cmp	r6, #0
   11b44:	d100      	bne.n	11b48 <__aeabi_fsub+0x264>
   11b46:	e713      	b.n	11970 <__aeabi_fsub+0x8c>
   11b48:	199b      	adds	r3, r3, r6
   11b4a:	015a      	lsls	r2, r3, #5
   11b4c:	d400      	bmi.n	11b50 <__aeabi_fsub+0x26c>
   11b4e:	e73e      	b.n	119ce <__aeabi_fsub+0xea>
   11b50:	4a31      	ldr	r2, [pc, #196]	; (11c18 <__aeabi_fsub+0x334>)
   11b52:	000c      	movs	r4, r1
   11b54:	4013      	ands	r3, r2
   11b56:	e70b      	b.n	11970 <__aeabi_fsub+0x8c>
   11b58:	2c00      	cmp	r4, #0
   11b5a:	d11e      	bne.n	11b9a <__aeabi_fsub+0x2b6>
   11b5c:	2b00      	cmp	r3, #0
   11b5e:	d12f      	bne.n	11bc0 <__aeabi_fsub+0x2dc>
   11b60:	2e00      	cmp	r6, #0
   11b62:	d04f      	beq.n	11c04 <__aeabi_fsub+0x320>
   11b64:	0033      	movs	r3, r6
   11b66:	000d      	movs	r5, r1
   11b68:	e702      	b.n	11970 <__aeabi_fsub+0x8c>
   11b6a:	2601      	movs	r6, #1
   11b6c:	e755      	b.n	11a1a <__aeabi_fsub+0x136>
   11b6e:	2c00      	cmp	r4, #0
   11b70:	d11f      	bne.n	11bb2 <__aeabi_fsub+0x2ce>
   11b72:	2b00      	cmp	r3, #0
   11b74:	d043      	beq.n	11bfe <__aeabi_fsub+0x31a>
   11b76:	43c9      	mvns	r1, r1
   11b78:	2900      	cmp	r1, #0
   11b7a:	d00b      	beq.n	11b94 <__aeabi_fsub+0x2b0>
   11b7c:	28ff      	cmp	r0, #255	; 0xff
   11b7e:	d039      	beq.n	11bf4 <__aeabi_fsub+0x310>
   11b80:	291b      	cmp	r1, #27
   11b82:	dc44      	bgt.n	11c0e <__aeabi_fsub+0x32a>
   11b84:	001c      	movs	r4, r3
   11b86:	2720      	movs	r7, #32
   11b88:	40cc      	lsrs	r4, r1
   11b8a:	1a79      	subs	r1, r7, r1
   11b8c:	408b      	lsls	r3, r1
   11b8e:	1e59      	subs	r1, r3, #1
   11b90:	418b      	sbcs	r3, r1
   11b92:	4323      	orrs	r3, r4
   11b94:	199b      	adds	r3, r3, r6
   11b96:	0004      	movs	r4, r0
   11b98:	e740      	b.n	11a1c <__aeabi_fsub+0x138>
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d11a      	bne.n	11bd4 <__aeabi_fsub+0x2f0>
   11b9e:	2e00      	cmp	r6, #0
   11ba0:	d124      	bne.n	11bec <__aeabi_fsub+0x308>
   11ba2:	2780      	movs	r7, #128	; 0x80
   11ba4:	2200      	movs	r2, #0
   11ba6:	03ff      	lsls	r7, r7, #15
   11ba8:	e71b      	b.n	119e2 <__aeabi_fsub+0xfe>
   11baa:	0033      	movs	r3, r6
   11bac:	0004      	movs	r4, r0
   11bae:	000d      	movs	r5, r1
   11bb0:	e6de      	b.n	11970 <__aeabi_fsub+0x8c>
   11bb2:	28ff      	cmp	r0, #255	; 0xff
   11bb4:	d01e      	beq.n	11bf4 <__aeabi_fsub+0x310>
   11bb6:	2480      	movs	r4, #128	; 0x80
   11bb8:	04e4      	lsls	r4, r4, #19
   11bba:	4249      	negs	r1, r1
   11bbc:	4323      	orrs	r3, r4
   11bbe:	e7df      	b.n	11b80 <__aeabi_fsub+0x29c>
   11bc0:	2e00      	cmp	r6, #0
   11bc2:	d100      	bne.n	11bc6 <__aeabi_fsub+0x2e2>
   11bc4:	e6d4      	b.n	11970 <__aeabi_fsub+0x8c>
   11bc6:	1b9f      	subs	r7, r3, r6
   11bc8:	017a      	lsls	r2, r7, #5
   11bca:	d400      	bmi.n	11bce <__aeabi_fsub+0x2ea>
   11bcc:	e737      	b.n	11a3e <__aeabi_fsub+0x15a>
   11bce:	1af3      	subs	r3, r6, r3
   11bd0:	000d      	movs	r5, r1
   11bd2:	e6cd      	b.n	11970 <__aeabi_fsub+0x8c>
   11bd4:	24ff      	movs	r4, #255	; 0xff
   11bd6:	2e00      	cmp	r6, #0
   11bd8:	d100      	bne.n	11bdc <__aeabi_fsub+0x2f8>
   11bda:	e6c9      	b.n	11970 <__aeabi_fsub+0x8c>
   11bdc:	2280      	movs	r2, #128	; 0x80
   11bde:	4650      	mov	r0, sl
   11be0:	03d2      	lsls	r2, r2, #15
   11be2:	4210      	tst	r0, r2
   11be4:	d0a4      	beq.n	11b30 <__aeabi_fsub+0x24c>
   11be6:	4660      	mov	r0, ip
   11be8:	4210      	tst	r0, r2
   11bea:	d1a1      	bne.n	11b30 <__aeabi_fsub+0x24c>
   11bec:	0033      	movs	r3, r6
   11bee:	000d      	movs	r5, r1
   11bf0:	24ff      	movs	r4, #255	; 0xff
   11bf2:	e6bd      	b.n	11970 <__aeabi_fsub+0x8c>
   11bf4:	0033      	movs	r3, r6
   11bf6:	24ff      	movs	r4, #255	; 0xff
   11bf8:	e6ba      	b.n	11970 <__aeabi_fsub+0x8c>
   11bfa:	2301      	movs	r3, #1
   11bfc:	e76e      	b.n	11adc <__aeabi_fsub+0x1f8>
   11bfe:	0033      	movs	r3, r6
   11c00:	0004      	movs	r4, r0
   11c02:	e6b5      	b.n	11970 <__aeabi_fsub+0x8c>
   11c04:	2700      	movs	r7, #0
   11c06:	2200      	movs	r2, #0
   11c08:	e71c      	b.n	11a44 <__aeabi_fsub+0x160>
   11c0a:	0033      	movs	r3, r6
   11c0c:	e6b0      	b.n	11970 <__aeabi_fsub+0x8c>
   11c0e:	2301      	movs	r3, #1
   11c10:	e7c0      	b.n	11b94 <__aeabi_fsub+0x2b0>
   11c12:	46c0      	nop			; (mov r8, r8)
   11c14:	7dffffff 	.word	0x7dffffff
   11c18:	fbffffff 	.word	0xfbffffff

00011c1c <__aeabi_f2iz>:
   11c1c:	0241      	lsls	r1, r0, #9
   11c1e:	0043      	lsls	r3, r0, #1
   11c20:	0fc2      	lsrs	r2, r0, #31
   11c22:	0a49      	lsrs	r1, r1, #9
   11c24:	0e1b      	lsrs	r3, r3, #24
   11c26:	2000      	movs	r0, #0
   11c28:	2b7e      	cmp	r3, #126	; 0x7e
   11c2a:	dd0d      	ble.n	11c48 <__aeabi_f2iz+0x2c>
   11c2c:	2b9d      	cmp	r3, #157	; 0x9d
   11c2e:	dc0c      	bgt.n	11c4a <__aeabi_f2iz+0x2e>
   11c30:	2080      	movs	r0, #128	; 0x80
   11c32:	0400      	lsls	r0, r0, #16
   11c34:	4301      	orrs	r1, r0
   11c36:	2b95      	cmp	r3, #149	; 0x95
   11c38:	dc0a      	bgt.n	11c50 <__aeabi_f2iz+0x34>
   11c3a:	2096      	movs	r0, #150	; 0x96
   11c3c:	1ac3      	subs	r3, r0, r3
   11c3e:	40d9      	lsrs	r1, r3
   11c40:	4248      	negs	r0, r1
   11c42:	2a00      	cmp	r2, #0
   11c44:	d100      	bne.n	11c48 <__aeabi_f2iz+0x2c>
   11c46:	0008      	movs	r0, r1
   11c48:	4770      	bx	lr
   11c4a:	4b03      	ldr	r3, [pc, #12]	; (11c58 <__aeabi_f2iz+0x3c>)
   11c4c:	18d0      	adds	r0, r2, r3
   11c4e:	e7fb      	b.n	11c48 <__aeabi_f2iz+0x2c>
   11c50:	3b96      	subs	r3, #150	; 0x96
   11c52:	4099      	lsls	r1, r3
   11c54:	e7f4      	b.n	11c40 <__aeabi_f2iz+0x24>
   11c56:	46c0      	nop			; (mov r8, r8)
   11c58:	7fffffff 	.word	0x7fffffff

00011c5c <__aeabi_i2f>:
   11c5c:	b570      	push	{r4, r5, r6, lr}
   11c5e:	2800      	cmp	r0, #0
   11c60:	d030      	beq.n	11cc4 <__aeabi_i2f+0x68>
   11c62:	17c3      	asrs	r3, r0, #31
   11c64:	18c4      	adds	r4, r0, r3
   11c66:	405c      	eors	r4, r3
   11c68:	0fc5      	lsrs	r5, r0, #31
   11c6a:	0020      	movs	r0, r4
   11c6c:	f001 fdf0 	bl	13850 <__clzsi2>
   11c70:	239e      	movs	r3, #158	; 0x9e
   11c72:	1a1b      	subs	r3, r3, r0
   11c74:	2b96      	cmp	r3, #150	; 0x96
   11c76:	dc0d      	bgt.n	11c94 <__aeabi_i2f+0x38>
   11c78:	2296      	movs	r2, #150	; 0x96
   11c7a:	1ad2      	subs	r2, r2, r3
   11c7c:	4094      	lsls	r4, r2
   11c7e:	002a      	movs	r2, r5
   11c80:	0264      	lsls	r4, r4, #9
   11c82:	0a64      	lsrs	r4, r4, #9
   11c84:	b2db      	uxtb	r3, r3
   11c86:	0264      	lsls	r4, r4, #9
   11c88:	05db      	lsls	r3, r3, #23
   11c8a:	0a60      	lsrs	r0, r4, #9
   11c8c:	07d2      	lsls	r2, r2, #31
   11c8e:	4318      	orrs	r0, r3
   11c90:	4310      	orrs	r0, r2
   11c92:	bd70      	pop	{r4, r5, r6, pc}
   11c94:	2b99      	cmp	r3, #153	; 0x99
   11c96:	dc19      	bgt.n	11ccc <__aeabi_i2f+0x70>
   11c98:	2299      	movs	r2, #153	; 0x99
   11c9a:	1ad2      	subs	r2, r2, r3
   11c9c:	2a00      	cmp	r2, #0
   11c9e:	dd29      	ble.n	11cf4 <__aeabi_i2f+0x98>
   11ca0:	4094      	lsls	r4, r2
   11ca2:	0022      	movs	r2, r4
   11ca4:	4c14      	ldr	r4, [pc, #80]	; (11cf8 <__aeabi_i2f+0x9c>)
   11ca6:	4014      	ands	r4, r2
   11ca8:	0751      	lsls	r1, r2, #29
   11caa:	d004      	beq.n	11cb6 <__aeabi_i2f+0x5a>
   11cac:	210f      	movs	r1, #15
   11cae:	400a      	ands	r2, r1
   11cb0:	2a04      	cmp	r2, #4
   11cb2:	d000      	beq.n	11cb6 <__aeabi_i2f+0x5a>
   11cb4:	3404      	adds	r4, #4
   11cb6:	0162      	lsls	r2, r4, #5
   11cb8:	d413      	bmi.n	11ce2 <__aeabi_i2f+0x86>
   11cba:	01a4      	lsls	r4, r4, #6
   11cbc:	0a64      	lsrs	r4, r4, #9
   11cbe:	b2db      	uxtb	r3, r3
   11cc0:	002a      	movs	r2, r5
   11cc2:	e7e0      	b.n	11c86 <__aeabi_i2f+0x2a>
   11cc4:	2200      	movs	r2, #0
   11cc6:	2300      	movs	r3, #0
   11cc8:	2400      	movs	r4, #0
   11cca:	e7dc      	b.n	11c86 <__aeabi_i2f+0x2a>
   11ccc:	2205      	movs	r2, #5
   11cce:	0021      	movs	r1, r4
   11cd0:	1a12      	subs	r2, r2, r0
   11cd2:	40d1      	lsrs	r1, r2
   11cd4:	22b9      	movs	r2, #185	; 0xb9
   11cd6:	1ad2      	subs	r2, r2, r3
   11cd8:	4094      	lsls	r4, r2
   11cda:	1e62      	subs	r2, r4, #1
   11cdc:	4194      	sbcs	r4, r2
   11cde:	430c      	orrs	r4, r1
   11ce0:	e7da      	b.n	11c98 <__aeabi_i2f+0x3c>
   11ce2:	4b05      	ldr	r3, [pc, #20]	; (11cf8 <__aeabi_i2f+0x9c>)
   11ce4:	002a      	movs	r2, r5
   11ce6:	401c      	ands	r4, r3
   11ce8:	239f      	movs	r3, #159	; 0x9f
   11cea:	01a4      	lsls	r4, r4, #6
   11cec:	1a1b      	subs	r3, r3, r0
   11cee:	0a64      	lsrs	r4, r4, #9
   11cf0:	b2db      	uxtb	r3, r3
   11cf2:	e7c8      	b.n	11c86 <__aeabi_i2f+0x2a>
   11cf4:	0022      	movs	r2, r4
   11cf6:	e7d5      	b.n	11ca4 <__aeabi_i2f+0x48>
   11cf8:	fbffffff 	.word	0xfbffffff

00011cfc <__aeabi_ui2f>:
   11cfc:	b510      	push	{r4, lr}
   11cfe:	1e04      	subs	r4, r0, #0
   11d00:	d027      	beq.n	11d52 <__aeabi_ui2f+0x56>
   11d02:	f001 fda5 	bl	13850 <__clzsi2>
   11d06:	239e      	movs	r3, #158	; 0x9e
   11d08:	1a1b      	subs	r3, r3, r0
   11d0a:	2b96      	cmp	r3, #150	; 0x96
   11d0c:	dc0a      	bgt.n	11d24 <__aeabi_ui2f+0x28>
   11d0e:	2296      	movs	r2, #150	; 0x96
   11d10:	1ad2      	subs	r2, r2, r3
   11d12:	4094      	lsls	r4, r2
   11d14:	0264      	lsls	r4, r4, #9
   11d16:	0a64      	lsrs	r4, r4, #9
   11d18:	b2db      	uxtb	r3, r3
   11d1a:	0264      	lsls	r4, r4, #9
   11d1c:	05db      	lsls	r3, r3, #23
   11d1e:	0a60      	lsrs	r0, r4, #9
   11d20:	4318      	orrs	r0, r3
   11d22:	bd10      	pop	{r4, pc}
   11d24:	2b99      	cmp	r3, #153	; 0x99
   11d26:	dc17      	bgt.n	11d58 <__aeabi_ui2f+0x5c>
   11d28:	2299      	movs	r2, #153	; 0x99
   11d2a:	1ad2      	subs	r2, r2, r3
   11d2c:	2a00      	cmp	r2, #0
   11d2e:	dd27      	ble.n	11d80 <__aeabi_ui2f+0x84>
   11d30:	4094      	lsls	r4, r2
   11d32:	0022      	movs	r2, r4
   11d34:	4c13      	ldr	r4, [pc, #76]	; (11d84 <__aeabi_ui2f+0x88>)
   11d36:	4014      	ands	r4, r2
   11d38:	0751      	lsls	r1, r2, #29
   11d3a:	d004      	beq.n	11d46 <__aeabi_ui2f+0x4a>
   11d3c:	210f      	movs	r1, #15
   11d3e:	400a      	ands	r2, r1
   11d40:	2a04      	cmp	r2, #4
   11d42:	d000      	beq.n	11d46 <__aeabi_ui2f+0x4a>
   11d44:	3404      	adds	r4, #4
   11d46:	0162      	lsls	r2, r4, #5
   11d48:	d412      	bmi.n	11d70 <__aeabi_ui2f+0x74>
   11d4a:	01a4      	lsls	r4, r4, #6
   11d4c:	0a64      	lsrs	r4, r4, #9
   11d4e:	b2db      	uxtb	r3, r3
   11d50:	e7e3      	b.n	11d1a <__aeabi_ui2f+0x1e>
   11d52:	2300      	movs	r3, #0
   11d54:	2400      	movs	r4, #0
   11d56:	e7e0      	b.n	11d1a <__aeabi_ui2f+0x1e>
   11d58:	22b9      	movs	r2, #185	; 0xb9
   11d5a:	0021      	movs	r1, r4
   11d5c:	1ad2      	subs	r2, r2, r3
   11d5e:	4091      	lsls	r1, r2
   11d60:	000a      	movs	r2, r1
   11d62:	1e51      	subs	r1, r2, #1
   11d64:	418a      	sbcs	r2, r1
   11d66:	2105      	movs	r1, #5
   11d68:	1a09      	subs	r1, r1, r0
   11d6a:	40cc      	lsrs	r4, r1
   11d6c:	4314      	orrs	r4, r2
   11d6e:	e7db      	b.n	11d28 <__aeabi_ui2f+0x2c>
   11d70:	4b04      	ldr	r3, [pc, #16]	; (11d84 <__aeabi_ui2f+0x88>)
   11d72:	401c      	ands	r4, r3
   11d74:	239f      	movs	r3, #159	; 0x9f
   11d76:	01a4      	lsls	r4, r4, #6
   11d78:	1a1b      	subs	r3, r3, r0
   11d7a:	0a64      	lsrs	r4, r4, #9
   11d7c:	b2db      	uxtb	r3, r3
   11d7e:	e7cc      	b.n	11d1a <__aeabi_ui2f+0x1e>
   11d80:	0022      	movs	r2, r4
   11d82:	e7d7      	b.n	11d34 <__aeabi_ui2f+0x38>
   11d84:	fbffffff 	.word	0xfbffffff

00011d88 <__aeabi_dadd>:
   11d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d8a:	4645      	mov	r5, r8
   11d8c:	46de      	mov	lr, fp
   11d8e:	4657      	mov	r7, sl
   11d90:	464e      	mov	r6, r9
   11d92:	030c      	lsls	r4, r1, #12
   11d94:	b5e0      	push	{r5, r6, r7, lr}
   11d96:	004e      	lsls	r6, r1, #1
   11d98:	0fc9      	lsrs	r1, r1, #31
   11d9a:	4688      	mov	r8, r1
   11d9c:	000d      	movs	r5, r1
   11d9e:	0a61      	lsrs	r1, r4, #9
   11da0:	0f44      	lsrs	r4, r0, #29
   11da2:	430c      	orrs	r4, r1
   11da4:	00c7      	lsls	r7, r0, #3
   11da6:	0319      	lsls	r1, r3, #12
   11da8:	0058      	lsls	r0, r3, #1
   11daa:	0fdb      	lsrs	r3, r3, #31
   11dac:	469b      	mov	fp, r3
   11dae:	0a4b      	lsrs	r3, r1, #9
   11db0:	0f51      	lsrs	r1, r2, #29
   11db2:	430b      	orrs	r3, r1
   11db4:	0d76      	lsrs	r6, r6, #21
   11db6:	0d40      	lsrs	r0, r0, #21
   11db8:	0019      	movs	r1, r3
   11dba:	00d2      	lsls	r2, r2, #3
   11dbc:	45d8      	cmp	r8, fp
   11dbe:	d100      	bne.n	11dc2 <__aeabi_dadd+0x3a>
   11dc0:	e0ae      	b.n	11f20 <__aeabi_dadd+0x198>
   11dc2:	1a35      	subs	r5, r6, r0
   11dc4:	2d00      	cmp	r5, #0
   11dc6:	dc00      	bgt.n	11dca <__aeabi_dadd+0x42>
   11dc8:	e0f6      	b.n	11fb8 <__aeabi_dadd+0x230>
   11dca:	2800      	cmp	r0, #0
   11dcc:	d10f      	bne.n	11dee <__aeabi_dadd+0x66>
   11dce:	4313      	orrs	r3, r2
   11dd0:	d100      	bne.n	11dd4 <__aeabi_dadd+0x4c>
   11dd2:	e0db      	b.n	11f8c <__aeabi_dadd+0x204>
   11dd4:	1e6b      	subs	r3, r5, #1
   11dd6:	2b00      	cmp	r3, #0
   11dd8:	d000      	beq.n	11ddc <__aeabi_dadd+0x54>
   11dda:	e137      	b.n	1204c <__aeabi_dadd+0x2c4>
   11ddc:	1aba      	subs	r2, r7, r2
   11dde:	4297      	cmp	r7, r2
   11de0:	41bf      	sbcs	r7, r7
   11de2:	1a64      	subs	r4, r4, r1
   11de4:	427f      	negs	r7, r7
   11de6:	1be4      	subs	r4, r4, r7
   11de8:	2601      	movs	r6, #1
   11dea:	0017      	movs	r7, r2
   11dec:	e024      	b.n	11e38 <__aeabi_dadd+0xb0>
   11dee:	4bc6      	ldr	r3, [pc, #792]	; (12108 <__aeabi_dadd+0x380>)
   11df0:	429e      	cmp	r6, r3
   11df2:	d04d      	beq.n	11e90 <__aeabi_dadd+0x108>
   11df4:	2380      	movs	r3, #128	; 0x80
   11df6:	041b      	lsls	r3, r3, #16
   11df8:	4319      	orrs	r1, r3
   11dfa:	2d38      	cmp	r5, #56	; 0x38
   11dfc:	dd00      	ble.n	11e00 <__aeabi_dadd+0x78>
   11dfe:	e107      	b.n	12010 <__aeabi_dadd+0x288>
   11e00:	2d1f      	cmp	r5, #31
   11e02:	dd00      	ble.n	11e06 <__aeabi_dadd+0x7e>
   11e04:	e138      	b.n	12078 <__aeabi_dadd+0x2f0>
   11e06:	2020      	movs	r0, #32
   11e08:	1b43      	subs	r3, r0, r5
   11e0a:	469a      	mov	sl, r3
   11e0c:	000b      	movs	r3, r1
   11e0e:	4650      	mov	r0, sl
   11e10:	4083      	lsls	r3, r0
   11e12:	4699      	mov	r9, r3
   11e14:	0013      	movs	r3, r2
   11e16:	4648      	mov	r0, r9
   11e18:	40eb      	lsrs	r3, r5
   11e1a:	4318      	orrs	r0, r3
   11e1c:	0003      	movs	r3, r0
   11e1e:	4650      	mov	r0, sl
   11e20:	4082      	lsls	r2, r0
   11e22:	1e50      	subs	r0, r2, #1
   11e24:	4182      	sbcs	r2, r0
   11e26:	40e9      	lsrs	r1, r5
   11e28:	431a      	orrs	r2, r3
   11e2a:	1aba      	subs	r2, r7, r2
   11e2c:	1a61      	subs	r1, r4, r1
   11e2e:	4297      	cmp	r7, r2
   11e30:	41a4      	sbcs	r4, r4
   11e32:	0017      	movs	r7, r2
   11e34:	4264      	negs	r4, r4
   11e36:	1b0c      	subs	r4, r1, r4
   11e38:	0223      	lsls	r3, r4, #8
   11e3a:	d562      	bpl.n	11f02 <__aeabi_dadd+0x17a>
   11e3c:	0264      	lsls	r4, r4, #9
   11e3e:	0a65      	lsrs	r5, r4, #9
   11e40:	2d00      	cmp	r5, #0
   11e42:	d100      	bne.n	11e46 <__aeabi_dadd+0xbe>
   11e44:	e0df      	b.n	12006 <__aeabi_dadd+0x27e>
   11e46:	0028      	movs	r0, r5
   11e48:	f001 fd02 	bl	13850 <__clzsi2>
   11e4c:	0003      	movs	r3, r0
   11e4e:	3b08      	subs	r3, #8
   11e50:	2b1f      	cmp	r3, #31
   11e52:	dd00      	ble.n	11e56 <__aeabi_dadd+0xce>
   11e54:	e0d2      	b.n	11ffc <__aeabi_dadd+0x274>
   11e56:	2220      	movs	r2, #32
   11e58:	003c      	movs	r4, r7
   11e5a:	1ad2      	subs	r2, r2, r3
   11e5c:	409d      	lsls	r5, r3
   11e5e:	40d4      	lsrs	r4, r2
   11e60:	409f      	lsls	r7, r3
   11e62:	4325      	orrs	r5, r4
   11e64:	429e      	cmp	r6, r3
   11e66:	dd00      	ble.n	11e6a <__aeabi_dadd+0xe2>
   11e68:	e0c4      	b.n	11ff4 <__aeabi_dadd+0x26c>
   11e6a:	1b9e      	subs	r6, r3, r6
   11e6c:	1c73      	adds	r3, r6, #1
   11e6e:	2b1f      	cmp	r3, #31
   11e70:	dd00      	ble.n	11e74 <__aeabi_dadd+0xec>
   11e72:	e0f1      	b.n	12058 <__aeabi_dadd+0x2d0>
   11e74:	2220      	movs	r2, #32
   11e76:	0038      	movs	r0, r7
   11e78:	0029      	movs	r1, r5
   11e7a:	1ad2      	subs	r2, r2, r3
   11e7c:	40d8      	lsrs	r0, r3
   11e7e:	4091      	lsls	r1, r2
   11e80:	4097      	lsls	r7, r2
   11e82:	002c      	movs	r4, r5
   11e84:	4301      	orrs	r1, r0
   11e86:	1e78      	subs	r0, r7, #1
   11e88:	4187      	sbcs	r7, r0
   11e8a:	40dc      	lsrs	r4, r3
   11e8c:	2600      	movs	r6, #0
   11e8e:	430f      	orrs	r7, r1
   11e90:	077b      	lsls	r3, r7, #29
   11e92:	d009      	beq.n	11ea8 <__aeabi_dadd+0x120>
   11e94:	230f      	movs	r3, #15
   11e96:	403b      	ands	r3, r7
   11e98:	2b04      	cmp	r3, #4
   11e9a:	d005      	beq.n	11ea8 <__aeabi_dadd+0x120>
   11e9c:	1d3b      	adds	r3, r7, #4
   11e9e:	42bb      	cmp	r3, r7
   11ea0:	41bf      	sbcs	r7, r7
   11ea2:	427f      	negs	r7, r7
   11ea4:	19e4      	adds	r4, r4, r7
   11ea6:	001f      	movs	r7, r3
   11ea8:	0223      	lsls	r3, r4, #8
   11eaa:	d52c      	bpl.n	11f06 <__aeabi_dadd+0x17e>
   11eac:	4b96      	ldr	r3, [pc, #600]	; (12108 <__aeabi_dadd+0x380>)
   11eae:	3601      	adds	r6, #1
   11eb0:	429e      	cmp	r6, r3
   11eb2:	d100      	bne.n	11eb6 <__aeabi_dadd+0x12e>
   11eb4:	e09a      	b.n	11fec <__aeabi_dadd+0x264>
   11eb6:	4645      	mov	r5, r8
   11eb8:	4b94      	ldr	r3, [pc, #592]	; (1210c <__aeabi_dadd+0x384>)
   11eba:	08ff      	lsrs	r7, r7, #3
   11ebc:	401c      	ands	r4, r3
   11ebe:	0760      	lsls	r0, r4, #29
   11ec0:	0576      	lsls	r6, r6, #21
   11ec2:	0264      	lsls	r4, r4, #9
   11ec4:	4307      	orrs	r7, r0
   11ec6:	0b24      	lsrs	r4, r4, #12
   11ec8:	0d76      	lsrs	r6, r6, #21
   11eca:	2100      	movs	r1, #0
   11ecc:	0324      	lsls	r4, r4, #12
   11ece:	0b23      	lsrs	r3, r4, #12
   11ed0:	0d0c      	lsrs	r4, r1, #20
   11ed2:	4a8f      	ldr	r2, [pc, #572]	; (12110 <__aeabi_dadd+0x388>)
   11ed4:	0524      	lsls	r4, r4, #20
   11ed6:	431c      	orrs	r4, r3
   11ed8:	4014      	ands	r4, r2
   11eda:	0533      	lsls	r3, r6, #20
   11edc:	4323      	orrs	r3, r4
   11ede:	005b      	lsls	r3, r3, #1
   11ee0:	07ed      	lsls	r5, r5, #31
   11ee2:	085b      	lsrs	r3, r3, #1
   11ee4:	432b      	orrs	r3, r5
   11ee6:	0038      	movs	r0, r7
   11ee8:	0019      	movs	r1, r3
   11eea:	bc3c      	pop	{r2, r3, r4, r5}
   11eec:	4690      	mov	r8, r2
   11eee:	4699      	mov	r9, r3
   11ef0:	46a2      	mov	sl, r4
   11ef2:	46ab      	mov	fp, r5
   11ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ef6:	4664      	mov	r4, ip
   11ef8:	4304      	orrs	r4, r0
   11efa:	d100      	bne.n	11efe <__aeabi_dadd+0x176>
   11efc:	e211      	b.n	12322 <__aeabi_dadd+0x59a>
   11efe:	0004      	movs	r4, r0
   11f00:	4667      	mov	r7, ip
   11f02:	077b      	lsls	r3, r7, #29
   11f04:	d1c6      	bne.n	11e94 <__aeabi_dadd+0x10c>
   11f06:	4645      	mov	r5, r8
   11f08:	0760      	lsls	r0, r4, #29
   11f0a:	08ff      	lsrs	r7, r7, #3
   11f0c:	4307      	orrs	r7, r0
   11f0e:	08e4      	lsrs	r4, r4, #3
   11f10:	4b7d      	ldr	r3, [pc, #500]	; (12108 <__aeabi_dadd+0x380>)
   11f12:	429e      	cmp	r6, r3
   11f14:	d030      	beq.n	11f78 <__aeabi_dadd+0x1f0>
   11f16:	0324      	lsls	r4, r4, #12
   11f18:	0576      	lsls	r6, r6, #21
   11f1a:	0b24      	lsrs	r4, r4, #12
   11f1c:	0d76      	lsrs	r6, r6, #21
   11f1e:	e7d4      	b.n	11eca <__aeabi_dadd+0x142>
   11f20:	1a33      	subs	r3, r6, r0
   11f22:	469a      	mov	sl, r3
   11f24:	2b00      	cmp	r3, #0
   11f26:	dd78      	ble.n	1201a <__aeabi_dadd+0x292>
   11f28:	2800      	cmp	r0, #0
   11f2a:	d031      	beq.n	11f90 <__aeabi_dadd+0x208>
   11f2c:	4876      	ldr	r0, [pc, #472]	; (12108 <__aeabi_dadd+0x380>)
   11f2e:	4286      	cmp	r6, r0
   11f30:	d0ae      	beq.n	11e90 <__aeabi_dadd+0x108>
   11f32:	2080      	movs	r0, #128	; 0x80
   11f34:	0400      	lsls	r0, r0, #16
   11f36:	4301      	orrs	r1, r0
   11f38:	4653      	mov	r3, sl
   11f3a:	2b38      	cmp	r3, #56	; 0x38
   11f3c:	dc00      	bgt.n	11f40 <__aeabi_dadd+0x1b8>
   11f3e:	e0e9      	b.n	12114 <__aeabi_dadd+0x38c>
   11f40:	430a      	orrs	r2, r1
   11f42:	1e51      	subs	r1, r2, #1
   11f44:	418a      	sbcs	r2, r1
   11f46:	2100      	movs	r1, #0
   11f48:	19d2      	adds	r2, r2, r7
   11f4a:	42ba      	cmp	r2, r7
   11f4c:	41bf      	sbcs	r7, r7
   11f4e:	1909      	adds	r1, r1, r4
   11f50:	427c      	negs	r4, r7
   11f52:	0017      	movs	r7, r2
   11f54:	190c      	adds	r4, r1, r4
   11f56:	0223      	lsls	r3, r4, #8
   11f58:	d5d3      	bpl.n	11f02 <__aeabi_dadd+0x17a>
   11f5a:	4b6b      	ldr	r3, [pc, #428]	; (12108 <__aeabi_dadd+0x380>)
   11f5c:	3601      	adds	r6, #1
   11f5e:	429e      	cmp	r6, r3
   11f60:	d100      	bne.n	11f64 <__aeabi_dadd+0x1dc>
   11f62:	e13a      	b.n	121da <__aeabi_dadd+0x452>
   11f64:	2001      	movs	r0, #1
   11f66:	4b69      	ldr	r3, [pc, #420]	; (1210c <__aeabi_dadd+0x384>)
   11f68:	401c      	ands	r4, r3
   11f6a:	087b      	lsrs	r3, r7, #1
   11f6c:	4007      	ands	r7, r0
   11f6e:	431f      	orrs	r7, r3
   11f70:	07e0      	lsls	r0, r4, #31
   11f72:	4307      	orrs	r7, r0
   11f74:	0864      	lsrs	r4, r4, #1
   11f76:	e78b      	b.n	11e90 <__aeabi_dadd+0x108>
   11f78:	0023      	movs	r3, r4
   11f7a:	433b      	orrs	r3, r7
   11f7c:	d100      	bne.n	11f80 <__aeabi_dadd+0x1f8>
   11f7e:	e1cb      	b.n	12318 <__aeabi_dadd+0x590>
   11f80:	2280      	movs	r2, #128	; 0x80
   11f82:	0312      	lsls	r2, r2, #12
   11f84:	4314      	orrs	r4, r2
   11f86:	0324      	lsls	r4, r4, #12
   11f88:	0b24      	lsrs	r4, r4, #12
   11f8a:	e79e      	b.n	11eca <__aeabi_dadd+0x142>
   11f8c:	002e      	movs	r6, r5
   11f8e:	e77f      	b.n	11e90 <__aeabi_dadd+0x108>
   11f90:	0008      	movs	r0, r1
   11f92:	4310      	orrs	r0, r2
   11f94:	d100      	bne.n	11f98 <__aeabi_dadd+0x210>
   11f96:	e0b4      	b.n	12102 <__aeabi_dadd+0x37a>
   11f98:	1e58      	subs	r0, r3, #1
   11f9a:	2800      	cmp	r0, #0
   11f9c:	d000      	beq.n	11fa0 <__aeabi_dadd+0x218>
   11f9e:	e0de      	b.n	1215e <__aeabi_dadd+0x3d6>
   11fa0:	18ba      	adds	r2, r7, r2
   11fa2:	42ba      	cmp	r2, r7
   11fa4:	419b      	sbcs	r3, r3
   11fa6:	1864      	adds	r4, r4, r1
   11fa8:	425b      	negs	r3, r3
   11faa:	18e4      	adds	r4, r4, r3
   11fac:	0017      	movs	r7, r2
   11fae:	2601      	movs	r6, #1
   11fb0:	0223      	lsls	r3, r4, #8
   11fb2:	d5a6      	bpl.n	11f02 <__aeabi_dadd+0x17a>
   11fb4:	2602      	movs	r6, #2
   11fb6:	e7d5      	b.n	11f64 <__aeabi_dadd+0x1dc>
   11fb8:	2d00      	cmp	r5, #0
   11fba:	d16e      	bne.n	1209a <__aeabi_dadd+0x312>
   11fbc:	1c70      	adds	r0, r6, #1
   11fbe:	0540      	lsls	r0, r0, #21
   11fc0:	0d40      	lsrs	r0, r0, #21
   11fc2:	2801      	cmp	r0, #1
   11fc4:	dc00      	bgt.n	11fc8 <__aeabi_dadd+0x240>
   11fc6:	e0f9      	b.n	121bc <__aeabi_dadd+0x434>
   11fc8:	1ab8      	subs	r0, r7, r2
   11fca:	4684      	mov	ip, r0
   11fcc:	4287      	cmp	r7, r0
   11fce:	4180      	sbcs	r0, r0
   11fd0:	1ae5      	subs	r5, r4, r3
   11fd2:	4240      	negs	r0, r0
   11fd4:	1a2d      	subs	r5, r5, r0
   11fd6:	0228      	lsls	r0, r5, #8
   11fd8:	d400      	bmi.n	11fdc <__aeabi_dadd+0x254>
   11fda:	e089      	b.n	120f0 <__aeabi_dadd+0x368>
   11fdc:	1bd7      	subs	r7, r2, r7
   11fde:	42ba      	cmp	r2, r7
   11fe0:	4192      	sbcs	r2, r2
   11fe2:	1b1c      	subs	r4, r3, r4
   11fe4:	4252      	negs	r2, r2
   11fe6:	1aa5      	subs	r5, r4, r2
   11fe8:	46d8      	mov	r8, fp
   11fea:	e729      	b.n	11e40 <__aeabi_dadd+0xb8>
   11fec:	4645      	mov	r5, r8
   11fee:	2400      	movs	r4, #0
   11ff0:	2700      	movs	r7, #0
   11ff2:	e76a      	b.n	11eca <__aeabi_dadd+0x142>
   11ff4:	4c45      	ldr	r4, [pc, #276]	; (1210c <__aeabi_dadd+0x384>)
   11ff6:	1af6      	subs	r6, r6, r3
   11ff8:	402c      	ands	r4, r5
   11ffa:	e749      	b.n	11e90 <__aeabi_dadd+0x108>
   11ffc:	003d      	movs	r5, r7
   11ffe:	3828      	subs	r0, #40	; 0x28
   12000:	4085      	lsls	r5, r0
   12002:	2700      	movs	r7, #0
   12004:	e72e      	b.n	11e64 <__aeabi_dadd+0xdc>
   12006:	0038      	movs	r0, r7
   12008:	f001 fc22 	bl	13850 <__clzsi2>
   1200c:	3020      	adds	r0, #32
   1200e:	e71d      	b.n	11e4c <__aeabi_dadd+0xc4>
   12010:	430a      	orrs	r2, r1
   12012:	1e51      	subs	r1, r2, #1
   12014:	418a      	sbcs	r2, r1
   12016:	2100      	movs	r1, #0
   12018:	e707      	b.n	11e2a <__aeabi_dadd+0xa2>
   1201a:	2b00      	cmp	r3, #0
   1201c:	d000      	beq.n	12020 <__aeabi_dadd+0x298>
   1201e:	e0f3      	b.n	12208 <__aeabi_dadd+0x480>
   12020:	1c70      	adds	r0, r6, #1
   12022:	0543      	lsls	r3, r0, #21
   12024:	0d5b      	lsrs	r3, r3, #21
   12026:	2b01      	cmp	r3, #1
   12028:	dc00      	bgt.n	1202c <__aeabi_dadd+0x2a4>
   1202a:	e0ad      	b.n	12188 <__aeabi_dadd+0x400>
   1202c:	4b36      	ldr	r3, [pc, #216]	; (12108 <__aeabi_dadd+0x380>)
   1202e:	4298      	cmp	r0, r3
   12030:	d100      	bne.n	12034 <__aeabi_dadd+0x2ac>
   12032:	e0d1      	b.n	121d8 <__aeabi_dadd+0x450>
   12034:	18ba      	adds	r2, r7, r2
   12036:	42ba      	cmp	r2, r7
   12038:	41bf      	sbcs	r7, r7
   1203a:	1864      	adds	r4, r4, r1
   1203c:	427f      	negs	r7, r7
   1203e:	19e4      	adds	r4, r4, r7
   12040:	07e7      	lsls	r7, r4, #31
   12042:	0852      	lsrs	r2, r2, #1
   12044:	4317      	orrs	r7, r2
   12046:	0864      	lsrs	r4, r4, #1
   12048:	0006      	movs	r6, r0
   1204a:	e721      	b.n	11e90 <__aeabi_dadd+0x108>
   1204c:	482e      	ldr	r0, [pc, #184]	; (12108 <__aeabi_dadd+0x380>)
   1204e:	4285      	cmp	r5, r0
   12050:	d100      	bne.n	12054 <__aeabi_dadd+0x2cc>
   12052:	e093      	b.n	1217c <__aeabi_dadd+0x3f4>
   12054:	001d      	movs	r5, r3
   12056:	e6d0      	b.n	11dfa <__aeabi_dadd+0x72>
   12058:	0029      	movs	r1, r5
   1205a:	3e1f      	subs	r6, #31
   1205c:	40f1      	lsrs	r1, r6
   1205e:	2b20      	cmp	r3, #32
   12060:	d100      	bne.n	12064 <__aeabi_dadd+0x2dc>
   12062:	e08d      	b.n	12180 <__aeabi_dadd+0x3f8>
   12064:	2240      	movs	r2, #64	; 0x40
   12066:	1ad3      	subs	r3, r2, r3
   12068:	409d      	lsls	r5, r3
   1206a:	432f      	orrs	r7, r5
   1206c:	1e7d      	subs	r5, r7, #1
   1206e:	41af      	sbcs	r7, r5
   12070:	2400      	movs	r4, #0
   12072:	430f      	orrs	r7, r1
   12074:	2600      	movs	r6, #0
   12076:	e744      	b.n	11f02 <__aeabi_dadd+0x17a>
   12078:	002b      	movs	r3, r5
   1207a:	0008      	movs	r0, r1
   1207c:	3b20      	subs	r3, #32
   1207e:	40d8      	lsrs	r0, r3
   12080:	0003      	movs	r3, r0
   12082:	2d20      	cmp	r5, #32
   12084:	d100      	bne.n	12088 <__aeabi_dadd+0x300>
   12086:	e07d      	b.n	12184 <__aeabi_dadd+0x3fc>
   12088:	2040      	movs	r0, #64	; 0x40
   1208a:	1b45      	subs	r5, r0, r5
   1208c:	40a9      	lsls	r1, r5
   1208e:	430a      	orrs	r2, r1
   12090:	1e51      	subs	r1, r2, #1
   12092:	418a      	sbcs	r2, r1
   12094:	2100      	movs	r1, #0
   12096:	431a      	orrs	r2, r3
   12098:	e6c7      	b.n	11e2a <__aeabi_dadd+0xa2>
   1209a:	2e00      	cmp	r6, #0
   1209c:	d050      	beq.n	12140 <__aeabi_dadd+0x3b8>
   1209e:	4e1a      	ldr	r6, [pc, #104]	; (12108 <__aeabi_dadd+0x380>)
   120a0:	42b0      	cmp	r0, r6
   120a2:	d057      	beq.n	12154 <__aeabi_dadd+0x3cc>
   120a4:	2680      	movs	r6, #128	; 0x80
   120a6:	426b      	negs	r3, r5
   120a8:	4699      	mov	r9, r3
   120aa:	0436      	lsls	r6, r6, #16
   120ac:	4334      	orrs	r4, r6
   120ae:	464b      	mov	r3, r9
   120b0:	2b38      	cmp	r3, #56	; 0x38
   120b2:	dd00      	ble.n	120b6 <__aeabi_dadd+0x32e>
   120b4:	e0d6      	b.n	12264 <__aeabi_dadd+0x4dc>
   120b6:	2b1f      	cmp	r3, #31
   120b8:	dd00      	ble.n	120bc <__aeabi_dadd+0x334>
   120ba:	e135      	b.n	12328 <__aeabi_dadd+0x5a0>
   120bc:	2620      	movs	r6, #32
   120be:	1af5      	subs	r5, r6, r3
   120c0:	0026      	movs	r6, r4
   120c2:	40ae      	lsls	r6, r5
   120c4:	46b2      	mov	sl, r6
   120c6:	003e      	movs	r6, r7
   120c8:	40de      	lsrs	r6, r3
   120ca:	46ac      	mov	ip, r5
   120cc:	0035      	movs	r5, r6
   120ce:	4656      	mov	r6, sl
   120d0:	432e      	orrs	r6, r5
   120d2:	4665      	mov	r5, ip
   120d4:	40af      	lsls	r7, r5
   120d6:	1e7d      	subs	r5, r7, #1
   120d8:	41af      	sbcs	r7, r5
   120da:	40dc      	lsrs	r4, r3
   120dc:	4337      	orrs	r7, r6
   120de:	1bd7      	subs	r7, r2, r7
   120e0:	42ba      	cmp	r2, r7
   120e2:	4192      	sbcs	r2, r2
   120e4:	1b0c      	subs	r4, r1, r4
   120e6:	4252      	negs	r2, r2
   120e8:	1aa4      	subs	r4, r4, r2
   120ea:	0006      	movs	r6, r0
   120ec:	46d8      	mov	r8, fp
   120ee:	e6a3      	b.n	11e38 <__aeabi_dadd+0xb0>
   120f0:	4664      	mov	r4, ip
   120f2:	4667      	mov	r7, ip
   120f4:	432c      	orrs	r4, r5
   120f6:	d000      	beq.n	120fa <__aeabi_dadd+0x372>
   120f8:	e6a2      	b.n	11e40 <__aeabi_dadd+0xb8>
   120fa:	2500      	movs	r5, #0
   120fc:	2600      	movs	r6, #0
   120fe:	2700      	movs	r7, #0
   12100:	e706      	b.n	11f10 <__aeabi_dadd+0x188>
   12102:	001e      	movs	r6, r3
   12104:	e6c4      	b.n	11e90 <__aeabi_dadd+0x108>
   12106:	46c0      	nop			; (mov r8, r8)
   12108:	000007ff 	.word	0x000007ff
   1210c:	ff7fffff 	.word	0xff7fffff
   12110:	800fffff 	.word	0x800fffff
   12114:	2b1f      	cmp	r3, #31
   12116:	dc63      	bgt.n	121e0 <__aeabi_dadd+0x458>
   12118:	2020      	movs	r0, #32
   1211a:	1ac3      	subs	r3, r0, r3
   1211c:	0008      	movs	r0, r1
   1211e:	4098      	lsls	r0, r3
   12120:	469c      	mov	ip, r3
   12122:	4683      	mov	fp, r0
   12124:	4653      	mov	r3, sl
   12126:	0010      	movs	r0, r2
   12128:	40d8      	lsrs	r0, r3
   1212a:	0003      	movs	r3, r0
   1212c:	4658      	mov	r0, fp
   1212e:	4318      	orrs	r0, r3
   12130:	4663      	mov	r3, ip
   12132:	409a      	lsls	r2, r3
   12134:	1e53      	subs	r3, r2, #1
   12136:	419a      	sbcs	r2, r3
   12138:	4653      	mov	r3, sl
   1213a:	4302      	orrs	r2, r0
   1213c:	40d9      	lsrs	r1, r3
   1213e:	e703      	b.n	11f48 <__aeabi_dadd+0x1c0>
   12140:	0026      	movs	r6, r4
   12142:	433e      	orrs	r6, r7
   12144:	d006      	beq.n	12154 <__aeabi_dadd+0x3cc>
   12146:	43eb      	mvns	r3, r5
   12148:	4699      	mov	r9, r3
   1214a:	2b00      	cmp	r3, #0
   1214c:	d0c7      	beq.n	120de <__aeabi_dadd+0x356>
   1214e:	4e94      	ldr	r6, [pc, #592]	; (123a0 <__aeabi_dadd+0x618>)
   12150:	42b0      	cmp	r0, r6
   12152:	d1ac      	bne.n	120ae <__aeabi_dadd+0x326>
   12154:	000c      	movs	r4, r1
   12156:	0017      	movs	r7, r2
   12158:	0006      	movs	r6, r0
   1215a:	46d8      	mov	r8, fp
   1215c:	e698      	b.n	11e90 <__aeabi_dadd+0x108>
   1215e:	4b90      	ldr	r3, [pc, #576]	; (123a0 <__aeabi_dadd+0x618>)
   12160:	459a      	cmp	sl, r3
   12162:	d00b      	beq.n	1217c <__aeabi_dadd+0x3f4>
   12164:	4682      	mov	sl, r0
   12166:	e6e7      	b.n	11f38 <__aeabi_dadd+0x1b0>
   12168:	2800      	cmp	r0, #0
   1216a:	d000      	beq.n	1216e <__aeabi_dadd+0x3e6>
   1216c:	e09e      	b.n	122ac <__aeabi_dadd+0x524>
   1216e:	0018      	movs	r0, r3
   12170:	4310      	orrs	r0, r2
   12172:	d100      	bne.n	12176 <__aeabi_dadd+0x3ee>
   12174:	e0e9      	b.n	1234a <__aeabi_dadd+0x5c2>
   12176:	001c      	movs	r4, r3
   12178:	0017      	movs	r7, r2
   1217a:	46d8      	mov	r8, fp
   1217c:	4e88      	ldr	r6, [pc, #544]	; (123a0 <__aeabi_dadd+0x618>)
   1217e:	e687      	b.n	11e90 <__aeabi_dadd+0x108>
   12180:	2500      	movs	r5, #0
   12182:	e772      	b.n	1206a <__aeabi_dadd+0x2e2>
   12184:	2100      	movs	r1, #0
   12186:	e782      	b.n	1208e <__aeabi_dadd+0x306>
   12188:	0023      	movs	r3, r4
   1218a:	433b      	orrs	r3, r7
   1218c:	2e00      	cmp	r6, #0
   1218e:	d000      	beq.n	12192 <__aeabi_dadd+0x40a>
   12190:	e0ab      	b.n	122ea <__aeabi_dadd+0x562>
   12192:	2b00      	cmp	r3, #0
   12194:	d100      	bne.n	12198 <__aeabi_dadd+0x410>
   12196:	e0e7      	b.n	12368 <__aeabi_dadd+0x5e0>
   12198:	000b      	movs	r3, r1
   1219a:	4313      	orrs	r3, r2
   1219c:	d100      	bne.n	121a0 <__aeabi_dadd+0x418>
   1219e:	e677      	b.n	11e90 <__aeabi_dadd+0x108>
   121a0:	18ba      	adds	r2, r7, r2
   121a2:	42ba      	cmp	r2, r7
   121a4:	41bf      	sbcs	r7, r7
   121a6:	1864      	adds	r4, r4, r1
   121a8:	427f      	negs	r7, r7
   121aa:	19e4      	adds	r4, r4, r7
   121ac:	0223      	lsls	r3, r4, #8
   121ae:	d400      	bmi.n	121b2 <__aeabi_dadd+0x42a>
   121b0:	e0f2      	b.n	12398 <__aeabi_dadd+0x610>
   121b2:	4b7c      	ldr	r3, [pc, #496]	; (123a4 <__aeabi_dadd+0x61c>)
   121b4:	0017      	movs	r7, r2
   121b6:	401c      	ands	r4, r3
   121b8:	0006      	movs	r6, r0
   121ba:	e669      	b.n	11e90 <__aeabi_dadd+0x108>
   121bc:	0020      	movs	r0, r4
   121be:	4338      	orrs	r0, r7
   121c0:	2e00      	cmp	r6, #0
   121c2:	d1d1      	bne.n	12168 <__aeabi_dadd+0x3e0>
   121c4:	2800      	cmp	r0, #0
   121c6:	d15b      	bne.n	12280 <__aeabi_dadd+0x4f8>
   121c8:	001c      	movs	r4, r3
   121ca:	4314      	orrs	r4, r2
   121cc:	d100      	bne.n	121d0 <__aeabi_dadd+0x448>
   121ce:	e0a8      	b.n	12322 <__aeabi_dadd+0x59a>
   121d0:	001c      	movs	r4, r3
   121d2:	0017      	movs	r7, r2
   121d4:	46d8      	mov	r8, fp
   121d6:	e65b      	b.n	11e90 <__aeabi_dadd+0x108>
   121d8:	0006      	movs	r6, r0
   121da:	2400      	movs	r4, #0
   121dc:	2700      	movs	r7, #0
   121de:	e697      	b.n	11f10 <__aeabi_dadd+0x188>
   121e0:	4650      	mov	r0, sl
   121e2:	000b      	movs	r3, r1
   121e4:	3820      	subs	r0, #32
   121e6:	40c3      	lsrs	r3, r0
   121e8:	4699      	mov	r9, r3
   121ea:	4653      	mov	r3, sl
   121ec:	2b20      	cmp	r3, #32
   121ee:	d100      	bne.n	121f2 <__aeabi_dadd+0x46a>
   121f0:	e095      	b.n	1231e <__aeabi_dadd+0x596>
   121f2:	2340      	movs	r3, #64	; 0x40
   121f4:	4650      	mov	r0, sl
   121f6:	1a1b      	subs	r3, r3, r0
   121f8:	4099      	lsls	r1, r3
   121fa:	430a      	orrs	r2, r1
   121fc:	1e51      	subs	r1, r2, #1
   121fe:	418a      	sbcs	r2, r1
   12200:	464b      	mov	r3, r9
   12202:	2100      	movs	r1, #0
   12204:	431a      	orrs	r2, r3
   12206:	e69f      	b.n	11f48 <__aeabi_dadd+0x1c0>
   12208:	2e00      	cmp	r6, #0
   1220a:	d130      	bne.n	1226e <__aeabi_dadd+0x4e6>
   1220c:	0026      	movs	r6, r4
   1220e:	433e      	orrs	r6, r7
   12210:	d067      	beq.n	122e2 <__aeabi_dadd+0x55a>
   12212:	43db      	mvns	r3, r3
   12214:	469a      	mov	sl, r3
   12216:	2b00      	cmp	r3, #0
   12218:	d01c      	beq.n	12254 <__aeabi_dadd+0x4cc>
   1221a:	4e61      	ldr	r6, [pc, #388]	; (123a0 <__aeabi_dadd+0x618>)
   1221c:	42b0      	cmp	r0, r6
   1221e:	d060      	beq.n	122e2 <__aeabi_dadd+0x55a>
   12220:	4653      	mov	r3, sl
   12222:	2b38      	cmp	r3, #56	; 0x38
   12224:	dd00      	ble.n	12228 <__aeabi_dadd+0x4a0>
   12226:	e096      	b.n	12356 <__aeabi_dadd+0x5ce>
   12228:	2b1f      	cmp	r3, #31
   1222a:	dd00      	ble.n	1222e <__aeabi_dadd+0x4a6>
   1222c:	e09f      	b.n	1236e <__aeabi_dadd+0x5e6>
   1222e:	2620      	movs	r6, #32
   12230:	1af3      	subs	r3, r6, r3
   12232:	0026      	movs	r6, r4
   12234:	409e      	lsls	r6, r3
   12236:	469c      	mov	ip, r3
   12238:	46b3      	mov	fp, r6
   1223a:	4653      	mov	r3, sl
   1223c:	003e      	movs	r6, r7
   1223e:	40de      	lsrs	r6, r3
   12240:	0033      	movs	r3, r6
   12242:	465e      	mov	r6, fp
   12244:	431e      	orrs	r6, r3
   12246:	4663      	mov	r3, ip
   12248:	409f      	lsls	r7, r3
   1224a:	1e7b      	subs	r3, r7, #1
   1224c:	419f      	sbcs	r7, r3
   1224e:	4653      	mov	r3, sl
   12250:	40dc      	lsrs	r4, r3
   12252:	4337      	orrs	r7, r6
   12254:	18bf      	adds	r7, r7, r2
   12256:	4297      	cmp	r7, r2
   12258:	4192      	sbcs	r2, r2
   1225a:	1864      	adds	r4, r4, r1
   1225c:	4252      	negs	r2, r2
   1225e:	18a4      	adds	r4, r4, r2
   12260:	0006      	movs	r6, r0
   12262:	e678      	b.n	11f56 <__aeabi_dadd+0x1ce>
   12264:	4327      	orrs	r7, r4
   12266:	1e7c      	subs	r4, r7, #1
   12268:	41a7      	sbcs	r7, r4
   1226a:	2400      	movs	r4, #0
   1226c:	e737      	b.n	120de <__aeabi_dadd+0x356>
   1226e:	4e4c      	ldr	r6, [pc, #304]	; (123a0 <__aeabi_dadd+0x618>)
   12270:	42b0      	cmp	r0, r6
   12272:	d036      	beq.n	122e2 <__aeabi_dadd+0x55a>
   12274:	2680      	movs	r6, #128	; 0x80
   12276:	425b      	negs	r3, r3
   12278:	0436      	lsls	r6, r6, #16
   1227a:	469a      	mov	sl, r3
   1227c:	4334      	orrs	r4, r6
   1227e:	e7cf      	b.n	12220 <__aeabi_dadd+0x498>
   12280:	0018      	movs	r0, r3
   12282:	4310      	orrs	r0, r2
   12284:	d100      	bne.n	12288 <__aeabi_dadd+0x500>
   12286:	e603      	b.n	11e90 <__aeabi_dadd+0x108>
   12288:	1ab8      	subs	r0, r7, r2
   1228a:	4684      	mov	ip, r0
   1228c:	4567      	cmp	r7, ip
   1228e:	41ad      	sbcs	r5, r5
   12290:	1ae0      	subs	r0, r4, r3
   12292:	426d      	negs	r5, r5
   12294:	1b40      	subs	r0, r0, r5
   12296:	0205      	lsls	r5, r0, #8
   12298:	d400      	bmi.n	1229c <__aeabi_dadd+0x514>
   1229a:	e62c      	b.n	11ef6 <__aeabi_dadd+0x16e>
   1229c:	1bd7      	subs	r7, r2, r7
   1229e:	42ba      	cmp	r2, r7
   122a0:	4192      	sbcs	r2, r2
   122a2:	1b1c      	subs	r4, r3, r4
   122a4:	4252      	negs	r2, r2
   122a6:	1aa4      	subs	r4, r4, r2
   122a8:	46d8      	mov	r8, fp
   122aa:	e5f1      	b.n	11e90 <__aeabi_dadd+0x108>
   122ac:	0018      	movs	r0, r3
   122ae:	4310      	orrs	r0, r2
   122b0:	d100      	bne.n	122b4 <__aeabi_dadd+0x52c>
   122b2:	e763      	b.n	1217c <__aeabi_dadd+0x3f4>
   122b4:	08f8      	lsrs	r0, r7, #3
   122b6:	0767      	lsls	r7, r4, #29
   122b8:	4307      	orrs	r7, r0
   122ba:	2080      	movs	r0, #128	; 0x80
   122bc:	08e4      	lsrs	r4, r4, #3
   122be:	0300      	lsls	r0, r0, #12
   122c0:	4204      	tst	r4, r0
   122c2:	d008      	beq.n	122d6 <__aeabi_dadd+0x54e>
   122c4:	08dd      	lsrs	r5, r3, #3
   122c6:	4205      	tst	r5, r0
   122c8:	d105      	bne.n	122d6 <__aeabi_dadd+0x54e>
   122ca:	08d2      	lsrs	r2, r2, #3
   122cc:	0759      	lsls	r1, r3, #29
   122ce:	4311      	orrs	r1, r2
   122d0:	000f      	movs	r7, r1
   122d2:	002c      	movs	r4, r5
   122d4:	46d8      	mov	r8, fp
   122d6:	0f7b      	lsrs	r3, r7, #29
   122d8:	00e4      	lsls	r4, r4, #3
   122da:	431c      	orrs	r4, r3
   122dc:	00ff      	lsls	r7, r7, #3
   122de:	4e30      	ldr	r6, [pc, #192]	; (123a0 <__aeabi_dadd+0x618>)
   122e0:	e5d6      	b.n	11e90 <__aeabi_dadd+0x108>
   122e2:	000c      	movs	r4, r1
   122e4:	0017      	movs	r7, r2
   122e6:	0006      	movs	r6, r0
   122e8:	e5d2      	b.n	11e90 <__aeabi_dadd+0x108>
   122ea:	2b00      	cmp	r3, #0
   122ec:	d038      	beq.n	12360 <__aeabi_dadd+0x5d8>
   122ee:	000b      	movs	r3, r1
   122f0:	4313      	orrs	r3, r2
   122f2:	d100      	bne.n	122f6 <__aeabi_dadd+0x56e>
   122f4:	e742      	b.n	1217c <__aeabi_dadd+0x3f4>
   122f6:	08f8      	lsrs	r0, r7, #3
   122f8:	0767      	lsls	r7, r4, #29
   122fa:	4307      	orrs	r7, r0
   122fc:	2080      	movs	r0, #128	; 0x80
   122fe:	08e4      	lsrs	r4, r4, #3
   12300:	0300      	lsls	r0, r0, #12
   12302:	4204      	tst	r4, r0
   12304:	d0e7      	beq.n	122d6 <__aeabi_dadd+0x54e>
   12306:	08cb      	lsrs	r3, r1, #3
   12308:	4203      	tst	r3, r0
   1230a:	d1e4      	bne.n	122d6 <__aeabi_dadd+0x54e>
   1230c:	08d2      	lsrs	r2, r2, #3
   1230e:	0749      	lsls	r1, r1, #29
   12310:	4311      	orrs	r1, r2
   12312:	000f      	movs	r7, r1
   12314:	001c      	movs	r4, r3
   12316:	e7de      	b.n	122d6 <__aeabi_dadd+0x54e>
   12318:	2700      	movs	r7, #0
   1231a:	2400      	movs	r4, #0
   1231c:	e5d5      	b.n	11eca <__aeabi_dadd+0x142>
   1231e:	2100      	movs	r1, #0
   12320:	e76b      	b.n	121fa <__aeabi_dadd+0x472>
   12322:	2500      	movs	r5, #0
   12324:	2700      	movs	r7, #0
   12326:	e5f3      	b.n	11f10 <__aeabi_dadd+0x188>
   12328:	464e      	mov	r6, r9
   1232a:	0025      	movs	r5, r4
   1232c:	3e20      	subs	r6, #32
   1232e:	40f5      	lsrs	r5, r6
   12330:	464b      	mov	r3, r9
   12332:	002e      	movs	r6, r5
   12334:	2b20      	cmp	r3, #32
   12336:	d02d      	beq.n	12394 <__aeabi_dadd+0x60c>
   12338:	2540      	movs	r5, #64	; 0x40
   1233a:	1aed      	subs	r5, r5, r3
   1233c:	40ac      	lsls	r4, r5
   1233e:	4327      	orrs	r7, r4
   12340:	1e7c      	subs	r4, r7, #1
   12342:	41a7      	sbcs	r7, r4
   12344:	2400      	movs	r4, #0
   12346:	4337      	orrs	r7, r6
   12348:	e6c9      	b.n	120de <__aeabi_dadd+0x356>
   1234a:	2480      	movs	r4, #128	; 0x80
   1234c:	2500      	movs	r5, #0
   1234e:	0324      	lsls	r4, r4, #12
   12350:	4e13      	ldr	r6, [pc, #76]	; (123a0 <__aeabi_dadd+0x618>)
   12352:	2700      	movs	r7, #0
   12354:	e5dc      	b.n	11f10 <__aeabi_dadd+0x188>
   12356:	4327      	orrs	r7, r4
   12358:	1e7c      	subs	r4, r7, #1
   1235a:	41a7      	sbcs	r7, r4
   1235c:	2400      	movs	r4, #0
   1235e:	e779      	b.n	12254 <__aeabi_dadd+0x4cc>
   12360:	000c      	movs	r4, r1
   12362:	0017      	movs	r7, r2
   12364:	4e0e      	ldr	r6, [pc, #56]	; (123a0 <__aeabi_dadd+0x618>)
   12366:	e593      	b.n	11e90 <__aeabi_dadd+0x108>
   12368:	000c      	movs	r4, r1
   1236a:	0017      	movs	r7, r2
   1236c:	e590      	b.n	11e90 <__aeabi_dadd+0x108>
   1236e:	4656      	mov	r6, sl
   12370:	0023      	movs	r3, r4
   12372:	3e20      	subs	r6, #32
   12374:	40f3      	lsrs	r3, r6
   12376:	4699      	mov	r9, r3
   12378:	4653      	mov	r3, sl
   1237a:	2b20      	cmp	r3, #32
   1237c:	d00e      	beq.n	1239c <__aeabi_dadd+0x614>
   1237e:	2340      	movs	r3, #64	; 0x40
   12380:	4656      	mov	r6, sl
   12382:	1b9b      	subs	r3, r3, r6
   12384:	409c      	lsls	r4, r3
   12386:	4327      	orrs	r7, r4
   12388:	1e7c      	subs	r4, r7, #1
   1238a:	41a7      	sbcs	r7, r4
   1238c:	464b      	mov	r3, r9
   1238e:	2400      	movs	r4, #0
   12390:	431f      	orrs	r7, r3
   12392:	e75f      	b.n	12254 <__aeabi_dadd+0x4cc>
   12394:	2400      	movs	r4, #0
   12396:	e7d2      	b.n	1233e <__aeabi_dadd+0x5b6>
   12398:	0017      	movs	r7, r2
   1239a:	e5b2      	b.n	11f02 <__aeabi_dadd+0x17a>
   1239c:	2400      	movs	r4, #0
   1239e:	e7f2      	b.n	12386 <__aeabi_dadd+0x5fe>
   123a0:	000007ff 	.word	0x000007ff
   123a4:	ff7fffff 	.word	0xff7fffff

000123a8 <__aeabi_ddiv>:
   123a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   123aa:	4657      	mov	r7, sl
   123ac:	4645      	mov	r5, r8
   123ae:	46de      	mov	lr, fp
   123b0:	464e      	mov	r6, r9
   123b2:	b5e0      	push	{r5, r6, r7, lr}
   123b4:	004c      	lsls	r4, r1, #1
   123b6:	030e      	lsls	r6, r1, #12
   123b8:	b087      	sub	sp, #28
   123ba:	4683      	mov	fp, r0
   123bc:	4692      	mov	sl, r2
   123be:	001d      	movs	r5, r3
   123c0:	4680      	mov	r8, r0
   123c2:	0b36      	lsrs	r6, r6, #12
   123c4:	0d64      	lsrs	r4, r4, #21
   123c6:	0fcf      	lsrs	r7, r1, #31
   123c8:	2c00      	cmp	r4, #0
   123ca:	d04f      	beq.n	1246c <__aeabi_ddiv+0xc4>
   123cc:	4b6f      	ldr	r3, [pc, #444]	; (1258c <__aeabi_ddiv+0x1e4>)
   123ce:	429c      	cmp	r4, r3
   123d0:	d035      	beq.n	1243e <__aeabi_ddiv+0x96>
   123d2:	2380      	movs	r3, #128	; 0x80
   123d4:	0f42      	lsrs	r2, r0, #29
   123d6:	041b      	lsls	r3, r3, #16
   123d8:	00f6      	lsls	r6, r6, #3
   123da:	4313      	orrs	r3, r2
   123dc:	4333      	orrs	r3, r6
   123de:	4699      	mov	r9, r3
   123e0:	00c3      	lsls	r3, r0, #3
   123e2:	4698      	mov	r8, r3
   123e4:	4b6a      	ldr	r3, [pc, #424]	; (12590 <__aeabi_ddiv+0x1e8>)
   123e6:	2600      	movs	r6, #0
   123e8:	469c      	mov	ip, r3
   123ea:	2300      	movs	r3, #0
   123ec:	4464      	add	r4, ip
   123ee:	9303      	str	r3, [sp, #12]
   123f0:	032b      	lsls	r3, r5, #12
   123f2:	0b1b      	lsrs	r3, r3, #12
   123f4:	469b      	mov	fp, r3
   123f6:	006b      	lsls	r3, r5, #1
   123f8:	0fed      	lsrs	r5, r5, #31
   123fa:	4650      	mov	r0, sl
   123fc:	0d5b      	lsrs	r3, r3, #21
   123fe:	9501      	str	r5, [sp, #4]
   12400:	d05e      	beq.n	124c0 <__aeabi_ddiv+0x118>
   12402:	4a62      	ldr	r2, [pc, #392]	; (1258c <__aeabi_ddiv+0x1e4>)
   12404:	4293      	cmp	r3, r2
   12406:	d053      	beq.n	124b0 <__aeabi_ddiv+0x108>
   12408:	465a      	mov	r2, fp
   1240a:	00d1      	lsls	r1, r2, #3
   1240c:	2280      	movs	r2, #128	; 0x80
   1240e:	0f40      	lsrs	r0, r0, #29
   12410:	0412      	lsls	r2, r2, #16
   12412:	4302      	orrs	r2, r0
   12414:	430a      	orrs	r2, r1
   12416:	4693      	mov	fp, r2
   12418:	4652      	mov	r2, sl
   1241a:	00d1      	lsls	r1, r2, #3
   1241c:	4a5c      	ldr	r2, [pc, #368]	; (12590 <__aeabi_ddiv+0x1e8>)
   1241e:	4694      	mov	ip, r2
   12420:	2200      	movs	r2, #0
   12422:	4463      	add	r3, ip
   12424:	0038      	movs	r0, r7
   12426:	4068      	eors	r0, r5
   12428:	4684      	mov	ip, r0
   1242a:	9002      	str	r0, [sp, #8]
   1242c:	1ae4      	subs	r4, r4, r3
   1242e:	4316      	orrs	r6, r2
   12430:	2e0f      	cmp	r6, #15
   12432:	d900      	bls.n	12436 <__aeabi_ddiv+0x8e>
   12434:	e0b4      	b.n	125a0 <__aeabi_ddiv+0x1f8>
   12436:	4b57      	ldr	r3, [pc, #348]	; (12594 <__aeabi_ddiv+0x1ec>)
   12438:	00b6      	lsls	r6, r6, #2
   1243a:	599b      	ldr	r3, [r3, r6]
   1243c:	469f      	mov	pc, r3
   1243e:	0003      	movs	r3, r0
   12440:	4333      	orrs	r3, r6
   12442:	4699      	mov	r9, r3
   12444:	d16c      	bne.n	12520 <__aeabi_ddiv+0x178>
   12446:	2300      	movs	r3, #0
   12448:	4698      	mov	r8, r3
   1244a:	3302      	adds	r3, #2
   1244c:	2608      	movs	r6, #8
   1244e:	9303      	str	r3, [sp, #12]
   12450:	e7ce      	b.n	123f0 <__aeabi_ddiv+0x48>
   12452:	46cb      	mov	fp, r9
   12454:	4641      	mov	r1, r8
   12456:	9a03      	ldr	r2, [sp, #12]
   12458:	9701      	str	r7, [sp, #4]
   1245a:	2a02      	cmp	r2, #2
   1245c:	d165      	bne.n	1252a <__aeabi_ddiv+0x182>
   1245e:	9b01      	ldr	r3, [sp, #4]
   12460:	4c4a      	ldr	r4, [pc, #296]	; (1258c <__aeabi_ddiv+0x1e4>)
   12462:	469c      	mov	ip, r3
   12464:	2300      	movs	r3, #0
   12466:	2200      	movs	r2, #0
   12468:	4698      	mov	r8, r3
   1246a:	e06b      	b.n	12544 <__aeabi_ddiv+0x19c>
   1246c:	0003      	movs	r3, r0
   1246e:	4333      	orrs	r3, r6
   12470:	4699      	mov	r9, r3
   12472:	d04e      	beq.n	12512 <__aeabi_ddiv+0x16a>
   12474:	2e00      	cmp	r6, #0
   12476:	d100      	bne.n	1247a <__aeabi_ddiv+0xd2>
   12478:	e1bc      	b.n	127f4 <__aeabi_ddiv+0x44c>
   1247a:	0030      	movs	r0, r6
   1247c:	f001 f9e8 	bl	13850 <__clzsi2>
   12480:	0003      	movs	r3, r0
   12482:	3b0b      	subs	r3, #11
   12484:	2b1c      	cmp	r3, #28
   12486:	dd00      	ble.n	1248a <__aeabi_ddiv+0xe2>
   12488:	e1ac      	b.n	127e4 <__aeabi_ddiv+0x43c>
   1248a:	221d      	movs	r2, #29
   1248c:	1ad3      	subs	r3, r2, r3
   1248e:	465a      	mov	r2, fp
   12490:	0001      	movs	r1, r0
   12492:	40da      	lsrs	r2, r3
   12494:	3908      	subs	r1, #8
   12496:	408e      	lsls	r6, r1
   12498:	0013      	movs	r3, r2
   1249a:	4333      	orrs	r3, r6
   1249c:	4699      	mov	r9, r3
   1249e:	465b      	mov	r3, fp
   124a0:	408b      	lsls	r3, r1
   124a2:	4698      	mov	r8, r3
   124a4:	2300      	movs	r3, #0
   124a6:	4c3c      	ldr	r4, [pc, #240]	; (12598 <__aeabi_ddiv+0x1f0>)
   124a8:	2600      	movs	r6, #0
   124aa:	1a24      	subs	r4, r4, r0
   124ac:	9303      	str	r3, [sp, #12]
   124ae:	e79f      	b.n	123f0 <__aeabi_ddiv+0x48>
   124b0:	4651      	mov	r1, sl
   124b2:	465a      	mov	r2, fp
   124b4:	4311      	orrs	r1, r2
   124b6:	d129      	bne.n	1250c <__aeabi_ddiv+0x164>
   124b8:	2200      	movs	r2, #0
   124ba:	4693      	mov	fp, r2
   124bc:	3202      	adds	r2, #2
   124be:	e7b1      	b.n	12424 <__aeabi_ddiv+0x7c>
   124c0:	4659      	mov	r1, fp
   124c2:	4301      	orrs	r1, r0
   124c4:	d01e      	beq.n	12504 <__aeabi_ddiv+0x15c>
   124c6:	465b      	mov	r3, fp
   124c8:	2b00      	cmp	r3, #0
   124ca:	d100      	bne.n	124ce <__aeabi_ddiv+0x126>
   124cc:	e19e      	b.n	1280c <__aeabi_ddiv+0x464>
   124ce:	4658      	mov	r0, fp
   124d0:	f001 f9be 	bl	13850 <__clzsi2>
   124d4:	0003      	movs	r3, r0
   124d6:	3b0b      	subs	r3, #11
   124d8:	2b1c      	cmp	r3, #28
   124da:	dd00      	ble.n	124de <__aeabi_ddiv+0x136>
   124dc:	e18f      	b.n	127fe <__aeabi_ddiv+0x456>
   124de:	0002      	movs	r2, r0
   124e0:	4659      	mov	r1, fp
   124e2:	3a08      	subs	r2, #8
   124e4:	4091      	lsls	r1, r2
   124e6:	468b      	mov	fp, r1
   124e8:	211d      	movs	r1, #29
   124ea:	1acb      	subs	r3, r1, r3
   124ec:	4651      	mov	r1, sl
   124ee:	40d9      	lsrs	r1, r3
   124f0:	000b      	movs	r3, r1
   124f2:	4659      	mov	r1, fp
   124f4:	430b      	orrs	r3, r1
   124f6:	4651      	mov	r1, sl
   124f8:	469b      	mov	fp, r3
   124fa:	4091      	lsls	r1, r2
   124fc:	4b26      	ldr	r3, [pc, #152]	; (12598 <__aeabi_ddiv+0x1f0>)
   124fe:	2200      	movs	r2, #0
   12500:	1a1b      	subs	r3, r3, r0
   12502:	e78f      	b.n	12424 <__aeabi_ddiv+0x7c>
   12504:	2300      	movs	r3, #0
   12506:	2201      	movs	r2, #1
   12508:	469b      	mov	fp, r3
   1250a:	e78b      	b.n	12424 <__aeabi_ddiv+0x7c>
   1250c:	4651      	mov	r1, sl
   1250e:	2203      	movs	r2, #3
   12510:	e788      	b.n	12424 <__aeabi_ddiv+0x7c>
   12512:	2300      	movs	r3, #0
   12514:	4698      	mov	r8, r3
   12516:	3301      	adds	r3, #1
   12518:	2604      	movs	r6, #4
   1251a:	2400      	movs	r4, #0
   1251c:	9303      	str	r3, [sp, #12]
   1251e:	e767      	b.n	123f0 <__aeabi_ddiv+0x48>
   12520:	2303      	movs	r3, #3
   12522:	46b1      	mov	r9, r6
   12524:	9303      	str	r3, [sp, #12]
   12526:	260c      	movs	r6, #12
   12528:	e762      	b.n	123f0 <__aeabi_ddiv+0x48>
   1252a:	2a03      	cmp	r2, #3
   1252c:	d100      	bne.n	12530 <__aeabi_ddiv+0x188>
   1252e:	e25c      	b.n	129ea <__aeabi_ddiv+0x642>
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	2a01      	cmp	r2, #1
   12534:	d000      	beq.n	12538 <__aeabi_ddiv+0x190>
   12536:	e1e4      	b.n	12902 <__aeabi_ddiv+0x55a>
   12538:	4013      	ands	r3, r2
   1253a:	469c      	mov	ip, r3
   1253c:	2300      	movs	r3, #0
   1253e:	2400      	movs	r4, #0
   12540:	2200      	movs	r2, #0
   12542:	4698      	mov	r8, r3
   12544:	2100      	movs	r1, #0
   12546:	0312      	lsls	r2, r2, #12
   12548:	0b13      	lsrs	r3, r2, #12
   1254a:	0d0a      	lsrs	r2, r1, #20
   1254c:	0512      	lsls	r2, r2, #20
   1254e:	431a      	orrs	r2, r3
   12550:	0523      	lsls	r3, r4, #20
   12552:	4c12      	ldr	r4, [pc, #72]	; (1259c <__aeabi_ddiv+0x1f4>)
   12554:	4640      	mov	r0, r8
   12556:	4022      	ands	r2, r4
   12558:	4313      	orrs	r3, r2
   1255a:	4662      	mov	r2, ip
   1255c:	005b      	lsls	r3, r3, #1
   1255e:	07d2      	lsls	r2, r2, #31
   12560:	085b      	lsrs	r3, r3, #1
   12562:	4313      	orrs	r3, r2
   12564:	0019      	movs	r1, r3
   12566:	b007      	add	sp, #28
   12568:	bc3c      	pop	{r2, r3, r4, r5}
   1256a:	4690      	mov	r8, r2
   1256c:	4699      	mov	r9, r3
   1256e:	46a2      	mov	sl, r4
   12570:	46ab      	mov	fp, r5
   12572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12574:	2300      	movs	r3, #0
   12576:	2280      	movs	r2, #128	; 0x80
   12578:	469c      	mov	ip, r3
   1257a:	0312      	lsls	r2, r2, #12
   1257c:	4698      	mov	r8, r3
   1257e:	4c03      	ldr	r4, [pc, #12]	; (1258c <__aeabi_ddiv+0x1e4>)
   12580:	e7e0      	b.n	12544 <__aeabi_ddiv+0x19c>
   12582:	2300      	movs	r3, #0
   12584:	4c01      	ldr	r4, [pc, #4]	; (1258c <__aeabi_ddiv+0x1e4>)
   12586:	2200      	movs	r2, #0
   12588:	4698      	mov	r8, r3
   1258a:	e7db      	b.n	12544 <__aeabi_ddiv+0x19c>
   1258c:	000007ff 	.word	0x000007ff
   12590:	fffffc01 	.word	0xfffffc01
   12594:	0001af44 	.word	0x0001af44
   12598:	fffffc0d 	.word	0xfffffc0d
   1259c:	800fffff 	.word	0x800fffff
   125a0:	45d9      	cmp	r9, fp
   125a2:	d900      	bls.n	125a6 <__aeabi_ddiv+0x1fe>
   125a4:	e139      	b.n	1281a <__aeabi_ddiv+0x472>
   125a6:	d100      	bne.n	125aa <__aeabi_ddiv+0x202>
   125a8:	e134      	b.n	12814 <__aeabi_ddiv+0x46c>
   125aa:	2300      	movs	r3, #0
   125ac:	4646      	mov	r6, r8
   125ae:	464d      	mov	r5, r9
   125b0:	469a      	mov	sl, r3
   125b2:	3c01      	subs	r4, #1
   125b4:	465b      	mov	r3, fp
   125b6:	0e0a      	lsrs	r2, r1, #24
   125b8:	021b      	lsls	r3, r3, #8
   125ba:	431a      	orrs	r2, r3
   125bc:	020b      	lsls	r3, r1, #8
   125be:	0c17      	lsrs	r7, r2, #16
   125c0:	9303      	str	r3, [sp, #12]
   125c2:	0413      	lsls	r3, r2, #16
   125c4:	0c1b      	lsrs	r3, r3, #16
   125c6:	0039      	movs	r1, r7
   125c8:	0028      	movs	r0, r5
   125ca:	4690      	mov	r8, r2
   125cc:	9301      	str	r3, [sp, #4]
   125ce:	f7fe f9f5 	bl	109bc <__udivsi3>
   125d2:	0002      	movs	r2, r0
   125d4:	9b01      	ldr	r3, [sp, #4]
   125d6:	4683      	mov	fp, r0
   125d8:	435a      	muls	r2, r3
   125da:	0028      	movs	r0, r5
   125dc:	0039      	movs	r1, r7
   125de:	4691      	mov	r9, r2
   125e0:	f7fe fa72 	bl	10ac8 <__aeabi_uidivmod>
   125e4:	0c35      	lsrs	r5, r6, #16
   125e6:	0409      	lsls	r1, r1, #16
   125e8:	430d      	orrs	r5, r1
   125ea:	45a9      	cmp	r9, r5
   125ec:	d90d      	bls.n	1260a <__aeabi_ddiv+0x262>
   125ee:	465b      	mov	r3, fp
   125f0:	4445      	add	r5, r8
   125f2:	3b01      	subs	r3, #1
   125f4:	45a8      	cmp	r8, r5
   125f6:	d900      	bls.n	125fa <__aeabi_ddiv+0x252>
   125f8:	e13a      	b.n	12870 <__aeabi_ddiv+0x4c8>
   125fa:	45a9      	cmp	r9, r5
   125fc:	d800      	bhi.n	12600 <__aeabi_ddiv+0x258>
   125fe:	e137      	b.n	12870 <__aeabi_ddiv+0x4c8>
   12600:	2302      	movs	r3, #2
   12602:	425b      	negs	r3, r3
   12604:	469c      	mov	ip, r3
   12606:	4445      	add	r5, r8
   12608:	44e3      	add	fp, ip
   1260a:	464b      	mov	r3, r9
   1260c:	1aeb      	subs	r3, r5, r3
   1260e:	0039      	movs	r1, r7
   12610:	0018      	movs	r0, r3
   12612:	9304      	str	r3, [sp, #16]
   12614:	f7fe f9d2 	bl	109bc <__udivsi3>
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	0005      	movs	r5, r0
   1261c:	4343      	muls	r3, r0
   1261e:	0039      	movs	r1, r7
   12620:	9804      	ldr	r0, [sp, #16]
   12622:	4699      	mov	r9, r3
   12624:	f7fe fa50 	bl	10ac8 <__aeabi_uidivmod>
   12628:	0433      	lsls	r3, r6, #16
   1262a:	0409      	lsls	r1, r1, #16
   1262c:	0c1b      	lsrs	r3, r3, #16
   1262e:	430b      	orrs	r3, r1
   12630:	4599      	cmp	r9, r3
   12632:	d909      	bls.n	12648 <__aeabi_ddiv+0x2a0>
   12634:	4443      	add	r3, r8
   12636:	1e6a      	subs	r2, r5, #1
   12638:	4598      	cmp	r8, r3
   1263a:	d900      	bls.n	1263e <__aeabi_ddiv+0x296>
   1263c:	e11a      	b.n	12874 <__aeabi_ddiv+0x4cc>
   1263e:	4599      	cmp	r9, r3
   12640:	d800      	bhi.n	12644 <__aeabi_ddiv+0x29c>
   12642:	e117      	b.n	12874 <__aeabi_ddiv+0x4cc>
   12644:	3d02      	subs	r5, #2
   12646:	4443      	add	r3, r8
   12648:	464a      	mov	r2, r9
   1264a:	1a9b      	subs	r3, r3, r2
   1264c:	465a      	mov	r2, fp
   1264e:	0412      	lsls	r2, r2, #16
   12650:	432a      	orrs	r2, r5
   12652:	9903      	ldr	r1, [sp, #12]
   12654:	4693      	mov	fp, r2
   12656:	0c10      	lsrs	r0, r2, #16
   12658:	0c0a      	lsrs	r2, r1, #16
   1265a:	4691      	mov	r9, r2
   1265c:	0409      	lsls	r1, r1, #16
   1265e:	465a      	mov	r2, fp
   12660:	0c09      	lsrs	r1, r1, #16
   12662:	464e      	mov	r6, r9
   12664:	000d      	movs	r5, r1
   12666:	0412      	lsls	r2, r2, #16
   12668:	0c12      	lsrs	r2, r2, #16
   1266a:	4345      	muls	r5, r0
   1266c:	9105      	str	r1, [sp, #20]
   1266e:	4351      	muls	r1, r2
   12670:	4372      	muls	r2, r6
   12672:	4370      	muls	r0, r6
   12674:	1952      	adds	r2, r2, r5
   12676:	0c0e      	lsrs	r6, r1, #16
   12678:	18b2      	adds	r2, r6, r2
   1267a:	4295      	cmp	r5, r2
   1267c:	d903      	bls.n	12686 <__aeabi_ddiv+0x2de>
   1267e:	2580      	movs	r5, #128	; 0x80
   12680:	026d      	lsls	r5, r5, #9
   12682:	46ac      	mov	ip, r5
   12684:	4460      	add	r0, ip
   12686:	0c15      	lsrs	r5, r2, #16
   12688:	0409      	lsls	r1, r1, #16
   1268a:	0412      	lsls	r2, r2, #16
   1268c:	0c09      	lsrs	r1, r1, #16
   1268e:	1828      	adds	r0, r5, r0
   12690:	1852      	adds	r2, r2, r1
   12692:	4283      	cmp	r3, r0
   12694:	d200      	bcs.n	12698 <__aeabi_ddiv+0x2f0>
   12696:	e0ce      	b.n	12836 <__aeabi_ddiv+0x48e>
   12698:	d100      	bne.n	1269c <__aeabi_ddiv+0x2f4>
   1269a:	e0c8      	b.n	1282e <__aeabi_ddiv+0x486>
   1269c:	1a1d      	subs	r5, r3, r0
   1269e:	4653      	mov	r3, sl
   126a0:	1a9e      	subs	r6, r3, r2
   126a2:	45b2      	cmp	sl, r6
   126a4:	4192      	sbcs	r2, r2
   126a6:	4252      	negs	r2, r2
   126a8:	1aab      	subs	r3, r5, r2
   126aa:	469a      	mov	sl, r3
   126ac:	4598      	cmp	r8, r3
   126ae:	d100      	bne.n	126b2 <__aeabi_ddiv+0x30a>
   126b0:	e117      	b.n	128e2 <__aeabi_ddiv+0x53a>
   126b2:	0039      	movs	r1, r7
   126b4:	0018      	movs	r0, r3
   126b6:	f7fe f981 	bl	109bc <__udivsi3>
   126ba:	9b01      	ldr	r3, [sp, #4]
   126bc:	0005      	movs	r5, r0
   126be:	4343      	muls	r3, r0
   126c0:	0039      	movs	r1, r7
   126c2:	4650      	mov	r0, sl
   126c4:	9304      	str	r3, [sp, #16]
   126c6:	f7fe f9ff 	bl	10ac8 <__aeabi_uidivmod>
   126ca:	9804      	ldr	r0, [sp, #16]
   126cc:	040b      	lsls	r3, r1, #16
   126ce:	0c31      	lsrs	r1, r6, #16
   126d0:	4319      	orrs	r1, r3
   126d2:	4288      	cmp	r0, r1
   126d4:	d909      	bls.n	126ea <__aeabi_ddiv+0x342>
   126d6:	4441      	add	r1, r8
   126d8:	1e6b      	subs	r3, r5, #1
   126da:	4588      	cmp	r8, r1
   126dc:	d900      	bls.n	126e0 <__aeabi_ddiv+0x338>
   126de:	e107      	b.n	128f0 <__aeabi_ddiv+0x548>
   126e0:	4288      	cmp	r0, r1
   126e2:	d800      	bhi.n	126e6 <__aeabi_ddiv+0x33e>
   126e4:	e104      	b.n	128f0 <__aeabi_ddiv+0x548>
   126e6:	3d02      	subs	r5, #2
   126e8:	4441      	add	r1, r8
   126ea:	9b04      	ldr	r3, [sp, #16]
   126ec:	1acb      	subs	r3, r1, r3
   126ee:	0018      	movs	r0, r3
   126f0:	0039      	movs	r1, r7
   126f2:	9304      	str	r3, [sp, #16]
   126f4:	f7fe f962 	bl	109bc <__udivsi3>
   126f8:	9b01      	ldr	r3, [sp, #4]
   126fa:	4682      	mov	sl, r0
   126fc:	4343      	muls	r3, r0
   126fe:	0039      	movs	r1, r7
   12700:	9804      	ldr	r0, [sp, #16]
   12702:	9301      	str	r3, [sp, #4]
   12704:	f7fe f9e0 	bl	10ac8 <__aeabi_uidivmod>
   12708:	9801      	ldr	r0, [sp, #4]
   1270a:	040b      	lsls	r3, r1, #16
   1270c:	0431      	lsls	r1, r6, #16
   1270e:	0c09      	lsrs	r1, r1, #16
   12710:	4319      	orrs	r1, r3
   12712:	4288      	cmp	r0, r1
   12714:	d90d      	bls.n	12732 <__aeabi_ddiv+0x38a>
   12716:	4653      	mov	r3, sl
   12718:	4441      	add	r1, r8
   1271a:	3b01      	subs	r3, #1
   1271c:	4588      	cmp	r8, r1
   1271e:	d900      	bls.n	12722 <__aeabi_ddiv+0x37a>
   12720:	e0e8      	b.n	128f4 <__aeabi_ddiv+0x54c>
   12722:	4288      	cmp	r0, r1
   12724:	d800      	bhi.n	12728 <__aeabi_ddiv+0x380>
   12726:	e0e5      	b.n	128f4 <__aeabi_ddiv+0x54c>
   12728:	2302      	movs	r3, #2
   1272a:	425b      	negs	r3, r3
   1272c:	469c      	mov	ip, r3
   1272e:	4441      	add	r1, r8
   12730:	44e2      	add	sl, ip
   12732:	9b01      	ldr	r3, [sp, #4]
   12734:	042d      	lsls	r5, r5, #16
   12736:	1ace      	subs	r6, r1, r3
   12738:	4651      	mov	r1, sl
   1273a:	4329      	orrs	r1, r5
   1273c:	9d05      	ldr	r5, [sp, #20]
   1273e:	464f      	mov	r7, r9
   12740:	002a      	movs	r2, r5
   12742:	040b      	lsls	r3, r1, #16
   12744:	0c08      	lsrs	r0, r1, #16
   12746:	0c1b      	lsrs	r3, r3, #16
   12748:	435a      	muls	r2, r3
   1274a:	4345      	muls	r5, r0
   1274c:	437b      	muls	r3, r7
   1274e:	4378      	muls	r0, r7
   12750:	195b      	adds	r3, r3, r5
   12752:	0c17      	lsrs	r7, r2, #16
   12754:	18fb      	adds	r3, r7, r3
   12756:	429d      	cmp	r5, r3
   12758:	d903      	bls.n	12762 <__aeabi_ddiv+0x3ba>
   1275a:	2580      	movs	r5, #128	; 0x80
   1275c:	026d      	lsls	r5, r5, #9
   1275e:	46ac      	mov	ip, r5
   12760:	4460      	add	r0, ip
   12762:	0c1d      	lsrs	r5, r3, #16
   12764:	0412      	lsls	r2, r2, #16
   12766:	041b      	lsls	r3, r3, #16
   12768:	0c12      	lsrs	r2, r2, #16
   1276a:	1828      	adds	r0, r5, r0
   1276c:	189b      	adds	r3, r3, r2
   1276e:	4286      	cmp	r6, r0
   12770:	d200      	bcs.n	12774 <__aeabi_ddiv+0x3cc>
   12772:	e093      	b.n	1289c <__aeabi_ddiv+0x4f4>
   12774:	d100      	bne.n	12778 <__aeabi_ddiv+0x3d0>
   12776:	e08e      	b.n	12896 <__aeabi_ddiv+0x4ee>
   12778:	2301      	movs	r3, #1
   1277a:	4319      	orrs	r1, r3
   1277c:	4ba0      	ldr	r3, [pc, #640]	; (12a00 <__aeabi_ddiv+0x658>)
   1277e:	18e3      	adds	r3, r4, r3
   12780:	2b00      	cmp	r3, #0
   12782:	dc00      	bgt.n	12786 <__aeabi_ddiv+0x3de>
   12784:	e099      	b.n	128ba <__aeabi_ddiv+0x512>
   12786:	074a      	lsls	r2, r1, #29
   12788:	d000      	beq.n	1278c <__aeabi_ddiv+0x3e4>
   1278a:	e09e      	b.n	128ca <__aeabi_ddiv+0x522>
   1278c:	465a      	mov	r2, fp
   1278e:	01d2      	lsls	r2, r2, #7
   12790:	d506      	bpl.n	127a0 <__aeabi_ddiv+0x3f8>
   12792:	465a      	mov	r2, fp
   12794:	4b9b      	ldr	r3, [pc, #620]	; (12a04 <__aeabi_ddiv+0x65c>)
   12796:	401a      	ands	r2, r3
   12798:	2380      	movs	r3, #128	; 0x80
   1279a:	4693      	mov	fp, r2
   1279c:	00db      	lsls	r3, r3, #3
   1279e:	18e3      	adds	r3, r4, r3
   127a0:	4a99      	ldr	r2, [pc, #612]	; (12a08 <__aeabi_ddiv+0x660>)
   127a2:	4293      	cmp	r3, r2
   127a4:	dd68      	ble.n	12878 <__aeabi_ddiv+0x4d0>
   127a6:	2301      	movs	r3, #1
   127a8:	9a02      	ldr	r2, [sp, #8]
   127aa:	4c98      	ldr	r4, [pc, #608]	; (12a0c <__aeabi_ddiv+0x664>)
   127ac:	401a      	ands	r2, r3
   127ae:	2300      	movs	r3, #0
   127b0:	4694      	mov	ip, r2
   127b2:	4698      	mov	r8, r3
   127b4:	2200      	movs	r2, #0
   127b6:	e6c5      	b.n	12544 <__aeabi_ddiv+0x19c>
   127b8:	2280      	movs	r2, #128	; 0x80
   127ba:	464b      	mov	r3, r9
   127bc:	0312      	lsls	r2, r2, #12
   127be:	4213      	tst	r3, r2
   127c0:	d00a      	beq.n	127d8 <__aeabi_ddiv+0x430>
   127c2:	465b      	mov	r3, fp
   127c4:	4213      	tst	r3, r2
   127c6:	d106      	bne.n	127d6 <__aeabi_ddiv+0x42e>
   127c8:	431a      	orrs	r2, r3
   127ca:	0312      	lsls	r2, r2, #12
   127cc:	0b12      	lsrs	r2, r2, #12
   127ce:	46ac      	mov	ip, r5
   127d0:	4688      	mov	r8, r1
   127d2:	4c8e      	ldr	r4, [pc, #568]	; (12a0c <__aeabi_ddiv+0x664>)
   127d4:	e6b6      	b.n	12544 <__aeabi_ddiv+0x19c>
   127d6:	464b      	mov	r3, r9
   127d8:	431a      	orrs	r2, r3
   127da:	0312      	lsls	r2, r2, #12
   127dc:	0b12      	lsrs	r2, r2, #12
   127de:	46bc      	mov	ip, r7
   127e0:	4c8a      	ldr	r4, [pc, #552]	; (12a0c <__aeabi_ddiv+0x664>)
   127e2:	e6af      	b.n	12544 <__aeabi_ddiv+0x19c>
   127e4:	0003      	movs	r3, r0
   127e6:	465a      	mov	r2, fp
   127e8:	3b28      	subs	r3, #40	; 0x28
   127ea:	409a      	lsls	r2, r3
   127ec:	2300      	movs	r3, #0
   127ee:	4691      	mov	r9, r2
   127f0:	4698      	mov	r8, r3
   127f2:	e657      	b.n	124a4 <__aeabi_ddiv+0xfc>
   127f4:	4658      	mov	r0, fp
   127f6:	f001 f82b 	bl	13850 <__clzsi2>
   127fa:	3020      	adds	r0, #32
   127fc:	e640      	b.n	12480 <__aeabi_ddiv+0xd8>
   127fe:	0003      	movs	r3, r0
   12800:	4652      	mov	r2, sl
   12802:	3b28      	subs	r3, #40	; 0x28
   12804:	409a      	lsls	r2, r3
   12806:	2100      	movs	r1, #0
   12808:	4693      	mov	fp, r2
   1280a:	e677      	b.n	124fc <__aeabi_ddiv+0x154>
   1280c:	f001 f820 	bl	13850 <__clzsi2>
   12810:	3020      	adds	r0, #32
   12812:	e65f      	b.n	124d4 <__aeabi_ddiv+0x12c>
   12814:	4588      	cmp	r8, r1
   12816:	d200      	bcs.n	1281a <__aeabi_ddiv+0x472>
   12818:	e6c7      	b.n	125aa <__aeabi_ddiv+0x202>
   1281a:	464b      	mov	r3, r9
   1281c:	07de      	lsls	r6, r3, #31
   1281e:	085d      	lsrs	r5, r3, #1
   12820:	4643      	mov	r3, r8
   12822:	085b      	lsrs	r3, r3, #1
   12824:	431e      	orrs	r6, r3
   12826:	4643      	mov	r3, r8
   12828:	07db      	lsls	r3, r3, #31
   1282a:	469a      	mov	sl, r3
   1282c:	e6c2      	b.n	125b4 <__aeabi_ddiv+0x20c>
   1282e:	2500      	movs	r5, #0
   12830:	4592      	cmp	sl, r2
   12832:	d300      	bcc.n	12836 <__aeabi_ddiv+0x48e>
   12834:	e733      	b.n	1269e <__aeabi_ddiv+0x2f6>
   12836:	9e03      	ldr	r6, [sp, #12]
   12838:	4659      	mov	r1, fp
   1283a:	46b4      	mov	ip, r6
   1283c:	44e2      	add	sl, ip
   1283e:	45b2      	cmp	sl, r6
   12840:	41ad      	sbcs	r5, r5
   12842:	426d      	negs	r5, r5
   12844:	4445      	add	r5, r8
   12846:	18eb      	adds	r3, r5, r3
   12848:	3901      	subs	r1, #1
   1284a:	4598      	cmp	r8, r3
   1284c:	d207      	bcs.n	1285e <__aeabi_ddiv+0x4b6>
   1284e:	4298      	cmp	r0, r3
   12850:	d900      	bls.n	12854 <__aeabi_ddiv+0x4ac>
   12852:	e07f      	b.n	12954 <__aeabi_ddiv+0x5ac>
   12854:	d100      	bne.n	12858 <__aeabi_ddiv+0x4b0>
   12856:	e0bc      	b.n	129d2 <__aeabi_ddiv+0x62a>
   12858:	1a1d      	subs	r5, r3, r0
   1285a:	468b      	mov	fp, r1
   1285c:	e71f      	b.n	1269e <__aeabi_ddiv+0x2f6>
   1285e:	4598      	cmp	r8, r3
   12860:	d1fa      	bne.n	12858 <__aeabi_ddiv+0x4b0>
   12862:	9d03      	ldr	r5, [sp, #12]
   12864:	4555      	cmp	r5, sl
   12866:	d9f2      	bls.n	1284e <__aeabi_ddiv+0x4a6>
   12868:	4643      	mov	r3, r8
   1286a:	468b      	mov	fp, r1
   1286c:	1a1d      	subs	r5, r3, r0
   1286e:	e716      	b.n	1269e <__aeabi_ddiv+0x2f6>
   12870:	469b      	mov	fp, r3
   12872:	e6ca      	b.n	1260a <__aeabi_ddiv+0x262>
   12874:	0015      	movs	r5, r2
   12876:	e6e7      	b.n	12648 <__aeabi_ddiv+0x2a0>
   12878:	465a      	mov	r2, fp
   1287a:	08c9      	lsrs	r1, r1, #3
   1287c:	0752      	lsls	r2, r2, #29
   1287e:	430a      	orrs	r2, r1
   12880:	055b      	lsls	r3, r3, #21
   12882:	4690      	mov	r8, r2
   12884:	0d5c      	lsrs	r4, r3, #21
   12886:	465a      	mov	r2, fp
   12888:	2301      	movs	r3, #1
   1288a:	9902      	ldr	r1, [sp, #8]
   1288c:	0252      	lsls	r2, r2, #9
   1288e:	4019      	ands	r1, r3
   12890:	0b12      	lsrs	r2, r2, #12
   12892:	468c      	mov	ip, r1
   12894:	e656      	b.n	12544 <__aeabi_ddiv+0x19c>
   12896:	2b00      	cmp	r3, #0
   12898:	d100      	bne.n	1289c <__aeabi_ddiv+0x4f4>
   1289a:	e76f      	b.n	1277c <__aeabi_ddiv+0x3d4>
   1289c:	4446      	add	r6, r8
   1289e:	1e4a      	subs	r2, r1, #1
   128a0:	45b0      	cmp	r8, r6
   128a2:	d929      	bls.n	128f8 <__aeabi_ddiv+0x550>
   128a4:	0011      	movs	r1, r2
   128a6:	4286      	cmp	r6, r0
   128a8:	d000      	beq.n	128ac <__aeabi_ddiv+0x504>
   128aa:	e765      	b.n	12778 <__aeabi_ddiv+0x3d0>
   128ac:	9a03      	ldr	r2, [sp, #12]
   128ae:	4293      	cmp	r3, r2
   128b0:	d000      	beq.n	128b4 <__aeabi_ddiv+0x50c>
   128b2:	e761      	b.n	12778 <__aeabi_ddiv+0x3d0>
   128b4:	e762      	b.n	1277c <__aeabi_ddiv+0x3d4>
   128b6:	2101      	movs	r1, #1
   128b8:	4249      	negs	r1, r1
   128ba:	2001      	movs	r0, #1
   128bc:	1ac2      	subs	r2, r0, r3
   128be:	2a38      	cmp	r2, #56	; 0x38
   128c0:	dd21      	ble.n	12906 <__aeabi_ddiv+0x55e>
   128c2:	9b02      	ldr	r3, [sp, #8]
   128c4:	4003      	ands	r3, r0
   128c6:	469c      	mov	ip, r3
   128c8:	e638      	b.n	1253c <__aeabi_ddiv+0x194>
   128ca:	220f      	movs	r2, #15
   128cc:	400a      	ands	r2, r1
   128ce:	2a04      	cmp	r2, #4
   128d0:	d100      	bne.n	128d4 <__aeabi_ddiv+0x52c>
   128d2:	e75b      	b.n	1278c <__aeabi_ddiv+0x3e4>
   128d4:	000a      	movs	r2, r1
   128d6:	1d11      	adds	r1, r2, #4
   128d8:	4291      	cmp	r1, r2
   128da:	4192      	sbcs	r2, r2
   128dc:	4252      	negs	r2, r2
   128de:	4493      	add	fp, r2
   128e0:	e754      	b.n	1278c <__aeabi_ddiv+0x3e4>
   128e2:	4b47      	ldr	r3, [pc, #284]	; (12a00 <__aeabi_ddiv+0x658>)
   128e4:	18e3      	adds	r3, r4, r3
   128e6:	2b00      	cmp	r3, #0
   128e8:	dde5      	ble.n	128b6 <__aeabi_ddiv+0x50e>
   128ea:	2201      	movs	r2, #1
   128ec:	4252      	negs	r2, r2
   128ee:	e7f2      	b.n	128d6 <__aeabi_ddiv+0x52e>
   128f0:	001d      	movs	r5, r3
   128f2:	e6fa      	b.n	126ea <__aeabi_ddiv+0x342>
   128f4:	469a      	mov	sl, r3
   128f6:	e71c      	b.n	12732 <__aeabi_ddiv+0x38a>
   128f8:	42b0      	cmp	r0, r6
   128fa:	d839      	bhi.n	12970 <__aeabi_ddiv+0x5c8>
   128fc:	d06e      	beq.n	129dc <__aeabi_ddiv+0x634>
   128fe:	0011      	movs	r1, r2
   12900:	e73a      	b.n	12778 <__aeabi_ddiv+0x3d0>
   12902:	9302      	str	r3, [sp, #8]
   12904:	e73a      	b.n	1277c <__aeabi_ddiv+0x3d4>
   12906:	2a1f      	cmp	r2, #31
   12908:	dc3c      	bgt.n	12984 <__aeabi_ddiv+0x5dc>
   1290a:	2320      	movs	r3, #32
   1290c:	1a9b      	subs	r3, r3, r2
   1290e:	000c      	movs	r4, r1
   12910:	4658      	mov	r0, fp
   12912:	4099      	lsls	r1, r3
   12914:	4098      	lsls	r0, r3
   12916:	1e4b      	subs	r3, r1, #1
   12918:	4199      	sbcs	r1, r3
   1291a:	465b      	mov	r3, fp
   1291c:	40d4      	lsrs	r4, r2
   1291e:	40d3      	lsrs	r3, r2
   12920:	4320      	orrs	r0, r4
   12922:	4308      	orrs	r0, r1
   12924:	001a      	movs	r2, r3
   12926:	0743      	lsls	r3, r0, #29
   12928:	d009      	beq.n	1293e <__aeabi_ddiv+0x596>
   1292a:	230f      	movs	r3, #15
   1292c:	4003      	ands	r3, r0
   1292e:	2b04      	cmp	r3, #4
   12930:	d005      	beq.n	1293e <__aeabi_ddiv+0x596>
   12932:	0001      	movs	r1, r0
   12934:	1d08      	adds	r0, r1, #4
   12936:	4288      	cmp	r0, r1
   12938:	419b      	sbcs	r3, r3
   1293a:	425b      	negs	r3, r3
   1293c:	18d2      	adds	r2, r2, r3
   1293e:	0213      	lsls	r3, r2, #8
   12940:	d53a      	bpl.n	129b8 <__aeabi_ddiv+0x610>
   12942:	2301      	movs	r3, #1
   12944:	9a02      	ldr	r2, [sp, #8]
   12946:	2401      	movs	r4, #1
   12948:	401a      	ands	r2, r3
   1294a:	2300      	movs	r3, #0
   1294c:	4694      	mov	ip, r2
   1294e:	4698      	mov	r8, r3
   12950:	2200      	movs	r2, #0
   12952:	e5f7      	b.n	12544 <__aeabi_ddiv+0x19c>
   12954:	2102      	movs	r1, #2
   12956:	4249      	negs	r1, r1
   12958:	468c      	mov	ip, r1
   1295a:	9d03      	ldr	r5, [sp, #12]
   1295c:	44e3      	add	fp, ip
   1295e:	46ac      	mov	ip, r5
   12960:	44e2      	add	sl, ip
   12962:	45aa      	cmp	sl, r5
   12964:	41ad      	sbcs	r5, r5
   12966:	426d      	negs	r5, r5
   12968:	4445      	add	r5, r8
   1296a:	18ed      	adds	r5, r5, r3
   1296c:	1a2d      	subs	r5, r5, r0
   1296e:	e696      	b.n	1269e <__aeabi_ddiv+0x2f6>
   12970:	1e8a      	subs	r2, r1, #2
   12972:	9903      	ldr	r1, [sp, #12]
   12974:	004d      	lsls	r5, r1, #1
   12976:	428d      	cmp	r5, r1
   12978:	4189      	sbcs	r1, r1
   1297a:	4249      	negs	r1, r1
   1297c:	4441      	add	r1, r8
   1297e:	1876      	adds	r6, r6, r1
   12980:	9503      	str	r5, [sp, #12]
   12982:	e78f      	b.n	128a4 <__aeabi_ddiv+0x4fc>
   12984:	201f      	movs	r0, #31
   12986:	4240      	negs	r0, r0
   12988:	1ac3      	subs	r3, r0, r3
   1298a:	4658      	mov	r0, fp
   1298c:	40d8      	lsrs	r0, r3
   1298e:	0003      	movs	r3, r0
   12990:	2a20      	cmp	r2, #32
   12992:	d028      	beq.n	129e6 <__aeabi_ddiv+0x63e>
   12994:	2040      	movs	r0, #64	; 0x40
   12996:	465d      	mov	r5, fp
   12998:	1a82      	subs	r2, r0, r2
   1299a:	4095      	lsls	r5, r2
   1299c:	4329      	orrs	r1, r5
   1299e:	1e4a      	subs	r2, r1, #1
   129a0:	4191      	sbcs	r1, r2
   129a2:	4319      	orrs	r1, r3
   129a4:	2307      	movs	r3, #7
   129a6:	2200      	movs	r2, #0
   129a8:	400b      	ands	r3, r1
   129aa:	d009      	beq.n	129c0 <__aeabi_ddiv+0x618>
   129ac:	230f      	movs	r3, #15
   129ae:	2200      	movs	r2, #0
   129b0:	400b      	ands	r3, r1
   129b2:	0008      	movs	r0, r1
   129b4:	2b04      	cmp	r3, #4
   129b6:	d1bd      	bne.n	12934 <__aeabi_ddiv+0x58c>
   129b8:	0001      	movs	r1, r0
   129ba:	0753      	lsls	r3, r2, #29
   129bc:	0252      	lsls	r2, r2, #9
   129be:	0b12      	lsrs	r2, r2, #12
   129c0:	08c9      	lsrs	r1, r1, #3
   129c2:	4319      	orrs	r1, r3
   129c4:	2301      	movs	r3, #1
   129c6:	4688      	mov	r8, r1
   129c8:	9902      	ldr	r1, [sp, #8]
   129ca:	2400      	movs	r4, #0
   129cc:	4019      	ands	r1, r3
   129ce:	468c      	mov	ip, r1
   129d0:	e5b8      	b.n	12544 <__aeabi_ddiv+0x19c>
   129d2:	4552      	cmp	r2, sl
   129d4:	d8be      	bhi.n	12954 <__aeabi_ddiv+0x5ac>
   129d6:	468b      	mov	fp, r1
   129d8:	2500      	movs	r5, #0
   129da:	e660      	b.n	1269e <__aeabi_ddiv+0x2f6>
   129dc:	9d03      	ldr	r5, [sp, #12]
   129de:	429d      	cmp	r5, r3
   129e0:	d3c6      	bcc.n	12970 <__aeabi_ddiv+0x5c8>
   129e2:	0011      	movs	r1, r2
   129e4:	e762      	b.n	128ac <__aeabi_ddiv+0x504>
   129e6:	2500      	movs	r5, #0
   129e8:	e7d8      	b.n	1299c <__aeabi_ddiv+0x5f4>
   129ea:	2280      	movs	r2, #128	; 0x80
   129ec:	465b      	mov	r3, fp
   129ee:	0312      	lsls	r2, r2, #12
   129f0:	431a      	orrs	r2, r3
   129f2:	9b01      	ldr	r3, [sp, #4]
   129f4:	0312      	lsls	r2, r2, #12
   129f6:	0b12      	lsrs	r2, r2, #12
   129f8:	469c      	mov	ip, r3
   129fa:	4688      	mov	r8, r1
   129fc:	4c03      	ldr	r4, [pc, #12]	; (12a0c <__aeabi_ddiv+0x664>)
   129fe:	e5a1      	b.n	12544 <__aeabi_ddiv+0x19c>
   12a00:	000003ff 	.word	0x000003ff
   12a04:	feffffff 	.word	0xfeffffff
   12a08:	000007fe 	.word	0x000007fe
   12a0c:	000007ff 	.word	0x000007ff

00012a10 <__aeabi_dmul>:
   12a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a12:	4657      	mov	r7, sl
   12a14:	4645      	mov	r5, r8
   12a16:	46de      	mov	lr, fp
   12a18:	464e      	mov	r6, r9
   12a1a:	b5e0      	push	{r5, r6, r7, lr}
   12a1c:	030c      	lsls	r4, r1, #12
   12a1e:	4698      	mov	r8, r3
   12a20:	004e      	lsls	r6, r1, #1
   12a22:	0b23      	lsrs	r3, r4, #12
   12a24:	b087      	sub	sp, #28
   12a26:	0007      	movs	r7, r0
   12a28:	4692      	mov	sl, r2
   12a2a:	469b      	mov	fp, r3
   12a2c:	0d76      	lsrs	r6, r6, #21
   12a2e:	0fcd      	lsrs	r5, r1, #31
   12a30:	2e00      	cmp	r6, #0
   12a32:	d06b      	beq.n	12b0c <__aeabi_dmul+0xfc>
   12a34:	4b6d      	ldr	r3, [pc, #436]	; (12bec <__aeabi_dmul+0x1dc>)
   12a36:	429e      	cmp	r6, r3
   12a38:	d035      	beq.n	12aa6 <__aeabi_dmul+0x96>
   12a3a:	2480      	movs	r4, #128	; 0x80
   12a3c:	465b      	mov	r3, fp
   12a3e:	0f42      	lsrs	r2, r0, #29
   12a40:	0424      	lsls	r4, r4, #16
   12a42:	00db      	lsls	r3, r3, #3
   12a44:	4314      	orrs	r4, r2
   12a46:	431c      	orrs	r4, r3
   12a48:	00c3      	lsls	r3, r0, #3
   12a4a:	4699      	mov	r9, r3
   12a4c:	4b68      	ldr	r3, [pc, #416]	; (12bf0 <__aeabi_dmul+0x1e0>)
   12a4e:	46a3      	mov	fp, r4
   12a50:	469c      	mov	ip, r3
   12a52:	2300      	movs	r3, #0
   12a54:	2700      	movs	r7, #0
   12a56:	4466      	add	r6, ip
   12a58:	9302      	str	r3, [sp, #8]
   12a5a:	4643      	mov	r3, r8
   12a5c:	031c      	lsls	r4, r3, #12
   12a5e:	005a      	lsls	r2, r3, #1
   12a60:	0fdb      	lsrs	r3, r3, #31
   12a62:	4650      	mov	r0, sl
   12a64:	0b24      	lsrs	r4, r4, #12
   12a66:	0d52      	lsrs	r2, r2, #21
   12a68:	4698      	mov	r8, r3
   12a6a:	d100      	bne.n	12a6e <__aeabi_dmul+0x5e>
   12a6c:	e076      	b.n	12b5c <__aeabi_dmul+0x14c>
   12a6e:	4b5f      	ldr	r3, [pc, #380]	; (12bec <__aeabi_dmul+0x1dc>)
   12a70:	429a      	cmp	r2, r3
   12a72:	d06d      	beq.n	12b50 <__aeabi_dmul+0x140>
   12a74:	2380      	movs	r3, #128	; 0x80
   12a76:	0f41      	lsrs	r1, r0, #29
   12a78:	041b      	lsls	r3, r3, #16
   12a7a:	430b      	orrs	r3, r1
   12a7c:	495c      	ldr	r1, [pc, #368]	; (12bf0 <__aeabi_dmul+0x1e0>)
   12a7e:	00e4      	lsls	r4, r4, #3
   12a80:	468c      	mov	ip, r1
   12a82:	431c      	orrs	r4, r3
   12a84:	00c3      	lsls	r3, r0, #3
   12a86:	2000      	movs	r0, #0
   12a88:	4462      	add	r2, ip
   12a8a:	4641      	mov	r1, r8
   12a8c:	18b6      	adds	r6, r6, r2
   12a8e:	4069      	eors	r1, r5
   12a90:	1c72      	adds	r2, r6, #1
   12a92:	9101      	str	r1, [sp, #4]
   12a94:	4694      	mov	ip, r2
   12a96:	4307      	orrs	r7, r0
   12a98:	2f0f      	cmp	r7, #15
   12a9a:	d900      	bls.n	12a9e <__aeabi_dmul+0x8e>
   12a9c:	e0b0      	b.n	12c00 <__aeabi_dmul+0x1f0>
   12a9e:	4a55      	ldr	r2, [pc, #340]	; (12bf4 <__aeabi_dmul+0x1e4>)
   12aa0:	00bf      	lsls	r7, r7, #2
   12aa2:	59d2      	ldr	r2, [r2, r7]
   12aa4:	4697      	mov	pc, r2
   12aa6:	465b      	mov	r3, fp
   12aa8:	4303      	orrs	r3, r0
   12aaa:	4699      	mov	r9, r3
   12aac:	d000      	beq.n	12ab0 <__aeabi_dmul+0xa0>
   12aae:	e087      	b.n	12bc0 <__aeabi_dmul+0x1b0>
   12ab0:	2300      	movs	r3, #0
   12ab2:	469b      	mov	fp, r3
   12ab4:	3302      	adds	r3, #2
   12ab6:	2708      	movs	r7, #8
   12ab8:	9302      	str	r3, [sp, #8]
   12aba:	e7ce      	b.n	12a5a <__aeabi_dmul+0x4a>
   12abc:	4642      	mov	r2, r8
   12abe:	9201      	str	r2, [sp, #4]
   12ac0:	2802      	cmp	r0, #2
   12ac2:	d067      	beq.n	12b94 <__aeabi_dmul+0x184>
   12ac4:	2803      	cmp	r0, #3
   12ac6:	d100      	bne.n	12aca <__aeabi_dmul+0xba>
   12ac8:	e20e      	b.n	12ee8 <__aeabi_dmul+0x4d8>
   12aca:	2801      	cmp	r0, #1
   12acc:	d000      	beq.n	12ad0 <__aeabi_dmul+0xc0>
   12ace:	e162      	b.n	12d96 <__aeabi_dmul+0x386>
   12ad0:	2300      	movs	r3, #0
   12ad2:	2400      	movs	r4, #0
   12ad4:	2200      	movs	r2, #0
   12ad6:	4699      	mov	r9, r3
   12ad8:	9901      	ldr	r1, [sp, #4]
   12ada:	4001      	ands	r1, r0
   12adc:	b2cd      	uxtb	r5, r1
   12ade:	2100      	movs	r1, #0
   12ae0:	0312      	lsls	r2, r2, #12
   12ae2:	0d0b      	lsrs	r3, r1, #20
   12ae4:	0b12      	lsrs	r2, r2, #12
   12ae6:	051b      	lsls	r3, r3, #20
   12ae8:	4313      	orrs	r3, r2
   12aea:	4a43      	ldr	r2, [pc, #268]	; (12bf8 <__aeabi_dmul+0x1e8>)
   12aec:	0524      	lsls	r4, r4, #20
   12aee:	4013      	ands	r3, r2
   12af0:	431c      	orrs	r4, r3
   12af2:	0064      	lsls	r4, r4, #1
   12af4:	07ed      	lsls	r5, r5, #31
   12af6:	0864      	lsrs	r4, r4, #1
   12af8:	432c      	orrs	r4, r5
   12afa:	4648      	mov	r0, r9
   12afc:	0021      	movs	r1, r4
   12afe:	b007      	add	sp, #28
   12b00:	bc3c      	pop	{r2, r3, r4, r5}
   12b02:	4690      	mov	r8, r2
   12b04:	4699      	mov	r9, r3
   12b06:	46a2      	mov	sl, r4
   12b08:	46ab      	mov	fp, r5
   12b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b0c:	4303      	orrs	r3, r0
   12b0e:	4699      	mov	r9, r3
   12b10:	d04f      	beq.n	12bb2 <__aeabi_dmul+0x1a2>
   12b12:	465b      	mov	r3, fp
   12b14:	2b00      	cmp	r3, #0
   12b16:	d100      	bne.n	12b1a <__aeabi_dmul+0x10a>
   12b18:	e189      	b.n	12e2e <__aeabi_dmul+0x41e>
   12b1a:	4658      	mov	r0, fp
   12b1c:	f000 fe98 	bl	13850 <__clzsi2>
   12b20:	0003      	movs	r3, r0
   12b22:	3b0b      	subs	r3, #11
   12b24:	2b1c      	cmp	r3, #28
   12b26:	dd00      	ble.n	12b2a <__aeabi_dmul+0x11a>
   12b28:	e17a      	b.n	12e20 <__aeabi_dmul+0x410>
   12b2a:	221d      	movs	r2, #29
   12b2c:	1ad3      	subs	r3, r2, r3
   12b2e:	003a      	movs	r2, r7
   12b30:	0001      	movs	r1, r0
   12b32:	465c      	mov	r4, fp
   12b34:	40da      	lsrs	r2, r3
   12b36:	3908      	subs	r1, #8
   12b38:	408c      	lsls	r4, r1
   12b3a:	0013      	movs	r3, r2
   12b3c:	408f      	lsls	r7, r1
   12b3e:	4323      	orrs	r3, r4
   12b40:	469b      	mov	fp, r3
   12b42:	46b9      	mov	r9, r7
   12b44:	2300      	movs	r3, #0
   12b46:	4e2d      	ldr	r6, [pc, #180]	; (12bfc <__aeabi_dmul+0x1ec>)
   12b48:	2700      	movs	r7, #0
   12b4a:	1a36      	subs	r6, r6, r0
   12b4c:	9302      	str	r3, [sp, #8]
   12b4e:	e784      	b.n	12a5a <__aeabi_dmul+0x4a>
   12b50:	4653      	mov	r3, sl
   12b52:	4323      	orrs	r3, r4
   12b54:	d12a      	bne.n	12bac <__aeabi_dmul+0x19c>
   12b56:	2400      	movs	r4, #0
   12b58:	2002      	movs	r0, #2
   12b5a:	e796      	b.n	12a8a <__aeabi_dmul+0x7a>
   12b5c:	4653      	mov	r3, sl
   12b5e:	4323      	orrs	r3, r4
   12b60:	d020      	beq.n	12ba4 <__aeabi_dmul+0x194>
   12b62:	2c00      	cmp	r4, #0
   12b64:	d100      	bne.n	12b68 <__aeabi_dmul+0x158>
   12b66:	e157      	b.n	12e18 <__aeabi_dmul+0x408>
   12b68:	0020      	movs	r0, r4
   12b6a:	f000 fe71 	bl	13850 <__clzsi2>
   12b6e:	0003      	movs	r3, r0
   12b70:	3b0b      	subs	r3, #11
   12b72:	2b1c      	cmp	r3, #28
   12b74:	dd00      	ble.n	12b78 <__aeabi_dmul+0x168>
   12b76:	e149      	b.n	12e0c <__aeabi_dmul+0x3fc>
   12b78:	211d      	movs	r1, #29
   12b7a:	1acb      	subs	r3, r1, r3
   12b7c:	4651      	mov	r1, sl
   12b7e:	0002      	movs	r2, r0
   12b80:	40d9      	lsrs	r1, r3
   12b82:	4653      	mov	r3, sl
   12b84:	3a08      	subs	r2, #8
   12b86:	4094      	lsls	r4, r2
   12b88:	4093      	lsls	r3, r2
   12b8a:	430c      	orrs	r4, r1
   12b8c:	4a1b      	ldr	r2, [pc, #108]	; (12bfc <__aeabi_dmul+0x1ec>)
   12b8e:	1a12      	subs	r2, r2, r0
   12b90:	2000      	movs	r0, #0
   12b92:	e77a      	b.n	12a8a <__aeabi_dmul+0x7a>
   12b94:	2501      	movs	r5, #1
   12b96:	9b01      	ldr	r3, [sp, #4]
   12b98:	4c14      	ldr	r4, [pc, #80]	; (12bec <__aeabi_dmul+0x1dc>)
   12b9a:	401d      	ands	r5, r3
   12b9c:	2300      	movs	r3, #0
   12b9e:	2200      	movs	r2, #0
   12ba0:	4699      	mov	r9, r3
   12ba2:	e79c      	b.n	12ade <__aeabi_dmul+0xce>
   12ba4:	2400      	movs	r4, #0
   12ba6:	2200      	movs	r2, #0
   12ba8:	2001      	movs	r0, #1
   12baa:	e76e      	b.n	12a8a <__aeabi_dmul+0x7a>
   12bac:	4653      	mov	r3, sl
   12bae:	2003      	movs	r0, #3
   12bb0:	e76b      	b.n	12a8a <__aeabi_dmul+0x7a>
   12bb2:	2300      	movs	r3, #0
   12bb4:	469b      	mov	fp, r3
   12bb6:	3301      	adds	r3, #1
   12bb8:	2704      	movs	r7, #4
   12bba:	2600      	movs	r6, #0
   12bbc:	9302      	str	r3, [sp, #8]
   12bbe:	e74c      	b.n	12a5a <__aeabi_dmul+0x4a>
   12bc0:	2303      	movs	r3, #3
   12bc2:	4681      	mov	r9, r0
   12bc4:	270c      	movs	r7, #12
   12bc6:	9302      	str	r3, [sp, #8]
   12bc8:	e747      	b.n	12a5a <__aeabi_dmul+0x4a>
   12bca:	2280      	movs	r2, #128	; 0x80
   12bcc:	2300      	movs	r3, #0
   12bce:	2500      	movs	r5, #0
   12bd0:	0312      	lsls	r2, r2, #12
   12bd2:	4699      	mov	r9, r3
   12bd4:	4c05      	ldr	r4, [pc, #20]	; (12bec <__aeabi_dmul+0x1dc>)
   12bd6:	e782      	b.n	12ade <__aeabi_dmul+0xce>
   12bd8:	465c      	mov	r4, fp
   12bda:	464b      	mov	r3, r9
   12bdc:	9802      	ldr	r0, [sp, #8]
   12bde:	e76f      	b.n	12ac0 <__aeabi_dmul+0xb0>
   12be0:	465c      	mov	r4, fp
   12be2:	464b      	mov	r3, r9
   12be4:	9501      	str	r5, [sp, #4]
   12be6:	9802      	ldr	r0, [sp, #8]
   12be8:	e76a      	b.n	12ac0 <__aeabi_dmul+0xb0>
   12bea:	46c0      	nop			; (mov r8, r8)
   12bec:	000007ff 	.word	0x000007ff
   12bf0:	fffffc01 	.word	0xfffffc01
   12bf4:	0001af84 	.word	0x0001af84
   12bf8:	800fffff 	.word	0x800fffff
   12bfc:	fffffc0d 	.word	0xfffffc0d
   12c00:	464a      	mov	r2, r9
   12c02:	4649      	mov	r1, r9
   12c04:	0c17      	lsrs	r7, r2, #16
   12c06:	0c1a      	lsrs	r2, r3, #16
   12c08:	041b      	lsls	r3, r3, #16
   12c0a:	0c1b      	lsrs	r3, r3, #16
   12c0c:	0408      	lsls	r0, r1, #16
   12c0e:	0019      	movs	r1, r3
   12c10:	0c00      	lsrs	r0, r0, #16
   12c12:	4341      	muls	r1, r0
   12c14:	0015      	movs	r5, r2
   12c16:	4688      	mov	r8, r1
   12c18:	0019      	movs	r1, r3
   12c1a:	437d      	muls	r5, r7
   12c1c:	4379      	muls	r1, r7
   12c1e:	9503      	str	r5, [sp, #12]
   12c20:	4689      	mov	r9, r1
   12c22:	0029      	movs	r1, r5
   12c24:	0015      	movs	r5, r2
   12c26:	4345      	muls	r5, r0
   12c28:	444d      	add	r5, r9
   12c2a:	9502      	str	r5, [sp, #8]
   12c2c:	4645      	mov	r5, r8
   12c2e:	0c2d      	lsrs	r5, r5, #16
   12c30:	46aa      	mov	sl, r5
   12c32:	9d02      	ldr	r5, [sp, #8]
   12c34:	4455      	add	r5, sl
   12c36:	45a9      	cmp	r9, r5
   12c38:	d906      	bls.n	12c48 <__aeabi_dmul+0x238>
   12c3a:	468a      	mov	sl, r1
   12c3c:	2180      	movs	r1, #128	; 0x80
   12c3e:	0249      	lsls	r1, r1, #9
   12c40:	4689      	mov	r9, r1
   12c42:	44ca      	add	sl, r9
   12c44:	4651      	mov	r1, sl
   12c46:	9103      	str	r1, [sp, #12]
   12c48:	0c29      	lsrs	r1, r5, #16
   12c4a:	9104      	str	r1, [sp, #16]
   12c4c:	4641      	mov	r1, r8
   12c4e:	0409      	lsls	r1, r1, #16
   12c50:	042d      	lsls	r5, r5, #16
   12c52:	0c09      	lsrs	r1, r1, #16
   12c54:	4688      	mov	r8, r1
   12c56:	0029      	movs	r1, r5
   12c58:	0c25      	lsrs	r5, r4, #16
   12c5a:	0424      	lsls	r4, r4, #16
   12c5c:	4441      	add	r1, r8
   12c5e:	0c24      	lsrs	r4, r4, #16
   12c60:	9105      	str	r1, [sp, #20]
   12c62:	0021      	movs	r1, r4
   12c64:	4341      	muls	r1, r0
   12c66:	4688      	mov	r8, r1
   12c68:	0021      	movs	r1, r4
   12c6a:	4379      	muls	r1, r7
   12c6c:	468a      	mov	sl, r1
   12c6e:	4368      	muls	r0, r5
   12c70:	4641      	mov	r1, r8
   12c72:	4450      	add	r0, sl
   12c74:	4681      	mov	r9, r0
   12c76:	0c08      	lsrs	r0, r1, #16
   12c78:	4448      	add	r0, r9
   12c7a:	436f      	muls	r7, r5
   12c7c:	4582      	cmp	sl, r0
   12c7e:	d903      	bls.n	12c88 <__aeabi_dmul+0x278>
   12c80:	2180      	movs	r1, #128	; 0x80
   12c82:	0249      	lsls	r1, r1, #9
   12c84:	4689      	mov	r9, r1
   12c86:	444f      	add	r7, r9
   12c88:	0c01      	lsrs	r1, r0, #16
   12c8a:	4689      	mov	r9, r1
   12c8c:	0039      	movs	r1, r7
   12c8e:	4449      	add	r1, r9
   12c90:	9102      	str	r1, [sp, #8]
   12c92:	4641      	mov	r1, r8
   12c94:	040f      	lsls	r7, r1, #16
   12c96:	9904      	ldr	r1, [sp, #16]
   12c98:	0c3f      	lsrs	r7, r7, #16
   12c9a:	4688      	mov	r8, r1
   12c9c:	0400      	lsls	r0, r0, #16
   12c9e:	19c0      	adds	r0, r0, r7
   12ca0:	4480      	add	r8, r0
   12ca2:	4641      	mov	r1, r8
   12ca4:	9104      	str	r1, [sp, #16]
   12ca6:	4659      	mov	r1, fp
   12ca8:	0c0f      	lsrs	r7, r1, #16
   12caa:	0409      	lsls	r1, r1, #16
   12cac:	0c09      	lsrs	r1, r1, #16
   12cae:	4688      	mov	r8, r1
   12cb0:	4359      	muls	r1, r3
   12cb2:	468a      	mov	sl, r1
   12cb4:	0039      	movs	r1, r7
   12cb6:	4351      	muls	r1, r2
   12cb8:	4689      	mov	r9, r1
   12cba:	4641      	mov	r1, r8
   12cbc:	434a      	muls	r2, r1
   12cbe:	4651      	mov	r1, sl
   12cc0:	0c09      	lsrs	r1, r1, #16
   12cc2:	468b      	mov	fp, r1
   12cc4:	437b      	muls	r3, r7
   12cc6:	18d2      	adds	r2, r2, r3
   12cc8:	445a      	add	r2, fp
   12cca:	4293      	cmp	r3, r2
   12ccc:	d903      	bls.n	12cd6 <__aeabi_dmul+0x2c6>
   12cce:	2380      	movs	r3, #128	; 0x80
   12cd0:	025b      	lsls	r3, r3, #9
   12cd2:	469b      	mov	fp, r3
   12cd4:	44d9      	add	r9, fp
   12cd6:	4651      	mov	r1, sl
   12cd8:	0409      	lsls	r1, r1, #16
   12cda:	0c09      	lsrs	r1, r1, #16
   12cdc:	468a      	mov	sl, r1
   12cde:	4641      	mov	r1, r8
   12ce0:	4361      	muls	r1, r4
   12ce2:	437c      	muls	r4, r7
   12ce4:	0c13      	lsrs	r3, r2, #16
   12ce6:	0412      	lsls	r2, r2, #16
   12ce8:	444b      	add	r3, r9
   12cea:	4452      	add	r2, sl
   12cec:	46a1      	mov	r9, r4
   12cee:	468a      	mov	sl, r1
   12cf0:	003c      	movs	r4, r7
   12cf2:	4641      	mov	r1, r8
   12cf4:	436c      	muls	r4, r5
   12cf6:	434d      	muls	r5, r1
   12cf8:	4651      	mov	r1, sl
   12cfa:	444d      	add	r5, r9
   12cfc:	0c0f      	lsrs	r7, r1, #16
   12cfe:	197d      	adds	r5, r7, r5
   12d00:	45a9      	cmp	r9, r5
   12d02:	d903      	bls.n	12d0c <__aeabi_dmul+0x2fc>
   12d04:	2180      	movs	r1, #128	; 0x80
   12d06:	0249      	lsls	r1, r1, #9
   12d08:	4688      	mov	r8, r1
   12d0a:	4444      	add	r4, r8
   12d0c:	9f04      	ldr	r7, [sp, #16]
   12d0e:	9903      	ldr	r1, [sp, #12]
   12d10:	46b8      	mov	r8, r7
   12d12:	4441      	add	r1, r8
   12d14:	468b      	mov	fp, r1
   12d16:	4583      	cmp	fp, r0
   12d18:	4180      	sbcs	r0, r0
   12d1a:	4241      	negs	r1, r0
   12d1c:	4688      	mov	r8, r1
   12d1e:	4651      	mov	r1, sl
   12d20:	0408      	lsls	r0, r1, #16
   12d22:	042f      	lsls	r7, r5, #16
   12d24:	0c00      	lsrs	r0, r0, #16
   12d26:	183f      	adds	r7, r7, r0
   12d28:	4658      	mov	r0, fp
   12d2a:	9902      	ldr	r1, [sp, #8]
   12d2c:	1810      	adds	r0, r2, r0
   12d2e:	4689      	mov	r9, r1
   12d30:	4290      	cmp	r0, r2
   12d32:	4192      	sbcs	r2, r2
   12d34:	444f      	add	r7, r9
   12d36:	46ba      	mov	sl, r7
   12d38:	4252      	negs	r2, r2
   12d3a:	4699      	mov	r9, r3
   12d3c:	4693      	mov	fp, r2
   12d3e:	44c2      	add	sl, r8
   12d40:	44d1      	add	r9, sl
   12d42:	44cb      	add	fp, r9
   12d44:	428f      	cmp	r7, r1
   12d46:	41bf      	sbcs	r7, r7
   12d48:	45c2      	cmp	sl, r8
   12d4a:	4189      	sbcs	r1, r1
   12d4c:	4599      	cmp	r9, r3
   12d4e:	419b      	sbcs	r3, r3
   12d50:	4593      	cmp	fp, r2
   12d52:	4192      	sbcs	r2, r2
   12d54:	427f      	negs	r7, r7
   12d56:	4249      	negs	r1, r1
   12d58:	0c2d      	lsrs	r5, r5, #16
   12d5a:	4252      	negs	r2, r2
   12d5c:	430f      	orrs	r7, r1
   12d5e:	425b      	negs	r3, r3
   12d60:	4313      	orrs	r3, r2
   12d62:	197f      	adds	r7, r7, r5
   12d64:	18ff      	adds	r7, r7, r3
   12d66:	465b      	mov	r3, fp
   12d68:	193c      	adds	r4, r7, r4
   12d6a:	0ddb      	lsrs	r3, r3, #23
   12d6c:	9a05      	ldr	r2, [sp, #20]
   12d6e:	0264      	lsls	r4, r4, #9
   12d70:	431c      	orrs	r4, r3
   12d72:	0243      	lsls	r3, r0, #9
   12d74:	4313      	orrs	r3, r2
   12d76:	1e5d      	subs	r5, r3, #1
   12d78:	41ab      	sbcs	r3, r5
   12d7a:	465a      	mov	r2, fp
   12d7c:	0dc0      	lsrs	r0, r0, #23
   12d7e:	4303      	orrs	r3, r0
   12d80:	0252      	lsls	r2, r2, #9
   12d82:	4313      	orrs	r3, r2
   12d84:	01e2      	lsls	r2, r4, #7
   12d86:	d556      	bpl.n	12e36 <__aeabi_dmul+0x426>
   12d88:	2001      	movs	r0, #1
   12d8a:	085a      	lsrs	r2, r3, #1
   12d8c:	4003      	ands	r3, r0
   12d8e:	4313      	orrs	r3, r2
   12d90:	07e2      	lsls	r2, r4, #31
   12d92:	4313      	orrs	r3, r2
   12d94:	0864      	lsrs	r4, r4, #1
   12d96:	485a      	ldr	r0, [pc, #360]	; (12f00 <__aeabi_dmul+0x4f0>)
   12d98:	4460      	add	r0, ip
   12d9a:	2800      	cmp	r0, #0
   12d9c:	dd4d      	ble.n	12e3a <__aeabi_dmul+0x42a>
   12d9e:	075a      	lsls	r2, r3, #29
   12da0:	d009      	beq.n	12db6 <__aeabi_dmul+0x3a6>
   12da2:	220f      	movs	r2, #15
   12da4:	401a      	ands	r2, r3
   12da6:	2a04      	cmp	r2, #4
   12da8:	d005      	beq.n	12db6 <__aeabi_dmul+0x3a6>
   12daa:	1d1a      	adds	r2, r3, #4
   12dac:	429a      	cmp	r2, r3
   12dae:	419b      	sbcs	r3, r3
   12db0:	425b      	negs	r3, r3
   12db2:	18e4      	adds	r4, r4, r3
   12db4:	0013      	movs	r3, r2
   12db6:	01e2      	lsls	r2, r4, #7
   12db8:	d504      	bpl.n	12dc4 <__aeabi_dmul+0x3b4>
   12dba:	2080      	movs	r0, #128	; 0x80
   12dbc:	4a51      	ldr	r2, [pc, #324]	; (12f04 <__aeabi_dmul+0x4f4>)
   12dbe:	00c0      	lsls	r0, r0, #3
   12dc0:	4014      	ands	r4, r2
   12dc2:	4460      	add	r0, ip
   12dc4:	4a50      	ldr	r2, [pc, #320]	; (12f08 <__aeabi_dmul+0x4f8>)
   12dc6:	4290      	cmp	r0, r2
   12dc8:	dd00      	ble.n	12dcc <__aeabi_dmul+0x3bc>
   12dca:	e6e3      	b.n	12b94 <__aeabi_dmul+0x184>
   12dcc:	2501      	movs	r5, #1
   12dce:	08db      	lsrs	r3, r3, #3
   12dd0:	0762      	lsls	r2, r4, #29
   12dd2:	431a      	orrs	r2, r3
   12dd4:	0264      	lsls	r4, r4, #9
   12dd6:	9b01      	ldr	r3, [sp, #4]
   12dd8:	4691      	mov	r9, r2
   12dda:	0b22      	lsrs	r2, r4, #12
   12ddc:	0544      	lsls	r4, r0, #21
   12dde:	0d64      	lsrs	r4, r4, #21
   12de0:	401d      	ands	r5, r3
   12de2:	e67c      	b.n	12ade <__aeabi_dmul+0xce>
   12de4:	2280      	movs	r2, #128	; 0x80
   12de6:	4659      	mov	r1, fp
   12de8:	0312      	lsls	r2, r2, #12
   12dea:	4211      	tst	r1, r2
   12dec:	d008      	beq.n	12e00 <__aeabi_dmul+0x3f0>
   12dee:	4214      	tst	r4, r2
   12df0:	d106      	bne.n	12e00 <__aeabi_dmul+0x3f0>
   12df2:	4322      	orrs	r2, r4
   12df4:	0312      	lsls	r2, r2, #12
   12df6:	0b12      	lsrs	r2, r2, #12
   12df8:	4645      	mov	r5, r8
   12dfa:	4699      	mov	r9, r3
   12dfc:	4c43      	ldr	r4, [pc, #268]	; (12f0c <__aeabi_dmul+0x4fc>)
   12dfe:	e66e      	b.n	12ade <__aeabi_dmul+0xce>
   12e00:	465b      	mov	r3, fp
   12e02:	431a      	orrs	r2, r3
   12e04:	0312      	lsls	r2, r2, #12
   12e06:	0b12      	lsrs	r2, r2, #12
   12e08:	4c40      	ldr	r4, [pc, #256]	; (12f0c <__aeabi_dmul+0x4fc>)
   12e0a:	e668      	b.n	12ade <__aeabi_dmul+0xce>
   12e0c:	0003      	movs	r3, r0
   12e0e:	4654      	mov	r4, sl
   12e10:	3b28      	subs	r3, #40	; 0x28
   12e12:	409c      	lsls	r4, r3
   12e14:	2300      	movs	r3, #0
   12e16:	e6b9      	b.n	12b8c <__aeabi_dmul+0x17c>
   12e18:	f000 fd1a 	bl	13850 <__clzsi2>
   12e1c:	3020      	adds	r0, #32
   12e1e:	e6a6      	b.n	12b6e <__aeabi_dmul+0x15e>
   12e20:	0003      	movs	r3, r0
   12e22:	3b28      	subs	r3, #40	; 0x28
   12e24:	409f      	lsls	r7, r3
   12e26:	2300      	movs	r3, #0
   12e28:	46bb      	mov	fp, r7
   12e2a:	4699      	mov	r9, r3
   12e2c:	e68a      	b.n	12b44 <__aeabi_dmul+0x134>
   12e2e:	f000 fd0f 	bl	13850 <__clzsi2>
   12e32:	3020      	adds	r0, #32
   12e34:	e674      	b.n	12b20 <__aeabi_dmul+0x110>
   12e36:	46b4      	mov	ip, r6
   12e38:	e7ad      	b.n	12d96 <__aeabi_dmul+0x386>
   12e3a:	2501      	movs	r5, #1
   12e3c:	1a2a      	subs	r2, r5, r0
   12e3e:	2a38      	cmp	r2, #56	; 0x38
   12e40:	dd06      	ble.n	12e50 <__aeabi_dmul+0x440>
   12e42:	9b01      	ldr	r3, [sp, #4]
   12e44:	2400      	movs	r4, #0
   12e46:	401d      	ands	r5, r3
   12e48:	2300      	movs	r3, #0
   12e4a:	2200      	movs	r2, #0
   12e4c:	4699      	mov	r9, r3
   12e4e:	e646      	b.n	12ade <__aeabi_dmul+0xce>
   12e50:	2a1f      	cmp	r2, #31
   12e52:	dc21      	bgt.n	12e98 <__aeabi_dmul+0x488>
   12e54:	2520      	movs	r5, #32
   12e56:	0020      	movs	r0, r4
   12e58:	1aad      	subs	r5, r5, r2
   12e5a:	001e      	movs	r6, r3
   12e5c:	40ab      	lsls	r3, r5
   12e5e:	40a8      	lsls	r0, r5
   12e60:	40d6      	lsrs	r6, r2
   12e62:	1e5d      	subs	r5, r3, #1
   12e64:	41ab      	sbcs	r3, r5
   12e66:	4330      	orrs	r0, r6
   12e68:	4318      	orrs	r0, r3
   12e6a:	40d4      	lsrs	r4, r2
   12e6c:	0743      	lsls	r3, r0, #29
   12e6e:	d009      	beq.n	12e84 <__aeabi_dmul+0x474>
   12e70:	230f      	movs	r3, #15
   12e72:	4003      	ands	r3, r0
   12e74:	2b04      	cmp	r3, #4
   12e76:	d005      	beq.n	12e84 <__aeabi_dmul+0x474>
   12e78:	0003      	movs	r3, r0
   12e7a:	1d18      	adds	r0, r3, #4
   12e7c:	4298      	cmp	r0, r3
   12e7e:	419b      	sbcs	r3, r3
   12e80:	425b      	negs	r3, r3
   12e82:	18e4      	adds	r4, r4, r3
   12e84:	0223      	lsls	r3, r4, #8
   12e86:	d521      	bpl.n	12ecc <__aeabi_dmul+0x4bc>
   12e88:	2501      	movs	r5, #1
   12e8a:	9b01      	ldr	r3, [sp, #4]
   12e8c:	2401      	movs	r4, #1
   12e8e:	401d      	ands	r5, r3
   12e90:	2300      	movs	r3, #0
   12e92:	2200      	movs	r2, #0
   12e94:	4699      	mov	r9, r3
   12e96:	e622      	b.n	12ade <__aeabi_dmul+0xce>
   12e98:	251f      	movs	r5, #31
   12e9a:	0021      	movs	r1, r4
   12e9c:	426d      	negs	r5, r5
   12e9e:	1a28      	subs	r0, r5, r0
   12ea0:	40c1      	lsrs	r1, r0
   12ea2:	0008      	movs	r0, r1
   12ea4:	2a20      	cmp	r2, #32
   12ea6:	d01d      	beq.n	12ee4 <__aeabi_dmul+0x4d4>
   12ea8:	355f      	adds	r5, #95	; 0x5f
   12eaa:	1aaa      	subs	r2, r5, r2
   12eac:	4094      	lsls	r4, r2
   12eae:	4323      	orrs	r3, r4
   12eb0:	1e5c      	subs	r4, r3, #1
   12eb2:	41a3      	sbcs	r3, r4
   12eb4:	2507      	movs	r5, #7
   12eb6:	4303      	orrs	r3, r0
   12eb8:	401d      	ands	r5, r3
   12eba:	2200      	movs	r2, #0
   12ebc:	2d00      	cmp	r5, #0
   12ebe:	d009      	beq.n	12ed4 <__aeabi_dmul+0x4c4>
   12ec0:	220f      	movs	r2, #15
   12ec2:	2400      	movs	r4, #0
   12ec4:	401a      	ands	r2, r3
   12ec6:	0018      	movs	r0, r3
   12ec8:	2a04      	cmp	r2, #4
   12eca:	d1d6      	bne.n	12e7a <__aeabi_dmul+0x46a>
   12ecc:	0003      	movs	r3, r0
   12ece:	0765      	lsls	r5, r4, #29
   12ed0:	0264      	lsls	r4, r4, #9
   12ed2:	0b22      	lsrs	r2, r4, #12
   12ed4:	08db      	lsrs	r3, r3, #3
   12ed6:	432b      	orrs	r3, r5
   12ed8:	2501      	movs	r5, #1
   12eda:	4699      	mov	r9, r3
   12edc:	9b01      	ldr	r3, [sp, #4]
   12ede:	2400      	movs	r4, #0
   12ee0:	401d      	ands	r5, r3
   12ee2:	e5fc      	b.n	12ade <__aeabi_dmul+0xce>
   12ee4:	2400      	movs	r4, #0
   12ee6:	e7e2      	b.n	12eae <__aeabi_dmul+0x49e>
   12ee8:	2280      	movs	r2, #128	; 0x80
   12eea:	2501      	movs	r5, #1
   12eec:	0312      	lsls	r2, r2, #12
   12eee:	4322      	orrs	r2, r4
   12ef0:	9901      	ldr	r1, [sp, #4]
   12ef2:	0312      	lsls	r2, r2, #12
   12ef4:	0b12      	lsrs	r2, r2, #12
   12ef6:	400d      	ands	r5, r1
   12ef8:	4699      	mov	r9, r3
   12efa:	4c04      	ldr	r4, [pc, #16]	; (12f0c <__aeabi_dmul+0x4fc>)
   12efc:	e5ef      	b.n	12ade <__aeabi_dmul+0xce>
   12efe:	46c0      	nop			; (mov r8, r8)
   12f00:	000003ff 	.word	0x000003ff
   12f04:	feffffff 	.word	0xfeffffff
   12f08:	000007fe 	.word	0x000007fe
   12f0c:	000007ff 	.word	0x000007ff

00012f10 <__aeabi_dsub>:
   12f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f12:	4646      	mov	r6, r8
   12f14:	46d6      	mov	lr, sl
   12f16:	464f      	mov	r7, r9
   12f18:	030c      	lsls	r4, r1, #12
   12f1a:	b5c0      	push	{r6, r7, lr}
   12f1c:	0fcd      	lsrs	r5, r1, #31
   12f1e:	004e      	lsls	r6, r1, #1
   12f20:	0a61      	lsrs	r1, r4, #9
   12f22:	0f44      	lsrs	r4, r0, #29
   12f24:	430c      	orrs	r4, r1
   12f26:	00c1      	lsls	r1, r0, #3
   12f28:	0058      	lsls	r0, r3, #1
   12f2a:	0d40      	lsrs	r0, r0, #21
   12f2c:	4684      	mov	ip, r0
   12f2e:	468a      	mov	sl, r1
   12f30:	000f      	movs	r7, r1
   12f32:	0319      	lsls	r1, r3, #12
   12f34:	0f50      	lsrs	r0, r2, #29
   12f36:	0a49      	lsrs	r1, r1, #9
   12f38:	4301      	orrs	r1, r0
   12f3a:	48c6      	ldr	r0, [pc, #792]	; (13254 <__aeabi_dsub+0x344>)
   12f3c:	0d76      	lsrs	r6, r6, #21
   12f3e:	46a8      	mov	r8, r5
   12f40:	0fdb      	lsrs	r3, r3, #31
   12f42:	00d2      	lsls	r2, r2, #3
   12f44:	4584      	cmp	ip, r0
   12f46:	d100      	bne.n	12f4a <__aeabi_dsub+0x3a>
   12f48:	e0d8      	b.n	130fc <__aeabi_dsub+0x1ec>
   12f4a:	2001      	movs	r0, #1
   12f4c:	4043      	eors	r3, r0
   12f4e:	42ab      	cmp	r3, r5
   12f50:	d100      	bne.n	12f54 <__aeabi_dsub+0x44>
   12f52:	e0a6      	b.n	130a2 <__aeabi_dsub+0x192>
   12f54:	4660      	mov	r0, ip
   12f56:	1a35      	subs	r5, r6, r0
   12f58:	2d00      	cmp	r5, #0
   12f5a:	dc00      	bgt.n	12f5e <__aeabi_dsub+0x4e>
   12f5c:	e105      	b.n	1316a <__aeabi_dsub+0x25a>
   12f5e:	2800      	cmp	r0, #0
   12f60:	d110      	bne.n	12f84 <__aeabi_dsub+0x74>
   12f62:	000b      	movs	r3, r1
   12f64:	4313      	orrs	r3, r2
   12f66:	d100      	bne.n	12f6a <__aeabi_dsub+0x5a>
   12f68:	e0d7      	b.n	1311a <__aeabi_dsub+0x20a>
   12f6a:	1e6b      	subs	r3, r5, #1
   12f6c:	2b00      	cmp	r3, #0
   12f6e:	d000      	beq.n	12f72 <__aeabi_dsub+0x62>
   12f70:	e14b      	b.n	1320a <__aeabi_dsub+0x2fa>
   12f72:	4653      	mov	r3, sl
   12f74:	1a9f      	subs	r7, r3, r2
   12f76:	45ba      	cmp	sl, r7
   12f78:	4180      	sbcs	r0, r0
   12f7a:	1a64      	subs	r4, r4, r1
   12f7c:	4240      	negs	r0, r0
   12f7e:	1a24      	subs	r4, r4, r0
   12f80:	2601      	movs	r6, #1
   12f82:	e01e      	b.n	12fc2 <__aeabi_dsub+0xb2>
   12f84:	4bb3      	ldr	r3, [pc, #716]	; (13254 <__aeabi_dsub+0x344>)
   12f86:	429e      	cmp	r6, r3
   12f88:	d048      	beq.n	1301c <__aeabi_dsub+0x10c>
   12f8a:	2380      	movs	r3, #128	; 0x80
   12f8c:	041b      	lsls	r3, r3, #16
   12f8e:	4319      	orrs	r1, r3
   12f90:	2d38      	cmp	r5, #56	; 0x38
   12f92:	dd00      	ble.n	12f96 <__aeabi_dsub+0x86>
   12f94:	e119      	b.n	131ca <__aeabi_dsub+0x2ba>
   12f96:	2d1f      	cmp	r5, #31
   12f98:	dd00      	ble.n	12f9c <__aeabi_dsub+0x8c>
   12f9a:	e14c      	b.n	13236 <__aeabi_dsub+0x326>
   12f9c:	2320      	movs	r3, #32
   12f9e:	000f      	movs	r7, r1
   12fa0:	1b5b      	subs	r3, r3, r5
   12fa2:	0010      	movs	r0, r2
   12fa4:	409a      	lsls	r2, r3
   12fa6:	409f      	lsls	r7, r3
   12fa8:	40e8      	lsrs	r0, r5
   12faa:	1e53      	subs	r3, r2, #1
   12fac:	419a      	sbcs	r2, r3
   12fae:	40e9      	lsrs	r1, r5
   12fb0:	4307      	orrs	r7, r0
   12fb2:	4317      	orrs	r7, r2
   12fb4:	4653      	mov	r3, sl
   12fb6:	1bdf      	subs	r7, r3, r7
   12fb8:	1a61      	subs	r1, r4, r1
   12fba:	45ba      	cmp	sl, r7
   12fbc:	41a4      	sbcs	r4, r4
   12fbe:	4264      	negs	r4, r4
   12fc0:	1b0c      	subs	r4, r1, r4
   12fc2:	0223      	lsls	r3, r4, #8
   12fc4:	d400      	bmi.n	12fc8 <__aeabi_dsub+0xb8>
   12fc6:	e0c5      	b.n	13154 <__aeabi_dsub+0x244>
   12fc8:	0264      	lsls	r4, r4, #9
   12fca:	0a65      	lsrs	r5, r4, #9
   12fcc:	2d00      	cmp	r5, #0
   12fce:	d100      	bne.n	12fd2 <__aeabi_dsub+0xc2>
   12fd0:	e0f6      	b.n	131c0 <__aeabi_dsub+0x2b0>
   12fd2:	0028      	movs	r0, r5
   12fd4:	f000 fc3c 	bl	13850 <__clzsi2>
   12fd8:	0003      	movs	r3, r0
   12fda:	3b08      	subs	r3, #8
   12fdc:	2b1f      	cmp	r3, #31
   12fde:	dd00      	ble.n	12fe2 <__aeabi_dsub+0xd2>
   12fe0:	e0e9      	b.n	131b6 <__aeabi_dsub+0x2a6>
   12fe2:	2220      	movs	r2, #32
   12fe4:	003c      	movs	r4, r7
   12fe6:	1ad2      	subs	r2, r2, r3
   12fe8:	409d      	lsls	r5, r3
   12fea:	40d4      	lsrs	r4, r2
   12fec:	409f      	lsls	r7, r3
   12fee:	4325      	orrs	r5, r4
   12ff0:	429e      	cmp	r6, r3
   12ff2:	dd00      	ble.n	12ff6 <__aeabi_dsub+0xe6>
   12ff4:	e0db      	b.n	131ae <__aeabi_dsub+0x29e>
   12ff6:	1b9e      	subs	r6, r3, r6
   12ff8:	1c73      	adds	r3, r6, #1
   12ffa:	2b1f      	cmp	r3, #31
   12ffc:	dd00      	ble.n	13000 <__aeabi_dsub+0xf0>
   12ffe:	e10a      	b.n	13216 <__aeabi_dsub+0x306>
   13000:	2220      	movs	r2, #32
   13002:	0038      	movs	r0, r7
   13004:	1ad2      	subs	r2, r2, r3
   13006:	0029      	movs	r1, r5
   13008:	4097      	lsls	r7, r2
   1300a:	002c      	movs	r4, r5
   1300c:	4091      	lsls	r1, r2
   1300e:	40d8      	lsrs	r0, r3
   13010:	1e7a      	subs	r2, r7, #1
   13012:	4197      	sbcs	r7, r2
   13014:	40dc      	lsrs	r4, r3
   13016:	2600      	movs	r6, #0
   13018:	4301      	orrs	r1, r0
   1301a:	430f      	orrs	r7, r1
   1301c:	077b      	lsls	r3, r7, #29
   1301e:	d009      	beq.n	13034 <__aeabi_dsub+0x124>
   13020:	230f      	movs	r3, #15
   13022:	403b      	ands	r3, r7
   13024:	2b04      	cmp	r3, #4
   13026:	d005      	beq.n	13034 <__aeabi_dsub+0x124>
   13028:	1d3b      	adds	r3, r7, #4
   1302a:	42bb      	cmp	r3, r7
   1302c:	41bf      	sbcs	r7, r7
   1302e:	427f      	negs	r7, r7
   13030:	19e4      	adds	r4, r4, r7
   13032:	001f      	movs	r7, r3
   13034:	0223      	lsls	r3, r4, #8
   13036:	d525      	bpl.n	13084 <__aeabi_dsub+0x174>
   13038:	4b86      	ldr	r3, [pc, #536]	; (13254 <__aeabi_dsub+0x344>)
   1303a:	3601      	adds	r6, #1
   1303c:	429e      	cmp	r6, r3
   1303e:	d100      	bne.n	13042 <__aeabi_dsub+0x132>
   13040:	e0af      	b.n	131a2 <__aeabi_dsub+0x292>
   13042:	4b85      	ldr	r3, [pc, #532]	; (13258 <__aeabi_dsub+0x348>)
   13044:	2501      	movs	r5, #1
   13046:	401c      	ands	r4, r3
   13048:	4643      	mov	r3, r8
   1304a:	0762      	lsls	r2, r4, #29
   1304c:	08ff      	lsrs	r7, r7, #3
   1304e:	0264      	lsls	r4, r4, #9
   13050:	0576      	lsls	r6, r6, #21
   13052:	4317      	orrs	r7, r2
   13054:	0b24      	lsrs	r4, r4, #12
   13056:	0d76      	lsrs	r6, r6, #21
   13058:	401d      	ands	r5, r3
   1305a:	2100      	movs	r1, #0
   1305c:	0324      	lsls	r4, r4, #12
   1305e:	0b23      	lsrs	r3, r4, #12
   13060:	0d0c      	lsrs	r4, r1, #20
   13062:	4a7e      	ldr	r2, [pc, #504]	; (1325c <__aeabi_dsub+0x34c>)
   13064:	0524      	lsls	r4, r4, #20
   13066:	431c      	orrs	r4, r3
   13068:	4014      	ands	r4, r2
   1306a:	0533      	lsls	r3, r6, #20
   1306c:	4323      	orrs	r3, r4
   1306e:	005b      	lsls	r3, r3, #1
   13070:	07ed      	lsls	r5, r5, #31
   13072:	085b      	lsrs	r3, r3, #1
   13074:	432b      	orrs	r3, r5
   13076:	0038      	movs	r0, r7
   13078:	0019      	movs	r1, r3
   1307a:	bc1c      	pop	{r2, r3, r4}
   1307c:	4690      	mov	r8, r2
   1307e:	4699      	mov	r9, r3
   13080:	46a2      	mov	sl, r4
   13082:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13084:	2501      	movs	r5, #1
   13086:	4643      	mov	r3, r8
   13088:	0762      	lsls	r2, r4, #29
   1308a:	08ff      	lsrs	r7, r7, #3
   1308c:	4317      	orrs	r7, r2
   1308e:	08e4      	lsrs	r4, r4, #3
   13090:	401d      	ands	r5, r3
   13092:	4b70      	ldr	r3, [pc, #448]	; (13254 <__aeabi_dsub+0x344>)
   13094:	429e      	cmp	r6, r3
   13096:	d036      	beq.n	13106 <__aeabi_dsub+0x1f6>
   13098:	0324      	lsls	r4, r4, #12
   1309a:	0576      	lsls	r6, r6, #21
   1309c:	0b24      	lsrs	r4, r4, #12
   1309e:	0d76      	lsrs	r6, r6, #21
   130a0:	e7db      	b.n	1305a <__aeabi_dsub+0x14a>
   130a2:	4663      	mov	r3, ip
   130a4:	1af3      	subs	r3, r6, r3
   130a6:	2b00      	cmp	r3, #0
   130a8:	dc00      	bgt.n	130ac <__aeabi_dsub+0x19c>
   130aa:	e094      	b.n	131d6 <__aeabi_dsub+0x2c6>
   130ac:	4660      	mov	r0, ip
   130ae:	2800      	cmp	r0, #0
   130b0:	d035      	beq.n	1311e <__aeabi_dsub+0x20e>
   130b2:	4868      	ldr	r0, [pc, #416]	; (13254 <__aeabi_dsub+0x344>)
   130b4:	4286      	cmp	r6, r0
   130b6:	d0b1      	beq.n	1301c <__aeabi_dsub+0x10c>
   130b8:	2780      	movs	r7, #128	; 0x80
   130ba:	043f      	lsls	r7, r7, #16
   130bc:	4339      	orrs	r1, r7
   130be:	2b38      	cmp	r3, #56	; 0x38
   130c0:	dc00      	bgt.n	130c4 <__aeabi_dsub+0x1b4>
   130c2:	e0fd      	b.n	132c0 <__aeabi_dsub+0x3b0>
   130c4:	430a      	orrs	r2, r1
   130c6:	0017      	movs	r7, r2
   130c8:	2100      	movs	r1, #0
   130ca:	1e7a      	subs	r2, r7, #1
   130cc:	4197      	sbcs	r7, r2
   130ce:	4457      	add	r7, sl
   130d0:	4557      	cmp	r7, sl
   130d2:	4180      	sbcs	r0, r0
   130d4:	1909      	adds	r1, r1, r4
   130d6:	4244      	negs	r4, r0
   130d8:	190c      	adds	r4, r1, r4
   130da:	0223      	lsls	r3, r4, #8
   130dc:	d53a      	bpl.n	13154 <__aeabi_dsub+0x244>
   130de:	4b5d      	ldr	r3, [pc, #372]	; (13254 <__aeabi_dsub+0x344>)
   130e0:	3601      	adds	r6, #1
   130e2:	429e      	cmp	r6, r3
   130e4:	d100      	bne.n	130e8 <__aeabi_dsub+0x1d8>
   130e6:	e14b      	b.n	13380 <__aeabi_dsub+0x470>
   130e8:	2201      	movs	r2, #1
   130ea:	4b5b      	ldr	r3, [pc, #364]	; (13258 <__aeabi_dsub+0x348>)
   130ec:	401c      	ands	r4, r3
   130ee:	087b      	lsrs	r3, r7, #1
   130f0:	4017      	ands	r7, r2
   130f2:	431f      	orrs	r7, r3
   130f4:	07e2      	lsls	r2, r4, #31
   130f6:	4317      	orrs	r7, r2
   130f8:	0864      	lsrs	r4, r4, #1
   130fa:	e78f      	b.n	1301c <__aeabi_dsub+0x10c>
   130fc:	0008      	movs	r0, r1
   130fe:	4310      	orrs	r0, r2
   13100:	d000      	beq.n	13104 <__aeabi_dsub+0x1f4>
   13102:	e724      	b.n	12f4e <__aeabi_dsub+0x3e>
   13104:	e721      	b.n	12f4a <__aeabi_dsub+0x3a>
   13106:	0023      	movs	r3, r4
   13108:	433b      	orrs	r3, r7
   1310a:	d100      	bne.n	1310e <__aeabi_dsub+0x1fe>
   1310c:	e1b9      	b.n	13482 <__aeabi_dsub+0x572>
   1310e:	2280      	movs	r2, #128	; 0x80
   13110:	0312      	lsls	r2, r2, #12
   13112:	4314      	orrs	r4, r2
   13114:	0324      	lsls	r4, r4, #12
   13116:	0b24      	lsrs	r4, r4, #12
   13118:	e79f      	b.n	1305a <__aeabi_dsub+0x14a>
   1311a:	002e      	movs	r6, r5
   1311c:	e77e      	b.n	1301c <__aeabi_dsub+0x10c>
   1311e:	0008      	movs	r0, r1
   13120:	4310      	orrs	r0, r2
   13122:	d100      	bne.n	13126 <__aeabi_dsub+0x216>
   13124:	e0ca      	b.n	132bc <__aeabi_dsub+0x3ac>
   13126:	1e58      	subs	r0, r3, #1
   13128:	4684      	mov	ip, r0
   1312a:	2800      	cmp	r0, #0
   1312c:	d000      	beq.n	13130 <__aeabi_dsub+0x220>
   1312e:	e0e7      	b.n	13300 <__aeabi_dsub+0x3f0>
   13130:	4452      	add	r2, sl
   13132:	4552      	cmp	r2, sl
   13134:	4180      	sbcs	r0, r0
   13136:	1864      	adds	r4, r4, r1
   13138:	4240      	negs	r0, r0
   1313a:	1824      	adds	r4, r4, r0
   1313c:	0017      	movs	r7, r2
   1313e:	2601      	movs	r6, #1
   13140:	0223      	lsls	r3, r4, #8
   13142:	d507      	bpl.n	13154 <__aeabi_dsub+0x244>
   13144:	2602      	movs	r6, #2
   13146:	e7cf      	b.n	130e8 <__aeabi_dsub+0x1d8>
   13148:	4664      	mov	r4, ip
   1314a:	432c      	orrs	r4, r5
   1314c:	d100      	bne.n	13150 <__aeabi_dsub+0x240>
   1314e:	e1b3      	b.n	134b8 <__aeabi_dsub+0x5a8>
   13150:	002c      	movs	r4, r5
   13152:	4667      	mov	r7, ip
   13154:	077b      	lsls	r3, r7, #29
   13156:	d000      	beq.n	1315a <__aeabi_dsub+0x24a>
   13158:	e762      	b.n	13020 <__aeabi_dsub+0x110>
   1315a:	0763      	lsls	r3, r4, #29
   1315c:	08ff      	lsrs	r7, r7, #3
   1315e:	431f      	orrs	r7, r3
   13160:	2501      	movs	r5, #1
   13162:	4643      	mov	r3, r8
   13164:	08e4      	lsrs	r4, r4, #3
   13166:	401d      	ands	r5, r3
   13168:	e793      	b.n	13092 <__aeabi_dsub+0x182>
   1316a:	2d00      	cmp	r5, #0
   1316c:	d178      	bne.n	13260 <__aeabi_dsub+0x350>
   1316e:	1c75      	adds	r5, r6, #1
   13170:	056d      	lsls	r5, r5, #21
   13172:	0d6d      	lsrs	r5, r5, #21
   13174:	2d01      	cmp	r5, #1
   13176:	dc00      	bgt.n	1317a <__aeabi_dsub+0x26a>
   13178:	e0f2      	b.n	13360 <__aeabi_dsub+0x450>
   1317a:	4650      	mov	r0, sl
   1317c:	1a80      	subs	r0, r0, r2
   1317e:	4582      	cmp	sl, r0
   13180:	41bf      	sbcs	r7, r7
   13182:	1a65      	subs	r5, r4, r1
   13184:	427f      	negs	r7, r7
   13186:	1bed      	subs	r5, r5, r7
   13188:	4684      	mov	ip, r0
   1318a:	0228      	lsls	r0, r5, #8
   1318c:	d400      	bmi.n	13190 <__aeabi_dsub+0x280>
   1318e:	e08c      	b.n	132aa <__aeabi_dsub+0x39a>
   13190:	4650      	mov	r0, sl
   13192:	1a17      	subs	r7, r2, r0
   13194:	42ba      	cmp	r2, r7
   13196:	4192      	sbcs	r2, r2
   13198:	1b0c      	subs	r4, r1, r4
   1319a:	4255      	negs	r5, r2
   1319c:	1b65      	subs	r5, r4, r5
   1319e:	4698      	mov	r8, r3
   131a0:	e714      	b.n	12fcc <__aeabi_dsub+0xbc>
   131a2:	2501      	movs	r5, #1
   131a4:	4643      	mov	r3, r8
   131a6:	2400      	movs	r4, #0
   131a8:	401d      	ands	r5, r3
   131aa:	2700      	movs	r7, #0
   131ac:	e755      	b.n	1305a <__aeabi_dsub+0x14a>
   131ae:	4c2a      	ldr	r4, [pc, #168]	; (13258 <__aeabi_dsub+0x348>)
   131b0:	1af6      	subs	r6, r6, r3
   131b2:	402c      	ands	r4, r5
   131b4:	e732      	b.n	1301c <__aeabi_dsub+0x10c>
   131b6:	003d      	movs	r5, r7
   131b8:	3828      	subs	r0, #40	; 0x28
   131ba:	4085      	lsls	r5, r0
   131bc:	2700      	movs	r7, #0
   131be:	e717      	b.n	12ff0 <__aeabi_dsub+0xe0>
   131c0:	0038      	movs	r0, r7
   131c2:	f000 fb45 	bl	13850 <__clzsi2>
   131c6:	3020      	adds	r0, #32
   131c8:	e706      	b.n	12fd8 <__aeabi_dsub+0xc8>
   131ca:	430a      	orrs	r2, r1
   131cc:	0017      	movs	r7, r2
   131ce:	2100      	movs	r1, #0
   131d0:	1e7a      	subs	r2, r7, #1
   131d2:	4197      	sbcs	r7, r2
   131d4:	e6ee      	b.n	12fb4 <__aeabi_dsub+0xa4>
   131d6:	2b00      	cmp	r3, #0
   131d8:	d000      	beq.n	131dc <__aeabi_dsub+0x2cc>
   131da:	e0e5      	b.n	133a8 <__aeabi_dsub+0x498>
   131dc:	1c73      	adds	r3, r6, #1
   131de:	469c      	mov	ip, r3
   131e0:	055b      	lsls	r3, r3, #21
   131e2:	0d5b      	lsrs	r3, r3, #21
   131e4:	2b01      	cmp	r3, #1
   131e6:	dc00      	bgt.n	131ea <__aeabi_dsub+0x2da>
   131e8:	e09f      	b.n	1332a <__aeabi_dsub+0x41a>
   131ea:	4b1a      	ldr	r3, [pc, #104]	; (13254 <__aeabi_dsub+0x344>)
   131ec:	459c      	cmp	ip, r3
   131ee:	d100      	bne.n	131f2 <__aeabi_dsub+0x2e2>
   131f0:	e0c5      	b.n	1337e <__aeabi_dsub+0x46e>
   131f2:	4452      	add	r2, sl
   131f4:	4552      	cmp	r2, sl
   131f6:	4180      	sbcs	r0, r0
   131f8:	1864      	adds	r4, r4, r1
   131fa:	4240      	negs	r0, r0
   131fc:	1824      	adds	r4, r4, r0
   131fe:	07e7      	lsls	r7, r4, #31
   13200:	0852      	lsrs	r2, r2, #1
   13202:	4317      	orrs	r7, r2
   13204:	0864      	lsrs	r4, r4, #1
   13206:	4666      	mov	r6, ip
   13208:	e708      	b.n	1301c <__aeabi_dsub+0x10c>
   1320a:	4812      	ldr	r0, [pc, #72]	; (13254 <__aeabi_dsub+0x344>)
   1320c:	4285      	cmp	r5, r0
   1320e:	d100      	bne.n	13212 <__aeabi_dsub+0x302>
   13210:	e085      	b.n	1331e <__aeabi_dsub+0x40e>
   13212:	001d      	movs	r5, r3
   13214:	e6bc      	b.n	12f90 <__aeabi_dsub+0x80>
   13216:	0029      	movs	r1, r5
   13218:	3e1f      	subs	r6, #31
   1321a:	40f1      	lsrs	r1, r6
   1321c:	2b20      	cmp	r3, #32
   1321e:	d100      	bne.n	13222 <__aeabi_dsub+0x312>
   13220:	e07f      	b.n	13322 <__aeabi_dsub+0x412>
   13222:	2240      	movs	r2, #64	; 0x40
   13224:	1ad3      	subs	r3, r2, r3
   13226:	409d      	lsls	r5, r3
   13228:	432f      	orrs	r7, r5
   1322a:	1e7d      	subs	r5, r7, #1
   1322c:	41af      	sbcs	r7, r5
   1322e:	2400      	movs	r4, #0
   13230:	430f      	orrs	r7, r1
   13232:	2600      	movs	r6, #0
   13234:	e78e      	b.n	13154 <__aeabi_dsub+0x244>
   13236:	002b      	movs	r3, r5
   13238:	000f      	movs	r7, r1
   1323a:	3b20      	subs	r3, #32
   1323c:	40df      	lsrs	r7, r3
   1323e:	2d20      	cmp	r5, #32
   13240:	d071      	beq.n	13326 <__aeabi_dsub+0x416>
   13242:	2340      	movs	r3, #64	; 0x40
   13244:	1b5d      	subs	r5, r3, r5
   13246:	40a9      	lsls	r1, r5
   13248:	430a      	orrs	r2, r1
   1324a:	1e51      	subs	r1, r2, #1
   1324c:	418a      	sbcs	r2, r1
   1324e:	2100      	movs	r1, #0
   13250:	4317      	orrs	r7, r2
   13252:	e6af      	b.n	12fb4 <__aeabi_dsub+0xa4>
   13254:	000007ff 	.word	0x000007ff
   13258:	ff7fffff 	.word	0xff7fffff
   1325c:	800fffff 	.word	0x800fffff
   13260:	2e00      	cmp	r6, #0
   13262:	d03e      	beq.n	132e2 <__aeabi_dsub+0x3d2>
   13264:	4eb3      	ldr	r6, [pc, #716]	; (13534 <__aeabi_dsub+0x624>)
   13266:	45b4      	cmp	ip, r6
   13268:	d045      	beq.n	132f6 <__aeabi_dsub+0x3e6>
   1326a:	2680      	movs	r6, #128	; 0x80
   1326c:	0436      	lsls	r6, r6, #16
   1326e:	426d      	negs	r5, r5
   13270:	4334      	orrs	r4, r6
   13272:	2d38      	cmp	r5, #56	; 0x38
   13274:	dd00      	ble.n	13278 <__aeabi_dsub+0x368>
   13276:	e0a8      	b.n	133ca <__aeabi_dsub+0x4ba>
   13278:	2d1f      	cmp	r5, #31
   1327a:	dd00      	ble.n	1327e <__aeabi_dsub+0x36e>
   1327c:	e11f      	b.n	134be <__aeabi_dsub+0x5ae>
   1327e:	2620      	movs	r6, #32
   13280:	0027      	movs	r7, r4
   13282:	4650      	mov	r0, sl
   13284:	1b76      	subs	r6, r6, r5
   13286:	40b7      	lsls	r7, r6
   13288:	40e8      	lsrs	r0, r5
   1328a:	4307      	orrs	r7, r0
   1328c:	4650      	mov	r0, sl
   1328e:	40b0      	lsls	r0, r6
   13290:	1e46      	subs	r6, r0, #1
   13292:	41b0      	sbcs	r0, r6
   13294:	40ec      	lsrs	r4, r5
   13296:	4338      	orrs	r0, r7
   13298:	1a17      	subs	r7, r2, r0
   1329a:	42ba      	cmp	r2, r7
   1329c:	4192      	sbcs	r2, r2
   1329e:	1b0c      	subs	r4, r1, r4
   132a0:	4252      	negs	r2, r2
   132a2:	1aa4      	subs	r4, r4, r2
   132a4:	4666      	mov	r6, ip
   132a6:	4698      	mov	r8, r3
   132a8:	e68b      	b.n	12fc2 <__aeabi_dsub+0xb2>
   132aa:	4664      	mov	r4, ip
   132ac:	4667      	mov	r7, ip
   132ae:	432c      	orrs	r4, r5
   132b0:	d000      	beq.n	132b4 <__aeabi_dsub+0x3a4>
   132b2:	e68b      	b.n	12fcc <__aeabi_dsub+0xbc>
   132b4:	2500      	movs	r5, #0
   132b6:	2600      	movs	r6, #0
   132b8:	2700      	movs	r7, #0
   132ba:	e6ea      	b.n	13092 <__aeabi_dsub+0x182>
   132bc:	001e      	movs	r6, r3
   132be:	e6ad      	b.n	1301c <__aeabi_dsub+0x10c>
   132c0:	2b1f      	cmp	r3, #31
   132c2:	dc60      	bgt.n	13386 <__aeabi_dsub+0x476>
   132c4:	2720      	movs	r7, #32
   132c6:	1af8      	subs	r0, r7, r3
   132c8:	000f      	movs	r7, r1
   132ca:	4684      	mov	ip, r0
   132cc:	4087      	lsls	r7, r0
   132ce:	0010      	movs	r0, r2
   132d0:	40d8      	lsrs	r0, r3
   132d2:	4307      	orrs	r7, r0
   132d4:	4660      	mov	r0, ip
   132d6:	4082      	lsls	r2, r0
   132d8:	1e50      	subs	r0, r2, #1
   132da:	4182      	sbcs	r2, r0
   132dc:	40d9      	lsrs	r1, r3
   132de:	4317      	orrs	r7, r2
   132e0:	e6f5      	b.n	130ce <__aeabi_dsub+0x1be>
   132e2:	0026      	movs	r6, r4
   132e4:	4650      	mov	r0, sl
   132e6:	4306      	orrs	r6, r0
   132e8:	d005      	beq.n	132f6 <__aeabi_dsub+0x3e6>
   132ea:	43ed      	mvns	r5, r5
   132ec:	2d00      	cmp	r5, #0
   132ee:	d0d3      	beq.n	13298 <__aeabi_dsub+0x388>
   132f0:	4e90      	ldr	r6, [pc, #576]	; (13534 <__aeabi_dsub+0x624>)
   132f2:	45b4      	cmp	ip, r6
   132f4:	d1bd      	bne.n	13272 <__aeabi_dsub+0x362>
   132f6:	000c      	movs	r4, r1
   132f8:	0017      	movs	r7, r2
   132fa:	4666      	mov	r6, ip
   132fc:	4698      	mov	r8, r3
   132fe:	e68d      	b.n	1301c <__aeabi_dsub+0x10c>
   13300:	488c      	ldr	r0, [pc, #560]	; (13534 <__aeabi_dsub+0x624>)
   13302:	4283      	cmp	r3, r0
   13304:	d00b      	beq.n	1331e <__aeabi_dsub+0x40e>
   13306:	4663      	mov	r3, ip
   13308:	e6d9      	b.n	130be <__aeabi_dsub+0x1ae>
   1330a:	2d00      	cmp	r5, #0
   1330c:	d000      	beq.n	13310 <__aeabi_dsub+0x400>
   1330e:	e096      	b.n	1343e <__aeabi_dsub+0x52e>
   13310:	0008      	movs	r0, r1
   13312:	4310      	orrs	r0, r2
   13314:	d100      	bne.n	13318 <__aeabi_dsub+0x408>
   13316:	e0e2      	b.n	134de <__aeabi_dsub+0x5ce>
   13318:	000c      	movs	r4, r1
   1331a:	0017      	movs	r7, r2
   1331c:	4698      	mov	r8, r3
   1331e:	4e85      	ldr	r6, [pc, #532]	; (13534 <__aeabi_dsub+0x624>)
   13320:	e67c      	b.n	1301c <__aeabi_dsub+0x10c>
   13322:	2500      	movs	r5, #0
   13324:	e780      	b.n	13228 <__aeabi_dsub+0x318>
   13326:	2100      	movs	r1, #0
   13328:	e78e      	b.n	13248 <__aeabi_dsub+0x338>
   1332a:	0023      	movs	r3, r4
   1332c:	4650      	mov	r0, sl
   1332e:	4303      	orrs	r3, r0
   13330:	2e00      	cmp	r6, #0
   13332:	d000      	beq.n	13336 <__aeabi_dsub+0x426>
   13334:	e0a8      	b.n	13488 <__aeabi_dsub+0x578>
   13336:	2b00      	cmp	r3, #0
   13338:	d100      	bne.n	1333c <__aeabi_dsub+0x42c>
   1333a:	e0de      	b.n	134fa <__aeabi_dsub+0x5ea>
   1333c:	000b      	movs	r3, r1
   1333e:	4313      	orrs	r3, r2
   13340:	d100      	bne.n	13344 <__aeabi_dsub+0x434>
   13342:	e66b      	b.n	1301c <__aeabi_dsub+0x10c>
   13344:	4452      	add	r2, sl
   13346:	4552      	cmp	r2, sl
   13348:	4180      	sbcs	r0, r0
   1334a:	1864      	adds	r4, r4, r1
   1334c:	4240      	negs	r0, r0
   1334e:	1824      	adds	r4, r4, r0
   13350:	0017      	movs	r7, r2
   13352:	0223      	lsls	r3, r4, #8
   13354:	d400      	bmi.n	13358 <__aeabi_dsub+0x448>
   13356:	e6fd      	b.n	13154 <__aeabi_dsub+0x244>
   13358:	4b77      	ldr	r3, [pc, #476]	; (13538 <__aeabi_dsub+0x628>)
   1335a:	4666      	mov	r6, ip
   1335c:	401c      	ands	r4, r3
   1335e:	e65d      	b.n	1301c <__aeabi_dsub+0x10c>
   13360:	0025      	movs	r5, r4
   13362:	4650      	mov	r0, sl
   13364:	4305      	orrs	r5, r0
   13366:	2e00      	cmp	r6, #0
   13368:	d1cf      	bne.n	1330a <__aeabi_dsub+0x3fa>
   1336a:	2d00      	cmp	r5, #0
   1336c:	d14f      	bne.n	1340e <__aeabi_dsub+0x4fe>
   1336e:	000c      	movs	r4, r1
   13370:	4314      	orrs	r4, r2
   13372:	d100      	bne.n	13376 <__aeabi_dsub+0x466>
   13374:	e0a0      	b.n	134b8 <__aeabi_dsub+0x5a8>
   13376:	000c      	movs	r4, r1
   13378:	0017      	movs	r7, r2
   1337a:	4698      	mov	r8, r3
   1337c:	e64e      	b.n	1301c <__aeabi_dsub+0x10c>
   1337e:	4666      	mov	r6, ip
   13380:	2400      	movs	r4, #0
   13382:	2700      	movs	r7, #0
   13384:	e685      	b.n	13092 <__aeabi_dsub+0x182>
   13386:	001f      	movs	r7, r3
   13388:	0008      	movs	r0, r1
   1338a:	3f20      	subs	r7, #32
   1338c:	40f8      	lsrs	r0, r7
   1338e:	0007      	movs	r7, r0
   13390:	2b20      	cmp	r3, #32
   13392:	d100      	bne.n	13396 <__aeabi_dsub+0x486>
   13394:	e08e      	b.n	134b4 <__aeabi_dsub+0x5a4>
   13396:	2040      	movs	r0, #64	; 0x40
   13398:	1ac3      	subs	r3, r0, r3
   1339a:	4099      	lsls	r1, r3
   1339c:	430a      	orrs	r2, r1
   1339e:	1e51      	subs	r1, r2, #1
   133a0:	418a      	sbcs	r2, r1
   133a2:	2100      	movs	r1, #0
   133a4:	4317      	orrs	r7, r2
   133a6:	e692      	b.n	130ce <__aeabi_dsub+0x1be>
   133a8:	2e00      	cmp	r6, #0
   133aa:	d114      	bne.n	133d6 <__aeabi_dsub+0x4c6>
   133ac:	0026      	movs	r6, r4
   133ae:	4650      	mov	r0, sl
   133b0:	4306      	orrs	r6, r0
   133b2:	d062      	beq.n	1347a <__aeabi_dsub+0x56a>
   133b4:	43db      	mvns	r3, r3
   133b6:	2b00      	cmp	r3, #0
   133b8:	d15c      	bne.n	13474 <__aeabi_dsub+0x564>
   133ba:	1887      	adds	r7, r0, r2
   133bc:	4297      	cmp	r7, r2
   133be:	4192      	sbcs	r2, r2
   133c0:	1864      	adds	r4, r4, r1
   133c2:	4252      	negs	r2, r2
   133c4:	18a4      	adds	r4, r4, r2
   133c6:	4666      	mov	r6, ip
   133c8:	e687      	b.n	130da <__aeabi_dsub+0x1ca>
   133ca:	4650      	mov	r0, sl
   133cc:	4320      	orrs	r0, r4
   133ce:	1e44      	subs	r4, r0, #1
   133d0:	41a0      	sbcs	r0, r4
   133d2:	2400      	movs	r4, #0
   133d4:	e760      	b.n	13298 <__aeabi_dsub+0x388>
   133d6:	4e57      	ldr	r6, [pc, #348]	; (13534 <__aeabi_dsub+0x624>)
   133d8:	45b4      	cmp	ip, r6
   133da:	d04e      	beq.n	1347a <__aeabi_dsub+0x56a>
   133dc:	2680      	movs	r6, #128	; 0x80
   133de:	0436      	lsls	r6, r6, #16
   133e0:	425b      	negs	r3, r3
   133e2:	4334      	orrs	r4, r6
   133e4:	2b38      	cmp	r3, #56	; 0x38
   133e6:	dd00      	ble.n	133ea <__aeabi_dsub+0x4da>
   133e8:	e07f      	b.n	134ea <__aeabi_dsub+0x5da>
   133ea:	2b1f      	cmp	r3, #31
   133ec:	dd00      	ble.n	133f0 <__aeabi_dsub+0x4e0>
   133ee:	e08b      	b.n	13508 <__aeabi_dsub+0x5f8>
   133f0:	2620      	movs	r6, #32
   133f2:	0027      	movs	r7, r4
   133f4:	4650      	mov	r0, sl
   133f6:	1af6      	subs	r6, r6, r3
   133f8:	40b7      	lsls	r7, r6
   133fa:	40d8      	lsrs	r0, r3
   133fc:	4307      	orrs	r7, r0
   133fe:	4650      	mov	r0, sl
   13400:	40b0      	lsls	r0, r6
   13402:	1e46      	subs	r6, r0, #1
   13404:	41b0      	sbcs	r0, r6
   13406:	4307      	orrs	r7, r0
   13408:	40dc      	lsrs	r4, r3
   1340a:	18bf      	adds	r7, r7, r2
   1340c:	e7d6      	b.n	133bc <__aeabi_dsub+0x4ac>
   1340e:	000d      	movs	r5, r1
   13410:	4315      	orrs	r5, r2
   13412:	d100      	bne.n	13416 <__aeabi_dsub+0x506>
   13414:	e602      	b.n	1301c <__aeabi_dsub+0x10c>
   13416:	4650      	mov	r0, sl
   13418:	1a80      	subs	r0, r0, r2
   1341a:	4582      	cmp	sl, r0
   1341c:	41bf      	sbcs	r7, r7
   1341e:	1a65      	subs	r5, r4, r1
   13420:	427f      	negs	r7, r7
   13422:	1bed      	subs	r5, r5, r7
   13424:	4684      	mov	ip, r0
   13426:	0228      	lsls	r0, r5, #8
   13428:	d400      	bmi.n	1342c <__aeabi_dsub+0x51c>
   1342a:	e68d      	b.n	13148 <__aeabi_dsub+0x238>
   1342c:	4650      	mov	r0, sl
   1342e:	1a17      	subs	r7, r2, r0
   13430:	42ba      	cmp	r2, r7
   13432:	4192      	sbcs	r2, r2
   13434:	1b0c      	subs	r4, r1, r4
   13436:	4252      	negs	r2, r2
   13438:	1aa4      	subs	r4, r4, r2
   1343a:	4698      	mov	r8, r3
   1343c:	e5ee      	b.n	1301c <__aeabi_dsub+0x10c>
   1343e:	000d      	movs	r5, r1
   13440:	4315      	orrs	r5, r2
   13442:	d100      	bne.n	13446 <__aeabi_dsub+0x536>
   13444:	e76b      	b.n	1331e <__aeabi_dsub+0x40e>
   13446:	4650      	mov	r0, sl
   13448:	0767      	lsls	r7, r4, #29
   1344a:	08c0      	lsrs	r0, r0, #3
   1344c:	4307      	orrs	r7, r0
   1344e:	2080      	movs	r0, #128	; 0x80
   13450:	08e4      	lsrs	r4, r4, #3
   13452:	0300      	lsls	r0, r0, #12
   13454:	4204      	tst	r4, r0
   13456:	d007      	beq.n	13468 <__aeabi_dsub+0x558>
   13458:	08cd      	lsrs	r5, r1, #3
   1345a:	4205      	tst	r5, r0
   1345c:	d104      	bne.n	13468 <__aeabi_dsub+0x558>
   1345e:	002c      	movs	r4, r5
   13460:	4698      	mov	r8, r3
   13462:	08d7      	lsrs	r7, r2, #3
   13464:	0749      	lsls	r1, r1, #29
   13466:	430f      	orrs	r7, r1
   13468:	0f7b      	lsrs	r3, r7, #29
   1346a:	00e4      	lsls	r4, r4, #3
   1346c:	431c      	orrs	r4, r3
   1346e:	00ff      	lsls	r7, r7, #3
   13470:	4e30      	ldr	r6, [pc, #192]	; (13534 <__aeabi_dsub+0x624>)
   13472:	e5d3      	b.n	1301c <__aeabi_dsub+0x10c>
   13474:	4e2f      	ldr	r6, [pc, #188]	; (13534 <__aeabi_dsub+0x624>)
   13476:	45b4      	cmp	ip, r6
   13478:	d1b4      	bne.n	133e4 <__aeabi_dsub+0x4d4>
   1347a:	000c      	movs	r4, r1
   1347c:	0017      	movs	r7, r2
   1347e:	4666      	mov	r6, ip
   13480:	e5cc      	b.n	1301c <__aeabi_dsub+0x10c>
   13482:	2700      	movs	r7, #0
   13484:	2400      	movs	r4, #0
   13486:	e5e8      	b.n	1305a <__aeabi_dsub+0x14a>
   13488:	2b00      	cmp	r3, #0
   1348a:	d039      	beq.n	13500 <__aeabi_dsub+0x5f0>
   1348c:	000b      	movs	r3, r1
   1348e:	4313      	orrs	r3, r2
   13490:	d100      	bne.n	13494 <__aeabi_dsub+0x584>
   13492:	e744      	b.n	1331e <__aeabi_dsub+0x40e>
   13494:	08c0      	lsrs	r0, r0, #3
   13496:	0767      	lsls	r7, r4, #29
   13498:	4307      	orrs	r7, r0
   1349a:	2080      	movs	r0, #128	; 0x80
   1349c:	08e4      	lsrs	r4, r4, #3
   1349e:	0300      	lsls	r0, r0, #12
   134a0:	4204      	tst	r4, r0
   134a2:	d0e1      	beq.n	13468 <__aeabi_dsub+0x558>
   134a4:	08cb      	lsrs	r3, r1, #3
   134a6:	4203      	tst	r3, r0
   134a8:	d1de      	bne.n	13468 <__aeabi_dsub+0x558>
   134aa:	08d7      	lsrs	r7, r2, #3
   134ac:	0749      	lsls	r1, r1, #29
   134ae:	430f      	orrs	r7, r1
   134b0:	001c      	movs	r4, r3
   134b2:	e7d9      	b.n	13468 <__aeabi_dsub+0x558>
   134b4:	2100      	movs	r1, #0
   134b6:	e771      	b.n	1339c <__aeabi_dsub+0x48c>
   134b8:	2500      	movs	r5, #0
   134ba:	2700      	movs	r7, #0
   134bc:	e5e9      	b.n	13092 <__aeabi_dsub+0x182>
   134be:	002e      	movs	r6, r5
   134c0:	0027      	movs	r7, r4
   134c2:	3e20      	subs	r6, #32
   134c4:	40f7      	lsrs	r7, r6
   134c6:	2d20      	cmp	r5, #32
   134c8:	d02f      	beq.n	1352a <__aeabi_dsub+0x61a>
   134ca:	2640      	movs	r6, #64	; 0x40
   134cc:	1b75      	subs	r5, r6, r5
   134ce:	40ac      	lsls	r4, r5
   134d0:	4650      	mov	r0, sl
   134d2:	4320      	orrs	r0, r4
   134d4:	1e44      	subs	r4, r0, #1
   134d6:	41a0      	sbcs	r0, r4
   134d8:	2400      	movs	r4, #0
   134da:	4338      	orrs	r0, r7
   134dc:	e6dc      	b.n	13298 <__aeabi_dsub+0x388>
   134de:	2480      	movs	r4, #128	; 0x80
   134e0:	2500      	movs	r5, #0
   134e2:	0324      	lsls	r4, r4, #12
   134e4:	4e13      	ldr	r6, [pc, #76]	; (13534 <__aeabi_dsub+0x624>)
   134e6:	2700      	movs	r7, #0
   134e8:	e5d3      	b.n	13092 <__aeabi_dsub+0x182>
   134ea:	4650      	mov	r0, sl
   134ec:	4320      	orrs	r0, r4
   134ee:	0007      	movs	r7, r0
   134f0:	1e78      	subs	r0, r7, #1
   134f2:	4187      	sbcs	r7, r0
   134f4:	2400      	movs	r4, #0
   134f6:	18bf      	adds	r7, r7, r2
   134f8:	e760      	b.n	133bc <__aeabi_dsub+0x4ac>
   134fa:	000c      	movs	r4, r1
   134fc:	0017      	movs	r7, r2
   134fe:	e58d      	b.n	1301c <__aeabi_dsub+0x10c>
   13500:	000c      	movs	r4, r1
   13502:	0017      	movs	r7, r2
   13504:	4e0b      	ldr	r6, [pc, #44]	; (13534 <__aeabi_dsub+0x624>)
   13506:	e589      	b.n	1301c <__aeabi_dsub+0x10c>
   13508:	001e      	movs	r6, r3
   1350a:	0027      	movs	r7, r4
   1350c:	3e20      	subs	r6, #32
   1350e:	40f7      	lsrs	r7, r6
   13510:	2b20      	cmp	r3, #32
   13512:	d00c      	beq.n	1352e <__aeabi_dsub+0x61e>
   13514:	2640      	movs	r6, #64	; 0x40
   13516:	1af3      	subs	r3, r6, r3
   13518:	409c      	lsls	r4, r3
   1351a:	4650      	mov	r0, sl
   1351c:	4320      	orrs	r0, r4
   1351e:	1e44      	subs	r4, r0, #1
   13520:	41a0      	sbcs	r0, r4
   13522:	4307      	orrs	r7, r0
   13524:	2400      	movs	r4, #0
   13526:	18bf      	adds	r7, r7, r2
   13528:	e748      	b.n	133bc <__aeabi_dsub+0x4ac>
   1352a:	2400      	movs	r4, #0
   1352c:	e7d0      	b.n	134d0 <__aeabi_dsub+0x5c0>
   1352e:	2400      	movs	r4, #0
   13530:	e7f3      	b.n	1351a <__aeabi_dsub+0x60a>
   13532:	46c0      	nop			; (mov r8, r8)
   13534:	000007ff 	.word	0x000007ff
   13538:	ff7fffff 	.word	0xff7fffff

0001353c <__aeabi_d2iz>:
   1353c:	b530      	push	{r4, r5, lr}
   1353e:	4d13      	ldr	r5, [pc, #76]	; (1358c <__aeabi_d2iz+0x50>)
   13540:	030a      	lsls	r2, r1, #12
   13542:	004b      	lsls	r3, r1, #1
   13544:	0b12      	lsrs	r2, r2, #12
   13546:	0d5b      	lsrs	r3, r3, #21
   13548:	0fc9      	lsrs	r1, r1, #31
   1354a:	2400      	movs	r4, #0
   1354c:	42ab      	cmp	r3, r5
   1354e:	dd10      	ble.n	13572 <__aeabi_d2iz+0x36>
   13550:	4c0f      	ldr	r4, [pc, #60]	; (13590 <__aeabi_d2iz+0x54>)
   13552:	42a3      	cmp	r3, r4
   13554:	dc0f      	bgt.n	13576 <__aeabi_d2iz+0x3a>
   13556:	2480      	movs	r4, #128	; 0x80
   13558:	4d0e      	ldr	r5, [pc, #56]	; (13594 <__aeabi_d2iz+0x58>)
   1355a:	0364      	lsls	r4, r4, #13
   1355c:	4322      	orrs	r2, r4
   1355e:	1aed      	subs	r5, r5, r3
   13560:	2d1f      	cmp	r5, #31
   13562:	dd0b      	ble.n	1357c <__aeabi_d2iz+0x40>
   13564:	480c      	ldr	r0, [pc, #48]	; (13598 <__aeabi_d2iz+0x5c>)
   13566:	1ac3      	subs	r3, r0, r3
   13568:	40da      	lsrs	r2, r3
   1356a:	4254      	negs	r4, r2
   1356c:	2900      	cmp	r1, #0
   1356e:	d100      	bne.n	13572 <__aeabi_d2iz+0x36>
   13570:	0014      	movs	r4, r2
   13572:	0020      	movs	r0, r4
   13574:	bd30      	pop	{r4, r5, pc}
   13576:	4b09      	ldr	r3, [pc, #36]	; (1359c <__aeabi_d2iz+0x60>)
   13578:	18cc      	adds	r4, r1, r3
   1357a:	e7fa      	b.n	13572 <__aeabi_d2iz+0x36>
   1357c:	4c08      	ldr	r4, [pc, #32]	; (135a0 <__aeabi_d2iz+0x64>)
   1357e:	40e8      	lsrs	r0, r5
   13580:	46a4      	mov	ip, r4
   13582:	4463      	add	r3, ip
   13584:	409a      	lsls	r2, r3
   13586:	4302      	orrs	r2, r0
   13588:	e7ef      	b.n	1356a <__aeabi_d2iz+0x2e>
   1358a:	46c0      	nop			; (mov r8, r8)
   1358c:	000003fe 	.word	0x000003fe
   13590:	0000041d 	.word	0x0000041d
   13594:	00000433 	.word	0x00000433
   13598:	00000413 	.word	0x00000413
   1359c:	7fffffff 	.word	0x7fffffff
   135a0:	fffffbed 	.word	0xfffffbed

000135a4 <__aeabi_i2d>:
   135a4:	b570      	push	{r4, r5, r6, lr}
   135a6:	2800      	cmp	r0, #0
   135a8:	d030      	beq.n	1360c <__aeabi_i2d+0x68>
   135aa:	17c3      	asrs	r3, r0, #31
   135ac:	18c4      	adds	r4, r0, r3
   135ae:	405c      	eors	r4, r3
   135b0:	0fc5      	lsrs	r5, r0, #31
   135b2:	0020      	movs	r0, r4
   135b4:	f000 f94c 	bl	13850 <__clzsi2>
   135b8:	4b17      	ldr	r3, [pc, #92]	; (13618 <__aeabi_i2d+0x74>)
   135ba:	4a18      	ldr	r2, [pc, #96]	; (1361c <__aeabi_i2d+0x78>)
   135bc:	1a1b      	subs	r3, r3, r0
   135be:	1ad2      	subs	r2, r2, r3
   135c0:	2a1f      	cmp	r2, #31
   135c2:	dd18      	ble.n	135f6 <__aeabi_i2d+0x52>
   135c4:	4a16      	ldr	r2, [pc, #88]	; (13620 <__aeabi_i2d+0x7c>)
   135c6:	1ad2      	subs	r2, r2, r3
   135c8:	4094      	lsls	r4, r2
   135ca:	2200      	movs	r2, #0
   135cc:	0324      	lsls	r4, r4, #12
   135ce:	055b      	lsls	r3, r3, #21
   135d0:	0b24      	lsrs	r4, r4, #12
   135d2:	0d5b      	lsrs	r3, r3, #21
   135d4:	2100      	movs	r1, #0
   135d6:	0010      	movs	r0, r2
   135d8:	0324      	lsls	r4, r4, #12
   135da:	0d0a      	lsrs	r2, r1, #20
   135dc:	0b24      	lsrs	r4, r4, #12
   135de:	0512      	lsls	r2, r2, #20
   135e0:	4322      	orrs	r2, r4
   135e2:	4c10      	ldr	r4, [pc, #64]	; (13624 <__aeabi_i2d+0x80>)
   135e4:	051b      	lsls	r3, r3, #20
   135e6:	4022      	ands	r2, r4
   135e8:	4313      	orrs	r3, r2
   135ea:	005b      	lsls	r3, r3, #1
   135ec:	07ed      	lsls	r5, r5, #31
   135ee:	085b      	lsrs	r3, r3, #1
   135f0:	432b      	orrs	r3, r5
   135f2:	0019      	movs	r1, r3
   135f4:	bd70      	pop	{r4, r5, r6, pc}
   135f6:	0021      	movs	r1, r4
   135f8:	4091      	lsls	r1, r2
   135fa:	000a      	movs	r2, r1
   135fc:	210b      	movs	r1, #11
   135fe:	1a08      	subs	r0, r1, r0
   13600:	40c4      	lsrs	r4, r0
   13602:	055b      	lsls	r3, r3, #21
   13604:	0324      	lsls	r4, r4, #12
   13606:	0b24      	lsrs	r4, r4, #12
   13608:	0d5b      	lsrs	r3, r3, #21
   1360a:	e7e3      	b.n	135d4 <__aeabi_i2d+0x30>
   1360c:	2500      	movs	r5, #0
   1360e:	2300      	movs	r3, #0
   13610:	2400      	movs	r4, #0
   13612:	2200      	movs	r2, #0
   13614:	e7de      	b.n	135d4 <__aeabi_i2d+0x30>
   13616:	46c0      	nop			; (mov r8, r8)
   13618:	0000041e 	.word	0x0000041e
   1361c:	00000433 	.word	0x00000433
   13620:	00000413 	.word	0x00000413
   13624:	800fffff 	.word	0x800fffff

00013628 <__aeabi_ui2d>:
   13628:	b510      	push	{r4, lr}
   1362a:	1e04      	subs	r4, r0, #0
   1362c:	d028      	beq.n	13680 <__aeabi_ui2d+0x58>
   1362e:	f000 f90f 	bl	13850 <__clzsi2>
   13632:	4b15      	ldr	r3, [pc, #84]	; (13688 <__aeabi_ui2d+0x60>)
   13634:	4a15      	ldr	r2, [pc, #84]	; (1368c <__aeabi_ui2d+0x64>)
   13636:	1a1b      	subs	r3, r3, r0
   13638:	1ad2      	subs	r2, r2, r3
   1363a:	2a1f      	cmp	r2, #31
   1363c:	dd15      	ble.n	1366a <__aeabi_ui2d+0x42>
   1363e:	4a14      	ldr	r2, [pc, #80]	; (13690 <__aeabi_ui2d+0x68>)
   13640:	1ad2      	subs	r2, r2, r3
   13642:	4094      	lsls	r4, r2
   13644:	2200      	movs	r2, #0
   13646:	0324      	lsls	r4, r4, #12
   13648:	055b      	lsls	r3, r3, #21
   1364a:	0b24      	lsrs	r4, r4, #12
   1364c:	0d5b      	lsrs	r3, r3, #21
   1364e:	2100      	movs	r1, #0
   13650:	0010      	movs	r0, r2
   13652:	0324      	lsls	r4, r4, #12
   13654:	0d0a      	lsrs	r2, r1, #20
   13656:	0b24      	lsrs	r4, r4, #12
   13658:	0512      	lsls	r2, r2, #20
   1365a:	4322      	orrs	r2, r4
   1365c:	4c0d      	ldr	r4, [pc, #52]	; (13694 <__aeabi_ui2d+0x6c>)
   1365e:	051b      	lsls	r3, r3, #20
   13660:	4022      	ands	r2, r4
   13662:	4313      	orrs	r3, r2
   13664:	005b      	lsls	r3, r3, #1
   13666:	0859      	lsrs	r1, r3, #1
   13668:	bd10      	pop	{r4, pc}
   1366a:	0021      	movs	r1, r4
   1366c:	4091      	lsls	r1, r2
   1366e:	000a      	movs	r2, r1
   13670:	210b      	movs	r1, #11
   13672:	1a08      	subs	r0, r1, r0
   13674:	40c4      	lsrs	r4, r0
   13676:	055b      	lsls	r3, r3, #21
   13678:	0324      	lsls	r4, r4, #12
   1367a:	0b24      	lsrs	r4, r4, #12
   1367c:	0d5b      	lsrs	r3, r3, #21
   1367e:	e7e6      	b.n	1364e <__aeabi_ui2d+0x26>
   13680:	2300      	movs	r3, #0
   13682:	2400      	movs	r4, #0
   13684:	2200      	movs	r2, #0
   13686:	e7e2      	b.n	1364e <__aeabi_ui2d+0x26>
   13688:	0000041e 	.word	0x0000041e
   1368c:	00000433 	.word	0x00000433
   13690:	00000413 	.word	0x00000413
   13694:	800fffff 	.word	0x800fffff

00013698 <__aeabi_f2d>:
   13698:	0041      	lsls	r1, r0, #1
   1369a:	0e09      	lsrs	r1, r1, #24
   1369c:	1c4b      	adds	r3, r1, #1
   1369e:	b570      	push	{r4, r5, r6, lr}
   136a0:	b2db      	uxtb	r3, r3
   136a2:	0246      	lsls	r6, r0, #9
   136a4:	0a75      	lsrs	r5, r6, #9
   136a6:	0fc4      	lsrs	r4, r0, #31
   136a8:	2b01      	cmp	r3, #1
   136aa:	dd14      	ble.n	136d6 <__aeabi_f2d+0x3e>
   136ac:	23e0      	movs	r3, #224	; 0xe0
   136ae:	009b      	lsls	r3, r3, #2
   136b0:	076d      	lsls	r5, r5, #29
   136b2:	0b36      	lsrs	r6, r6, #12
   136b4:	18cb      	adds	r3, r1, r3
   136b6:	2100      	movs	r1, #0
   136b8:	0d0a      	lsrs	r2, r1, #20
   136ba:	0028      	movs	r0, r5
   136bc:	0512      	lsls	r2, r2, #20
   136be:	4d1c      	ldr	r5, [pc, #112]	; (13730 <__aeabi_f2d+0x98>)
   136c0:	4332      	orrs	r2, r6
   136c2:	055b      	lsls	r3, r3, #21
   136c4:	402a      	ands	r2, r5
   136c6:	085b      	lsrs	r3, r3, #1
   136c8:	4313      	orrs	r3, r2
   136ca:	005b      	lsls	r3, r3, #1
   136cc:	07e4      	lsls	r4, r4, #31
   136ce:	085b      	lsrs	r3, r3, #1
   136d0:	4323      	orrs	r3, r4
   136d2:	0019      	movs	r1, r3
   136d4:	bd70      	pop	{r4, r5, r6, pc}
   136d6:	2900      	cmp	r1, #0
   136d8:	d114      	bne.n	13704 <__aeabi_f2d+0x6c>
   136da:	2d00      	cmp	r5, #0
   136dc:	d01e      	beq.n	1371c <__aeabi_f2d+0x84>
   136de:	0028      	movs	r0, r5
   136e0:	f000 f8b6 	bl	13850 <__clzsi2>
   136e4:	280a      	cmp	r0, #10
   136e6:	dc1c      	bgt.n	13722 <__aeabi_f2d+0x8a>
   136e8:	230b      	movs	r3, #11
   136ea:	002a      	movs	r2, r5
   136ec:	1a1b      	subs	r3, r3, r0
   136ee:	40da      	lsrs	r2, r3
   136f0:	0003      	movs	r3, r0
   136f2:	3315      	adds	r3, #21
   136f4:	409d      	lsls	r5, r3
   136f6:	4b0f      	ldr	r3, [pc, #60]	; (13734 <__aeabi_f2d+0x9c>)
   136f8:	0312      	lsls	r2, r2, #12
   136fa:	1a1b      	subs	r3, r3, r0
   136fc:	055b      	lsls	r3, r3, #21
   136fe:	0b16      	lsrs	r6, r2, #12
   13700:	0d5b      	lsrs	r3, r3, #21
   13702:	e7d8      	b.n	136b6 <__aeabi_f2d+0x1e>
   13704:	2d00      	cmp	r5, #0
   13706:	d006      	beq.n	13716 <__aeabi_f2d+0x7e>
   13708:	0b32      	lsrs	r2, r6, #12
   1370a:	2680      	movs	r6, #128	; 0x80
   1370c:	0336      	lsls	r6, r6, #12
   1370e:	076d      	lsls	r5, r5, #29
   13710:	4316      	orrs	r6, r2
   13712:	4b09      	ldr	r3, [pc, #36]	; (13738 <__aeabi_f2d+0xa0>)
   13714:	e7cf      	b.n	136b6 <__aeabi_f2d+0x1e>
   13716:	4b08      	ldr	r3, [pc, #32]	; (13738 <__aeabi_f2d+0xa0>)
   13718:	2600      	movs	r6, #0
   1371a:	e7cc      	b.n	136b6 <__aeabi_f2d+0x1e>
   1371c:	2300      	movs	r3, #0
   1371e:	2600      	movs	r6, #0
   13720:	e7c9      	b.n	136b6 <__aeabi_f2d+0x1e>
   13722:	0003      	movs	r3, r0
   13724:	002a      	movs	r2, r5
   13726:	3b0b      	subs	r3, #11
   13728:	409a      	lsls	r2, r3
   1372a:	2500      	movs	r5, #0
   1372c:	e7e3      	b.n	136f6 <__aeabi_f2d+0x5e>
   1372e:	46c0      	nop			; (mov r8, r8)
   13730:	800fffff 	.word	0x800fffff
   13734:	00000389 	.word	0x00000389
   13738:	000007ff 	.word	0x000007ff

0001373c <__aeabi_d2f>:
   1373c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1373e:	004c      	lsls	r4, r1, #1
   13740:	0d64      	lsrs	r4, r4, #21
   13742:	030b      	lsls	r3, r1, #12
   13744:	1c62      	adds	r2, r4, #1
   13746:	0f45      	lsrs	r5, r0, #29
   13748:	0a5b      	lsrs	r3, r3, #9
   1374a:	0552      	lsls	r2, r2, #21
   1374c:	432b      	orrs	r3, r5
   1374e:	0fc9      	lsrs	r1, r1, #31
   13750:	00c5      	lsls	r5, r0, #3
   13752:	0d52      	lsrs	r2, r2, #21
   13754:	2a01      	cmp	r2, #1
   13756:	dd28      	ble.n	137aa <__aeabi_d2f+0x6e>
   13758:	4a3a      	ldr	r2, [pc, #232]	; (13844 <__aeabi_d2f+0x108>)
   1375a:	18a6      	adds	r6, r4, r2
   1375c:	2efe      	cmp	r6, #254	; 0xfe
   1375e:	dc1b      	bgt.n	13798 <__aeabi_d2f+0x5c>
   13760:	2e00      	cmp	r6, #0
   13762:	dd3e      	ble.n	137e2 <__aeabi_d2f+0xa6>
   13764:	0180      	lsls	r0, r0, #6
   13766:	0002      	movs	r2, r0
   13768:	1e50      	subs	r0, r2, #1
   1376a:	4182      	sbcs	r2, r0
   1376c:	0f6d      	lsrs	r5, r5, #29
   1376e:	432a      	orrs	r2, r5
   13770:	00db      	lsls	r3, r3, #3
   13772:	4313      	orrs	r3, r2
   13774:	075a      	lsls	r2, r3, #29
   13776:	d004      	beq.n	13782 <__aeabi_d2f+0x46>
   13778:	220f      	movs	r2, #15
   1377a:	401a      	ands	r2, r3
   1377c:	2a04      	cmp	r2, #4
   1377e:	d000      	beq.n	13782 <__aeabi_d2f+0x46>
   13780:	3304      	adds	r3, #4
   13782:	2280      	movs	r2, #128	; 0x80
   13784:	04d2      	lsls	r2, r2, #19
   13786:	401a      	ands	r2, r3
   13788:	d05a      	beq.n	13840 <__aeabi_d2f+0x104>
   1378a:	3601      	adds	r6, #1
   1378c:	2eff      	cmp	r6, #255	; 0xff
   1378e:	d003      	beq.n	13798 <__aeabi_d2f+0x5c>
   13790:	019b      	lsls	r3, r3, #6
   13792:	0a5b      	lsrs	r3, r3, #9
   13794:	b2f4      	uxtb	r4, r6
   13796:	e001      	b.n	1379c <__aeabi_d2f+0x60>
   13798:	24ff      	movs	r4, #255	; 0xff
   1379a:	2300      	movs	r3, #0
   1379c:	0258      	lsls	r0, r3, #9
   1379e:	05e4      	lsls	r4, r4, #23
   137a0:	0a40      	lsrs	r0, r0, #9
   137a2:	07c9      	lsls	r1, r1, #31
   137a4:	4320      	orrs	r0, r4
   137a6:	4308      	orrs	r0, r1
   137a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137aa:	2c00      	cmp	r4, #0
   137ac:	d007      	beq.n	137be <__aeabi_d2f+0x82>
   137ae:	431d      	orrs	r5, r3
   137b0:	d0f2      	beq.n	13798 <__aeabi_d2f+0x5c>
   137b2:	2080      	movs	r0, #128	; 0x80
   137b4:	00db      	lsls	r3, r3, #3
   137b6:	0480      	lsls	r0, r0, #18
   137b8:	4303      	orrs	r3, r0
   137ba:	26ff      	movs	r6, #255	; 0xff
   137bc:	e7da      	b.n	13774 <__aeabi_d2f+0x38>
   137be:	432b      	orrs	r3, r5
   137c0:	d003      	beq.n	137ca <__aeabi_d2f+0x8e>
   137c2:	2305      	movs	r3, #5
   137c4:	08db      	lsrs	r3, r3, #3
   137c6:	2cff      	cmp	r4, #255	; 0xff
   137c8:	d003      	beq.n	137d2 <__aeabi_d2f+0x96>
   137ca:	025b      	lsls	r3, r3, #9
   137cc:	0a5b      	lsrs	r3, r3, #9
   137ce:	b2e4      	uxtb	r4, r4
   137d0:	e7e4      	b.n	1379c <__aeabi_d2f+0x60>
   137d2:	2b00      	cmp	r3, #0
   137d4:	d032      	beq.n	1383c <__aeabi_d2f+0x100>
   137d6:	2080      	movs	r0, #128	; 0x80
   137d8:	03c0      	lsls	r0, r0, #15
   137da:	4303      	orrs	r3, r0
   137dc:	025b      	lsls	r3, r3, #9
   137de:	0a5b      	lsrs	r3, r3, #9
   137e0:	e7dc      	b.n	1379c <__aeabi_d2f+0x60>
   137e2:	0032      	movs	r2, r6
   137e4:	3217      	adds	r2, #23
   137e6:	db14      	blt.n	13812 <__aeabi_d2f+0xd6>
   137e8:	2280      	movs	r2, #128	; 0x80
   137ea:	271e      	movs	r7, #30
   137ec:	0412      	lsls	r2, r2, #16
   137ee:	4313      	orrs	r3, r2
   137f0:	1bbf      	subs	r7, r7, r6
   137f2:	2f1f      	cmp	r7, #31
   137f4:	dc0f      	bgt.n	13816 <__aeabi_d2f+0xda>
   137f6:	4a14      	ldr	r2, [pc, #80]	; (13848 <__aeabi_d2f+0x10c>)
   137f8:	4694      	mov	ip, r2
   137fa:	4464      	add	r4, ip
   137fc:	002a      	movs	r2, r5
   137fe:	40a5      	lsls	r5, r4
   13800:	002e      	movs	r6, r5
   13802:	40a3      	lsls	r3, r4
   13804:	1e75      	subs	r5, r6, #1
   13806:	41ae      	sbcs	r6, r5
   13808:	40fa      	lsrs	r2, r7
   1380a:	4333      	orrs	r3, r6
   1380c:	4313      	orrs	r3, r2
   1380e:	2600      	movs	r6, #0
   13810:	e7b0      	b.n	13774 <__aeabi_d2f+0x38>
   13812:	2400      	movs	r4, #0
   13814:	e7d5      	b.n	137c2 <__aeabi_d2f+0x86>
   13816:	2202      	movs	r2, #2
   13818:	4252      	negs	r2, r2
   1381a:	1b96      	subs	r6, r2, r6
   1381c:	001a      	movs	r2, r3
   1381e:	40f2      	lsrs	r2, r6
   13820:	2f20      	cmp	r7, #32
   13822:	d009      	beq.n	13838 <__aeabi_d2f+0xfc>
   13824:	4809      	ldr	r0, [pc, #36]	; (1384c <__aeabi_d2f+0x110>)
   13826:	4684      	mov	ip, r0
   13828:	4464      	add	r4, ip
   1382a:	40a3      	lsls	r3, r4
   1382c:	432b      	orrs	r3, r5
   1382e:	1e5d      	subs	r5, r3, #1
   13830:	41ab      	sbcs	r3, r5
   13832:	2600      	movs	r6, #0
   13834:	4313      	orrs	r3, r2
   13836:	e79d      	b.n	13774 <__aeabi_d2f+0x38>
   13838:	2300      	movs	r3, #0
   1383a:	e7f7      	b.n	1382c <__aeabi_d2f+0xf0>
   1383c:	2300      	movs	r3, #0
   1383e:	e7ad      	b.n	1379c <__aeabi_d2f+0x60>
   13840:	0034      	movs	r4, r6
   13842:	e7bf      	b.n	137c4 <__aeabi_d2f+0x88>
   13844:	fffffc80 	.word	0xfffffc80
   13848:	fffffc82 	.word	0xfffffc82
   1384c:	fffffca2 	.word	0xfffffca2

00013850 <__clzsi2>:
   13850:	211c      	movs	r1, #28
   13852:	2301      	movs	r3, #1
   13854:	041b      	lsls	r3, r3, #16
   13856:	4298      	cmp	r0, r3
   13858:	d301      	bcc.n	1385e <__clzsi2+0xe>
   1385a:	0c00      	lsrs	r0, r0, #16
   1385c:	3910      	subs	r1, #16
   1385e:	0a1b      	lsrs	r3, r3, #8
   13860:	4298      	cmp	r0, r3
   13862:	d301      	bcc.n	13868 <__clzsi2+0x18>
   13864:	0a00      	lsrs	r0, r0, #8
   13866:	3908      	subs	r1, #8
   13868:	091b      	lsrs	r3, r3, #4
   1386a:	4298      	cmp	r0, r3
   1386c:	d301      	bcc.n	13872 <__clzsi2+0x22>
   1386e:	0900      	lsrs	r0, r0, #4
   13870:	3904      	subs	r1, #4
   13872:	a202      	add	r2, pc, #8	; (adr r2, 1387c <__clzsi2+0x2c>)
   13874:	5c10      	ldrb	r0, [r2, r0]
   13876:	1840      	adds	r0, r0, r1
   13878:	4770      	bx	lr
   1387a:	46c0      	nop			; (mov r8, r8)
   1387c:	02020304 	.word	0x02020304
   13880:	01010101 	.word	0x01010101
	...

0001388c <__clzdi2>:
   1388c:	b510      	push	{r4, lr}
   1388e:	2900      	cmp	r1, #0
   13890:	d103      	bne.n	1389a <__clzdi2+0xe>
   13892:	f7ff ffdd 	bl	13850 <__clzsi2>
   13896:	3020      	adds	r0, #32
   13898:	e002      	b.n	138a0 <__clzdi2+0x14>
   1389a:	1c08      	adds	r0, r1, #0
   1389c:	f7ff ffd8 	bl	13850 <__clzsi2>
   138a0:	bd10      	pop	{r4, pc}
   138a2:	46c0      	nop			; (mov r8, r8)

000138a4 <__aeabi_d2uiz>:
   138a4:	b570      	push	{r4, r5, r6, lr}
   138a6:	2200      	movs	r2, #0
   138a8:	4b0c      	ldr	r3, [pc, #48]	; (138dc <__aeabi_d2uiz+0x38>)
   138aa:	0004      	movs	r4, r0
   138ac:	000d      	movs	r5, r1
   138ae:	f000 f84b 	bl	13948 <__aeabi_dcmpge>
   138b2:	2800      	cmp	r0, #0
   138b4:	d104      	bne.n	138c0 <__aeabi_d2uiz+0x1c>
   138b6:	0020      	movs	r0, r4
   138b8:	0029      	movs	r1, r5
   138ba:	f7ff fe3f 	bl	1353c <__aeabi_d2iz>
   138be:	bd70      	pop	{r4, r5, r6, pc}
   138c0:	4b06      	ldr	r3, [pc, #24]	; (138dc <__aeabi_d2uiz+0x38>)
   138c2:	2200      	movs	r2, #0
   138c4:	0020      	movs	r0, r4
   138c6:	0029      	movs	r1, r5
   138c8:	f7ff fb22 	bl	12f10 <__aeabi_dsub>
   138cc:	f7ff fe36 	bl	1353c <__aeabi_d2iz>
   138d0:	2380      	movs	r3, #128	; 0x80
   138d2:	061b      	lsls	r3, r3, #24
   138d4:	469c      	mov	ip, r3
   138d6:	4460      	add	r0, ip
   138d8:	e7f1      	b.n	138be <__aeabi_d2uiz+0x1a>
   138da:	46c0      	nop			; (mov r8, r8)
   138dc:	41e00000 	.word	0x41e00000

000138e0 <__aeabi_cdrcmple>:
   138e0:	4684      	mov	ip, r0
   138e2:	1c10      	adds	r0, r2, #0
   138e4:	4662      	mov	r2, ip
   138e6:	468c      	mov	ip, r1
   138e8:	1c19      	adds	r1, r3, #0
   138ea:	4663      	mov	r3, ip
   138ec:	e000      	b.n	138f0 <__aeabi_cdcmpeq>
   138ee:	46c0      	nop			; (mov r8, r8)

000138f0 <__aeabi_cdcmpeq>:
   138f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   138f2:	f000 f8d1 	bl	13a98 <__ledf2>
   138f6:	2800      	cmp	r0, #0
   138f8:	d401      	bmi.n	138fe <__aeabi_cdcmpeq+0xe>
   138fa:	2100      	movs	r1, #0
   138fc:	42c8      	cmn	r0, r1
   138fe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013900 <__aeabi_dcmpeq>:
   13900:	b510      	push	{r4, lr}
   13902:	f000 f82b 	bl	1395c <__eqdf2>
   13906:	4240      	negs	r0, r0
   13908:	3001      	adds	r0, #1
   1390a:	bd10      	pop	{r4, pc}

0001390c <__aeabi_dcmplt>:
   1390c:	b510      	push	{r4, lr}
   1390e:	f000 f8c3 	bl	13a98 <__ledf2>
   13912:	2800      	cmp	r0, #0
   13914:	db01      	blt.n	1391a <__aeabi_dcmplt+0xe>
   13916:	2000      	movs	r0, #0
   13918:	bd10      	pop	{r4, pc}
   1391a:	2001      	movs	r0, #1
   1391c:	bd10      	pop	{r4, pc}
   1391e:	46c0      	nop			; (mov r8, r8)

00013920 <__aeabi_dcmple>:
   13920:	b510      	push	{r4, lr}
   13922:	f000 f8b9 	bl	13a98 <__ledf2>
   13926:	2800      	cmp	r0, #0
   13928:	dd01      	ble.n	1392e <__aeabi_dcmple+0xe>
   1392a:	2000      	movs	r0, #0
   1392c:	bd10      	pop	{r4, pc}
   1392e:	2001      	movs	r0, #1
   13930:	bd10      	pop	{r4, pc}
   13932:	46c0      	nop			; (mov r8, r8)

00013934 <__aeabi_dcmpgt>:
   13934:	b510      	push	{r4, lr}
   13936:	f000 f84b 	bl	139d0 <__gedf2>
   1393a:	2800      	cmp	r0, #0
   1393c:	dc01      	bgt.n	13942 <__aeabi_dcmpgt+0xe>
   1393e:	2000      	movs	r0, #0
   13940:	bd10      	pop	{r4, pc}
   13942:	2001      	movs	r0, #1
   13944:	bd10      	pop	{r4, pc}
   13946:	46c0      	nop			; (mov r8, r8)

00013948 <__aeabi_dcmpge>:
   13948:	b510      	push	{r4, lr}
   1394a:	f000 f841 	bl	139d0 <__gedf2>
   1394e:	2800      	cmp	r0, #0
   13950:	da01      	bge.n	13956 <__aeabi_dcmpge+0xe>
   13952:	2000      	movs	r0, #0
   13954:	bd10      	pop	{r4, pc}
   13956:	2001      	movs	r0, #1
   13958:	bd10      	pop	{r4, pc}
   1395a:	46c0      	nop			; (mov r8, r8)

0001395c <__eqdf2>:
   1395c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1395e:	464f      	mov	r7, r9
   13960:	4646      	mov	r6, r8
   13962:	46d6      	mov	lr, sl
   13964:	005c      	lsls	r4, r3, #1
   13966:	b5c0      	push	{r6, r7, lr}
   13968:	031f      	lsls	r7, r3, #12
   1396a:	0fdb      	lsrs	r3, r3, #31
   1396c:	469a      	mov	sl, r3
   1396e:	4b17      	ldr	r3, [pc, #92]	; (139cc <__eqdf2+0x70>)
   13970:	030e      	lsls	r6, r1, #12
   13972:	004d      	lsls	r5, r1, #1
   13974:	4684      	mov	ip, r0
   13976:	4680      	mov	r8, r0
   13978:	0b36      	lsrs	r6, r6, #12
   1397a:	0d6d      	lsrs	r5, r5, #21
   1397c:	0fc9      	lsrs	r1, r1, #31
   1397e:	4691      	mov	r9, r2
   13980:	0b3f      	lsrs	r7, r7, #12
   13982:	0d64      	lsrs	r4, r4, #21
   13984:	2001      	movs	r0, #1
   13986:	429d      	cmp	r5, r3
   13988:	d008      	beq.n	1399c <__eqdf2+0x40>
   1398a:	429c      	cmp	r4, r3
   1398c:	d001      	beq.n	13992 <__eqdf2+0x36>
   1398e:	42a5      	cmp	r5, r4
   13990:	d00b      	beq.n	139aa <__eqdf2+0x4e>
   13992:	bc1c      	pop	{r2, r3, r4}
   13994:	4690      	mov	r8, r2
   13996:	4699      	mov	r9, r3
   13998:	46a2      	mov	sl, r4
   1399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1399c:	4663      	mov	r3, ip
   1399e:	4333      	orrs	r3, r6
   139a0:	d1f7      	bne.n	13992 <__eqdf2+0x36>
   139a2:	42ac      	cmp	r4, r5
   139a4:	d1f5      	bne.n	13992 <__eqdf2+0x36>
   139a6:	433a      	orrs	r2, r7
   139a8:	d1f3      	bne.n	13992 <__eqdf2+0x36>
   139aa:	2001      	movs	r0, #1
   139ac:	42be      	cmp	r6, r7
   139ae:	d1f0      	bne.n	13992 <__eqdf2+0x36>
   139b0:	45c8      	cmp	r8, r9
   139b2:	d1ee      	bne.n	13992 <__eqdf2+0x36>
   139b4:	4551      	cmp	r1, sl
   139b6:	d007      	beq.n	139c8 <__eqdf2+0x6c>
   139b8:	2d00      	cmp	r5, #0
   139ba:	d1ea      	bne.n	13992 <__eqdf2+0x36>
   139bc:	4663      	mov	r3, ip
   139be:	431e      	orrs	r6, r3
   139c0:	0030      	movs	r0, r6
   139c2:	1e46      	subs	r6, r0, #1
   139c4:	41b0      	sbcs	r0, r6
   139c6:	e7e4      	b.n	13992 <__eqdf2+0x36>
   139c8:	2000      	movs	r0, #0
   139ca:	e7e2      	b.n	13992 <__eqdf2+0x36>
   139cc:	000007ff 	.word	0x000007ff

000139d0 <__gedf2>:
   139d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139d2:	4645      	mov	r5, r8
   139d4:	46de      	mov	lr, fp
   139d6:	4657      	mov	r7, sl
   139d8:	464e      	mov	r6, r9
   139da:	b5e0      	push	{r5, r6, r7, lr}
   139dc:	031f      	lsls	r7, r3, #12
   139de:	0b3d      	lsrs	r5, r7, #12
   139e0:	4f2c      	ldr	r7, [pc, #176]	; (13a94 <__gedf2+0xc4>)
   139e2:	030e      	lsls	r6, r1, #12
   139e4:	004c      	lsls	r4, r1, #1
   139e6:	46ab      	mov	fp, r5
   139e8:	005d      	lsls	r5, r3, #1
   139ea:	4684      	mov	ip, r0
   139ec:	0b36      	lsrs	r6, r6, #12
   139ee:	0d64      	lsrs	r4, r4, #21
   139f0:	0fc9      	lsrs	r1, r1, #31
   139f2:	4690      	mov	r8, r2
   139f4:	0d6d      	lsrs	r5, r5, #21
   139f6:	0fdb      	lsrs	r3, r3, #31
   139f8:	42bc      	cmp	r4, r7
   139fa:	d02a      	beq.n	13a52 <__gedf2+0x82>
   139fc:	4f25      	ldr	r7, [pc, #148]	; (13a94 <__gedf2+0xc4>)
   139fe:	42bd      	cmp	r5, r7
   13a00:	d02d      	beq.n	13a5e <__gedf2+0x8e>
   13a02:	2c00      	cmp	r4, #0
   13a04:	d10f      	bne.n	13a26 <__gedf2+0x56>
   13a06:	4330      	orrs	r0, r6
   13a08:	0007      	movs	r7, r0
   13a0a:	4681      	mov	r9, r0
   13a0c:	4278      	negs	r0, r7
   13a0e:	4178      	adcs	r0, r7
   13a10:	b2c0      	uxtb	r0, r0
   13a12:	2d00      	cmp	r5, #0
   13a14:	d117      	bne.n	13a46 <__gedf2+0x76>
   13a16:	465f      	mov	r7, fp
   13a18:	433a      	orrs	r2, r7
   13a1a:	d114      	bne.n	13a46 <__gedf2+0x76>
   13a1c:	464b      	mov	r3, r9
   13a1e:	2000      	movs	r0, #0
   13a20:	2b00      	cmp	r3, #0
   13a22:	d00a      	beq.n	13a3a <__gedf2+0x6a>
   13a24:	e006      	b.n	13a34 <__gedf2+0x64>
   13a26:	2d00      	cmp	r5, #0
   13a28:	d102      	bne.n	13a30 <__gedf2+0x60>
   13a2a:	4658      	mov	r0, fp
   13a2c:	4302      	orrs	r2, r0
   13a2e:	d001      	beq.n	13a34 <__gedf2+0x64>
   13a30:	4299      	cmp	r1, r3
   13a32:	d018      	beq.n	13a66 <__gedf2+0x96>
   13a34:	4248      	negs	r0, r1
   13a36:	2101      	movs	r1, #1
   13a38:	4308      	orrs	r0, r1
   13a3a:	bc3c      	pop	{r2, r3, r4, r5}
   13a3c:	4690      	mov	r8, r2
   13a3e:	4699      	mov	r9, r3
   13a40:	46a2      	mov	sl, r4
   13a42:	46ab      	mov	fp, r5
   13a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a46:	2800      	cmp	r0, #0
   13a48:	d0f2      	beq.n	13a30 <__gedf2+0x60>
   13a4a:	2001      	movs	r0, #1
   13a4c:	3b01      	subs	r3, #1
   13a4e:	4318      	orrs	r0, r3
   13a50:	e7f3      	b.n	13a3a <__gedf2+0x6a>
   13a52:	0037      	movs	r7, r6
   13a54:	4307      	orrs	r7, r0
   13a56:	d0d1      	beq.n	139fc <__gedf2+0x2c>
   13a58:	2002      	movs	r0, #2
   13a5a:	4240      	negs	r0, r0
   13a5c:	e7ed      	b.n	13a3a <__gedf2+0x6a>
   13a5e:	465f      	mov	r7, fp
   13a60:	4317      	orrs	r7, r2
   13a62:	d0ce      	beq.n	13a02 <__gedf2+0x32>
   13a64:	e7f8      	b.n	13a58 <__gedf2+0x88>
   13a66:	42ac      	cmp	r4, r5
   13a68:	dce4      	bgt.n	13a34 <__gedf2+0x64>
   13a6a:	da03      	bge.n	13a74 <__gedf2+0xa4>
   13a6c:	1e48      	subs	r0, r1, #1
   13a6e:	2101      	movs	r1, #1
   13a70:	4308      	orrs	r0, r1
   13a72:	e7e2      	b.n	13a3a <__gedf2+0x6a>
   13a74:	455e      	cmp	r6, fp
   13a76:	d8dd      	bhi.n	13a34 <__gedf2+0x64>
   13a78:	d006      	beq.n	13a88 <__gedf2+0xb8>
   13a7a:	2000      	movs	r0, #0
   13a7c:	455e      	cmp	r6, fp
   13a7e:	d2dc      	bcs.n	13a3a <__gedf2+0x6a>
   13a80:	2301      	movs	r3, #1
   13a82:	1e48      	subs	r0, r1, #1
   13a84:	4318      	orrs	r0, r3
   13a86:	e7d8      	b.n	13a3a <__gedf2+0x6a>
   13a88:	45c4      	cmp	ip, r8
   13a8a:	d8d3      	bhi.n	13a34 <__gedf2+0x64>
   13a8c:	2000      	movs	r0, #0
   13a8e:	45c4      	cmp	ip, r8
   13a90:	d3f6      	bcc.n	13a80 <__gedf2+0xb0>
   13a92:	e7d2      	b.n	13a3a <__gedf2+0x6a>
   13a94:	000007ff 	.word	0x000007ff

00013a98 <__ledf2>:
   13a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a9a:	464e      	mov	r6, r9
   13a9c:	4645      	mov	r5, r8
   13a9e:	46de      	mov	lr, fp
   13aa0:	4657      	mov	r7, sl
   13aa2:	005c      	lsls	r4, r3, #1
   13aa4:	b5e0      	push	{r5, r6, r7, lr}
   13aa6:	031f      	lsls	r7, r3, #12
   13aa8:	0fdb      	lsrs	r3, r3, #31
   13aaa:	4699      	mov	r9, r3
   13aac:	4b2a      	ldr	r3, [pc, #168]	; (13b58 <__ledf2+0xc0>)
   13aae:	030e      	lsls	r6, r1, #12
   13ab0:	004d      	lsls	r5, r1, #1
   13ab2:	0fc9      	lsrs	r1, r1, #31
   13ab4:	4684      	mov	ip, r0
   13ab6:	0b36      	lsrs	r6, r6, #12
   13ab8:	0d6d      	lsrs	r5, r5, #21
   13aba:	468b      	mov	fp, r1
   13abc:	4690      	mov	r8, r2
   13abe:	0b3f      	lsrs	r7, r7, #12
   13ac0:	0d64      	lsrs	r4, r4, #21
   13ac2:	429d      	cmp	r5, r3
   13ac4:	d020      	beq.n	13b08 <__ledf2+0x70>
   13ac6:	4b24      	ldr	r3, [pc, #144]	; (13b58 <__ledf2+0xc0>)
   13ac8:	429c      	cmp	r4, r3
   13aca:	d022      	beq.n	13b12 <__ledf2+0x7a>
   13acc:	2d00      	cmp	r5, #0
   13ace:	d112      	bne.n	13af6 <__ledf2+0x5e>
   13ad0:	4330      	orrs	r0, r6
   13ad2:	4243      	negs	r3, r0
   13ad4:	4143      	adcs	r3, r0
   13ad6:	b2db      	uxtb	r3, r3
   13ad8:	2c00      	cmp	r4, #0
   13ada:	d01f      	beq.n	13b1c <__ledf2+0x84>
   13adc:	2b00      	cmp	r3, #0
   13ade:	d00c      	beq.n	13afa <__ledf2+0x62>
   13ae0:	464b      	mov	r3, r9
   13ae2:	2001      	movs	r0, #1
   13ae4:	3b01      	subs	r3, #1
   13ae6:	4303      	orrs	r3, r0
   13ae8:	0018      	movs	r0, r3
   13aea:	bc3c      	pop	{r2, r3, r4, r5}
   13aec:	4690      	mov	r8, r2
   13aee:	4699      	mov	r9, r3
   13af0:	46a2      	mov	sl, r4
   13af2:	46ab      	mov	fp, r5
   13af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13af6:	2c00      	cmp	r4, #0
   13af8:	d016      	beq.n	13b28 <__ledf2+0x90>
   13afa:	45cb      	cmp	fp, r9
   13afc:	d017      	beq.n	13b2e <__ledf2+0x96>
   13afe:	465b      	mov	r3, fp
   13b00:	4259      	negs	r1, r3
   13b02:	2301      	movs	r3, #1
   13b04:	430b      	orrs	r3, r1
   13b06:	e7ef      	b.n	13ae8 <__ledf2+0x50>
   13b08:	0031      	movs	r1, r6
   13b0a:	2302      	movs	r3, #2
   13b0c:	4301      	orrs	r1, r0
   13b0e:	d1eb      	bne.n	13ae8 <__ledf2+0x50>
   13b10:	e7d9      	b.n	13ac6 <__ledf2+0x2e>
   13b12:	0039      	movs	r1, r7
   13b14:	2302      	movs	r3, #2
   13b16:	4311      	orrs	r1, r2
   13b18:	d1e6      	bne.n	13ae8 <__ledf2+0x50>
   13b1a:	e7d7      	b.n	13acc <__ledf2+0x34>
   13b1c:	433a      	orrs	r2, r7
   13b1e:	d1dd      	bne.n	13adc <__ledf2+0x44>
   13b20:	2300      	movs	r3, #0
   13b22:	2800      	cmp	r0, #0
   13b24:	d0e0      	beq.n	13ae8 <__ledf2+0x50>
   13b26:	e7ea      	b.n	13afe <__ledf2+0x66>
   13b28:	433a      	orrs	r2, r7
   13b2a:	d1e6      	bne.n	13afa <__ledf2+0x62>
   13b2c:	e7e7      	b.n	13afe <__ledf2+0x66>
   13b2e:	42a5      	cmp	r5, r4
   13b30:	dce5      	bgt.n	13afe <__ledf2+0x66>
   13b32:	db05      	blt.n	13b40 <__ledf2+0xa8>
   13b34:	42be      	cmp	r6, r7
   13b36:	d8e2      	bhi.n	13afe <__ledf2+0x66>
   13b38:	d007      	beq.n	13b4a <__ledf2+0xb2>
   13b3a:	2300      	movs	r3, #0
   13b3c:	42be      	cmp	r6, r7
   13b3e:	d2d3      	bcs.n	13ae8 <__ledf2+0x50>
   13b40:	4659      	mov	r1, fp
   13b42:	2301      	movs	r3, #1
   13b44:	3901      	subs	r1, #1
   13b46:	430b      	orrs	r3, r1
   13b48:	e7ce      	b.n	13ae8 <__ledf2+0x50>
   13b4a:	45c4      	cmp	ip, r8
   13b4c:	d8d7      	bhi.n	13afe <__ledf2+0x66>
   13b4e:	2300      	movs	r3, #0
   13b50:	45c4      	cmp	ip, r8
   13b52:	d3f5      	bcc.n	13b40 <__ledf2+0xa8>
   13b54:	e7c8      	b.n	13ae8 <__ledf2+0x50>
   13b56:	46c0      	nop			; (mov r8, r8)
   13b58:	000007ff 	.word	0x000007ff

00013b5c <__libc_init_array>:
   13b5c:	b570      	push	{r4, r5, r6, lr}
   13b5e:	4e0d      	ldr	r6, [pc, #52]	; (13b94 <__libc_init_array+0x38>)
   13b60:	4d0d      	ldr	r5, [pc, #52]	; (13b98 <__libc_init_array+0x3c>)
   13b62:	2400      	movs	r4, #0
   13b64:	1bad      	subs	r5, r5, r6
   13b66:	10ad      	asrs	r5, r5, #2
   13b68:	d005      	beq.n	13b76 <__libc_init_array+0x1a>
   13b6a:	00a3      	lsls	r3, r4, #2
   13b6c:	58f3      	ldr	r3, [r6, r3]
   13b6e:	3401      	adds	r4, #1
   13b70:	4798      	blx	r3
   13b72:	42a5      	cmp	r5, r4
   13b74:	d1f9      	bne.n	13b6a <__libc_init_array+0xe>
   13b76:	f007 fcdf 	bl	1b538 <_init>
   13b7a:	4e08      	ldr	r6, [pc, #32]	; (13b9c <__libc_init_array+0x40>)
   13b7c:	4d08      	ldr	r5, [pc, #32]	; (13ba0 <__libc_init_array+0x44>)
   13b7e:	2400      	movs	r4, #0
   13b80:	1bad      	subs	r5, r5, r6
   13b82:	10ad      	asrs	r5, r5, #2
   13b84:	d005      	beq.n	13b92 <__libc_init_array+0x36>
   13b86:	00a3      	lsls	r3, r4, #2
   13b88:	58f3      	ldr	r3, [r6, r3]
   13b8a:	3401      	adds	r4, #1
   13b8c:	4798      	blx	r3
   13b8e:	42a5      	cmp	r5, r4
   13b90:	d1f9      	bne.n	13b86 <__libc_init_array+0x2a>
   13b92:	bd70      	pop	{r4, r5, r6, pc}
   13b94:	0001b544 	.word	0x0001b544
   13b98:	0001b544 	.word	0x0001b544
   13b9c:	0001b544 	.word	0x0001b544
   13ba0:	0001b54c 	.word	0x0001b54c

00013ba4 <memcpy>:
   13ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ba6:	0005      	movs	r5, r0
   13ba8:	2a0f      	cmp	r2, #15
   13baa:	d92f      	bls.n	13c0c <memcpy+0x68>
   13bac:	000b      	movs	r3, r1
   13bae:	4303      	orrs	r3, r0
   13bb0:	079b      	lsls	r3, r3, #30
   13bb2:	d134      	bne.n	13c1e <memcpy+0x7a>
   13bb4:	0016      	movs	r6, r2
   13bb6:	000c      	movs	r4, r1
   13bb8:	0003      	movs	r3, r0
   13bba:	3e10      	subs	r6, #16
   13bbc:	0935      	lsrs	r5, r6, #4
   13bbe:	3501      	adds	r5, #1
   13bc0:	012d      	lsls	r5, r5, #4
   13bc2:	1945      	adds	r5, r0, r5
   13bc4:	6827      	ldr	r7, [r4, #0]
   13bc6:	601f      	str	r7, [r3, #0]
   13bc8:	6867      	ldr	r7, [r4, #4]
   13bca:	605f      	str	r7, [r3, #4]
   13bcc:	68a7      	ldr	r7, [r4, #8]
   13bce:	609f      	str	r7, [r3, #8]
   13bd0:	68e7      	ldr	r7, [r4, #12]
   13bd2:	3410      	adds	r4, #16
   13bd4:	60df      	str	r7, [r3, #12]
   13bd6:	3310      	adds	r3, #16
   13bd8:	429d      	cmp	r5, r3
   13bda:	d1f3      	bne.n	13bc4 <memcpy+0x20>
   13bdc:	230f      	movs	r3, #15
   13bde:	439e      	bics	r6, r3
   13be0:	3610      	adds	r6, #16
   13be2:	1985      	adds	r5, r0, r6
   13be4:	1989      	adds	r1, r1, r6
   13be6:	4013      	ands	r3, r2
   13be8:	2b03      	cmp	r3, #3
   13bea:	d91a      	bls.n	13c22 <memcpy+0x7e>
   13bec:	1f1e      	subs	r6, r3, #4
   13bee:	2300      	movs	r3, #0
   13bf0:	08b4      	lsrs	r4, r6, #2
   13bf2:	3401      	adds	r4, #1
   13bf4:	00a4      	lsls	r4, r4, #2
   13bf6:	58cf      	ldr	r7, [r1, r3]
   13bf8:	50ef      	str	r7, [r5, r3]
   13bfa:	3304      	adds	r3, #4
   13bfc:	42a3      	cmp	r3, r4
   13bfe:	d1fa      	bne.n	13bf6 <memcpy+0x52>
   13c00:	2403      	movs	r4, #3
   13c02:	43a6      	bics	r6, r4
   13c04:	1d33      	adds	r3, r6, #4
   13c06:	4022      	ands	r2, r4
   13c08:	18c9      	adds	r1, r1, r3
   13c0a:	18ed      	adds	r5, r5, r3
   13c0c:	2a00      	cmp	r2, #0
   13c0e:	d005      	beq.n	13c1c <memcpy+0x78>
   13c10:	2300      	movs	r3, #0
   13c12:	5ccc      	ldrb	r4, [r1, r3]
   13c14:	54ec      	strb	r4, [r5, r3]
   13c16:	3301      	adds	r3, #1
   13c18:	4293      	cmp	r3, r2
   13c1a:	d1fa      	bne.n	13c12 <memcpy+0x6e>
   13c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c1e:	0005      	movs	r5, r0
   13c20:	e7f6      	b.n	13c10 <memcpy+0x6c>
   13c22:	001a      	movs	r2, r3
   13c24:	e7f2      	b.n	13c0c <memcpy+0x68>
   13c26:	46c0      	nop			; (mov r8, r8)

00013c28 <memset>:
   13c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c2a:	0783      	lsls	r3, r0, #30
   13c2c:	d043      	beq.n	13cb6 <memset+0x8e>
   13c2e:	1e54      	subs	r4, r2, #1
   13c30:	2a00      	cmp	r2, #0
   13c32:	d03f      	beq.n	13cb4 <memset+0x8c>
   13c34:	b2ce      	uxtb	r6, r1
   13c36:	0002      	movs	r2, r0
   13c38:	2503      	movs	r5, #3
   13c3a:	e002      	b.n	13c42 <memset+0x1a>
   13c3c:	001a      	movs	r2, r3
   13c3e:	3c01      	subs	r4, #1
   13c40:	d338      	bcc.n	13cb4 <memset+0x8c>
   13c42:	1c53      	adds	r3, r2, #1
   13c44:	7016      	strb	r6, [r2, #0]
   13c46:	422b      	tst	r3, r5
   13c48:	d1f8      	bne.n	13c3c <memset+0x14>
   13c4a:	2c03      	cmp	r4, #3
   13c4c:	d92a      	bls.n	13ca4 <memset+0x7c>
   13c4e:	22ff      	movs	r2, #255	; 0xff
   13c50:	400a      	ands	r2, r1
   13c52:	0215      	lsls	r5, r2, #8
   13c54:	4315      	orrs	r5, r2
   13c56:	042a      	lsls	r2, r5, #16
   13c58:	4315      	orrs	r5, r2
   13c5a:	2c0f      	cmp	r4, #15
   13c5c:	d914      	bls.n	13c88 <memset+0x60>
   13c5e:	0027      	movs	r7, r4
   13c60:	001a      	movs	r2, r3
   13c62:	3f10      	subs	r7, #16
   13c64:	093e      	lsrs	r6, r7, #4
   13c66:	3601      	adds	r6, #1
   13c68:	0136      	lsls	r6, r6, #4
   13c6a:	199e      	adds	r6, r3, r6
   13c6c:	6015      	str	r5, [r2, #0]
   13c6e:	6055      	str	r5, [r2, #4]
   13c70:	6095      	str	r5, [r2, #8]
   13c72:	60d5      	str	r5, [r2, #12]
   13c74:	3210      	adds	r2, #16
   13c76:	4296      	cmp	r6, r2
   13c78:	d1f8      	bne.n	13c6c <memset+0x44>
   13c7a:	220f      	movs	r2, #15
   13c7c:	4397      	bics	r7, r2
   13c7e:	3710      	adds	r7, #16
   13c80:	19db      	adds	r3, r3, r7
   13c82:	4014      	ands	r4, r2
   13c84:	2c03      	cmp	r4, #3
   13c86:	d90d      	bls.n	13ca4 <memset+0x7c>
   13c88:	001a      	movs	r2, r3
   13c8a:	1f27      	subs	r7, r4, #4
   13c8c:	08be      	lsrs	r6, r7, #2
   13c8e:	3601      	adds	r6, #1
   13c90:	00b6      	lsls	r6, r6, #2
   13c92:	199e      	adds	r6, r3, r6
   13c94:	c220      	stmia	r2!, {r5}
   13c96:	42b2      	cmp	r2, r6
   13c98:	d1fc      	bne.n	13c94 <memset+0x6c>
   13c9a:	2203      	movs	r2, #3
   13c9c:	4397      	bics	r7, r2
   13c9e:	3704      	adds	r7, #4
   13ca0:	19db      	adds	r3, r3, r7
   13ca2:	4014      	ands	r4, r2
   13ca4:	2c00      	cmp	r4, #0
   13ca6:	d005      	beq.n	13cb4 <memset+0x8c>
   13ca8:	b2c9      	uxtb	r1, r1
   13caa:	191c      	adds	r4, r3, r4
   13cac:	7019      	strb	r1, [r3, #0]
   13cae:	3301      	adds	r3, #1
   13cb0:	429c      	cmp	r4, r3
   13cb2:	d1fb      	bne.n	13cac <memset+0x84>
   13cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cb6:	0014      	movs	r4, r2
   13cb8:	0003      	movs	r3, r0
   13cba:	e7c6      	b.n	13c4a <memset+0x22>

00013cbc <printf>:
   13cbc:	b40f      	push	{r0, r1, r2, r3}
   13cbe:	b500      	push	{lr}
   13cc0:	4906      	ldr	r1, [pc, #24]	; (13cdc <printf+0x20>)
   13cc2:	b083      	sub	sp, #12
   13cc4:	ab04      	add	r3, sp, #16
   13cc6:	6808      	ldr	r0, [r1, #0]
   13cc8:	cb04      	ldmia	r3!, {r2}
   13cca:	6881      	ldr	r1, [r0, #8]
   13ccc:	9301      	str	r3, [sp, #4]
   13cce:	f001 fcb7 	bl	15640 <_vfprintf_r>
   13cd2:	b003      	add	sp, #12
   13cd4:	bc08      	pop	{r3}
   13cd6:	b004      	add	sp, #16
   13cd8:	4718      	bx	r3
   13cda:	46c0      	nop			; (mov r8, r8)
   13cdc:	20000038 	.word	0x20000038

00013ce0 <_puts_r>:
   13ce0:	b530      	push	{r4, r5, lr}
   13ce2:	0004      	movs	r4, r0
   13ce4:	b089      	sub	sp, #36	; 0x24
   13ce6:	0008      	movs	r0, r1
   13ce8:	000d      	movs	r5, r1
   13cea:	f000 f973 	bl	13fd4 <strlen>
   13cee:	ab04      	add	r3, sp, #16
   13cf0:	4a21      	ldr	r2, [pc, #132]	; (13d78 <_puts_r+0x98>)
   13cf2:	9301      	str	r3, [sp, #4]
   13cf4:	2302      	movs	r3, #2
   13cf6:	9206      	str	r2, [sp, #24]
   13cf8:	2201      	movs	r2, #1
   13cfa:	9302      	str	r3, [sp, #8]
   13cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13cfe:	9005      	str	r0, [sp, #20]
   13d00:	3001      	adds	r0, #1
   13d02:	9504      	str	r5, [sp, #16]
   13d04:	9207      	str	r2, [sp, #28]
   13d06:	9003      	str	r0, [sp, #12]
   13d08:	68a5      	ldr	r5, [r4, #8]
   13d0a:	2b00      	cmp	r3, #0
   13d0c:	d02f      	beq.n	13d6e <_puts_r+0x8e>
   13d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13d10:	07db      	lsls	r3, r3, #31
   13d12:	d424      	bmi.n	13d5e <_puts_r+0x7e>
   13d14:	230c      	movs	r3, #12
   13d16:	5eea      	ldrsh	r2, [r5, r3]
   13d18:	b291      	uxth	r1, r2
   13d1a:	058b      	lsls	r3, r1, #22
   13d1c:	d51c      	bpl.n	13d58 <_puts_r+0x78>
   13d1e:	2380      	movs	r3, #128	; 0x80
   13d20:	019b      	lsls	r3, r3, #6
   13d22:	4219      	tst	r1, r3
   13d24:	d105      	bne.n	13d32 <_puts_r+0x52>
   13d26:	4313      	orrs	r3, r2
   13d28:	81ab      	strh	r3, [r5, #12]
   13d2a:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   13d2c:	4b13      	ldr	r3, [pc, #76]	; (13d7c <_puts_r+0x9c>)
   13d2e:	4013      	ands	r3, r2
   13d30:	666b      	str	r3, [r5, #100]	; 0x64
   13d32:	0020      	movs	r0, r4
   13d34:	aa01      	add	r2, sp, #4
   13d36:	0029      	movs	r1, r5
   13d38:	f004 fba8 	bl	1848c <__sfvwrite_r>
   13d3c:	1e44      	subs	r4, r0, #1
   13d3e:	41a0      	sbcs	r0, r4
   13d40:	4244      	negs	r4, r0
   13d42:	200a      	movs	r0, #10
   13d44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13d46:	4304      	orrs	r4, r0
   13d48:	07db      	lsls	r3, r3, #31
   13d4a:	d402      	bmi.n	13d52 <_puts_r+0x72>
   13d4c:	89ab      	ldrh	r3, [r5, #12]
   13d4e:	059b      	lsls	r3, r3, #22
   13d50:	d509      	bpl.n	13d66 <_puts_r+0x86>
   13d52:	0020      	movs	r0, r4
   13d54:	b009      	add	sp, #36	; 0x24
   13d56:	bd30      	pop	{r4, r5, pc}
   13d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13d5a:	f004 fd51 	bl	18800 <__retarget_lock_acquire_recursive>
   13d5e:	230c      	movs	r3, #12
   13d60:	5eea      	ldrsh	r2, [r5, r3]
   13d62:	b291      	uxth	r1, r2
   13d64:	e7db      	b.n	13d1e <_puts_r+0x3e>
   13d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13d68:	f004 fd4c 	bl	18804 <__retarget_lock_release_recursive>
   13d6c:	e7f1      	b.n	13d52 <_puts_r+0x72>
   13d6e:	0020      	movs	r0, r4
   13d70:	f004 fa04 	bl	1817c <__sinit>
   13d74:	e7cb      	b.n	13d0e <_puts_r+0x2e>
   13d76:	46c0      	nop			; (mov r8, r8)
   13d78:	0001afc8 	.word	0x0001afc8
   13d7c:	ffffdfff 	.word	0xffffdfff

00013d80 <puts>:
   13d80:	b510      	push	{r4, lr}
   13d82:	4b03      	ldr	r3, [pc, #12]	; (13d90 <puts+0x10>)
   13d84:	0001      	movs	r1, r0
   13d86:	6818      	ldr	r0, [r3, #0]
   13d88:	f7ff ffaa 	bl	13ce0 <_puts_r>
   13d8c:	bd10      	pop	{r4, pc}
   13d8e:	46c0      	nop			; (mov r8, r8)
   13d90:	20000038 	.word	0x20000038

00013d94 <srand>:
   13d94:	2200      	movs	r2, #0
   13d96:	4b03      	ldr	r3, [pc, #12]	; (13da4 <srand+0x10>)
   13d98:	681b      	ldr	r3, [r3, #0]
   13d9a:	33a8      	adds	r3, #168	; 0xa8
   13d9c:	6018      	str	r0, [r3, #0]
   13d9e:	605a      	str	r2, [r3, #4]
   13da0:	4770      	bx	lr
   13da2:	46c0      	nop			; (mov r8, r8)
   13da4:	20000038 	.word	0x20000038

00013da8 <rand>:
   13da8:	b510      	push	{r4, lr}
   13daa:	4b09      	ldr	r3, [pc, #36]	; (13dd0 <rand+0x28>)
   13dac:	4a09      	ldr	r2, [pc, #36]	; (13dd4 <rand+0x2c>)
   13dae:	681c      	ldr	r4, [r3, #0]
   13db0:	4b09      	ldr	r3, [pc, #36]	; (13dd8 <rand+0x30>)
   13db2:	34a8      	adds	r4, #168	; 0xa8
   13db4:	6820      	ldr	r0, [r4, #0]
   13db6:	6861      	ldr	r1, [r4, #4]
   13db8:	f7fc ffd0 	bl	10d5c <__aeabi_lmul>
   13dbc:	2201      	movs	r2, #1
   13dbe:	2300      	movs	r3, #0
   13dc0:	1880      	adds	r0, r0, r2
   13dc2:	4159      	adcs	r1, r3
   13dc4:	6020      	str	r0, [r4, #0]
   13dc6:	6061      	str	r1, [r4, #4]
   13dc8:	0048      	lsls	r0, r1, #1
   13dca:	0840      	lsrs	r0, r0, #1
   13dcc:	bd10      	pop	{r4, pc}
   13dce:	46c0      	nop			; (mov r8, r8)
   13dd0:	20000038 	.word	0x20000038
   13dd4:	4c957f2d 	.word	0x4c957f2d
   13dd8:	5851f42d 	.word	0x5851f42d

00013ddc <setbuf>:
   13ddc:	424a      	negs	r2, r1
   13dde:	414a      	adcs	r2, r1
   13de0:	2380      	movs	r3, #128	; 0x80
   13de2:	b510      	push	{r4, lr}
   13de4:	0052      	lsls	r2, r2, #1
   13de6:	00db      	lsls	r3, r3, #3
   13de8:	f000 f802 	bl	13df0 <setvbuf>
   13dec:	bd10      	pop	{r4, pc}
   13dee:	46c0      	nop			; (mov r8, r8)

00013df0 <setvbuf>:
   13df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13df2:	4647      	mov	r7, r8
   13df4:	46ce      	mov	lr, r9
   13df6:	b580      	push	{r7, lr}
   13df8:	001f      	movs	r7, r3
   13dfa:	4b63      	ldr	r3, [pc, #396]	; (13f88 <setvbuf+0x198>)
   13dfc:	b083      	sub	sp, #12
   13dfe:	681d      	ldr	r5, [r3, #0]
   13e00:	0004      	movs	r4, r0
   13e02:	4688      	mov	r8, r1
   13e04:	0016      	movs	r6, r2
   13e06:	2d00      	cmp	r5, #0
   13e08:	d002      	beq.n	13e10 <setvbuf+0x20>
   13e0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d066      	beq.n	13ede <setvbuf+0xee>
   13e10:	2e02      	cmp	r6, #2
   13e12:	d005      	beq.n	13e20 <setvbuf+0x30>
   13e14:	2e01      	cmp	r6, #1
   13e16:	d900      	bls.n	13e1a <setvbuf+0x2a>
   13e18:	e0a1      	b.n	13f5e <setvbuf+0x16e>
   13e1a:	2f00      	cmp	r7, #0
   13e1c:	da00      	bge.n	13e20 <setvbuf+0x30>
   13e1e:	e09e      	b.n	13f5e <setvbuf+0x16e>
   13e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13e22:	07db      	lsls	r3, r3, #31
   13e24:	d533      	bpl.n	13e8e <setvbuf+0x9e>
   13e26:	0021      	movs	r1, r4
   13e28:	0028      	movs	r0, r5
   13e2a:	f004 f94d 	bl	180c8 <_fflush_r>
   13e2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13e30:	2900      	cmp	r1, #0
   13e32:	d008      	beq.n	13e46 <setvbuf+0x56>
   13e34:	0023      	movs	r3, r4
   13e36:	3340      	adds	r3, #64	; 0x40
   13e38:	4299      	cmp	r1, r3
   13e3a:	d002      	beq.n	13e42 <setvbuf+0x52>
   13e3c:	0028      	movs	r0, r5
   13e3e:	f004 fa47 	bl	182d0 <_free_r>
   13e42:	2300      	movs	r3, #0
   13e44:	6323      	str	r3, [r4, #48]	; 0x30
   13e46:	2300      	movs	r3, #0
   13e48:	61a3      	str	r3, [r4, #24]
   13e4a:	6063      	str	r3, [r4, #4]
   13e4c:	220c      	movs	r2, #12
   13e4e:	5ea3      	ldrsh	r3, [r4, r2]
   13e50:	061a      	lsls	r2, r3, #24
   13e52:	d43d      	bmi.n	13ed0 <setvbuf+0xe0>
   13e54:	4a4d      	ldr	r2, [pc, #308]	; (13f8c <setvbuf+0x19c>)
   13e56:	4013      	ands	r3, r2
   13e58:	81a3      	strh	r3, [r4, #12]
   13e5a:	2e02      	cmp	r6, #2
   13e5c:	d01e      	beq.n	13e9c <setvbuf+0xac>
   13e5e:	ab01      	add	r3, sp, #4
   13e60:	466a      	mov	r2, sp
   13e62:	0021      	movs	r1, r4
   13e64:	0028      	movs	r0, r5
   13e66:	f004 fccf 	bl	18808 <__swhatbuf_r>
   13e6a:	89a3      	ldrh	r3, [r4, #12]
   13e6c:	4318      	orrs	r0, r3
   13e6e:	81a0      	strh	r0, [r4, #12]
   13e70:	2f00      	cmp	r7, #0
   13e72:	d138      	bne.n	13ee6 <setvbuf+0xf6>
   13e74:	9f00      	ldr	r7, [sp, #0]
   13e76:	0038      	movs	r0, r7
   13e78:	f004 fd3e 	bl	188f8 <malloc>
   13e7c:	4680      	mov	r8, r0
   13e7e:	2800      	cmp	r0, #0
   13e80:	d100      	bne.n	13e84 <setvbuf+0x94>
   13e82:	e06f      	b.n	13f64 <setvbuf+0x174>
   13e84:	2280      	movs	r2, #128	; 0x80
   13e86:	89a3      	ldrh	r3, [r4, #12]
   13e88:	4313      	orrs	r3, r2
   13e8a:	81a3      	strh	r3, [r4, #12]
   13e8c:	e02e      	b.n	13eec <setvbuf+0xfc>
   13e8e:	89a3      	ldrh	r3, [r4, #12]
   13e90:	059b      	lsls	r3, r3, #22
   13e92:	d4c8      	bmi.n	13e26 <setvbuf+0x36>
   13e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13e96:	f004 fcb3 	bl	18800 <__retarget_lock_acquire_recursive>
   13e9a:	e7c4      	b.n	13e26 <setvbuf+0x36>
   13e9c:	2500      	movs	r5, #0
   13e9e:	2202      	movs	r2, #2
   13ea0:	4313      	orrs	r3, r2
   13ea2:	2200      	movs	r2, #0
   13ea4:	60a2      	str	r2, [r4, #8]
   13ea6:	0022      	movs	r2, r4
   13ea8:	3243      	adds	r2, #67	; 0x43
   13eaa:	6022      	str	r2, [r4, #0]
   13eac:	6122      	str	r2, [r4, #16]
   13eae:	2201      	movs	r2, #1
   13eb0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13eb2:	81a3      	strh	r3, [r4, #12]
   13eb4:	6162      	str	r2, [r4, #20]
   13eb6:	4211      	tst	r1, r2
   13eb8:	d104      	bne.n	13ec4 <setvbuf+0xd4>
   13eba:	059b      	lsls	r3, r3, #22
   13ebc:	d402      	bmi.n	13ec4 <setvbuf+0xd4>
   13ebe:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13ec0:	f004 fca0 	bl	18804 <__retarget_lock_release_recursive>
   13ec4:	0028      	movs	r0, r5
   13ec6:	b003      	add	sp, #12
   13ec8:	bc0c      	pop	{r2, r3}
   13eca:	4690      	mov	r8, r2
   13ecc:	4699      	mov	r9, r3
   13ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ed0:	6921      	ldr	r1, [r4, #16]
   13ed2:	0028      	movs	r0, r5
   13ed4:	f004 f9fc 	bl	182d0 <_free_r>
   13ed8:	220c      	movs	r2, #12
   13eda:	5ea3      	ldrsh	r3, [r4, r2]
   13edc:	e7ba      	b.n	13e54 <setvbuf+0x64>
   13ede:	0028      	movs	r0, r5
   13ee0:	f004 f94c 	bl	1817c <__sinit>
   13ee4:	e794      	b.n	13e10 <setvbuf+0x20>
   13ee6:	4643      	mov	r3, r8
   13ee8:	2b00      	cmp	r3, #0
   13eea:	d0c4      	beq.n	13e76 <setvbuf+0x86>
   13eec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13eee:	2b00      	cmp	r3, #0
   13ef0:	d027      	beq.n	13f42 <setvbuf+0x152>
   13ef2:	9b00      	ldr	r3, [sp, #0]
   13ef4:	429f      	cmp	r7, r3
   13ef6:	d02a      	beq.n	13f4e <setvbuf+0x15e>
   13ef8:	2380      	movs	r3, #128	; 0x80
   13efa:	89a2      	ldrh	r2, [r4, #12]
   13efc:	011b      	lsls	r3, r3, #4
   13efe:	4313      	orrs	r3, r2
   13f00:	b21b      	sxth	r3, r3
   13f02:	81a3      	strh	r3, [r4, #12]
   13f04:	2e01      	cmp	r6, #1
   13f06:	d026      	beq.n	13f56 <setvbuf+0x166>
   13f08:	4642      	mov	r2, r8
   13f0a:	6022      	str	r2, [r4, #0]
   13f0c:	6122      	str	r2, [r4, #16]
   13f0e:	2208      	movs	r2, #8
   13f10:	b29b      	uxth	r3, r3
   13f12:	6167      	str	r7, [r4, #20]
   13f14:	401a      	ands	r2, r3
   13f16:	d00b      	beq.n	13f30 <setvbuf+0x140>
   13f18:	07da      	lsls	r2, r3, #31
   13f1a:	d510      	bpl.n	13f3e <setvbuf+0x14e>
   13f1c:	2200      	movs	r2, #0
   13f1e:	2501      	movs	r5, #1
   13f20:	60a2      	str	r2, [r4, #8]
   13f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13f24:	427f      	negs	r7, r7
   13f26:	61a7      	str	r7, [r4, #24]
   13f28:	4015      	ands	r5, r2
   13f2a:	d0c6      	beq.n	13eba <setvbuf+0xca>
   13f2c:	2500      	movs	r5, #0
   13f2e:	e7c9      	b.n	13ec4 <setvbuf+0xd4>
   13f30:	60a2      	str	r2, [r4, #8]
   13f32:	2501      	movs	r5, #1
   13f34:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13f36:	4015      	ands	r5, r2
   13f38:	d0bf      	beq.n	13eba <setvbuf+0xca>
   13f3a:	2500      	movs	r5, #0
   13f3c:	e7c2      	b.n	13ec4 <setvbuf+0xd4>
   13f3e:	60a7      	str	r7, [r4, #8]
   13f40:	e7f7      	b.n	13f32 <setvbuf+0x142>
   13f42:	0028      	movs	r0, r5
   13f44:	f004 f91a 	bl	1817c <__sinit>
   13f48:	9b00      	ldr	r3, [sp, #0]
   13f4a:	429f      	cmp	r7, r3
   13f4c:	d1d4      	bne.n	13ef8 <setvbuf+0x108>
   13f4e:	220c      	movs	r2, #12
   13f50:	5ea3      	ldrsh	r3, [r4, r2]
   13f52:	2e01      	cmp	r6, #1
   13f54:	d1d8      	bne.n	13f08 <setvbuf+0x118>
   13f56:	2201      	movs	r2, #1
   13f58:	4313      	orrs	r3, r2
   13f5a:	81a3      	strh	r3, [r4, #12]
   13f5c:	e7d4      	b.n	13f08 <setvbuf+0x118>
   13f5e:	2501      	movs	r5, #1
   13f60:	426d      	negs	r5, r5
   13f62:	e7af      	b.n	13ec4 <setvbuf+0xd4>
   13f64:	9b00      	ldr	r3, [sp, #0]
   13f66:	4699      	mov	r9, r3
   13f68:	42bb      	cmp	r3, r7
   13f6a:	d005      	beq.n	13f78 <setvbuf+0x188>
   13f6c:	0018      	movs	r0, r3
   13f6e:	f004 fcc3 	bl	188f8 <malloc>
   13f72:	4680      	mov	r8, r0
   13f74:	2800      	cmp	r0, #0
   13f76:	d104      	bne.n	13f82 <setvbuf+0x192>
   13f78:	2501      	movs	r5, #1
   13f7a:	220c      	movs	r2, #12
   13f7c:	5ea3      	ldrsh	r3, [r4, r2]
   13f7e:	426d      	negs	r5, r5
   13f80:	e78d      	b.n	13e9e <setvbuf+0xae>
   13f82:	464f      	mov	r7, r9
   13f84:	e77e      	b.n	13e84 <setvbuf+0x94>
   13f86:	46c0      	nop			; (mov r8, r8)
   13f88:	20000038 	.word	0x20000038
   13f8c:	fffff35c 	.word	0xfffff35c

00013f90 <sprintf>:
   13f90:	b40e      	push	{r1, r2, r3}
   13f92:	b510      	push	{r4, lr}
   13f94:	b09d      	sub	sp, #116	; 0x74
   13f96:	a902      	add	r1, sp, #8
   13f98:	9002      	str	r0, [sp, #8]
   13f9a:	6108      	str	r0, [r1, #16]
   13f9c:	480b      	ldr	r0, [pc, #44]	; (13fcc <sprintf+0x3c>)
   13f9e:	2482      	movs	r4, #130	; 0x82
   13fa0:	6088      	str	r0, [r1, #8]
   13fa2:	6148      	str	r0, [r1, #20]
   13fa4:	2001      	movs	r0, #1
   13fa6:	4240      	negs	r0, r0
   13fa8:	ab1f      	add	r3, sp, #124	; 0x7c
   13faa:	81c8      	strh	r0, [r1, #14]
   13fac:	4808      	ldr	r0, [pc, #32]	; (13fd0 <sprintf+0x40>)
   13fae:	cb04      	ldmia	r3!, {r2}
   13fb0:	00a4      	lsls	r4, r4, #2
   13fb2:	6800      	ldr	r0, [r0, #0]
   13fb4:	9301      	str	r3, [sp, #4]
   13fb6:	818c      	strh	r4, [r1, #12]
   13fb8:	f000 f83e 	bl	14038 <_svfprintf_r>
   13fbc:	2300      	movs	r3, #0
   13fbe:	9a02      	ldr	r2, [sp, #8]
   13fc0:	7013      	strb	r3, [r2, #0]
   13fc2:	b01d      	add	sp, #116	; 0x74
   13fc4:	bc10      	pop	{r4}
   13fc6:	bc08      	pop	{r3}
   13fc8:	b003      	add	sp, #12
   13fca:	4718      	bx	r3
   13fcc:	7fffffff 	.word	0x7fffffff
   13fd0:	20000038 	.word	0x20000038

00013fd4 <strlen>:
   13fd4:	b510      	push	{r4, lr}
   13fd6:	0783      	lsls	r3, r0, #30
   13fd8:	d025      	beq.n	14026 <strlen+0x52>
   13fda:	7803      	ldrb	r3, [r0, #0]
   13fdc:	2b00      	cmp	r3, #0
   13fde:	d024      	beq.n	1402a <strlen+0x56>
   13fe0:	0003      	movs	r3, r0
   13fe2:	2103      	movs	r1, #3
   13fe4:	e002      	b.n	13fec <strlen+0x18>
   13fe6:	781a      	ldrb	r2, [r3, #0]
   13fe8:	2a00      	cmp	r2, #0
   13fea:	d01a      	beq.n	14022 <strlen+0x4e>
   13fec:	3301      	adds	r3, #1
   13fee:	420b      	tst	r3, r1
   13ff0:	d1f9      	bne.n	13fe6 <strlen+0x12>
   13ff2:	6819      	ldr	r1, [r3, #0]
   13ff4:	4a0e      	ldr	r2, [pc, #56]	; (14030 <strlen+0x5c>)
   13ff6:	4c0f      	ldr	r4, [pc, #60]	; (14034 <strlen+0x60>)
   13ff8:	188a      	adds	r2, r1, r2
   13ffa:	438a      	bics	r2, r1
   13ffc:	4222      	tst	r2, r4
   13ffe:	d106      	bne.n	1400e <strlen+0x3a>
   14000:	3304      	adds	r3, #4
   14002:	6819      	ldr	r1, [r3, #0]
   14004:	4a0a      	ldr	r2, [pc, #40]	; (14030 <strlen+0x5c>)
   14006:	188a      	adds	r2, r1, r2
   14008:	438a      	bics	r2, r1
   1400a:	4222      	tst	r2, r4
   1400c:	d0f8      	beq.n	14000 <strlen+0x2c>
   1400e:	001a      	movs	r2, r3
   14010:	781b      	ldrb	r3, [r3, #0]
   14012:	2b00      	cmp	r3, #0
   14014:	d003      	beq.n	1401e <strlen+0x4a>
   14016:	3201      	adds	r2, #1
   14018:	7811      	ldrb	r1, [r2, #0]
   1401a:	2900      	cmp	r1, #0
   1401c:	d1fb      	bne.n	14016 <strlen+0x42>
   1401e:	1a10      	subs	r0, r2, r0
   14020:	bd10      	pop	{r4, pc}
   14022:	1a18      	subs	r0, r3, r0
   14024:	e7fc      	b.n	14020 <strlen+0x4c>
   14026:	0003      	movs	r3, r0
   14028:	e7e3      	b.n	13ff2 <strlen+0x1e>
   1402a:	2000      	movs	r0, #0
   1402c:	e7f8      	b.n	14020 <strlen+0x4c>
   1402e:	46c0      	nop			; (mov r8, r8)
   14030:	fefefeff 	.word	0xfefefeff
   14034:	80808080 	.word	0x80808080

00014038 <_svfprintf_r>:
   14038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1403a:	46de      	mov	lr, fp
   1403c:	4645      	mov	r5, r8
   1403e:	4657      	mov	r7, sl
   14040:	464e      	mov	r6, r9
   14042:	b5e0      	push	{r5, r6, r7, lr}
   14044:	b0c3      	sub	sp, #268	; 0x10c
   14046:	000d      	movs	r5, r1
   14048:	9106      	str	r1, [sp, #24]
   1404a:	0014      	movs	r4, r2
   1404c:	930f      	str	r3, [sp, #60]	; 0x3c
   1404e:	9009      	str	r0, [sp, #36]	; 0x24
   14050:	f004 fbc4 	bl	187dc <_localeconv_r>
   14054:	6803      	ldr	r3, [r0, #0]
   14056:	0018      	movs	r0, r3
   14058:	9319      	str	r3, [sp, #100]	; 0x64
   1405a:	f7ff ffbb 	bl	13fd4 <strlen>
   1405e:	9018      	str	r0, [sp, #96]	; 0x60
   14060:	89ab      	ldrh	r3, [r5, #12]
   14062:	061b      	lsls	r3, r3, #24
   14064:	d505      	bpl.n	14072 <_svfprintf_r+0x3a>
   14066:	692b      	ldr	r3, [r5, #16]
   14068:	9307      	str	r3, [sp, #28]
   1406a:	2b00      	cmp	r3, #0
   1406c:	d101      	bne.n	14072 <_svfprintf_r+0x3a>
   1406e:	f001 f863 	bl	15138 <_svfprintf_r+0x1100>
   14072:	ab32      	add	r3, sp, #200	; 0xc8
   14074:	9325      	str	r3, [sp, #148]	; 0x94
   14076:	2300      	movs	r3, #0
   14078:	46a3      	mov	fp, r4
   1407a:	af25      	add	r7, sp, #148	; 0x94
   1407c:	60bb      	str	r3, [r7, #8]
   1407e:	607b      	str	r3, [r7, #4]
   14080:	9314      	str	r3, [sp, #80]	; 0x50
   14082:	9316      	str	r3, [sp, #88]	; 0x58
   14084:	9315      	str	r3, [sp, #84]	; 0x54
   14086:	ae32      	add	r6, sp, #200	; 0xc8
   14088:	9317      	str	r3, [sp, #92]	; 0x5c
   1408a:	931a      	str	r3, [sp, #104]	; 0x68
   1408c:	930a      	str	r3, [sp, #40]	; 0x28
   1408e:	465b      	mov	r3, fp
   14090:	781b      	ldrb	r3, [r3, #0]
   14092:	465c      	mov	r4, fp
   14094:	2b00      	cmp	r3, #0
   14096:	d01c      	beq.n	140d2 <_svfprintf_r+0x9a>
   14098:	2b25      	cmp	r3, #37	; 0x25
   1409a:	d102      	bne.n	140a2 <_svfprintf_r+0x6a>
   1409c:	e019      	b.n	140d2 <_svfprintf_r+0x9a>
   1409e:	2b25      	cmp	r3, #37	; 0x25
   140a0:	d003      	beq.n	140aa <_svfprintf_r+0x72>
   140a2:	3401      	adds	r4, #1
   140a4:	7823      	ldrb	r3, [r4, #0]
   140a6:	2b00      	cmp	r3, #0
   140a8:	d1f9      	bne.n	1409e <_svfprintf_r+0x66>
   140aa:	465b      	mov	r3, fp
   140ac:	1ae5      	subs	r5, r4, r3
   140ae:	d010      	beq.n	140d2 <_svfprintf_r+0x9a>
   140b0:	465b      	mov	r3, fp
   140b2:	6033      	str	r3, [r6, #0]
   140b4:	68bb      	ldr	r3, [r7, #8]
   140b6:	6075      	str	r5, [r6, #4]
   140b8:	195b      	adds	r3, r3, r5
   140ba:	60bb      	str	r3, [r7, #8]
   140bc:	687b      	ldr	r3, [r7, #4]
   140be:	3301      	adds	r3, #1
   140c0:	607b      	str	r3, [r7, #4]
   140c2:	2b07      	cmp	r3, #7
   140c4:	dc2e      	bgt.n	14124 <_svfprintf_r+0xec>
   140c6:	3608      	adds	r6, #8
   140c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   140ca:	469c      	mov	ip, r3
   140cc:	44ac      	add	ip, r5
   140ce:	4663      	mov	r3, ip
   140d0:	930a      	str	r3, [sp, #40]	; 0x28
   140d2:	7823      	ldrb	r3, [r4, #0]
   140d4:	2b00      	cmp	r3, #0
   140d6:	d02e      	beq.n	14136 <_svfprintf_r+0xfe>
   140d8:	1c63      	adds	r3, r4, #1
   140da:	469b      	mov	fp, r3
   140dc:	2300      	movs	r3, #0
   140de:	aa16      	add	r2, sp, #88	; 0x58
   140e0:	77d3      	strb	r3, [r2, #31]
   140e2:	2201      	movs	r2, #1
   140e4:	4252      	negs	r2, r2
   140e6:	4692      	mov	sl, r2
   140e8:	2200      	movs	r2, #0
   140ea:	2100      	movs	r1, #0
   140ec:	920b      	str	r2, [sp, #44]	; 0x2c
   140ee:	3220      	adds	r2, #32
   140f0:	4691      	mov	r9, r2
   140f2:	3220      	adds	r2, #32
   140f4:	7863      	ldrb	r3, [r4, #1]
   140f6:	4688      	mov	r8, r1
   140f8:	2000      	movs	r0, #0
   140fa:	2400      	movs	r4, #0
   140fc:	4694      	mov	ip, r2
   140fe:	4659      	mov	r1, fp
   14100:	3101      	adds	r1, #1
   14102:	001a      	movs	r2, r3
   14104:	3a20      	subs	r2, #32
   14106:	2a58      	cmp	r2, #88	; 0x58
   14108:	d900      	bls.n	1410c <_svfprintf_r+0xd4>
   1410a:	e2fd      	b.n	14708 <_svfprintf_r+0x6d0>
   1410c:	4dd7      	ldr	r5, [pc, #860]	; (1446c <_svfprintf_r+0x434>)
   1410e:	0092      	lsls	r2, r2, #2
   14110:	58aa      	ldr	r2, [r5, r2]
   14112:	4697      	mov	pc, r2
   14114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14116:	920f      	str	r2, [sp, #60]	; 0x3c
   14118:	425b      	negs	r3, r3
   1411a:	930b      	str	r3, [sp, #44]	; 0x2c
   1411c:	2304      	movs	r3, #4
   1411e:	431c      	orrs	r4, r3
   14120:	780b      	ldrb	r3, [r1, #0]
   14122:	e7ed      	b.n	14100 <_svfprintf_r+0xc8>
   14124:	003a      	movs	r2, r7
   14126:	9906      	ldr	r1, [sp, #24]
   14128:	9809      	ldr	r0, [sp, #36]	; 0x24
   1412a:	f005 fca9 	bl	19a80 <__ssprint_r>
   1412e:	2800      	cmp	r0, #0
   14130:	d109      	bne.n	14146 <_svfprintf_r+0x10e>
   14132:	ae32      	add	r6, sp, #200	; 0xc8
   14134:	e7c8      	b.n	140c8 <_svfprintf_r+0x90>
   14136:	68bb      	ldr	r3, [r7, #8]
   14138:	2b00      	cmp	r3, #0
   1413a:	d004      	beq.n	14146 <_svfprintf_r+0x10e>
   1413c:	003a      	movs	r2, r7
   1413e:	9906      	ldr	r1, [sp, #24]
   14140:	9809      	ldr	r0, [sp, #36]	; 0x24
   14142:	f005 fc9d 	bl	19a80 <__ssprint_r>
   14146:	9b06      	ldr	r3, [sp, #24]
   14148:	899b      	ldrh	r3, [r3, #12]
   1414a:	065b      	lsls	r3, r3, #25
   1414c:	d501      	bpl.n	14152 <_svfprintf_r+0x11a>
   1414e:	f001 f8ce 	bl	152ee <_svfprintf_r+0x12b6>
   14152:	980a      	ldr	r0, [sp, #40]	; 0x28
   14154:	b043      	add	sp, #268	; 0x10c
   14156:	bc3c      	pop	{r2, r3, r4, r5}
   14158:	4690      	mov	r8, r2
   1415a:	4699      	mov	r9, r3
   1415c:	46a2      	mov	sl, r4
   1415e:	46ab      	mov	fp, r5
   14160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14162:	2201      	movs	r2, #1
   14164:	780b      	ldrb	r3, [r1, #0]
   14166:	4690      	mov	r8, r2
   14168:	202b      	movs	r0, #43	; 0x2b
   1416a:	e7c9      	b.n	14100 <_svfprintf_r+0xc8>
   1416c:	1c4b      	adds	r3, r1, #1
   1416e:	469b      	mov	fp, r3
   14170:	780b      	ldrb	r3, [r1, #0]
   14172:	2b2a      	cmp	r3, #42	; 0x2a
   14174:	d101      	bne.n	1417a <_svfprintf_r+0x142>
   14176:	f001 fa1b 	bl	155b0 <_svfprintf_r+0x1578>
   1417a:	001a      	movs	r2, r3
   1417c:	2100      	movs	r1, #0
   1417e:	3a30      	subs	r2, #48	; 0x30
   14180:	468a      	mov	sl, r1
   14182:	4659      	mov	r1, fp
   14184:	2a09      	cmp	r2, #9
   14186:	d8bc      	bhi.n	14102 <_svfprintf_r+0xca>
   14188:	0003      	movs	r3, r0
   1418a:	0011      	movs	r1, r2
   1418c:	4650      	mov	r0, sl
   1418e:	465a      	mov	r2, fp
   14190:	469a      	mov	sl, r3
   14192:	46a3      	mov	fp, r4
   14194:	0083      	lsls	r3, r0, #2
   14196:	181b      	adds	r3, r3, r0
   14198:	7814      	ldrb	r4, [r2, #0]
   1419a:	005b      	lsls	r3, r3, #1
   1419c:	1858      	adds	r0, r3, r1
   1419e:	0021      	movs	r1, r4
   141a0:	1c53      	adds	r3, r2, #1
   141a2:	3930      	subs	r1, #48	; 0x30
   141a4:	001a      	movs	r2, r3
   141a6:	2909      	cmp	r1, #9
   141a8:	d9f4      	bls.n	14194 <_svfprintf_r+0x15c>
   141aa:	4652      	mov	r2, sl
   141ac:	0019      	movs	r1, r3
   141ae:	4682      	mov	sl, r0
   141b0:	0023      	movs	r3, r4
   141b2:	0010      	movs	r0, r2
   141b4:	465c      	mov	r4, fp
   141b6:	e7a4      	b.n	14102 <_svfprintf_r+0xca>
   141b8:	2380      	movs	r3, #128	; 0x80
   141ba:	431c      	orrs	r4, r3
   141bc:	780b      	ldrb	r3, [r1, #0]
   141be:	e79f      	b.n	14100 <_svfprintf_r+0xc8>
   141c0:	468b      	mov	fp, r1
   141c2:	4641      	mov	r1, r8
   141c4:	9312      	str	r3, [sp, #72]	; 0x48
   141c6:	2900      	cmp	r1, #0
   141c8:	d001      	beq.n	141ce <_svfprintf_r+0x196>
   141ca:	f001 fa1f 	bl	1560c <_svfprintf_r+0x15d4>
   141ce:	2310      	movs	r3, #16
   141d0:	431c      	orrs	r4, r3
   141d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   141d4:	06a3      	lsls	r3, r4, #26
   141d6:	d501      	bpl.n	141dc <_svfprintf_r+0x1a4>
   141d8:	f000 fe88 	bl	14eec <_svfprintf_r+0xeb4>
   141dc:	06e3      	lsls	r3, r4, #27
   141de:	d501      	bpl.n	141e4 <_svfprintf_r+0x1ac>
   141e0:	f000 fd80 	bl	14ce4 <_svfprintf_r+0xcac>
   141e4:	0663      	lsls	r3, r4, #25
   141e6:	d401      	bmi.n	141ec <_svfprintf_r+0x1b4>
   141e8:	f000 fd7c 	bl	14ce4 <_svfprintf_r+0xcac>
   141ec:	2100      	movs	r1, #0
   141ee:	5e53      	ldrsh	r3, [r2, r1]
   141f0:	930c      	str	r3, [sp, #48]	; 0x30
   141f2:	3204      	adds	r2, #4
   141f4:	17db      	asrs	r3, r3, #31
   141f6:	930d      	str	r3, [sp, #52]	; 0x34
   141f8:	920f      	str	r2, [sp, #60]	; 0x3c
   141fa:	d501      	bpl.n	14200 <_svfprintf_r+0x1c8>
   141fc:	f000 fe86 	bl	14f0c <_svfprintf_r+0xed4>
   14200:	990c      	ldr	r1, [sp, #48]	; 0x30
   14202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14204:	0008      	movs	r0, r1
   14206:	ab16      	add	r3, sp, #88	; 0x58
   14208:	7fdb      	ldrb	r3, [r3, #31]
   1420a:	4310      	orrs	r0, r2
   1420c:	4698      	mov	r8, r3
   1420e:	0002      	movs	r2, r0
   14210:	2301      	movs	r3, #1
   14212:	4651      	mov	r1, sl
   14214:	3101      	adds	r1, #1
   14216:	d100      	bne.n	1421a <_svfprintf_r+0x1e2>
   14218:	e0ff      	b.n	1441a <_svfprintf_r+0x3e2>
   1421a:	2180      	movs	r1, #128	; 0x80
   1421c:	0020      	movs	r0, r4
   1421e:	4388      	bics	r0, r1
   14220:	9008      	str	r0, [sp, #32]
   14222:	2a00      	cmp	r2, #0
   14224:	d000      	beq.n	14228 <_svfprintf_r+0x1f0>
   14226:	e0fc      	b.n	14422 <_svfprintf_r+0x3ea>
   14228:	4652      	mov	r2, sl
   1422a:	2a00      	cmp	r2, #0
   1422c:	d001      	beq.n	14232 <_svfprintf_r+0x1fa>
   1422e:	f000 fc2c 	bl	14a8a <_svfprintf_r+0xa52>
   14232:	2b00      	cmp	r3, #0
   14234:	d001      	beq.n	1423a <_svfprintf_r+0x202>
   14236:	f000 fd04 	bl	14c42 <_svfprintf_r+0xc0a>
   1423a:	2001      	movs	r0, #1
   1423c:	ab32      	add	r3, sp, #200	; 0xc8
   1423e:	4020      	ands	r0, r4
   14240:	900e      	str	r0, [sp, #56]	; 0x38
   14242:	9311      	str	r3, [sp, #68]	; 0x44
   14244:	d008      	beq.n	14258 <_svfprintf_r+0x220>
   14246:	2327      	movs	r3, #39	; 0x27
   14248:	2130      	movs	r1, #48	; 0x30
   1424a:	aa28      	add	r2, sp, #160	; 0xa0
   1424c:	54d1      	strb	r1, [r2, r3]
   1424e:	aa16      	add	r2, sp, #88	; 0x58
   14250:	4694      	mov	ip, r2
   14252:	3348      	adds	r3, #72	; 0x48
   14254:	4463      	add	r3, ip
   14256:	9311      	str	r3, [sp, #68]	; 0x44
   14258:	4653      	mov	r3, sl
   1425a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1425c:	9307      	str	r3, [sp, #28]
   1425e:	4592      	cmp	sl, r2
   14260:	da00      	bge.n	14264 <_svfprintf_r+0x22c>
   14262:	9207      	str	r2, [sp, #28]
   14264:	2300      	movs	r3, #0
   14266:	9313      	str	r3, [sp, #76]	; 0x4c
   14268:	4643      	mov	r3, r8
   1426a:	2b00      	cmp	r3, #0
   1426c:	d002      	beq.n	14274 <_svfprintf_r+0x23c>
   1426e:	9b07      	ldr	r3, [sp, #28]
   14270:	3301      	adds	r3, #1
   14272:	9307      	str	r3, [sp, #28]
   14274:	2302      	movs	r3, #2
   14276:	9a08      	ldr	r2, [sp, #32]
   14278:	401a      	ands	r2, r3
   1427a:	4691      	mov	r9, r2
   1427c:	d002      	beq.n	14284 <_svfprintf_r+0x24c>
   1427e:	9b07      	ldr	r3, [sp, #28]
   14280:	3302      	adds	r3, #2
   14282:	9307      	str	r3, [sp, #28]
   14284:	2384      	movs	r3, #132	; 0x84
   14286:	9a08      	ldr	r2, [sp, #32]
   14288:	401a      	ands	r2, r3
   1428a:	9210      	str	r2, [sp, #64]	; 0x40
   1428c:	d000      	beq.n	14290 <_svfprintf_r+0x258>
   1428e:	e24d      	b.n	1472c <_svfprintf_r+0x6f4>
   14290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14292:	9a07      	ldr	r2, [sp, #28]
   14294:	1a9c      	subs	r4, r3, r2
   14296:	2c00      	cmp	r4, #0
   14298:	dc00      	bgt.n	1429c <_svfprintf_r+0x264>
   1429a:	e247      	b.n	1472c <_svfprintf_r+0x6f4>
   1429c:	4974      	ldr	r1, [pc, #464]	; (14470 <_svfprintf_r+0x438>)
   1429e:	68ba      	ldr	r2, [r7, #8]
   142a0:	687b      	ldr	r3, [r7, #4]
   142a2:	4688      	mov	r8, r1
   142a4:	2c10      	cmp	r4, #16
   142a6:	dd1f      	ble.n	142e8 <_svfprintf_r+0x2b0>
   142a8:	0031      	movs	r1, r6
   142aa:	2510      	movs	r5, #16
   142ac:	4646      	mov	r6, r8
   142ae:	e003      	b.n	142b8 <_svfprintf_r+0x280>
   142b0:	3c10      	subs	r4, #16
   142b2:	3108      	adds	r1, #8
   142b4:	2c10      	cmp	r4, #16
   142b6:	dd15      	ble.n	142e4 <_svfprintf_r+0x2ac>
   142b8:	3210      	adds	r2, #16
   142ba:	3301      	adds	r3, #1
   142bc:	600e      	str	r6, [r1, #0]
   142be:	604d      	str	r5, [r1, #4]
   142c0:	60ba      	str	r2, [r7, #8]
   142c2:	607b      	str	r3, [r7, #4]
   142c4:	2b07      	cmp	r3, #7
   142c6:	ddf3      	ble.n	142b0 <_svfprintf_r+0x278>
   142c8:	003a      	movs	r2, r7
   142ca:	9906      	ldr	r1, [sp, #24]
   142cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   142ce:	f005 fbd7 	bl	19a80 <__ssprint_r>
   142d2:	2800      	cmp	r0, #0
   142d4:	d000      	beq.n	142d8 <_svfprintf_r+0x2a0>
   142d6:	e736      	b.n	14146 <_svfprintf_r+0x10e>
   142d8:	3c10      	subs	r4, #16
   142da:	68ba      	ldr	r2, [r7, #8]
   142dc:	687b      	ldr	r3, [r7, #4]
   142de:	a932      	add	r1, sp, #200	; 0xc8
   142e0:	2c10      	cmp	r4, #16
   142e2:	dce9      	bgt.n	142b8 <_svfprintf_r+0x280>
   142e4:	46b0      	mov	r8, r6
   142e6:	000e      	movs	r6, r1
   142e8:	4641      	mov	r1, r8
   142ea:	6074      	str	r4, [r6, #4]
   142ec:	3301      	adds	r3, #1
   142ee:	18a4      	adds	r4, r4, r2
   142f0:	6031      	str	r1, [r6, #0]
   142f2:	60bc      	str	r4, [r7, #8]
   142f4:	607b      	str	r3, [r7, #4]
   142f6:	2b07      	cmp	r3, #7
   142f8:	dd01      	ble.n	142fe <_svfprintf_r+0x2c6>
   142fa:	f000 fca8 	bl	14c4e <_svfprintf_r+0xc16>
   142fe:	ab16      	add	r3, sp, #88	; 0x58
   14300:	7fdb      	ldrb	r3, [r3, #31]
   14302:	3608      	adds	r6, #8
   14304:	4698      	mov	r8, r3
   14306:	e212      	b.n	1472e <_svfprintf_r+0x6f6>
   14308:	468b      	mov	fp, r1
   1430a:	4641      	mov	r1, r8
   1430c:	9312      	str	r3, [sp, #72]	; 0x48
   1430e:	2900      	cmp	r1, #0
   14310:	d001      	beq.n	14316 <_svfprintf_r+0x2de>
   14312:	f001 f977 	bl	15604 <_svfprintf_r+0x15cc>
   14316:	2207      	movs	r2, #7
   14318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1431a:	3307      	adds	r3, #7
   1431c:	4393      	bics	r3, r2
   1431e:	3201      	adds	r2, #1
   14320:	4694      	mov	ip, r2
   14322:	449c      	add	ip, r3
   14324:	4662      	mov	r2, ip
   14326:	920f      	str	r2, [sp, #60]	; 0x3c
   14328:	681a      	ldr	r2, [r3, #0]
   1432a:	9216      	str	r2, [sp, #88]	; 0x58
   1432c:	685b      	ldr	r3, [r3, #4]
   1432e:	2201      	movs	r2, #1
   14330:	9315      	str	r3, [sp, #84]	; 0x54
   14332:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14334:	9d16      	ldr	r5, [sp, #88]	; 0x58
   14336:	005b      	lsls	r3, r3, #1
   14338:	085b      	lsrs	r3, r3, #1
   1433a:	4698      	mov	r8, r3
   1433c:	4252      	negs	r2, r2
   1433e:	4b4d      	ldr	r3, [pc, #308]	; (14474 <_svfprintf_r+0x43c>)
   14340:	0028      	movs	r0, r5
   14342:	4641      	mov	r1, r8
   14344:	f005 ff2e 	bl	1a1a4 <__aeabi_dcmpun>
   14348:	2800      	cmp	r0, #0
   1434a:	d001      	beq.n	14350 <_svfprintf_r+0x318>
   1434c:	f000 fdfd 	bl	14f4a <_svfprintf_r+0xf12>
   14350:	2201      	movs	r2, #1
   14352:	4b48      	ldr	r3, [pc, #288]	; (14474 <_svfprintf_r+0x43c>)
   14354:	4252      	negs	r2, r2
   14356:	0028      	movs	r0, r5
   14358:	4641      	mov	r1, r8
   1435a:	f7ff fae1 	bl	13920 <__aeabi_dcmple>
   1435e:	2800      	cmp	r0, #0
   14360:	d001      	beq.n	14366 <_svfprintf_r+0x32e>
   14362:	f000 fdf2 	bl	14f4a <_svfprintf_r+0xf12>
   14366:	2200      	movs	r2, #0
   14368:	2300      	movs	r3, #0
   1436a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1436c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1436e:	f7ff facd 	bl	1390c <__aeabi_dcmplt>
   14372:	2800      	cmp	r0, #0
   14374:	d001      	beq.n	1437a <_svfprintf_r+0x342>
   14376:	f001 f822 	bl	153be <_svfprintf_r+0x1386>
   1437a:	ab16      	add	r3, sp, #88	; 0x58
   1437c:	7fdb      	ldrb	r3, [r3, #31]
   1437e:	4698      	mov	r8, r3
   14380:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14382:	2b47      	cmp	r3, #71	; 0x47
   14384:	dd01      	ble.n	1438a <_svfprintf_r+0x352>
   14386:	f000 fec7 	bl	15118 <_svfprintf_r+0x10e0>
   1438a:	4b3b      	ldr	r3, [pc, #236]	; (14478 <_svfprintf_r+0x440>)
   1438c:	9311      	str	r3, [sp, #68]	; 0x44
   1438e:	2380      	movs	r3, #128	; 0x80
   14390:	439c      	bics	r4, r3
   14392:	3b7d      	subs	r3, #125	; 0x7d
   14394:	9307      	str	r3, [sp, #28]
   14396:	930e      	str	r3, [sp, #56]	; 0x38
   14398:	2300      	movs	r3, #0
   1439a:	9408      	str	r4, [sp, #32]
   1439c:	469a      	mov	sl, r3
   1439e:	9313      	str	r3, [sp, #76]	; 0x4c
   143a0:	e762      	b.n	14268 <_svfprintf_r+0x230>
   143a2:	2200      	movs	r2, #0
   143a4:	3b30      	subs	r3, #48	; 0x30
   143a6:	0015      	movs	r5, r2
   143a8:	001a      	movs	r2, r3
   143aa:	0003      	movs	r3, r0
   143ac:	9407      	str	r4, [sp, #28]
   143ae:	0008      	movs	r0, r1
   143b0:	002c      	movs	r4, r5
   143b2:	469b      	mov	fp, r3
   143b4:	00a3      	lsls	r3, r4, #2
   143b6:	191c      	adds	r4, r3, r4
   143b8:	7803      	ldrb	r3, [r0, #0]
   143ba:	0064      	lsls	r4, r4, #1
   143bc:	1914      	adds	r4, r2, r4
   143be:	001a      	movs	r2, r3
   143c0:	3101      	adds	r1, #1
   143c2:	3a30      	subs	r2, #48	; 0x30
   143c4:	0008      	movs	r0, r1
   143c6:	2a09      	cmp	r2, #9
   143c8:	d9f4      	bls.n	143b4 <_svfprintf_r+0x37c>
   143ca:	940b      	str	r4, [sp, #44]	; 0x2c
   143cc:	4658      	mov	r0, fp
   143ce:	9c07      	ldr	r4, [sp, #28]
   143d0:	e697      	b.n	14102 <_svfprintf_r+0xca>
   143d2:	2308      	movs	r3, #8
   143d4:	431c      	orrs	r4, r3
   143d6:	780b      	ldrb	r3, [r1, #0]
   143d8:	e692      	b.n	14100 <_svfprintf_r+0xc8>
   143da:	9312      	str	r3, [sp, #72]	; 0x48
   143dc:	2310      	movs	r3, #16
   143de:	431c      	orrs	r4, r3
   143e0:	468b      	mov	fp, r1
   143e2:	06a3      	lsls	r3, r4, #26
   143e4:	d500      	bpl.n	143e8 <_svfprintf_r+0x3b0>
   143e6:	e17b      	b.n	146e0 <_svfprintf_r+0x6a8>
   143e8:	06e3      	lsls	r3, r4, #27
   143ea:	d501      	bpl.n	143f0 <_svfprintf_r+0x3b8>
   143ec:	f000 fc7e 	bl	14cec <_svfprintf_r+0xcb4>
   143f0:	0663      	lsls	r3, r4, #25
   143f2:	d401      	bmi.n	143f8 <_svfprintf_r+0x3c0>
   143f4:	f000 fc7a 	bl	14cec <_svfprintf_r+0xcb4>
   143f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   143fa:	881a      	ldrh	r2, [r3, #0]
   143fc:	920c      	str	r2, [sp, #48]	; 0x30
   143fe:	2200      	movs	r2, #0
   14400:	3304      	adds	r3, #4
   14402:	930f      	str	r3, [sp, #60]	; 0x3c
   14404:	2300      	movs	r3, #0
   14406:	920d      	str	r2, [sp, #52]	; 0x34
   14408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1440a:	2100      	movs	r1, #0
   1440c:	a816      	add	r0, sp, #88	; 0x58
   1440e:	77c1      	strb	r1, [r0, #31]
   14410:	4688      	mov	r8, r1
   14412:	4651      	mov	r1, sl
   14414:	3101      	adds	r1, #1
   14416:	d000      	beq.n	1441a <_svfprintf_r+0x3e2>
   14418:	e6ff      	b.n	1421a <_svfprintf_r+0x1e2>
   1441a:	2a00      	cmp	r2, #0
   1441c:	d100      	bne.n	14420 <_svfprintf_r+0x3e8>
   1441e:	e335      	b.n	14a8c <_svfprintf_r+0xa54>
   14420:	9408      	str	r4, [sp, #32]
   14422:	2b01      	cmp	r3, #1
   14424:	d100      	bne.n	14428 <_svfprintf_r+0x3f0>
   14426:	e3e5      	b.n	14bf4 <_svfprintf_r+0xbbc>
   14428:	2b02      	cmp	r3, #2
   1442a:	d000      	beq.n	1442e <_svfprintf_r+0x3f6>
   1442c:	e362      	b.n	14af4 <_svfprintf_r+0xabc>
   1442e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   14430:	200f      	movs	r0, #15
   14432:	46a1      	mov	r9, r4
   14434:	46b4      	mov	ip, r6
   14436:	ab32      	add	r3, sp, #200	; 0xc8
   14438:	0019      	movs	r1, r3
   1443a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1443c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1443e:	0004      	movs	r4, r0
   14440:	464d      	mov	r5, r9
   14442:	4014      	ands	r4, r2
   14444:	5d2c      	ldrb	r4, [r5, r4]
   14446:	071e      	lsls	r6, r3, #28
   14448:	0915      	lsrs	r5, r2, #4
   1444a:	3901      	subs	r1, #1
   1444c:	432e      	orrs	r6, r5
   1444e:	700c      	strb	r4, [r1, #0]
   14450:	091c      	lsrs	r4, r3, #4
   14452:	0023      	movs	r3, r4
   14454:	0034      	movs	r4, r6
   14456:	0032      	movs	r2, r6
   14458:	431c      	orrs	r4, r3
   1445a:	d1f0      	bne.n	1443e <_svfprintf_r+0x406>
   1445c:	920c      	str	r2, [sp, #48]	; 0x30
   1445e:	930d      	str	r3, [sp, #52]	; 0x34
   14460:	ab32      	add	r3, sp, #200	; 0xc8
   14462:	1a5b      	subs	r3, r3, r1
   14464:	9111      	str	r1, [sp, #68]	; 0x44
   14466:	4666      	mov	r6, ip
   14468:	930e      	str	r3, [sp, #56]	; 0x38
   1446a:	e6f5      	b.n	14258 <_svfprintf_r+0x220>
   1446c:	0001afcc 	.word	0x0001afcc
   14470:	0001b174 	.word	0x0001b174
   14474:	7fefffff 	.word	0x7fefffff
   14478:	0001b130 	.word	0x0001b130
   1447c:	9312      	str	r3, [sp, #72]	; 0x48
   1447e:	2310      	movs	r3, #16
   14480:	431c      	orrs	r4, r3
   14482:	468b      	mov	fp, r1
   14484:	06a3      	lsls	r3, r4, #26
   14486:	d500      	bpl.n	1448a <_svfprintf_r+0x452>
   14488:	e111      	b.n	146ae <_svfprintf_r+0x676>
   1448a:	06e3      	lsls	r3, r4, #27
   1448c:	d501      	bpl.n	14492 <_svfprintf_r+0x45a>
   1448e:	f000 fc31 	bl	14cf4 <_svfprintf_r+0xcbc>
   14492:	0663      	lsls	r3, r4, #25
   14494:	d401      	bmi.n	1449a <_svfprintf_r+0x462>
   14496:	f000 fc2d 	bl	14cf4 <_svfprintf_r+0xcbc>
   1449a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1449c:	881a      	ldrh	r2, [r3, #0]
   1449e:	920c      	str	r2, [sp, #48]	; 0x30
   144a0:	2200      	movs	r2, #0
   144a2:	3304      	adds	r3, #4
   144a4:	920d      	str	r2, [sp, #52]	; 0x34
   144a6:	930f      	str	r3, [sp, #60]	; 0x3c
   144a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   144aa:	2301      	movs	r3, #1
   144ac:	e7ad      	b.n	1440a <_svfprintf_r+0x3d2>
   144ae:	468b      	mov	fp, r1
   144b0:	4641      	mov	r1, r8
   144b2:	9312      	str	r3, [sp, #72]	; 0x48
   144b4:	2900      	cmp	r1, #0
   144b6:	d001      	beq.n	144bc <_svfprintf_r+0x484>
   144b8:	f001 f890 	bl	155dc <_svfprintf_r+0x15a4>
   144bc:	4bb8      	ldr	r3, [pc, #736]	; (147a0 <_svfprintf_r+0x768>)
   144be:	9317      	str	r3, [sp, #92]	; 0x5c
   144c0:	06a3      	lsls	r3, r4, #26
   144c2:	d500      	bpl.n	144c6 <_svfprintf_r+0x48e>
   144c4:	e0ab      	b.n	1461e <_svfprintf_r+0x5e6>
   144c6:	06e3      	lsls	r3, r4, #27
   144c8:	d501      	bpl.n	144ce <_svfprintf_r+0x496>
   144ca:	f000 fc07 	bl	14cdc <_svfprintf_r+0xca4>
   144ce:	0663      	lsls	r3, r4, #25
   144d0:	d401      	bmi.n	144d6 <_svfprintf_r+0x49e>
   144d2:	f000 fc03 	bl	14cdc <_svfprintf_r+0xca4>
   144d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   144d8:	881a      	ldrh	r2, [r3, #0]
   144da:	920c      	str	r2, [sp, #48]	; 0x30
   144dc:	2200      	movs	r2, #0
   144de:	3304      	adds	r3, #4
   144e0:	920d      	str	r2, [sp, #52]	; 0x34
   144e2:	930f      	str	r3, [sp, #60]	; 0x3c
   144e4:	07e3      	lsls	r3, r4, #31
   144e6:	d400      	bmi.n	144ea <_svfprintf_r+0x4b2>
   144e8:	e0a9      	b.n	1463e <_svfprintf_r+0x606>
   144ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   144ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   144ee:	000b      	movs	r3, r1
   144f0:	4313      	orrs	r3, r2
   144f2:	001a      	movs	r2, r3
   144f4:	2302      	movs	r3, #2
   144f6:	2a00      	cmp	r2, #0
   144f8:	d100      	bne.n	144fc <_svfprintf_r+0x4c4>
   144fa:	e786      	b.n	1440a <_svfprintf_r+0x3d2>
   144fc:	2030      	movs	r0, #48	; 0x30
   144fe:	a91e      	add	r1, sp, #120	; 0x78
   14500:	7008      	strb	r0, [r1, #0]
   14502:	2548      	movs	r5, #72	; 0x48
   14504:	4668      	mov	r0, sp
   14506:	1940      	adds	r0, r0, r5
   14508:	7800      	ldrb	r0, [r0, #0]
   1450a:	431c      	orrs	r4, r3
   1450c:	7048      	strb	r0, [r1, #1]
   1450e:	e77c      	b.n	1440a <_svfprintf_r+0x3d2>
   14510:	468b      	mov	fp, r1
   14512:	4641      	mov	r1, r8
   14514:	2900      	cmp	r1, #0
   14516:	d001      	beq.n	1451c <_svfprintf_r+0x4e4>
   14518:	f001 f883 	bl	15622 <_svfprintf_r+0x15ea>
   1451c:	06a3      	lsls	r3, r4, #26
   1451e:	d501      	bpl.n	14524 <_svfprintf_r+0x4ec>
   14520:	f000 fde9 	bl	150f6 <_svfprintf_r+0x10be>
   14524:	06e3      	lsls	r3, r4, #27
   14526:	d501      	bpl.n	1452c <_svfprintf_r+0x4f4>
   14528:	f000 fd9b 	bl	15062 <_svfprintf_r+0x102a>
   1452c:	0663      	lsls	r3, r4, #25
   1452e:	d401      	bmi.n	14534 <_svfprintf_r+0x4fc>
   14530:	f000 fd97 	bl	15062 <_svfprintf_r+0x102a>
   14534:	4669      	mov	r1, sp
   14536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14538:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1453a:	681a      	ldr	r2, [r3, #0]
   1453c:	3304      	adds	r3, #4
   1453e:	9207      	str	r2, [sp, #28]
   14540:	8011      	strh	r1, [r2, #0]
   14542:	930f      	str	r3, [sp, #60]	; 0x3c
   14544:	e5a3      	b.n	1408e <_svfprintf_r+0x56>
   14546:	464b      	mov	r3, r9
   14548:	431c      	orrs	r4, r3
   1454a:	780b      	ldrb	r3, [r1, #0]
   1454c:	e5d8      	b.n	14100 <_svfprintf_r+0xc8>
   1454e:	9312      	str	r3, [sp, #72]	; 0x48
   14550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14552:	468b      	mov	fp, r1
   14554:	1d1d      	adds	r5, r3, #4
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	a916      	add	r1, sp, #88	; 0x58
   1455a:	001a      	movs	r2, r3
   1455c:	9311      	str	r3, [sp, #68]	; 0x44
   1455e:	2300      	movs	r3, #0
   14560:	77cb      	strb	r3, [r1, #31]
   14562:	2a00      	cmp	r2, #0
   14564:	d101      	bne.n	1456a <_svfprintf_r+0x532>
   14566:	f000 fefb 	bl	15360 <_svfprintf_r+0x1328>
   1456a:	4653      	mov	r3, sl
   1456c:	3301      	adds	r3, #1
   1456e:	d101      	bne.n	14574 <_svfprintf_r+0x53c>
   14570:	f000 fe38 	bl	151e4 <_svfprintf_r+0x11ac>
   14574:	4652      	mov	r2, sl
   14576:	2100      	movs	r1, #0
   14578:	9811      	ldr	r0, [sp, #68]	; 0x44
   1457a:	f004 fc7b 	bl	18e74 <memchr>
   1457e:	2800      	cmp	r0, #0
   14580:	d101      	bne.n	14586 <_svfprintf_r+0x54e>
   14582:	f000 ff54 	bl	1542e <_svfprintf_r+0x13f6>
   14586:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14588:	1ac3      	subs	r3, r0, r3
   1458a:	001a      	movs	r2, r3
   1458c:	930e      	str	r3, [sp, #56]	; 0x38
   1458e:	43db      	mvns	r3, r3
   14590:	17db      	asrs	r3, r3, #31
   14592:	401a      	ands	r2, r3
   14594:	ab16      	add	r3, sp, #88	; 0x58
   14596:	7fdb      	ldrb	r3, [r3, #31]
   14598:	9207      	str	r2, [sp, #28]
   1459a:	4698      	mov	r8, r3
   1459c:	2300      	movs	r3, #0
   1459e:	950f      	str	r5, [sp, #60]	; 0x3c
   145a0:	9408      	str	r4, [sp, #32]
   145a2:	469a      	mov	sl, r3
   145a4:	9313      	str	r3, [sp, #76]	; 0x4c
   145a6:	e65f      	b.n	14268 <_svfprintf_r+0x230>
   145a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   145aa:	9312      	str	r3, [sp, #72]	; 0x48
   145ac:	6813      	ldr	r3, [r2, #0]
   145ae:	ad28      	add	r5, sp, #160	; 0xa0
   145b0:	9307      	str	r3, [sp, #28]
   145b2:	466b      	mov	r3, sp
   145b4:	7f1b      	ldrb	r3, [r3, #28]
   145b6:	468b      	mov	fp, r1
   145b8:	702b      	strb	r3, [r5, #0]
   145ba:	2300      	movs	r3, #0
   145bc:	a916      	add	r1, sp, #88	; 0x58
   145be:	77cb      	strb	r3, [r1, #31]
   145c0:	0013      	movs	r3, r2
   145c2:	3304      	adds	r3, #4
   145c4:	930f      	str	r3, [sp, #60]	; 0x3c
   145c6:	2300      	movs	r3, #0
   145c8:	9408      	str	r4, [sp, #32]
   145ca:	4698      	mov	r8, r3
   145cc:	3301      	adds	r3, #1
   145ce:	9307      	str	r3, [sp, #28]
   145d0:	930e      	str	r3, [sp, #56]	; 0x38
   145d2:	2300      	movs	r3, #0
   145d4:	9511      	str	r5, [sp, #68]	; 0x44
   145d6:	469a      	mov	sl, r3
   145d8:	9313      	str	r3, [sp, #76]	; 0x4c
   145da:	e64b      	b.n	14274 <_svfprintf_r+0x23c>
   145dc:	468b      	mov	fp, r1
   145de:	4641      	mov	r1, r8
   145e0:	9312      	str	r3, [sp, #72]	; 0x48
   145e2:	2900      	cmp	r1, #0
   145e4:	d100      	bne.n	145e8 <_svfprintf_r+0x5b0>
   145e6:	e5f4      	b.n	141d2 <_svfprintf_r+0x19a>
   145e8:	ab16      	add	r3, sp, #88	; 0x58
   145ea:	77d8      	strb	r0, [r3, #31]
   145ec:	e5f1      	b.n	141d2 <_svfprintf_r+0x19a>
   145ee:	4663      	mov	r3, ip
   145f0:	431c      	orrs	r4, r3
   145f2:	780b      	ldrb	r3, [r1, #0]
   145f4:	e584      	b.n	14100 <_svfprintf_r+0xc8>
   145f6:	780b      	ldrb	r3, [r1, #0]
   145f8:	2b6c      	cmp	r3, #108	; 0x6c
   145fa:	d101      	bne.n	14600 <_svfprintf_r+0x5c8>
   145fc:	f000 fd86 	bl	1510c <_svfprintf_r+0x10d4>
   14600:	2210      	movs	r2, #16
   14602:	4314      	orrs	r4, r2
   14604:	e57c      	b.n	14100 <_svfprintf_r+0xc8>
   14606:	468b      	mov	fp, r1
   14608:	4641      	mov	r1, r8
   1460a:	9312      	str	r3, [sp, #72]	; 0x48
   1460c:	2900      	cmp	r1, #0
   1460e:	d001      	beq.n	14614 <_svfprintf_r+0x5dc>
   14610:	f000 ffe8 	bl	155e4 <_svfprintf_r+0x15ac>
   14614:	4b63      	ldr	r3, [pc, #396]	; (147a4 <_svfprintf_r+0x76c>)
   14616:	9317      	str	r3, [sp, #92]	; 0x5c
   14618:	06a3      	lsls	r3, r4, #26
   1461a:	d400      	bmi.n	1461e <_svfprintf_r+0x5e6>
   1461c:	e753      	b.n	144c6 <_svfprintf_r+0x48e>
   1461e:	2207      	movs	r2, #7
   14620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14622:	3307      	adds	r3, #7
   14624:	4393      	bics	r3, r2
   14626:	3201      	adds	r2, #1
   14628:	4694      	mov	ip, r2
   1462a:	449c      	add	ip, r3
   1462c:	4662      	mov	r2, ip
   1462e:	920f      	str	r2, [sp, #60]	; 0x3c
   14630:	681a      	ldr	r2, [r3, #0]
   14632:	685b      	ldr	r3, [r3, #4]
   14634:	920c      	str	r2, [sp, #48]	; 0x30
   14636:	930d      	str	r3, [sp, #52]	; 0x34
   14638:	07e3      	lsls	r3, r4, #31
   1463a:	d500      	bpl.n	1463e <_svfprintf_r+0x606>
   1463c:	e755      	b.n	144ea <_svfprintf_r+0x4b2>
   1463e:	990c      	ldr	r1, [sp, #48]	; 0x30
   14640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14642:	0008      	movs	r0, r1
   14644:	4310      	orrs	r0, r2
   14646:	2302      	movs	r3, #2
   14648:	0002      	movs	r2, r0
   1464a:	e6de      	b.n	1440a <_svfprintf_r+0x3d2>
   1464c:	468b      	mov	fp, r1
   1464e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14650:	2230      	movs	r2, #48	; 0x30
   14652:	680b      	ldr	r3, [r1, #0]
   14654:	930c      	str	r3, [sp, #48]	; 0x30
   14656:	2300      	movs	r3, #0
   14658:	930d      	str	r3, [sp, #52]	; 0x34
   1465a:	3302      	adds	r3, #2
   1465c:	431c      	orrs	r4, r3
   1465e:	ab1e      	add	r3, sp, #120	; 0x78
   14660:	701a      	strb	r2, [r3, #0]
   14662:	3248      	adds	r2, #72	; 0x48
   14664:	705a      	strb	r2, [r3, #1]
   14666:	000b      	movs	r3, r1
   14668:	3304      	adds	r3, #4
   1466a:	930f      	str	r3, [sp, #60]	; 0x3c
   1466c:	4b4d      	ldr	r3, [pc, #308]	; (147a4 <_svfprintf_r+0x76c>)
   1466e:	9212      	str	r2, [sp, #72]	; 0x48
   14670:	9317      	str	r3, [sp, #92]	; 0x5c
   14672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14674:	2302      	movs	r3, #2
   14676:	e6c8      	b.n	1440a <_svfprintf_r+0x3d2>
   14678:	2301      	movs	r3, #1
   1467a:	431c      	orrs	r4, r3
   1467c:	780b      	ldrb	r3, [r1, #0]
   1467e:	e53f      	b.n	14100 <_svfprintf_r+0xc8>
   14680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14682:	1d1a      	adds	r2, r3, #4
   14684:	681b      	ldr	r3, [r3, #0]
   14686:	930b      	str	r3, [sp, #44]	; 0x2c
   14688:	2b00      	cmp	r3, #0
   1468a:	da00      	bge.n	1468e <_svfprintf_r+0x656>
   1468c:	e542      	b.n	14114 <_svfprintf_r+0xdc>
   1468e:	780b      	ldrb	r3, [r1, #0]
   14690:	920f      	str	r2, [sp, #60]	; 0x3c
   14692:	e535      	b.n	14100 <_svfprintf_r+0xc8>
   14694:	780b      	ldrb	r3, [r1, #0]
   14696:	2800      	cmp	r0, #0
   14698:	d000      	beq.n	1469c <_svfprintf_r+0x664>
   1469a:	e531      	b.n	14100 <_svfprintf_r+0xc8>
   1469c:	2201      	movs	r2, #1
   1469e:	3020      	adds	r0, #32
   146a0:	4690      	mov	r8, r2
   146a2:	e52d      	b.n	14100 <_svfprintf_r+0xc8>
   146a4:	468b      	mov	fp, r1
   146a6:	9312      	str	r3, [sp, #72]	; 0x48
   146a8:	06a3      	lsls	r3, r4, #26
   146aa:	d400      	bmi.n	146ae <_svfprintf_r+0x676>
   146ac:	e6ed      	b.n	1448a <_svfprintf_r+0x452>
   146ae:	2207      	movs	r2, #7
   146b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   146b2:	3307      	adds	r3, #7
   146b4:	4393      	bics	r3, r2
   146b6:	3201      	adds	r2, #1
   146b8:	4694      	mov	ip, r2
   146ba:	449c      	add	ip, r3
   146bc:	4662      	mov	r2, ip
   146be:	920f      	str	r2, [sp, #60]	; 0x3c
   146c0:	681a      	ldr	r2, [r3, #0]
   146c2:	685b      	ldr	r3, [r3, #4]
   146c4:	0011      	movs	r1, r2
   146c6:	001a      	movs	r2, r3
   146c8:	0008      	movs	r0, r1
   146ca:	4310      	orrs	r0, r2
   146cc:	910c      	str	r1, [sp, #48]	; 0x30
   146ce:	920d      	str	r2, [sp, #52]	; 0x34
   146d0:	2301      	movs	r3, #1
   146d2:	0002      	movs	r2, r0
   146d4:	e699      	b.n	1440a <_svfprintf_r+0x3d2>
   146d6:	468b      	mov	fp, r1
   146d8:	9312      	str	r3, [sp, #72]	; 0x48
   146da:	06a3      	lsls	r3, r4, #26
   146dc:	d400      	bmi.n	146e0 <_svfprintf_r+0x6a8>
   146de:	e683      	b.n	143e8 <_svfprintf_r+0x3b0>
   146e0:	2207      	movs	r2, #7
   146e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   146e4:	3307      	adds	r3, #7
   146e6:	4393      	bics	r3, r2
   146e8:	3201      	adds	r2, #1
   146ea:	4694      	mov	ip, r2
   146ec:	449c      	add	ip, r3
   146ee:	4662      	mov	r2, ip
   146f0:	920f      	str	r2, [sp, #60]	; 0x3c
   146f2:	681a      	ldr	r2, [r3, #0]
   146f4:	685b      	ldr	r3, [r3, #4]
   146f6:	0011      	movs	r1, r2
   146f8:	001a      	movs	r2, r3
   146fa:	0008      	movs	r0, r1
   146fc:	4310      	orrs	r0, r2
   146fe:	910c      	str	r1, [sp, #48]	; 0x30
   14700:	920d      	str	r2, [sp, #52]	; 0x34
   14702:	2300      	movs	r3, #0
   14704:	0002      	movs	r2, r0
   14706:	e680      	b.n	1440a <_svfprintf_r+0x3d2>
   14708:	468b      	mov	fp, r1
   1470a:	4641      	mov	r1, r8
   1470c:	9312      	str	r3, [sp, #72]	; 0x48
   1470e:	2900      	cmp	r1, #0
   14710:	d001      	beq.n	14716 <_svfprintf_r+0x6de>
   14712:	f000 ff7f 	bl	15614 <_svfprintf_r+0x15dc>
   14716:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14718:	2b00      	cmp	r3, #0
   1471a:	d100      	bne.n	1471e <_svfprintf_r+0x6e6>
   1471c:	e50b      	b.n	14136 <_svfprintf_r+0xfe>
   1471e:	ad28      	add	r5, sp, #160	; 0xa0
   14720:	702b      	strb	r3, [r5, #0]
   14722:	2300      	movs	r3, #0
   14724:	aa16      	add	r2, sp, #88	; 0x58
   14726:	77d3      	strb	r3, [r2, #31]
   14728:	9408      	str	r4, [sp, #32]
   1472a:	e74e      	b.n	145ca <_svfprintf_r+0x592>
   1472c:	68bc      	ldr	r4, [r7, #8]
   1472e:	4643      	mov	r3, r8
   14730:	2b00      	cmp	r3, #0
   14732:	d00f      	beq.n	14754 <_svfprintf_r+0x71c>
   14734:	aa16      	add	r2, sp, #88	; 0x58
   14736:	231f      	movs	r3, #31
   14738:	4694      	mov	ip, r2
   1473a:	4463      	add	r3, ip
   1473c:	6033      	str	r3, [r6, #0]
   1473e:	2301      	movs	r3, #1
   14740:	6073      	str	r3, [r6, #4]
   14742:	687b      	ldr	r3, [r7, #4]
   14744:	3401      	adds	r4, #1
   14746:	3301      	adds	r3, #1
   14748:	60bc      	str	r4, [r7, #8]
   1474a:	607b      	str	r3, [r7, #4]
   1474c:	2b07      	cmp	r3, #7
   1474e:	dd00      	ble.n	14752 <_svfprintf_r+0x71a>
   14750:	e1b3      	b.n	14aba <_svfprintf_r+0xa82>
   14752:	3608      	adds	r6, #8
   14754:	464b      	mov	r3, r9
   14756:	2b00      	cmp	r3, #0
   14758:	d00c      	beq.n	14774 <_svfprintf_r+0x73c>
   1475a:	ab1e      	add	r3, sp, #120	; 0x78
   1475c:	6033      	str	r3, [r6, #0]
   1475e:	2302      	movs	r3, #2
   14760:	6073      	str	r3, [r6, #4]
   14762:	687b      	ldr	r3, [r7, #4]
   14764:	3402      	adds	r4, #2
   14766:	3301      	adds	r3, #1
   14768:	60bc      	str	r4, [r7, #8]
   1476a:	607b      	str	r3, [r7, #4]
   1476c:	2b07      	cmp	r3, #7
   1476e:	dd00      	ble.n	14772 <_svfprintf_r+0x73a>
   14770:	e1af      	b.n	14ad2 <_svfprintf_r+0xa9a>
   14772:	3608      	adds	r6, #8
   14774:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14776:	2b80      	cmp	r3, #128	; 0x80
   14778:	d100      	bne.n	1477c <_svfprintf_r+0x744>
   1477a:	e120      	b.n	149be <_svfprintf_r+0x986>
   1477c:	4653      	mov	r3, sl
   1477e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14780:	1a9d      	subs	r5, r3, r2
   14782:	2d00      	cmp	r5, #0
   14784:	dd3c      	ble.n	14800 <_svfprintf_r+0x7c8>
   14786:	4a08      	ldr	r2, [pc, #32]	; (147a8 <_svfprintf_r+0x770>)
   14788:	687b      	ldr	r3, [r7, #4]
   1478a:	4691      	mov	r9, r2
   1478c:	2d10      	cmp	r5, #16
   1478e:	dd2c      	ble.n	147ea <_svfprintf_r+0x7b2>
   14790:	2210      	movs	r2, #16
   14792:	0021      	movs	r1, r4
   14794:	4692      	mov	sl, r2
   14796:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14798:	0032      	movs	r2, r6
   1479a:	002e      	movs	r6, r5
   1479c:	464d      	mov	r5, r9
   1479e:	e009      	b.n	147b4 <_svfprintf_r+0x77c>
   147a0:	0001b140 	.word	0x0001b140
   147a4:	0001b154 	.word	0x0001b154
   147a8:	0001b184 	.word	0x0001b184
   147ac:	3e10      	subs	r6, #16
   147ae:	3208      	adds	r2, #8
   147b0:	2e10      	cmp	r6, #16
   147b2:	dd16      	ble.n	147e2 <_svfprintf_r+0x7aa>
   147b4:	4650      	mov	r0, sl
   147b6:	3110      	adds	r1, #16
   147b8:	3301      	adds	r3, #1
   147ba:	6015      	str	r5, [r2, #0]
   147bc:	6050      	str	r0, [r2, #4]
   147be:	60b9      	str	r1, [r7, #8]
   147c0:	607b      	str	r3, [r7, #4]
   147c2:	2b07      	cmp	r3, #7
   147c4:	ddf2      	ble.n	147ac <_svfprintf_r+0x774>
   147c6:	003a      	movs	r2, r7
   147c8:	9906      	ldr	r1, [sp, #24]
   147ca:	0020      	movs	r0, r4
   147cc:	f005 f958 	bl	19a80 <__ssprint_r>
   147d0:	2800      	cmp	r0, #0
   147d2:	d000      	beq.n	147d6 <_svfprintf_r+0x79e>
   147d4:	e4b7      	b.n	14146 <_svfprintf_r+0x10e>
   147d6:	3e10      	subs	r6, #16
   147d8:	68b9      	ldr	r1, [r7, #8]
   147da:	687b      	ldr	r3, [r7, #4]
   147dc:	aa32      	add	r2, sp, #200	; 0xc8
   147de:	2e10      	cmp	r6, #16
   147e0:	dce8      	bgt.n	147b4 <_svfprintf_r+0x77c>
   147e2:	46a9      	mov	r9, r5
   147e4:	000c      	movs	r4, r1
   147e6:	0035      	movs	r5, r6
   147e8:	0016      	movs	r6, r2
   147ea:	464a      	mov	r2, r9
   147ec:	1964      	adds	r4, r4, r5
   147ee:	3301      	adds	r3, #1
   147f0:	6032      	str	r2, [r6, #0]
   147f2:	6075      	str	r5, [r6, #4]
   147f4:	60bc      	str	r4, [r7, #8]
   147f6:	607b      	str	r3, [r7, #4]
   147f8:	2b07      	cmp	r3, #7
   147fa:	dd00      	ble.n	147fe <_svfprintf_r+0x7c6>
   147fc:	e151      	b.n	14aa2 <_svfprintf_r+0xa6a>
   147fe:	3608      	adds	r6, #8
   14800:	9b08      	ldr	r3, [sp, #32]
   14802:	05db      	lsls	r3, r3, #23
   14804:	d500      	bpl.n	14808 <_svfprintf_r+0x7d0>
   14806:	e0b6      	b.n	14976 <_svfprintf_r+0x93e>
   14808:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1480a:	6033      	str	r3, [r6, #0]
   1480c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1480e:	469c      	mov	ip, r3
   14810:	6073      	str	r3, [r6, #4]
   14812:	687b      	ldr	r3, [r7, #4]
   14814:	4464      	add	r4, ip
   14816:	3301      	adds	r3, #1
   14818:	60bc      	str	r4, [r7, #8]
   1481a:	607b      	str	r3, [r7, #4]
   1481c:	2b07      	cmp	r3, #7
   1481e:	dd00      	ble.n	14822 <_svfprintf_r+0x7ea>
   14820:	e09d      	b.n	1495e <_svfprintf_r+0x926>
   14822:	3608      	adds	r6, #8
   14824:	9b08      	ldr	r3, [sp, #32]
   14826:	075b      	lsls	r3, r3, #29
   14828:	d541      	bpl.n	148ae <_svfprintf_r+0x876>
   1482a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1482c:	9a07      	ldr	r2, [sp, #28]
   1482e:	1a9d      	subs	r5, r3, r2
   14830:	2d00      	cmp	r5, #0
   14832:	dd3c      	ble.n	148ae <_svfprintf_r+0x876>
   14834:	4ac4      	ldr	r2, [pc, #784]	; (14b48 <_svfprintf_r+0xb10>)
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	4690      	mov	r8, r2
   1483a:	2d10      	cmp	r5, #16
   1483c:	dd26      	ble.n	1488c <_svfprintf_r+0x854>
   1483e:	2210      	movs	r2, #16
   14840:	0021      	movs	r1, r4
   14842:	4691      	mov	r9, r2
   14844:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14846:	0032      	movs	r2, r6
   14848:	002e      	movs	r6, r5
   1484a:	9d06      	ldr	r5, [sp, #24]
   1484c:	e003      	b.n	14856 <_svfprintf_r+0x81e>
   1484e:	3e10      	subs	r6, #16
   14850:	3208      	adds	r2, #8
   14852:	2e10      	cmp	r6, #16
   14854:	dd17      	ble.n	14886 <_svfprintf_r+0x84e>
   14856:	48bc      	ldr	r0, [pc, #752]	; (14b48 <_svfprintf_r+0xb10>)
   14858:	3110      	adds	r1, #16
   1485a:	6010      	str	r0, [r2, #0]
   1485c:	4648      	mov	r0, r9
   1485e:	3301      	adds	r3, #1
   14860:	6050      	str	r0, [r2, #4]
   14862:	60b9      	str	r1, [r7, #8]
   14864:	607b      	str	r3, [r7, #4]
   14866:	2b07      	cmp	r3, #7
   14868:	ddf1      	ble.n	1484e <_svfprintf_r+0x816>
   1486a:	003a      	movs	r2, r7
   1486c:	0029      	movs	r1, r5
   1486e:	0020      	movs	r0, r4
   14870:	f005 f906 	bl	19a80 <__ssprint_r>
   14874:	2800      	cmp	r0, #0
   14876:	d000      	beq.n	1487a <_svfprintf_r+0x842>
   14878:	e465      	b.n	14146 <_svfprintf_r+0x10e>
   1487a:	3e10      	subs	r6, #16
   1487c:	68b9      	ldr	r1, [r7, #8]
   1487e:	687b      	ldr	r3, [r7, #4]
   14880:	aa32      	add	r2, sp, #200	; 0xc8
   14882:	2e10      	cmp	r6, #16
   14884:	dce7      	bgt.n	14856 <_svfprintf_r+0x81e>
   14886:	0035      	movs	r5, r6
   14888:	000c      	movs	r4, r1
   1488a:	0016      	movs	r6, r2
   1488c:	4642      	mov	r2, r8
   1488e:	1964      	adds	r4, r4, r5
   14890:	3301      	adds	r3, #1
   14892:	c624      	stmia	r6!, {r2, r5}
   14894:	60bc      	str	r4, [r7, #8]
   14896:	607b      	str	r3, [r7, #4]
   14898:	2b07      	cmp	r3, #7
   1489a:	dd08      	ble.n	148ae <_svfprintf_r+0x876>
   1489c:	003a      	movs	r2, r7
   1489e:	9906      	ldr	r1, [sp, #24]
   148a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   148a2:	f005 f8ed 	bl	19a80 <__ssprint_r>
   148a6:	2800      	cmp	r0, #0
   148a8:	d000      	beq.n	148ac <_svfprintf_r+0x874>
   148aa:	e44c      	b.n	14146 <_svfprintf_r+0x10e>
   148ac:	68bc      	ldr	r4, [r7, #8]
   148ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   148b0:	9907      	ldr	r1, [sp, #28]
   148b2:	428b      	cmp	r3, r1
   148b4:	da00      	bge.n	148b8 <_svfprintf_r+0x880>
   148b6:	000b      	movs	r3, r1
   148b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   148ba:	4694      	mov	ip, r2
   148bc:	449c      	add	ip, r3
   148be:	4663      	mov	r3, ip
   148c0:	930a      	str	r3, [sp, #40]	; 0x28
   148c2:	2c00      	cmp	r4, #0
   148c4:	d000      	beq.n	148c8 <_svfprintf_r+0x890>
   148c6:	e0d6      	b.n	14a76 <_svfprintf_r+0xa3e>
   148c8:	2300      	movs	r3, #0
   148ca:	ae32      	add	r6, sp, #200	; 0xc8
   148cc:	607b      	str	r3, [r7, #4]
   148ce:	f7ff fbde 	bl	1408e <_svfprintf_r+0x56>
   148d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   148d4:	2b01      	cmp	r3, #1
   148d6:	dc00      	bgt.n	148da <_svfprintf_r+0x8a2>
   148d8:	e0ae      	b.n	14a38 <_svfprintf_r+0xa00>
   148da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   148dc:	3401      	adds	r4, #1
   148de:	6033      	str	r3, [r6, #0]
   148e0:	2301      	movs	r3, #1
   148e2:	6073      	str	r3, [r6, #4]
   148e4:	687b      	ldr	r3, [r7, #4]
   148e6:	60bc      	str	r4, [r7, #8]
   148e8:	3301      	adds	r3, #1
   148ea:	607b      	str	r3, [r7, #4]
   148ec:	2b07      	cmp	r3, #7
   148ee:	dd00      	ble.n	148f2 <_svfprintf_r+0x8ba>
   148f0:	e2df      	b.n	14eb2 <_svfprintf_r+0xe7a>
   148f2:	3608      	adds	r6, #8
   148f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   148f6:	3301      	adds	r3, #1
   148f8:	6032      	str	r2, [r6, #0]
   148fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   148fc:	4698      	mov	r8, r3
   148fe:	4694      	mov	ip, r2
   14900:	4464      	add	r4, ip
   14902:	6072      	str	r2, [r6, #4]
   14904:	60bc      	str	r4, [r7, #8]
   14906:	607b      	str	r3, [r7, #4]
   14908:	2b07      	cmp	r3, #7
   1490a:	dd00      	ble.n	1490e <_svfprintf_r+0x8d6>
   1490c:	e2de      	b.n	14ecc <_svfprintf_r+0xe94>
   1490e:	3608      	adds	r6, #8
   14910:	2200      	movs	r2, #0
   14912:	2300      	movs	r3, #0
   14914:	9816      	ldr	r0, [sp, #88]	; 0x58
   14916:	9915      	ldr	r1, [sp, #84]	; 0x54
   14918:	f7fe fff2 	bl	13900 <__aeabi_dcmpeq>
   1491c:	2800      	cmp	r0, #0
   1491e:	d000      	beq.n	14922 <_svfprintf_r+0x8ea>
   14920:	e1a4      	b.n	14c6c <_svfprintf_r+0xc34>
   14922:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14924:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14926:	3501      	adds	r5, #1
   14928:	3b01      	subs	r3, #1
   1492a:	6035      	str	r5, [r6, #0]
   1492c:	6073      	str	r3, [r6, #4]
   1492e:	18e4      	adds	r4, r4, r3
   14930:	2301      	movs	r3, #1
   14932:	469c      	mov	ip, r3
   14934:	44e0      	add	r8, ip
   14936:	4643      	mov	r3, r8
   14938:	60bc      	str	r4, [r7, #8]
   1493a:	607b      	str	r3, [r7, #4]
   1493c:	2b07      	cmp	r3, #7
   1493e:	dd00      	ble.n	14942 <_svfprintf_r+0x90a>
   14940:	e08b      	b.n	14a5a <_svfprintf_r+0xa22>
   14942:	3608      	adds	r6, #8
   14944:	ab21      	add	r3, sp, #132	; 0x84
   14946:	6033      	str	r3, [r6, #0]
   14948:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1494a:	469c      	mov	ip, r3
   1494c:	6073      	str	r3, [r6, #4]
   1494e:	4643      	mov	r3, r8
   14950:	4464      	add	r4, ip
   14952:	3301      	adds	r3, #1
   14954:	60bc      	str	r4, [r7, #8]
   14956:	607b      	str	r3, [r7, #4]
   14958:	2b07      	cmp	r3, #7
   1495a:	dc00      	bgt.n	1495e <_svfprintf_r+0x926>
   1495c:	e761      	b.n	14822 <_svfprintf_r+0x7ea>
   1495e:	003a      	movs	r2, r7
   14960:	9906      	ldr	r1, [sp, #24]
   14962:	9809      	ldr	r0, [sp, #36]	; 0x24
   14964:	f005 f88c 	bl	19a80 <__ssprint_r>
   14968:	2800      	cmp	r0, #0
   1496a:	d001      	beq.n	14970 <_svfprintf_r+0x938>
   1496c:	f7ff fbeb 	bl	14146 <_svfprintf_r+0x10e>
   14970:	68bc      	ldr	r4, [r7, #8]
   14972:	ae32      	add	r6, sp, #200	; 0xc8
   14974:	e756      	b.n	14824 <_svfprintf_r+0x7ec>
   14976:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14978:	2b65      	cmp	r3, #101	; 0x65
   1497a:	ddaa      	ble.n	148d2 <_svfprintf_r+0x89a>
   1497c:	2200      	movs	r2, #0
   1497e:	2300      	movs	r3, #0
   14980:	9816      	ldr	r0, [sp, #88]	; 0x58
   14982:	9915      	ldr	r1, [sp, #84]	; 0x54
   14984:	f7fe ffbc 	bl	13900 <__aeabi_dcmpeq>
   14988:	2800      	cmp	r0, #0
   1498a:	d100      	bne.n	1498e <_svfprintf_r+0x956>
   1498c:	e0e2      	b.n	14b54 <_svfprintf_r+0xb1c>
   1498e:	4b6f      	ldr	r3, [pc, #444]	; (14b4c <_svfprintf_r+0xb14>)
   14990:	3401      	adds	r4, #1
   14992:	6033      	str	r3, [r6, #0]
   14994:	2301      	movs	r3, #1
   14996:	6073      	str	r3, [r6, #4]
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	60bc      	str	r4, [r7, #8]
   1499c:	3301      	adds	r3, #1
   1499e:	607b      	str	r3, [r7, #4]
   149a0:	2b07      	cmp	r3, #7
   149a2:	dd00      	ble.n	149a6 <_svfprintf_r+0x96e>
   149a4:	e366      	b.n	15074 <_svfprintf_r+0x103c>
   149a6:	3608      	adds	r6, #8
   149a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   149aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   149ac:	4293      	cmp	r3, r2
   149ae:	da00      	bge.n	149b2 <_svfprintf_r+0x97a>
   149b0:	e1a4      	b.n	14cfc <_svfprintf_r+0xcc4>
   149b2:	9b08      	ldr	r3, [sp, #32]
   149b4:	07db      	lsls	r3, r3, #31
   149b6:	d500      	bpl.n	149ba <_svfprintf_r+0x982>
   149b8:	e1a0      	b.n	14cfc <_svfprintf_r+0xcc4>
   149ba:	68bc      	ldr	r4, [r7, #8]
   149bc:	e732      	b.n	14824 <_svfprintf_r+0x7ec>
   149be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149c0:	9a07      	ldr	r2, [sp, #28]
   149c2:	1a9d      	subs	r5, r3, r2
   149c4:	2d00      	cmp	r5, #0
   149c6:	dc00      	bgt.n	149ca <_svfprintf_r+0x992>
   149c8:	e6d8      	b.n	1477c <_svfprintf_r+0x744>
   149ca:	4a61      	ldr	r2, [pc, #388]	; (14b50 <_svfprintf_r+0xb18>)
   149cc:	687b      	ldr	r3, [r7, #4]
   149ce:	4691      	mov	r9, r2
   149d0:	2d10      	cmp	r5, #16
   149d2:	dd25      	ble.n	14a20 <_svfprintf_r+0x9e8>
   149d4:	2210      	movs	r2, #16
   149d6:	0021      	movs	r1, r4
   149d8:	4690      	mov	r8, r2
   149da:	9c09      	ldr	r4, [sp, #36]	; 0x24
   149dc:	0032      	movs	r2, r6
   149de:	464e      	mov	r6, r9
   149e0:	e003      	b.n	149ea <_svfprintf_r+0x9b2>
   149e2:	3d10      	subs	r5, #16
   149e4:	3208      	adds	r2, #8
   149e6:	2d10      	cmp	r5, #16
   149e8:	dd17      	ble.n	14a1a <_svfprintf_r+0x9e2>
   149ea:	4640      	mov	r0, r8
   149ec:	3110      	adds	r1, #16
   149ee:	3301      	adds	r3, #1
   149f0:	6016      	str	r6, [r2, #0]
   149f2:	6050      	str	r0, [r2, #4]
   149f4:	60b9      	str	r1, [r7, #8]
   149f6:	607b      	str	r3, [r7, #4]
   149f8:	2b07      	cmp	r3, #7
   149fa:	ddf2      	ble.n	149e2 <_svfprintf_r+0x9aa>
   149fc:	003a      	movs	r2, r7
   149fe:	9906      	ldr	r1, [sp, #24]
   14a00:	0020      	movs	r0, r4
   14a02:	f005 f83d 	bl	19a80 <__ssprint_r>
   14a06:	2800      	cmp	r0, #0
   14a08:	d001      	beq.n	14a0e <_svfprintf_r+0x9d6>
   14a0a:	f7ff fb9c 	bl	14146 <_svfprintf_r+0x10e>
   14a0e:	3d10      	subs	r5, #16
   14a10:	68b9      	ldr	r1, [r7, #8]
   14a12:	687b      	ldr	r3, [r7, #4]
   14a14:	aa32      	add	r2, sp, #200	; 0xc8
   14a16:	2d10      	cmp	r5, #16
   14a18:	dce7      	bgt.n	149ea <_svfprintf_r+0x9b2>
   14a1a:	46b1      	mov	r9, r6
   14a1c:	000c      	movs	r4, r1
   14a1e:	0016      	movs	r6, r2
   14a20:	464a      	mov	r2, r9
   14a22:	1964      	adds	r4, r4, r5
   14a24:	3301      	adds	r3, #1
   14a26:	6032      	str	r2, [r6, #0]
   14a28:	6075      	str	r5, [r6, #4]
   14a2a:	60bc      	str	r4, [r7, #8]
   14a2c:	607b      	str	r3, [r7, #4]
   14a2e:	2b07      	cmp	r3, #7
   14a30:	dd00      	ble.n	14a34 <_svfprintf_r+0x9fc>
   14a32:	e27e      	b.n	14f32 <_svfprintf_r+0xefa>
   14a34:	3608      	adds	r6, #8
   14a36:	e6a1      	b.n	1477c <_svfprintf_r+0x744>
   14a38:	2301      	movs	r3, #1
   14a3a:	9a08      	ldr	r2, [sp, #32]
   14a3c:	4213      	tst	r3, r2
   14a3e:	d000      	beq.n	14a42 <_svfprintf_r+0xa0a>
   14a40:	e74b      	b.n	148da <_svfprintf_r+0x8a2>
   14a42:	6073      	str	r3, [r6, #4]
   14a44:	687b      	ldr	r3, [r7, #4]
   14a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
   14a48:	3301      	adds	r3, #1
   14a4a:	3401      	adds	r4, #1
   14a4c:	6032      	str	r2, [r6, #0]
   14a4e:	60bc      	str	r4, [r7, #8]
   14a50:	4698      	mov	r8, r3
   14a52:	607b      	str	r3, [r7, #4]
   14a54:	2b07      	cmp	r3, #7
   14a56:	dc00      	bgt.n	14a5a <_svfprintf_r+0xa22>
   14a58:	e773      	b.n	14942 <_svfprintf_r+0x90a>
   14a5a:	003a      	movs	r2, r7
   14a5c:	9906      	ldr	r1, [sp, #24]
   14a5e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14a60:	f005 f80e 	bl	19a80 <__ssprint_r>
   14a64:	2800      	cmp	r0, #0
   14a66:	d001      	beq.n	14a6c <_svfprintf_r+0xa34>
   14a68:	f7ff fb6d 	bl	14146 <_svfprintf_r+0x10e>
   14a6c:	687b      	ldr	r3, [r7, #4]
   14a6e:	68bc      	ldr	r4, [r7, #8]
   14a70:	4698      	mov	r8, r3
   14a72:	ae32      	add	r6, sp, #200	; 0xc8
   14a74:	e766      	b.n	14944 <_svfprintf_r+0x90c>
   14a76:	003a      	movs	r2, r7
   14a78:	9906      	ldr	r1, [sp, #24]
   14a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
   14a7c:	f005 f800 	bl	19a80 <__ssprint_r>
   14a80:	2800      	cmp	r0, #0
   14a82:	d100      	bne.n	14a86 <_svfprintf_r+0xa4e>
   14a84:	e720      	b.n	148c8 <_svfprintf_r+0x890>
   14a86:	f7ff fb5e 	bl	14146 <_svfprintf_r+0x10e>
   14a8a:	9c08      	ldr	r4, [sp, #32]
   14a8c:	2b01      	cmp	r3, #1
   14a8e:	d100      	bne.n	14a92 <_svfprintf_r+0xa5a>
   14a90:	e184      	b.n	14d9c <_svfprintf_r+0xd64>
   14a92:	2b02      	cmp	r3, #2
   14a94:	d129      	bne.n	14aea <_svfprintf_r+0xab2>
   14a96:	9408      	str	r4, [sp, #32]
   14a98:	2300      	movs	r3, #0
   14a9a:	2400      	movs	r4, #0
   14a9c:	930c      	str	r3, [sp, #48]	; 0x30
   14a9e:	940d      	str	r4, [sp, #52]	; 0x34
   14aa0:	e4c5      	b.n	1442e <_svfprintf_r+0x3f6>
   14aa2:	003a      	movs	r2, r7
   14aa4:	9906      	ldr	r1, [sp, #24]
   14aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14aa8:	f004 ffea 	bl	19a80 <__ssprint_r>
   14aac:	2800      	cmp	r0, #0
   14aae:	d001      	beq.n	14ab4 <_svfprintf_r+0xa7c>
   14ab0:	f7ff fb49 	bl	14146 <_svfprintf_r+0x10e>
   14ab4:	68bc      	ldr	r4, [r7, #8]
   14ab6:	ae32      	add	r6, sp, #200	; 0xc8
   14ab8:	e6a2      	b.n	14800 <_svfprintf_r+0x7c8>
   14aba:	003a      	movs	r2, r7
   14abc:	9906      	ldr	r1, [sp, #24]
   14abe:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ac0:	f004 ffde 	bl	19a80 <__ssprint_r>
   14ac4:	2800      	cmp	r0, #0
   14ac6:	d001      	beq.n	14acc <_svfprintf_r+0xa94>
   14ac8:	f7ff fb3d 	bl	14146 <_svfprintf_r+0x10e>
   14acc:	68bc      	ldr	r4, [r7, #8]
   14ace:	ae32      	add	r6, sp, #200	; 0xc8
   14ad0:	e640      	b.n	14754 <_svfprintf_r+0x71c>
   14ad2:	003a      	movs	r2, r7
   14ad4:	9906      	ldr	r1, [sp, #24]
   14ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ad8:	f004 ffd2 	bl	19a80 <__ssprint_r>
   14adc:	2800      	cmp	r0, #0
   14ade:	d001      	beq.n	14ae4 <_svfprintf_r+0xaac>
   14ae0:	f7ff fb31 	bl	14146 <_svfprintf_r+0x10e>
   14ae4:	68bc      	ldr	r4, [r7, #8]
   14ae6:	ae32      	add	r6, sp, #200	; 0xc8
   14ae8:	e644      	b.n	14774 <_svfprintf_r+0x73c>
   14aea:	9408      	str	r4, [sp, #32]
   14aec:	2300      	movs	r3, #0
   14aee:	2400      	movs	r4, #0
   14af0:	930c      	str	r3, [sp, #48]	; 0x30
   14af2:	940d      	str	r4, [sp, #52]	; 0x34
   14af4:	980c      	ldr	r0, [sp, #48]	; 0x30
   14af6:	990d      	ldr	r1, [sp, #52]	; 0x34
   14af8:	465b      	mov	r3, fp
   14afa:	aa32      	add	r2, sp, #200	; 0xc8
   14afc:	9307      	str	r3, [sp, #28]
   14afe:	4691      	mov	r9, r2
   14b00:	46b3      	mov	fp, r6
   14b02:	e000      	b.n	14b06 <_svfprintf_r+0xace>
   14b04:	46a1      	mov	r9, r4
   14b06:	074a      	lsls	r2, r1, #29
   14b08:	4694      	mov	ip, r2
   14b0a:	464b      	mov	r3, r9
   14b0c:	4665      	mov	r5, ip
   14b0e:	1e5c      	subs	r4, r3, #1
   14b10:	08c6      	lsrs	r6, r0, #3
   14b12:	2307      	movs	r3, #7
   14b14:	08ca      	lsrs	r2, r1, #3
   14b16:	4335      	orrs	r5, r6
   14b18:	0011      	movs	r1, r2
   14b1a:	002a      	movs	r2, r5
   14b1c:	4003      	ands	r3, r0
   14b1e:	3330      	adds	r3, #48	; 0x30
   14b20:	7023      	strb	r3, [r4, #0]
   14b22:	0028      	movs	r0, r5
   14b24:	430a      	orrs	r2, r1
   14b26:	d1ed      	bne.n	14b04 <_svfprintf_r+0xacc>
   14b28:	900c      	str	r0, [sp, #48]	; 0x30
   14b2a:	910d      	str	r1, [sp, #52]	; 0x34
   14b2c:	9907      	ldr	r1, [sp, #28]
   14b2e:	465e      	mov	r6, fp
   14b30:	468b      	mov	fp, r1
   14b32:	9908      	ldr	r1, [sp, #32]
   14b34:	464a      	mov	r2, r9
   14b36:	9411      	str	r4, [sp, #68]	; 0x44
   14b38:	07c9      	lsls	r1, r1, #31
   14b3a:	d500      	bpl.n	14b3e <_svfprintf_r+0xb06>
   14b3c:	e13d      	b.n	14dba <_svfprintf_r+0xd82>
   14b3e:	ab32      	add	r3, sp, #200	; 0xc8
   14b40:	1b1b      	subs	r3, r3, r4
   14b42:	930e      	str	r3, [sp, #56]	; 0x38
   14b44:	f7ff fb88 	bl	14258 <_svfprintf_r+0x220>
   14b48:	0001b174 	.word	0x0001b174
   14b4c:	0001b170 	.word	0x0001b170
   14b50:	0001b184 	.word	0x0001b184
   14b54:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14b56:	2800      	cmp	r0, #0
   14b58:	dc00      	bgt.n	14b5c <_svfprintf_r+0xb24>
   14b5a:	e296      	b.n	1508a <_svfprintf_r+0x1052>
   14b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14b5e:	9914      	ldr	r1, [sp, #80]	; 0x50
   14b60:	0013      	movs	r3, r2
   14b62:	4690      	mov	r8, r2
   14b64:	428b      	cmp	r3, r1
   14b66:	dd00      	ble.n	14b6a <_svfprintf_r+0xb32>
   14b68:	4688      	mov	r8, r1
   14b6a:	4643      	mov	r3, r8
   14b6c:	2b00      	cmp	r3, #0
   14b6e:	dd0c      	ble.n	14b8a <_svfprintf_r+0xb52>
   14b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b72:	4444      	add	r4, r8
   14b74:	6033      	str	r3, [r6, #0]
   14b76:	4643      	mov	r3, r8
   14b78:	6073      	str	r3, [r6, #4]
   14b7a:	687b      	ldr	r3, [r7, #4]
   14b7c:	60bc      	str	r4, [r7, #8]
   14b7e:	3301      	adds	r3, #1
   14b80:	607b      	str	r3, [r7, #4]
   14b82:	2b07      	cmp	r3, #7
   14b84:	dd00      	ble.n	14b88 <_svfprintf_r+0xb50>
   14b86:	e3b7      	b.n	152f8 <_svfprintf_r+0x12c0>
   14b88:	3608      	adds	r6, #8
   14b8a:	4643      	mov	r3, r8
   14b8c:	43db      	mvns	r3, r3
   14b8e:	4642      	mov	r2, r8
   14b90:	17db      	asrs	r3, r3, #31
   14b92:	4013      	ands	r3, r2
   14b94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14b96:	1ad3      	subs	r3, r2, r3
   14b98:	4698      	mov	r8, r3
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	dc00      	bgt.n	14ba0 <_svfprintf_r+0xb68>
   14b9e:	e128      	b.n	14df2 <_svfprintf_r+0xdba>
   14ba0:	2b10      	cmp	r3, #16
   14ba2:	dc01      	bgt.n	14ba8 <_svfprintf_r+0xb70>
   14ba4:	f000 fce7 	bl	15576 <_svfprintf_r+0x153e>
   14ba8:	4acf      	ldr	r2, [pc, #828]	; (14ee8 <_svfprintf_r+0xeb0>)
   14baa:	0021      	movs	r1, r4
   14bac:	4691      	mov	r9, r2
   14bae:	2210      	movs	r2, #16
   14bb0:	687b      	ldr	r3, [r7, #4]
   14bb2:	4692      	mov	sl, r2
   14bb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   14bb6:	0032      	movs	r2, r6
   14bb8:	464c      	mov	r4, r9
   14bba:	4646      	mov	r6, r8
   14bbc:	e004      	b.n	14bc8 <_svfprintf_r+0xb90>
   14bbe:	3208      	adds	r2, #8
   14bc0:	3e10      	subs	r6, #16
   14bc2:	2e10      	cmp	r6, #16
   14bc4:	dc00      	bgt.n	14bc8 <_svfprintf_r+0xb90>
   14bc6:	e104      	b.n	14dd2 <_svfprintf_r+0xd9a>
   14bc8:	4650      	mov	r0, sl
   14bca:	3110      	adds	r1, #16
   14bcc:	3301      	adds	r3, #1
   14bce:	6014      	str	r4, [r2, #0]
   14bd0:	6050      	str	r0, [r2, #4]
   14bd2:	60b9      	str	r1, [r7, #8]
   14bd4:	607b      	str	r3, [r7, #4]
   14bd6:	2b07      	cmp	r3, #7
   14bd8:	ddf1      	ble.n	14bbe <_svfprintf_r+0xb86>
   14bda:	003a      	movs	r2, r7
   14bdc:	9906      	ldr	r1, [sp, #24]
   14bde:	0028      	movs	r0, r5
   14be0:	f004 ff4e 	bl	19a80 <__ssprint_r>
   14be4:	2800      	cmp	r0, #0
   14be6:	d001      	beq.n	14bec <_svfprintf_r+0xbb4>
   14be8:	f7ff faad 	bl	14146 <_svfprintf_r+0x10e>
   14bec:	68b9      	ldr	r1, [r7, #8]
   14bee:	687b      	ldr	r3, [r7, #4]
   14bf0:	aa32      	add	r2, sp, #200	; 0xc8
   14bf2:	e7e5      	b.n	14bc0 <_svfprintf_r+0xb88>
   14bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d100      	bne.n	14bfc <_svfprintf_r+0xbc4>
   14bfa:	e0ca      	b.n	14d92 <_svfprintf_r+0xd5a>
   14bfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   14bfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14c00:	ab32      	add	r3, sp, #200	; 0xc8
   14c02:	46b1      	mov	r9, r6
   14c04:	001e      	movs	r6, r3
   14c06:	0020      	movs	r0, r4
   14c08:	0029      	movs	r1, r5
   14c0a:	220a      	movs	r2, #10
   14c0c:	2300      	movs	r3, #0
   14c0e:	f7fc f885 	bl	10d1c <__aeabi_uldivmod>
   14c12:	3e01      	subs	r6, #1
   14c14:	3230      	adds	r2, #48	; 0x30
   14c16:	7032      	strb	r2, [r6, #0]
   14c18:	2300      	movs	r3, #0
   14c1a:	0020      	movs	r0, r4
   14c1c:	0029      	movs	r1, r5
   14c1e:	220a      	movs	r2, #10
   14c20:	f7fc f87c 	bl	10d1c <__aeabi_uldivmod>
   14c24:	0003      	movs	r3, r0
   14c26:	0004      	movs	r4, r0
   14c28:	000d      	movs	r5, r1
   14c2a:	430b      	orrs	r3, r1
   14c2c:	d1eb      	bne.n	14c06 <_svfprintf_r+0xbce>
   14c2e:	0032      	movs	r2, r6
   14c30:	ab32      	add	r3, sp, #200	; 0xc8
   14c32:	1a9b      	subs	r3, r3, r2
   14c34:	9611      	str	r6, [sp, #68]	; 0x44
   14c36:	940c      	str	r4, [sp, #48]	; 0x30
   14c38:	950d      	str	r5, [sp, #52]	; 0x34
   14c3a:	464e      	mov	r6, r9
   14c3c:	930e      	str	r3, [sp, #56]	; 0x38
   14c3e:	f7ff fb0b 	bl	14258 <_svfprintf_r+0x220>
   14c42:	2300      	movs	r3, #0
   14c44:	930e      	str	r3, [sp, #56]	; 0x38
   14c46:	ab32      	add	r3, sp, #200	; 0xc8
   14c48:	9311      	str	r3, [sp, #68]	; 0x44
   14c4a:	f7ff fb05 	bl	14258 <_svfprintf_r+0x220>
   14c4e:	003a      	movs	r2, r7
   14c50:	9906      	ldr	r1, [sp, #24]
   14c52:	9809      	ldr	r0, [sp, #36]	; 0x24
   14c54:	f004 ff14 	bl	19a80 <__ssprint_r>
   14c58:	2800      	cmp	r0, #0
   14c5a:	d001      	beq.n	14c60 <_svfprintf_r+0xc28>
   14c5c:	f7ff fa73 	bl	14146 <_svfprintf_r+0x10e>
   14c60:	ab16      	add	r3, sp, #88	; 0x58
   14c62:	7fdb      	ldrb	r3, [r3, #31]
   14c64:	68bc      	ldr	r4, [r7, #8]
   14c66:	4698      	mov	r8, r3
   14c68:	ae32      	add	r6, sp, #200	; 0xc8
   14c6a:	e560      	b.n	1472e <_svfprintf_r+0x6f6>
   14c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c6e:	1e5d      	subs	r5, r3, #1
   14c70:	2d00      	cmp	r5, #0
   14c72:	dc00      	bgt.n	14c76 <_svfprintf_r+0xc3e>
   14c74:	e666      	b.n	14944 <_svfprintf_r+0x90c>
   14c76:	4b9c      	ldr	r3, [pc, #624]	; (14ee8 <_svfprintf_r+0xeb0>)
   14c78:	4699      	mov	r9, r3
   14c7a:	2d10      	cmp	r5, #16
   14c7c:	dd29      	ble.n	14cd2 <_svfprintf_r+0xc9a>
   14c7e:	2310      	movs	r3, #16
   14c80:	0032      	movs	r2, r6
   14c82:	469a      	mov	sl, r3
   14c84:	002e      	movs	r6, r5
   14c86:	0021      	movs	r1, r4
   14c88:	4643      	mov	r3, r8
   14c8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14c8c:	464d      	mov	r5, r9
   14c8e:	e003      	b.n	14c98 <_svfprintf_r+0xc60>
   14c90:	3e10      	subs	r6, #16
   14c92:	3208      	adds	r2, #8
   14c94:	2e10      	cmp	r6, #16
   14c96:	dd17      	ble.n	14cc8 <_svfprintf_r+0xc90>
   14c98:	4650      	mov	r0, sl
   14c9a:	3110      	adds	r1, #16
   14c9c:	3301      	adds	r3, #1
   14c9e:	6015      	str	r5, [r2, #0]
   14ca0:	6050      	str	r0, [r2, #4]
   14ca2:	60b9      	str	r1, [r7, #8]
   14ca4:	607b      	str	r3, [r7, #4]
   14ca6:	2b07      	cmp	r3, #7
   14ca8:	ddf2      	ble.n	14c90 <_svfprintf_r+0xc58>
   14caa:	003a      	movs	r2, r7
   14cac:	9906      	ldr	r1, [sp, #24]
   14cae:	0020      	movs	r0, r4
   14cb0:	f004 fee6 	bl	19a80 <__ssprint_r>
   14cb4:	2800      	cmp	r0, #0
   14cb6:	d001      	beq.n	14cbc <_svfprintf_r+0xc84>
   14cb8:	f7ff fa45 	bl	14146 <_svfprintf_r+0x10e>
   14cbc:	3e10      	subs	r6, #16
   14cbe:	68b9      	ldr	r1, [r7, #8]
   14cc0:	687b      	ldr	r3, [r7, #4]
   14cc2:	aa32      	add	r2, sp, #200	; 0xc8
   14cc4:	2e10      	cmp	r6, #16
   14cc6:	dce7      	bgt.n	14c98 <_svfprintf_r+0xc60>
   14cc8:	46a9      	mov	r9, r5
   14cca:	000c      	movs	r4, r1
   14ccc:	0035      	movs	r5, r6
   14cce:	4698      	mov	r8, r3
   14cd0:	0016      	movs	r6, r2
   14cd2:	464b      	mov	r3, r9
   14cd4:	6075      	str	r5, [r6, #4]
   14cd6:	6033      	str	r3, [r6, #0]
   14cd8:	1964      	adds	r4, r4, r5
   14cda:	e629      	b.n	14930 <_svfprintf_r+0x8f8>
   14cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14cde:	681a      	ldr	r2, [r3, #0]
   14ce0:	f7ff fbfb 	bl	144da <_svfprintf_r+0x4a2>
   14ce4:	6813      	ldr	r3, [r2, #0]
   14ce6:	9307      	str	r3, [sp, #28]
   14ce8:	f7ff fa82 	bl	141f0 <_svfprintf_r+0x1b8>
   14cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14cee:	681a      	ldr	r2, [r3, #0]
   14cf0:	f7ff fb84 	bl	143fc <_svfprintf_r+0x3c4>
   14cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14cf6:	681a      	ldr	r2, [r3, #0]
   14cf8:	f7ff fbd1 	bl	1449e <_svfprintf_r+0x466>
   14cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14cfe:	68ba      	ldr	r2, [r7, #8]
   14d00:	6033      	str	r3, [r6, #0]
   14d02:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14d04:	469c      	mov	ip, r3
   14d06:	6073      	str	r3, [r6, #4]
   14d08:	687b      	ldr	r3, [r7, #4]
   14d0a:	4462      	add	r2, ip
   14d0c:	3301      	adds	r3, #1
   14d0e:	0014      	movs	r4, r2
   14d10:	60ba      	str	r2, [r7, #8]
   14d12:	607b      	str	r3, [r7, #4]
   14d14:	2b07      	cmp	r3, #7
   14d16:	dd00      	ble.n	14d1a <_svfprintf_r+0xce2>
   14d18:	e202      	b.n	15120 <_svfprintf_r+0x10e8>
   14d1a:	3608      	adds	r6, #8
   14d1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14d1e:	1e5d      	subs	r5, r3, #1
   14d20:	2d00      	cmp	r5, #0
   14d22:	dc00      	bgt.n	14d26 <_svfprintf_r+0xcee>
   14d24:	e57e      	b.n	14824 <_svfprintf_r+0x7ec>
   14d26:	4a70      	ldr	r2, [pc, #448]	; (14ee8 <_svfprintf_r+0xeb0>)
   14d28:	687b      	ldr	r3, [r7, #4]
   14d2a:	4691      	mov	r9, r2
   14d2c:	2d10      	cmp	r5, #16
   14d2e:	dd25      	ble.n	14d7c <_svfprintf_r+0xd44>
   14d30:	2210      	movs	r2, #16
   14d32:	0021      	movs	r1, r4
   14d34:	4690      	mov	r8, r2
   14d36:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14d38:	0032      	movs	r2, r6
   14d3a:	002e      	movs	r6, r5
   14d3c:	464d      	mov	r5, r9
   14d3e:	e003      	b.n	14d48 <_svfprintf_r+0xd10>
   14d40:	3208      	adds	r2, #8
   14d42:	3e10      	subs	r6, #16
   14d44:	2e10      	cmp	r6, #16
   14d46:	dd15      	ble.n	14d74 <_svfprintf_r+0xd3c>
   14d48:	4640      	mov	r0, r8
   14d4a:	3110      	adds	r1, #16
   14d4c:	3301      	adds	r3, #1
   14d4e:	6015      	str	r5, [r2, #0]
   14d50:	6050      	str	r0, [r2, #4]
   14d52:	60b9      	str	r1, [r7, #8]
   14d54:	607b      	str	r3, [r7, #4]
   14d56:	2b07      	cmp	r3, #7
   14d58:	ddf2      	ble.n	14d40 <_svfprintf_r+0xd08>
   14d5a:	003a      	movs	r2, r7
   14d5c:	9906      	ldr	r1, [sp, #24]
   14d5e:	0020      	movs	r0, r4
   14d60:	f004 fe8e 	bl	19a80 <__ssprint_r>
   14d64:	2800      	cmp	r0, #0
   14d66:	d001      	beq.n	14d6c <_svfprintf_r+0xd34>
   14d68:	f7ff f9ed 	bl	14146 <_svfprintf_r+0x10e>
   14d6c:	68b9      	ldr	r1, [r7, #8]
   14d6e:	687b      	ldr	r3, [r7, #4]
   14d70:	aa32      	add	r2, sp, #200	; 0xc8
   14d72:	e7e6      	b.n	14d42 <_svfprintf_r+0xd0a>
   14d74:	46a9      	mov	r9, r5
   14d76:	000c      	movs	r4, r1
   14d78:	0035      	movs	r5, r6
   14d7a:	0016      	movs	r6, r2
   14d7c:	464a      	mov	r2, r9
   14d7e:	1964      	adds	r4, r4, r5
   14d80:	3301      	adds	r3, #1
   14d82:	6032      	str	r2, [r6, #0]
   14d84:	6075      	str	r5, [r6, #4]
   14d86:	60bc      	str	r4, [r7, #8]
   14d88:	607b      	str	r3, [r7, #4]
   14d8a:	2b07      	cmp	r3, #7
   14d8c:	dc00      	bgt.n	14d90 <_svfprintf_r+0xd58>
   14d8e:	e548      	b.n	14822 <_svfprintf_r+0x7ea>
   14d90:	e5e5      	b.n	1495e <_svfprintf_r+0x926>
   14d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14d94:	2b09      	cmp	r3, #9
   14d96:	d900      	bls.n	14d9a <_svfprintf_r+0xd62>
   14d98:	e730      	b.n	14bfc <_svfprintf_r+0xbc4>
   14d9a:	9c08      	ldr	r4, [sp, #32]
   14d9c:	2227      	movs	r2, #39	; 0x27
   14d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14da0:	a928      	add	r1, sp, #160	; 0xa0
   14da2:	3330      	adds	r3, #48	; 0x30
   14da4:	548b      	strb	r3, [r1, r2]
   14da6:	2301      	movs	r3, #1
   14da8:	aa16      	add	r2, sp, #88	; 0x58
   14daa:	4694      	mov	ip, r2
   14dac:	930e      	str	r3, [sp, #56]	; 0x38
   14dae:	336e      	adds	r3, #110	; 0x6e
   14db0:	4463      	add	r3, ip
   14db2:	9408      	str	r4, [sp, #32]
   14db4:	9311      	str	r3, [sp, #68]	; 0x44
   14db6:	f7ff fa4f 	bl	14258 <_svfprintf_r+0x220>
   14dba:	2b30      	cmp	r3, #48	; 0x30
   14dbc:	d100      	bne.n	14dc0 <_svfprintf_r+0xd88>
   14dbe:	e20b      	b.n	151d8 <_svfprintf_r+0x11a0>
   14dc0:	2330      	movs	r3, #48	; 0x30
   14dc2:	3a02      	subs	r2, #2
   14dc4:	7013      	strb	r3, [r2, #0]
   14dc6:	ab32      	add	r3, sp, #200	; 0xc8
   14dc8:	1a9b      	subs	r3, r3, r2
   14dca:	930e      	str	r3, [sp, #56]	; 0x38
   14dcc:	9211      	str	r2, [sp, #68]	; 0x44
   14dce:	f7ff fa43 	bl	14258 <_svfprintf_r+0x220>
   14dd2:	46b0      	mov	r8, r6
   14dd4:	46a1      	mov	r9, r4
   14dd6:	0016      	movs	r6, r2
   14dd8:	000c      	movs	r4, r1
   14dda:	464a      	mov	r2, r9
   14ddc:	6032      	str	r2, [r6, #0]
   14dde:	4642      	mov	r2, r8
   14de0:	4444      	add	r4, r8
   14de2:	3301      	adds	r3, #1
   14de4:	6072      	str	r2, [r6, #4]
   14de6:	60bc      	str	r4, [r7, #8]
   14de8:	607b      	str	r3, [r7, #4]
   14dea:	2b07      	cmp	r3, #7
   14dec:	dd00      	ble.n	14df0 <_svfprintf_r+0xdb8>
   14dee:	e29c      	b.n	1532a <_svfprintf_r+0x12f2>
   14df0:	3608      	adds	r6, #8
   14df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   14df4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14df6:	4293      	cmp	r3, r2
   14df8:	db4c      	blt.n	14e94 <_svfprintf_r+0xe5c>
   14dfa:	9a08      	ldr	r2, [sp, #32]
   14dfc:	07d2      	lsls	r2, r2, #31
   14dfe:	d449      	bmi.n	14e94 <_svfprintf_r+0xe5c>
   14e00:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14e02:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14e04:	1ad3      	subs	r3, r2, r3
   14e06:	1a52      	subs	r2, r2, r1
   14e08:	4690      	mov	r8, r2
   14e0a:	429a      	cmp	r2, r3
   14e0c:	dd00      	ble.n	14e10 <_svfprintf_r+0xdd8>
   14e0e:	4698      	mov	r8, r3
   14e10:	4642      	mov	r2, r8
   14e12:	2a00      	cmp	r2, #0
   14e14:	dd0f      	ble.n	14e36 <_svfprintf_r+0xdfe>
   14e16:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   14e1a:	468c      	mov	ip, r1
   14e1c:	4462      	add	r2, ip
   14e1e:	6032      	str	r2, [r6, #0]
   14e20:	4642      	mov	r2, r8
   14e22:	6072      	str	r2, [r6, #4]
   14e24:	687a      	ldr	r2, [r7, #4]
   14e26:	4444      	add	r4, r8
   14e28:	3201      	adds	r2, #1
   14e2a:	60bc      	str	r4, [r7, #8]
   14e2c:	607a      	str	r2, [r7, #4]
   14e2e:	2a07      	cmp	r2, #7
   14e30:	dd00      	ble.n	14e34 <_svfprintf_r+0xdfc>
   14e32:	e286      	b.n	15342 <_svfprintf_r+0x130a>
   14e34:	3608      	adds	r6, #8
   14e36:	4642      	mov	r2, r8
   14e38:	43d5      	mvns	r5, r2
   14e3a:	17ed      	asrs	r5, r5, #31
   14e3c:	4015      	ands	r5, r2
   14e3e:	1b5d      	subs	r5, r3, r5
   14e40:	2d00      	cmp	r5, #0
   14e42:	dc00      	bgt.n	14e46 <_svfprintf_r+0xe0e>
   14e44:	e4ee      	b.n	14824 <_svfprintf_r+0x7ec>
   14e46:	4a28      	ldr	r2, [pc, #160]	; (14ee8 <_svfprintf_r+0xeb0>)
   14e48:	687b      	ldr	r3, [r7, #4]
   14e4a:	4691      	mov	r9, r2
   14e4c:	2d10      	cmp	r5, #16
   14e4e:	dd95      	ble.n	14d7c <_svfprintf_r+0xd44>
   14e50:	2210      	movs	r2, #16
   14e52:	0021      	movs	r1, r4
   14e54:	4690      	mov	r8, r2
   14e56:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14e58:	0032      	movs	r2, r6
   14e5a:	002e      	movs	r6, r5
   14e5c:	464d      	mov	r5, r9
   14e5e:	e003      	b.n	14e68 <_svfprintf_r+0xe30>
   14e60:	3208      	adds	r2, #8
   14e62:	3e10      	subs	r6, #16
   14e64:	2e10      	cmp	r6, #16
   14e66:	dd85      	ble.n	14d74 <_svfprintf_r+0xd3c>
   14e68:	4640      	mov	r0, r8
   14e6a:	3110      	adds	r1, #16
   14e6c:	3301      	adds	r3, #1
   14e6e:	6015      	str	r5, [r2, #0]
   14e70:	6050      	str	r0, [r2, #4]
   14e72:	60b9      	str	r1, [r7, #8]
   14e74:	607b      	str	r3, [r7, #4]
   14e76:	2b07      	cmp	r3, #7
   14e78:	ddf2      	ble.n	14e60 <_svfprintf_r+0xe28>
   14e7a:	003a      	movs	r2, r7
   14e7c:	9906      	ldr	r1, [sp, #24]
   14e7e:	0020      	movs	r0, r4
   14e80:	f004 fdfe 	bl	19a80 <__ssprint_r>
   14e84:	2800      	cmp	r0, #0
   14e86:	d001      	beq.n	14e8c <_svfprintf_r+0xe54>
   14e88:	f7ff f95d 	bl	14146 <_svfprintf_r+0x10e>
   14e8c:	68b9      	ldr	r1, [r7, #8]
   14e8e:	687b      	ldr	r3, [r7, #4]
   14e90:	aa32      	add	r2, sp, #200	; 0xc8
   14e92:	e7e6      	b.n	14e62 <_svfprintf_r+0xe2a>
   14e94:	9a19      	ldr	r2, [sp, #100]	; 0x64
   14e96:	6032      	str	r2, [r6, #0]
   14e98:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14e9a:	4694      	mov	ip, r2
   14e9c:	6072      	str	r2, [r6, #4]
   14e9e:	687a      	ldr	r2, [r7, #4]
   14ea0:	4464      	add	r4, ip
   14ea2:	3201      	adds	r2, #1
   14ea4:	60bc      	str	r4, [r7, #8]
   14ea6:	607a      	str	r2, [r7, #4]
   14ea8:	2a07      	cmp	r2, #7
   14eaa:	dd00      	ble.n	14eae <_svfprintf_r+0xe76>
   14eac:	e230      	b.n	15310 <_svfprintf_r+0x12d8>
   14eae:	3608      	adds	r6, #8
   14eb0:	e7a6      	b.n	14e00 <_svfprintf_r+0xdc8>
   14eb2:	003a      	movs	r2, r7
   14eb4:	9906      	ldr	r1, [sp, #24]
   14eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14eb8:	f004 fde2 	bl	19a80 <__ssprint_r>
   14ebc:	2800      	cmp	r0, #0
   14ebe:	d001      	beq.n	14ec4 <_svfprintf_r+0xe8c>
   14ec0:	f7ff f941 	bl	14146 <_svfprintf_r+0x10e>
   14ec4:	68bc      	ldr	r4, [r7, #8]
   14ec6:	687b      	ldr	r3, [r7, #4]
   14ec8:	ae32      	add	r6, sp, #200	; 0xc8
   14eca:	e513      	b.n	148f4 <_svfprintf_r+0x8bc>
   14ecc:	003a      	movs	r2, r7
   14ece:	9906      	ldr	r1, [sp, #24]
   14ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ed2:	f004 fdd5 	bl	19a80 <__ssprint_r>
   14ed6:	2800      	cmp	r0, #0
   14ed8:	d001      	beq.n	14ede <_svfprintf_r+0xea6>
   14eda:	f7ff f934 	bl	14146 <_svfprintf_r+0x10e>
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	68bc      	ldr	r4, [r7, #8]
   14ee2:	4698      	mov	r8, r3
   14ee4:	ae32      	add	r6, sp, #200	; 0xc8
   14ee6:	e513      	b.n	14910 <_svfprintf_r+0x8d8>
   14ee8:	0001b184 	.word	0x0001b184
   14eec:	2307      	movs	r3, #7
   14eee:	3207      	adds	r2, #7
   14ef0:	439a      	bics	r2, r3
   14ef2:	3301      	adds	r3, #1
   14ef4:	469c      	mov	ip, r3
   14ef6:	4494      	add	ip, r2
   14ef8:	4663      	mov	r3, ip
   14efa:	930f      	str	r3, [sp, #60]	; 0x3c
   14efc:	6853      	ldr	r3, [r2, #4]
   14efe:	6812      	ldr	r2, [r2, #0]
   14f00:	930d      	str	r3, [sp, #52]	; 0x34
   14f02:	920c      	str	r2, [sp, #48]	; 0x30
   14f04:	2b00      	cmp	r3, #0
   14f06:	db01      	blt.n	14f0c <_svfprintf_r+0xed4>
   14f08:	f7ff f97a 	bl	14200 <_svfprintf_r+0x1c8>
   14f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
   14f0e:	990d      	ldr	r1, [sp, #52]	; 0x34
   14f10:	2300      	movs	r3, #0
   14f12:	4242      	negs	r2, r0
   14f14:	418b      	sbcs	r3, r1
   14f16:	0011      	movs	r1, r2
   14f18:	001a      	movs	r2, r3
   14f1a:	232d      	movs	r3, #45	; 0x2d
   14f1c:	a816      	add	r0, sp, #88	; 0x58
   14f1e:	77c3      	strb	r3, [r0, #31]
   14f20:	0008      	movs	r0, r1
   14f22:	4310      	orrs	r0, r2
   14f24:	910c      	str	r1, [sp, #48]	; 0x30
   14f26:	920d      	str	r2, [sp, #52]	; 0x34
   14f28:	4698      	mov	r8, r3
   14f2a:	0002      	movs	r2, r0
   14f2c:	3b2c      	subs	r3, #44	; 0x2c
   14f2e:	f7ff f970 	bl	14212 <_svfprintf_r+0x1da>
   14f32:	003a      	movs	r2, r7
   14f34:	9906      	ldr	r1, [sp, #24]
   14f36:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f38:	f004 fda2 	bl	19a80 <__ssprint_r>
   14f3c:	2800      	cmp	r0, #0
   14f3e:	d001      	beq.n	14f44 <_svfprintf_r+0xf0c>
   14f40:	f7ff f901 	bl	14146 <_svfprintf_r+0x10e>
   14f44:	68bc      	ldr	r4, [r7, #8]
   14f46:	ae32      	add	r6, sp, #200	; 0xc8
   14f48:	e418      	b.n	1477c <_svfprintf_r+0x744>
   14f4a:	9916      	ldr	r1, [sp, #88]	; 0x58
   14f4c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   14f4e:	000a      	movs	r2, r1
   14f50:	0008      	movs	r0, r1
   14f52:	002b      	movs	r3, r5
   14f54:	0029      	movs	r1, r5
   14f56:	f005 f925 	bl	1a1a4 <__aeabi_dcmpun>
   14f5a:	2800      	cmp	r0, #0
   14f5c:	d000      	beq.n	14f60 <_svfprintf_r+0xf28>
   14f5e:	e2e6      	b.n	1552e <_svfprintf_r+0x14f6>
   14f60:	4653      	mov	r3, sl
   14f62:	3301      	adds	r3, #1
   14f64:	d100      	bne.n	14f68 <_svfprintf_r+0xf30>
   14f66:	e20d      	b.n	15384 <_svfprintf_r+0x134c>
   14f68:	2320      	movs	r3, #32
   14f6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f6c:	439a      	bics	r2, r3
   14f6e:	920e      	str	r2, [sp, #56]	; 0x38
   14f70:	2a47      	cmp	r2, #71	; 0x47
   14f72:	d100      	bne.n	14f76 <_svfprintf_r+0xf3e>
   14f74:	e11c      	b.n	151b0 <_svfprintf_r+0x1178>
   14f76:	2380      	movs	r3, #128	; 0x80
   14f78:	005b      	lsls	r3, r3, #1
   14f7a:	4323      	orrs	r3, r4
   14f7c:	9308      	str	r3, [sp, #32]
   14f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14f80:	2b00      	cmp	r3, #0
   14f82:	da00      	bge.n	14f86 <_svfprintf_r+0xf4e>
   14f84:	e221      	b.n	153ca <_svfprintf_r+0x1392>
   14f86:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14f88:	9307      	str	r3, [sp, #28]
   14f8a:	2300      	movs	r3, #0
   14f8c:	4691      	mov	r9, r2
   14f8e:	9310      	str	r3, [sp, #64]	; 0x40
   14f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14f92:	2b66      	cmp	r3, #102	; 0x66
   14f94:	d100      	bne.n	14f98 <_svfprintf_r+0xf60>
   14f96:	e1fc      	b.n	15392 <_svfprintf_r+0x135a>
   14f98:	2b46      	cmp	r3, #70	; 0x46
   14f9a:	d100      	bne.n	14f9e <_svfprintf_r+0xf66>
   14f9c:	e0db      	b.n	15156 <_svfprintf_r+0x111e>
   14f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
   14fa2:	3a45      	subs	r2, #69	; 0x45
   14fa4:	0013      	movs	r3, r2
   14fa6:	4259      	negs	r1, r3
   14fa8:	4159      	adcs	r1, r3
   14faa:	ab20      	add	r3, sp, #128	; 0x80
   14fac:	000d      	movs	r5, r1
   14fae:	9303      	str	r3, [sp, #12]
   14fb0:	ab1f      	add	r3, sp, #124	; 0x7c
   14fb2:	9302      	str	r3, [sp, #8]
   14fb4:	2302      	movs	r3, #2
   14fb6:	aa23      	add	r2, sp, #140	; 0x8c
   14fb8:	4455      	add	r5, sl
   14fba:	921b      	str	r2, [sp, #108]	; 0x6c
   14fbc:	9204      	str	r2, [sp, #16]
   14fbe:	9300      	str	r3, [sp, #0]
   14fc0:	9501      	str	r5, [sp, #4]
   14fc2:	9b07      	ldr	r3, [sp, #28]
   14fc4:	464a      	mov	r2, r9
   14fc6:	f002 f813 	bl	16ff0 <_dtoa_r>
   14fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14fcc:	9011      	str	r0, [sp, #68]	; 0x44
   14fce:	2b67      	cmp	r3, #103	; 0x67
   14fd0:	d000      	beq.n	14fd4 <_svfprintf_r+0xf9c>
   14fd2:	e239      	b.n	15448 <_svfprintf_r+0x1410>
   14fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14fd6:	4698      	mov	r8, r3
   14fd8:	44a8      	add	r8, r5
   14fda:	07e3      	lsls	r3, r4, #31
   14fdc:	d400      	bmi.n	14fe0 <_svfprintf_r+0xfa8>
   14fde:	e28b      	b.n	154f8 <_svfprintf_r+0x14c0>
   14fe0:	2300      	movs	r3, #0
   14fe2:	2200      	movs	r2, #0
   14fe4:	4648      	mov	r0, r9
   14fe6:	9907      	ldr	r1, [sp, #28]
   14fe8:	f7fe fc8a 	bl	13900 <__aeabi_dcmpeq>
   14fec:	4643      	mov	r3, r8
   14fee:	2800      	cmp	r0, #0
   14ff0:	d10a      	bne.n	15008 <_svfprintf_r+0xfd0>
   14ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   14ff4:	4543      	cmp	r3, r8
   14ff6:	d207      	bcs.n	15008 <_svfprintf_r+0xfd0>
   14ff8:	2130      	movs	r1, #48	; 0x30
   14ffa:	4640      	mov	r0, r8
   14ffc:	1c5a      	adds	r2, r3, #1
   14ffe:	9223      	str	r2, [sp, #140]	; 0x8c
   15000:	7019      	strb	r1, [r3, #0]
   15002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   15004:	4298      	cmp	r0, r3
   15006:	d8f9      	bhi.n	14ffc <_svfprintf_r+0xfc4>
   15008:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1500a:	1a9b      	subs	r3, r3, r2
   1500c:	9314      	str	r3, [sp, #80]	; 0x50
   1500e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15010:	2b47      	cmp	r3, #71	; 0x47
   15012:	d100      	bne.n	15016 <_svfprintf_r+0xfde>
   15014:	e0f6      	b.n	15204 <_svfprintf_r+0x11cc>
   15016:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15018:	2b65      	cmp	r3, #101	; 0x65
   1501a:	dc00      	bgt.n	1501e <_svfprintf_r+0xfe6>
   1501c:	e226      	b.n	1546c <_svfprintf_r+0x1434>
   1501e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15020:	2b66      	cmp	r3, #102	; 0x66
   15022:	d100      	bne.n	15026 <_svfprintf_r+0xfee>
   15024:	e1f4      	b.n	15410 <_svfprintf_r+0x13d8>
   15026:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15028:	9313      	str	r3, [sp, #76]	; 0x4c
   1502a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1502c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1502e:	0019      	movs	r1, r3
   15030:	4291      	cmp	r1, r2
   15032:	dd00      	ble.n	15036 <_svfprintf_r+0xffe>
   15034:	e1d4      	b.n	153e0 <_svfprintf_r+0x13a8>
   15036:	07e3      	lsls	r3, r4, #31
   15038:	d500      	bpl.n	1503c <_svfprintf_r+0x1004>
   1503a:	e249      	b.n	154d0 <_svfprintf_r+0x1498>
   1503c:	43d3      	mvns	r3, r2
   1503e:	17db      	asrs	r3, r3, #31
   15040:	0011      	movs	r1, r2
   15042:	401a      	ands	r2, r3
   15044:	2367      	movs	r3, #103	; 0x67
   15046:	9207      	str	r2, [sp, #28]
   15048:	910e      	str	r1, [sp, #56]	; 0x38
   1504a:	9312      	str	r3, [sp, #72]	; 0x48
   1504c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1504e:	2b00      	cmp	r3, #0
   15050:	d000      	beq.n	15054 <_svfprintf_r+0x101c>
   15052:	e0cf      	b.n	151f4 <_svfprintf_r+0x11bc>
   15054:	ab16      	add	r3, sp, #88	; 0x58
   15056:	7fdb      	ldrb	r3, [r3, #31]
   15058:	4698      	mov	r8, r3
   1505a:	2300      	movs	r3, #0
   1505c:	469a      	mov	sl, r3
   1505e:	f7ff f903 	bl	14268 <_svfprintf_r+0x230>
   15062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15064:	990a      	ldr	r1, [sp, #40]	; 0x28
   15066:	6813      	ldr	r3, [r2, #0]
   15068:	6019      	str	r1, [r3, #0]
   1506a:	0013      	movs	r3, r2
   1506c:	3304      	adds	r3, #4
   1506e:	930f      	str	r3, [sp, #60]	; 0x3c
   15070:	f7ff f80d 	bl	1408e <_svfprintf_r+0x56>
   15074:	003a      	movs	r2, r7
   15076:	9906      	ldr	r1, [sp, #24]
   15078:	9809      	ldr	r0, [sp, #36]	; 0x24
   1507a:	f004 fd01 	bl	19a80 <__ssprint_r>
   1507e:	2800      	cmp	r0, #0
   15080:	d001      	beq.n	15086 <_svfprintf_r+0x104e>
   15082:	f7ff f860 	bl	14146 <_svfprintf_r+0x10e>
   15086:	ae32      	add	r6, sp, #200	; 0xc8
   15088:	e48e      	b.n	149a8 <_svfprintf_r+0x970>
   1508a:	4bde      	ldr	r3, [pc, #888]	; (15404 <_svfprintf_r+0x13cc>)
   1508c:	3401      	adds	r4, #1
   1508e:	6033      	str	r3, [r6, #0]
   15090:	2301      	movs	r3, #1
   15092:	6073      	str	r3, [r6, #4]
   15094:	687b      	ldr	r3, [r7, #4]
   15096:	60bc      	str	r4, [r7, #8]
   15098:	3301      	adds	r3, #1
   1509a:	607b      	str	r3, [r7, #4]
   1509c:	2b07      	cmp	r3, #7
   1509e:	dc7a      	bgt.n	15196 <_svfprintf_r+0x115e>
   150a0:	3608      	adds	r6, #8
   150a2:	2800      	cmp	r0, #0
   150a4:	d107      	bne.n	150b6 <_svfprintf_r+0x107e>
   150a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   150a8:	2b00      	cmp	r3, #0
   150aa:	d104      	bne.n	150b6 <_svfprintf_r+0x107e>
   150ac:	9b08      	ldr	r3, [sp, #32]
   150ae:	07db      	lsls	r3, r3, #31
   150b0:	d401      	bmi.n	150b6 <_svfprintf_r+0x107e>
   150b2:	f7ff fbb7 	bl	14824 <_svfprintf_r+0x7ec>
   150b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   150b8:	6033      	str	r3, [r6, #0]
   150ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
   150bc:	1919      	adds	r1, r3, r4
   150be:	6073      	str	r3, [r6, #4]
   150c0:	687b      	ldr	r3, [r7, #4]
   150c2:	60b9      	str	r1, [r7, #8]
   150c4:	3301      	adds	r3, #1
   150c6:	607b      	str	r3, [r7, #4]
   150c8:	2b07      	cmp	r3, #7
   150ca:	dd00      	ble.n	150ce <_svfprintf_r+0x1096>
   150cc:	e1f2      	b.n	154b4 <_svfprintf_r+0x147c>
   150ce:	0032      	movs	r2, r6
   150d0:	3208      	adds	r2, #8
   150d2:	2800      	cmp	r0, #0
   150d4:	da00      	bge.n	150d8 <_svfprintf_r+0x10a0>
   150d6:	e1cc      	b.n	15472 <_svfprintf_r+0x143a>
   150d8:	9811      	ldr	r0, [sp, #68]	; 0x44
   150da:	3301      	adds	r3, #1
   150dc:	6010      	str	r0, [r2, #0]
   150de:	9814      	ldr	r0, [sp, #80]	; 0x50
   150e0:	607b      	str	r3, [r7, #4]
   150e2:	1844      	adds	r4, r0, r1
   150e4:	6050      	str	r0, [r2, #4]
   150e6:	60bc      	str	r4, [r7, #8]
   150e8:	2b07      	cmp	r3, #7
   150ea:	dd00      	ble.n	150ee <_svfprintf_r+0x10b6>
   150ec:	e437      	b.n	1495e <_svfprintf_r+0x926>
   150ee:	3208      	adds	r2, #8
   150f0:	0016      	movs	r6, r2
   150f2:	f7ff fb97 	bl	14824 <_svfprintf_r+0x7ec>
   150f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   150f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   150fa:	680b      	ldr	r3, [r1, #0]
   150fc:	601a      	str	r2, [r3, #0]
   150fe:	17d2      	asrs	r2, r2, #31
   15100:	605a      	str	r2, [r3, #4]
   15102:	000b      	movs	r3, r1
   15104:	3304      	adds	r3, #4
   15106:	930f      	str	r3, [sp, #60]	; 0x3c
   15108:	f7fe ffc1 	bl	1408e <_svfprintf_r+0x56>
   1510c:	464b      	mov	r3, r9
   1510e:	3101      	adds	r1, #1
   15110:	431c      	orrs	r4, r3
   15112:	780b      	ldrb	r3, [r1, #0]
   15114:	f7fe fff4 	bl	14100 <_svfprintf_r+0xc8>
   15118:	4bbb      	ldr	r3, [pc, #748]	; (15408 <_svfprintf_r+0x13d0>)
   1511a:	9311      	str	r3, [sp, #68]	; 0x44
   1511c:	f7ff f937 	bl	1438e <_svfprintf_r+0x356>
   15120:	003a      	movs	r2, r7
   15122:	9906      	ldr	r1, [sp, #24]
   15124:	9809      	ldr	r0, [sp, #36]	; 0x24
   15126:	f004 fcab 	bl	19a80 <__ssprint_r>
   1512a:	2800      	cmp	r0, #0
   1512c:	d001      	beq.n	15132 <_svfprintf_r+0x10fa>
   1512e:	f7ff f80a 	bl	14146 <_svfprintf_r+0x10e>
   15132:	68bc      	ldr	r4, [r7, #8]
   15134:	ae32      	add	r6, sp, #200	; 0xc8
   15136:	e5f1      	b.n	14d1c <_svfprintf_r+0xce4>
   15138:	2140      	movs	r1, #64	; 0x40
   1513a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1513c:	f003 fbe6 	bl	1890c <_malloc_r>
   15140:	9b06      	ldr	r3, [sp, #24]
   15142:	6018      	str	r0, [r3, #0]
   15144:	6118      	str	r0, [r3, #16]
   15146:	2800      	cmp	r0, #0
   15148:	d100      	bne.n	1514c <_svfprintf_r+0x1114>
   1514a:	e24f      	b.n	155ec <_svfprintf_r+0x15b4>
   1514c:	2340      	movs	r3, #64	; 0x40
   1514e:	9a06      	ldr	r2, [sp, #24]
   15150:	6153      	str	r3, [r2, #20]
   15152:	f7fe ff8e 	bl	14072 <_svfprintf_r+0x3a>
   15156:	ab23      	add	r3, sp, #140	; 0x8c
   15158:	931b      	str	r3, [sp, #108]	; 0x6c
   1515a:	9304      	str	r3, [sp, #16]
   1515c:	ab20      	add	r3, sp, #128	; 0x80
   1515e:	9303      	str	r3, [sp, #12]
   15160:	ab1f      	add	r3, sp, #124	; 0x7c
   15162:	9302      	str	r3, [sp, #8]
   15164:	4653      	mov	r3, sl
   15166:	9301      	str	r3, [sp, #4]
   15168:	2303      	movs	r3, #3
   1516a:	464a      	mov	r2, r9
   1516c:	9300      	str	r3, [sp, #0]
   1516e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15170:	9b07      	ldr	r3, [sp, #28]
   15172:	f001 ff3d 	bl	16ff0 <_dtoa_r>
   15176:	4655      	mov	r5, sl
   15178:	9011      	str	r0, [sp, #68]	; 0x44
   1517a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1517c:	4698      	mov	r8, r3
   1517e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15180:	44a8      	add	r8, r5
   15182:	2b46      	cmp	r3, #70	; 0x46
   15184:	d000      	beq.n	15188 <_svfprintf_r+0x1150>
   15186:	e72b      	b.n	14fe0 <_svfprintf_r+0xfa8>
   15188:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1518a:	781b      	ldrb	r3, [r3, #0]
   1518c:	2b30      	cmp	r3, #48	; 0x30
   1518e:	d016      	beq.n	151be <_svfprintf_r+0x1186>
   15190:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15192:	4498      	add	r8, r3
   15194:	e724      	b.n	14fe0 <_svfprintf_r+0xfa8>
   15196:	003a      	movs	r2, r7
   15198:	9906      	ldr	r1, [sp, #24]
   1519a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1519c:	f004 fc70 	bl	19a80 <__ssprint_r>
   151a0:	2800      	cmp	r0, #0
   151a2:	d001      	beq.n	151a8 <_svfprintf_r+0x1170>
   151a4:	f7fe ffcf 	bl	14146 <_svfprintf_r+0x10e>
   151a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   151aa:	68bc      	ldr	r4, [r7, #8]
   151ac:	ae32      	add	r6, sp, #200	; 0xc8
   151ae:	e778      	b.n	150a2 <_svfprintf_r+0x106a>
   151b0:	4653      	mov	r3, sl
   151b2:	2b00      	cmp	r3, #0
   151b4:	d000      	beq.n	151b8 <_svfprintf_r+0x1180>
   151b6:	e6de      	b.n	14f76 <_svfprintf_r+0xf3e>
   151b8:	3301      	adds	r3, #1
   151ba:	469a      	mov	sl, r3
   151bc:	e6db      	b.n	14f76 <_svfprintf_r+0xf3e>
   151be:	2200      	movs	r2, #0
   151c0:	2300      	movs	r3, #0
   151c2:	4648      	mov	r0, r9
   151c4:	9907      	ldr	r1, [sp, #28]
   151c6:	f7fe fb9b 	bl	13900 <__aeabi_dcmpeq>
   151ca:	2800      	cmp	r0, #0
   151cc:	d1e0      	bne.n	15190 <_svfprintf_r+0x1158>
   151ce:	2301      	movs	r3, #1
   151d0:	1b5b      	subs	r3, r3, r5
   151d2:	931f      	str	r3, [sp, #124]	; 0x7c
   151d4:	4498      	add	r8, r3
   151d6:	e703      	b.n	14fe0 <_svfprintf_r+0xfa8>
   151d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   151da:	ab32      	add	r3, sp, #200	; 0xc8
   151dc:	1a9b      	subs	r3, r3, r2
   151de:	930e      	str	r3, [sp, #56]	; 0x38
   151e0:	f7ff f83a 	bl	14258 <_svfprintf_r+0x220>
   151e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   151e6:	f7fe fef5 	bl	13fd4 <strlen>
   151ea:	0002      	movs	r2, r0
   151ec:	900e      	str	r0, [sp, #56]	; 0x38
   151ee:	0003      	movs	r3, r0
   151f0:	f7ff f9cd 	bl	1458e <_svfprintf_r+0x556>
   151f4:	232d      	movs	r3, #45	; 0x2d
   151f6:	aa16      	add	r2, sp, #88	; 0x58
   151f8:	77d3      	strb	r3, [r2, #31]
   151fa:	4698      	mov	r8, r3
   151fc:	2300      	movs	r3, #0
   151fe:	469a      	mov	sl, r3
   15200:	f7ff f835 	bl	1426e <_svfprintf_r+0x236>
   15204:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15206:	9313      	str	r3, [sp, #76]	; 0x4c
   15208:	1cda      	adds	r2, r3, #3
   1520a:	db02      	blt.n	15212 <_svfprintf_r+0x11da>
   1520c:	459a      	cmp	sl, r3
   1520e:	db00      	blt.n	15212 <_svfprintf_r+0x11da>
   15210:	e70b      	b.n	1502a <_svfprintf_r+0xff2>
   15212:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15214:	3b02      	subs	r3, #2
   15216:	9312      	str	r3, [sp, #72]	; 0x48
   15218:	222c      	movs	r2, #44	; 0x2c
   1521a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1521c:	2148      	movs	r1, #72	; 0x48
   1521e:	1e5d      	subs	r5, r3, #1
   15220:	ab16      	add	r3, sp, #88	; 0x58
   15222:	189b      	adds	r3, r3, r2
   15224:	466a      	mov	r2, sp
   15226:	1852      	adds	r2, r2, r1
   15228:	7812      	ldrb	r2, [r2, #0]
   1522a:	951f      	str	r5, [sp, #124]	; 0x7c
   1522c:	701a      	strb	r2, [r3, #0]
   1522e:	2d00      	cmp	r5, #0
   15230:	da00      	bge.n	15234 <_svfprintf_r+0x11fc>
   15232:	e1a4      	b.n	1557e <_svfprintf_r+0x1546>
   15234:	212d      	movs	r1, #45	; 0x2d
   15236:	232b      	movs	r3, #43	; 0x2b
   15238:	aa16      	add	r2, sp, #88	; 0x58
   1523a:	1852      	adds	r2, r2, r1
   1523c:	7013      	strb	r3, [r2, #0]
   1523e:	2d09      	cmp	r5, #9
   15240:	dc00      	bgt.n	15244 <_svfprintf_r+0x120c>
   15242:	e14c      	b.n	154de <_svfprintf_r+0x14a6>
   15244:	aa16      	add	r2, sp, #88	; 0x58
   15246:	233b      	movs	r3, #59	; 0x3b
   15248:	4694      	mov	ip, r2
   1524a:	4463      	add	r3, ip
   1524c:	469a      	mov	sl, r3
   1524e:	46b1      	mov	r9, r6
   15250:	46a0      	mov	r8, r4
   15252:	4656      	mov	r6, sl
   15254:	e000      	b.n	15258 <_svfprintf_r+0x1220>
   15256:	0026      	movs	r6, r4
   15258:	0028      	movs	r0, r5
   1525a:	210a      	movs	r1, #10
   1525c:	f7fb fd1e 	bl	10c9c <__aeabi_idivmod>
   15260:	1e74      	subs	r4, r6, #1
   15262:	3130      	adds	r1, #48	; 0x30
   15264:	7021      	strb	r1, [r4, #0]
   15266:	0028      	movs	r0, r5
   15268:	210a      	movs	r1, #10
   1526a:	f7fb fc31 	bl	10ad0 <__divsi3>
   1526e:	0005      	movs	r5, r0
   15270:	2809      	cmp	r0, #9
   15272:	dcf0      	bgt.n	15256 <_svfprintf_r+0x121e>
   15274:	0023      	movs	r3, r4
   15276:	4644      	mov	r4, r8
   15278:	46b0      	mov	r8, r6
   1527a:	464e      	mov	r6, r9
   1527c:	4699      	mov	r9, r3
   1527e:	0003      	movs	r3, r0
   15280:	3330      	adds	r3, #48	; 0x30
   15282:	b2d8      	uxtb	r0, r3
   15284:	4643      	mov	r3, r8
   15286:	3b02      	subs	r3, #2
   15288:	7018      	strb	r0, [r3, #0]
   1528a:	459a      	cmp	sl, r3
   1528c:	d800      	bhi.n	15290 <_svfprintf_r+0x1258>
   1528e:	e1b4      	b.n	155fa <_svfprintf_r+0x15c2>
   15290:	4642      	mov	r2, r8
   15292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15294:	4645      	mov	r5, r8
   15296:	1a99      	subs	r1, r3, r2
   15298:	2301      	movs	r3, #1
   1529a:	3107      	adds	r1, #7
   1529c:	425b      	negs	r3, r3
   1529e:	e001      	b.n	152a4 <_svfprintf_r+0x126c>
   152a0:	5ce8      	ldrb	r0, [r5, r3]
   152a2:	3301      	adds	r3, #1
   152a4:	aa21      	add	r2, sp, #132	; 0x84
   152a6:	18d2      	adds	r2, r2, r3
   152a8:	70d0      	strb	r0, [r2, #3]
   152aa:	428b      	cmp	r3, r1
   152ac:	d1f8      	bne.n	152a0 <_svfprintf_r+0x1268>
   152ae:	a916      	add	r1, sp, #88	; 0x58
   152b0:	468c      	mov	ip, r1
   152b2:	222e      	movs	r2, #46	; 0x2e
   152b4:	464b      	mov	r3, r9
   152b6:	4462      	add	r2, ip
   152b8:	4694      	mov	ip, r2
   152ba:	1afb      	subs	r3, r7, r3
   152bc:	4463      	add	r3, ip
   152be:	aa21      	add	r2, sp, #132	; 0x84
   152c0:	9914      	ldr	r1, [sp, #80]	; 0x50
   152c2:	1a9b      	subs	r3, r3, r2
   152c4:	469c      	mov	ip, r3
   152c6:	000a      	movs	r2, r1
   152c8:	4462      	add	r2, ip
   152ca:	931a      	str	r3, [sp, #104]	; 0x68
   152cc:	920e      	str	r2, [sp, #56]	; 0x38
   152ce:	2901      	cmp	r1, #1
   152d0:	dc00      	bgt.n	152d4 <_svfprintf_r+0x129c>
   152d2:	e145      	b.n	15560 <_svfprintf_r+0x1528>
   152d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   152d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   152d8:	4694      	mov	ip, r2
   152da:	4463      	add	r3, ip
   152dc:	001a      	movs	r2, r3
   152de:	930e      	str	r3, [sp, #56]	; 0x38
   152e0:	43db      	mvns	r3, r3
   152e2:	17db      	asrs	r3, r3, #31
   152e4:	401a      	ands	r2, r3
   152e6:	2300      	movs	r3, #0
   152e8:	9207      	str	r2, [sp, #28]
   152ea:	9313      	str	r3, [sp, #76]	; 0x4c
   152ec:	e6ae      	b.n	1504c <_svfprintf_r+0x1014>
   152ee:	2301      	movs	r3, #1
   152f0:	425b      	negs	r3, r3
   152f2:	930a      	str	r3, [sp, #40]	; 0x28
   152f4:	f7fe ff2d 	bl	14152 <_svfprintf_r+0x11a>
   152f8:	003a      	movs	r2, r7
   152fa:	9906      	ldr	r1, [sp, #24]
   152fc:	9809      	ldr	r0, [sp, #36]	; 0x24
   152fe:	f004 fbbf 	bl	19a80 <__ssprint_r>
   15302:	2800      	cmp	r0, #0
   15304:	d001      	beq.n	1530a <_svfprintf_r+0x12d2>
   15306:	f7fe ff1e 	bl	14146 <_svfprintf_r+0x10e>
   1530a:	68bc      	ldr	r4, [r7, #8]
   1530c:	ae32      	add	r6, sp, #200	; 0xc8
   1530e:	e43c      	b.n	14b8a <_svfprintf_r+0xb52>
   15310:	003a      	movs	r2, r7
   15312:	9906      	ldr	r1, [sp, #24]
   15314:	9809      	ldr	r0, [sp, #36]	; 0x24
   15316:	f004 fbb3 	bl	19a80 <__ssprint_r>
   1531a:	2800      	cmp	r0, #0
   1531c:	d001      	beq.n	15322 <_svfprintf_r+0x12ea>
   1531e:	f7fe ff12 	bl	14146 <_svfprintf_r+0x10e>
   15322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15324:	68bc      	ldr	r4, [r7, #8]
   15326:	ae32      	add	r6, sp, #200	; 0xc8
   15328:	e56a      	b.n	14e00 <_svfprintf_r+0xdc8>
   1532a:	003a      	movs	r2, r7
   1532c:	9906      	ldr	r1, [sp, #24]
   1532e:	9809      	ldr	r0, [sp, #36]	; 0x24
   15330:	f004 fba6 	bl	19a80 <__ssprint_r>
   15334:	2800      	cmp	r0, #0
   15336:	d001      	beq.n	1533c <_svfprintf_r+0x1304>
   15338:	f7fe ff05 	bl	14146 <_svfprintf_r+0x10e>
   1533c:	68bc      	ldr	r4, [r7, #8]
   1533e:	ae32      	add	r6, sp, #200	; 0xc8
   15340:	e557      	b.n	14df2 <_svfprintf_r+0xdba>
   15342:	003a      	movs	r2, r7
   15344:	9906      	ldr	r1, [sp, #24]
   15346:	9809      	ldr	r0, [sp, #36]	; 0x24
   15348:	f004 fb9a 	bl	19a80 <__ssprint_r>
   1534c:	2800      	cmp	r0, #0
   1534e:	d001      	beq.n	15354 <_svfprintf_r+0x131c>
   15350:	f7fe fef9 	bl	14146 <_svfprintf_r+0x10e>
   15354:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15356:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15358:	68bc      	ldr	r4, [r7, #8]
   1535a:	1a9b      	subs	r3, r3, r2
   1535c:	ae32      	add	r6, sp, #200	; 0xc8
   1535e:	e56a      	b.n	14e36 <_svfprintf_r+0xdfe>
   15360:	4653      	mov	r3, sl
   15362:	9307      	str	r3, [sp, #28]
   15364:	2b06      	cmp	r3, #6
   15366:	d901      	bls.n	1536c <_svfprintf_r+0x1334>
   15368:	2306      	movs	r3, #6
   1536a:	9307      	str	r3, [sp, #28]
   1536c:	9b07      	ldr	r3, [sp, #28]
   1536e:	950f      	str	r5, [sp, #60]	; 0x3c
   15370:	930e      	str	r3, [sp, #56]	; 0x38
   15372:	2300      	movs	r3, #0
   15374:	4698      	mov	r8, r3
   15376:	469a      	mov	sl, r3
   15378:	9313      	str	r3, [sp, #76]	; 0x4c
   1537a:	4b24      	ldr	r3, [pc, #144]	; (1540c <_svfprintf_r+0x13d4>)
   1537c:	9408      	str	r4, [sp, #32]
   1537e:	9311      	str	r3, [sp, #68]	; 0x44
   15380:	f7fe ff78 	bl	14274 <_svfprintf_r+0x23c>
   15384:	2320      	movs	r3, #32
   15386:	9a12      	ldr	r2, [sp, #72]	; 0x48
   15388:	439a      	bics	r2, r3
   1538a:	3b1a      	subs	r3, #26
   1538c:	920e      	str	r2, [sp, #56]	; 0x38
   1538e:	469a      	mov	sl, r3
   15390:	e5f1      	b.n	14f76 <_svfprintf_r+0xf3e>
   15392:	ab23      	add	r3, sp, #140	; 0x8c
   15394:	931b      	str	r3, [sp, #108]	; 0x6c
   15396:	9304      	str	r3, [sp, #16]
   15398:	ab20      	add	r3, sp, #128	; 0x80
   1539a:	9303      	str	r3, [sp, #12]
   1539c:	ab1f      	add	r3, sp, #124	; 0x7c
   1539e:	9302      	str	r3, [sp, #8]
   153a0:	4653      	mov	r3, sl
   153a2:	9301      	str	r3, [sp, #4]
   153a4:	2303      	movs	r3, #3
   153a6:	464a      	mov	r2, r9
   153a8:	9300      	str	r3, [sp, #0]
   153aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   153ac:	9b07      	ldr	r3, [sp, #28]
   153ae:	f001 fe1f 	bl	16ff0 <_dtoa_r>
   153b2:	0003      	movs	r3, r0
   153b4:	4453      	add	r3, sl
   153b6:	9011      	str	r0, [sp, #68]	; 0x44
   153b8:	4698      	mov	r8, r3
   153ba:	4655      	mov	r5, sl
   153bc:	e6e4      	b.n	15188 <_svfprintf_r+0x1150>
   153be:	232d      	movs	r3, #45	; 0x2d
   153c0:	aa16      	add	r2, sp, #88	; 0x58
   153c2:	77d3      	strb	r3, [r2, #31]
   153c4:	4698      	mov	r8, r3
   153c6:	f7fe ffdb 	bl	14380 <_svfprintf_r+0x348>
   153ca:	2280      	movs	r2, #128	; 0x80
   153cc:	0612      	lsls	r2, r2, #24
   153ce:	4694      	mov	ip, r2
   153d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   153d2:	4699      	mov	r9, r3
   153d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   153d6:	4463      	add	r3, ip
   153d8:	9307      	str	r3, [sp, #28]
   153da:	232d      	movs	r3, #45	; 0x2d
   153dc:	9310      	str	r3, [sp, #64]	; 0x40
   153de:	e5d7      	b.n	14f90 <_svfprintf_r+0xf58>
   153e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   153e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   153e4:	4694      	mov	ip, r2
   153e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   153e8:	4463      	add	r3, ip
   153ea:	930e      	str	r3, [sp, #56]	; 0x38
   153ec:	2a00      	cmp	r2, #0
   153ee:	dc00      	bgt.n	153f2 <_svfprintf_r+0x13ba>
   153f0:	e0ce      	b.n	15590 <_svfprintf_r+0x1558>
   153f2:	001a      	movs	r2, r3
   153f4:	43db      	mvns	r3, r3
   153f6:	17db      	asrs	r3, r3, #31
   153f8:	401a      	ands	r2, r3
   153fa:	2367      	movs	r3, #103	; 0x67
   153fc:	9207      	str	r2, [sp, #28]
   153fe:	9312      	str	r3, [sp, #72]	; 0x48
   15400:	e624      	b.n	1504c <_svfprintf_r+0x1014>
   15402:	46c0      	nop			; (mov r8, r8)
   15404:	0001b170 	.word	0x0001b170
   15408:	0001b134 	.word	0x0001b134
   1540c:	0001b168 	.word	0x0001b168
   15410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15412:	9313      	str	r3, [sp, #76]	; 0x4c
   15414:	2b00      	cmp	r3, #0
   15416:	dc00      	bgt.n	1541a <_svfprintf_r+0x13e2>
   15418:	e0d5      	b.n	155c6 <_svfprintf_r+0x158e>
   1541a:	4652      	mov	r2, sl
   1541c:	2a00      	cmp	r2, #0
   1541e:	d000      	beq.n	15422 <_svfprintf_r+0x13ea>
   15420:	e092      	b.n	15548 <_svfprintf_r+0x1510>
   15422:	07e2      	lsls	r2, r4, #31
   15424:	d500      	bpl.n	15428 <_svfprintf_r+0x13f0>
   15426:	e08f      	b.n	15548 <_svfprintf_r+0x1510>
   15428:	9307      	str	r3, [sp, #28]
   1542a:	930e      	str	r3, [sp, #56]	; 0x38
   1542c:	e60e      	b.n	1504c <_svfprintf_r+0x1014>
   1542e:	ab16      	add	r3, sp, #88	; 0x58
   15430:	7fdb      	ldrb	r3, [r3, #31]
   15432:	950f      	str	r5, [sp, #60]	; 0x3c
   15434:	4698      	mov	r8, r3
   15436:	4653      	mov	r3, sl
   15438:	9307      	str	r3, [sp, #28]
   1543a:	930e      	str	r3, [sp, #56]	; 0x38
   1543c:	2300      	movs	r3, #0
   1543e:	9408      	str	r4, [sp, #32]
   15440:	469a      	mov	sl, r3
   15442:	9313      	str	r3, [sp, #76]	; 0x4c
   15444:	f7fe ff10 	bl	14268 <_svfprintf_r+0x230>
   15448:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1544a:	4698      	mov	r8, r3
   1544c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1544e:	44a8      	add	r8, r5
   15450:	2b47      	cmp	r3, #71	; 0x47
   15452:	d000      	beq.n	15456 <_svfprintf_r+0x141e>
   15454:	e5c4      	b.n	14fe0 <_svfprintf_r+0xfa8>
   15456:	07e3      	lsls	r3, r4, #31
   15458:	d500      	bpl.n	1545c <_svfprintf_r+0x1424>
   1545a:	e68e      	b.n	1517a <_svfprintf_r+0x1142>
   1545c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1545e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   15460:	1a9b      	subs	r3, r3, r2
   15462:	9314      	str	r3, [sp, #80]	; 0x50
   15464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15466:	2b47      	cmp	r3, #71	; 0x47
   15468:	d100      	bne.n	1546c <_svfprintf_r+0x1434>
   1546a:	e6cb      	b.n	15204 <_svfprintf_r+0x11cc>
   1546c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1546e:	9313      	str	r3, [sp, #76]	; 0x4c
   15470:	e6d2      	b.n	15218 <_svfprintf_r+0x11e0>
   15472:	4244      	negs	r4, r0
   15474:	3010      	adds	r0, #16
   15476:	db00      	blt.n	1547a <_svfprintf_r+0x1442>
   15478:	e0d0      	b.n	1561c <_svfprintf_r+0x15e4>
   1547a:	486e      	ldr	r0, [pc, #440]	; (15634 <_svfprintf_r+0x15fc>)
   1547c:	2610      	movs	r6, #16
   1547e:	0005      	movs	r5, r0
   15480:	e003      	b.n	1548a <_svfprintf_r+0x1452>
   15482:	3208      	adds	r2, #8
   15484:	3c10      	subs	r4, #16
   15486:	2c10      	cmp	r4, #16
   15488:	dd38      	ble.n	154fc <_svfprintf_r+0x14c4>
   1548a:	3110      	adds	r1, #16
   1548c:	3301      	adds	r3, #1
   1548e:	6015      	str	r5, [r2, #0]
   15490:	6056      	str	r6, [r2, #4]
   15492:	60b9      	str	r1, [r7, #8]
   15494:	607b      	str	r3, [r7, #4]
   15496:	2b07      	cmp	r3, #7
   15498:	ddf3      	ble.n	15482 <_svfprintf_r+0x144a>
   1549a:	003a      	movs	r2, r7
   1549c:	9906      	ldr	r1, [sp, #24]
   1549e:	9809      	ldr	r0, [sp, #36]	; 0x24
   154a0:	f004 faee 	bl	19a80 <__ssprint_r>
   154a4:	2800      	cmp	r0, #0
   154a6:	d001      	beq.n	154ac <_svfprintf_r+0x1474>
   154a8:	f7fe fe4d 	bl	14146 <_svfprintf_r+0x10e>
   154ac:	68b9      	ldr	r1, [r7, #8]
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	aa32      	add	r2, sp, #200	; 0xc8
   154b2:	e7e7      	b.n	15484 <_svfprintf_r+0x144c>
   154b4:	003a      	movs	r2, r7
   154b6:	9906      	ldr	r1, [sp, #24]
   154b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   154ba:	f004 fae1 	bl	19a80 <__ssprint_r>
   154be:	2800      	cmp	r0, #0
   154c0:	d001      	beq.n	154c6 <_svfprintf_r+0x148e>
   154c2:	f7fe fe40 	bl	14146 <_svfprintf_r+0x10e>
   154c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   154c8:	68b9      	ldr	r1, [r7, #8]
   154ca:	687b      	ldr	r3, [r7, #4]
   154cc:	aa32      	add	r2, sp, #200	; 0xc8
   154ce:	e600      	b.n	150d2 <_svfprintf_r+0x109a>
   154d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   154d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   154d4:	4694      	mov	ip, r2
   154d6:	4463      	add	r3, ip
   154d8:	001a      	movs	r2, r3
   154da:	930e      	str	r3, [sp, #56]	; 0x38
   154dc:	e78a      	b.n	153f4 <_svfprintf_r+0x13bc>
   154de:	212e      	movs	r1, #46	; 0x2e
   154e0:	2330      	movs	r3, #48	; 0x30
   154e2:	aa16      	add	r2, sp, #88	; 0x58
   154e4:	1852      	adds	r2, r2, r1
   154e6:	7013      	strb	r3, [r2, #0]
   154e8:	002b      	movs	r3, r5
   154ea:	aa16      	add	r2, sp, #88	; 0x58
   154ec:	3101      	adds	r1, #1
   154ee:	3330      	adds	r3, #48	; 0x30
   154f0:	1852      	adds	r2, r2, r1
   154f2:	7013      	strb	r3, [r2, #0]
   154f4:	ab22      	add	r3, sp, #136	; 0x88
   154f6:	e6e2      	b.n	152be <_svfprintf_r+0x1286>
   154f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   154fa:	e585      	b.n	15008 <_svfprintf_r+0xfd0>
   154fc:	46a9      	mov	r9, r5
   154fe:	4648      	mov	r0, r9
   15500:	1909      	adds	r1, r1, r4
   15502:	3301      	adds	r3, #1
   15504:	6010      	str	r0, [r2, #0]
   15506:	6054      	str	r4, [r2, #4]
   15508:	60b9      	str	r1, [r7, #8]
   1550a:	3208      	adds	r2, #8
   1550c:	607b      	str	r3, [r7, #4]
   1550e:	2b07      	cmp	r3, #7
   15510:	dc00      	bgt.n	15514 <_svfprintf_r+0x14dc>
   15512:	e5e1      	b.n	150d8 <_svfprintf_r+0x10a0>
   15514:	003a      	movs	r2, r7
   15516:	9906      	ldr	r1, [sp, #24]
   15518:	9809      	ldr	r0, [sp, #36]	; 0x24
   1551a:	f004 fab1 	bl	19a80 <__ssprint_r>
   1551e:	2800      	cmp	r0, #0
   15520:	d001      	beq.n	15526 <_svfprintf_r+0x14ee>
   15522:	f7fe fe10 	bl	14146 <_svfprintf_r+0x10e>
   15526:	68b9      	ldr	r1, [r7, #8]
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	aa32      	add	r2, sp, #200	; 0xc8
   1552c:	e5d4      	b.n	150d8 <_svfprintf_r+0x10a0>
   1552e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15530:	2b00      	cmp	r3, #0
   15532:	db38      	blt.n	155a6 <_svfprintf_r+0x156e>
   15534:	ab16      	add	r3, sp, #88	; 0x58
   15536:	7fdb      	ldrb	r3, [r3, #31]
   15538:	4698      	mov	r8, r3
   1553a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1553c:	2b47      	cmp	r3, #71	; 0x47
   1553e:	dc2e      	bgt.n	1559e <_svfprintf_r+0x1566>
   15540:	4b3d      	ldr	r3, [pc, #244]	; (15638 <_svfprintf_r+0x1600>)
   15542:	9311      	str	r3, [sp, #68]	; 0x44
   15544:	f7fe ff23 	bl	1438e <_svfprintf_r+0x356>
   15548:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1554a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1554c:	4694      	mov	ip, r2
   1554e:	4463      	add	r3, ip
   15550:	4453      	add	r3, sl
   15552:	001a      	movs	r2, r3
   15554:	930e      	str	r3, [sp, #56]	; 0x38
   15556:	43db      	mvns	r3, r3
   15558:	17db      	asrs	r3, r3, #31
   1555a:	401a      	ands	r2, r3
   1555c:	9207      	str	r2, [sp, #28]
   1555e:	e575      	b.n	1504c <_svfprintf_r+0x1014>
   15560:	2301      	movs	r3, #1
   15562:	4023      	ands	r3, r4
   15564:	9313      	str	r3, [sp, #76]	; 0x4c
   15566:	d000      	beq.n	1556a <_svfprintf_r+0x1532>
   15568:	e6b4      	b.n	152d4 <_svfprintf_r+0x129c>
   1556a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1556c:	43d3      	mvns	r3, r2
   1556e:	17db      	asrs	r3, r3, #31
   15570:	401a      	ands	r2, r3
   15572:	9207      	str	r2, [sp, #28]
   15574:	e56a      	b.n	1504c <_svfprintf_r+0x1014>
   15576:	4a2f      	ldr	r2, [pc, #188]	; (15634 <_svfprintf_r+0x15fc>)
   15578:	687b      	ldr	r3, [r7, #4]
   1557a:	4691      	mov	r9, r2
   1557c:	e42d      	b.n	14dda <_svfprintf_r+0xda2>
   1557e:	2301      	movs	r3, #1
   15580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15582:	391b      	subs	r1, #27
   15584:	1a9d      	subs	r5, r3, r2
   15586:	aa16      	add	r2, sp, #88	; 0x58
   15588:	332c      	adds	r3, #44	; 0x2c
   1558a:	1852      	adds	r2, r2, r1
   1558c:	7013      	strb	r3, [r2, #0]
   1558e:	e656      	b.n	1523e <_svfprintf_r+0x1206>
   15590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15592:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15594:	1a98      	subs	r0, r3, r2
   15596:	1c43      	adds	r3, r0, #1
   15598:	001a      	movs	r2, r3
   1559a:	930e      	str	r3, [sp, #56]	; 0x38
   1559c:	e72a      	b.n	153f4 <_svfprintf_r+0x13bc>
   1559e:	4b27      	ldr	r3, [pc, #156]	; (1563c <_svfprintf_r+0x1604>)
   155a0:	9311      	str	r3, [sp, #68]	; 0x44
   155a2:	f7fe fef4 	bl	1438e <_svfprintf_r+0x356>
   155a6:	232d      	movs	r3, #45	; 0x2d
   155a8:	aa16      	add	r2, sp, #88	; 0x58
   155aa:	77d3      	strb	r3, [r2, #31]
   155ac:	4698      	mov	r8, r3
   155ae:	e7c4      	b.n	1553a <_svfprintf_r+0x1502>
   155b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   155b2:	1d1a      	adds	r2, r3, #4
   155b4:	681b      	ldr	r3, [r3, #0]
   155b6:	469a      	mov	sl, r3
   155b8:	2b00      	cmp	r3, #0
   155ba:	db36      	blt.n	1562a <_svfprintf_r+0x15f2>
   155bc:	784b      	ldrb	r3, [r1, #1]
   155be:	920f      	str	r2, [sp, #60]	; 0x3c
   155c0:	4659      	mov	r1, fp
   155c2:	f7fe fd9d 	bl	14100 <_svfprintf_r+0xc8>
   155c6:	4653      	mov	r3, sl
   155c8:	2b00      	cmp	r3, #0
   155ca:	d101      	bne.n	155d0 <_svfprintf_r+0x1598>
   155cc:	07e3      	lsls	r3, r4, #31
   155ce:	d503      	bpl.n	155d8 <_svfprintf_r+0x15a0>
   155d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   155d2:	1c58      	adds	r0, r3, #1
   155d4:	0003      	movs	r3, r0
   155d6:	e7bb      	b.n	15550 <_svfprintf_r+0x1518>
   155d8:	2301      	movs	r3, #1
   155da:	e725      	b.n	15428 <_svfprintf_r+0x13f0>
   155dc:	ab16      	add	r3, sp, #88	; 0x58
   155de:	77d8      	strb	r0, [r3, #31]
   155e0:	f7fe ff6c 	bl	144bc <_svfprintf_r+0x484>
   155e4:	ab16      	add	r3, sp, #88	; 0x58
   155e6:	77d8      	strb	r0, [r3, #31]
   155e8:	f7ff f814 	bl	14614 <_svfprintf_r+0x5dc>
   155ec:	230c      	movs	r3, #12
   155ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   155f0:	6013      	str	r3, [r2, #0]
   155f2:	3b0d      	subs	r3, #13
   155f4:	930a      	str	r3, [sp, #40]	; 0x28
   155f6:	f7fe fdac 	bl	14152 <_svfprintf_r+0x11a>
   155fa:	aa16      	add	r2, sp, #88	; 0x58
   155fc:	232e      	movs	r3, #46	; 0x2e
   155fe:	4694      	mov	ip, r2
   15600:	4463      	add	r3, ip
   15602:	e65c      	b.n	152be <_svfprintf_r+0x1286>
   15604:	ab16      	add	r3, sp, #88	; 0x58
   15606:	77d8      	strb	r0, [r3, #31]
   15608:	f7fe fe85 	bl	14316 <_svfprintf_r+0x2de>
   1560c:	ab16      	add	r3, sp, #88	; 0x58
   1560e:	77d8      	strb	r0, [r3, #31]
   15610:	f7fe fddd 	bl	141ce <_svfprintf_r+0x196>
   15614:	ab16      	add	r3, sp, #88	; 0x58
   15616:	77d8      	strb	r0, [r3, #31]
   15618:	f7ff f87d 	bl	14716 <_svfprintf_r+0x6de>
   1561c:	4805      	ldr	r0, [pc, #20]	; (15634 <_svfprintf_r+0x15fc>)
   1561e:	4681      	mov	r9, r0
   15620:	e76d      	b.n	154fe <_svfprintf_r+0x14c6>
   15622:	ab16      	add	r3, sp, #88	; 0x58
   15624:	77d8      	strb	r0, [r3, #31]
   15626:	f7fe ff79 	bl	1451c <_svfprintf_r+0x4e4>
   1562a:	2301      	movs	r3, #1
   1562c:	425b      	negs	r3, r3
   1562e:	469a      	mov	sl, r3
   15630:	e7c4      	b.n	155bc <_svfprintf_r+0x1584>
   15632:	46c0      	nop			; (mov r8, r8)
   15634:	0001b184 	.word	0x0001b184
   15638:	0001b138 	.word	0x0001b138
   1563c:	0001b13c 	.word	0x0001b13c

00015640 <_vfprintf_r>:
   15640:	b5f0      	push	{r4, r5, r6, r7, lr}
   15642:	46de      	mov	lr, fp
   15644:	464e      	mov	r6, r9
   15646:	4645      	mov	r5, r8
   15648:	4657      	mov	r7, sl
   1564a:	b5e0      	push	{r5, r6, r7, lr}
   1564c:	b0c3      	sub	sp, #268	; 0x10c
   1564e:	4689      	mov	r9, r1
   15650:	0014      	movs	r4, r2
   15652:	001d      	movs	r5, r3
   15654:	930f      	str	r3, [sp, #60]	; 0x3c
   15656:	0006      	movs	r6, r0
   15658:	9006      	str	r0, [sp, #24]
   1565a:	f003 f8bf 	bl	187dc <_localeconv_r>
   1565e:	6803      	ldr	r3, [r0, #0]
   15660:	0018      	movs	r0, r3
   15662:	9318      	str	r3, [sp, #96]	; 0x60
   15664:	f7fe fcb6 	bl	13fd4 <strlen>
   15668:	9017      	str	r0, [sp, #92]	; 0x5c
   1566a:	2e00      	cmp	r6, #0
   1566c:	d004      	beq.n	15678 <_vfprintf_r+0x38>
   1566e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   15670:	9307      	str	r3, [sp, #28]
   15672:	2b00      	cmp	r3, #0
   15674:	d100      	bne.n	15678 <_vfprintf_r+0x38>
   15676:	e0a7      	b.n	157c8 <_vfprintf_r+0x188>
   15678:	464b      	mov	r3, r9
   1567a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1567c:	07db      	lsls	r3, r3, #31
   1567e:	d478      	bmi.n	15772 <_vfprintf_r+0x132>
   15680:	464b      	mov	r3, r9
   15682:	210c      	movs	r1, #12
   15684:	5e59      	ldrsh	r1, [r3, r1]
   15686:	b28b      	uxth	r3, r1
   15688:	059a      	lsls	r2, r3, #22
   1568a:	d56e      	bpl.n	1576a <_vfprintf_r+0x12a>
   1568c:	2280      	movs	r2, #128	; 0x80
   1568e:	0192      	lsls	r2, r2, #6
   15690:	4213      	tst	r3, r2
   15692:	d109      	bne.n	156a8 <_vfprintf_r+0x68>
   15694:	430a      	orrs	r2, r1
   15696:	464b      	mov	r3, r9
   15698:	4649      	mov	r1, r9
   1569a:	819a      	strh	r2, [r3, #12]
   1569c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1569e:	4bcc      	ldr	r3, [pc, #816]	; (159d0 <_vfprintf_r+0x390>)
   156a0:	400b      	ands	r3, r1
   156a2:	4649      	mov	r1, r9
   156a4:	664b      	str	r3, [r1, #100]	; 0x64
   156a6:	b293      	uxth	r3, r2
   156a8:	071a      	lsls	r2, r3, #28
   156aa:	d567      	bpl.n	1577c <_vfprintf_r+0x13c>
   156ac:	464a      	mov	r2, r9
   156ae:	6912      	ldr	r2, [r2, #16]
   156b0:	2a00      	cmp	r2, #0
   156b2:	d063      	beq.n	1577c <_vfprintf_r+0x13c>
   156b4:	221a      	movs	r2, #26
   156b6:	401a      	ands	r2, r3
   156b8:	2a0a      	cmp	r2, #10
   156ba:	d100      	bne.n	156be <_vfprintf_r+0x7e>
   156bc:	e088      	b.n	157d0 <_vfprintf_r+0x190>
   156be:	ab32      	add	r3, sp, #200	; 0xc8
   156c0:	9325      	str	r3, [sp, #148]	; 0x94
   156c2:	2300      	movs	r3, #0
   156c4:	46cb      	mov	fp, r9
   156c6:	af25      	add	r7, sp, #148	; 0x94
   156c8:	60bb      	str	r3, [r7, #8]
   156ca:	607b      	str	r3, [r7, #4]
   156cc:	9407      	str	r4, [sp, #28]
   156ce:	9314      	str	r3, [sp, #80]	; 0x50
   156d0:	9316      	str	r3, [sp, #88]	; 0x58
   156d2:	9315      	str	r3, [sp, #84]	; 0x54
   156d4:	ae32      	add	r6, sp, #200	; 0xc8
   156d6:	9319      	str	r3, [sp, #100]	; 0x64
   156d8:	931a      	str	r3, [sp, #104]	; 0x68
   156da:	930a      	str	r3, [sp, #40]	; 0x28
   156dc:	9c07      	ldr	r4, [sp, #28]
   156de:	7823      	ldrb	r3, [r4, #0]
   156e0:	2b00      	cmp	r3, #0
   156e2:	d101      	bne.n	156e8 <_vfprintf_r+0xa8>
   156e4:	f000 fd9e 	bl	16224 <_vfprintf_r+0xbe4>
   156e8:	2b25      	cmp	r3, #37	; 0x25
   156ea:	d103      	bne.n	156f4 <_vfprintf_r+0xb4>
   156ec:	f000 fd9a 	bl	16224 <_vfprintf_r+0xbe4>
   156f0:	2b25      	cmp	r3, #37	; 0x25
   156f2:	d003      	beq.n	156fc <_vfprintf_r+0xbc>
   156f4:	3401      	adds	r4, #1
   156f6:	7823      	ldrb	r3, [r4, #0]
   156f8:	2b00      	cmp	r3, #0
   156fa:	d1f9      	bne.n	156f0 <_vfprintf_r+0xb0>
   156fc:	9b07      	ldr	r3, [sp, #28]
   156fe:	1ae5      	subs	r5, r4, r3
   15700:	d010      	beq.n	15724 <_vfprintf_r+0xe4>
   15702:	9b07      	ldr	r3, [sp, #28]
   15704:	6075      	str	r5, [r6, #4]
   15706:	6033      	str	r3, [r6, #0]
   15708:	68bb      	ldr	r3, [r7, #8]
   1570a:	195b      	adds	r3, r3, r5
   1570c:	60bb      	str	r3, [r7, #8]
   1570e:	687b      	ldr	r3, [r7, #4]
   15710:	3301      	adds	r3, #1
   15712:	607b      	str	r3, [r7, #4]
   15714:	2b07      	cmp	r3, #7
   15716:	dc4c      	bgt.n	157b2 <_vfprintf_r+0x172>
   15718:	3608      	adds	r6, #8
   1571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1571c:	469c      	mov	ip, r3
   1571e:	44ac      	add	ip, r5
   15720:	4663      	mov	r3, ip
   15722:	930a      	str	r3, [sp, #40]	; 0x28
   15724:	7823      	ldrb	r3, [r4, #0]
   15726:	2b00      	cmp	r3, #0
   15728:	d101      	bne.n	1572e <_vfprintf_r+0xee>
   1572a:	f000 fc99 	bl	16060 <_vfprintf_r+0xa20>
   1572e:	1c63      	adds	r3, r4, #1
   15730:	9307      	str	r3, [sp, #28]
   15732:	2300      	movs	r3, #0
   15734:	aa16      	add	r2, sp, #88	; 0x58
   15736:	77d3      	strb	r3, [r2, #31]
   15738:	2201      	movs	r2, #1
   1573a:	4252      	negs	r2, r2
   1573c:	4692      	mov	sl, r2
   1573e:	2200      	movs	r2, #0
   15740:	920b      	str	r2, [sp, #44]	; 0x2c
   15742:	3220      	adds	r2, #32
   15744:	4691      	mov	r9, r2
   15746:	3220      	adds	r2, #32
   15748:	7863      	ldrb	r3, [r4, #1]
   1574a:	2100      	movs	r1, #0
   1574c:	2000      	movs	r0, #0
   1574e:	2400      	movs	r4, #0
   15750:	4694      	mov	ip, r2
   15752:	9a07      	ldr	r2, [sp, #28]
   15754:	3201      	adds	r2, #1
   15756:	9207      	str	r2, [sp, #28]
   15758:	001a      	movs	r2, r3
   1575a:	3a20      	subs	r2, #32
   1575c:	2a58      	cmp	r2, #88	; 0x58
   1575e:	d900      	bls.n	15762 <_vfprintf_r+0x122>
   15760:	e2e7      	b.n	15d32 <_vfprintf_r+0x6f2>
   15762:	4d9c      	ldr	r5, [pc, #624]	; (159d4 <_vfprintf_r+0x394>)
   15764:	0092      	lsls	r2, r2, #2
   15766:	58aa      	ldr	r2, [r5, r2]
   15768:	4697      	mov	pc, r2
   1576a:	464b      	mov	r3, r9
   1576c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1576e:	f003 f847 	bl	18800 <__retarget_lock_acquire_recursive>
   15772:	464b      	mov	r3, r9
   15774:	210c      	movs	r1, #12
   15776:	5e59      	ldrsh	r1, [r3, r1]
   15778:	b28b      	uxth	r3, r1
   1577a:	e787      	b.n	1568c <_vfprintf_r+0x4c>
   1577c:	4649      	mov	r1, r9
   1577e:	9806      	ldr	r0, [sp, #24]
   15780:	f001 fb0e 	bl	16da0 <__swsetup_r>
   15784:	464b      	mov	r3, r9
   15786:	2800      	cmp	r0, #0
   15788:	d03a      	beq.n	15800 <_vfprintf_r+0x1c0>
   1578a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1578c:	07db      	lsls	r3, r3, #31
   1578e:	d405      	bmi.n	1579c <_vfprintf_r+0x15c>
   15790:	464b      	mov	r3, r9
   15792:	899b      	ldrh	r3, [r3, #12]
   15794:	059b      	lsls	r3, r3, #22
   15796:	d401      	bmi.n	1579c <_vfprintf_r+0x15c>
   15798:	f000 ffcf 	bl	1673a <_vfprintf_r+0x10fa>
   1579c:	2301      	movs	r3, #1
   1579e:	425b      	negs	r3, r3
   157a0:	930a      	str	r3, [sp, #40]	; 0x28
   157a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   157a4:	b043      	add	sp, #268	; 0x10c
   157a6:	bc3c      	pop	{r2, r3, r4, r5}
   157a8:	4690      	mov	r8, r2
   157aa:	4699      	mov	r9, r3
   157ac:	46a2      	mov	sl, r4
   157ae:	46ab      	mov	fp, r5
   157b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157b2:	003a      	movs	r2, r7
   157b4:	4659      	mov	r1, fp
   157b6:	9806      	ldr	r0, [sp, #24]
   157b8:	f004 fa34 	bl	19c24 <__sprint_r>
   157bc:	2800      	cmp	r0, #0
   157be:	d001      	beq.n	157c4 <_vfprintf_r+0x184>
   157c0:	f000 fcce 	bl	16160 <_vfprintf_r+0xb20>
   157c4:	ae32      	add	r6, sp, #200	; 0xc8
   157c6:	e7a8      	b.n	1571a <_vfprintf_r+0xda>
   157c8:	9806      	ldr	r0, [sp, #24]
   157ca:	f002 fcd7 	bl	1817c <__sinit>
   157ce:	e753      	b.n	15678 <_vfprintf_r+0x38>
   157d0:	464a      	mov	r2, r9
   157d2:	210e      	movs	r1, #14
   157d4:	5e52      	ldrsh	r2, [r2, r1]
   157d6:	2a00      	cmp	r2, #0
   157d8:	da00      	bge.n	157dc <_vfprintf_r+0x19c>
   157da:	e770      	b.n	156be <_vfprintf_r+0x7e>
   157dc:	464a      	mov	r2, r9
   157de:	6e52      	ldr	r2, [r2, #100]	; 0x64
   157e0:	07d2      	lsls	r2, r2, #31
   157e2:	d405      	bmi.n	157f0 <_vfprintf_r+0x1b0>
   157e4:	059b      	lsls	r3, r3, #22
   157e6:	d403      	bmi.n	157f0 <_vfprintf_r+0x1b0>
   157e8:	464b      	mov	r3, r9
   157ea:	6d98      	ldr	r0, [r3, #88]	; 0x58
   157ec:	f003 f80a 	bl	18804 <__retarget_lock_release_recursive>
   157f0:	002b      	movs	r3, r5
   157f2:	0022      	movs	r2, r4
   157f4:	4649      	mov	r1, r9
   157f6:	9806      	ldr	r0, [sp, #24]
   157f8:	f001 fa8e 	bl	16d18 <__sbprintf>
   157fc:	900a      	str	r0, [sp, #40]	; 0x28
   157fe:	e7d0      	b.n	157a2 <_vfprintf_r+0x162>
   15800:	899b      	ldrh	r3, [r3, #12]
   15802:	e757      	b.n	156b4 <_vfprintf_r+0x74>
   15804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15806:	920f      	str	r2, [sp, #60]	; 0x3c
   15808:	425b      	negs	r3, r3
   1580a:	930b      	str	r3, [sp, #44]	; 0x2c
   1580c:	2304      	movs	r3, #4
   1580e:	431c      	orrs	r4, r3
   15810:	9b07      	ldr	r3, [sp, #28]
   15812:	781b      	ldrb	r3, [r3, #0]
   15814:	e79d      	b.n	15752 <_vfprintf_r+0x112>
   15816:	9b07      	ldr	r3, [sp, #28]
   15818:	2101      	movs	r1, #1
   1581a:	781b      	ldrb	r3, [r3, #0]
   1581c:	202b      	movs	r0, #43	; 0x2b
   1581e:	e798      	b.n	15752 <_vfprintf_r+0x112>
   15820:	9b07      	ldr	r3, [sp, #28]
   15822:	1c5a      	adds	r2, r3, #1
   15824:	781b      	ldrb	r3, [r3, #0]
   15826:	4690      	mov	r8, r2
   15828:	2b2a      	cmp	r3, #42	; 0x2a
   1582a:	d101      	bne.n	15830 <_vfprintf_r+0x1f0>
   1582c:	f001 fa38 	bl	16ca0 <_vfprintf_r+0x1660>
   15830:	001a      	movs	r2, r3
   15832:	2500      	movs	r5, #0
   15834:	3a30      	subs	r2, #48	; 0x30
   15836:	46aa      	mov	sl, r5
   15838:	2a09      	cmp	r2, #9
   1583a:	d901      	bls.n	15840 <_vfprintf_r+0x200>
   1583c:	f001 f96d 	bl	16b1a <_vfprintf_r+0x14da>
   15840:	0025      	movs	r5, r4
   15842:	4643      	mov	r3, r8
   15844:	4654      	mov	r4, sl
   15846:	4688      	mov	r8, r1
   15848:	4682      	mov	sl, r0
   1584a:	00a1      	lsls	r1, r4, #2
   1584c:	190c      	adds	r4, r1, r4
   1584e:	7818      	ldrb	r0, [r3, #0]
   15850:	0064      	lsls	r4, r4, #1
   15852:	18a4      	adds	r4, r4, r2
   15854:	0002      	movs	r2, r0
   15856:	1c59      	adds	r1, r3, #1
   15858:	3a30      	subs	r2, #48	; 0x30
   1585a:	000b      	movs	r3, r1
   1585c:	2a09      	cmp	r2, #9
   1585e:	d9f4      	bls.n	1584a <_vfprintf_r+0x20a>
   15860:	9107      	str	r1, [sp, #28]
   15862:	0003      	movs	r3, r0
   15864:	4641      	mov	r1, r8
   15866:	4650      	mov	r0, sl
   15868:	46a2      	mov	sl, r4
   1586a:	002c      	movs	r4, r5
   1586c:	e774      	b.n	15758 <_vfprintf_r+0x118>
   1586e:	9312      	str	r3, [sp, #72]	; 0x48
   15870:	2900      	cmp	r1, #0
   15872:	d001      	beq.n	15878 <_vfprintf_r+0x238>
   15874:	f001 fa2e 	bl	16cd4 <_vfprintf_r+0x1694>
   15878:	4b57      	ldr	r3, [pc, #348]	; (159d8 <_vfprintf_r+0x398>)
   1587a:	9319      	str	r3, [sp, #100]	; 0x64
   1587c:	06a3      	lsls	r3, r4, #26
   1587e:	d501      	bpl.n	15884 <_vfprintf_r+0x244>
   15880:	f000 fe9a 	bl	165b8 <_vfprintf_r+0xf78>
   15884:	06e3      	lsls	r3, r4, #27
   15886:	d501      	bpl.n	1588c <_vfprintf_r+0x24c>
   15888:	f000 fd9a 	bl	163c0 <_vfprintf_r+0xd80>
   1588c:	0663      	lsls	r3, r4, #25
   1588e:	d401      	bmi.n	15894 <_vfprintf_r+0x254>
   15890:	f000 fd96 	bl	163c0 <_vfprintf_r+0xd80>
   15894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15896:	881a      	ldrh	r2, [r3, #0]
   15898:	920c      	str	r2, [sp, #48]	; 0x30
   1589a:	2200      	movs	r2, #0
   1589c:	3304      	adds	r3, #4
   1589e:	920d      	str	r2, [sp, #52]	; 0x34
   158a0:	930f      	str	r3, [sp, #60]	; 0x3c
   158a2:	07e3      	lsls	r3, r4, #31
   158a4:	d401      	bmi.n	158aa <_vfprintf_r+0x26a>
   158a6:	f000 fd76 	bl	16396 <_vfprintf_r+0xd56>
   158aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   158ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   158ae:	000b      	movs	r3, r1
   158b0:	4313      	orrs	r3, r2
   158b2:	001a      	movs	r2, r3
   158b4:	2302      	movs	r3, #2
   158b6:	2a00      	cmp	r2, #0
   158b8:	d008      	beq.n	158cc <_vfprintf_r+0x28c>
   158ba:	2030      	movs	r0, #48	; 0x30
   158bc:	a91e      	add	r1, sp, #120	; 0x78
   158be:	7008      	strb	r0, [r1, #0]
   158c0:	2548      	movs	r5, #72	; 0x48
   158c2:	4668      	mov	r0, sp
   158c4:	1940      	adds	r0, r0, r5
   158c6:	7800      	ldrb	r0, [r0, #0]
   158c8:	431c      	orrs	r4, r3
   158ca:	7048      	strb	r0, [r1, #1]
   158cc:	2100      	movs	r1, #0
   158ce:	4688      	mov	r8, r1
   158d0:	a816      	add	r0, sp, #88	; 0x58
   158d2:	77c1      	strb	r1, [r0, #31]
   158d4:	4651      	mov	r1, sl
   158d6:	3101      	adds	r1, #1
   158d8:	d100      	bne.n	158dc <_vfprintf_r+0x29c>
   158da:	e0e6      	b.n	15aaa <_vfprintf_r+0x46a>
   158dc:	2180      	movs	r1, #128	; 0x80
   158de:	0020      	movs	r0, r4
   158e0:	4388      	bics	r0, r1
   158e2:	9009      	str	r0, [sp, #36]	; 0x24
   158e4:	2a00      	cmp	r2, #0
   158e6:	d000      	beq.n	158ea <_vfprintf_r+0x2aa>
   158e8:	e0e3      	b.n	15ab2 <_vfprintf_r+0x472>
   158ea:	4652      	mov	r2, sl
   158ec:	2a00      	cmp	r2, #0
   158ee:	d001      	beq.n	158f4 <_vfprintf_r+0x2b4>
   158f0:	f000 fc38 	bl	16164 <_vfprintf_r+0xb24>
   158f4:	2b00      	cmp	r3, #0
   158f6:	d001      	beq.n	158fc <_vfprintf_r+0x2bc>
   158f8:	f000 fd0c 	bl	16314 <_vfprintf_r+0xcd4>
   158fc:	2001      	movs	r0, #1
   158fe:	ab32      	add	r3, sp, #200	; 0xc8
   15900:	4020      	ands	r0, r4
   15902:	900e      	str	r0, [sp, #56]	; 0x38
   15904:	9311      	str	r3, [sp, #68]	; 0x44
   15906:	d008      	beq.n	1591a <_vfprintf_r+0x2da>
   15908:	2327      	movs	r3, #39	; 0x27
   1590a:	2130      	movs	r1, #48	; 0x30
   1590c:	aa28      	add	r2, sp, #160	; 0xa0
   1590e:	54d1      	strb	r1, [r2, r3]
   15910:	aa16      	add	r2, sp, #88	; 0x58
   15912:	4694      	mov	ip, r2
   15914:	3348      	adds	r3, #72	; 0x48
   15916:	4463      	add	r3, ip
   15918:	9311      	str	r3, [sp, #68]	; 0x44
   1591a:	4653      	mov	r3, sl
   1591c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1591e:	9308      	str	r3, [sp, #32]
   15920:	4592      	cmp	sl, r2
   15922:	da00      	bge.n	15926 <_vfprintf_r+0x2e6>
   15924:	9208      	str	r2, [sp, #32]
   15926:	2300      	movs	r3, #0
   15928:	9313      	str	r3, [sp, #76]	; 0x4c
   1592a:	4643      	mov	r3, r8
   1592c:	2b00      	cmp	r3, #0
   1592e:	d002      	beq.n	15936 <_vfprintf_r+0x2f6>
   15930:	9b08      	ldr	r3, [sp, #32]
   15932:	3301      	adds	r3, #1
   15934:	9308      	str	r3, [sp, #32]
   15936:	2302      	movs	r3, #2
   15938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1593a:	401a      	ands	r2, r3
   1593c:	4691      	mov	r9, r2
   1593e:	d002      	beq.n	15946 <_vfprintf_r+0x306>
   15940:	9b08      	ldr	r3, [sp, #32]
   15942:	3302      	adds	r3, #2
   15944:	9308      	str	r3, [sp, #32]
   15946:	2384      	movs	r3, #132	; 0x84
   15948:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1594a:	401a      	ands	r2, r3
   1594c:	9210      	str	r2, [sp, #64]	; 0x40
   1594e:	d000      	beq.n	15952 <_vfprintf_r+0x312>
   15950:	e207      	b.n	15d62 <_vfprintf_r+0x722>
   15952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15954:	9a08      	ldr	r2, [sp, #32]
   15956:	1a9c      	subs	r4, r3, r2
   15958:	2c00      	cmp	r4, #0
   1595a:	dc00      	bgt.n	1595e <_vfprintf_r+0x31e>
   1595c:	e201      	b.n	15d62 <_vfprintf_r+0x722>
   1595e:	491f      	ldr	r1, [pc, #124]	; (159dc <_vfprintf_r+0x39c>)
   15960:	68ba      	ldr	r2, [r7, #8]
   15962:	687b      	ldr	r3, [r7, #4]
   15964:	4688      	mov	r8, r1
   15966:	2c10      	cmp	r4, #16
   15968:	dd21      	ble.n	159ae <_vfprintf_r+0x36e>
   1596a:	0031      	movs	r1, r6
   1596c:	2510      	movs	r5, #16
   1596e:	465e      	mov	r6, fp
   15970:	e003      	b.n	1597a <_vfprintf_r+0x33a>
   15972:	3c10      	subs	r4, #16
   15974:	3108      	adds	r1, #8
   15976:	2c10      	cmp	r4, #16
   15978:	dd17      	ble.n	159aa <_vfprintf_r+0x36a>
   1597a:	4640      	mov	r0, r8
   1597c:	3210      	adds	r2, #16
   1597e:	3301      	adds	r3, #1
   15980:	6008      	str	r0, [r1, #0]
   15982:	604d      	str	r5, [r1, #4]
   15984:	60ba      	str	r2, [r7, #8]
   15986:	607b      	str	r3, [r7, #4]
   15988:	2b07      	cmp	r3, #7
   1598a:	ddf2      	ble.n	15972 <_vfprintf_r+0x332>
   1598c:	003a      	movs	r2, r7
   1598e:	0031      	movs	r1, r6
   15990:	9806      	ldr	r0, [sp, #24]
   15992:	f004 f947 	bl	19c24 <__sprint_r>
   15996:	2800      	cmp	r0, #0
   15998:	d001      	beq.n	1599e <_vfprintf_r+0x35e>
   1599a:	f000 fccf 	bl	1633c <_vfprintf_r+0xcfc>
   1599e:	3c10      	subs	r4, #16
   159a0:	68ba      	ldr	r2, [r7, #8]
   159a2:	687b      	ldr	r3, [r7, #4]
   159a4:	a932      	add	r1, sp, #200	; 0xc8
   159a6:	2c10      	cmp	r4, #16
   159a8:	dce7      	bgt.n	1597a <_vfprintf_r+0x33a>
   159aa:	46b3      	mov	fp, r6
   159ac:	000e      	movs	r6, r1
   159ae:	4641      	mov	r1, r8
   159b0:	6074      	str	r4, [r6, #4]
   159b2:	3301      	adds	r3, #1
   159b4:	18a4      	adds	r4, r4, r2
   159b6:	6031      	str	r1, [r6, #0]
   159b8:	60bc      	str	r4, [r7, #8]
   159ba:	607b      	str	r3, [r7, #4]
   159bc:	2b07      	cmp	r3, #7
   159be:	dd01      	ble.n	159c4 <_vfprintf_r+0x384>
   159c0:	f000 fcae 	bl	16320 <_vfprintf_r+0xce0>
   159c4:	ab16      	add	r3, sp, #88	; 0x58
   159c6:	7fdb      	ldrb	r3, [r3, #31]
   159c8:	3608      	adds	r6, #8
   159ca:	4698      	mov	r8, r3
   159cc:	e1ca      	b.n	15d64 <_vfprintf_r+0x724>
   159ce:	46c0      	nop			; (mov r8, r8)
   159d0:	ffffdfff 	.word	0xffffdfff
   159d4:	0001b194 	.word	0x0001b194
   159d8:	0001b154 	.word	0x0001b154
   159dc:	0001b2f8 	.word	0x0001b2f8
   159e0:	2200      	movs	r2, #0
   159e2:	9d07      	ldr	r5, [sp, #28]
   159e4:	3b30      	subs	r3, #48	; 0x30
   159e6:	46a8      	mov	r8, r5
   159e8:	920b      	str	r2, [sp, #44]	; 0x2c
   159ea:	001a      	movs	r2, r3
   159ec:	9408      	str	r4, [sp, #32]
   159ee:	002c      	movs	r4, r5
   159f0:	4655      	mov	r5, sl
   159f2:	4682      	mov	sl, r0
   159f4:	4640      	mov	r0, r8
   159f6:	4688      	mov	r8, r1
   159f8:	0011      	movs	r1, r2
   159fa:	2200      	movs	r2, #0
   159fc:	0093      	lsls	r3, r2, #2
   159fe:	189a      	adds	r2, r3, r2
   15a00:	7803      	ldrb	r3, [r0, #0]
   15a02:	0052      	lsls	r2, r2, #1
   15a04:	188a      	adds	r2, r1, r2
   15a06:	0019      	movs	r1, r3
   15a08:	3401      	adds	r4, #1
   15a0a:	3930      	subs	r1, #48	; 0x30
   15a0c:	0020      	movs	r0, r4
   15a0e:	2909      	cmp	r1, #9
   15a10:	d9f4      	bls.n	159fc <_vfprintf_r+0x3bc>
   15a12:	9407      	str	r4, [sp, #28]
   15a14:	4650      	mov	r0, sl
   15a16:	9c08      	ldr	r4, [sp, #32]
   15a18:	920b      	str	r2, [sp, #44]	; 0x2c
   15a1a:	4641      	mov	r1, r8
   15a1c:	46aa      	mov	sl, r5
   15a1e:	e69b      	b.n	15758 <_vfprintf_r+0x118>
   15a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15a22:	9312      	str	r3, [sp, #72]	; 0x48
   15a24:	6813      	ldr	r3, [r2, #0]
   15a26:	2120      	movs	r1, #32
   15a28:	9308      	str	r3, [sp, #32]
   15a2a:	466b      	mov	r3, sp
   15a2c:	185b      	adds	r3, r3, r1
   15a2e:	781b      	ldrb	r3, [r3, #0]
   15a30:	ad28      	add	r5, sp, #160	; 0xa0
   15a32:	702b      	strb	r3, [r5, #0]
   15a34:	2300      	movs	r3, #0
   15a36:	a916      	add	r1, sp, #88	; 0x58
   15a38:	77cb      	strb	r3, [r1, #31]
   15a3a:	0013      	movs	r3, r2
   15a3c:	3304      	adds	r3, #4
   15a3e:	930f      	str	r3, [sp, #60]	; 0x3c
   15a40:	2300      	movs	r3, #0
   15a42:	9409      	str	r4, [sp, #36]	; 0x24
   15a44:	4698      	mov	r8, r3
   15a46:	3301      	adds	r3, #1
   15a48:	9308      	str	r3, [sp, #32]
   15a4a:	930e      	str	r3, [sp, #56]	; 0x38
   15a4c:	2300      	movs	r3, #0
   15a4e:	9511      	str	r5, [sp, #68]	; 0x44
   15a50:	469a      	mov	sl, r3
   15a52:	9313      	str	r3, [sp, #76]	; 0x4c
   15a54:	e76f      	b.n	15936 <_vfprintf_r+0x2f6>
   15a56:	9312      	str	r3, [sp, #72]	; 0x48
   15a58:	2900      	cmp	r1, #0
   15a5a:	d001      	beq.n	15a60 <_vfprintf_r+0x420>
   15a5c:	f001 f94d 	bl	16cfa <_vfprintf_r+0x16ba>
   15a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15a62:	06a3      	lsls	r3, r4, #26
   15a64:	d501      	bpl.n	15a6a <_vfprintf_r+0x42a>
   15a66:	f000 fd5a 	bl	1651e <_vfprintf_r+0xede>
   15a6a:	06e3      	lsls	r3, r4, #27
   15a6c:	d501      	bpl.n	15a72 <_vfprintf_r+0x432>
   15a6e:	f000 fcab 	bl	163c8 <_vfprintf_r+0xd88>
   15a72:	0663      	lsls	r3, r4, #25
   15a74:	d401      	bmi.n	15a7a <_vfprintf_r+0x43a>
   15a76:	f000 fca7 	bl	163c8 <_vfprintf_r+0xd88>
   15a7a:	2100      	movs	r1, #0
   15a7c:	5e53      	ldrsh	r3, [r2, r1]
   15a7e:	930c      	str	r3, [sp, #48]	; 0x30
   15a80:	3204      	adds	r2, #4
   15a82:	17db      	asrs	r3, r3, #31
   15a84:	930d      	str	r3, [sp, #52]	; 0x34
   15a86:	920f      	str	r2, [sp, #60]	; 0x3c
   15a88:	2b00      	cmp	r3, #0
   15a8a:	da01      	bge.n	15a90 <_vfprintf_r+0x450>
   15a8c:	f000 fdb2 	bl	165f4 <_vfprintf_r+0xfb4>
   15a90:	990c      	ldr	r1, [sp, #48]	; 0x30
   15a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15a94:	0008      	movs	r0, r1
   15a96:	4651      	mov	r1, sl
   15a98:	ab16      	add	r3, sp, #88	; 0x58
   15a9a:	7fdb      	ldrb	r3, [r3, #31]
   15a9c:	4310      	orrs	r0, r2
   15a9e:	4698      	mov	r8, r3
   15aa0:	0002      	movs	r2, r0
   15aa2:	2301      	movs	r3, #1
   15aa4:	3101      	adds	r1, #1
   15aa6:	d000      	beq.n	15aaa <_vfprintf_r+0x46a>
   15aa8:	e718      	b.n	158dc <_vfprintf_r+0x29c>
   15aaa:	2a00      	cmp	r2, #0
   15aac:	d100      	bne.n	15ab0 <_vfprintf_r+0x470>
   15aae:	e35a      	b.n	16166 <_vfprintf_r+0xb26>
   15ab0:	9409      	str	r4, [sp, #36]	; 0x24
   15ab2:	2b01      	cmp	r3, #1
   15ab4:	d101      	bne.n	15aba <_vfprintf_r+0x47a>
   15ab6:	f000 fc06 	bl	162c6 <_vfprintf_r+0xc86>
   15aba:	2b02      	cmp	r3, #2
   15abc:	d000      	beq.n	15ac0 <_vfprintf_r+0x480>
   15abe:	e380      	b.n	161c2 <_vfprintf_r+0xb82>
   15ac0:	9c19      	ldr	r4, [sp, #100]	; 0x64
   15ac2:	200f      	movs	r0, #15
   15ac4:	46a1      	mov	r9, r4
   15ac6:	46b4      	mov	ip, r6
   15ac8:	ab32      	add	r3, sp, #200	; 0xc8
   15aca:	0019      	movs	r1, r3
   15acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15ad0:	0004      	movs	r4, r0
   15ad2:	464d      	mov	r5, r9
   15ad4:	4014      	ands	r4, r2
   15ad6:	5d2c      	ldrb	r4, [r5, r4]
   15ad8:	071e      	lsls	r6, r3, #28
   15ada:	0915      	lsrs	r5, r2, #4
   15adc:	3901      	subs	r1, #1
   15ade:	432e      	orrs	r6, r5
   15ae0:	700c      	strb	r4, [r1, #0]
   15ae2:	091c      	lsrs	r4, r3, #4
   15ae4:	0023      	movs	r3, r4
   15ae6:	0034      	movs	r4, r6
   15ae8:	0032      	movs	r2, r6
   15aea:	431c      	orrs	r4, r3
   15aec:	d1f0      	bne.n	15ad0 <_vfprintf_r+0x490>
   15aee:	920c      	str	r2, [sp, #48]	; 0x30
   15af0:	930d      	str	r3, [sp, #52]	; 0x34
   15af2:	ab32      	add	r3, sp, #200	; 0xc8
   15af4:	1a5b      	subs	r3, r3, r1
   15af6:	9111      	str	r1, [sp, #68]	; 0x44
   15af8:	4666      	mov	r6, ip
   15afa:	930e      	str	r3, [sp, #56]	; 0x38
   15afc:	e70d      	b.n	1591a <_vfprintf_r+0x2da>
   15afe:	4663      	mov	r3, ip
   15b00:	431c      	orrs	r4, r3
   15b02:	9b07      	ldr	r3, [sp, #28]
   15b04:	781b      	ldrb	r3, [r3, #0]
   15b06:	e624      	b.n	15752 <_vfprintf_r+0x112>
   15b08:	9b07      	ldr	r3, [sp, #28]
   15b0a:	781b      	ldrb	r3, [r3, #0]
   15b0c:	2b6c      	cmp	r3, #108	; 0x6c
   15b0e:	d101      	bne.n	15b14 <_vfprintf_r+0x4d4>
   15b10:	f000 fe8c 	bl	1682c <_vfprintf_r+0x11ec>
   15b14:	2210      	movs	r2, #16
   15b16:	4314      	orrs	r4, r2
   15b18:	e61b      	b.n	15752 <_vfprintf_r+0x112>
   15b1a:	2900      	cmp	r1, #0
   15b1c:	d001      	beq.n	15b22 <_vfprintf_r+0x4e2>
   15b1e:	f001 f8d5 	bl	16ccc <_vfprintf_r+0x168c>
   15b22:	06a3      	lsls	r3, r4, #26
   15b24:	d501      	bpl.n	15b2a <_vfprintf_r+0x4ea>
   15b26:	f000 fe76 	bl	16816 <_vfprintf_r+0x11d6>
   15b2a:	06e3      	lsls	r3, r4, #27
   15b2c:	d500      	bpl.n	15b30 <_vfprintf_r+0x4f0>
   15b2e:	e110      	b.n	15d52 <_vfprintf_r+0x712>
   15b30:	0663      	lsls	r3, r4, #25
   15b32:	d400      	bmi.n	15b36 <_vfprintf_r+0x4f6>
   15b34:	e10d      	b.n	15d52 <_vfprintf_r+0x712>
   15b36:	4669      	mov	r1, sp
   15b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15b3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   15b3c:	681a      	ldr	r2, [r3, #0]
   15b3e:	3304      	adds	r3, #4
   15b40:	9208      	str	r2, [sp, #32]
   15b42:	8011      	strh	r1, [r2, #0]
   15b44:	930f      	str	r3, [sp, #60]	; 0x3c
   15b46:	e5c9      	b.n	156dc <_vfprintf_r+0x9c>
   15b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15b4a:	2230      	movs	r2, #48	; 0x30
   15b4c:	680b      	ldr	r3, [r1, #0]
   15b4e:	930c      	str	r3, [sp, #48]	; 0x30
   15b50:	2300      	movs	r3, #0
   15b52:	930d      	str	r3, [sp, #52]	; 0x34
   15b54:	3302      	adds	r3, #2
   15b56:	431c      	orrs	r4, r3
   15b58:	ab1e      	add	r3, sp, #120	; 0x78
   15b5a:	701a      	strb	r2, [r3, #0]
   15b5c:	3248      	adds	r2, #72	; 0x48
   15b5e:	705a      	strb	r2, [r3, #1]
   15b60:	000b      	movs	r3, r1
   15b62:	3304      	adds	r3, #4
   15b64:	930f      	str	r3, [sp, #60]	; 0x3c
   15b66:	4bc1      	ldr	r3, [pc, #772]	; (15e6c <_vfprintf_r+0x82c>)
   15b68:	9212      	str	r2, [sp, #72]	; 0x48
   15b6a:	9319      	str	r3, [sp, #100]	; 0x64
   15b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15b6e:	2302      	movs	r3, #2
   15b70:	e6ac      	b.n	158cc <_vfprintf_r+0x28c>
   15b72:	464b      	mov	r3, r9
   15b74:	431c      	orrs	r4, r3
   15b76:	9b07      	ldr	r3, [sp, #28]
   15b78:	781b      	ldrb	r3, [r3, #0]
   15b7a:	e5ea      	b.n	15752 <_vfprintf_r+0x112>
   15b7c:	9312      	str	r3, [sp, #72]	; 0x48
   15b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15b80:	a916      	add	r1, sp, #88	; 0x58
   15b82:	1d1d      	adds	r5, r3, #4
   15b84:	681b      	ldr	r3, [r3, #0]
   15b86:	001a      	movs	r2, r3
   15b88:	9311      	str	r3, [sp, #68]	; 0x44
   15b8a:	2300      	movs	r3, #0
   15b8c:	77cb      	strb	r3, [r1, #31]
   15b8e:	2a00      	cmp	r2, #0
   15b90:	d101      	bne.n	15b96 <_vfprintf_r+0x556>
   15b92:	f000 ff01 	bl	16998 <_vfprintf_r+0x1358>
   15b96:	4653      	mov	r3, sl
   15b98:	3301      	adds	r3, #1
   15b9a:	d101      	bne.n	15ba0 <_vfprintf_r+0x560>
   15b9c:	f000 fe64 	bl	16868 <_vfprintf_r+0x1228>
   15ba0:	4652      	mov	r2, sl
   15ba2:	2100      	movs	r1, #0
   15ba4:	9811      	ldr	r0, [sp, #68]	; 0x44
   15ba6:	f003 f965 	bl	18e74 <memchr>
   15baa:	2800      	cmp	r0, #0
   15bac:	d101      	bne.n	15bb2 <_vfprintf_r+0x572>
   15bae:	f000 ff78 	bl	16aa2 <_vfprintf_r+0x1462>
   15bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15bb4:	1ac3      	subs	r3, r0, r3
   15bb6:	001a      	movs	r2, r3
   15bb8:	930e      	str	r3, [sp, #56]	; 0x38
   15bba:	43db      	mvns	r3, r3
   15bbc:	17db      	asrs	r3, r3, #31
   15bbe:	401a      	ands	r2, r3
   15bc0:	ab16      	add	r3, sp, #88	; 0x58
   15bc2:	7fdb      	ldrb	r3, [r3, #31]
   15bc4:	9208      	str	r2, [sp, #32]
   15bc6:	4698      	mov	r8, r3
   15bc8:	2300      	movs	r3, #0
   15bca:	950f      	str	r5, [sp, #60]	; 0x3c
   15bcc:	9409      	str	r4, [sp, #36]	; 0x24
   15bce:	469a      	mov	sl, r3
   15bd0:	9313      	str	r3, [sp, #76]	; 0x4c
   15bd2:	e6aa      	b.n	1592a <_vfprintf_r+0x2ea>
   15bd4:	2308      	movs	r3, #8
   15bd6:	431c      	orrs	r4, r3
   15bd8:	9b07      	ldr	r3, [sp, #28]
   15bda:	781b      	ldrb	r3, [r3, #0]
   15bdc:	e5b9      	b.n	15752 <_vfprintf_r+0x112>
   15bde:	9312      	str	r3, [sp, #72]	; 0x48
   15be0:	2310      	movs	r3, #16
   15be2:	431c      	orrs	r4, r3
   15be4:	06a3      	lsls	r3, r4, #26
   15be6:	d501      	bpl.n	15bec <_vfprintf_r+0x5ac>
   15be8:	f000 fca7 	bl	1653a <_vfprintf_r+0xefa>
   15bec:	06e3      	lsls	r3, r4, #27
   15bee:	d500      	bpl.n	15bf2 <_vfprintf_r+0x5b2>
   15bf0:	e3ee      	b.n	163d0 <_vfprintf_r+0xd90>
   15bf2:	0663      	lsls	r3, r4, #25
   15bf4:	d400      	bmi.n	15bf8 <_vfprintf_r+0x5b8>
   15bf6:	e3eb      	b.n	163d0 <_vfprintf_r+0xd90>
   15bf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15bfa:	881a      	ldrh	r2, [r3, #0]
   15bfc:	920c      	str	r2, [sp, #48]	; 0x30
   15bfe:	2200      	movs	r2, #0
   15c00:	3304      	adds	r3, #4
   15c02:	920d      	str	r2, [sp, #52]	; 0x34
   15c04:	930f      	str	r3, [sp, #60]	; 0x3c
   15c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15c08:	2300      	movs	r3, #0
   15c0a:	e65f      	b.n	158cc <_vfprintf_r+0x28c>
   15c0c:	9312      	str	r3, [sp, #72]	; 0x48
   15c0e:	2310      	movs	r3, #16
   15c10:	431c      	orrs	r4, r3
   15c12:	06a3      	lsls	r3, r4, #26
   15c14:	d501      	bpl.n	15c1a <_vfprintf_r+0x5da>
   15c16:	f000 fcba 	bl	1658e <_vfprintf_r+0xf4e>
   15c1a:	06e3      	lsls	r3, r4, #27
   15c1c:	d500      	bpl.n	15c20 <_vfprintf_r+0x5e0>
   15c1e:	e3da      	b.n	163d6 <_vfprintf_r+0xd96>
   15c20:	0663      	lsls	r3, r4, #25
   15c22:	d400      	bmi.n	15c26 <_vfprintf_r+0x5e6>
   15c24:	e3d7      	b.n	163d6 <_vfprintf_r+0xd96>
   15c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15c28:	881a      	ldrh	r2, [r3, #0]
   15c2a:	920c      	str	r2, [sp, #48]	; 0x30
   15c2c:	2200      	movs	r2, #0
   15c2e:	3304      	adds	r3, #4
   15c30:	920d      	str	r2, [sp, #52]	; 0x34
   15c32:	930f      	str	r3, [sp, #60]	; 0x3c
   15c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15c36:	2301      	movs	r3, #1
   15c38:	e648      	b.n	158cc <_vfprintf_r+0x28c>
   15c3a:	9312      	str	r3, [sp, #72]	; 0x48
   15c3c:	2900      	cmp	r1, #0
   15c3e:	d001      	beq.n	15c44 <_vfprintf_r+0x604>
   15c40:	f001 f857 	bl	16cf2 <_vfprintf_r+0x16b2>
   15c44:	4b8a      	ldr	r3, [pc, #552]	; (15e70 <_vfprintf_r+0x830>)
   15c46:	9319      	str	r3, [sp, #100]	; 0x64
   15c48:	e618      	b.n	1587c <_vfprintf_r+0x23c>
   15c4a:	2301      	movs	r3, #1
   15c4c:	431c      	orrs	r4, r3
   15c4e:	9b07      	ldr	r3, [sp, #28]
   15c50:	781b      	ldrb	r3, [r3, #0]
   15c52:	e57e      	b.n	15752 <_vfprintf_r+0x112>
   15c54:	2380      	movs	r3, #128	; 0x80
   15c56:	431c      	orrs	r4, r3
   15c58:	9b07      	ldr	r3, [sp, #28]
   15c5a:	781b      	ldrb	r3, [r3, #0]
   15c5c:	e579      	b.n	15752 <_vfprintf_r+0x112>
   15c5e:	9b07      	ldr	r3, [sp, #28]
   15c60:	781b      	ldrb	r3, [r3, #0]
   15c62:	2800      	cmp	r0, #0
   15c64:	d000      	beq.n	15c68 <_vfprintf_r+0x628>
   15c66:	e574      	b.n	15752 <_vfprintf_r+0x112>
   15c68:	2101      	movs	r1, #1
   15c6a:	3020      	adds	r0, #32
   15c6c:	e571      	b.n	15752 <_vfprintf_r+0x112>
   15c6e:	9312      	str	r3, [sp, #72]	; 0x48
   15c70:	2900      	cmp	r1, #0
   15c72:	d001      	beq.n	15c78 <_vfprintf_r+0x638>
   15c74:	f001 f839 	bl	16cea <_vfprintf_r+0x16aa>
   15c78:	2207      	movs	r2, #7
   15c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15c7c:	3307      	adds	r3, #7
   15c7e:	4393      	bics	r3, r2
   15c80:	3201      	adds	r2, #1
   15c82:	4694      	mov	ip, r2
   15c84:	449c      	add	ip, r3
   15c86:	4662      	mov	r2, ip
   15c88:	920f      	str	r2, [sp, #60]	; 0x3c
   15c8a:	681a      	ldr	r2, [r3, #0]
   15c8c:	9216      	str	r2, [sp, #88]	; 0x58
   15c8e:	685b      	ldr	r3, [r3, #4]
   15c90:	2201      	movs	r2, #1
   15c92:	9315      	str	r3, [sp, #84]	; 0x54
   15c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15c96:	9d16      	ldr	r5, [sp, #88]	; 0x58
   15c98:	005b      	lsls	r3, r3, #1
   15c9a:	085b      	lsrs	r3, r3, #1
   15c9c:	4698      	mov	r8, r3
   15c9e:	4252      	negs	r2, r2
   15ca0:	4b74      	ldr	r3, [pc, #464]	; (15e74 <_vfprintf_r+0x834>)
   15ca2:	0028      	movs	r0, r5
   15ca4:	4641      	mov	r1, r8
   15ca6:	f004 fa7d 	bl	1a1a4 <__aeabi_dcmpun>
   15caa:	2800      	cmp	r0, #0
   15cac:	d001      	beq.n	15cb2 <_vfprintf_r+0x672>
   15cae:	f000 fcb4 	bl	1661a <_vfprintf_r+0xfda>
   15cb2:	2201      	movs	r2, #1
   15cb4:	4b6f      	ldr	r3, [pc, #444]	; (15e74 <_vfprintf_r+0x834>)
   15cb6:	4252      	negs	r2, r2
   15cb8:	0028      	movs	r0, r5
   15cba:	4641      	mov	r1, r8
   15cbc:	f7fd fe30 	bl	13920 <__aeabi_dcmple>
   15cc0:	2800      	cmp	r0, #0
   15cc2:	d001      	beq.n	15cc8 <_vfprintf_r+0x688>
   15cc4:	f000 fca9 	bl	1661a <_vfprintf_r+0xfda>
   15cc8:	2200      	movs	r2, #0
   15cca:	2300      	movs	r3, #0
   15ccc:	9816      	ldr	r0, [sp, #88]	; 0x58
   15cce:	9915      	ldr	r1, [sp, #84]	; 0x54
   15cd0:	f7fd fe1c 	bl	1390c <__aeabi_dcmplt>
   15cd4:	2800      	cmp	r0, #0
   15cd6:	d001      	beq.n	15cdc <_vfprintf_r+0x69c>
   15cd8:	f000 fd55 	bl	16786 <_vfprintf_r+0x1146>
   15cdc:	ab16      	add	r3, sp, #88	; 0x58
   15cde:	7fdb      	ldrb	r3, [r3, #31]
   15ce0:	4698      	mov	r8, r3
   15ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ce4:	2b47      	cmp	r3, #71	; 0x47
   15ce6:	dd01      	ble.n	15cec <_vfprintf_r+0x6ac>
   15ce8:	f000 fdb4 	bl	16854 <_vfprintf_r+0x1214>
   15cec:	4b62      	ldr	r3, [pc, #392]	; (15e78 <_vfprintf_r+0x838>)
   15cee:	9311      	str	r3, [sp, #68]	; 0x44
   15cf0:	2380      	movs	r3, #128	; 0x80
   15cf2:	439c      	bics	r4, r3
   15cf4:	3b7d      	subs	r3, #125	; 0x7d
   15cf6:	9308      	str	r3, [sp, #32]
   15cf8:	930e      	str	r3, [sp, #56]	; 0x38
   15cfa:	2300      	movs	r3, #0
   15cfc:	9409      	str	r4, [sp, #36]	; 0x24
   15cfe:	469a      	mov	sl, r3
   15d00:	9313      	str	r3, [sp, #76]	; 0x4c
   15d02:	e612      	b.n	1592a <_vfprintf_r+0x2ea>
   15d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15d06:	1d1a      	adds	r2, r3, #4
   15d08:	681b      	ldr	r3, [r3, #0]
   15d0a:	930b      	str	r3, [sp, #44]	; 0x2c
   15d0c:	2b00      	cmp	r3, #0
   15d0e:	da00      	bge.n	15d12 <_vfprintf_r+0x6d2>
   15d10:	e578      	b.n	15804 <_vfprintf_r+0x1c4>
   15d12:	9b07      	ldr	r3, [sp, #28]
   15d14:	920f      	str	r2, [sp, #60]	; 0x3c
   15d16:	781b      	ldrb	r3, [r3, #0]
   15d18:	e51b      	b.n	15752 <_vfprintf_r+0x112>
   15d1a:	9312      	str	r3, [sp, #72]	; 0x48
   15d1c:	2900      	cmp	r1, #0
   15d1e:	d001      	beq.n	15d24 <_vfprintf_r+0x6e4>
   15d20:	f000 ffcc 	bl	16cbc <_vfprintf_r+0x167c>
   15d24:	2310      	movs	r3, #16
   15d26:	431c      	orrs	r4, r3
   15d28:	e69a      	b.n	15a60 <_vfprintf_r+0x420>
   15d2a:	9312      	str	r3, [sp, #72]	; 0x48
   15d2c:	e771      	b.n	15c12 <_vfprintf_r+0x5d2>
   15d2e:	9312      	str	r3, [sp, #72]	; 0x48
   15d30:	e758      	b.n	15be4 <_vfprintf_r+0x5a4>
   15d32:	9312      	str	r3, [sp, #72]	; 0x48
   15d34:	2900      	cmp	r1, #0
   15d36:	d001      	beq.n	15d3c <_vfprintf_r+0x6fc>
   15d38:	f000 ffd3 	bl	16ce2 <_vfprintf_r+0x16a2>
   15d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15d3e:	2b00      	cmp	r3, #0
   15d40:	d100      	bne.n	15d44 <_vfprintf_r+0x704>
   15d42:	e18d      	b.n	16060 <_vfprintf_r+0xa20>
   15d44:	ad28      	add	r5, sp, #160	; 0xa0
   15d46:	702b      	strb	r3, [r5, #0]
   15d48:	2300      	movs	r3, #0
   15d4a:	aa16      	add	r2, sp, #88	; 0x58
   15d4c:	77d3      	strb	r3, [r2, #31]
   15d4e:	9409      	str	r4, [sp, #36]	; 0x24
   15d50:	e678      	b.n	15a44 <_vfprintf_r+0x404>
   15d52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15d54:	990a      	ldr	r1, [sp, #40]	; 0x28
   15d56:	6813      	ldr	r3, [r2, #0]
   15d58:	6019      	str	r1, [r3, #0]
   15d5a:	0013      	movs	r3, r2
   15d5c:	3304      	adds	r3, #4
   15d5e:	930f      	str	r3, [sp, #60]	; 0x3c
   15d60:	e4bc      	b.n	156dc <_vfprintf_r+0x9c>
   15d62:	68bc      	ldr	r4, [r7, #8]
   15d64:	4643      	mov	r3, r8
   15d66:	2b00      	cmp	r3, #0
   15d68:	d00f      	beq.n	15d8a <_vfprintf_r+0x74a>
   15d6a:	aa16      	add	r2, sp, #88	; 0x58
   15d6c:	231f      	movs	r3, #31
   15d6e:	4694      	mov	ip, r2
   15d70:	4463      	add	r3, ip
   15d72:	6033      	str	r3, [r6, #0]
   15d74:	2301      	movs	r3, #1
   15d76:	6073      	str	r3, [r6, #4]
   15d78:	687b      	ldr	r3, [r7, #4]
   15d7a:	3401      	adds	r4, #1
   15d7c:	3301      	adds	r3, #1
   15d7e:	60bc      	str	r4, [r7, #8]
   15d80:	607b      	str	r3, [r7, #4]
   15d82:	2b07      	cmp	r3, #7
   15d84:	dd00      	ble.n	15d88 <_vfprintf_r+0x748>
   15d86:	e203      	b.n	16190 <_vfprintf_r+0xb50>
   15d88:	3608      	adds	r6, #8
   15d8a:	464b      	mov	r3, r9
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	d00c      	beq.n	15daa <_vfprintf_r+0x76a>
   15d90:	ab1e      	add	r3, sp, #120	; 0x78
   15d92:	6033      	str	r3, [r6, #0]
   15d94:	2302      	movs	r3, #2
   15d96:	6073      	str	r3, [r6, #4]
   15d98:	687b      	ldr	r3, [r7, #4]
   15d9a:	3402      	adds	r4, #2
   15d9c:	3301      	adds	r3, #1
   15d9e:	60bc      	str	r4, [r7, #8]
   15da0:	607b      	str	r3, [r7, #4]
   15da2:	2b07      	cmp	r3, #7
   15da4:	dd00      	ble.n	15da8 <_vfprintf_r+0x768>
   15da6:	e1fd      	b.n	161a4 <_vfprintf_r+0xb64>
   15da8:	3608      	adds	r6, #8
   15daa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15dac:	2b80      	cmp	r3, #128	; 0x80
   15dae:	d100      	bne.n	15db2 <_vfprintf_r+0x772>
   15db0:	e173      	b.n	1609a <_vfprintf_r+0xa5a>
   15db2:	4653      	mov	r3, sl
   15db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15db6:	1a9d      	subs	r5, r3, r2
   15db8:	2d00      	cmp	r5, #0
   15dba:	dd32      	ble.n	15e22 <_vfprintf_r+0x7e2>
   15dbc:	4a2f      	ldr	r2, [pc, #188]	; (15e7c <_vfprintf_r+0x83c>)
   15dbe:	687b      	ldr	r3, [r7, #4]
   15dc0:	4691      	mov	r9, r2
   15dc2:	2d10      	cmp	r5, #16
   15dc4:	dd22      	ble.n	15e0c <_vfprintf_r+0x7cc>
   15dc6:	2210      	movs	r2, #16
   15dc8:	4692      	mov	sl, r2
   15dca:	0022      	movs	r2, r4
   15dcc:	465c      	mov	r4, fp
   15dce:	e003      	b.n	15dd8 <_vfprintf_r+0x798>
   15dd0:	3d10      	subs	r5, #16
   15dd2:	3608      	adds	r6, #8
   15dd4:	2d10      	cmp	r5, #16
   15dd6:	dd17      	ble.n	15e08 <_vfprintf_r+0x7c8>
   15dd8:	4649      	mov	r1, r9
   15dda:	6031      	str	r1, [r6, #0]
   15ddc:	4651      	mov	r1, sl
   15dde:	3210      	adds	r2, #16
   15de0:	3301      	adds	r3, #1
   15de2:	6071      	str	r1, [r6, #4]
   15de4:	60ba      	str	r2, [r7, #8]
   15de6:	607b      	str	r3, [r7, #4]
   15de8:	2b07      	cmp	r3, #7
   15dea:	ddf1      	ble.n	15dd0 <_vfprintf_r+0x790>
   15dec:	003a      	movs	r2, r7
   15dee:	0021      	movs	r1, r4
   15df0:	9806      	ldr	r0, [sp, #24]
   15df2:	f003 ff17 	bl	19c24 <__sprint_r>
   15df6:	2800      	cmp	r0, #0
   15df8:	d000      	beq.n	15dfc <_vfprintf_r+0x7bc>
   15dfa:	e18a      	b.n	16112 <_vfprintf_r+0xad2>
   15dfc:	3d10      	subs	r5, #16
   15dfe:	68ba      	ldr	r2, [r7, #8]
   15e00:	687b      	ldr	r3, [r7, #4]
   15e02:	ae32      	add	r6, sp, #200	; 0xc8
   15e04:	2d10      	cmp	r5, #16
   15e06:	dce7      	bgt.n	15dd8 <_vfprintf_r+0x798>
   15e08:	46a3      	mov	fp, r4
   15e0a:	0014      	movs	r4, r2
   15e0c:	464a      	mov	r2, r9
   15e0e:	1964      	adds	r4, r4, r5
   15e10:	3301      	adds	r3, #1
   15e12:	6032      	str	r2, [r6, #0]
   15e14:	6075      	str	r5, [r6, #4]
   15e16:	60bc      	str	r4, [r7, #8]
   15e18:	607b      	str	r3, [r7, #4]
   15e1a:	2b07      	cmp	r3, #7
   15e1c:	dd00      	ble.n	15e20 <_vfprintf_r+0x7e0>
   15e1e:	e1ad      	b.n	1617c <_vfprintf_r+0xb3c>
   15e20:	3608      	adds	r6, #8
   15e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e24:	05db      	lsls	r3, r3, #23
   15e26:	d500      	bpl.n	15e2a <_vfprintf_r+0x7ea>
   15e28:	e0be      	b.n	15fa8 <_vfprintf_r+0x968>
   15e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15e2c:	6033      	str	r3, [r6, #0]
   15e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15e30:	469c      	mov	ip, r3
   15e32:	6073      	str	r3, [r6, #4]
   15e34:	687b      	ldr	r3, [r7, #4]
   15e36:	4464      	add	r4, ip
   15e38:	3301      	adds	r3, #1
   15e3a:	60bc      	str	r4, [r7, #8]
   15e3c:	607b      	str	r3, [r7, #4]
   15e3e:	2b07      	cmp	r3, #7
   15e40:	dd00      	ble.n	15e44 <_vfprintf_r+0x804>
   15e42:	e0a6      	b.n	15f92 <_vfprintf_r+0x952>
   15e44:	3608      	adds	r6, #8
   15e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e48:	075b      	lsls	r3, r3, #29
   15e4a:	d54a      	bpl.n	15ee2 <_vfprintf_r+0x8a2>
   15e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e4e:	9a08      	ldr	r2, [sp, #32]
   15e50:	1a9d      	subs	r5, r3, r2
   15e52:	2d00      	cmp	r5, #0
   15e54:	dd45      	ble.n	15ee2 <_vfprintf_r+0x8a2>
   15e56:	4a0a      	ldr	r2, [pc, #40]	; (15e80 <_vfprintf_r+0x840>)
   15e58:	687b      	ldr	r3, [r7, #4]
   15e5a:	4690      	mov	r8, r2
   15e5c:	2d10      	cmp	r5, #16
   15e5e:	dd2f      	ble.n	15ec0 <_vfprintf_r+0x880>
   15e60:	2210      	movs	r2, #16
   15e62:	4691      	mov	r9, r2
   15e64:	0022      	movs	r2, r4
   15e66:	465c      	mov	r4, fp
   15e68:	e010      	b.n	15e8c <_vfprintf_r+0x84c>
   15e6a:	46c0      	nop			; (mov r8, r8)
   15e6c:	0001b154 	.word	0x0001b154
   15e70:	0001b140 	.word	0x0001b140
   15e74:	7fefffff 	.word	0x7fefffff
   15e78:	0001b130 	.word	0x0001b130
   15e7c:	0001b308 	.word	0x0001b308
   15e80:	0001b2f8 	.word	0x0001b2f8
   15e84:	3d10      	subs	r5, #16
   15e86:	3608      	adds	r6, #8
   15e88:	2d10      	cmp	r5, #16
   15e8a:	dd17      	ble.n	15ebc <_vfprintf_r+0x87c>
   15e8c:	49d1      	ldr	r1, [pc, #836]	; (161d4 <_vfprintf_r+0xb94>)
   15e8e:	3210      	adds	r2, #16
   15e90:	6031      	str	r1, [r6, #0]
   15e92:	4649      	mov	r1, r9
   15e94:	3301      	adds	r3, #1
   15e96:	6071      	str	r1, [r6, #4]
   15e98:	60ba      	str	r2, [r7, #8]
   15e9a:	607b      	str	r3, [r7, #4]
   15e9c:	2b07      	cmp	r3, #7
   15e9e:	ddf1      	ble.n	15e84 <_vfprintf_r+0x844>
   15ea0:	003a      	movs	r2, r7
   15ea2:	0021      	movs	r1, r4
   15ea4:	9806      	ldr	r0, [sp, #24]
   15ea6:	f003 febd 	bl	19c24 <__sprint_r>
   15eaa:	2800      	cmp	r0, #0
   15eac:	d000      	beq.n	15eb0 <_vfprintf_r+0x870>
   15eae:	e130      	b.n	16112 <_vfprintf_r+0xad2>
   15eb0:	3d10      	subs	r5, #16
   15eb2:	68ba      	ldr	r2, [r7, #8]
   15eb4:	687b      	ldr	r3, [r7, #4]
   15eb6:	ae32      	add	r6, sp, #200	; 0xc8
   15eb8:	2d10      	cmp	r5, #16
   15eba:	dce7      	bgt.n	15e8c <_vfprintf_r+0x84c>
   15ebc:	46a3      	mov	fp, r4
   15ebe:	0014      	movs	r4, r2
   15ec0:	4642      	mov	r2, r8
   15ec2:	1964      	adds	r4, r4, r5
   15ec4:	3301      	adds	r3, #1
   15ec6:	c624      	stmia	r6!, {r2, r5}
   15ec8:	60bc      	str	r4, [r7, #8]
   15eca:	607b      	str	r3, [r7, #4]
   15ecc:	2b07      	cmp	r3, #7
   15ece:	dd08      	ble.n	15ee2 <_vfprintf_r+0x8a2>
   15ed0:	003a      	movs	r2, r7
   15ed2:	4659      	mov	r1, fp
   15ed4:	9806      	ldr	r0, [sp, #24]
   15ed6:	f003 fea5 	bl	19c24 <__sprint_r>
   15eda:	2800      	cmp	r0, #0
   15edc:	d000      	beq.n	15ee0 <_vfprintf_r+0x8a0>
   15ede:	e13f      	b.n	16160 <_vfprintf_r+0xb20>
   15ee0:	68bc      	ldr	r4, [r7, #8]
   15ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ee4:	9908      	ldr	r1, [sp, #32]
   15ee6:	428b      	cmp	r3, r1
   15ee8:	da00      	bge.n	15eec <_vfprintf_r+0x8ac>
   15eea:	000b      	movs	r3, r1
   15eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15eee:	4694      	mov	ip, r2
   15ef0:	449c      	add	ip, r3
   15ef2:	4663      	mov	r3, ip
   15ef4:	930a      	str	r3, [sp, #40]	; 0x28
   15ef6:	2c00      	cmp	r4, #0
   15ef8:	d000      	beq.n	15efc <_vfprintf_r+0x8bc>
   15efa:	e129      	b.n	16150 <_vfprintf_r+0xb10>
   15efc:	2300      	movs	r3, #0
   15efe:	ae32      	add	r6, sp, #200	; 0xc8
   15f00:	607b      	str	r3, [r7, #4]
   15f02:	f7ff fbeb 	bl	156dc <_vfprintf_r+0x9c>
   15f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15f08:	2b01      	cmp	r3, #1
   15f0a:	dc00      	bgt.n	15f0e <_vfprintf_r+0x8ce>
   15f0c:	e103      	b.n	16116 <_vfprintf_r+0xad6>
   15f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15f10:	3401      	adds	r4, #1
   15f12:	6033      	str	r3, [r6, #0]
   15f14:	2301      	movs	r3, #1
   15f16:	6073      	str	r3, [r6, #4]
   15f18:	687b      	ldr	r3, [r7, #4]
   15f1a:	60bc      	str	r4, [r7, #8]
   15f1c:	3301      	adds	r3, #1
   15f1e:	607b      	str	r3, [r7, #4]
   15f20:	2b07      	cmp	r3, #7
   15f22:	dd00      	ble.n	15f26 <_vfprintf_r+0x8e6>
   15f24:	e2ef      	b.n	16506 <_vfprintf_r+0xec6>
   15f26:	3608      	adds	r6, #8
   15f28:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15f2a:	3301      	adds	r3, #1
   15f2c:	6032      	str	r2, [r6, #0]
   15f2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15f30:	4698      	mov	r8, r3
   15f32:	4694      	mov	ip, r2
   15f34:	4464      	add	r4, ip
   15f36:	6072      	str	r2, [r6, #4]
   15f38:	60bc      	str	r4, [r7, #8]
   15f3a:	607b      	str	r3, [r7, #4]
   15f3c:	2b07      	cmp	r3, #7
   15f3e:	dd00      	ble.n	15f42 <_vfprintf_r+0x902>
   15f40:	e318      	b.n	16574 <_vfprintf_r+0xf34>
   15f42:	3608      	adds	r6, #8
   15f44:	2200      	movs	r2, #0
   15f46:	2300      	movs	r3, #0
   15f48:	9816      	ldr	r0, [sp, #88]	; 0x58
   15f4a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15f4c:	f7fd fcd8 	bl	13900 <__aeabi_dcmpeq>
   15f50:	2800      	cmp	r0, #0
   15f52:	d000      	beq.n	15f56 <_vfprintf_r+0x916>
   15f54:	e1f4      	b.n	16340 <_vfprintf_r+0xd00>
   15f56:	9d11      	ldr	r5, [sp, #68]	; 0x44
   15f58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15f5a:	3501      	adds	r5, #1
   15f5c:	3b01      	subs	r3, #1
   15f5e:	6035      	str	r5, [r6, #0]
   15f60:	6073      	str	r3, [r6, #4]
   15f62:	18e4      	adds	r4, r4, r3
   15f64:	2301      	movs	r3, #1
   15f66:	469c      	mov	ip, r3
   15f68:	44e0      	add	r8, ip
   15f6a:	4643      	mov	r3, r8
   15f6c:	60bc      	str	r4, [r7, #8]
   15f6e:	607b      	str	r3, [r7, #4]
   15f70:	2b07      	cmp	r3, #7
   15f72:	dd00      	ble.n	15f76 <_vfprintf_r+0x936>
   15f74:	e0e0      	b.n	16138 <_vfprintf_r+0xaf8>
   15f76:	3608      	adds	r6, #8
   15f78:	ab21      	add	r3, sp, #132	; 0x84
   15f7a:	6033      	str	r3, [r6, #0]
   15f7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15f7e:	469c      	mov	ip, r3
   15f80:	6073      	str	r3, [r6, #4]
   15f82:	4643      	mov	r3, r8
   15f84:	4464      	add	r4, ip
   15f86:	3301      	adds	r3, #1
   15f88:	60bc      	str	r4, [r7, #8]
   15f8a:	607b      	str	r3, [r7, #4]
   15f8c:	2b07      	cmp	r3, #7
   15f8e:	dc00      	bgt.n	15f92 <_vfprintf_r+0x952>
   15f90:	e758      	b.n	15e44 <_vfprintf_r+0x804>
   15f92:	003a      	movs	r2, r7
   15f94:	4659      	mov	r1, fp
   15f96:	9806      	ldr	r0, [sp, #24]
   15f98:	f003 fe44 	bl	19c24 <__sprint_r>
   15f9c:	2800      	cmp	r0, #0
   15f9e:	d000      	beq.n	15fa2 <_vfprintf_r+0x962>
   15fa0:	e0de      	b.n	16160 <_vfprintf_r+0xb20>
   15fa2:	68bc      	ldr	r4, [r7, #8]
   15fa4:	ae32      	add	r6, sp, #200	; 0xc8
   15fa6:	e74e      	b.n	15e46 <_vfprintf_r+0x806>
   15fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15faa:	2b65      	cmp	r3, #101	; 0x65
   15fac:	ddab      	ble.n	15f06 <_vfprintf_r+0x8c6>
   15fae:	2200      	movs	r2, #0
   15fb0:	2300      	movs	r3, #0
   15fb2:	9816      	ldr	r0, [sp, #88]	; 0x58
   15fb4:	9915      	ldr	r1, [sp, #84]	; 0x54
   15fb6:	f7fd fca3 	bl	13900 <__aeabi_dcmpeq>
   15fba:	2800      	cmp	r0, #0
   15fbc:	d100      	bne.n	15fc0 <_vfprintf_r+0x980>
   15fbe:	e134      	b.n	1622a <_vfprintf_r+0xbea>
   15fc0:	4b85      	ldr	r3, [pc, #532]	; (161d8 <_vfprintf_r+0xb98>)
   15fc2:	3401      	adds	r4, #1
   15fc4:	6033      	str	r3, [r6, #0]
   15fc6:	2301      	movs	r3, #1
   15fc8:	6073      	str	r3, [r6, #4]
   15fca:	687b      	ldr	r3, [r7, #4]
   15fcc:	60bc      	str	r4, [r7, #8]
   15fce:	3301      	adds	r3, #1
   15fd0:	607b      	str	r3, [r7, #4]
   15fd2:	2b07      	cmp	r3, #7
   15fd4:	dd00      	ble.n	15fd8 <_vfprintf_r+0x998>
   15fd6:	e3dc      	b.n	16792 <_vfprintf_r+0x1152>
   15fd8:	3608      	adds	r6, #8
   15fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15fde:	4293      	cmp	r3, r2
   15fe0:	db03      	blt.n	15fea <_vfprintf_r+0x9aa>
   15fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15fe4:	07db      	lsls	r3, r3, #31
   15fe6:	d400      	bmi.n	15fea <_vfprintf_r+0x9aa>
   15fe8:	e3b7      	b.n	1675a <_vfprintf_r+0x111a>
   15fea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15fec:	68ba      	ldr	r2, [r7, #8]
   15fee:	6033      	str	r3, [r6, #0]
   15ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15ff2:	469c      	mov	ip, r3
   15ff4:	6073      	str	r3, [r6, #4]
   15ff6:	687b      	ldr	r3, [r7, #4]
   15ff8:	4462      	add	r2, ip
   15ffa:	3301      	adds	r3, #1
   15ffc:	0014      	movs	r4, r2
   15ffe:	60ba      	str	r2, [r7, #8]
   16000:	607b      	str	r3, [r7, #4]
   16002:	2b07      	cmp	r3, #7
   16004:	dd01      	ble.n	1600a <_vfprintf_r+0x9ca>
   16006:	f000 fc19 	bl	1683c <_vfprintf_r+0x11fc>
   1600a:	3608      	adds	r6, #8
   1600c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1600e:	1e5d      	subs	r5, r3, #1
   16010:	2d00      	cmp	r5, #0
   16012:	dc00      	bgt.n	16016 <_vfprintf_r+0x9d6>
   16014:	e717      	b.n	15e46 <_vfprintf_r+0x806>
   16016:	4a71      	ldr	r2, [pc, #452]	; (161dc <_vfprintf_r+0xb9c>)
   16018:	687b      	ldr	r3, [r7, #4]
   1601a:	4691      	mov	r9, r2
   1601c:	2d10      	cmp	r5, #16
   1601e:	dc00      	bgt.n	16022 <_vfprintf_r+0x9e2>
   16020:	e1c3      	b.n	163aa <_vfprintf_r+0xd6a>
   16022:	2210      	movs	r2, #16
   16024:	4690      	mov	r8, r2
   16026:	0022      	movs	r2, r4
   16028:	464c      	mov	r4, r9
   1602a:	46d9      	mov	r9, fp
   1602c:	e004      	b.n	16038 <_vfprintf_r+0x9f8>
   1602e:	3608      	adds	r6, #8
   16030:	3d10      	subs	r5, #16
   16032:	2d10      	cmp	r5, #16
   16034:	dc00      	bgt.n	16038 <_vfprintf_r+0x9f8>
   16036:	e37c      	b.n	16732 <_vfprintf_r+0x10f2>
   16038:	4641      	mov	r1, r8
   1603a:	3210      	adds	r2, #16
   1603c:	3301      	adds	r3, #1
   1603e:	6034      	str	r4, [r6, #0]
   16040:	6071      	str	r1, [r6, #4]
   16042:	60ba      	str	r2, [r7, #8]
   16044:	607b      	str	r3, [r7, #4]
   16046:	2b07      	cmp	r3, #7
   16048:	ddf1      	ble.n	1602e <_vfprintf_r+0x9ee>
   1604a:	003a      	movs	r2, r7
   1604c:	4649      	mov	r1, r9
   1604e:	9806      	ldr	r0, [sp, #24]
   16050:	f003 fde8 	bl	19c24 <__sprint_r>
   16054:	2800      	cmp	r0, #0
   16056:	d10b      	bne.n	16070 <_vfprintf_r+0xa30>
   16058:	68ba      	ldr	r2, [r7, #8]
   1605a:	687b      	ldr	r3, [r7, #4]
   1605c:	ae32      	add	r6, sp, #200	; 0xc8
   1605e:	e7e7      	b.n	16030 <_vfprintf_r+0x9f0>
   16060:	68bb      	ldr	r3, [r7, #8]
   16062:	46d9      	mov	r9, fp
   16064:	2b00      	cmp	r3, #0
   16066:	d001      	beq.n	1606c <_vfprintf_r+0xa2c>
   16068:	f000 fd4c 	bl	16b04 <_vfprintf_r+0x14c4>
   1606c:	2300      	movs	r3, #0
   1606e:	607b      	str	r3, [r7, #4]
   16070:	464b      	mov	r3, r9
   16072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   16074:	07db      	lsls	r3, r3, #31
   16076:	d40d      	bmi.n	16094 <_vfprintf_r+0xa54>
   16078:	464b      	mov	r3, r9
   1607a:	899b      	ldrh	r3, [r3, #12]
   1607c:	059a      	lsls	r2, r3, #22
   1607e:	d505      	bpl.n	1608c <_vfprintf_r+0xa4c>
   16080:	065b      	lsls	r3, r3, #25
   16082:	d401      	bmi.n	16088 <_vfprintf_r+0xa48>
   16084:	f7ff fb8d 	bl	157a2 <_vfprintf_r+0x162>
   16088:	f7ff fb88 	bl	1579c <_vfprintf_r+0x15c>
   1608c:	464b      	mov	r3, r9
   1608e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   16090:	f002 fbb8 	bl	18804 <__retarget_lock_release_recursive>
   16094:	464b      	mov	r3, r9
   16096:	899b      	ldrh	r3, [r3, #12]
   16098:	e7f2      	b.n	16080 <_vfprintf_r+0xa40>
   1609a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1609c:	9a08      	ldr	r2, [sp, #32]
   1609e:	1a9d      	subs	r5, r3, r2
   160a0:	2d00      	cmp	r5, #0
   160a2:	dc00      	bgt.n	160a6 <_vfprintf_r+0xa66>
   160a4:	e685      	b.n	15db2 <_vfprintf_r+0x772>
   160a6:	4a4d      	ldr	r2, [pc, #308]	; (161dc <_vfprintf_r+0xb9c>)
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	4691      	mov	r9, r2
   160ac:	2d10      	cmp	r5, #16
   160ae:	dd24      	ble.n	160fa <_vfprintf_r+0xaba>
   160b0:	2210      	movs	r2, #16
   160b2:	0021      	movs	r1, r4
   160b4:	4690      	mov	r8, r2
   160b6:	465c      	mov	r4, fp
   160b8:	0032      	movs	r2, r6
   160ba:	464e      	mov	r6, r9
   160bc:	e003      	b.n	160c6 <_vfprintf_r+0xa86>
   160be:	3d10      	subs	r5, #16
   160c0:	3208      	adds	r2, #8
   160c2:	2d10      	cmp	r5, #16
   160c4:	dd15      	ble.n	160f2 <_vfprintf_r+0xab2>
   160c6:	4640      	mov	r0, r8
   160c8:	3110      	adds	r1, #16
   160ca:	3301      	adds	r3, #1
   160cc:	6016      	str	r6, [r2, #0]
   160ce:	6050      	str	r0, [r2, #4]
   160d0:	60b9      	str	r1, [r7, #8]
   160d2:	607b      	str	r3, [r7, #4]
   160d4:	2b07      	cmp	r3, #7
   160d6:	ddf2      	ble.n	160be <_vfprintf_r+0xa7e>
   160d8:	003a      	movs	r2, r7
   160da:	0021      	movs	r1, r4
   160dc:	9806      	ldr	r0, [sp, #24]
   160de:	f003 fda1 	bl	19c24 <__sprint_r>
   160e2:	2800      	cmp	r0, #0
   160e4:	d115      	bne.n	16112 <_vfprintf_r+0xad2>
   160e6:	3d10      	subs	r5, #16
   160e8:	68b9      	ldr	r1, [r7, #8]
   160ea:	687b      	ldr	r3, [r7, #4]
   160ec:	aa32      	add	r2, sp, #200	; 0xc8
   160ee:	2d10      	cmp	r5, #16
   160f0:	dce9      	bgt.n	160c6 <_vfprintf_r+0xa86>
   160f2:	46a3      	mov	fp, r4
   160f4:	46b1      	mov	r9, r6
   160f6:	000c      	movs	r4, r1
   160f8:	0016      	movs	r6, r2
   160fa:	464a      	mov	r2, r9
   160fc:	1964      	adds	r4, r4, r5
   160fe:	3301      	adds	r3, #1
   16100:	6032      	str	r2, [r6, #0]
   16102:	6075      	str	r5, [r6, #4]
   16104:	60bc      	str	r4, [r7, #8]
   16106:	607b      	str	r3, [r7, #4]
   16108:	2b07      	cmp	r3, #7
   1610a:	dd00      	ble.n	1610e <_vfprintf_r+0xace>
   1610c:	e263      	b.n	165d6 <_vfprintf_r+0xf96>
   1610e:	3608      	adds	r6, #8
   16110:	e64f      	b.n	15db2 <_vfprintf_r+0x772>
   16112:	46a1      	mov	r9, r4
   16114:	e7ac      	b.n	16070 <_vfprintf_r+0xa30>
   16116:	2301      	movs	r3, #1
   16118:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1611a:	4213      	tst	r3, r2
   1611c:	d000      	beq.n	16120 <_vfprintf_r+0xae0>
   1611e:	e6f6      	b.n	15f0e <_vfprintf_r+0x8ce>
   16120:	6073      	str	r3, [r6, #4]
   16122:	687b      	ldr	r3, [r7, #4]
   16124:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16126:	3301      	adds	r3, #1
   16128:	3401      	adds	r4, #1
   1612a:	6032      	str	r2, [r6, #0]
   1612c:	60bc      	str	r4, [r7, #8]
   1612e:	4698      	mov	r8, r3
   16130:	607b      	str	r3, [r7, #4]
   16132:	2b07      	cmp	r3, #7
   16134:	dc00      	bgt.n	16138 <_vfprintf_r+0xaf8>
   16136:	e71e      	b.n	15f76 <_vfprintf_r+0x936>
   16138:	003a      	movs	r2, r7
   1613a:	4659      	mov	r1, fp
   1613c:	9806      	ldr	r0, [sp, #24]
   1613e:	f003 fd71 	bl	19c24 <__sprint_r>
   16142:	2800      	cmp	r0, #0
   16144:	d10c      	bne.n	16160 <_vfprintf_r+0xb20>
   16146:	687b      	ldr	r3, [r7, #4]
   16148:	68bc      	ldr	r4, [r7, #8]
   1614a:	4698      	mov	r8, r3
   1614c:	ae32      	add	r6, sp, #200	; 0xc8
   1614e:	e713      	b.n	15f78 <_vfprintf_r+0x938>
   16150:	003a      	movs	r2, r7
   16152:	4659      	mov	r1, fp
   16154:	9806      	ldr	r0, [sp, #24]
   16156:	f003 fd65 	bl	19c24 <__sprint_r>
   1615a:	2800      	cmp	r0, #0
   1615c:	d100      	bne.n	16160 <_vfprintf_r+0xb20>
   1615e:	e6cd      	b.n	15efc <_vfprintf_r+0x8bc>
   16160:	46d9      	mov	r9, fp
   16162:	e785      	b.n	16070 <_vfprintf_r+0xa30>
   16164:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16166:	2b01      	cmp	r3, #1
   16168:	d100      	bne.n	1616c <_vfprintf_r+0xb2c>
   1616a:	e148      	b.n	163fe <_vfprintf_r+0xdbe>
   1616c:	2b02      	cmp	r3, #2
   1616e:	d123      	bne.n	161b8 <_vfprintf_r+0xb78>
   16170:	9409      	str	r4, [sp, #36]	; 0x24
   16172:	2300      	movs	r3, #0
   16174:	2400      	movs	r4, #0
   16176:	930c      	str	r3, [sp, #48]	; 0x30
   16178:	940d      	str	r4, [sp, #52]	; 0x34
   1617a:	e4a1      	b.n	15ac0 <_vfprintf_r+0x480>
   1617c:	003a      	movs	r2, r7
   1617e:	4659      	mov	r1, fp
   16180:	9806      	ldr	r0, [sp, #24]
   16182:	f003 fd4f 	bl	19c24 <__sprint_r>
   16186:	2800      	cmp	r0, #0
   16188:	d1ea      	bne.n	16160 <_vfprintf_r+0xb20>
   1618a:	68bc      	ldr	r4, [r7, #8]
   1618c:	ae32      	add	r6, sp, #200	; 0xc8
   1618e:	e648      	b.n	15e22 <_vfprintf_r+0x7e2>
   16190:	003a      	movs	r2, r7
   16192:	4659      	mov	r1, fp
   16194:	9806      	ldr	r0, [sp, #24]
   16196:	f003 fd45 	bl	19c24 <__sprint_r>
   1619a:	2800      	cmp	r0, #0
   1619c:	d1e0      	bne.n	16160 <_vfprintf_r+0xb20>
   1619e:	68bc      	ldr	r4, [r7, #8]
   161a0:	ae32      	add	r6, sp, #200	; 0xc8
   161a2:	e5f2      	b.n	15d8a <_vfprintf_r+0x74a>
   161a4:	003a      	movs	r2, r7
   161a6:	4659      	mov	r1, fp
   161a8:	9806      	ldr	r0, [sp, #24]
   161aa:	f003 fd3b 	bl	19c24 <__sprint_r>
   161ae:	2800      	cmp	r0, #0
   161b0:	d1d6      	bne.n	16160 <_vfprintf_r+0xb20>
   161b2:	68bc      	ldr	r4, [r7, #8]
   161b4:	ae32      	add	r6, sp, #200	; 0xc8
   161b6:	e5f8      	b.n	15daa <_vfprintf_r+0x76a>
   161b8:	9409      	str	r4, [sp, #36]	; 0x24
   161ba:	2300      	movs	r3, #0
   161bc:	2400      	movs	r4, #0
   161be:	930c      	str	r3, [sp, #48]	; 0x30
   161c0:	940d      	str	r4, [sp, #52]	; 0x34
   161c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   161c4:	990d      	ldr	r1, [sp, #52]	; 0x34
   161c6:	4653      	mov	r3, sl
   161c8:	aa32      	add	r2, sp, #200	; 0xc8
   161ca:	4691      	mov	r9, r2
   161cc:	9308      	str	r3, [sp, #32]
   161ce:	46b2      	mov	sl, r6
   161d0:	e007      	b.n	161e2 <_vfprintf_r+0xba2>
   161d2:	46c0      	nop			; (mov r8, r8)
   161d4:	0001b2f8 	.word	0x0001b2f8
   161d8:	0001b170 	.word	0x0001b170
   161dc:	0001b308 	.word	0x0001b308
   161e0:	46a1      	mov	r9, r4
   161e2:	074a      	lsls	r2, r1, #29
   161e4:	4694      	mov	ip, r2
   161e6:	464b      	mov	r3, r9
   161e8:	4665      	mov	r5, ip
   161ea:	1e5c      	subs	r4, r3, #1
   161ec:	08c6      	lsrs	r6, r0, #3
   161ee:	2307      	movs	r3, #7
   161f0:	08ca      	lsrs	r2, r1, #3
   161f2:	4335      	orrs	r5, r6
   161f4:	0011      	movs	r1, r2
   161f6:	002a      	movs	r2, r5
   161f8:	4003      	ands	r3, r0
   161fa:	3330      	adds	r3, #48	; 0x30
   161fc:	7023      	strb	r3, [r4, #0]
   161fe:	0028      	movs	r0, r5
   16200:	430a      	orrs	r2, r1
   16202:	d1ed      	bne.n	161e0 <_vfprintf_r+0xba0>
   16204:	900c      	str	r0, [sp, #48]	; 0x30
   16206:	910d      	str	r1, [sp, #52]	; 0x34
   16208:	9908      	ldr	r1, [sp, #32]
   1620a:	4656      	mov	r6, sl
   1620c:	468a      	mov	sl, r1
   1620e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16210:	464a      	mov	r2, r9
   16212:	9411      	str	r4, [sp, #68]	; 0x44
   16214:	07c9      	lsls	r1, r1, #31
   16216:	d500      	bpl.n	1621a <_vfprintf_r+0xbda>
   16218:	e0e0      	b.n	163dc <_vfprintf_r+0xd9c>
   1621a:	ab32      	add	r3, sp, #200	; 0xc8
   1621c:	1b1b      	subs	r3, r3, r4
   1621e:	930e      	str	r3, [sp, #56]	; 0x38
   16220:	f7ff fb7b 	bl	1591a <_vfprintf_r+0x2da>
   16224:	9c07      	ldr	r4, [sp, #28]
   16226:	f7ff fa7d 	bl	15724 <_vfprintf_r+0xe4>
   1622a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1622c:	2800      	cmp	r0, #0
   1622e:	dc00      	bgt.n	16232 <_vfprintf_r+0xbf2>
   16230:	e2b9      	b.n	167a6 <_vfprintf_r+0x1166>
   16232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16234:	9914      	ldr	r1, [sp, #80]	; 0x50
   16236:	0013      	movs	r3, r2
   16238:	4690      	mov	r8, r2
   1623a:	428b      	cmp	r3, r1
   1623c:	dd00      	ble.n	16240 <_vfprintf_r+0xc00>
   1623e:	4688      	mov	r8, r1
   16240:	4643      	mov	r3, r8
   16242:	2b00      	cmp	r3, #0
   16244:	dd0c      	ble.n	16260 <_vfprintf_r+0xc20>
   16246:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16248:	4444      	add	r4, r8
   1624a:	6033      	str	r3, [r6, #0]
   1624c:	4643      	mov	r3, r8
   1624e:	6073      	str	r3, [r6, #4]
   16250:	687b      	ldr	r3, [r7, #4]
   16252:	60bc      	str	r4, [r7, #8]
   16254:	3301      	adds	r3, #1
   16256:	607b      	str	r3, [r7, #4]
   16258:	2b07      	cmp	r3, #7
   1625a:	dd00      	ble.n	1625e <_vfprintf_r+0xc1e>
   1625c:	e389      	b.n	16972 <_vfprintf_r+0x1332>
   1625e:	3608      	adds	r6, #8
   16260:	4643      	mov	r3, r8
   16262:	43db      	mvns	r3, r3
   16264:	4642      	mov	r2, r8
   16266:	17db      	asrs	r3, r3, #31
   16268:	4013      	ands	r3, r2
   1626a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1626c:	1ad3      	subs	r3, r2, r3
   1626e:	4698      	mov	r8, r3
   16270:	2b00      	cmp	r3, #0
   16272:	dc00      	bgt.n	16276 <_vfprintf_r+0xc36>
   16274:	e0eb      	b.n	1644e <_vfprintf_r+0xe0e>
   16276:	2b10      	cmp	r3, #16
   16278:	dc01      	bgt.n	1627e <_vfprintf_r+0xc3e>
   1627a:	f000 fcd9 	bl	16c30 <_vfprintf_r+0x15f0>
   1627e:	4adc      	ldr	r2, [pc, #880]	; (165f0 <_vfprintf_r+0xfb0>)
   16280:	687b      	ldr	r3, [r7, #4]
   16282:	4691      	mov	r9, r2
   16284:	2210      	movs	r2, #16
   16286:	464d      	mov	r5, r9
   16288:	4692      	mov	sl, r2
   1628a:	0022      	movs	r2, r4
   1628c:	4644      	mov	r4, r8
   1628e:	46d8      	mov	r8, fp
   16290:	e004      	b.n	1629c <_vfprintf_r+0xc5c>
   16292:	3608      	adds	r6, #8
   16294:	3c10      	subs	r4, #16
   16296:	2c10      	cmp	r4, #16
   16298:	dc00      	bgt.n	1629c <_vfprintf_r+0xc5c>
   1629a:	e0bf      	b.n	1641c <_vfprintf_r+0xddc>
   1629c:	4651      	mov	r1, sl
   1629e:	3210      	adds	r2, #16
   162a0:	3301      	adds	r3, #1
   162a2:	6035      	str	r5, [r6, #0]
   162a4:	6071      	str	r1, [r6, #4]
   162a6:	60ba      	str	r2, [r7, #8]
   162a8:	607b      	str	r3, [r7, #4]
   162aa:	2b07      	cmp	r3, #7
   162ac:	ddf1      	ble.n	16292 <_vfprintf_r+0xc52>
   162ae:	003a      	movs	r2, r7
   162b0:	4641      	mov	r1, r8
   162b2:	9806      	ldr	r0, [sp, #24]
   162b4:	f003 fcb6 	bl	19c24 <__sprint_r>
   162b8:	2800      	cmp	r0, #0
   162ba:	d000      	beq.n	162be <_vfprintf_r+0xc7e>
   162bc:	e3b6      	b.n	16a2c <_vfprintf_r+0x13ec>
   162be:	68ba      	ldr	r2, [r7, #8]
   162c0:	687b      	ldr	r3, [r7, #4]
   162c2:	ae32      	add	r6, sp, #200	; 0xc8
   162c4:	e7e6      	b.n	16294 <_vfprintf_r+0xc54>
   162c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   162c8:	2b00      	cmp	r3, #0
   162ca:	d100      	bne.n	162ce <_vfprintf_r+0xc8e>
   162cc:	e092      	b.n	163f4 <_vfprintf_r+0xdb4>
   162ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   162d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   162d2:	ab32      	add	r3, sp, #200	; 0xc8
   162d4:	46b1      	mov	r9, r6
   162d6:	001e      	movs	r6, r3
   162d8:	0020      	movs	r0, r4
   162da:	0029      	movs	r1, r5
   162dc:	220a      	movs	r2, #10
   162de:	2300      	movs	r3, #0
   162e0:	f7fa fd1c 	bl	10d1c <__aeabi_uldivmod>
   162e4:	3e01      	subs	r6, #1
   162e6:	3230      	adds	r2, #48	; 0x30
   162e8:	7032      	strb	r2, [r6, #0]
   162ea:	2300      	movs	r3, #0
   162ec:	0020      	movs	r0, r4
   162ee:	0029      	movs	r1, r5
   162f0:	220a      	movs	r2, #10
   162f2:	f7fa fd13 	bl	10d1c <__aeabi_uldivmod>
   162f6:	0003      	movs	r3, r0
   162f8:	0004      	movs	r4, r0
   162fa:	000d      	movs	r5, r1
   162fc:	430b      	orrs	r3, r1
   162fe:	d1eb      	bne.n	162d8 <_vfprintf_r+0xc98>
   16300:	0032      	movs	r2, r6
   16302:	ab32      	add	r3, sp, #200	; 0xc8
   16304:	1a9b      	subs	r3, r3, r2
   16306:	9611      	str	r6, [sp, #68]	; 0x44
   16308:	940c      	str	r4, [sp, #48]	; 0x30
   1630a:	950d      	str	r5, [sp, #52]	; 0x34
   1630c:	464e      	mov	r6, r9
   1630e:	930e      	str	r3, [sp, #56]	; 0x38
   16310:	f7ff fb03 	bl	1591a <_vfprintf_r+0x2da>
   16314:	2300      	movs	r3, #0
   16316:	930e      	str	r3, [sp, #56]	; 0x38
   16318:	ab32      	add	r3, sp, #200	; 0xc8
   1631a:	9311      	str	r3, [sp, #68]	; 0x44
   1631c:	f7ff fafd 	bl	1591a <_vfprintf_r+0x2da>
   16320:	003a      	movs	r2, r7
   16322:	4659      	mov	r1, fp
   16324:	9806      	ldr	r0, [sp, #24]
   16326:	f003 fc7d 	bl	19c24 <__sprint_r>
   1632a:	2800      	cmp	r0, #0
   1632c:	d000      	beq.n	16330 <_vfprintf_r+0xcf0>
   1632e:	e717      	b.n	16160 <_vfprintf_r+0xb20>
   16330:	ab16      	add	r3, sp, #88	; 0x58
   16332:	7fdb      	ldrb	r3, [r3, #31]
   16334:	68bc      	ldr	r4, [r7, #8]
   16336:	4698      	mov	r8, r3
   16338:	ae32      	add	r6, sp, #200	; 0xc8
   1633a:	e513      	b.n	15d64 <_vfprintf_r+0x724>
   1633c:	46b1      	mov	r9, r6
   1633e:	e697      	b.n	16070 <_vfprintf_r+0xa30>
   16340:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16342:	1e5d      	subs	r5, r3, #1
   16344:	2d00      	cmp	r5, #0
   16346:	dc00      	bgt.n	1634a <_vfprintf_r+0xd0a>
   16348:	e616      	b.n	15f78 <_vfprintf_r+0x938>
   1634a:	4ba9      	ldr	r3, [pc, #676]	; (165f0 <_vfprintf_r+0xfb0>)
   1634c:	4699      	mov	r9, r3
   1634e:	2d10      	cmp	r5, #16
   16350:	dc00      	bgt.n	16354 <_vfprintf_r+0xd14>
   16352:	e10a      	b.n	1656a <_vfprintf_r+0xf2a>
   16354:	2310      	movs	r3, #16
   16356:	0022      	movs	r2, r4
   16358:	469a      	mov	sl, r3
   1635a:	465c      	mov	r4, fp
   1635c:	4643      	mov	r3, r8
   1635e:	e004      	b.n	1636a <_vfprintf_r+0xd2a>
   16360:	3608      	adds	r6, #8
   16362:	3d10      	subs	r5, #16
   16364:	2d10      	cmp	r5, #16
   16366:	dc00      	bgt.n	1636a <_vfprintf_r+0xd2a>
   16368:	e0fc      	b.n	16564 <_vfprintf_r+0xf24>
   1636a:	4649      	mov	r1, r9
   1636c:	6031      	str	r1, [r6, #0]
   1636e:	4651      	mov	r1, sl
   16370:	3210      	adds	r2, #16
   16372:	3301      	adds	r3, #1
   16374:	6071      	str	r1, [r6, #4]
   16376:	60ba      	str	r2, [r7, #8]
   16378:	607b      	str	r3, [r7, #4]
   1637a:	2b07      	cmp	r3, #7
   1637c:	ddf0      	ble.n	16360 <_vfprintf_r+0xd20>
   1637e:	003a      	movs	r2, r7
   16380:	0021      	movs	r1, r4
   16382:	9806      	ldr	r0, [sp, #24]
   16384:	f003 fc4e 	bl	19c24 <__sprint_r>
   16388:	2800      	cmp	r0, #0
   1638a:	d000      	beq.n	1638e <_vfprintf_r+0xd4e>
   1638c:	e6c1      	b.n	16112 <_vfprintf_r+0xad2>
   1638e:	68ba      	ldr	r2, [r7, #8]
   16390:	687b      	ldr	r3, [r7, #4]
   16392:	ae32      	add	r6, sp, #200	; 0xc8
   16394:	e7e5      	b.n	16362 <_vfprintf_r+0xd22>
   16396:	990c      	ldr	r1, [sp, #48]	; 0x30
   16398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1639a:	0008      	movs	r0, r1
   1639c:	4310      	orrs	r0, r2
   1639e:	2302      	movs	r3, #2
   163a0:	0002      	movs	r2, r0
   163a2:	f7ff fa93 	bl	158cc <_vfprintf_r+0x28c>
   163a6:	46a3      	mov	fp, r4
   163a8:	0014      	movs	r4, r2
   163aa:	464a      	mov	r2, r9
   163ac:	1964      	adds	r4, r4, r5
   163ae:	3301      	adds	r3, #1
   163b0:	6032      	str	r2, [r6, #0]
   163b2:	6075      	str	r5, [r6, #4]
   163b4:	60bc      	str	r4, [r7, #8]
   163b6:	607b      	str	r3, [r7, #4]
   163b8:	2b07      	cmp	r3, #7
   163ba:	dc00      	bgt.n	163be <_vfprintf_r+0xd7e>
   163bc:	e542      	b.n	15e44 <_vfprintf_r+0x804>
   163be:	e5e8      	b.n	15f92 <_vfprintf_r+0x952>
   163c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   163c2:	681a      	ldr	r2, [r3, #0]
   163c4:	f7ff fa68 	bl	15898 <_vfprintf_r+0x258>
   163c8:	6813      	ldr	r3, [r2, #0]
   163ca:	9308      	str	r3, [sp, #32]
   163cc:	f7ff fb57 	bl	15a7e <_vfprintf_r+0x43e>
   163d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   163d2:	681a      	ldr	r2, [r3, #0]
   163d4:	e412      	b.n	15bfc <_vfprintf_r+0x5bc>
   163d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   163d8:	681a      	ldr	r2, [r3, #0]
   163da:	e426      	b.n	15c2a <_vfprintf_r+0x5ea>
   163dc:	2b30      	cmp	r3, #48	; 0x30
   163de:	d100      	bne.n	163e2 <_vfprintf_r+0xda2>
   163e0:	e23c      	b.n	1685c <_vfprintf_r+0x121c>
   163e2:	2330      	movs	r3, #48	; 0x30
   163e4:	3a02      	subs	r2, #2
   163e6:	7013      	strb	r3, [r2, #0]
   163e8:	ab32      	add	r3, sp, #200	; 0xc8
   163ea:	1a9b      	subs	r3, r3, r2
   163ec:	930e      	str	r3, [sp, #56]	; 0x38
   163ee:	9211      	str	r2, [sp, #68]	; 0x44
   163f0:	f7ff fa93 	bl	1591a <_vfprintf_r+0x2da>
   163f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   163f6:	2b09      	cmp	r3, #9
   163f8:	d900      	bls.n	163fc <_vfprintf_r+0xdbc>
   163fa:	e768      	b.n	162ce <_vfprintf_r+0xc8e>
   163fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   163fe:	2227      	movs	r2, #39	; 0x27
   16400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16402:	a928      	add	r1, sp, #160	; 0xa0
   16404:	3330      	adds	r3, #48	; 0x30
   16406:	548b      	strb	r3, [r1, r2]
   16408:	2301      	movs	r3, #1
   1640a:	aa16      	add	r2, sp, #88	; 0x58
   1640c:	4694      	mov	ip, r2
   1640e:	930e      	str	r3, [sp, #56]	; 0x38
   16410:	336e      	adds	r3, #110	; 0x6e
   16412:	4463      	add	r3, ip
   16414:	9409      	str	r4, [sp, #36]	; 0x24
   16416:	9311      	str	r3, [sp, #68]	; 0x44
   16418:	f7ff fa7f 	bl	1591a <_vfprintf_r+0x2da>
   1641c:	46c3      	mov	fp, r8
   1641e:	46a9      	mov	r9, r5
   16420:	46a0      	mov	r8, r4
   16422:	0014      	movs	r4, r2
   16424:	464a      	mov	r2, r9
   16426:	6032      	str	r2, [r6, #0]
   16428:	4642      	mov	r2, r8
   1642a:	4444      	add	r4, r8
   1642c:	3301      	adds	r3, #1
   1642e:	6072      	str	r2, [r6, #4]
   16430:	60bc      	str	r4, [r7, #8]
   16432:	607b      	str	r3, [r7, #4]
   16434:	2b07      	cmp	r3, #7
   16436:	dc00      	bgt.n	1643a <_vfprintf_r+0xdfa>
   16438:	e18d      	b.n	16756 <_vfprintf_r+0x1116>
   1643a:	003a      	movs	r2, r7
   1643c:	4659      	mov	r1, fp
   1643e:	9806      	ldr	r0, [sp, #24]
   16440:	f003 fbf0 	bl	19c24 <__sprint_r>
   16444:	2800      	cmp	r0, #0
   16446:	d000      	beq.n	1644a <_vfprintf_r+0xe0a>
   16448:	e68a      	b.n	16160 <_vfprintf_r+0xb20>
   1644a:	68bc      	ldr	r4, [r7, #8]
   1644c:	ae32      	add	r6, sp, #200	; 0xc8
   1644e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16450:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16452:	4293      	cmp	r3, r2
   16454:	db00      	blt.n	16458 <_vfprintf_r+0xe18>
   16456:	e179      	b.n	1674c <_vfprintf_r+0x110c>
   16458:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1645a:	6032      	str	r2, [r6, #0]
   1645c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1645e:	4694      	mov	ip, r2
   16460:	6072      	str	r2, [r6, #4]
   16462:	687a      	ldr	r2, [r7, #4]
   16464:	4464      	add	r4, ip
   16466:	3201      	adds	r2, #1
   16468:	60bc      	str	r4, [r7, #8]
   1646a:	607a      	str	r2, [r7, #4]
   1646c:	2a07      	cmp	r2, #7
   1646e:	dd00      	ble.n	16472 <_vfprintf_r+0xe32>
   16470:	e176      	b.n	16760 <_vfprintf_r+0x1120>
   16472:	3608      	adds	r6, #8
   16474:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16476:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16478:	1ad3      	subs	r3, r2, r3
   1647a:	1a52      	subs	r2, r2, r1
   1647c:	4690      	mov	r8, r2
   1647e:	429a      	cmp	r2, r3
   16480:	dd00      	ble.n	16484 <_vfprintf_r+0xe44>
   16482:	4698      	mov	r8, r3
   16484:	4642      	mov	r2, r8
   16486:	2a00      	cmp	r2, #0
   16488:	dd0f      	ble.n	164aa <_vfprintf_r+0xe6a>
   1648a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1648c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1648e:	468c      	mov	ip, r1
   16490:	4462      	add	r2, ip
   16492:	6032      	str	r2, [r6, #0]
   16494:	4642      	mov	r2, r8
   16496:	6072      	str	r2, [r6, #4]
   16498:	687a      	ldr	r2, [r7, #4]
   1649a:	4444      	add	r4, r8
   1649c:	3201      	adds	r2, #1
   1649e:	60bc      	str	r4, [r7, #8]
   164a0:	607a      	str	r2, [r7, #4]
   164a2:	2a07      	cmp	r2, #7
   164a4:	dd00      	ble.n	164a8 <_vfprintf_r+0xe68>
   164a6:	e289      	b.n	169bc <_vfprintf_r+0x137c>
   164a8:	3608      	adds	r6, #8
   164aa:	4642      	mov	r2, r8
   164ac:	43d5      	mvns	r5, r2
   164ae:	17ed      	asrs	r5, r5, #31
   164b0:	4015      	ands	r5, r2
   164b2:	1b5d      	subs	r5, r3, r5
   164b4:	2d00      	cmp	r5, #0
   164b6:	dc00      	bgt.n	164ba <_vfprintf_r+0xe7a>
   164b8:	e4c5      	b.n	15e46 <_vfprintf_r+0x806>
   164ba:	4a4d      	ldr	r2, [pc, #308]	; (165f0 <_vfprintf_r+0xfb0>)
   164bc:	687b      	ldr	r3, [r7, #4]
   164be:	4691      	mov	r9, r2
   164c0:	2d10      	cmp	r5, #16
   164c2:	dc00      	bgt.n	164c6 <_vfprintf_r+0xe86>
   164c4:	e771      	b.n	163aa <_vfprintf_r+0xd6a>
   164c6:	2210      	movs	r2, #16
   164c8:	4690      	mov	r8, r2
   164ca:	0022      	movs	r2, r4
   164cc:	465c      	mov	r4, fp
   164ce:	e004      	b.n	164da <_vfprintf_r+0xe9a>
   164d0:	3608      	adds	r6, #8
   164d2:	3d10      	subs	r5, #16
   164d4:	2d10      	cmp	r5, #16
   164d6:	dc00      	bgt.n	164da <_vfprintf_r+0xe9a>
   164d8:	e765      	b.n	163a6 <_vfprintf_r+0xd66>
   164da:	4649      	mov	r1, r9
   164dc:	6031      	str	r1, [r6, #0]
   164de:	4641      	mov	r1, r8
   164e0:	3210      	adds	r2, #16
   164e2:	3301      	adds	r3, #1
   164e4:	6071      	str	r1, [r6, #4]
   164e6:	60ba      	str	r2, [r7, #8]
   164e8:	607b      	str	r3, [r7, #4]
   164ea:	2b07      	cmp	r3, #7
   164ec:	ddf0      	ble.n	164d0 <_vfprintf_r+0xe90>
   164ee:	003a      	movs	r2, r7
   164f0:	0021      	movs	r1, r4
   164f2:	9806      	ldr	r0, [sp, #24]
   164f4:	f003 fb96 	bl	19c24 <__sprint_r>
   164f8:	2800      	cmp	r0, #0
   164fa:	d000      	beq.n	164fe <_vfprintf_r+0xebe>
   164fc:	e609      	b.n	16112 <_vfprintf_r+0xad2>
   164fe:	68ba      	ldr	r2, [r7, #8]
   16500:	687b      	ldr	r3, [r7, #4]
   16502:	ae32      	add	r6, sp, #200	; 0xc8
   16504:	e7e5      	b.n	164d2 <_vfprintf_r+0xe92>
   16506:	003a      	movs	r2, r7
   16508:	4659      	mov	r1, fp
   1650a:	9806      	ldr	r0, [sp, #24]
   1650c:	f003 fb8a 	bl	19c24 <__sprint_r>
   16510:	2800      	cmp	r0, #0
   16512:	d000      	beq.n	16516 <_vfprintf_r+0xed6>
   16514:	e624      	b.n	16160 <_vfprintf_r+0xb20>
   16516:	68bc      	ldr	r4, [r7, #8]
   16518:	687b      	ldr	r3, [r7, #4]
   1651a:	ae32      	add	r6, sp, #200	; 0xc8
   1651c:	e504      	b.n	15f28 <_vfprintf_r+0x8e8>
   1651e:	2307      	movs	r3, #7
   16520:	3207      	adds	r2, #7
   16522:	439a      	bics	r2, r3
   16524:	3301      	adds	r3, #1
   16526:	469c      	mov	ip, r3
   16528:	4494      	add	ip, r2
   1652a:	4663      	mov	r3, ip
   1652c:	930f      	str	r3, [sp, #60]	; 0x3c
   1652e:	6853      	ldr	r3, [r2, #4]
   16530:	6812      	ldr	r2, [r2, #0]
   16532:	930d      	str	r3, [sp, #52]	; 0x34
   16534:	920c      	str	r2, [sp, #48]	; 0x30
   16536:	f7ff faa7 	bl	15a88 <_vfprintf_r+0x448>
   1653a:	2207      	movs	r2, #7
   1653c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1653e:	3307      	adds	r3, #7
   16540:	4393      	bics	r3, r2
   16542:	3201      	adds	r2, #1
   16544:	4694      	mov	ip, r2
   16546:	449c      	add	ip, r3
   16548:	4662      	mov	r2, ip
   1654a:	920f      	str	r2, [sp, #60]	; 0x3c
   1654c:	681a      	ldr	r2, [r3, #0]
   1654e:	685b      	ldr	r3, [r3, #4]
   16550:	0011      	movs	r1, r2
   16552:	001a      	movs	r2, r3
   16554:	0008      	movs	r0, r1
   16556:	4310      	orrs	r0, r2
   16558:	910c      	str	r1, [sp, #48]	; 0x30
   1655a:	920d      	str	r2, [sp, #52]	; 0x34
   1655c:	2300      	movs	r3, #0
   1655e:	0002      	movs	r2, r0
   16560:	f7ff f9b4 	bl	158cc <_vfprintf_r+0x28c>
   16564:	46a3      	mov	fp, r4
   16566:	4698      	mov	r8, r3
   16568:	0014      	movs	r4, r2
   1656a:	464b      	mov	r3, r9
   1656c:	6075      	str	r5, [r6, #4]
   1656e:	6033      	str	r3, [r6, #0]
   16570:	1964      	adds	r4, r4, r5
   16572:	e4f7      	b.n	15f64 <_vfprintf_r+0x924>
   16574:	003a      	movs	r2, r7
   16576:	4659      	mov	r1, fp
   16578:	9806      	ldr	r0, [sp, #24]
   1657a:	f003 fb53 	bl	19c24 <__sprint_r>
   1657e:	2800      	cmp	r0, #0
   16580:	d000      	beq.n	16584 <_vfprintf_r+0xf44>
   16582:	e5ed      	b.n	16160 <_vfprintf_r+0xb20>
   16584:	687b      	ldr	r3, [r7, #4]
   16586:	68bc      	ldr	r4, [r7, #8]
   16588:	4698      	mov	r8, r3
   1658a:	ae32      	add	r6, sp, #200	; 0xc8
   1658c:	e4da      	b.n	15f44 <_vfprintf_r+0x904>
   1658e:	2207      	movs	r2, #7
   16590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16592:	3307      	adds	r3, #7
   16594:	4393      	bics	r3, r2
   16596:	3201      	adds	r2, #1
   16598:	4694      	mov	ip, r2
   1659a:	449c      	add	ip, r3
   1659c:	4662      	mov	r2, ip
   1659e:	920f      	str	r2, [sp, #60]	; 0x3c
   165a0:	681a      	ldr	r2, [r3, #0]
   165a2:	685b      	ldr	r3, [r3, #4]
   165a4:	0011      	movs	r1, r2
   165a6:	001a      	movs	r2, r3
   165a8:	0008      	movs	r0, r1
   165aa:	4310      	orrs	r0, r2
   165ac:	910c      	str	r1, [sp, #48]	; 0x30
   165ae:	920d      	str	r2, [sp, #52]	; 0x34
   165b0:	2301      	movs	r3, #1
   165b2:	0002      	movs	r2, r0
   165b4:	f7ff f98a 	bl	158cc <_vfprintf_r+0x28c>
   165b8:	2207      	movs	r2, #7
   165ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   165bc:	3307      	adds	r3, #7
   165be:	4393      	bics	r3, r2
   165c0:	3201      	adds	r2, #1
   165c2:	4694      	mov	ip, r2
   165c4:	449c      	add	ip, r3
   165c6:	4662      	mov	r2, ip
   165c8:	920f      	str	r2, [sp, #60]	; 0x3c
   165ca:	681a      	ldr	r2, [r3, #0]
   165cc:	685b      	ldr	r3, [r3, #4]
   165ce:	920c      	str	r2, [sp, #48]	; 0x30
   165d0:	930d      	str	r3, [sp, #52]	; 0x34
   165d2:	f7ff f966 	bl	158a2 <_vfprintf_r+0x262>
   165d6:	003a      	movs	r2, r7
   165d8:	4659      	mov	r1, fp
   165da:	9806      	ldr	r0, [sp, #24]
   165dc:	f003 fb22 	bl	19c24 <__sprint_r>
   165e0:	2800      	cmp	r0, #0
   165e2:	d000      	beq.n	165e6 <_vfprintf_r+0xfa6>
   165e4:	e5bc      	b.n	16160 <_vfprintf_r+0xb20>
   165e6:	68bc      	ldr	r4, [r7, #8]
   165e8:	ae32      	add	r6, sp, #200	; 0xc8
   165ea:	f7ff fbe2 	bl	15db2 <_vfprintf_r+0x772>
   165ee:	46c0      	nop			; (mov r8, r8)
   165f0:	0001b308 	.word	0x0001b308
   165f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   165f6:	990d      	ldr	r1, [sp, #52]	; 0x34
   165f8:	2300      	movs	r3, #0
   165fa:	4242      	negs	r2, r0
   165fc:	418b      	sbcs	r3, r1
   165fe:	0011      	movs	r1, r2
   16600:	001a      	movs	r2, r3
   16602:	232d      	movs	r3, #45	; 0x2d
   16604:	a816      	add	r0, sp, #88	; 0x58
   16606:	77c3      	strb	r3, [r0, #31]
   16608:	0008      	movs	r0, r1
   1660a:	4310      	orrs	r0, r2
   1660c:	910c      	str	r1, [sp, #48]	; 0x30
   1660e:	920d      	str	r2, [sp, #52]	; 0x34
   16610:	4698      	mov	r8, r3
   16612:	0002      	movs	r2, r0
   16614:	3b2c      	subs	r3, #44	; 0x2c
   16616:	f7ff f95d 	bl	158d4 <_vfprintf_r+0x294>
   1661a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1661c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1661e:	000a      	movs	r2, r1
   16620:	0008      	movs	r0, r1
   16622:	002b      	movs	r3, r5
   16624:	0029      	movs	r1, r5
   16626:	f003 fdbd 	bl	1a1a4 <__aeabi_dcmpun>
   1662a:	2800      	cmp	r0, #0
   1662c:	d000      	beq.n	16630 <_vfprintf_r+0xff0>
   1662e:	e2c6      	b.n	16bbe <_vfprintf_r+0x157e>
   16630:	4653      	mov	r3, sl
   16632:	3301      	adds	r3, #1
   16634:	d100      	bne.n	16638 <_vfprintf_r+0xff8>
   16636:	e09f      	b.n	16778 <_vfprintf_r+0x1138>
   16638:	2320      	movs	r3, #32
   1663a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1663c:	439a      	bics	r2, r3
   1663e:	920e      	str	r2, [sp, #56]	; 0x38
   16640:	2a47      	cmp	r2, #71	; 0x47
   16642:	d100      	bne.n	16646 <_vfprintf_r+0x1006>
   16644:	e1a1      	b.n	1698a <_vfprintf_r+0x134a>
   16646:	2380      	movs	r3, #128	; 0x80
   16648:	005b      	lsls	r3, r3, #1
   1664a:	4323      	orrs	r3, r4
   1664c:	9309      	str	r3, [sp, #36]	; 0x24
   1664e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16650:	2b00      	cmp	r3, #0
   16652:	da00      	bge.n	16656 <_vfprintf_r+0x1016>
   16654:	e1ed      	b.n	16a32 <_vfprintf_r+0x13f2>
   16656:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16658:	9308      	str	r3, [sp, #32]
   1665a:	2300      	movs	r3, #0
   1665c:	4691      	mov	r9, r2
   1665e:	9310      	str	r3, [sp, #64]	; 0x40
   16660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16662:	2b66      	cmp	r3, #102	; 0x66
   16664:	d100      	bne.n	16668 <_vfprintf_r+0x1028>
   16666:	e1b8      	b.n	169da <_vfprintf_r+0x139a>
   16668:	2b46      	cmp	r3, #70	; 0x46
   1666a:	d100      	bne.n	1666e <_vfprintf_r+0x102e>
   1666c:	e237      	b.n	16ade <_vfprintf_r+0x149e>
   1666e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16670:	9806      	ldr	r0, [sp, #24]
   16672:	3a45      	subs	r2, #69	; 0x45
   16674:	0013      	movs	r3, r2
   16676:	4259      	negs	r1, r3
   16678:	4159      	adcs	r1, r3
   1667a:	ab20      	add	r3, sp, #128	; 0x80
   1667c:	000d      	movs	r5, r1
   1667e:	9303      	str	r3, [sp, #12]
   16680:	ab1f      	add	r3, sp, #124	; 0x7c
   16682:	9302      	str	r3, [sp, #8]
   16684:	2302      	movs	r3, #2
   16686:	aa23      	add	r2, sp, #140	; 0x8c
   16688:	4455      	add	r5, sl
   1668a:	921b      	str	r2, [sp, #108]	; 0x6c
   1668c:	9204      	str	r2, [sp, #16]
   1668e:	9300      	str	r3, [sp, #0]
   16690:	9501      	str	r5, [sp, #4]
   16692:	9b08      	ldr	r3, [sp, #32]
   16694:	464a      	mov	r2, r9
   16696:	f000 fcab 	bl	16ff0 <_dtoa_r>
   1669a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1669c:	9011      	str	r0, [sp, #68]	; 0x44
   1669e:	2b67      	cmp	r3, #103	; 0x67
   166a0:	d000      	beq.n	166a4 <_vfprintf_r+0x1064>
   166a2:	e20b      	b.n	16abc <_vfprintf_r+0x147c>
   166a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   166a6:	4698      	mov	r8, r3
   166a8:	44a8      	add	r8, r5
   166aa:	07e3      	lsls	r3, r4, #31
   166ac:	d400      	bmi.n	166b0 <_vfprintf_r+0x1070>
   166ae:	e277      	b.n	16ba0 <_vfprintf_r+0x1560>
   166b0:	2300      	movs	r3, #0
   166b2:	2200      	movs	r2, #0
   166b4:	4648      	mov	r0, r9
   166b6:	9908      	ldr	r1, [sp, #32]
   166b8:	f7fd f922 	bl	13900 <__aeabi_dcmpeq>
   166bc:	4643      	mov	r3, r8
   166be:	2800      	cmp	r0, #0
   166c0:	d10a      	bne.n	166d8 <_vfprintf_r+0x1098>
   166c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   166c4:	4543      	cmp	r3, r8
   166c6:	d207      	bcs.n	166d8 <_vfprintf_r+0x1098>
   166c8:	2130      	movs	r1, #48	; 0x30
   166ca:	4640      	mov	r0, r8
   166cc:	1c5a      	adds	r2, r3, #1
   166ce:	9223      	str	r2, [sp, #140]	; 0x8c
   166d0:	7019      	strb	r1, [r3, #0]
   166d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   166d4:	4298      	cmp	r0, r3
   166d6:	d8f9      	bhi.n	166cc <_vfprintf_r+0x108c>
   166d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   166da:	1a9b      	subs	r3, r3, r2
   166dc:	9314      	str	r3, [sp, #80]	; 0x50
   166de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   166e0:	2b47      	cmp	r3, #71	; 0x47
   166e2:	d100      	bne.n	166e6 <_vfprintf_r+0x10a6>
   166e4:	e0d0      	b.n	16888 <_vfprintf_r+0x1248>
   166e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166e8:	2b65      	cmp	r3, #101	; 0x65
   166ea:	dc00      	bgt.n	166ee <_vfprintf_r+0x10ae>
   166ec:	e2d5      	b.n	16c9a <_vfprintf_r+0x165a>
   166ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   166f0:	2b66      	cmp	r3, #102	; 0x66
   166f2:	d100      	bne.n	166f6 <_vfprintf_r+0x10b6>
   166f4:	e1c6      	b.n	16a84 <_vfprintf_r+0x1444>
   166f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   166f8:	9313      	str	r3, [sp, #76]	; 0x4c
   166fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   166fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   166fe:	0019      	movs	r1, r3
   16700:	4291      	cmp	r1, r2
   16702:	dd00      	ble.n	16706 <_vfprintf_r+0x10c6>
   16704:	e1a0      	b.n	16a48 <_vfprintf_r+0x1408>
   16706:	07e3      	lsls	r3, r4, #31
   16708:	d500      	bpl.n	1670c <_vfprintf_r+0x10cc>
   1670a:	e242      	b.n	16b92 <_vfprintf_r+0x1552>
   1670c:	43d3      	mvns	r3, r2
   1670e:	17db      	asrs	r3, r3, #31
   16710:	0011      	movs	r1, r2
   16712:	401a      	ands	r2, r3
   16714:	2367      	movs	r3, #103	; 0x67
   16716:	9208      	str	r2, [sp, #32]
   16718:	910e      	str	r1, [sp, #56]	; 0x38
   1671a:	9312      	str	r3, [sp, #72]	; 0x48
   1671c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1671e:	2b00      	cmp	r3, #0
   16720:	d000      	beq.n	16724 <_vfprintf_r+0x10e4>
   16722:	e0a9      	b.n	16878 <_vfprintf_r+0x1238>
   16724:	ab16      	add	r3, sp, #88	; 0x58
   16726:	7fdb      	ldrb	r3, [r3, #31]
   16728:	4698      	mov	r8, r3
   1672a:	2300      	movs	r3, #0
   1672c:	469a      	mov	sl, r3
   1672e:	f7ff f8fc 	bl	1592a <_vfprintf_r+0x2ea>
   16732:	46cb      	mov	fp, r9
   16734:	46a1      	mov	r9, r4
   16736:	0014      	movs	r4, r2
   16738:	e637      	b.n	163aa <_vfprintf_r+0xd6a>
   1673a:	464b      	mov	r3, r9
   1673c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1673e:	f002 f861 	bl	18804 <__retarget_lock_release_recursive>
   16742:	2301      	movs	r3, #1
   16744:	425b      	negs	r3, r3
   16746:	930a      	str	r3, [sp, #40]	; 0x28
   16748:	f7ff f82b 	bl	157a2 <_vfprintf_r+0x162>
   1674c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1674e:	07d2      	lsls	r2, r2, #31
   16750:	d400      	bmi.n	16754 <_vfprintf_r+0x1114>
   16752:	e68f      	b.n	16474 <_vfprintf_r+0xe34>
   16754:	e680      	b.n	16458 <_vfprintf_r+0xe18>
   16756:	3608      	adds	r6, #8
   16758:	e679      	b.n	1644e <_vfprintf_r+0xe0e>
   1675a:	68bc      	ldr	r4, [r7, #8]
   1675c:	f7ff fb73 	bl	15e46 <_vfprintf_r+0x806>
   16760:	003a      	movs	r2, r7
   16762:	4659      	mov	r1, fp
   16764:	9806      	ldr	r0, [sp, #24]
   16766:	f003 fa5d 	bl	19c24 <__sprint_r>
   1676a:	2800      	cmp	r0, #0
   1676c:	d000      	beq.n	16770 <_vfprintf_r+0x1130>
   1676e:	e4f7      	b.n	16160 <_vfprintf_r+0xb20>
   16770:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16772:	68bc      	ldr	r4, [r7, #8]
   16774:	ae32      	add	r6, sp, #200	; 0xc8
   16776:	e67d      	b.n	16474 <_vfprintf_r+0xe34>
   16778:	2320      	movs	r3, #32
   1677a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1677c:	439a      	bics	r2, r3
   1677e:	3b1a      	subs	r3, #26
   16780:	920e      	str	r2, [sp, #56]	; 0x38
   16782:	469a      	mov	sl, r3
   16784:	e75f      	b.n	16646 <_vfprintf_r+0x1006>
   16786:	232d      	movs	r3, #45	; 0x2d
   16788:	aa16      	add	r2, sp, #88	; 0x58
   1678a:	77d3      	strb	r3, [r2, #31]
   1678c:	4698      	mov	r8, r3
   1678e:	f7ff faa8 	bl	15ce2 <_vfprintf_r+0x6a2>
   16792:	003a      	movs	r2, r7
   16794:	4659      	mov	r1, fp
   16796:	9806      	ldr	r0, [sp, #24]
   16798:	f003 fa44 	bl	19c24 <__sprint_r>
   1679c:	2800      	cmp	r0, #0
   1679e:	d000      	beq.n	167a2 <_vfprintf_r+0x1162>
   167a0:	e4de      	b.n	16160 <_vfprintf_r+0xb20>
   167a2:	ae32      	add	r6, sp, #200	; 0xc8
   167a4:	e419      	b.n	15fda <_vfprintf_r+0x99a>
   167a6:	4be3      	ldr	r3, [pc, #908]	; (16b34 <_vfprintf_r+0x14f4>)
   167a8:	3401      	adds	r4, #1
   167aa:	6033      	str	r3, [r6, #0]
   167ac:	2301      	movs	r3, #1
   167ae:	6073      	str	r3, [r6, #4]
   167b0:	687b      	ldr	r3, [r7, #4]
   167b2:	60bc      	str	r4, [r7, #8]
   167b4:	3301      	adds	r3, #1
   167b6:	607b      	str	r3, [r7, #4]
   167b8:	2b07      	cmp	r3, #7
   167ba:	dd00      	ble.n	167be <_vfprintf_r+0x117e>
   167bc:	e155      	b.n	16a6a <_vfprintf_r+0x142a>
   167be:	3608      	adds	r6, #8
   167c0:	2800      	cmp	r0, #0
   167c2:	d107      	bne.n	167d4 <_vfprintf_r+0x1194>
   167c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   167c6:	2b00      	cmp	r3, #0
   167c8:	d104      	bne.n	167d4 <_vfprintf_r+0x1194>
   167ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   167cc:	07db      	lsls	r3, r3, #31
   167ce:	d401      	bmi.n	167d4 <_vfprintf_r+0x1194>
   167d0:	f7ff fb39 	bl	15e46 <_vfprintf_r+0x806>
   167d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   167d6:	6033      	str	r3, [r6, #0]
   167d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   167da:	1919      	adds	r1, r3, r4
   167dc:	6073      	str	r3, [r6, #4]
   167de:	687b      	ldr	r3, [r7, #4]
   167e0:	60b9      	str	r1, [r7, #8]
   167e2:	3301      	adds	r3, #1
   167e4:	607b      	str	r3, [r7, #4]
   167e6:	2b07      	cmp	r3, #7
   167e8:	dd00      	ble.n	167ec <_vfprintf_r+0x11ac>
   167ea:	e1c4      	b.n	16b76 <_vfprintf_r+0x1536>
   167ec:	0032      	movs	r2, r6
   167ee:	3208      	adds	r2, #8
   167f0:	2800      	cmp	r0, #0
   167f2:	da00      	bge.n	167f6 <_vfprintf_r+0x11b6>
   167f4:	e195      	b.n	16b22 <_vfprintf_r+0x14e2>
   167f6:	9811      	ldr	r0, [sp, #68]	; 0x44
   167f8:	3301      	adds	r3, #1
   167fa:	6010      	str	r0, [r2, #0]
   167fc:	9814      	ldr	r0, [sp, #80]	; 0x50
   167fe:	607b      	str	r3, [r7, #4]
   16800:	1844      	adds	r4, r0, r1
   16802:	6050      	str	r0, [r2, #4]
   16804:	60bc      	str	r4, [r7, #8]
   16806:	2b07      	cmp	r3, #7
   16808:	dd01      	ble.n	1680e <_vfprintf_r+0x11ce>
   1680a:	f7ff fbc2 	bl	15f92 <_vfprintf_r+0x952>
   1680e:	3208      	adds	r2, #8
   16810:	0016      	movs	r6, r2
   16812:	f7ff fb18 	bl	15e46 <_vfprintf_r+0x806>
   16816:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1681a:	680b      	ldr	r3, [r1, #0]
   1681c:	601a      	str	r2, [r3, #0]
   1681e:	17d2      	asrs	r2, r2, #31
   16820:	605a      	str	r2, [r3, #4]
   16822:	000b      	movs	r3, r1
   16824:	3304      	adds	r3, #4
   16826:	930f      	str	r3, [sp, #60]	; 0x3c
   16828:	f7fe ff58 	bl	156dc <_vfprintf_r+0x9c>
   1682c:	464b      	mov	r3, r9
   1682e:	9a07      	ldr	r2, [sp, #28]
   16830:	431c      	orrs	r4, r3
   16832:	3201      	adds	r2, #1
   16834:	7813      	ldrb	r3, [r2, #0]
   16836:	9207      	str	r2, [sp, #28]
   16838:	f7fe ff8b 	bl	15752 <_vfprintf_r+0x112>
   1683c:	003a      	movs	r2, r7
   1683e:	4659      	mov	r1, fp
   16840:	9806      	ldr	r0, [sp, #24]
   16842:	f003 f9ef 	bl	19c24 <__sprint_r>
   16846:	2800      	cmp	r0, #0
   16848:	d000      	beq.n	1684c <_vfprintf_r+0x120c>
   1684a:	e489      	b.n	16160 <_vfprintf_r+0xb20>
   1684c:	68bc      	ldr	r4, [r7, #8]
   1684e:	ae32      	add	r6, sp, #200	; 0xc8
   16850:	f7ff fbdc 	bl	1600c <_vfprintf_r+0x9cc>
   16854:	4bb8      	ldr	r3, [pc, #736]	; (16b38 <_vfprintf_r+0x14f8>)
   16856:	9311      	str	r3, [sp, #68]	; 0x44
   16858:	f7ff fa4a 	bl	15cf0 <_vfprintf_r+0x6b0>
   1685c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1685e:	ab32      	add	r3, sp, #200	; 0xc8
   16860:	1a9b      	subs	r3, r3, r2
   16862:	930e      	str	r3, [sp, #56]	; 0x38
   16864:	f7ff f859 	bl	1591a <_vfprintf_r+0x2da>
   16868:	9811      	ldr	r0, [sp, #68]	; 0x44
   1686a:	f7fd fbb3 	bl	13fd4 <strlen>
   1686e:	0002      	movs	r2, r0
   16870:	900e      	str	r0, [sp, #56]	; 0x38
   16872:	0003      	movs	r3, r0
   16874:	f7ff f9a1 	bl	15bba <_vfprintf_r+0x57a>
   16878:	232d      	movs	r3, #45	; 0x2d
   1687a:	aa16      	add	r2, sp, #88	; 0x58
   1687c:	77d3      	strb	r3, [r2, #31]
   1687e:	4698      	mov	r8, r3
   16880:	2300      	movs	r3, #0
   16882:	469a      	mov	sl, r3
   16884:	f7ff f854 	bl	15930 <_vfprintf_r+0x2f0>
   16888:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1688a:	9313      	str	r3, [sp, #76]	; 0x4c
   1688c:	1cda      	adds	r2, r3, #3
   1688e:	db02      	blt.n	16896 <_vfprintf_r+0x1256>
   16890:	459a      	cmp	sl, r3
   16892:	db00      	blt.n	16896 <_vfprintf_r+0x1256>
   16894:	e731      	b.n	166fa <_vfprintf_r+0x10ba>
   16896:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16898:	3b02      	subs	r3, #2
   1689a:	9312      	str	r3, [sp, #72]	; 0x48
   1689c:	222c      	movs	r2, #44	; 0x2c
   1689e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   168a0:	2148      	movs	r1, #72	; 0x48
   168a2:	1e5d      	subs	r5, r3, #1
   168a4:	ab16      	add	r3, sp, #88	; 0x58
   168a6:	189b      	adds	r3, r3, r2
   168a8:	466a      	mov	r2, sp
   168aa:	1852      	adds	r2, r2, r1
   168ac:	7812      	ldrb	r2, [r2, #0]
   168ae:	951f      	str	r5, [sp, #124]	; 0x7c
   168b0:	701a      	strb	r2, [r3, #0]
   168b2:	2d00      	cmp	r5, #0
   168b4:	da00      	bge.n	168b8 <_vfprintf_r+0x1278>
   168b6:	e1cb      	b.n	16c50 <_vfprintf_r+0x1610>
   168b8:	212d      	movs	r1, #45	; 0x2d
   168ba:	232b      	movs	r3, #43	; 0x2b
   168bc:	aa16      	add	r2, sp, #88	; 0x58
   168be:	1852      	adds	r2, r2, r1
   168c0:	7013      	strb	r3, [r2, #0]
   168c2:	2d09      	cmp	r5, #9
   168c4:	dc00      	bgt.n	168c8 <_vfprintf_r+0x1288>
   168c6:	e16d      	b.n	16ba4 <_vfprintf_r+0x1564>
   168c8:	aa16      	add	r2, sp, #88	; 0x58
   168ca:	233b      	movs	r3, #59	; 0x3b
   168cc:	4694      	mov	ip, r2
   168ce:	4463      	add	r3, ip
   168d0:	469a      	mov	sl, r3
   168d2:	46b1      	mov	r9, r6
   168d4:	46a0      	mov	r8, r4
   168d6:	4656      	mov	r6, sl
   168d8:	e000      	b.n	168dc <_vfprintf_r+0x129c>
   168da:	0026      	movs	r6, r4
   168dc:	0028      	movs	r0, r5
   168de:	210a      	movs	r1, #10
   168e0:	f7fa f9dc 	bl	10c9c <__aeabi_idivmod>
   168e4:	1e74      	subs	r4, r6, #1
   168e6:	3130      	adds	r1, #48	; 0x30
   168e8:	7021      	strb	r1, [r4, #0]
   168ea:	0028      	movs	r0, r5
   168ec:	210a      	movs	r1, #10
   168ee:	f7fa f8ef 	bl	10ad0 <__divsi3>
   168f2:	0005      	movs	r5, r0
   168f4:	2809      	cmp	r0, #9
   168f6:	dcf0      	bgt.n	168da <_vfprintf_r+0x129a>
   168f8:	0023      	movs	r3, r4
   168fa:	4644      	mov	r4, r8
   168fc:	46b0      	mov	r8, r6
   168fe:	464e      	mov	r6, r9
   16900:	4699      	mov	r9, r3
   16902:	0003      	movs	r3, r0
   16904:	3330      	adds	r3, #48	; 0x30
   16906:	b2d8      	uxtb	r0, r3
   16908:	4643      	mov	r3, r8
   1690a:	3b02      	subs	r3, #2
   1690c:	7018      	strb	r0, [r3, #0]
   1690e:	459a      	cmp	sl, r3
   16910:	d800      	bhi.n	16914 <_vfprintf_r+0x12d4>
   16912:	e1f6      	b.n	16d02 <_vfprintf_r+0x16c2>
   16914:	4642      	mov	r2, r8
   16916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16918:	4645      	mov	r5, r8
   1691a:	1a99      	subs	r1, r3, r2
   1691c:	2301      	movs	r3, #1
   1691e:	3107      	adds	r1, #7
   16920:	425b      	negs	r3, r3
   16922:	e001      	b.n	16928 <_vfprintf_r+0x12e8>
   16924:	5ce8      	ldrb	r0, [r5, r3]
   16926:	3301      	adds	r3, #1
   16928:	aa21      	add	r2, sp, #132	; 0x84
   1692a:	18d2      	adds	r2, r2, r3
   1692c:	70d0      	strb	r0, [r2, #3]
   1692e:	428b      	cmp	r3, r1
   16930:	d1f8      	bne.n	16924 <_vfprintf_r+0x12e4>
   16932:	a916      	add	r1, sp, #88	; 0x58
   16934:	468c      	mov	ip, r1
   16936:	222e      	movs	r2, #46	; 0x2e
   16938:	464b      	mov	r3, r9
   1693a:	4462      	add	r2, ip
   1693c:	4694      	mov	ip, r2
   1693e:	1afb      	subs	r3, r7, r3
   16940:	4463      	add	r3, ip
   16942:	aa21      	add	r2, sp, #132	; 0x84
   16944:	9914      	ldr	r1, [sp, #80]	; 0x50
   16946:	1a9b      	subs	r3, r3, r2
   16948:	469c      	mov	ip, r3
   1694a:	000a      	movs	r2, r1
   1694c:	4462      	add	r2, ip
   1694e:	931a      	str	r3, [sp, #104]	; 0x68
   16950:	920e      	str	r2, [sp, #56]	; 0x38
   16952:	2901      	cmp	r1, #1
   16954:	dc00      	bgt.n	16958 <_vfprintf_r+0x1318>
   16956:	e170      	b.n	16c3a <_vfprintf_r+0x15fa>
   16958:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1695a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1695c:	4694      	mov	ip, r2
   1695e:	4463      	add	r3, ip
   16960:	001a      	movs	r2, r3
   16962:	930e      	str	r3, [sp, #56]	; 0x38
   16964:	43db      	mvns	r3, r3
   16966:	17db      	asrs	r3, r3, #31
   16968:	401a      	ands	r2, r3
   1696a:	2300      	movs	r3, #0
   1696c:	9208      	str	r2, [sp, #32]
   1696e:	9313      	str	r3, [sp, #76]	; 0x4c
   16970:	e6d4      	b.n	1671c <_vfprintf_r+0x10dc>
   16972:	003a      	movs	r2, r7
   16974:	4659      	mov	r1, fp
   16976:	9806      	ldr	r0, [sp, #24]
   16978:	f003 f954 	bl	19c24 <__sprint_r>
   1697c:	2800      	cmp	r0, #0
   1697e:	d001      	beq.n	16984 <_vfprintf_r+0x1344>
   16980:	f7ff fbee 	bl	16160 <_vfprintf_r+0xb20>
   16984:	68bc      	ldr	r4, [r7, #8]
   16986:	ae32      	add	r6, sp, #200	; 0xc8
   16988:	e46a      	b.n	16260 <_vfprintf_r+0xc20>
   1698a:	4653      	mov	r3, sl
   1698c:	2b00      	cmp	r3, #0
   1698e:	d000      	beq.n	16992 <_vfprintf_r+0x1352>
   16990:	e659      	b.n	16646 <_vfprintf_r+0x1006>
   16992:	3301      	adds	r3, #1
   16994:	469a      	mov	sl, r3
   16996:	e656      	b.n	16646 <_vfprintf_r+0x1006>
   16998:	4653      	mov	r3, sl
   1699a:	9308      	str	r3, [sp, #32]
   1699c:	2b06      	cmp	r3, #6
   1699e:	d901      	bls.n	169a4 <_vfprintf_r+0x1364>
   169a0:	2306      	movs	r3, #6
   169a2:	9308      	str	r3, [sp, #32]
   169a4:	9b08      	ldr	r3, [sp, #32]
   169a6:	950f      	str	r5, [sp, #60]	; 0x3c
   169a8:	930e      	str	r3, [sp, #56]	; 0x38
   169aa:	2300      	movs	r3, #0
   169ac:	4698      	mov	r8, r3
   169ae:	469a      	mov	sl, r3
   169b0:	9313      	str	r3, [sp, #76]	; 0x4c
   169b2:	4b62      	ldr	r3, [pc, #392]	; (16b3c <_vfprintf_r+0x14fc>)
   169b4:	9409      	str	r4, [sp, #36]	; 0x24
   169b6:	9311      	str	r3, [sp, #68]	; 0x44
   169b8:	f7fe ffbd 	bl	15936 <_vfprintf_r+0x2f6>
   169bc:	003a      	movs	r2, r7
   169be:	4659      	mov	r1, fp
   169c0:	9806      	ldr	r0, [sp, #24]
   169c2:	f003 f92f 	bl	19c24 <__sprint_r>
   169c6:	2800      	cmp	r0, #0
   169c8:	d001      	beq.n	169ce <_vfprintf_r+0x138e>
   169ca:	f7ff fbc9 	bl	16160 <_vfprintf_r+0xb20>
   169ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   169d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   169d2:	68bc      	ldr	r4, [r7, #8]
   169d4:	1a9b      	subs	r3, r3, r2
   169d6:	ae32      	add	r6, sp, #200	; 0xc8
   169d8:	e567      	b.n	164aa <_vfprintf_r+0xe6a>
   169da:	ab23      	add	r3, sp, #140	; 0x8c
   169dc:	931b      	str	r3, [sp, #108]	; 0x6c
   169de:	9304      	str	r3, [sp, #16]
   169e0:	ab20      	add	r3, sp, #128	; 0x80
   169e2:	9303      	str	r3, [sp, #12]
   169e4:	ab1f      	add	r3, sp, #124	; 0x7c
   169e6:	9302      	str	r3, [sp, #8]
   169e8:	4653      	mov	r3, sl
   169ea:	9301      	str	r3, [sp, #4]
   169ec:	2303      	movs	r3, #3
   169ee:	464a      	mov	r2, r9
   169f0:	9300      	str	r3, [sp, #0]
   169f2:	9806      	ldr	r0, [sp, #24]
   169f4:	9b08      	ldr	r3, [sp, #32]
   169f6:	f000 fafb 	bl	16ff0 <_dtoa_r>
   169fa:	0003      	movs	r3, r0
   169fc:	4453      	add	r3, sl
   169fe:	4698      	mov	r8, r3
   16a00:	4655      	mov	r5, sl
   16a02:	9011      	str	r0, [sp, #68]	; 0x44
   16a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a06:	781b      	ldrb	r3, [r3, #0]
   16a08:	2b30      	cmp	r3, #48	; 0x30
   16a0a:	d002      	beq.n	16a12 <_vfprintf_r+0x13d2>
   16a0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16a0e:	4498      	add	r8, r3
   16a10:	e64e      	b.n	166b0 <_vfprintf_r+0x1070>
   16a12:	2200      	movs	r2, #0
   16a14:	2300      	movs	r3, #0
   16a16:	4648      	mov	r0, r9
   16a18:	9908      	ldr	r1, [sp, #32]
   16a1a:	f7fc ff71 	bl	13900 <__aeabi_dcmpeq>
   16a1e:	2800      	cmp	r0, #0
   16a20:	d1f4      	bne.n	16a0c <_vfprintf_r+0x13cc>
   16a22:	2301      	movs	r3, #1
   16a24:	1b5b      	subs	r3, r3, r5
   16a26:	931f      	str	r3, [sp, #124]	; 0x7c
   16a28:	4498      	add	r8, r3
   16a2a:	e641      	b.n	166b0 <_vfprintf_r+0x1070>
   16a2c:	46c1      	mov	r9, r8
   16a2e:	f7ff fb1f 	bl	16070 <_vfprintf_r+0xa30>
   16a32:	2280      	movs	r2, #128	; 0x80
   16a34:	0612      	lsls	r2, r2, #24
   16a36:	4694      	mov	ip, r2
   16a38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16a3a:	4699      	mov	r9, r3
   16a3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16a3e:	4463      	add	r3, ip
   16a40:	9308      	str	r3, [sp, #32]
   16a42:	232d      	movs	r3, #45	; 0x2d
   16a44:	9310      	str	r3, [sp, #64]	; 0x40
   16a46:	e60b      	b.n	16660 <_vfprintf_r+0x1020>
   16a48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16a4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16a4c:	4694      	mov	ip, r2
   16a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16a50:	4463      	add	r3, ip
   16a52:	930e      	str	r3, [sp, #56]	; 0x38
   16a54:	2a00      	cmp	r2, #0
   16a56:	dc00      	bgt.n	16a5a <_vfprintf_r+0x141a>
   16a58:	e0e3      	b.n	16c22 <_vfprintf_r+0x15e2>
   16a5a:	001a      	movs	r2, r3
   16a5c:	43db      	mvns	r3, r3
   16a5e:	17db      	asrs	r3, r3, #31
   16a60:	401a      	ands	r2, r3
   16a62:	2367      	movs	r3, #103	; 0x67
   16a64:	9208      	str	r2, [sp, #32]
   16a66:	9312      	str	r3, [sp, #72]	; 0x48
   16a68:	e658      	b.n	1671c <_vfprintf_r+0x10dc>
   16a6a:	003a      	movs	r2, r7
   16a6c:	4659      	mov	r1, fp
   16a6e:	9806      	ldr	r0, [sp, #24]
   16a70:	f003 f8d8 	bl	19c24 <__sprint_r>
   16a74:	2800      	cmp	r0, #0
   16a76:	d001      	beq.n	16a7c <_vfprintf_r+0x143c>
   16a78:	f7ff fb72 	bl	16160 <_vfprintf_r+0xb20>
   16a7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16a7e:	68bc      	ldr	r4, [r7, #8]
   16a80:	ae32      	add	r6, sp, #200	; 0xc8
   16a82:	e69d      	b.n	167c0 <_vfprintf_r+0x1180>
   16a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16a86:	9313      	str	r3, [sp, #76]	; 0x4c
   16a88:	2b00      	cmp	r3, #0
   16a8a:	dc00      	bgt.n	16a8e <_vfprintf_r+0x144e>
   16a8c:	e0f2      	b.n	16c74 <_vfprintf_r+0x1634>
   16a8e:	4652      	mov	r2, sl
   16a90:	2a00      	cmp	r2, #0
   16a92:	d000      	beq.n	16a96 <_vfprintf_r+0x1456>
   16a94:	e0a0      	b.n	16bd8 <_vfprintf_r+0x1598>
   16a96:	07e2      	lsls	r2, r4, #31
   16a98:	d500      	bpl.n	16a9c <_vfprintf_r+0x145c>
   16a9a:	e09d      	b.n	16bd8 <_vfprintf_r+0x1598>
   16a9c:	9308      	str	r3, [sp, #32]
   16a9e:	930e      	str	r3, [sp, #56]	; 0x38
   16aa0:	e63c      	b.n	1671c <_vfprintf_r+0x10dc>
   16aa2:	ab16      	add	r3, sp, #88	; 0x58
   16aa4:	7fdb      	ldrb	r3, [r3, #31]
   16aa6:	950f      	str	r5, [sp, #60]	; 0x3c
   16aa8:	4698      	mov	r8, r3
   16aaa:	4653      	mov	r3, sl
   16aac:	9308      	str	r3, [sp, #32]
   16aae:	930e      	str	r3, [sp, #56]	; 0x38
   16ab0:	2300      	movs	r3, #0
   16ab2:	9409      	str	r4, [sp, #36]	; 0x24
   16ab4:	469a      	mov	sl, r3
   16ab6:	9313      	str	r3, [sp, #76]	; 0x4c
   16ab8:	f7fe ff37 	bl	1592a <_vfprintf_r+0x2ea>
   16abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16abe:	4698      	mov	r8, r3
   16ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16ac2:	44a8      	add	r8, r5
   16ac4:	2b47      	cmp	r3, #71	; 0x47
   16ac6:	d000      	beq.n	16aca <_vfprintf_r+0x148a>
   16ac8:	e5f2      	b.n	166b0 <_vfprintf_r+0x1070>
   16aca:	07e3      	lsls	r3, r4, #31
   16acc:	d400      	bmi.n	16ad0 <_vfprintf_r+0x1490>
   16ace:	e0dc      	b.n	16c8a <_vfprintf_r+0x164a>
   16ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16ad2:	4698      	mov	r8, r3
   16ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16ad6:	44a8      	add	r8, r5
   16ad8:	2b46      	cmp	r3, #70	; 0x46
   16ada:	d093      	beq.n	16a04 <_vfprintf_r+0x13c4>
   16adc:	e5e8      	b.n	166b0 <_vfprintf_r+0x1070>
   16ade:	ab23      	add	r3, sp, #140	; 0x8c
   16ae0:	931b      	str	r3, [sp, #108]	; 0x6c
   16ae2:	9304      	str	r3, [sp, #16]
   16ae4:	ab20      	add	r3, sp, #128	; 0x80
   16ae6:	9303      	str	r3, [sp, #12]
   16ae8:	ab1f      	add	r3, sp, #124	; 0x7c
   16aea:	9302      	str	r3, [sp, #8]
   16aec:	4653      	mov	r3, sl
   16aee:	9301      	str	r3, [sp, #4]
   16af0:	2303      	movs	r3, #3
   16af2:	464a      	mov	r2, r9
   16af4:	9300      	str	r3, [sp, #0]
   16af6:	9806      	ldr	r0, [sp, #24]
   16af8:	9b08      	ldr	r3, [sp, #32]
   16afa:	f000 fa79 	bl	16ff0 <_dtoa_r>
   16afe:	4655      	mov	r5, sl
   16b00:	9011      	str	r0, [sp, #68]	; 0x44
   16b02:	e7e5      	b.n	16ad0 <_vfprintf_r+0x1490>
   16b04:	003a      	movs	r2, r7
   16b06:	4659      	mov	r1, fp
   16b08:	9806      	ldr	r0, [sp, #24]
   16b0a:	f003 f88b 	bl	19c24 <__sprint_r>
   16b0e:	2800      	cmp	r0, #0
   16b10:	d101      	bne.n	16b16 <_vfprintf_r+0x14d6>
   16b12:	f7ff faab 	bl	1606c <_vfprintf_r+0xa2c>
   16b16:	f7ff faab 	bl	16070 <_vfprintf_r+0xa30>
   16b1a:	4642      	mov	r2, r8
   16b1c:	9207      	str	r2, [sp, #28]
   16b1e:	f7fe fe1b 	bl	15758 <_vfprintf_r+0x118>
   16b22:	4244      	negs	r4, r0
   16b24:	3010      	adds	r0, #16
   16b26:	db00      	blt.n	16b2a <_vfprintf_r+0x14ea>
   16b28:	e0d8      	b.n	16cdc <_vfprintf_r+0x169c>
   16b2a:	4805      	ldr	r0, [pc, #20]	; (16b40 <_vfprintf_r+0x1500>)
   16b2c:	2610      	movs	r6, #16
   16b2e:	0005      	movs	r5, r0
   16b30:	e00c      	b.n	16b4c <_vfprintf_r+0x150c>
   16b32:	46c0      	nop			; (mov r8, r8)
   16b34:	0001b170 	.word	0x0001b170
   16b38:	0001b134 	.word	0x0001b134
   16b3c:	0001b168 	.word	0x0001b168
   16b40:	0001b308 	.word	0x0001b308
   16b44:	3208      	adds	r2, #8
   16b46:	3c10      	subs	r4, #16
   16b48:	2c10      	cmp	r4, #16
   16b4a:	dd51      	ble.n	16bf0 <_vfprintf_r+0x15b0>
   16b4c:	3110      	adds	r1, #16
   16b4e:	3301      	adds	r3, #1
   16b50:	6015      	str	r5, [r2, #0]
   16b52:	6056      	str	r6, [r2, #4]
   16b54:	60b9      	str	r1, [r7, #8]
   16b56:	607b      	str	r3, [r7, #4]
   16b58:	2b07      	cmp	r3, #7
   16b5a:	ddf3      	ble.n	16b44 <_vfprintf_r+0x1504>
   16b5c:	003a      	movs	r2, r7
   16b5e:	4659      	mov	r1, fp
   16b60:	9806      	ldr	r0, [sp, #24]
   16b62:	f003 f85f 	bl	19c24 <__sprint_r>
   16b66:	2800      	cmp	r0, #0
   16b68:	d001      	beq.n	16b6e <_vfprintf_r+0x152e>
   16b6a:	f7ff faf9 	bl	16160 <_vfprintf_r+0xb20>
   16b6e:	68b9      	ldr	r1, [r7, #8]
   16b70:	687b      	ldr	r3, [r7, #4]
   16b72:	aa32      	add	r2, sp, #200	; 0xc8
   16b74:	e7e7      	b.n	16b46 <_vfprintf_r+0x1506>
   16b76:	003a      	movs	r2, r7
   16b78:	4659      	mov	r1, fp
   16b7a:	9806      	ldr	r0, [sp, #24]
   16b7c:	f003 f852 	bl	19c24 <__sprint_r>
   16b80:	2800      	cmp	r0, #0
   16b82:	d001      	beq.n	16b88 <_vfprintf_r+0x1548>
   16b84:	f7ff faec 	bl	16160 <_vfprintf_r+0xb20>
   16b88:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16b8a:	68b9      	ldr	r1, [r7, #8]
   16b8c:	687b      	ldr	r3, [r7, #4]
   16b8e:	aa32      	add	r2, sp, #200	; 0xc8
   16b90:	e62e      	b.n	167f0 <_vfprintf_r+0x11b0>
   16b92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16b96:	4694      	mov	ip, r2
   16b98:	4463      	add	r3, ip
   16b9a:	001a      	movs	r2, r3
   16b9c:	930e      	str	r3, [sp, #56]	; 0x38
   16b9e:	e75d      	b.n	16a5c <_vfprintf_r+0x141c>
   16ba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16ba2:	e599      	b.n	166d8 <_vfprintf_r+0x1098>
   16ba4:	212e      	movs	r1, #46	; 0x2e
   16ba6:	2330      	movs	r3, #48	; 0x30
   16ba8:	aa16      	add	r2, sp, #88	; 0x58
   16baa:	1852      	adds	r2, r2, r1
   16bac:	7013      	strb	r3, [r2, #0]
   16bae:	002b      	movs	r3, r5
   16bb0:	aa16      	add	r2, sp, #88	; 0x58
   16bb2:	3101      	adds	r1, #1
   16bb4:	3330      	adds	r3, #48	; 0x30
   16bb6:	1852      	adds	r2, r2, r1
   16bb8:	7013      	strb	r3, [r2, #0]
   16bba:	ab22      	add	r3, sp, #136	; 0x88
   16bbc:	e6c1      	b.n	16942 <_vfprintf_r+0x1302>
   16bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	db52      	blt.n	16c6a <_vfprintf_r+0x162a>
   16bc4:	ab16      	add	r3, sp, #88	; 0x58
   16bc6:	7fdb      	ldrb	r3, [r3, #31]
   16bc8:	4698      	mov	r8, r3
   16bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16bcc:	2b47      	cmp	r3, #71	; 0x47
   16bce:	dc48      	bgt.n	16c62 <_vfprintf_r+0x1622>
   16bd0:	4b4e      	ldr	r3, [pc, #312]	; (16d0c <_vfprintf_r+0x16cc>)
   16bd2:	9311      	str	r3, [sp, #68]	; 0x44
   16bd4:	f7ff f88c 	bl	15cf0 <_vfprintf_r+0x6b0>
   16bd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   16bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16bdc:	4694      	mov	ip, r2
   16bde:	4463      	add	r3, ip
   16be0:	4453      	add	r3, sl
   16be2:	001a      	movs	r2, r3
   16be4:	930e      	str	r3, [sp, #56]	; 0x38
   16be6:	43db      	mvns	r3, r3
   16be8:	17db      	asrs	r3, r3, #31
   16bea:	401a      	ands	r2, r3
   16bec:	9208      	str	r2, [sp, #32]
   16bee:	e595      	b.n	1671c <_vfprintf_r+0x10dc>
   16bf0:	46a9      	mov	r9, r5
   16bf2:	4648      	mov	r0, r9
   16bf4:	1909      	adds	r1, r1, r4
   16bf6:	3301      	adds	r3, #1
   16bf8:	6010      	str	r0, [r2, #0]
   16bfa:	6054      	str	r4, [r2, #4]
   16bfc:	60b9      	str	r1, [r7, #8]
   16bfe:	3208      	adds	r2, #8
   16c00:	607b      	str	r3, [r7, #4]
   16c02:	2b07      	cmp	r3, #7
   16c04:	dc00      	bgt.n	16c08 <_vfprintf_r+0x15c8>
   16c06:	e5f6      	b.n	167f6 <_vfprintf_r+0x11b6>
   16c08:	003a      	movs	r2, r7
   16c0a:	4659      	mov	r1, fp
   16c0c:	9806      	ldr	r0, [sp, #24]
   16c0e:	f003 f809 	bl	19c24 <__sprint_r>
   16c12:	2800      	cmp	r0, #0
   16c14:	d001      	beq.n	16c1a <_vfprintf_r+0x15da>
   16c16:	f7ff faa3 	bl	16160 <_vfprintf_r+0xb20>
   16c1a:	68b9      	ldr	r1, [r7, #8]
   16c1c:	687b      	ldr	r3, [r7, #4]
   16c1e:	aa32      	add	r2, sp, #200	; 0xc8
   16c20:	e5e9      	b.n	167f6 <_vfprintf_r+0x11b6>
   16c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16c24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16c26:	1a98      	subs	r0, r3, r2
   16c28:	1c43      	adds	r3, r0, #1
   16c2a:	001a      	movs	r2, r3
   16c2c:	930e      	str	r3, [sp, #56]	; 0x38
   16c2e:	e715      	b.n	16a5c <_vfprintf_r+0x141c>
   16c30:	4a37      	ldr	r2, [pc, #220]	; (16d10 <_vfprintf_r+0x16d0>)
   16c32:	687b      	ldr	r3, [r7, #4]
   16c34:	4691      	mov	r9, r2
   16c36:	f7ff fbf5 	bl	16424 <_vfprintf_r+0xde4>
   16c3a:	2301      	movs	r3, #1
   16c3c:	4023      	ands	r3, r4
   16c3e:	9313      	str	r3, [sp, #76]	; 0x4c
   16c40:	d000      	beq.n	16c44 <_vfprintf_r+0x1604>
   16c42:	e689      	b.n	16958 <_vfprintf_r+0x1318>
   16c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16c46:	43d3      	mvns	r3, r2
   16c48:	17db      	asrs	r3, r3, #31
   16c4a:	401a      	ands	r2, r3
   16c4c:	9208      	str	r2, [sp, #32]
   16c4e:	e565      	b.n	1671c <_vfprintf_r+0x10dc>
   16c50:	2301      	movs	r3, #1
   16c52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16c54:	391b      	subs	r1, #27
   16c56:	1a9d      	subs	r5, r3, r2
   16c58:	aa16      	add	r2, sp, #88	; 0x58
   16c5a:	332c      	adds	r3, #44	; 0x2c
   16c5c:	1852      	adds	r2, r2, r1
   16c5e:	7013      	strb	r3, [r2, #0]
   16c60:	e62f      	b.n	168c2 <_vfprintf_r+0x1282>
   16c62:	4b2c      	ldr	r3, [pc, #176]	; (16d14 <_vfprintf_r+0x16d4>)
   16c64:	9311      	str	r3, [sp, #68]	; 0x44
   16c66:	f7ff f843 	bl	15cf0 <_vfprintf_r+0x6b0>
   16c6a:	232d      	movs	r3, #45	; 0x2d
   16c6c:	aa16      	add	r2, sp, #88	; 0x58
   16c6e:	77d3      	strb	r3, [r2, #31]
   16c70:	4698      	mov	r8, r3
   16c72:	e7aa      	b.n	16bca <_vfprintf_r+0x158a>
   16c74:	4653      	mov	r3, sl
   16c76:	2b00      	cmp	r3, #0
   16c78:	d101      	bne.n	16c7e <_vfprintf_r+0x163e>
   16c7a:	07e3      	lsls	r3, r4, #31
   16c7c:	d503      	bpl.n	16c86 <_vfprintf_r+0x1646>
   16c7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16c80:	1c58      	adds	r0, r3, #1
   16c82:	0003      	movs	r3, r0
   16c84:	e7ac      	b.n	16be0 <_vfprintf_r+0x15a0>
   16c86:	2301      	movs	r3, #1
   16c88:	e708      	b.n	16a9c <_vfprintf_r+0x145c>
   16c8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   16c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16c8e:	1a9b      	subs	r3, r3, r2
   16c90:	9314      	str	r3, [sp, #80]	; 0x50
   16c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16c94:	2b47      	cmp	r3, #71	; 0x47
   16c96:	d100      	bne.n	16c9a <_vfprintf_r+0x165a>
   16c98:	e5f6      	b.n	16888 <_vfprintf_r+0x1248>
   16c9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16c9c:	9313      	str	r3, [sp, #76]	; 0x4c
   16c9e:	e5fd      	b.n	1689c <_vfprintf_r+0x125c>
   16ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16ca2:	1d1d      	adds	r5, r3, #4
   16ca4:	681b      	ldr	r3, [r3, #0]
   16ca6:	46a8      	mov	r8, r5
   16ca8:	469a      	mov	sl, r3
   16caa:	2b00      	cmp	r3, #0
   16cac:	db0a      	blt.n	16cc4 <_vfprintf_r+0x1684>
   16cae:	4645      	mov	r5, r8
   16cb0:	9b07      	ldr	r3, [sp, #28]
   16cb2:	950f      	str	r5, [sp, #60]	; 0x3c
   16cb4:	785b      	ldrb	r3, [r3, #1]
   16cb6:	9207      	str	r2, [sp, #28]
   16cb8:	f7fe fd4b 	bl	15752 <_vfprintf_r+0x112>
   16cbc:	ab16      	add	r3, sp, #88	; 0x58
   16cbe:	77d8      	strb	r0, [r3, #31]
   16cc0:	f7ff f830 	bl	15d24 <_vfprintf_r+0x6e4>
   16cc4:	2301      	movs	r3, #1
   16cc6:	425b      	negs	r3, r3
   16cc8:	469a      	mov	sl, r3
   16cca:	e7f0      	b.n	16cae <_vfprintf_r+0x166e>
   16ccc:	ab16      	add	r3, sp, #88	; 0x58
   16cce:	77d8      	strb	r0, [r3, #31]
   16cd0:	f7fe ff27 	bl	15b22 <_vfprintf_r+0x4e2>
   16cd4:	ab16      	add	r3, sp, #88	; 0x58
   16cd6:	77d8      	strb	r0, [r3, #31]
   16cd8:	f7fe fdce 	bl	15878 <_vfprintf_r+0x238>
   16cdc:	480c      	ldr	r0, [pc, #48]	; (16d10 <_vfprintf_r+0x16d0>)
   16cde:	4681      	mov	r9, r0
   16ce0:	e787      	b.n	16bf2 <_vfprintf_r+0x15b2>
   16ce2:	ab16      	add	r3, sp, #88	; 0x58
   16ce4:	77d8      	strb	r0, [r3, #31]
   16ce6:	f7ff f829 	bl	15d3c <_vfprintf_r+0x6fc>
   16cea:	ab16      	add	r3, sp, #88	; 0x58
   16cec:	77d8      	strb	r0, [r3, #31]
   16cee:	f7fe ffc3 	bl	15c78 <_vfprintf_r+0x638>
   16cf2:	ab16      	add	r3, sp, #88	; 0x58
   16cf4:	77d8      	strb	r0, [r3, #31]
   16cf6:	f7fe ffa5 	bl	15c44 <_vfprintf_r+0x604>
   16cfa:	ab16      	add	r3, sp, #88	; 0x58
   16cfc:	77d8      	strb	r0, [r3, #31]
   16cfe:	f7fe feaf 	bl	15a60 <_vfprintf_r+0x420>
   16d02:	aa16      	add	r2, sp, #88	; 0x58
   16d04:	232e      	movs	r3, #46	; 0x2e
   16d06:	4694      	mov	ip, r2
   16d08:	4463      	add	r3, ip
   16d0a:	e61a      	b.n	16942 <_vfprintf_r+0x1302>
   16d0c:	0001b138 	.word	0x0001b138
   16d10:	0001b308 	.word	0x0001b308
   16d14:	0001b13c 	.word	0x0001b13c

00016d18 <__sbprintf>:
   16d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d1a:	0015      	movs	r5, r2
   16d1c:	2202      	movs	r2, #2
   16d1e:	4c1e      	ldr	r4, [pc, #120]	; (16d98 <__sbprintf+0x80>)
   16d20:	001f      	movs	r7, r3
   16d22:	898b      	ldrh	r3, [r1, #12]
   16d24:	44a5      	add	sp, r4
   16d26:	4393      	bics	r3, r2
   16d28:	466a      	mov	r2, sp
   16d2a:	8193      	strh	r3, [r2, #12]
   16d2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16d2e:	0006      	movs	r6, r0
   16d30:	9319      	str	r3, [sp, #100]	; 0x64
   16d32:	89cb      	ldrh	r3, [r1, #14]
   16d34:	a816      	add	r0, sp, #88	; 0x58
   16d36:	81d3      	strh	r3, [r2, #14]
   16d38:	69cb      	ldr	r3, [r1, #28]
   16d3a:	000c      	movs	r4, r1
   16d3c:	9307      	str	r3, [sp, #28]
   16d3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   16d40:	9309      	str	r3, [sp, #36]	; 0x24
   16d42:	ab1a      	add	r3, sp, #104	; 0x68
   16d44:	9300      	str	r3, [sp, #0]
   16d46:	9304      	str	r3, [sp, #16]
   16d48:	2380      	movs	r3, #128	; 0x80
   16d4a:	00db      	lsls	r3, r3, #3
   16d4c:	9302      	str	r3, [sp, #8]
   16d4e:	9305      	str	r3, [sp, #20]
   16d50:	2300      	movs	r3, #0
   16d52:	9306      	str	r3, [sp, #24]
   16d54:	f001 fd50 	bl	187f8 <__retarget_lock_init_recursive>
   16d58:	002a      	movs	r2, r5
   16d5a:	003b      	movs	r3, r7
   16d5c:	4669      	mov	r1, sp
   16d5e:	0030      	movs	r0, r6
   16d60:	f7fe fc6e 	bl	15640 <_vfprintf_r>
   16d64:	1e05      	subs	r5, r0, #0
   16d66:	db05      	blt.n	16d74 <__sbprintf+0x5c>
   16d68:	4669      	mov	r1, sp
   16d6a:	0030      	movs	r0, r6
   16d6c:	f001 f9ac 	bl	180c8 <_fflush_r>
   16d70:	2800      	cmp	r0, #0
   16d72:	d10e      	bne.n	16d92 <__sbprintf+0x7a>
   16d74:	466b      	mov	r3, sp
   16d76:	899b      	ldrh	r3, [r3, #12]
   16d78:	065b      	lsls	r3, r3, #25
   16d7a:	d503      	bpl.n	16d84 <__sbprintf+0x6c>
   16d7c:	2240      	movs	r2, #64	; 0x40
   16d7e:	89a3      	ldrh	r3, [r4, #12]
   16d80:	4313      	orrs	r3, r2
   16d82:	81a3      	strh	r3, [r4, #12]
   16d84:	9816      	ldr	r0, [sp, #88]	; 0x58
   16d86:	f001 fd39 	bl	187fc <__retarget_lock_close_recursive>
   16d8a:	0028      	movs	r0, r5
   16d8c:	4b03      	ldr	r3, [pc, #12]	; (16d9c <__sbprintf+0x84>)
   16d8e:	449d      	add	sp, r3
   16d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d92:	2501      	movs	r5, #1
   16d94:	426d      	negs	r5, r5
   16d96:	e7ed      	b.n	16d74 <__sbprintf+0x5c>
   16d98:	fffffb94 	.word	0xfffffb94
   16d9c:	0000046c 	.word	0x0000046c

00016da0 <__swsetup_r>:
   16da0:	4b33      	ldr	r3, [pc, #204]	; (16e70 <__swsetup_r+0xd0>)
   16da2:	b570      	push	{r4, r5, r6, lr}
   16da4:	0005      	movs	r5, r0
   16da6:	6818      	ldr	r0, [r3, #0]
   16da8:	000c      	movs	r4, r1
   16daa:	2800      	cmp	r0, #0
   16dac:	d002      	beq.n	16db4 <__swsetup_r+0x14>
   16dae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16db0:	2b00      	cmp	r3, #0
   16db2:	d03c      	beq.n	16e2e <__swsetup_r+0x8e>
   16db4:	230c      	movs	r3, #12
   16db6:	5ee2      	ldrsh	r2, [r4, r3]
   16db8:	b293      	uxth	r3, r2
   16dba:	0719      	lsls	r1, r3, #28
   16dbc:	d50d      	bpl.n	16dda <__swsetup_r+0x3a>
   16dbe:	6921      	ldr	r1, [r4, #16]
   16dc0:	2900      	cmp	r1, #0
   16dc2:	d015      	beq.n	16df0 <__swsetup_r+0x50>
   16dc4:	07da      	lsls	r2, r3, #31
   16dc6:	d521      	bpl.n	16e0c <__swsetup_r+0x6c>
   16dc8:	2300      	movs	r3, #0
   16dca:	60a3      	str	r3, [r4, #8]
   16dcc:	6963      	ldr	r3, [r4, #20]
   16dce:	2000      	movs	r0, #0
   16dd0:	425b      	negs	r3, r3
   16dd2:	61a3      	str	r3, [r4, #24]
   16dd4:	2900      	cmp	r1, #0
   16dd6:	d021      	beq.n	16e1c <__swsetup_r+0x7c>
   16dd8:	bd70      	pop	{r4, r5, r6, pc}
   16dda:	06d9      	lsls	r1, r3, #27
   16ddc:	d53f      	bpl.n	16e5e <__swsetup_r+0xbe>
   16dde:	075b      	lsls	r3, r3, #29
   16de0:	d428      	bmi.n	16e34 <__swsetup_r+0x94>
   16de2:	6921      	ldr	r1, [r4, #16]
   16de4:	2308      	movs	r3, #8
   16de6:	4313      	orrs	r3, r2
   16de8:	81a3      	strh	r3, [r4, #12]
   16dea:	b29b      	uxth	r3, r3
   16dec:	2900      	cmp	r1, #0
   16dee:	d1e9      	bne.n	16dc4 <__swsetup_r+0x24>
   16df0:	22a0      	movs	r2, #160	; 0xa0
   16df2:	2080      	movs	r0, #128	; 0x80
   16df4:	0092      	lsls	r2, r2, #2
   16df6:	0080      	lsls	r0, r0, #2
   16df8:	401a      	ands	r2, r3
   16dfa:	4282      	cmp	r2, r0
   16dfc:	d0e2      	beq.n	16dc4 <__swsetup_r+0x24>
   16dfe:	0021      	movs	r1, r4
   16e00:	0028      	movs	r0, r5
   16e02:	f001 fd31 	bl	18868 <__smakebuf_r>
   16e06:	89a3      	ldrh	r3, [r4, #12]
   16e08:	6921      	ldr	r1, [r4, #16]
   16e0a:	e7db      	b.n	16dc4 <__swsetup_r+0x24>
   16e0c:	2200      	movs	r2, #0
   16e0e:	079b      	lsls	r3, r3, #30
   16e10:	d400      	bmi.n	16e14 <__swsetup_r+0x74>
   16e12:	6962      	ldr	r2, [r4, #20]
   16e14:	60a2      	str	r2, [r4, #8]
   16e16:	2000      	movs	r0, #0
   16e18:	2900      	cmp	r1, #0
   16e1a:	d1dd      	bne.n	16dd8 <__swsetup_r+0x38>
   16e1c:	220c      	movs	r2, #12
   16e1e:	5ea3      	ldrsh	r3, [r4, r2]
   16e20:	061a      	lsls	r2, r3, #24
   16e22:	d5d9      	bpl.n	16dd8 <__swsetup_r+0x38>
   16e24:	2240      	movs	r2, #64	; 0x40
   16e26:	4313      	orrs	r3, r2
   16e28:	81a3      	strh	r3, [r4, #12]
   16e2a:	3801      	subs	r0, #1
   16e2c:	e7d4      	b.n	16dd8 <__swsetup_r+0x38>
   16e2e:	f001 f9a5 	bl	1817c <__sinit>
   16e32:	e7bf      	b.n	16db4 <__swsetup_r+0x14>
   16e34:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16e36:	2900      	cmp	r1, #0
   16e38:	d00a      	beq.n	16e50 <__swsetup_r+0xb0>
   16e3a:	0023      	movs	r3, r4
   16e3c:	3340      	adds	r3, #64	; 0x40
   16e3e:	4299      	cmp	r1, r3
   16e40:	d004      	beq.n	16e4c <__swsetup_r+0xac>
   16e42:	0028      	movs	r0, r5
   16e44:	f001 fa44 	bl	182d0 <_free_r>
   16e48:	230c      	movs	r3, #12
   16e4a:	5ee2      	ldrsh	r2, [r4, r3]
   16e4c:	2300      	movs	r3, #0
   16e4e:	6323      	str	r3, [r4, #48]	; 0x30
   16e50:	2324      	movs	r3, #36	; 0x24
   16e52:	439a      	bics	r2, r3
   16e54:	2300      	movs	r3, #0
   16e56:	6921      	ldr	r1, [r4, #16]
   16e58:	6063      	str	r3, [r4, #4]
   16e5a:	6021      	str	r1, [r4, #0]
   16e5c:	e7c2      	b.n	16de4 <__swsetup_r+0x44>
   16e5e:	2309      	movs	r3, #9
   16e60:	602b      	str	r3, [r5, #0]
   16e62:	2340      	movs	r3, #64	; 0x40
   16e64:	2001      	movs	r0, #1
   16e66:	431a      	orrs	r2, r3
   16e68:	81a2      	strh	r2, [r4, #12]
   16e6a:	4240      	negs	r0, r0
   16e6c:	e7b4      	b.n	16dd8 <__swsetup_r+0x38>
   16e6e:	46c0      	nop			; (mov r8, r8)
   16e70:	20000038 	.word	0x20000038

00016e74 <register_fini>:
   16e74:	4b03      	ldr	r3, [pc, #12]	; (16e84 <register_fini+0x10>)
   16e76:	b510      	push	{r4, lr}
   16e78:	2b00      	cmp	r3, #0
   16e7a:	d002      	beq.n	16e82 <register_fini+0xe>
   16e7c:	4802      	ldr	r0, [pc, #8]	; (16e88 <register_fini+0x14>)
   16e7e:	f000 f805 	bl	16e8c <atexit>
   16e82:	bd10      	pop	{r4, pc}
   16e84:	00000000 	.word	0x00000000
   16e88:	000181fd 	.word	0x000181fd

00016e8c <atexit>:
   16e8c:	b510      	push	{r4, lr}
   16e8e:	0001      	movs	r1, r0
   16e90:	2300      	movs	r3, #0
   16e92:	2200      	movs	r2, #0
   16e94:	2000      	movs	r0, #0
   16e96:	f002 fee3 	bl	19c60 <__register_exitproc>
   16e9a:	bd10      	pop	{r4, pc}

00016e9c <quorem>:
   16e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e9e:	4645      	mov	r5, r8
   16ea0:	4680      	mov	r8, r0
   16ea2:	46de      	mov	lr, fp
   16ea4:	4657      	mov	r7, sl
   16ea6:	464e      	mov	r6, r9
   16ea8:	4642      	mov	r2, r8
   16eaa:	b5e0      	push	{r5, r6, r7, lr}
   16eac:	690c      	ldr	r4, [r1, #16]
   16eae:	6912      	ldr	r2, [r2, #16]
   16eb0:	b085      	sub	sp, #20
   16eb2:	000b      	movs	r3, r1
   16eb4:	9102      	str	r1, [sp, #8]
   16eb6:	2000      	movs	r0, #0
   16eb8:	4294      	cmp	r4, r2
   16eba:	dd00      	ble.n	16ebe <quorem+0x22>
   16ebc:	e090      	b.n	16fe0 <quorem+0x144>
   16ebe:	2214      	movs	r2, #20
   16ec0:	4694      	mov	ip, r2
   16ec2:	4463      	add	r3, ip
   16ec4:	4699      	mov	r9, r3
   16ec6:	464a      	mov	r2, r9
   16ec8:	3c01      	subs	r4, #1
   16eca:	00a3      	lsls	r3, r4, #2
   16ecc:	18d6      	adds	r6, r2, r3
   16ece:	2214      	movs	r2, #20
   16ed0:	4442      	add	r2, r8
   16ed2:	4693      	mov	fp, r2
   16ed4:	449b      	add	fp, r3
   16ed6:	6833      	ldr	r3, [r6, #0]
   16ed8:	0015      	movs	r5, r2
   16eda:	1c59      	adds	r1, r3, #1
   16edc:	465b      	mov	r3, fp
   16ede:	6818      	ldr	r0, [r3, #0]
   16ee0:	9201      	str	r2, [sp, #4]
   16ee2:	f7f9 fd6b 	bl	109bc <__udivsi3>
   16ee6:	1e03      	subs	r3, r0, #0
   16ee8:	9000      	str	r0, [sp, #0]
   16eea:	d042      	beq.n	16f72 <quorem+0xd6>
   16eec:	0029      	movs	r1, r5
   16eee:	2700      	movs	r7, #0
   16ef0:	464d      	mov	r5, r9
   16ef2:	2000      	movs	r0, #0
   16ef4:	46b1      	mov	r9, r6
   16ef6:	46a2      	mov	sl, r4
   16ef8:	003e      	movs	r6, r7
   16efa:	0004      	movs	r4, r0
   16efc:	469c      	mov	ip, r3
   16efe:	002f      	movs	r7, r5
   16f00:	0008      	movs	r0, r1
   16f02:	9503      	str	r5, [sp, #12]
   16f04:	4663      	mov	r3, ip
   16f06:	cf04      	ldmia	r7!, {r2}
   16f08:	0415      	lsls	r5, r2, #16
   16f0a:	0c2d      	lsrs	r5, r5, #16
   16f0c:	435d      	muls	r5, r3
   16f0e:	0c12      	lsrs	r2, r2, #16
   16f10:	435a      	muls	r2, r3
   16f12:	19ad      	adds	r5, r5, r6
   16f14:	0c2b      	lsrs	r3, r5, #16
   16f16:	18d2      	adds	r2, r2, r3
   16f18:	6803      	ldr	r3, [r0, #0]
   16f1a:	042d      	lsls	r5, r5, #16
   16f1c:	0419      	lsls	r1, r3, #16
   16f1e:	0c09      	lsrs	r1, r1, #16
   16f20:	1909      	adds	r1, r1, r4
   16f22:	0c16      	lsrs	r6, r2, #16
   16f24:	0c2d      	lsrs	r5, r5, #16
   16f26:	0412      	lsls	r2, r2, #16
   16f28:	1b49      	subs	r1, r1, r5
   16f2a:	0c12      	lsrs	r2, r2, #16
   16f2c:	0c1b      	lsrs	r3, r3, #16
   16f2e:	1a9b      	subs	r3, r3, r2
   16f30:	140a      	asrs	r2, r1, #16
   16f32:	189b      	adds	r3, r3, r2
   16f34:	0409      	lsls	r1, r1, #16
   16f36:	141c      	asrs	r4, r3, #16
   16f38:	0c09      	lsrs	r1, r1, #16
   16f3a:	041b      	lsls	r3, r3, #16
   16f3c:	4319      	orrs	r1, r3
   16f3e:	c002      	stmia	r0!, {r1}
   16f40:	45b9      	cmp	r9, r7
   16f42:	d2df      	bcs.n	16f04 <quorem+0x68>
   16f44:	9b03      	ldr	r3, [sp, #12]
   16f46:	464e      	mov	r6, r9
   16f48:	4699      	mov	r9, r3
   16f4a:	465b      	mov	r3, fp
   16f4c:	681b      	ldr	r3, [r3, #0]
   16f4e:	4654      	mov	r4, sl
   16f50:	2b00      	cmp	r3, #0
   16f52:	d10e      	bne.n	16f72 <quorem+0xd6>
   16f54:	465b      	mov	r3, fp
   16f56:	9a01      	ldr	r2, [sp, #4]
   16f58:	3b04      	subs	r3, #4
   16f5a:	429a      	cmp	r2, r3
   16f5c:	d304      	bcc.n	16f68 <quorem+0xcc>
   16f5e:	e006      	b.n	16f6e <quorem+0xd2>
   16f60:	3b04      	subs	r3, #4
   16f62:	3c01      	subs	r4, #1
   16f64:	429a      	cmp	r2, r3
   16f66:	d202      	bcs.n	16f6e <quorem+0xd2>
   16f68:	6819      	ldr	r1, [r3, #0]
   16f6a:	2900      	cmp	r1, #0
   16f6c:	d0f8      	beq.n	16f60 <quorem+0xc4>
   16f6e:	4643      	mov	r3, r8
   16f70:	611c      	str	r4, [r3, #16]
   16f72:	9902      	ldr	r1, [sp, #8]
   16f74:	4640      	mov	r0, r8
   16f76:	f002 fa51 	bl	1941c <__mcmp>
   16f7a:	2800      	cmp	r0, #0
   16f7c:	db2f      	blt.n	16fde <quorem+0x142>
   16f7e:	464f      	mov	r7, r9
   16f80:	2000      	movs	r0, #0
   16f82:	9b00      	ldr	r3, [sp, #0]
   16f84:	9d01      	ldr	r5, [sp, #4]
   16f86:	3301      	adds	r3, #1
   16f88:	9300      	str	r3, [sp, #0]
   16f8a:	682b      	ldr	r3, [r5, #0]
   16f8c:	cf02      	ldmia	r7!, {r1}
   16f8e:	041a      	lsls	r2, r3, #16
   16f90:	0c12      	lsrs	r2, r2, #16
   16f92:	1810      	adds	r0, r2, r0
   16f94:	040a      	lsls	r2, r1, #16
   16f96:	0c12      	lsrs	r2, r2, #16
   16f98:	1a82      	subs	r2, r0, r2
   16f9a:	0c09      	lsrs	r1, r1, #16
   16f9c:	0c1b      	lsrs	r3, r3, #16
   16f9e:	1a5b      	subs	r3, r3, r1
   16fa0:	1411      	asrs	r1, r2, #16
   16fa2:	185b      	adds	r3, r3, r1
   16fa4:	0412      	lsls	r2, r2, #16
   16fa6:	1418      	asrs	r0, r3, #16
   16fa8:	0c12      	lsrs	r2, r2, #16
   16faa:	041b      	lsls	r3, r3, #16
   16fac:	4313      	orrs	r3, r2
   16fae:	c508      	stmia	r5!, {r3}
   16fb0:	42be      	cmp	r6, r7
   16fb2:	d2ea      	bcs.n	16f8a <quorem+0xee>
   16fb4:	9901      	ldr	r1, [sp, #4]
   16fb6:	00a3      	lsls	r3, r4, #2
   16fb8:	468c      	mov	ip, r1
   16fba:	4463      	add	r3, ip
   16fbc:	681a      	ldr	r2, [r3, #0]
   16fbe:	2a00      	cmp	r2, #0
   16fc0:	d10d      	bne.n	16fde <quorem+0x142>
   16fc2:	3b04      	subs	r3, #4
   16fc4:	000a      	movs	r2, r1
   16fc6:	4299      	cmp	r1, r3
   16fc8:	d304      	bcc.n	16fd4 <quorem+0x138>
   16fca:	e006      	b.n	16fda <quorem+0x13e>
   16fcc:	3b04      	subs	r3, #4
   16fce:	3c01      	subs	r4, #1
   16fd0:	429a      	cmp	r2, r3
   16fd2:	d202      	bcs.n	16fda <quorem+0x13e>
   16fd4:	6819      	ldr	r1, [r3, #0]
   16fd6:	2900      	cmp	r1, #0
   16fd8:	d0f8      	beq.n	16fcc <quorem+0x130>
   16fda:	4643      	mov	r3, r8
   16fdc:	611c      	str	r4, [r3, #16]
   16fde:	9800      	ldr	r0, [sp, #0]
   16fe0:	b005      	add	sp, #20
   16fe2:	bc3c      	pop	{r2, r3, r4, r5}
   16fe4:	4690      	mov	r8, r2
   16fe6:	4699      	mov	r9, r3
   16fe8:	46a2      	mov	sl, r4
   16fea:	46ab      	mov	fp, r5
   16fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fee:	46c0      	nop			; (mov r8, r8)

00016ff0 <_dtoa_r>:
   16ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ff2:	4657      	mov	r7, sl
   16ff4:	464e      	mov	r6, r9
   16ff6:	4645      	mov	r5, r8
   16ff8:	46de      	mov	lr, fp
   16ffa:	b5e0      	push	{r5, r6, r7, lr}
   16ffc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   16ffe:	b099      	sub	sp, #100	; 0x64
   17000:	4682      	mov	sl, r0
   17002:	001d      	movs	r5, r3
   17004:	0016      	movs	r6, r2
   17006:	001f      	movs	r7, r3
   17008:	2900      	cmp	r1, #0
   1700a:	d009      	beq.n	17020 <_dtoa_r+0x30>
   1700c:	2301      	movs	r3, #1
   1700e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17010:	4093      	lsls	r3, r2
   17012:	604a      	str	r2, [r1, #4]
   17014:	608b      	str	r3, [r1, #8]
   17016:	f001 fff5 	bl	19004 <_Bfree>
   1701a:	2300      	movs	r3, #0
   1701c:	4652      	mov	r2, sl
   1701e:	6413      	str	r3, [r2, #64]	; 0x40
   17020:	46b8      	mov	r8, r7
   17022:	2f00      	cmp	r7, #0
   17024:	db37      	blt.n	17096 <_dtoa_r+0xa6>
   17026:	2300      	movs	r3, #0
   17028:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1702a:	6013      	str	r3, [r2, #0]
   1702c:	4642      	mov	r2, r8
   1702e:	4bd6      	ldr	r3, [pc, #856]	; (17388 <_dtoa_r+0x398>)
   17030:	401a      	ands	r2, r3
   17032:	429a      	cmp	r2, r3
   17034:	d018      	beq.n	17068 <_dtoa_r+0x78>
   17036:	2200      	movs	r2, #0
   17038:	2300      	movs	r3, #0
   1703a:	0030      	movs	r0, r6
   1703c:	0039      	movs	r1, r7
   1703e:	f7fc fc5f 	bl	13900 <__aeabi_dcmpeq>
   17042:	2800      	cmp	r0, #0
   17044:	d02f      	beq.n	170a6 <_dtoa_r+0xb6>
   17046:	2301      	movs	r3, #1
   17048:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1704a:	6013      	str	r3, [r2, #0]
   1704c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1704e:	2b00      	cmp	r3, #0
   17050:	d100      	bne.n	17054 <_dtoa_r+0x64>
   17052:	e22a      	b.n	174aa <_dtoa_r+0x4ba>
   17054:	48cd      	ldr	r0, [pc, #820]	; (1738c <_dtoa_r+0x39c>)
   17056:	6018      	str	r0, [r3, #0]
   17058:	3801      	subs	r0, #1
   1705a:	b019      	add	sp, #100	; 0x64
   1705c:	bc3c      	pop	{r2, r3, r4, r5}
   1705e:	4690      	mov	r8, r2
   17060:	4699      	mov	r9, r3
   17062:	46a2      	mov	sl, r4
   17064:	46ab      	mov	fp, r5
   17066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17068:	4bc9      	ldr	r3, [pc, #804]	; (17390 <_dtoa_r+0x3a0>)
   1706a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1706c:	6013      	str	r3, [r2, #0]
   1706e:	2e00      	cmp	r6, #0
   17070:	d10b      	bne.n	1708a <_dtoa_r+0x9a>
   17072:	4643      	mov	r3, r8
   17074:	0318      	lsls	r0, r3, #12
   17076:	d108      	bne.n	1708a <_dtoa_r+0x9a>
   17078:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1707a:	48c6      	ldr	r0, [pc, #792]	; (17394 <_dtoa_r+0x3a4>)
   1707c:	2b00      	cmp	r3, #0
   1707e:	d0ec      	beq.n	1705a <_dtoa_r+0x6a>
   17080:	0003      	movs	r3, r0
   17082:	3308      	adds	r3, #8
   17084:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17086:	6013      	str	r3, [r2, #0]
   17088:	e7e7      	b.n	1705a <_dtoa_r+0x6a>
   1708a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1708c:	48c2      	ldr	r0, [pc, #776]	; (17398 <_dtoa_r+0x3a8>)
   1708e:	2b00      	cmp	r3, #0
   17090:	d0e3      	beq.n	1705a <_dtoa_r+0x6a>
   17092:	1cc3      	adds	r3, r0, #3
   17094:	e7f6      	b.n	17084 <_dtoa_r+0x94>
   17096:	2301      	movs	r3, #1
   17098:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1709a:	0068      	lsls	r0, r5, #1
   1709c:	6013      	str	r3, [r2, #0]
   1709e:	0843      	lsrs	r3, r0, #1
   170a0:	4698      	mov	r8, r3
   170a2:	001f      	movs	r7, r3
   170a4:	e7c2      	b.n	1702c <_dtoa_r+0x3c>
   170a6:	ab16      	add	r3, sp, #88	; 0x58
   170a8:	9301      	str	r3, [sp, #4]
   170aa:	ab17      	add	r3, sp, #92	; 0x5c
   170ac:	9300      	str	r3, [sp, #0]
   170ae:	0032      	movs	r2, r6
   170b0:	003b      	movs	r3, r7
   170b2:	4650      	mov	r0, sl
   170b4:	f002 fa68 	bl	19588 <__d2b>
   170b8:	4643      	mov	r3, r8
   170ba:	4683      	mov	fp, r0
   170bc:	0d1a      	lsrs	r2, r3, #20
   170be:	d100      	bne.n	170c2 <_dtoa_r+0xd2>
   170c0:	e1d6      	b.n	17470 <_dtoa_r+0x480>
   170c2:	033b      	lsls	r3, r7, #12
   170c4:	4cb5      	ldr	r4, [pc, #724]	; (1739c <_dtoa_r+0x3ac>)
   170c6:	0b1b      	lsrs	r3, r3, #12
   170c8:	431c      	orrs	r4, r3
   170ca:	4bb5      	ldr	r3, [pc, #724]	; (173a0 <_dtoa_r+0x3b0>)
   170cc:	0030      	movs	r0, r6
   170ce:	4698      	mov	r8, r3
   170d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   170d2:	0021      	movs	r1, r4
   170d4:	4699      	mov	r9, r3
   170d6:	2300      	movs	r3, #0
   170d8:	4490      	add	r8, r2
   170da:	930f      	str	r3, [sp, #60]	; 0x3c
   170dc:	2200      	movs	r2, #0
   170de:	4bb1      	ldr	r3, [pc, #708]	; (173a4 <_dtoa_r+0x3b4>)
   170e0:	f7fb ff16 	bl	12f10 <__aeabi_dsub>
   170e4:	4ab0      	ldr	r2, [pc, #704]	; (173a8 <_dtoa_r+0x3b8>)
   170e6:	4bb1      	ldr	r3, [pc, #708]	; (173ac <_dtoa_r+0x3bc>)
   170e8:	f7fb fc92 	bl	12a10 <__aeabi_dmul>
   170ec:	4ab0      	ldr	r2, [pc, #704]	; (173b0 <_dtoa_r+0x3c0>)
   170ee:	4bb1      	ldr	r3, [pc, #708]	; (173b4 <_dtoa_r+0x3c4>)
   170f0:	f7fa fe4a 	bl	11d88 <__aeabi_dadd>
   170f4:	0004      	movs	r4, r0
   170f6:	4640      	mov	r0, r8
   170f8:	000d      	movs	r5, r1
   170fa:	f7fc fa53 	bl	135a4 <__aeabi_i2d>
   170fe:	4aae      	ldr	r2, [pc, #696]	; (173b8 <_dtoa_r+0x3c8>)
   17100:	4bae      	ldr	r3, [pc, #696]	; (173bc <_dtoa_r+0x3cc>)
   17102:	f7fb fc85 	bl	12a10 <__aeabi_dmul>
   17106:	0002      	movs	r2, r0
   17108:	000b      	movs	r3, r1
   1710a:	0020      	movs	r0, r4
   1710c:	0029      	movs	r1, r5
   1710e:	f7fa fe3b 	bl	11d88 <__aeabi_dadd>
   17112:	0004      	movs	r4, r0
   17114:	000d      	movs	r5, r1
   17116:	f7fc fa11 	bl	1353c <__aeabi_d2iz>
   1711a:	2200      	movs	r2, #0
   1711c:	9003      	str	r0, [sp, #12]
   1711e:	2300      	movs	r3, #0
   17120:	0020      	movs	r0, r4
   17122:	0029      	movs	r1, r5
   17124:	f7fc fbf2 	bl	1390c <__aeabi_dcmplt>
   17128:	2800      	cmp	r0, #0
   1712a:	d000      	beq.n	1712e <_dtoa_r+0x13e>
   1712c:	e2b1      	b.n	17692 <_dtoa_r+0x6a2>
   1712e:	2301      	movs	r3, #1
   17130:	9c03      	ldr	r4, [sp, #12]
   17132:	930c      	str	r3, [sp, #48]	; 0x30
   17134:	2c16      	cmp	r4, #22
   17136:	d810      	bhi.n	1715a <_dtoa_r+0x16a>
   17138:	49a1      	ldr	r1, [pc, #644]	; (173c0 <_dtoa_r+0x3d0>)
   1713a:	00e3      	lsls	r3, r4, #3
   1713c:	18c9      	adds	r1, r1, r3
   1713e:	0032      	movs	r2, r6
   17140:	6808      	ldr	r0, [r1, #0]
   17142:	6849      	ldr	r1, [r1, #4]
   17144:	003b      	movs	r3, r7
   17146:	f7fc fbf5 	bl	13934 <__aeabi_dcmpgt>
   1714a:	2800      	cmp	r0, #0
   1714c:	d100      	bne.n	17150 <_dtoa_r+0x160>
   1714e:	e31d      	b.n	1778c <_dtoa_r+0x79c>
   17150:	0023      	movs	r3, r4
   17152:	3b01      	subs	r3, #1
   17154:	9303      	str	r3, [sp, #12]
   17156:	2300      	movs	r3, #0
   17158:	930c      	str	r3, [sp, #48]	; 0x30
   1715a:	464b      	mov	r3, r9
   1715c:	4642      	mov	r2, r8
   1715e:	1a9a      	subs	r2, r3, r2
   17160:	2300      	movs	r3, #0
   17162:	9306      	str	r3, [sp, #24]
   17164:	0013      	movs	r3, r2
   17166:	3b01      	subs	r3, #1
   17168:	9304      	str	r3, [sp, #16]
   1716a:	d500      	bpl.n	1716e <_dtoa_r+0x17e>
   1716c:	e2a1      	b.n	176b2 <_dtoa_r+0x6c2>
   1716e:	9b03      	ldr	r3, [sp, #12]
   17170:	2b00      	cmp	r3, #0
   17172:	da00      	bge.n	17176 <_dtoa_r+0x186>
   17174:	e284      	b.n	17680 <_dtoa_r+0x690>
   17176:	469c      	mov	ip, r3
   17178:	930d      	str	r3, [sp, #52]	; 0x34
   1717a:	2300      	movs	r3, #0
   1717c:	9a04      	ldr	r2, [sp, #16]
   1717e:	4699      	mov	r9, r3
   17180:	0011      	movs	r1, r2
   17182:	4461      	add	r1, ip
   17184:	9104      	str	r1, [sp, #16]
   17186:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17188:	2b09      	cmp	r3, #9
   1718a:	d900      	bls.n	1718e <_dtoa_r+0x19e>
   1718c:	e18f      	b.n	174ae <_dtoa_r+0x4be>
   1718e:	2401      	movs	r4, #1
   17190:	2b05      	cmp	r3, #5
   17192:	dd02      	ble.n	1719a <_dtoa_r+0x1aa>
   17194:	2400      	movs	r4, #0
   17196:	3b04      	subs	r3, #4
   17198:	9322      	str	r3, [sp, #136]	; 0x88
   1719a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1719c:	2b03      	cmp	r3, #3
   1719e:	d101      	bne.n	171a4 <_dtoa_r+0x1b4>
   171a0:	f000 fcce 	bl	17b40 <_dtoa_r+0xb50>
   171a4:	dc01      	bgt.n	171aa <_dtoa_r+0x1ba>
   171a6:	f000 fc92 	bl	17ace <_dtoa_r+0xade>
   171aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   171ac:	2b04      	cmp	r3, #4
   171ae:	d101      	bne.n	171b4 <_dtoa_r+0x1c4>
   171b0:	f000 fc40 	bl	17a34 <_dtoa_r+0xa44>
   171b4:	2301      	movs	r3, #1
   171b6:	930b      	str	r3, [sp, #44]	; 0x2c
   171b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   171ba:	2b05      	cmp	r3, #5
   171bc:	d001      	beq.n	171c2 <_dtoa_r+0x1d2>
   171be:	f000 fc8b 	bl	17ad8 <_dtoa_r+0xae8>
   171c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   171c4:	9b03      	ldr	r3, [sp, #12]
   171c6:	4694      	mov	ip, r2
   171c8:	4463      	add	r3, ip
   171ca:	930e      	str	r3, [sp, #56]	; 0x38
   171cc:	3301      	adds	r3, #1
   171ce:	9307      	str	r3, [sp, #28]
   171d0:	1e1d      	subs	r5, r3, #0
   171d2:	dc01      	bgt.n	171d8 <_dtoa_r+0x1e8>
   171d4:	f000 fd49 	bl	17c6a <_dtoa_r+0xc7a>
   171d8:	9b07      	ldr	r3, [sp, #28]
   171da:	4698      	mov	r8, r3
   171dc:	2300      	movs	r3, #0
   171de:	4652      	mov	r2, sl
   171e0:	2100      	movs	r1, #0
   171e2:	6453      	str	r3, [r2, #68]	; 0x44
   171e4:	2d17      	cmp	r5, #23
   171e6:	d90a      	bls.n	171fe <_dtoa_r+0x20e>
   171e8:	2201      	movs	r2, #1
   171ea:	3304      	adds	r3, #4
   171ec:	005b      	lsls	r3, r3, #1
   171ee:	0018      	movs	r0, r3
   171f0:	3014      	adds	r0, #20
   171f2:	0011      	movs	r1, r2
   171f4:	3201      	adds	r2, #1
   171f6:	4285      	cmp	r5, r0
   171f8:	d2f8      	bcs.n	171ec <_dtoa_r+0x1fc>
   171fa:	4653      	mov	r3, sl
   171fc:	6459      	str	r1, [r3, #68]	; 0x44
   171fe:	4650      	mov	r0, sl
   17200:	f001 fed8 	bl	18fb4 <_Balloc>
   17204:	4653      	mov	r3, sl
   17206:	6418      	str	r0, [r3, #64]	; 0x40
   17208:	4643      	mov	r3, r8
   1720a:	900a      	str	r0, [sp, #40]	; 0x28
   1720c:	2b0e      	cmp	r3, #14
   1720e:	d900      	bls.n	17212 <_dtoa_r+0x222>
   17210:	e161      	b.n	174d6 <_dtoa_r+0x4e6>
   17212:	2c00      	cmp	r4, #0
   17214:	d100      	bne.n	17218 <_dtoa_r+0x228>
   17216:	e15e      	b.n	174d6 <_dtoa_r+0x4e6>
   17218:	9610      	str	r6, [sp, #64]	; 0x40
   1721a:	9711      	str	r7, [sp, #68]	; 0x44
   1721c:	9e03      	ldr	r6, [sp, #12]
   1721e:	2e00      	cmp	r6, #0
   17220:	dc01      	bgt.n	17226 <_dtoa_r+0x236>
   17222:	f000 fd25 	bl	17c70 <_dtoa_r+0xc80>
   17226:	0032      	movs	r2, r6
   17228:	210f      	movs	r1, #15
   1722a:	4b65      	ldr	r3, [pc, #404]	; (173c0 <_dtoa_r+0x3d0>)
   1722c:	400a      	ands	r2, r1
   1722e:	00d2      	lsls	r2, r2, #3
   17230:	189b      	adds	r3, r3, r2
   17232:	1136      	asrs	r6, r6, #4
   17234:	681c      	ldr	r4, [r3, #0]
   17236:	685d      	ldr	r5, [r3, #4]
   17238:	06f3      	lsls	r3, r6, #27
   1723a:	d401      	bmi.n	17240 <_dtoa_r+0x250>
   1723c:	f000 fcca 	bl	17bd4 <_dtoa_r+0xbe4>
   17240:	4b60      	ldr	r3, [pc, #384]	; (173c4 <_dtoa_r+0x3d4>)
   17242:	400e      	ands	r6, r1
   17244:	6a1a      	ldr	r2, [r3, #32]
   17246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17248:	9810      	ldr	r0, [sp, #64]	; 0x40
   1724a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1724c:	f7fb f8ac 	bl	123a8 <__aeabi_ddiv>
   17250:	2303      	movs	r3, #3
   17252:	4698      	mov	r8, r3
   17254:	9008      	str	r0, [sp, #32]
   17256:	9109      	str	r1, [sp, #36]	; 0x24
   17258:	2e00      	cmp	r6, #0
   1725a:	d011      	beq.n	17280 <_dtoa_r+0x290>
   1725c:	4f59      	ldr	r7, [pc, #356]	; (173c4 <_dtoa_r+0x3d4>)
   1725e:	2301      	movs	r3, #1
   17260:	4233      	tst	r3, r6
   17262:	d009      	beq.n	17278 <_dtoa_r+0x288>
   17264:	469c      	mov	ip, r3
   17266:	683a      	ldr	r2, [r7, #0]
   17268:	687b      	ldr	r3, [r7, #4]
   1726a:	0020      	movs	r0, r4
   1726c:	0029      	movs	r1, r5
   1726e:	44e0      	add	r8, ip
   17270:	f7fb fbce 	bl	12a10 <__aeabi_dmul>
   17274:	0004      	movs	r4, r0
   17276:	000d      	movs	r5, r1
   17278:	1076      	asrs	r6, r6, #1
   1727a:	3708      	adds	r7, #8
   1727c:	2e00      	cmp	r6, #0
   1727e:	d1ee      	bne.n	1725e <_dtoa_r+0x26e>
   17280:	0022      	movs	r2, r4
   17282:	9808      	ldr	r0, [sp, #32]
   17284:	9909      	ldr	r1, [sp, #36]	; 0x24
   17286:	002b      	movs	r3, r5
   17288:	f7fb f88e 	bl	123a8 <__aeabi_ddiv>
   1728c:	0006      	movs	r6, r0
   1728e:	000f      	movs	r7, r1
   17290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17292:	2b00      	cmp	r3, #0
   17294:	d009      	beq.n	172aa <_dtoa_r+0x2ba>
   17296:	2200      	movs	r2, #0
   17298:	4b40      	ldr	r3, [pc, #256]	; (1739c <_dtoa_r+0x3ac>)
   1729a:	0030      	movs	r0, r6
   1729c:	0039      	movs	r1, r7
   1729e:	f7fc fb35 	bl	1390c <__aeabi_dcmplt>
   172a2:	2800      	cmp	r0, #0
   172a4:	d001      	beq.n	172aa <_dtoa_r+0x2ba>
   172a6:	f000 fdc2 	bl	17e2e <_dtoa_r+0xe3e>
   172aa:	4640      	mov	r0, r8
   172ac:	f7fc f97a 	bl	135a4 <__aeabi_i2d>
   172b0:	0032      	movs	r2, r6
   172b2:	003b      	movs	r3, r7
   172b4:	f7fb fbac 	bl	12a10 <__aeabi_dmul>
   172b8:	2200      	movs	r2, #0
   172ba:	4b43      	ldr	r3, [pc, #268]	; (173c8 <_dtoa_r+0x3d8>)
   172bc:	f7fa fd64 	bl	11d88 <__aeabi_dadd>
   172c0:	4a42      	ldr	r2, [pc, #264]	; (173cc <_dtoa_r+0x3dc>)
   172c2:	000b      	movs	r3, r1
   172c4:	4694      	mov	ip, r2
   172c6:	4463      	add	r3, ip
   172c8:	9008      	str	r0, [sp, #32]
   172ca:	9109      	str	r1, [sp, #36]	; 0x24
   172cc:	9309      	str	r3, [sp, #36]	; 0x24
   172ce:	9b07      	ldr	r3, [sp, #28]
   172d0:	2b00      	cmp	r3, #0
   172d2:	d101      	bne.n	172d8 <_dtoa_r+0x2e8>
   172d4:	f000 fc50 	bl	17b78 <_dtoa_r+0xb88>
   172d8:	9b03      	ldr	r3, [sp, #12]
   172da:	9313      	str	r3, [sp, #76]	; 0x4c
   172dc:	9b07      	ldr	r3, [sp, #28]
   172de:	9312      	str	r3, [sp, #72]	; 0x48
   172e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   172e2:	2b00      	cmp	r3, #0
   172e4:	d101      	bne.n	172ea <_dtoa_r+0x2fa>
   172e6:	f000 fd1d 	bl	17d24 <_dtoa_r+0xd34>
   172ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   172ec:	2000      	movs	r0, #0
   172ee:	1e5a      	subs	r2, r3, #1
   172f0:	4b33      	ldr	r3, [pc, #204]	; (173c0 <_dtoa_r+0x3d0>)
   172f2:	00d2      	lsls	r2, r2, #3
   172f4:	189b      	adds	r3, r3, r2
   172f6:	681a      	ldr	r2, [r3, #0]
   172f8:	685b      	ldr	r3, [r3, #4]
   172fa:	4935      	ldr	r1, [pc, #212]	; (173d0 <_dtoa_r+0x3e0>)
   172fc:	f7fb f854 	bl	123a8 <__aeabi_ddiv>
   17300:	9a08      	ldr	r2, [sp, #32]
   17302:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17304:	f7fb fe04 	bl	12f10 <__aeabi_dsub>
   17308:	9008      	str	r0, [sp, #32]
   1730a:	9109      	str	r1, [sp, #36]	; 0x24
   1730c:	0039      	movs	r1, r7
   1730e:	0030      	movs	r0, r6
   17310:	f7fc f914 	bl	1353c <__aeabi_d2iz>
   17314:	0004      	movs	r4, r0
   17316:	f7fc f945 	bl	135a4 <__aeabi_i2d>
   1731a:	0002      	movs	r2, r0
   1731c:	000b      	movs	r3, r1
   1731e:	0030      	movs	r0, r6
   17320:	0039      	movs	r1, r7
   17322:	f7fb fdf5 	bl	12f10 <__aeabi_dsub>
   17326:	0005      	movs	r5, r0
   17328:	000e      	movs	r6, r1
   1732a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1732c:	3430      	adds	r4, #48	; 0x30
   1732e:	1c51      	adds	r1, r2, #1
   17330:	b2e7      	uxtb	r7, r4
   17332:	9114      	str	r1, [sp, #80]	; 0x50
   17334:	7017      	strb	r7, [r2, #0]
   17336:	0033      	movs	r3, r6
   17338:	9808      	ldr	r0, [sp, #32]
   1733a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1733c:	002a      	movs	r2, r5
   1733e:	f7fc faf9 	bl	13934 <__aeabi_dcmpgt>
   17342:	2800      	cmp	r0, #0
   17344:	d001      	beq.n	1734a <_dtoa_r+0x35a>
   17346:	f000 fdfe 	bl	17f46 <_dtoa_r+0xf56>
   1734a:	002a      	movs	r2, r5
   1734c:	0033      	movs	r3, r6
   1734e:	2000      	movs	r0, #0
   17350:	4912      	ldr	r1, [pc, #72]	; (1739c <_dtoa_r+0x3ac>)
   17352:	f7fb fddd 	bl	12f10 <__aeabi_dsub>
   17356:	0002      	movs	r2, r0
   17358:	000b      	movs	r3, r1
   1735a:	9808      	ldr	r0, [sp, #32]
   1735c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1735e:	f7fc fae9 	bl	13934 <__aeabi_dcmpgt>
   17362:	2800      	cmp	r0, #0
   17364:	d001      	beq.n	1736a <_dtoa_r+0x37a>
   17366:	f000 fde7 	bl	17f38 <_dtoa_r+0xf48>
   1736a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1736c:	2b01      	cmp	r3, #1
   1736e:	d101      	bne.n	17374 <_dtoa_r+0x384>
   17370:	f000 fc78 	bl	17c64 <_dtoa_r+0xc74>
   17374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17376:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17378:	4694      	mov	ip, r2
   1737a:	4463      	add	r3, ip
   1737c:	4698      	mov	r8, r3
   1737e:	464b      	mov	r3, r9
   17380:	9312      	str	r3, [sp, #72]	; 0x48
   17382:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17384:	4699      	mov	r9, r3
   17386:	e038      	b.n	173fa <_dtoa_r+0x40a>
   17388:	7ff00000 	.word	0x7ff00000
   1738c:	0001b171 	.word	0x0001b171
   17390:	0000270f 	.word	0x0000270f
   17394:	0001b318 	.word	0x0001b318
   17398:	0001b324 	.word	0x0001b324
   1739c:	3ff00000 	.word	0x3ff00000
   173a0:	fffffc01 	.word	0xfffffc01
   173a4:	3ff80000 	.word	0x3ff80000
   173a8:	636f4361 	.word	0x636f4361
   173ac:	3fd287a7 	.word	0x3fd287a7
   173b0:	8b60c8b3 	.word	0x8b60c8b3
   173b4:	3fc68a28 	.word	0x3fc68a28
   173b8:	509f79fb 	.word	0x509f79fb
   173bc:	3fd34413 	.word	0x3fd34413
   173c0:	0001b350 	.word	0x0001b350
   173c4:	0001b328 	.word	0x0001b328
   173c8:	401c0000 	.word	0x401c0000
   173cc:	fcc00000 	.word	0xfcc00000
   173d0:	3fe00000 	.word	0x3fe00000
   173d4:	002a      	movs	r2, r5
   173d6:	0033      	movs	r3, r6
   173d8:	2000      	movs	r0, #0
   173da:	49b9      	ldr	r1, [pc, #740]	; (176c0 <_dtoa_r+0x6d0>)
   173dc:	f7fb fd98 	bl	12f10 <__aeabi_dsub>
   173e0:	9a08      	ldr	r2, [sp, #32]
   173e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   173e4:	f7fc fa92 	bl	1390c <__aeabi_dcmplt>
   173e8:	2800      	cmp	r0, #0
   173ea:	d001      	beq.n	173f0 <_dtoa_r+0x400>
   173ec:	f000 fd74 	bl	17ed8 <_dtoa_r+0xee8>
   173f0:	46a1      	mov	r9, r4
   173f2:	4544      	cmp	r4, r8
   173f4:	d101      	bne.n	173fa <_dtoa_r+0x40a>
   173f6:	f000 fc33 	bl	17c60 <_dtoa_r+0xc70>
   173fa:	9808      	ldr	r0, [sp, #32]
   173fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   173fe:	2200      	movs	r2, #0
   17400:	4bb0      	ldr	r3, [pc, #704]	; (176c4 <_dtoa_r+0x6d4>)
   17402:	f7fb fb05 	bl	12a10 <__aeabi_dmul>
   17406:	2200      	movs	r2, #0
   17408:	4bae      	ldr	r3, [pc, #696]	; (176c4 <_dtoa_r+0x6d4>)
   1740a:	9008      	str	r0, [sp, #32]
   1740c:	9109      	str	r1, [sp, #36]	; 0x24
   1740e:	0028      	movs	r0, r5
   17410:	0031      	movs	r1, r6
   17412:	f7fb fafd 	bl	12a10 <__aeabi_dmul>
   17416:	000d      	movs	r5, r1
   17418:	0004      	movs	r4, r0
   1741a:	f7fc f88f 	bl	1353c <__aeabi_d2iz>
   1741e:	0007      	movs	r7, r0
   17420:	f7fc f8c0 	bl	135a4 <__aeabi_i2d>
   17424:	0002      	movs	r2, r0
   17426:	000b      	movs	r3, r1
   17428:	0020      	movs	r0, r4
   1742a:	0029      	movs	r1, r5
   1742c:	f7fb fd70 	bl	12f10 <__aeabi_dsub>
   17430:	464b      	mov	r3, r9
   17432:	3730      	adds	r7, #48	; 0x30
   17434:	b2ff      	uxtb	r7, r7
   17436:	1c5c      	adds	r4, r3, #1
   17438:	701f      	strb	r7, [r3, #0]
   1743a:	9a08      	ldr	r2, [sp, #32]
   1743c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1743e:	0005      	movs	r5, r0
   17440:	000e      	movs	r6, r1
   17442:	f7fc fa63 	bl	1390c <__aeabi_dcmplt>
   17446:	2800      	cmp	r0, #0
   17448:	d0c4      	beq.n	173d4 <_dtoa_r+0x3e4>
   1744a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1744c:	9303      	str	r3, [sp, #12]
   1744e:	4659      	mov	r1, fp
   17450:	4650      	mov	r0, sl
   17452:	f001 fdd7 	bl	19004 <_Bfree>
   17456:	2300      	movs	r3, #0
   17458:	7023      	strb	r3, [r4, #0]
   1745a:	9b03      	ldr	r3, [sp, #12]
   1745c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1745e:	3301      	adds	r3, #1
   17460:	6013      	str	r3, [r2, #0]
   17462:	9b26      	ldr	r3, [sp, #152]	; 0x98
   17464:	2b00      	cmp	r3, #0
   17466:	d100      	bne.n	1746a <_dtoa_r+0x47a>
   17468:	e3a8      	b.n	17bbc <_dtoa_r+0xbcc>
   1746a:	601c      	str	r4, [r3, #0]
   1746c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1746e:	e5f4      	b.n	1705a <_dtoa_r+0x6a>
   17470:	9b16      	ldr	r3, [sp, #88]	; 0x58
   17472:	4699      	mov	r9, r3
   17474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   17476:	444b      	add	r3, r9
   17478:	001c      	movs	r4, r3
   1747a:	4b93      	ldr	r3, [pc, #588]	; (176c8 <_dtoa_r+0x6d8>)
   1747c:	18e3      	adds	r3, r4, r3
   1747e:	2b20      	cmp	r3, #32
   17480:	dc00      	bgt.n	17484 <_dtoa_r+0x494>
   17482:	e17e      	b.n	17782 <_dtoa_r+0x792>
   17484:	0031      	movs	r1, r6
   17486:	4a91      	ldr	r2, [pc, #580]	; (176cc <_dtoa_r+0x6dc>)
   17488:	4640      	mov	r0, r8
   1748a:	18a2      	adds	r2, r4, r2
   1748c:	40d1      	lsrs	r1, r2
   1748e:	000a      	movs	r2, r1
   17490:	2140      	movs	r1, #64	; 0x40
   17492:	1acb      	subs	r3, r1, r3
   17494:	4098      	lsls	r0, r3
   17496:	4310      	orrs	r0, r2
   17498:	f7fc f8c6 	bl	13628 <__aeabi_ui2d>
   1749c:	1e63      	subs	r3, r4, #1
   1749e:	4698      	mov	r8, r3
   174a0:	2301      	movs	r3, #1
   174a2:	4d8b      	ldr	r5, [pc, #556]	; (176d0 <_dtoa_r+0x6e0>)
   174a4:	930f      	str	r3, [sp, #60]	; 0x3c
   174a6:	1949      	adds	r1, r1, r5
   174a8:	e618      	b.n	170dc <_dtoa_r+0xec>
   174aa:	488a      	ldr	r0, [pc, #552]	; (176d4 <_dtoa_r+0x6e4>)
   174ac:	e5d5      	b.n	1705a <_dtoa_r+0x6a>
   174ae:	2300      	movs	r3, #0
   174b0:	4652      	mov	r2, sl
   174b2:	2100      	movs	r1, #0
   174b4:	6453      	str	r3, [r2, #68]	; 0x44
   174b6:	4650      	mov	r0, sl
   174b8:	f001 fd7c 	bl	18fb4 <_Balloc>
   174bc:	4653      	mov	r3, sl
   174be:	6418      	str	r0, [r3, #64]	; 0x40
   174c0:	2301      	movs	r3, #1
   174c2:	425b      	negs	r3, r3
   174c4:	9307      	str	r3, [sp, #28]
   174c6:	930e      	str	r3, [sp, #56]	; 0x38
   174c8:	3302      	adds	r3, #2
   174ca:	2200      	movs	r2, #0
   174cc:	930b      	str	r3, [sp, #44]	; 0x2c
   174ce:	2300      	movs	r3, #0
   174d0:	900a      	str	r0, [sp, #40]	; 0x28
   174d2:	9223      	str	r2, [sp, #140]	; 0x8c
   174d4:	9322      	str	r3, [sp, #136]	; 0x88
   174d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   174d8:	2b00      	cmp	r3, #0
   174da:	da00      	bge.n	174de <_dtoa_r+0x4ee>
   174dc:	e0ab      	b.n	17636 <_dtoa_r+0x646>
   174de:	9a03      	ldr	r2, [sp, #12]
   174e0:	2a0e      	cmp	r2, #14
   174e2:	dd00      	ble.n	174e6 <_dtoa_r+0x4f6>
   174e4:	e0a7      	b.n	17636 <_dtoa_r+0x646>
   174e6:	4b7c      	ldr	r3, [pc, #496]	; (176d8 <_dtoa_r+0x6e8>)
   174e8:	00d2      	lsls	r2, r2, #3
   174ea:	189b      	adds	r3, r3, r2
   174ec:	685c      	ldr	r4, [r3, #4]
   174ee:	681b      	ldr	r3, [r3, #0]
   174f0:	9304      	str	r3, [sp, #16]
   174f2:	9405      	str	r4, [sp, #20]
   174f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   174f6:	2b00      	cmp	r3, #0
   174f8:	da00      	bge.n	174fc <_dtoa_r+0x50c>
   174fa:	e2a7      	b.n	17a4c <_dtoa_r+0xa5c>
   174fc:	9c04      	ldr	r4, [sp, #16]
   174fe:	9d05      	ldr	r5, [sp, #20]
   17500:	0030      	movs	r0, r6
   17502:	0022      	movs	r2, r4
   17504:	002b      	movs	r3, r5
   17506:	0039      	movs	r1, r7
   17508:	f7fa ff4e 	bl	123a8 <__aeabi_ddiv>
   1750c:	f7fc f816 	bl	1353c <__aeabi_d2iz>
   17510:	4680      	mov	r8, r0
   17512:	f7fc f847 	bl	135a4 <__aeabi_i2d>
   17516:	0022      	movs	r2, r4
   17518:	002b      	movs	r3, r5
   1751a:	f7fb fa79 	bl	12a10 <__aeabi_dmul>
   1751e:	0002      	movs	r2, r0
   17520:	000b      	movs	r3, r1
   17522:	0030      	movs	r0, r6
   17524:	0039      	movs	r1, r7
   17526:	f7fb fcf3 	bl	12f10 <__aeabi_dsub>
   1752a:	4643      	mov	r3, r8
   1752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1752e:	3330      	adds	r3, #48	; 0x30
   17530:	7013      	strb	r3, [r2, #0]
   17532:	9b07      	ldr	r3, [sp, #28]
   17534:	0006      	movs	r6, r0
   17536:	000f      	movs	r7, r1
   17538:	1c54      	adds	r4, r2, #1
   1753a:	2b01      	cmp	r3, #1
   1753c:	d04e      	beq.n	175dc <_dtoa_r+0x5ec>
   1753e:	2200      	movs	r2, #0
   17540:	4b60      	ldr	r3, [pc, #384]	; (176c4 <_dtoa_r+0x6d4>)
   17542:	f7fb fa65 	bl	12a10 <__aeabi_dmul>
   17546:	2200      	movs	r2, #0
   17548:	2300      	movs	r3, #0
   1754a:	0006      	movs	r6, r0
   1754c:	000f      	movs	r7, r1
   1754e:	f7fc f9d7 	bl	13900 <__aeabi_dcmpeq>
   17552:	2800      	cmp	r0, #0
   17554:	d000      	beq.n	17558 <_dtoa_r+0x568>
   17556:	e77a      	b.n	1744e <_dtoa_r+0x45e>
   17558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1755a:	9a07      	ldr	r2, [sp, #28]
   1755c:	1c9d      	adds	r5, r3, #2
   1755e:	469c      	mov	ip, r3
   17560:	465b      	mov	r3, fp
   17562:	9306      	str	r3, [sp, #24]
   17564:	4653      	mov	r3, sl
   17566:	4462      	add	r2, ip
   17568:	46aa      	mov	sl, r5
   1756a:	9c04      	ldr	r4, [sp, #16]
   1756c:	9d05      	ldr	r5, [sp, #20]
   1756e:	4691      	mov	r9, r2
   17570:	9307      	str	r3, [sp, #28]
   17572:	e00f      	b.n	17594 <_dtoa_r+0x5a4>
   17574:	2200      	movs	r2, #0
   17576:	4b53      	ldr	r3, [pc, #332]	; (176c4 <_dtoa_r+0x6d4>)
   17578:	f7fb fa4a 	bl	12a10 <__aeabi_dmul>
   1757c:	2301      	movs	r3, #1
   1757e:	469c      	mov	ip, r3
   17580:	2200      	movs	r2, #0
   17582:	2300      	movs	r3, #0
   17584:	0006      	movs	r6, r0
   17586:	000f      	movs	r7, r1
   17588:	44e2      	add	sl, ip
   1758a:	f7fc f9b9 	bl	13900 <__aeabi_dcmpeq>
   1758e:	2800      	cmp	r0, #0
   17590:	d000      	beq.n	17594 <_dtoa_r+0x5a4>
   17592:	e2d9      	b.n	17b48 <_dtoa_r+0xb58>
   17594:	0022      	movs	r2, r4
   17596:	002b      	movs	r3, r5
   17598:	0030      	movs	r0, r6
   1759a:	0039      	movs	r1, r7
   1759c:	f7fa ff04 	bl	123a8 <__aeabi_ddiv>
   175a0:	f7fb ffcc 	bl	1353c <__aeabi_d2iz>
   175a4:	4680      	mov	r8, r0
   175a6:	f7fb fffd 	bl	135a4 <__aeabi_i2d>
   175aa:	0022      	movs	r2, r4
   175ac:	002b      	movs	r3, r5
   175ae:	f7fb fa2f 	bl	12a10 <__aeabi_dmul>
   175b2:	0002      	movs	r2, r0
   175b4:	000b      	movs	r3, r1
   175b6:	0030      	movs	r0, r6
   175b8:	0039      	movs	r1, r7
   175ba:	f7fb fca9 	bl	12f10 <__aeabi_dsub>
   175be:	4653      	mov	r3, sl
   175c0:	4642      	mov	r2, r8
   175c2:	3b01      	subs	r3, #1
   175c4:	3230      	adds	r2, #48	; 0x30
   175c6:	0006      	movs	r6, r0
   175c8:	000f      	movs	r7, r1
   175ca:	46d3      	mov	fp, sl
   175cc:	701a      	strb	r2, [r3, #0]
   175ce:	45d1      	cmp	r9, sl
   175d0:	d1d0      	bne.n	17574 <_dtoa_r+0x584>
   175d2:	9b06      	ldr	r3, [sp, #24]
   175d4:	4654      	mov	r4, sl
   175d6:	469b      	mov	fp, r3
   175d8:	9b07      	ldr	r3, [sp, #28]
   175da:	469a      	mov	sl, r3
   175dc:	0032      	movs	r2, r6
   175de:	003b      	movs	r3, r7
   175e0:	0030      	movs	r0, r6
   175e2:	0039      	movs	r1, r7
   175e4:	f7fa fbd0 	bl	11d88 <__aeabi_dadd>
   175e8:	0006      	movs	r6, r0
   175ea:	000f      	movs	r7, r1
   175ec:	0002      	movs	r2, r0
   175ee:	000b      	movs	r3, r1
   175f0:	9804      	ldr	r0, [sp, #16]
   175f2:	9905      	ldr	r1, [sp, #20]
   175f4:	f7fc f98a 	bl	1390c <__aeabi_dcmplt>
   175f8:	2800      	cmp	r0, #0
   175fa:	d10c      	bne.n	17616 <_dtoa_r+0x626>
   175fc:	9804      	ldr	r0, [sp, #16]
   175fe:	9905      	ldr	r1, [sp, #20]
   17600:	0032      	movs	r2, r6
   17602:	003b      	movs	r3, r7
   17604:	f7fc f97c 	bl	13900 <__aeabi_dcmpeq>
   17608:	2800      	cmp	r0, #0
   1760a:	d100      	bne.n	1760e <_dtoa_r+0x61e>
   1760c:	e71f      	b.n	1744e <_dtoa_r+0x45e>
   1760e:	4643      	mov	r3, r8
   17610:	07db      	lsls	r3, r3, #31
   17612:	d400      	bmi.n	17616 <_dtoa_r+0x626>
   17614:	e71b      	b.n	1744e <_dtoa_r+0x45e>
   17616:	1e65      	subs	r5, r4, #1
   17618:	782f      	ldrb	r7, [r5, #0]
   1761a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1761c:	e006      	b.n	1762c <_dtoa_r+0x63c>
   1761e:	429d      	cmp	r5, r3
   17620:	d100      	bne.n	17624 <_dtoa_r+0x634>
   17622:	e351      	b.n	17cc8 <_dtoa_r+0xcd8>
   17624:	3c02      	subs	r4, #2
   17626:	7827      	ldrb	r7, [r4, #0]
   17628:	002c      	movs	r4, r5
   1762a:	3d01      	subs	r5, #1
   1762c:	2f39      	cmp	r7, #57	; 0x39
   1762e:	d0f6      	beq.n	1761e <_dtoa_r+0x62e>
   17630:	3701      	adds	r7, #1
   17632:	702f      	strb	r7, [r5, #0]
   17634:	e70b      	b.n	1744e <_dtoa_r+0x45e>
   17636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17638:	2a00      	cmp	r2, #0
   1763a:	d04f      	beq.n	176dc <_dtoa_r+0x6ec>
   1763c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1763e:	2a01      	cmp	r2, #1
   17640:	dc00      	bgt.n	17644 <_dtoa_r+0x654>
   17642:	e22c      	b.n	17a9e <_dtoa_r+0xaae>
   17644:	9b07      	ldr	r3, [sp, #28]
   17646:	1e5c      	subs	r4, r3, #1
   17648:	464b      	mov	r3, r9
   1764a:	45a1      	cmp	r9, r4
   1764c:	da00      	bge.n	17650 <_dtoa_r+0x660>
   1764e:	e2b8      	b.n	17bc2 <_dtoa_r+0xbd2>
   17650:	1b1c      	subs	r4, r3, r4
   17652:	9b07      	ldr	r3, [sp, #28]
   17654:	2b00      	cmp	r3, #0
   17656:	da00      	bge.n	1765a <_dtoa_r+0x66a>
   17658:	e3d4      	b.n	17e04 <_dtoa_r+0xe14>
   1765a:	9b06      	ldr	r3, [sp, #24]
   1765c:	9308      	str	r3, [sp, #32]
   1765e:	9b07      	ldr	r3, [sp, #28]
   17660:	9a06      	ldr	r2, [sp, #24]
   17662:	2101      	movs	r1, #1
   17664:	4694      	mov	ip, r2
   17666:	449c      	add	ip, r3
   17668:	4662      	mov	r2, ip
   1766a:	9206      	str	r2, [sp, #24]
   1766c:	9a04      	ldr	r2, [sp, #16]
   1766e:	4650      	mov	r0, sl
   17670:	4694      	mov	ip, r2
   17672:	449c      	add	ip, r3
   17674:	4663      	mov	r3, ip
   17676:	9304      	str	r3, [sp, #16]
   17678:	f001 fd5c 	bl	19134 <__i2b>
   1767c:	4680      	mov	r8, r0
   1767e:	e032      	b.n	176e6 <_dtoa_r+0x6f6>
   17680:	9a06      	ldr	r2, [sp, #24]
   17682:	9b03      	ldr	r3, [sp, #12]
   17684:	1ad2      	subs	r2, r2, r3
   17686:	425b      	negs	r3, r3
   17688:	4699      	mov	r9, r3
   1768a:	2300      	movs	r3, #0
   1768c:	9206      	str	r2, [sp, #24]
   1768e:	930d      	str	r3, [sp, #52]	; 0x34
   17690:	e579      	b.n	17186 <_dtoa_r+0x196>
   17692:	9803      	ldr	r0, [sp, #12]
   17694:	f7fb ff86 	bl	135a4 <__aeabi_i2d>
   17698:	000b      	movs	r3, r1
   1769a:	0002      	movs	r2, r0
   1769c:	0029      	movs	r1, r5
   1769e:	0020      	movs	r0, r4
   176a0:	f7fc f92e 	bl	13900 <__aeabi_dcmpeq>
   176a4:	0002      	movs	r2, r0
   176a6:	4250      	negs	r0, r2
   176a8:	4150      	adcs	r0, r2
   176aa:	9b03      	ldr	r3, [sp, #12]
   176ac:	1a1b      	subs	r3, r3, r0
   176ae:	9303      	str	r3, [sp, #12]
   176b0:	e53d      	b.n	1712e <_dtoa_r+0x13e>
   176b2:	2301      	movs	r3, #1
   176b4:	1a9b      	subs	r3, r3, r2
   176b6:	9306      	str	r3, [sp, #24]
   176b8:	2300      	movs	r3, #0
   176ba:	9304      	str	r3, [sp, #16]
   176bc:	e557      	b.n	1716e <_dtoa_r+0x17e>
   176be:	46c0      	nop			; (mov r8, r8)
   176c0:	3ff00000 	.word	0x3ff00000
   176c4:	40240000 	.word	0x40240000
   176c8:	00000432 	.word	0x00000432
   176cc:	00000412 	.word	0x00000412
   176d0:	fe100000 	.word	0xfe100000
   176d4:	0001b170 	.word	0x0001b170
   176d8:	0001b350 	.word	0x0001b350
   176dc:	9b06      	ldr	r3, [sp, #24]
   176de:	464c      	mov	r4, r9
   176e0:	9308      	str	r3, [sp, #32]
   176e2:	2300      	movs	r3, #0
   176e4:	4698      	mov	r8, r3
   176e6:	9908      	ldr	r1, [sp, #32]
   176e8:	1e0b      	subs	r3, r1, #0
   176ea:	dd0e      	ble.n	1770a <_dtoa_r+0x71a>
   176ec:	9a04      	ldr	r2, [sp, #16]
   176ee:	2a00      	cmp	r2, #0
   176f0:	dd0b      	ble.n	1770a <_dtoa_r+0x71a>
   176f2:	4293      	cmp	r3, r2
   176f4:	dd00      	ble.n	176f8 <_dtoa_r+0x708>
   176f6:	e187      	b.n	17a08 <_dtoa_r+0xa18>
   176f8:	9a06      	ldr	r2, [sp, #24]
   176fa:	1ad2      	subs	r2, r2, r3
   176fc:	9206      	str	r2, [sp, #24]
   176fe:	9a08      	ldr	r2, [sp, #32]
   17700:	1ad2      	subs	r2, r2, r3
   17702:	9208      	str	r2, [sp, #32]
   17704:	9a04      	ldr	r2, [sp, #16]
   17706:	1ad3      	subs	r3, r2, r3
   17708:	9304      	str	r3, [sp, #16]
   1770a:	464b      	mov	r3, r9
   1770c:	2b00      	cmp	r3, #0
   1770e:	d01a      	beq.n	17746 <_dtoa_r+0x756>
   17710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17712:	2b00      	cmp	r3, #0
   17714:	d100      	bne.n	17718 <_dtoa_r+0x728>
   17716:	e1bb      	b.n	17a90 <_dtoa_r+0xaa0>
   17718:	2c00      	cmp	r4, #0
   1771a:	dd10      	ble.n	1773e <_dtoa_r+0x74e>
   1771c:	4641      	mov	r1, r8
   1771e:	0022      	movs	r2, r4
   17720:	4650      	mov	r0, sl
   17722:	f001 fdbb 	bl	1929c <__pow5mult>
   17726:	465a      	mov	r2, fp
   17728:	0001      	movs	r1, r0
   1772a:	4680      	mov	r8, r0
   1772c:	4650      	mov	r0, sl
   1772e:	f001 fd0b 	bl	19148 <__multiply>
   17732:	0005      	movs	r5, r0
   17734:	4659      	mov	r1, fp
   17736:	4650      	mov	r0, sl
   17738:	f001 fc64 	bl	19004 <_Bfree>
   1773c:	46ab      	mov	fp, r5
   1773e:	464b      	mov	r3, r9
   17740:	1b1a      	subs	r2, r3, r4
   17742:	d000      	beq.n	17746 <_dtoa_r+0x756>
   17744:	e1a5      	b.n	17a92 <_dtoa_r+0xaa2>
   17746:	2101      	movs	r1, #1
   17748:	4650      	mov	r0, sl
   1774a:	f001 fcf3 	bl	19134 <__i2b>
   1774e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17750:	4681      	mov	r9, r0
   17752:	2b00      	cmp	r3, #0
   17754:	dd1d      	ble.n	17792 <_dtoa_r+0x7a2>
   17756:	001a      	movs	r2, r3
   17758:	0001      	movs	r1, r0
   1775a:	4650      	mov	r0, sl
   1775c:	f001 fd9e 	bl	1929c <__pow5mult>
   17760:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17762:	4681      	mov	r9, r0
   17764:	2b01      	cmp	r3, #1
   17766:	dc00      	bgt.n	1776a <_dtoa_r+0x77a>
   17768:	e150      	b.n	17a0c <_dtoa_r+0xa1c>
   1776a:	2400      	movs	r4, #0
   1776c:	464b      	mov	r3, r9
   1776e:	691b      	ldr	r3, [r3, #16]
   17770:	3303      	adds	r3, #3
   17772:	009b      	lsls	r3, r3, #2
   17774:	444b      	add	r3, r9
   17776:	6858      	ldr	r0, [r3, #4]
   17778:	f001 fc94 	bl	190a4 <__hi0bits>
   1777c:	2320      	movs	r3, #32
   1777e:	1a1b      	subs	r3, r3, r0
   17780:	e010      	b.n	177a4 <_dtoa_r+0x7b4>
   17782:	2220      	movs	r2, #32
   17784:	0030      	movs	r0, r6
   17786:	1ad3      	subs	r3, r2, r3
   17788:	4098      	lsls	r0, r3
   1778a:	e685      	b.n	17498 <_dtoa_r+0x4a8>
   1778c:	2300      	movs	r3, #0
   1778e:	930c      	str	r3, [sp, #48]	; 0x30
   17790:	e4e3      	b.n	1715a <_dtoa_r+0x16a>
   17792:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17794:	2400      	movs	r4, #0
   17796:	2b01      	cmp	r3, #1
   17798:	dc00      	bgt.n	1779c <_dtoa_r+0x7ac>
   1779a:	e18b      	b.n	17ab4 <_dtoa_r+0xac4>
   1779c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1779e:	2301      	movs	r3, #1
   177a0:	2a00      	cmp	r2, #0
   177a2:	d1e3      	bne.n	1776c <_dtoa_r+0x77c>
   177a4:	9904      	ldr	r1, [sp, #16]
   177a6:	201f      	movs	r0, #31
   177a8:	468c      	mov	ip, r1
   177aa:	4463      	add	r3, ip
   177ac:	4018      	ands	r0, r3
   177ae:	d100      	bne.n	177b2 <_dtoa_r+0x7c2>
   177b0:	e0ae      	b.n	17910 <_dtoa_r+0x920>
   177b2:	2320      	movs	r3, #32
   177b4:	1a1b      	subs	r3, r3, r0
   177b6:	2b04      	cmp	r3, #4
   177b8:	dc00      	bgt.n	177bc <_dtoa_r+0x7cc>
   177ba:	e3cc      	b.n	17f56 <_dtoa_r+0xf66>
   177bc:	231c      	movs	r3, #28
   177be:	1a18      	subs	r0, r3, r0
   177c0:	9b06      	ldr	r3, [sp, #24]
   177c2:	469c      	mov	ip, r3
   177c4:	4484      	add	ip, r0
   177c6:	4663      	mov	r3, ip
   177c8:	9306      	str	r3, [sp, #24]
   177ca:	9b08      	ldr	r3, [sp, #32]
   177cc:	469c      	mov	ip, r3
   177ce:	4484      	add	ip, r0
   177d0:	4663      	mov	r3, ip
   177d2:	468c      	mov	ip, r1
   177d4:	4484      	add	ip, r0
   177d6:	9308      	str	r3, [sp, #32]
   177d8:	4663      	mov	r3, ip
   177da:	9304      	str	r3, [sp, #16]
   177dc:	9b06      	ldr	r3, [sp, #24]
   177de:	2b00      	cmp	r3, #0
   177e0:	dd05      	ble.n	177ee <_dtoa_r+0x7fe>
   177e2:	4659      	mov	r1, fp
   177e4:	001a      	movs	r2, r3
   177e6:	4650      	mov	r0, sl
   177e8:	f001 fdb8 	bl	1935c <__lshift>
   177ec:	4683      	mov	fp, r0
   177ee:	9b04      	ldr	r3, [sp, #16]
   177f0:	2b00      	cmp	r3, #0
   177f2:	dd05      	ble.n	17800 <_dtoa_r+0x810>
   177f4:	4649      	mov	r1, r9
   177f6:	001a      	movs	r2, r3
   177f8:	4650      	mov	r0, sl
   177fa:	f001 fdaf 	bl	1935c <__lshift>
   177fe:	4681      	mov	r9, r0
   17800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17802:	2b00      	cmp	r3, #0
   17804:	d000      	beq.n	17808 <_dtoa_r+0x818>
   17806:	e094      	b.n	17932 <_dtoa_r+0x942>
   17808:	9b07      	ldr	r3, [sp, #28]
   1780a:	2b00      	cmp	r3, #0
   1780c:	dc00      	bgt.n	17810 <_dtoa_r+0x820>
   1780e:	e175      	b.n	17afc <_dtoa_r+0xb0c>
   17810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17812:	2b00      	cmp	r3, #0
   17814:	d100      	bne.n	17818 <_dtoa_r+0x828>
   17816:	e0a6      	b.n	17966 <_dtoa_r+0x976>
   17818:	9b08      	ldr	r3, [sp, #32]
   1781a:	2b00      	cmp	r3, #0
   1781c:	dd05      	ble.n	1782a <_dtoa_r+0x83a>
   1781e:	4641      	mov	r1, r8
   17820:	001a      	movs	r2, r3
   17822:	4650      	mov	r0, sl
   17824:	f001 fd9a 	bl	1935c <__lshift>
   17828:	4680      	mov	r8, r0
   1782a:	4643      	mov	r3, r8
   1782c:	930c      	str	r3, [sp, #48]	; 0x30
   1782e:	2c00      	cmp	r4, #0
   17830:	d000      	beq.n	17834 <_dtoa_r+0x844>
   17832:	e250      	b.n	17cd6 <_dtoa_r+0xce6>
   17834:	9c07      	ldr	r4, [sp, #28]
   17836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17838:	3c01      	subs	r4, #1
   1783a:	0023      	movs	r3, r4
   1783c:	4694      	mov	ip, r2
   1783e:	4463      	add	r3, ip
   17840:	9308      	str	r3, [sp, #32]
   17842:	2301      	movs	r3, #1
   17844:	4033      	ands	r3, r6
   17846:	9307      	str	r3, [sp, #28]
   17848:	464b      	mov	r3, r9
   1784a:	9306      	str	r3, [sp, #24]
   1784c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1784e:	4657      	mov	r7, sl
   17850:	4645      	mov	r5, r8
   17852:	465e      	mov	r6, fp
   17854:	4692      	mov	sl, r2
   17856:	4698      	mov	r8, r3
   17858:	9b06      	ldr	r3, [sp, #24]
   1785a:	0030      	movs	r0, r6
   1785c:	0019      	movs	r1, r3
   1785e:	4699      	mov	r9, r3
   17860:	f7ff fb1c 	bl	16e9c <quorem>
   17864:	0003      	movs	r3, r0
   17866:	900b      	str	r0, [sp, #44]	; 0x2c
   17868:	3330      	adds	r3, #48	; 0x30
   1786a:	0029      	movs	r1, r5
   1786c:	0030      	movs	r0, r6
   1786e:	9304      	str	r3, [sp, #16]
   17870:	f001 fdd4 	bl	1941c <__mcmp>
   17874:	4649      	mov	r1, r9
   17876:	0004      	movs	r4, r0
   17878:	4642      	mov	r2, r8
   1787a:	0038      	movs	r0, r7
   1787c:	f001 fde8 	bl	19450 <__mdiff>
   17880:	68c3      	ldr	r3, [r0, #12]
   17882:	4681      	mov	r9, r0
   17884:	2b00      	cmp	r3, #0
   17886:	d000      	beq.n	1788a <_dtoa_r+0x89a>
   17888:	e11e      	b.n	17ac8 <_dtoa_r+0xad8>
   1788a:	0001      	movs	r1, r0
   1788c:	0030      	movs	r0, r6
   1788e:	f001 fdc5 	bl	1941c <__mcmp>
   17892:	4683      	mov	fp, r0
   17894:	4649      	mov	r1, r9
   17896:	0038      	movs	r0, r7
   17898:	f001 fbb4 	bl	19004 <_Bfree>
   1789c:	465b      	mov	r3, fp
   1789e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   178a0:	4313      	orrs	r3, r2
   178a2:	d103      	bne.n	178ac <_dtoa_r+0x8bc>
   178a4:	9b07      	ldr	r3, [sp, #28]
   178a6:	2b00      	cmp	r3, #0
   178a8:	d100      	bne.n	178ac <_dtoa_r+0x8bc>
   178aa:	e306      	b.n	17eba <_dtoa_r+0xeca>
   178ac:	2c00      	cmp	r4, #0
   178ae:	da00      	bge.n	178b2 <_dtoa_r+0x8c2>
   178b0:	e1a8      	b.n	17c04 <_dtoa_r+0xc14>
   178b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   178b4:	431c      	orrs	r4, r3
   178b6:	d103      	bne.n	178c0 <_dtoa_r+0x8d0>
   178b8:	9b07      	ldr	r3, [sp, #28]
   178ba:	2b00      	cmp	r3, #0
   178bc:	d100      	bne.n	178c0 <_dtoa_r+0x8d0>
   178be:	e1a1      	b.n	17c04 <_dtoa_r+0xc14>
   178c0:	465b      	mov	r3, fp
   178c2:	2b00      	cmp	r3, #0
   178c4:	dd00      	ble.n	178c8 <_dtoa_r+0x8d8>
   178c6:	e282      	b.n	17dce <_dtoa_r+0xdde>
   178c8:	4669      	mov	r1, sp
   178ca:	4652      	mov	r2, sl
   178cc:	4653      	mov	r3, sl
   178ce:	7c09      	ldrb	r1, [r1, #16]
   178d0:	1c5c      	adds	r4, r3, #1
   178d2:	7011      	strb	r1, [r2, #0]
   178d4:	9a08      	ldr	r2, [sp, #32]
   178d6:	4552      	cmp	r2, sl
   178d8:	d100      	bne.n	178dc <_dtoa_r+0x8ec>
   178da:	e28a      	b.n	17df2 <_dtoa_r+0xe02>
   178dc:	0031      	movs	r1, r6
   178de:	2300      	movs	r3, #0
   178e0:	220a      	movs	r2, #10
   178e2:	0038      	movs	r0, r7
   178e4:	f001 fb98 	bl	19018 <__multadd>
   178e8:	2300      	movs	r3, #0
   178ea:	0006      	movs	r6, r0
   178ec:	220a      	movs	r2, #10
   178ee:	0029      	movs	r1, r5
   178f0:	0038      	movs	r0, r7
   178f2:	4545      	cmp	r5, r8
   178f4:	d100      	bne.n	178f8 <_dtoa_r+0x908>
   178f6:	e0e1      	b.n	17abc <_dtoa_r+0xacc>
   178f8:	f001 fb8e 	bl	19018 <__multadd>
   178fc:	4641      	mov	r1, r8
   178fe:	0005      	movs	r5, r0
   17900:	2300      	movs	r3, #0
   17902:	220a      	movs	r2, #10
   17904:	0038      	movs	r0, r7
   17906:	f001 fb87 	bl	19018 <__multadd>
   1790a:	46a2      	mov	sl, r4
   1790c:	4680      	mov	r8, r0
   1790e:	e7a3      	b.n	17858 <_dtoa_r+0x868>
   17910:	201c      	movs	r0, #28
   17912:	9b06      	ldr	r3, [sp, #24]
   17914:	469c      	mov	ip, r3
   17916:	4484      	add	ip, r0
   17918:	4663      	mov	r3, ip
   1791a:	9306      	str	r3, [sp, #24]
   1791c:	9b08      	ldr	r3, [sp, #32]
   1791e:	469c      	mov	ip, r3
   17920:	4484      	add	ip, r0
   17922:	4663      	mov	r3, ip
   17924:	9308      	str	r3, [sp, #32]
   17926:	9b04      	ldr	r3, [sp, #16]
   17928:	469c      	mov	ip, r3
   1792a:	4484      	add	ip, r0
   1792c:	4663      	mov	r3, ip
   1792e:	9304      	str	r3, [sp, #16]
   17930:	e754      	b.n	177dc <_dtoa_r+0x7ec>
   17932:	4649      	mov	r1, r9
   17934:	4658      	mov	r0, fp
   17936:	f001 fd71 	bl	1941c <__mcmp>
   1793a:	2800      	cmp	r0, #0
   1793c:	db00      	blt.n	17940 <_dtoa_r+0x950>
   1793e:	e763      	b.n	17808 <_dtoa_r+0x818>
   17940:	9b03      	ldr	r3, [sp, #12]
   17942:	4659      	mov	r1, fp
   17944:	3b01      	subs	r3, #1
   17946:	9303      	str	r3, [sp, #12]
   17948:	220a      	movs	r2, #10
   1794a:	2300      	movs	r3, #0
   1794c:	4650      	mov	r0, sl
   1794e:	f001 fb63 	bl	19018 <__multadd>
   17952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17954:	4683      	mov	fp, r0
   17956:	2b00      	cmp	r3, #0
   17958:	d000      	beq.n	1795c <_dtoa_r+0x96c>
   1795a:	e2ca      	b.n	17ef2 <_dtoa_r+0xf02>
   1795c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1795e:	2b00      	cmp	r3, #0
   17960:	dc00      	bgt.n	17964 <_dtoa_r+0x974>
   17962:	e2d8      	b.n	17f16 <_dtoa_r+0xf26>
   17964:	9307      	str	r3, [sp, #28]
   17966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17968:	465d      	mov	r5, fp
   1796a:	2400      	movs	r4, #0
   1796c:	9f07      	ldr	r7, [sp, #28]
   1796e:	469b      	mov	fp, r3
   17970:	e006      	b.n	17980 <_dtoa_r+0x990>
   17972:	0029      	movs	r1, r5
   17974:	2300      	movs	r3, #0
   17976:	220a      	movs	r2, #10
   17978:	4650      	mov	r0, sl
   1797a:	f001 fb4d 	bl	19018 <__multadd>
   1797e:	0005      	movs	r5, r0
   17980:	4649      	mov	r1, r9
   17982:	0028      	movs	r0, r5
   17984:	f7ff fa8a 	bl	16e9c <quorem>
   17988:	465b      	mov	r3, fp
   1798a:	3030      	adds	r0, #48	; 0x30
   1798c:	5518      	strb	r0, [r3, r4]
   1798e:	3401      	adds	r4, #1
   17990:	42bc      	cmp	r4, r7
   17992:	dbee      	blt.n	17972 <_dtoa_r+0x982>
   17994:	46ab      	mov	fp, r5
   17996:	0006      	movs	r6, r0
   17998:	9c07      	ldr	r4, [sp, #28]
   1799a:	2c00      	cmp	r4, #0
   1799c:	dc00      	bgt.n	179a0 <_dtoa_r+0x9b0>
   1799e:	e237      	b.n	17e10 <_dtoa_r+0xe20>
   179a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   179a2:	2700      	movs	r7, #0
   179a4:	469c      	mov	ip, r3
   179a6:	4464      	add	r4, ip
   179a8:	4659      	mov	r1, fp
   179aa:	2201      	movs	r2, #1
   179ac:	4650      	mov	r0, sl
   179ae:	f001 fcd5 	bl	1935c <__lshift>
   179b2:	4649      	mov	r1, r9
   179b4:	4683      	mov	fp, r0
   179b6:	f001 fd31 	bl	1941c <__mcmp>
   179ba:	2800      	cmp	r0, #0
   179bc:	dc00      	bgt.n	179c0 <_dtoa_r+0x9d0>
   179be:	e144      	b.n	17c4a <_dtoa_r+0xc5a>
   179c0:	1e65      	subs	r5, r4, #1
   179c2:	782b      	ldrb	r3, [r5, #0]
   179c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   179c6:	e006      	b.n	179d6 <_dtoa_r+0x9e6>
   179c8:	4295      	cmp	r5, r2
   179ca:	d100      	bne.n	179ce <_dtoa_r+0x9de>
   179cc:	e0b1      	b.n	17b32 <_dtoa_r+0xb42>
   179ce:	3c02      	subs	r4, #2
   179d0:	7823      	ldrb	r3, [r4, #0]
   179d2:	002c      	movs	r4, r5
   179d4:	3d01      	subs	r5, #1
   179d6:	2b39      	cmp	r3, #57	; 0x39
   179d8:	d0f6      	beq.n	179c8 <_dtoa_r+0x9d8>
   179da:	3301      	adds	r3, #1
   179dc:	702b      	strb	r3, [r5, #0]
   179de:	4649      	mov	r1, r9
   179e0:	4650      	mov	r0, sl
   179e2:	f001 fb0f 	bl	19004 <_Bfree>
   179e6:	4643      	mov	r3, r8
   179e8:	2b00      	cmp	r3, #0
   179ea:	d100      	bne.n	179ee <_dtoa_r+0x9fe>
   179ec:	e52f      	b.n	1744e <_dtoa_r+0x45e>
   179ee:	2f00      	cmp	r7, #0
   179f0:	d005      	beq.n	179fe <_dtoa_r+0xa0e>
   179f2:	4547      	cmp	r7, r8
   179f4:	d003      	beq.n	179fe <_dtoa_r+0xa0e>
   179f6:	0039      	movs	r1, r7
   179f8:	4650      	mov	r0, sl
   179fa:	f001 fb03 	bl	19004 <_Bfree>
   179fe:	4641      	mov	r1, r8
   17a00:	4650      	mov	r0, sl
   17a02:	f001 faff 	bl	19004 <_Bfree>
   17a06:	e522      	b.n	1744e <_dtoa_r+0x45e>
   17a08:	0013      	movs	r3, r2
   17a0a:	e675      	b.n	176f8 <_dtoa_r+0x708>
   17a0c:	2e00      	cmp	r6, #0
   17a0e:	d000      	beq.n	17a12 <_dtoa_r+0xa22>
   17a10:	e6ab      	b.n	1776a <_dtoa_r+0x77a>
   17a12:	033b      	lsls	r3, r7, #12
   17a14:	2400      	movs	r4, #0
   17a16:	2b00      	cmp	r3, #0
   17a18:	d000      	beq.n	17a1c <_dtoa_r+0xa2c>
   17a1a:	e6bf      	b.n	1779c <_dtoa_r+0x7ac>
   17a1c:	4bba      	ldr	r3, [pc, #744]	; (17d08 <_dtoa_r+0xd18>)
   17a1e:	423b      	tst	r3, r7
   17a20:	d100      	bne.n	17a24 <_dtoa_r+0xa34>
   17a22:	e6bb      	b.n	1779c <_dtoa_r+0x7ac>
   17a24:	9b06      	ldr	r3, [sp, #24]
   17a26:	3401      	adds	r4, #1
   17a28:	3301      	adds	r3, #1
   17a2a:	9306      	str	r3, [sp, #24]
   17a2c:	9b04      	ldr	r3, [sp, #16]
   17a2e:	3301      	adds	r3, #1
   17a30:	9304      	str	r3, [sp, #16]
   17a32:	e6b3      	b.n	1779c <_dtoa_r+0x7ac>
   17a34:	2301      	movs	r3, #1
   17a36:	930b      	str	r3, [sp, #44]	; 0x2c
   17a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	dc00      	bgt.n	17a40 <_dtoa_r+0xa50>
   17a3e:	e0d1      	b.n	17be4 <_dtoa_r+0xbf4>
   17a40:	001d      	movs	r5, r3
   17a42:	4698      	mov	r8, r3
   17a44:	930e      	str	r3, [sp, #56]	; 0x38
   17a46:	9307      	str	r3, [sp, #28]
   17a48:	f7ff fbc8 	bl	171dc <_dtoa_r+0x1ec>
   17a4c:	9b07      	ldr	r3, [sp, #28]
   17a4e:	2b00      	cmp	r3, #0
   17a50:	dd00      	ble.n	17a54 <_dtoa_r+0xa64>
   17a52:	e553      	b.n	174fc <_dtoa_r+0x50c>
   17a54:	d000      	beq.n	17a58 <_dtoa_r+0xa68>
   17a56:	e0ad      	b.n	17bb4 <_dtoa_r+0xbc4>
   17a58:	9804      	ldr	r0, [sp, #16]
   17a5a:	9905      	ldr	r1, [sp, #20]
   17a5c:	2200      	movs	r2, #0
   17a5e:	4bab      	ldr	r3, [pc, #684]	; (17d0c <_dtoa_r+0xd1c>)
   17a60:	f7fa ffd6 	bl	12a10 <__aeabi_dmul>
   17a64:	003b      	movs	r3, r7
   17a66:	0032      	movs	r2, r6
   17a68:	f7fb ff6e 	bl	13948 <__aeabi_dcmpge>
   17a6c:	2300      	movs	r3, #0
   17a6e:	4699      	mov	r9, r3
   17a70:	4698      	mov	r8, r3
   17a72:	2800      	cmp	r0, #0
   17a74:	d055      	beq.n	17b22 <_dtoa_r+0xb32>
   17a76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   17a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17a7a:	43db      	mvns	r3, r3
   17a7c:	9303      	str	r3, [sp, #12]
   17a7e:	4649      	mov	r1, r9
   17a80:	4650      	mov	r0, sl
   17a82:	f001 fabf 	bl	19004 <_Bfree>
   17a86:	4643      	mov	r3, r8
   17a88:	2b00      	cmp	r3, #0
   17a8a:	d100      	bne.n	17a8e <_dtoa_r+0xa9e>
   17a8c:	e4df      	b.n	1744e <_dtoa_r+0x45e>
   17a8e:	e7b6      	b.n	179fe <_dtoa_r+0xa0e>
   17a90:	464a      	mov	r2, r9
   17a92:	4659      	mov	r1, fp
   17a94:	4650      	mov	r0, sl
   17a96:	f001 fc01 	bl	1929c <__pow5mult>
   17a9a:	4683      	mov	fp, r0
   17a9c:	e653      	b.n	17746 <_dtoa_r+0x756>
   17a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17aa0:	2a00      	cmp	r2, #0
   17aa2:	d100      	bne.n	17aa6 <_dtoa_r+0xab6>
   17aa4:	e1b6      	b.n	17e14 <_dtoa_r+0xe24>
   17aa6:	4a9a      	ldr	r2, [pc, #616]	; (17d10 <_dtoa_r+0xd20>)
   17aa8:	464c      	mov	r4, r9
   17aaa:	4694      	mov	ip, r2
   17aac:	9a06      	ldr	r2, [sp, #24]
   17aae:	4463      	add	r3, ip
   17ab0:	9208      	str	r2, [sp, #32]
   17ab2:	e5d5      	b.n	17660 <_dtoa_r+0x670>
   17ab4:	2e00      	cmp	r6, #0
   17ab6:	d000      	beq.n	17aba <_dtoa_r+0xaca>
   17ab8:	e670      	b.n	1779c <_dtoa_r+0x7ac>
   17aba:	e7aa      	b.n	17a12 <_dtoa_r+0xa22>
   17abc:	f001 faac 	bl	19018 <__multadd>
   17ac0:	46a2      	mov	sl, r4
   17ac2:	0005      	movs	r5, r0
   17ac4:	4680      	mov	r8, r0
   17ac6:	e6c7      	b.n	17858 <_dtoa_r+0x868>
   17ac8:	2301      	movs	r3, #1
   17aca:	469b      	mov	fp, r3
   17acc:	e6e2      	b.n	17894 <_dtoa_r+0x8a4>
   17ace:	2300      	movs	r3, #0
   17ad0:	930b      	str	r3, [sp, #44]	; 0x2c
   17ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17ad4:	2b02      	cmp	r3, #2
   17ad6:	d0af      	beq.n	17a38 <_dtoa_r+0xa48>
   17ad8:	2400      	movs	r4, #0
   17ada:	4653      	mov	r3, sl
   17adc:	0021      	movs	r1, r4
   17ade:	645c      	str	r4, [r3, #68]	; 0x44
   17ae0:	4650      	mov	r0, sl
   17ae2:	f001 fa67 	bl	18fb4 <_Balloc>
   17ae6:	4653      	mov	r3, sl
   17ae8:	6418      	str	r0, [r3, #64]	; 0x40
   17aea:	2301      	movs	r3, #1
   17aec:	425b      	negs	r3, r3
   17aee:	9307      	str	r3, [sp, #28]
   17af0:	930e      	str	r3, [sp, #56]	; 0x38
   17af2:	3302      	adds	r3, #2
   17af4:	900a      	str	r0, [sp, #40]	; 0x28
   17af6:	9423      	str	r4, [sp, #140]	; 0x8c
   17af8:	930b      	str	r3, [sp, #44]	; 0x2c
   17afa:	e4ec      	b.n	174d6 <_dtoa_r+0x4e6>
   17afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17afe:	2b02      	cmp	r3, #2
   17b00:	dc00      	bgt.n	17b04 <_dtoa_r+0xb14>
   17b02:	e685      	b.n	17810 <_dtoa_r+0x820>
   17b04:	9b07      	ldr	r3, [sp, #28]
   17b06:	2b00      	cmp	r3, #0
   17b08:	d1b5      	bne.n	17a76 <_dtoa_r+0xa86>
   17b0a:	4649      	mov	r1, r9
   17b0c:	2205      	movs	r2, #5
   17b0e:	4650      	mov	r0, sl
   17b10:	f001 fa82 	bl	19018 <__multadd>
   17b14:	4681      	mov	r9, r0
   17b16:	0001      	movs	r1, r0
   17b18:	4658      	mov	r0, fp
   17b1a:	f001 fc7f 	bl	1941c <__mcmp>
   17b1e:	2800      	cmp	r0, #0
   17b20:	dda9      	ble.n	17a76 <_dtoa_r+0xa86>
   17b22:	2331      	movs	r3, #49	; 0x31
   17b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17b26:	7013      	strb	r3, [r2, #0]
   17b28:	9b03      	ldr	r3, [sp, #12]
   17b2a:	1c54      	adds	r4, r2, #1
   17b2c:	3301      	adds	r3, #1
   17b2e:	9303      	str	r3, [sp, #12]
   17b30:	e7a5      	b.n	17a7e <_dtoa_r+0xa8e>
   17b32:	9b03      	ldr	r3, [sp, #12]
   17b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17b36:	3301      	adds	r3, #1
   17b38:	9303      	str	r3, [sp, #12]
   17b3a:	2331      	movs	r3, #49	; 0x31
   17b3c:	7013      	strb	r3, [r2, #0]
   17b3e:	e74e      	b.n	179de <_dtoa_r+0x9ee>
   17b40:	2300      	movs	r3, #0
   17b42:	930b      	str	r3, [sp, #44]	; 0x2c
   17b44:	f7ff fb3d 	bl	171c2 <_dtoa_r+0x1d2>
   17b48:	9b06      	ldr	r3, [sp, #24]
   17b4a:	465c      	mov	r4, fp
   17b4c:	469b      	mov	fp, r3
   17b4e:	9b07      	ldr	r3, [sp, #28]
   17b50:	469a      	mov	sl, r3
   17b52:	e47c      	b.n	1744e <_dtoa_r+0x45e>
   17b54:	4640      	mov	r0, r8
   17b56:	f7fb fd25 	bl	135a4 <__aeabi_i2d>
   17b5a:	0032      	movs	r2, r6
   17b5c:	003b      	movs	r3, r7
   17b5e:	f7fa ff57 	bl	12a10 <__aeabi_dmul>
   17b62:	2200      	movs	r2, #0
   17b64:	4b6b      	ldr	r3, [pc, #428]	; (17d14 <_dtoa_r+0xd24>)
   17b66:	f7fa f90f 	bl	11d88 <__aeabi_dadd>
   17b6a:	4a6b      	ldr	r2, [pc, #428]	; (17d18 <_dtoa_r+0xd28>)
   17b6c:	000b      	movs	r3, r1
   17b6e:	4694      	mov	ip, r2
   17b70:	4463      	add	r3, ip
   17b72:	9008      	str	r0, [sp, #32]
   17b74:	9109      	str	r1, [sp, #36]	; 0x24
   17b76:	9309      	str	r3, [sp, #36]	; 0x24
   17b78:	2200      	movs	r2, #0
   17b7a:	4b64      	ldr	r3, [pc, #400]	; (17d0c <_dtoa_r+0xd1c>)
   17b7c:	0030      	movs	r0, r6
   17b7e:	0039      	movs	r1, r7
   17b80:	f7fb f9c6 	bl	12f10 <__aeabi_dsub>
   17b84:	9e08      	ldr	r6, [sp, #32]
   17b86:	9f09      	ldr	r7, [sp, #36]	; 0x24
   17b88:	0032      	movs	r2, r6
   17b8a:	003b      	movs	r3, r7
   17b8c:	0004      	movs	r4, r0
   17b8e:	000d      	movs	r5, r1
   17b90:	f7fb fed0 	bl	13934 <__aeabi_dcmpgt>
   17b94:	2800      	cmp	r0, #0
   17b96:	d000      	beq.n	17b9a <_dtoa_r+0xbaa>
   17b98:	e0b2      	b.n	17d00 <_dtoa_r+0xd10>
   17b9a:	2080      	movs	r0, #128	; 0x80
   17b9c:	0600      	lsls	r0, r0, #24
   17b9e:	4684      	mov	ip, r0
   17ba0:	0039      	movs	r1, r7
   17ba2:	4461      	add	r1, ip
   17ba4:	000b      	movs	r3, r1
   17ba6:	0032      	movs	r2, r6
   17ba8:	0020      	movs	r0, r4
   17baa:	0029      	movs	r1, r5
   17bac:	f7fb feae 	bl	1390c <__aeabi_dcmplt>
   17bb0:	2800      	cmp	r0, #0
   17bb2:	d057      	beq.n	17c64 <_dtoa_r+0xc74>
   17bb4:	2300      	movs	r3, #0
   17bb6:	4699      	mov	r9, r3
   17bb8:	4698      	mov	r8, r3
   17bba:	e75c      	b.n	17a76 <_dtoa_r+0xa86>
   17bbc:	980a      	ldr	r0, [sp, #40]	; 0x28
   17bbe:	f7ff fa4c 	bl	1705a <_dtoa_r+0x6a>
   17bc2:	1ae2      	subs	r2, r4, r3
   17bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17bc6:	46a1      	mov	r9, r4
   17bc8:	469c      	mov	ip, r3
   17bca:	4494      	add	ip, r2
   17bcc:	4663      	mov	r3, ip
   17bce:	2400      	movs	r4, #0
   17bd0:	930d      	str	r3, [sp, #52]	; 0x34
   17bd2:	e53e      	b.n	17652 <_dtoa_r+0x662>
   17bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   17bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17bd8:	9208      	str	r2, [sp, #32]
   17bda:	9309      	str	r3, [sp, #36]	; 0x24
   17bdc:	2302      	movs	r3, #2
   17bde:	4698      	mov	r8, r3
   17be0:	f7ff fb3a 	bl	17258 <_dtoa_r+0x268>
   17be4:	2300      	movs	r3, #0
   17be6:	4652      	mov	r2, sl
   17be8:	2100      	movs	r1, #0
   17bea:	6453      	str	r3, [r2, #68]	; 0x44
   17bec:	4650      	mov	r0, sl
   17bee:	f001 f9e1 	bl	18fb4 <_Balloc>
   17bf2:	4653      	mov	r3, sl
   17bf4:	6418      	str	r0, [r3, #64]	; 0x40
   17bf6:	2301      	movs	r3, #1
   17bf8:	900a      	str	r0, [sp, #40]	; 0x28
   17bfa:	9307      	str	r3, [sp, #28]
   17bfc:	9323      	str	r3, [sp, #140]	; 0x8c
   17bfe:	930e      	str	r3, [sp, #56]	; 0x38
   17c00:	f7ff fb07 	bl	17212 <_dtoa_r+0x222>
   17c04:	4643      	mov	r3, r8
   17c06:	930c      	str	r3, [sp, #48]	; 0x30
   17c08:	465b      	mov	r3, fp
   17c0a:	9a06      	ldr	r2, [sp, #24]
   17c0c:	46a8      	mov	r8, r5
   17c0e:	46b3      	mov	fp, r6
   17c10:	4655      	mov	r5, sl
   17c12:	9e04      	ldr	r6, [sp, #16]
   17c14:	4691      	mov	r9, r2
   17c16:	46ba      	mov	sl, r7
   17c18:	2b00      	cmp	r3, #0
   17c1a:	dd10      	ble.n	17c3e <_dtoa_r+0xc4e>
   17c1c:	4659      	mov	r1, fp
   17c1e:	2201      	movs	r2, #1
   17c20:	0038      	movs	r0, r7
   17c22:	f001 fb9b 	bl	1935c <__lshift>
   17c26:	4649      	mov	r1, r9
   17c28:	4683      	mov	fp, r0
   17c2a:	f001 fbf7 	bl	1941c <__mcmp>
   17c2e:	2800      	cmp	r0, #0
   17c30:	dc00      	bgt.n	17c34 <_dtoa_r+0xc44>
   17c32:	e157      	b.n	17ee4 <_dtoa_r+0xef4>
   17c34:	2e39      	cmp	r6, #57	; 0x39
   17c36:	d100      	bne.n	17c3a <_dtoa_r+0xc4a>
   17c38:	e122      	b.n	17e80 <_dtoa_r+0xe90>
   17c3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   17c3c:	3631      	adds	r6, #49	; 0x31
   17c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17c40:	4647      	mov	r7, r8
   17c42:	1c6c      	adds	r4, r5, #1
   17c44:	702e      	strb	r6, [r5, #0]
   17c46:	4698      	mov	r8, r3
   17c48:	e6c9      	b.n	179de <_dtoa_r+0x9ee>
   17c4a:	2800      	cmp	r0, #0
   17c4c:	d103      	bne.n	17c56 <_dtoa_r+0xc66>
   17c4e:	07f3      	lsls	r3, r6, #31
   17c50:	d501      	bpl.n	17c56 <_dtoa_r+0xc66>
   17c52:	e6b5      	b.n	179c0 <_dtoa_r+0x9d0>
   17c54:	001c      	movs	r4, r3
   17c56:	1e63      	subs	r3, r4, #1
   17c58:	781a      	ldrb	r2, [r3, #0]
   17c5a:	2a30      	cmp	r2, #48	; 0x30
   17c5c:	d0fa      	beq.n	17c54 <_dtoa_r+0xc64>
   17c5e:	e6be      	b.n	179de <_dtoa_r+0x9ee>
   17c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17c62:	4699      	mov	r9, r3
   17c64:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17c66:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17c68:	e435      	b.n	174d6 <_dtoa_r+0x4e6>
   17c6a:	2501      	movs	r5, #1
   17c6c:	f7ff fab4 	bl	171d8 <_dtoa_r+0x1e8>
   17c70:	9b03      	ldr	r3, [sp, #12]
   17c72:	2b00      	cmp	r3, #0
   17c74:	d100      	bne.n	17c78 <_dtoa_r+0xc88>
   17c76:	e0d4      	b.n	17e22 <_dtoa_r+0xe32>
   17c78:	9810      	ldr	r0, [sp, #64]	; 0x40
   17c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
   17c7c:	425c      	negs	r4, r3
   17c7e:	230f      	movs	r3, #15
   17c80:	4a26      	ldr	r2, [pc, #152]	; (17d1c <_dtoa_r+0xd2c>)
   17c82:	4023      	ands	r3, r4
   17c84:	00db      	lsls	r3, r3, #3
   17c86:	18d3      	adds	r3, r2, r3
   17c88:	681a      	ldr	r2, [r3, #0]
   17c8a:	685b      	ldr	r3, [r3, #4]
   17c8c:	f7fa fec0 	bl	12a10 <__aeabi_dmul>
   17c90:	1124      	asrs	r4, r4, #4
   17c92:	0006      	movs	r6, r0
   17c94:	000f      	movs	r7, r1
   17c96:	2c00      	cmp	r4, #0
   17c98:	d100      	bne.n	17c9c <_dtoa_r+0xcac>
   17c9a:	e149      	b.n	17f30 <_dtoa_r+0xf40>
   17c9c:	2302      	movs	r3, #2
   17c9e:	4698      	mov	r8, r3
   17ca0:	4d1f      	ldr	r5, [pc, #124]	; (17d20 <_dtoa_r+0xd30>)
   17ca2:	2301      	movs	r3, #1
   17ca4:	4223      	tst	r3, r4
   17ca6:	d009      	beq.n	17cbc <_dtoa_r+0xccc>
   17ca8:	469c      	mov	ip, r3
   17caa:	682a      	ldr	r2, [r5, #0]
   17cac:	686b      	ldr	r3, [r5, #4]
   17cae:	0030      	movs	r0, r6
   17cb0:	0039      	movs	r1, r7
   17cb2:	44e0      	add	r8, ip
   17cb4:	f7fa feac 	bl	12a10 <__aeabi_dmul>
   17cb8:	0006      	movs	r6, r0
   17cba:	000f      	movs	r7, r1
   17cbc:	1064      	asrs	r4, r4, #1
   17cbe:	3508      	adds	r5, #8
   17cc0:	2c00      	cmp	r4, #0
   17cc2:	d1ee      	bne.n	17ca2 <_dtoa_r+0xcb2>
   17cc4:	f7ff fae4 	bl	17290 <_dtoa_r+0x2a0>
   17cc8:	9b03      	ldr	r3, [sp, #12]
   17cca:	2730      	movs	r7, #48	; 0x30
   17ccc:	3301      	adds	r3, #1
   17cce:	9303      	str	r3, [sp, #12]
   17cd0:	2330      	movs	r3, #48	; 0x30
   17cd2:	702b      	strb	r3, [r5, #0]
   17cd4:	e4ac      	b.n	17630 <_dtoa_r+0x640>
   17cd6:	6859      	ldr	r1, [r3, #4]
   17cd8:	4650      	mov	r0, sl
   17cda:	f001 f96b 	bl	18fb4 <_Balloc>
   17cde:	4643      	mov	r3, r8
   17ce0:	4641      	mov	r1, r8
   17ce2:	0004      	movs	r4, r0
   17ce4:	691b      	ldr	r3, [r3, #16]
   17ce6:	310c      	adds	r1, #12
   17ce8:	1c9a      	adds	r2, r3, #2
   17cea:	0092      	lsls	r2, r2, #2
   17cec:	300c      	adds	r0, #12
   17cee:	f7fb ff59 	bl	13ba4 <memcpy>
   17cf2:	2201      	movs	r2, #1
   17cf4:	0021      	movs	r1, r4
   17cf6:	4650      	mov	r0, sl
   17cf8:	f001 fb30 	bl	1935c <__lshift>
   17cfc:	900c      	str	r0, [sp, #48]	; 0x30
   17cfe:	e599      	b.n	17834 <_dtoa_r+0x844>
   17d00:	2300      	movs	r3, #0
   17d02:	4699      	mov	r9, r3
   17d04:	4698      	mov	r8, r3
   17d06:	e70c      	b.n	17b22 <_dtoa_r+0xb32>
   17d08:	7ff00000 	.word	0x7ff00000
   17d0c:	40140000 	.word	0x40140000
   17d10:	00000433 	.word	0x00000433
   17d14:	401c0000 	.word	0x401c0000
   17d18:	fcc00000 	.word	0xfcc00000
   17d1c:	0001b350 	.word	0x0001b350
   17d20:	0001b328 	.word	0x0001b328
   17d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17d26:	498f      	ldr	r1, [pc, #572]	; (17f64 <_dtoa_r+0xf74>)
   17d28:	3b01      	subs	r3, #1
   17d2a:	00db      	lsls	r3, r3, #3
   17d2c:	18c9      	adds	r1, r1, r3
   17d2e:	6808      	ldr	r0, [r1, #0]
   17d30:	6849      	ldr	r1, [r1, #4]
   17d32:	9a08      	ldr	r2, [sp, #32]
   17d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17d36:	f7fa fe6b 	bl	12a10 <__aeabi_dmul>
   17d3a:	9014      	str	r0, [sp, #80]	; 0x50
   17d3c:	9115      	str	r1, [sp, #84]	; 0x54
   17d3e:	0039      	movs	r1, r7
   17d40:	0030      	movs	r0, r6
   17d42:	f7fb fbfb 	bl	1353c <__aeabi_d2iz>
   17d46:	0005      	movs	r5, r0
   17d48:	f7fb fc2c 	bl	135a4 <__aeabi_i2d>
   17d4c:	0002      	movs	r2, r0
   17d4e:	000b      	movs	r3, r1
   17d50:	0030      	movs	r0, r6
   17d52:	0039      	movs	r1, r7
   17d54:	f7fb f8dc 	bl	12f10 <__aeabi_dsub>
   17d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17d5a:	9008      	str	r0, [sp, #32]
   17d5c:	9109      	str	r1, [sp, #36]	; 0x24
   17d5e:	990a      	ldr	r1, [sp, #40]	; 0x28
   17d60:	001a      	movs	r2, r3
   17d62:	468c      	mov	ip, r1
   17d64:	3530      	adds	r5, #48	; 0x30
   17d66:	4462      	add	r2, ip
   17d68:	1c4c      	adds	r4, r1, #1
   17d6a:	700d      	strb	r5, [r1, #0]
   17d6c:	4690      	mov	r8, r2
   17d6e:	2b01      	cmp	r3, #1
   17d70:	d01b      	beq.n	17daa <_dtoa_r+0xdba>
   17d72:	9808      	ldr	r0, [sp, #32]
   17d74:	9909      	ldr	r1, [sp, #36]	; 0x24
   17d76:	0025      	movs	r5, r4
   17d78:	2200      	movs	r2, #0
   17d7a:	4b7b      	ldr	r3, [pc, #492]	; (17f68 <_dtoa_r+0xf78>)
   17d7c:	f7fa fe48 	bl	12a10 <__aeabi_dmul>
   17d80:	000f      	movs	r7, r1
   17d82:	0006      	movs	r6, r0
   17d84:	f7fb fbda 	bl	1353c <__aeabi_d2iz>
   17d88:	0004      	movs	r4, r0
   17d8a:	f7fb fc0b 	bl	135a4 <__aeabi_i2d>
   17d8e:	3430      	adds	r4, #48	; 0x30
   17d90:	0002      	movs	r2, r0
   17d92:	000b      	movs	r3, r1
   17d94:	0030      	movs	r0, r6
   17d96:	0039      	movs	r1, r7
   17d98:	f7fb f8ba 	bl	12f10 <__aeabi_dsub>
   17d9c:	702c      	strb	r4, [r5, #0]
   17d9e:	3501      	adds	r5, #1
   17da0:	45a8      	cmp	r8, r5
   17da2:	d1e9      	bne.n	17d78 <_dtoa_r+0xd88>
   17da4:	4644      	mov	r4, r8
   17da6:	9008      	str	r0, [sp, #32]
   17da8:	9109      	str	r1, [sp, #36]	; 0x24
   17daa:	9814      	ldr	r0, [sp, #80]	; 0x50
   17dac:	9915      	ldr	r1, [sp, #84]	; 0x54
   17dae:	2200      	movs	r2, #0
   17db0:	4b6e      	ldr	r3, [pc, #440]	; (17f6c <_dtoa_r+0xf7c>)
   17db2:	f7f9 ffe9 	bl	11d88 <__aeabi_dadd>
   17db6:	9a08      	ldr	r2, [sp, #32]
   17db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17dba:	f7fb fda7 	bl	1390c <__aeabi_dcmplt>
   17dbe:	2800      	cmp	r0, #0
   17dc0:	d067      	beq.n	17e92 <_dtoa_r+0xea2>
   17dc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17dc4:	1e65      	subs	r5, r4, #1
   17dc6:	9303      	str	r3, [sp, #12]
   17dc8:	782f      	ldrb	r7, [r5, #0]
   17dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17dcc:	e42e      	b.n	1762c <_dtoa_r+0x63c>
   17dce:	4643      	mov	r3, r8
   17dd0:	46b3      	mov	fp, r6
   17dd2:	930c      	str	r3, [sp, #48]	; 0x30
   17dd4:	9e04      	ldr	r6, [sp, #16]
   17dd6:	9b06      	ldr	r3, [sp, #24]
   17dd8:	46a8      	mov	r8, r5
   17dda:	4699      	mov	r9, r3
   17ddc:	4655      	mov	r5, sl
   17dde:	46ba      	mov	sl, r7
   17de0:	2e39      	cmp	r6, #57	; 0x39
   17de2:	d04d      	beq.n	17e80 <_dtoa_r+0xe90>
   17de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17de6:	3601      	adds	r6, #1
   17de8:	4647      	mov	r7, r8
   17dea:	1c6c      	adds	r4, r5, #1
   17dec:	702e      	strb	r6, [r5, #0]
   17dee:	4698      	mov	r8, r3
   17df0:	e5f5      	b.n	179de <_dtoa_r+0x9ee>
   17df2:	4642      	mov	r2, r8
   17df4:	9b06      	ldr	r3, [sp, #24]
   17df6:	46b3      	mov	fp, r6
   17df8:	46ba      	mov	sl, r7
   17dfa:	9e04      	ldr	r6, [sp, #16]
   17dfc:	4699      	mov	r9, r3
   17dfe:	002f      	movs	r7, r5
   17e00:	4690      	mov	r8, r2
   17e02:	e5d1      	b.n	179a8 <_dtoa_r+0x9b8>
   17e04:	9b06      	ldr	r3, [sp, #24]
   17e06:	9a07      	ldr	r2, [sp, #28]
   17e08:	1a9b      	subs	r3, r3, r2
   17e0a:	9308      	str	r3, [sp, #32]
   17e0c:	2300      	movs	r3, #0
   17e0e:	e427      	b.n	17660 <_dtoa_r+0x670>
   17e10:	2401      	movs	r4, #1
   17e12:	e5c5      	b.n	179a0 <_dtoa_r+0x9b0>
   17e14:	2336      	movs	r3, #54	; 0x36
   17e16:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17e18:	464c      	mov	r4, r9
   17e1a:	1a9b      	subs	r3, r3, r2
   17e1c:	9a06      	ldr	r2, [sp, #24]
   17e1e:	9208      	str	r2, [sp, #32]
   17e20:	e41e      	b.n	17660 <_dtoa_r+0x670>
   17e22:	2302      	movs	r3, #2
   17e24:	9e10      	ldr	r6, [sp, #64]	; 0x40
   17e26:	9f11      	ldr	r7, [sp, #68]	; 0x44
   17e28:	4698      	mov	r8, r3
   17e2a:	f7ff fa31 	bl	17290 <_dtoa_r+0x2a0>
   17e2e:	9b07      	ldr	r3, [sp, #28]
   17e30:	2b00      	cmp	r3, #0
   17e32:	d100      	bne.n	17e36 <_dtoa_r+0xe46>
   17e34:	e68e      	b.n	17b54 <_dtoa_r+0xb64>
   17e36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17e38:	2c00      	cmp	r4, #0
   17e3a:	dc00      	bgt.n	17e3e <_dtoa_r+0xe4e>
   17e3c:	e712      	b.n	17c64 <_dtoa_r+0xc74>
   17e3e:	9b03      	ldr	r3, [sp, #12]
   17e40:	2200      	movs	r2, #0
   17e42:	3b01      	subs	r3, #1
   17e44:	9313      	str	r3, [sp, #76]	; 0x4c
   17e46:	0030      	movs	r0, r6
   17e48:	4b47      	ldr	r3, [pc, #284]	; (17f68 <_dtoa_r+0xf78>)
   17e4a:	0039      	movs	r1, r7
   17e4c:	f7fa fde0 	bl	12a10 <__aeabi_dmul>
   17e50:	0006      	movs	r6, r0
   17e52:	4640      	mov	r0, r8
   17e54:	000f      	movs	r7, r1
   17e56:	3001      	adds	r0, #1
   17e58:	f7fb fba4 	bl	135a4 <__aeabi_i2d>
   17e5c:	0032      	movs	r2, r6
   17e5e:	003b      	movs	r3, r7
   17e60:	f7fa fdd6 	bl	12a10 <__aeabi_dmul>
   17e64:	2200      	movs	r2, #0
   17e66:	4b42      	ldr	r3, [pc, #264]	; (17f70 <_dtoa_r+0xf80>)
   17e68:	f7f9 ff8e 	bl	11d88 <__aeabi_dadd>
   17e6c:	4a41      	ldr	r2, [pc, #260]	; (17f74 <_dtoa_r+0xf84>)
   17e6e:	000b      	movs	r3, r1
   17e70:	4694      	mov	ip, r2
   17e72:	4463      	add	r3, ip
   17e74:	9008      	str	r0, [sp, #32]
   17e76:	9109      	str	r1, [sp, #36]	; 0x24
   17e78:	9412      	str	r4, [sp, #72]	; 0x48
   17e7a:	9309      	str	r3, [sp, #36]	; 0x24
   17e7c:	f7ff fa30 	bl	172e0 <_dtoa_r+0x2f0>
   17e80:	2339      	movs	r3, #57	; 0x39
   17e82:	702b      	strb	r3, [r5, #0]
   17e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17e86:	4647      	mov	r7, r8
   17e88:	1c6c      	adds	r4, r5, #1
   17e8a:	4698      	mov	r8, r3
   17e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17e8e:	2339      	movs	r3, #57	; 0x39
   17e90:	e5a1      	b.n	179d6 <_dtoa_r+0x9e6>
   17e92:	9a14      	ldr	r2, [sp, #80]	; 0x50
   17e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17e96:	2000      	movs	r0, #0
   17e98:	4934      	ldr	r1, [pc, #208]	; (17f6c <_dtoa_r+0xf7c>)
   17e9a:	f7fb f839 	bl	12f10 <__aeabi_dsub>
   17e9e:	9a08      	ldr	r2, [sp, #32]
   17ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ea2:	f7fb fd47 	bl	13934 <__aeabi_dcmpgt>
   17ea6:	2800      	cmp	r0, #0
   17ea8:	d101      	bne.n	17eae <_dtoa_r+0xebe>
   17eaa:	e6db      	b.n	17c64 <_dtoa_r+0xc74>
   17eac:	001c      	movs	r4, r3
   17eae:	1e63      	subs	r3, r4, #1
   17eb0:	781a      	ldrb	r2, [r3, #0]
   17eb2:	2a30      	cmp	r2, #48	; 0x30
   17eb4:	d0fa      	beq.n	17eac <_dtoa_r+0xebc>
   17eb6:	f7ff fac8 	bl	1744a <_dtoa_r+0x45a>
   17eba:	4643      	mov	r3, r8
   17ebc:	46b3      	mov	fp, r6
   17ebe:	930c      	str	r3, [sp, #48]	; 0x30
   17ec0:	9e04      	ldr	r6, [sp, #16]
   17ec2:	9b06      	ldr	r3, [sp, #24]
   17ec4:	46a8      	mov	r8, r5
   17ec6:	4699      	mov	r9, r3
   17ec8:	4655      	mov	r5, sl
   17eca:	46ba      	mov	sl, r7
   17ecc:	2e39      	cmp	r6, #57	; 0x39
   17ece:	d0d7      	beq.n	17e80 <_dtoa_r+0xe90>
   17ed0:	2c00      	cmp	r4, #0
   17ed2:	dd00      	ble.n	17ed6 <_dtoa_r+0xee6>
   17ed4:	e6b1      	b.n	17c3a <_dtoa_r+0xc4a>
   17ed6:	e6b2      	b.n	17c3e <_dtoa_r+0xc4e>
   17ed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17eda:	464d      	mov	r5, r9
   17edc:	9203      	str	r2, [sp, #12]
   17ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17ee0:	f7ff fba4 	bl	1762c <_dtoa_r+0x63c>
   17ee4:	2800      	cmp	r0, #0
   17ee6:	d000      	beq.n	17eea <_dtoa_r+0xefa>
   17ee8:	e6a9      	b.n	17c3e <_dtoa_r+0xc4e>
   17eea:	07f3      	lsls	r3, r6, #31
   17eec:	d400      	bmi.n	17ef0 <_dtoa_r+0xf00>
   17eee:	e6a6      	b.n	17c3e <_dtoa_r+0xc4e>
   17ef0:	e6a0      	b.n	17c34 <_dtoa_r+0xc44>
   17ef2:	2300      	movs	r3, #0
   17ef4:	4641      	mov	r1, r8
   17ef6:	220a      	movs	r2, #10
   17ef8:	4650      	mov	r0, sl
   17efa:	f001 f88d 	bl	19018 <__multadd>
   17efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17f00:	4680      	mov	r8, r0
   17f02:	2b00      	cmp	r3, #0
   17f04:	dd01      	ble.n	17f0a <_dtoa_r+0xf1a>
   17f06:	9307      	str	r3, [sp, #28]
   17f08:	e486      	b.n	17818 <_dtoa_r+0x828>
   17f0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17f0c:	2b02      	cmp	r3, #2
   17f0e:	dc1f      	bgt.n	17f50 <_dtoa_r+0xf60>
   17f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17f12:	9307      	str	r3, [sp, #28]
   17f14:	e480      	b.n	17818 <_dtoa_r+0x828>
   17f16:	9b22      	ldr	r3, [sp, #136]	; 0x88
   17f18:	2b02      	cmp	r3, #2
   17f1a:	dc19      	bgt.n	17f50 <_dtoa_r+0xf60>
   17f1c:	4649      	mov	r1, r9
   17f1e:	f7fe ffbd 	bl	16e9c <quorem>
   17f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17f24:	3030      	adds	r0, #48	; 0x30
   17f26:	7018      	strb	r0, [r3, #0]
   17f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17f2a:	0006      	movs	r6, r0
   17f2c:	9307      	str	r3, [sp, #28]
   17f2e:	e533      	b.n	17998 <_dtoa_r+0x9a8>
   17f30:	2302      	movs	r3, #2
   17f32:	4698      	mov	r8, r3
   17f34:	f7ff f9ac 	bl	17290 <_dtoa_r+0x2a0>
   17f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17f3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17f3c:	9303      	str	r3, [sp, #12]
   17f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17f40:	001d      	movs	r5, r3
   17f42:	f7ff fb73 	bl	1762c <_dtoa_r+0x63c>
   17f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17f48:	9c14      	ldr	r4, [sp, #80]	; 0x50
   17f4a:	9303      	str	r3, [sp, #12]
   17f4c:	f7ff fa7f 	bl	1744e <_dtoa_r+0x45e>
   17f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17f52:	9307      	str	r3, [sp, #28]
   17f54:	e5d6      	b.n	17b04 <_dtoa_r+0xb14>
   17f56:	2b04      	cmp	r3, #4
   17f58:	d100      	bne.n	17f5c <_dtoa_r+0xf6c>
   17f5a:	e43f      	b.n	177dc <_dtoa_r+0x7ec>
   17f5c:	233c      	movs	r3, #60	; 0x3c
   17f5e:	1a18      	subs	r0, r3, r0
   17f60:	e4d7      	b.n	17912 <_dtoa_r+0x922>
   17f62:	46c0      	nop			; (mov r8, r8)
   17f64:	0001b350 	.word	0x0001b350
   17f68:	40240000 	.word	0x40240000
   17f6c:	3fe00000 	.word	0x3fe00000
   17f70:	401c0000 	.word	0x401c0000
   17f74:	fcc00000 	.word	0xfcc00000

00017f78 <__sflush_r>:
   17f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f7a:	46c6      	mov	lr, r8
   17f7c:	b500      	push	{lr}
   17f7e:	230c      	movs	r3, #12
   17f80:	5eca      	ldrsh	r2, [r1, r3]
   17f82:	4680      	mov	r8, r0
   17f84:	b293      	uxth	r3, r2
   17f86:	000c      	movs	r4, r1
   17f88:	0719      	lsls	r1, r3, #28
   17f8a:	d440      	bmi.n	1800e <__sflush_r+0x96>
   17f8c:	2380      	movs	r3, #128	; 0x80
   17f8e:	011b      	lsls	r3, r3, #4
   17f90:	4313      	orrs	r3, r2
   17f92:	6862      	ldr	r2, [r4, #4]
   17f94:	81a3      	strh	r3, [r4, #12]
   17f96:	2a00      	cmp	r2, #0
   17f98:	dc00      	bgt.n	17f9c <__sflush_r+0x24>
   17f9a:	e070      	b.n	1807e <__sflush_r+0x106>
   17f9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17f9e:	2e00      	cmp	r6, #0
   17fa0:	d031      	beq.n	18006 <__sflush_r+0x8e>
   17fa2:	4642      	mov	r2, r8
   17fa4:	4641      	mov	r1, r8
   17fa6:	6815      	ldr	r5, [r2, #0]
   17fa8:	2200      	movs	r2, #0
   17faa:	b29b      	uxth	r3, r3
   17fac:	600a      	str	r2, [r1, #0]
   17fae:	04da      	lsls	r2, r3, #19
   17fb0:	d400      	bmi.n	17fb4 <__sflush_r+0x3c>
   17fb2:	e069      	b.n	18088 <__sflush_r+0x110>
   17fb4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   17fb6:	075b      	lsls	r3, r3, #29
   17fb8:	d506      	bpl.n	17fc8 <__sflush_r+0x50>
   17fba:	6863      	ldr	r3, [r4, #4]
   17fbc:	1ad2      	subs	r2, r2, r3
   17fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17fc0:	2b00      	cmp	r3, #0
   17fc2:	d001      	beq.n	17fc8 <__sflush_r+0x50>
   17fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17fc6:	1ad2      	subs	r2, r2, r3
   17fc8:	2300      	movs	r3, #0
   17fca:	69e1      	ldr	r1, [r4, #28]
   17fcc:	4640      	mov	r0, r8
   17fce:	47b0      	blx	r6
   17fd0:	1c43      	adds	r3, r0, #1
   17fd2:	d03d      	beq.n	18050 <__sflush_r+0xd8>
   17fd4:	89a3      	ldrh	r3, [r4, #12]
   17fd6:	4a3a      	ldr	r2, [pc, #232]	; (180c0 <__sflush_r+0x148>)
   17fd8:	4013      	ands	r3, r2
   17fda:	2200      	movs	r2, #0
   17fdc:	6062      	str	r2, [r4, #4]
   17fde:	6922      	ldr	r2, [r4, #16]
   17fe0:	b21b      	sxth	r3, r3
   17fe2:	81a3      	strh	r3, [r4, #12]
   17fe4:	6022      	str	r2, [r4, #0]
   17fe6:	04db      	lsls	r3, r3, #19
   17fe8:	d447      	bmi.n	1807a <__sflush_r+0x102>
   17fea:	4643      	mov	r3, r8
   17fec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17fee:	601d      	str	r5, [r3, #0]
   17ff0:	2900      	cmp	r1, #0
   17ff2:	d008      	beq.n	18006 <__sflush_r+0x8e>
   17ff4:	0023      	movs	r3, r4
   17ff6:	3340      	adds	r3, #64	; 0x40
   17ff8:	4299      	cmp	r1, r3
   17ffa:	d002      	beq.n	18002 <__sflush_r+0x8a>
   17ffc:	4640      	mov	r0, r8
   17ffe:	f000 f967 	bl	182d0 <_free_r>
   18002:	2300      	movs	r3, #0
   18004:	6323      	str	r3, [r4, #48]	; 0x30
   18006:	2000      	movs	r0, #0
   18008:	bc04      	pop	{r2}
   1800a:	4690      	mov	r8, r2
   1800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1800e:	6926      	ldr	r6, [r4, #16]
   18010:	2e00      	cmp	r6, #0
   18012:	d0f8      	beq.n	18006 <__sflush_r+0x8e>
   18014:	6822      	ldr	r2, [r4, #0]
   18016:	6026      	str	r6, [r4, #0]
   18018:	1b95      	subs	r5, r2, r6
   1801a:	2200      	movs	r2, #0
   1801c:	079b      	lsls	r3, r3, #30
   1801e:	d100      	bne.n	18022 <__sflush_r+0xaa>
   18020:	6962      	ldr	r2, [r4, #20]
   18022:	60a2      	str	r2, [r4, #8]
   18024:	2d00      	cmp	r5, #0
   18026:	dc04      	bgt.n	18032 <__sflush_r+0xba>
   18028:	e7ed      	b.n	18006 <__sflush_r+0x8e>
   1802a:	1836      	adds	r6, r6, r0
   1802c:	1a2d      	subs	r5, r5, r0
   1802e:	2d00      	cmp	r5, #0
   18030:	dde9      	ble.n	18006 <__sflush_r+0x8e>
   18032:	002b      	movs	r3, r5
   18034:	0032      	movs	r2, r6
   18036:	69e1      	ldr	r1, [r4, #28]
   18038:	4640      	mov	r0, r8
   1803a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1803c:	47b8      	blx	r7
   1803e:	2800      	cmp	r0, #0
   18040:	dcf3      	bgt.n	1802a <__sflush_r+0xb2>
   18042:	2240      	movs	r2, #64	; 0x40
   18044:	2001      	movs	r0, #1
   18046:	89a3      	ldrh	r3, [r4, #12]
   18048:	4240      	negs	r0, r0
   1804a:	4313      	orrs	r3, r2
   1804c:	81a3      	strh	r3, [r4, #12]
   1804e:	e7db      	b.n	18008 <__sflush_r+0x90>
   18050:	4643      	mov	r3, r8
   18052:	6819      	ldr	r1, [r3, #0]
   18054:	291d      	cmp	r1, #29
   18056:	d8f4      	bhi.n	18042 <__sflush_r+0xca>
   18058:	4b1a      	ldr	r3, [pc, #104]	; (180c4 <__sflush_r+0x14c>)
   1805a:	2201      	movs	r2, #1
   1805c:	40cb      	lsrs	r3, r1
   1805e:	439a      	bics	r2, r3
   18060:	d1ef      	bne.n	18042 <__sflush_r+0xca>
   18062:	89a3      	ldrh	r3, [r4, #12]
   18064:	4e16      	ldr	r6, [pc, #88]	; (180c0 <__sflush_r+0x148>)
   18066:	6062      	str	r2, [r4, #4]
   18068:	4033      	ands	r3, r6
   1806a:	6922      	ldr	r2, [r4, #16]
   1806c:	b21b      	sxth	r3, r3
   1806e:	81a3      	strh	r3, [r4, #12]
   18070:	6022      	str	r2, [r4, #0]
   18072:	04db      	lsls	r3, r3, #19
   18074:	d5b9      	bpl.n	17fea <__sflush_r+0x72>
   18076:	2900      	cmp	r1, #0
   18078:	d1b7      	bne.n	17fea <__sflush_r+0x72>
   1807a:	6520      	str	r0, [r4, #80]	; 0x50
   1807c:	e7b5      	b.n	17fea <__sflush_r+0x72>
   1807e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   18080:	2a00      	cmp	r2, #0
   18082:	dd00      	ble.n	18086 <__sflush_r+0x10e>
   18084:	e78a      	b.n	17f9c <__sflush_r+0x24>
   18086:	e7be      	b.n	18006 <__sflush_r+0x8e>
   18088:	2200      	movs	r2, #0
   1808a:	2301      	movs	r3, #1
   1808c:	69e1      	ldr	r1, [r4, #28]
   1808e:	4640      	mov	r0, r8
   18090:	47b0      	blx	r6
   18092:	0002      	movs	r2, r0
   18094:	1c43      	adds	r3, r0, #1
   18096:	d002      	beq.n	1809e <__sflush_r+0x126>
   18098:	89a3      	ldrh	r3, [r4, #12]
   1809a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1809c:	e78b      	b.n	17fb6 <__sflush_r+0x3e>
   1809e:	4643      	mov	r3, r8
   180a0:	681b      	ldr	r3, [r3, #0]
   180a2:	2b00      	cmp	r3, #0
   180a4:	d0f8      	beq.n	18098 <__sflush_r+0x120>
   180a6:	2b1d      	cmp	r3, #29
   180a8:	d001      	beq.n	180ae <__sflush_r+0x136>
   180aa:	2b16      	cmp	r3, #22
   180ac:	d103      	bne.n	180b6 <__sflush_r+0x13e>
   180ae:	4643      	mov	r3, r8
   180b0:	2000      	movs	r0, #0
   180b2:	601d      	str	r5, [r3, #0]
   180b4:	e7a8      	b.n	18008 <__sflush_r+0x90>
   180b6:	2140      	movs	r1, #64	; 0x40
   180b8:	89a3      	ldrh	r3, [r4, #12]
   180ba:	430b      	orrs	r3, r1
   180bc:	81a3      	strh	r3, [r4, #12]
   180be:	e7a3      	b.n	18008 <__sflush_r+0x90>
   180c0:	fffff7ff 	.word	0xfffff7ff
   180c4:	20400001 	.word	0x20400001

000180c8 <_fflush_r>:
   180c8:	b570      	push	{r4, r5, r6, lr}
   180ca:	0005      	movs	r5, r0
   180cc:	000c      	movs	r4, r1
   180ce:	2800      	cmp	r0, #0
   180d0:	d002      	beq.n	180d8 <_fflush_r+0x10>
   180d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   180d4:	2b00      	cmp	r3, #0
   180d6:	d016      	beq.n	18106 <_fflush_r+0x3e>
   180d8:	220c      	movs	r2, #12
   180da:	5ea3      	ldrsh	r3, [r4, r2]
   180dc:	2600      	movs	r6, #0
   180de:	2b00      	cmp	r3, #0
   180e0:	d00f      	beq.n	18102 <_fflush_r+0x3a>
   180e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   180e4:	07d2      	lsls	r2, r2, #31
   180e6:	d401      	bmi.n	180ec <_fflush_r+0x24>
   180e8:	059b      	lsls	r3, r3, #22
   180ea:	d513      	bpl.n	18114 <_fflush_r+0x4c>
   180ec:	0021      	movs	r1, r4
   180ee:	0028      	movs	r0, r5
   180f0:	f7ff ff42 	bl	17f78 <__sflush_r>
   180f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   180f6:	0006      	movs	r6, r0
   180f8:	07db      	lsls	r3, r3, #31
   180fa:	d402      	bmi.n	18102 <_fflush_r+0x3a>
   180fc:	89a3      	ldrh	r3, [r4, #12]
   180fe:	059b      	lsls	r3, r3, #22
   18100:	d504      	bpl.n	1810c <_fflush_r+0x44>
   18102:	0030      	movs	r0, r6
   18104:	bd70      	pop	{r4, r5, r6, pc}
   18106:	f000 f839 	bl	1817c <__sinit>
   1810a:	e7e5      	b.n	180d8 <_fflush_r+0x10>
   1810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1810e:	f000 fb79 	bl	18804 <__retarget_lock_release_recursive>
   18112:	e7f6      	b.n	18102 <_fflush_r+0x3a>
   18114:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18116:	f000 fb73 	bl	18800 <__retarget_lock_acquire_recursive>
   1811a:	e7e7      	b.n	180ec <_fflush_r+0x24>

0001811c <_cleanup_r>:
   1811c:	b510      	push	{r4, lr}
   1811e:	4902      	ldr	r1, [pc, #8]	; (18128 <_cleanup_r+0xc>)
   18120:	f000 fb36 	bl	18790 <_fwalk_reent>
   18124:	bd10      	pop	{r4, pc}
   18126:	46c0      	nop			; (mov r8, r8)
   18128:	00019dd1 	.word	0x00019dd1

0001812c <std.isra.0>:
   1812c:	2300      	movs	r3, #0
   1812e:	b510      	push	{r4, lr}
   18130:	0004      	movs	r4, r0
   18132:	6003      	str	r3, [r0, #0]
   18134:	6043      	str	r3, [r0, #4]
   18136:	6083      	str	r3, [r0, #8]
   18138:	8181      	strh	r1, [r0, #12]
   1813a:	6643      	str	r3, [r0, #100]	; 0x64
   1813c:	81c2      	strh	r2, [r0, #14]
   1813e:	6103      	str	r3, [r0, #16]
   18140:	6143      	str	r3, [r0, #20]
   18142:	6183      	str	r3, [r0, #24]
   18144:	2208      	movs	r2, #8
   18146:	2100      	movs	r1, #0
   18148:	305c      	adds	r0, #92	; 0x5c
   1814a:	f7fb fd6d 	bl	13c28 <memset>
   1814e:	0020      	movs	r0, r4
   18150:	4b06      	ldr	r3, [pc, #24]	; (1816c <std.isra.0+0x40>)
   18152:	61e4      	str	r4, [r4, #28]
   18154:	6223      	str	r3, [r4, #32]
   18156:	4b06      	ldr	r3, [pc, #24]	; (18170 <std.isra.0+0x44>)
   18158:	3058      	adds	r0, #88	; 0x58
   1815a:	6263      	str	r3, [r4, #36]	; 0x24
   1815c:	4b05      	ldr	r3, [pc, #20]	; (18174 <std.isra.0+0x48>)
   1815e:	62a3      	str	r3, [r4, #40]	; 0x28
   18160:	4b05      	ldr	r3, [pc, #20]	; (18178 <std.isra.0+0x4c>)
   18162:	62e3      	str	r3, [r4, #44]	; 0x2c
   18164:	f000 fb48 	bl	187f8 <__retarget_lock_init_recursive>
   18168:	bd10      	pop	{r4, pc}
   1816a:	46c0      	nop			; (mov r8, r8)
   1816c:	000199e5 	.word	0x000199e5
   18170:	00019a0d 	.word	0x00019a0d
   18174:	00019a49 	.word	0x00019a49
   18178:	00019a75 	.word	0x00019a75

0001817c <__sinit>:
   1817c:	b570      	push	{r4, r5, r6, lr}
   1817e:	0004      	movs	r4, r0
   18180:	4d14      	ldr	r5, [pc, #80]	; (181d4 <__sinit+0x58>)
   18182:	0028      	movs	r0, r5
   18184:	f000 fb3c 	bl	18800 <__retarget_lock_acquire_recursive>
   18188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1818a:	2b00      	cmp	r3, #0
   1818c:	d11d      	bne.n	181ca <__sinit+0x4e>
   1818e:	4a12      	ldr	r2, [pc, #72]	; (181d8 <__sinit+0x5c>)
   18190:	2104      	movs	r1, #4
   18192:	63e2      	str	r2, [r4, #60]	; 0x3c
   18194:	22b8      	movs	r2, #184	; 0xb8
   18196:	0092      	lsls	r2, r2, #2
   18198:	50a3      	str	r3, [r4, r2]
   1819a:	23b9      	movs	r3, #185	; 0xb9
   1819c:	2203      	movs	r2, #3
   1819e:	009b      	lsls	r3, r3, #2
   181a0:	50e2      	str	r2, [r4, r3]
   181a2:	3308      	adds	r3, #8
   181a4:	18e2      	adds	r2, r4, r3
   181a6:	3b04      	subs	r3, #4
   181a8:	50e2      	str	r2, [r4, r3]
   181aa:	6860      	ldr	r0, [r4, #4]
   181ac:	2200      	movs	r2, #0
   181ae:	f7ff ffbd 	bl	1812c <std.isra.0>
   181b2:	2201      	movs	r2, #1
   181b4:	2109      	movs	r1, #9
   181b6:	68a0      	ldr	r0, [r4, #8]
   181b8:	f7ff ffb8 	bl	1812c <std.isra.0>
   181bc:	2202      	movs	r2, #2
   181be:	2112      	movs	r1, #18
   181c0:	68e0      	ldr	r0, [r4, #12]
   181c2:	f7ff ffb3 	bl	1812c <std.isra.0>
   181c6:	2301      	movs	r3, #1
   181c8:	63a3      	str	r3, [r4, #56]	; 0x38
   181ca:	0028      	movs	r0, r5
   181cc:	f000 fb1a 	bl	18804 <__retarget_lock_release_recursive>
   181d0:	bd70      	pop	{r4, r5, r6, pc}
   181d2:	46c0      	nop			; (mov r8, r8)
   181d4:	20001c70 	.word	0x20001c70
   181d8:	0001811d 	.word	0x0001811d

000181dc <__sfp_lock_acquire>:
   181dc:	b510      	push	{r4, lr}
   181de:	4802      	ldr	r0, [pc, #8]	; (181e8 <__sfp_lock_acquire+0xc>)
   181e0:	f000 fb0e 	bl	18800 <__retarget_lock_acquire_recursive>
   181e4:	bd10      	pop	{r4, pc}
   181e6:	46c0      	nop			; (mov r8, r8)
   181e8:	20001c84 	.word	0x20001c84

000181ec <__sfp_lock_release>:
   181ec:	b510      	push	{r4, lr}
   181ee:	4802      	ldr	r0, [pc, #8]	; (181f8 <__sfp_lock_release+0xc>)
   181f0:	f000 fb08 	bl	18804 <__retarget_lock_release_recursive>
   181f4:	bd10      	pop	{r4, pc}
   181f6:	46c0      	nop			; (mov r8, r8)
   181f8:	20001c84 	.word	0x20001c84

000181fc <__libc_fini_array>:
   181fc:	b570      	push	{r4, r5, r6, lr}
   181fe:	4b09      	ldr	r3, [pc, #36]	; (18224 <__libc_fini_array+0x28>)
   18200:	4c09      	ldr	r4, [pc, #36]	; (18228 <__libc_fini_array+0x2c>)
   18202:	1ae4      	subs	r4, r4, r3
   18204:	10a4      	asrs	r4, r4, #2
   18206:	d009      	beq.n	1821c <__libc_fini_array+0x20>
   18208:	4a08      	ldr	r2, [pc, #32]	; (1822c <__libc_fini_array+0x30>)
   1820a:	18a5      	adds	r5, r4, r2
   1820c:	00ad      	lsls	r5, r5, #2
   1820e:	18ed      	adds	r5, r5, r3
   18210:	682b      	ldr	r3, [r5, #0]
   18212:	3c01      	subs	r4, #1
   18214:	4798      	blx	r3
   18216:	3d04      	subs	r5, #4
   18218:	2c00      	cmp	r4, #0
   1821a:	d1f9      	bne.n	18210 <__libc_fini_array+0x14>
   1821c:	f003 f996 	bl	1b54c <_fini>
   18220:	bd70      	pop	{r4, r5, r6, pc}
   18222:	46c0      	nop			; (mov r8, r8)
   18224:	0001b558 	.word	0x0001b558
   18228:	0001b55c 	.word	0x0001b55c
   1822c:	3fffffff 	.word	0x3fffffff

00018230 <_malloc_trim_r>:
   18230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18232:	000c      	movs	r4, r1
   18234:	0006      	movs	r6, r0
   18236:	f000 fead 	bl	18f94 <__malloc_lock>
   1823a:	4f20      	ldr	r7, [pc, #128]	; (182bc <_malloc_trim_r+0x8c>)
   1823c:	68bb      	ldr	r3, [r7, #8]
   1823e:	685d      	ldr	r5, [r3, #4]
   18240:	2303      	movs	r3, #3
   18242:	439d      	bics	r5, r3
   18244:	4b1e      	ldr	r3, [pc, #120]	; (182c0 <_malloc_trim_r+0x90>)
   18246:	1b2c      	subs	r4, r5, r4
   18248:	469c      	mov	ip, r3
   1824a:	4464      	add	r4, ip
   1824c:	0b24      	lsrs	r4, r4, #12
   1824e:	4b1d      	ldr	r3, [pc, #116]	; (182c4 <_malloc_trim_r+0x94>)
   18250:	3c01      	subs	r4, #1
   18252:	0324      	lsls	r4, r4, #12
   18254:	429c      	cmp	r4, r3
   18256:	dd07      	ble.n	18268 <_malloc_trim_r+0x38>
   18258:	2100      	movs	r1, #0
   1825a:	0030      	movs	r0, r6
   1825c:	f001 fbb0 	bl	199c0 <_sbrk_r>
   18260:	68bb      	ldr	r3, [r7, #8]
   18262:	195b      	adds	r3, r3, r5
   18264:	4298      	cmp	r0, r3
   18266:	d004      	beq.n	18272 <_malloc_trim_r+0x42>
   18268:	0030      	movs	r0, r6
   1826a:	f000 fe9b 	bl	18fa4 <__malloc_unlock>
   1826e:	2000      	movs	r0, #0
   18270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18272:	4261      	negs	r1, r4
   18274:	0030      	movs	r0, r6
   18276:	f001 fba3 	bl	199c0 <_sbrk_r>
   1827a:	1c43      	adds	r3, r0, #1
   1827c:	d00d      	beq.n	1829a <_malloc_trim_r+0x6a>
   1827e:	2201      	movs	r2, #1
   18280:	68bb      	ldr	r3, [r7, #8]
   18282:	1b2d      	subs	r5, r5, r4
   18284:	4315      	orrs	r5, r2
   18286:	605d      	str	r5, [r3, #4]
   18288:	4b0f      	ldr	r3, [pc, #60]	; (182c8 <_malloc_trim_r+0x98>)
   1828a:	0030      	movs	r0, r6
   1828c:	681a      	ldr	r2, [r3, #0]
   1828e:	1b14      	subs	r4, r2, r4
   18290:	601c      	str	r4, [r3, #0]
   18292:	f000 fe87 	bl	18fa4 <__malloc_unlock>
   18296:	2001      	movs	r0, #1
   18298:	e7ea      	b.n	18270 <_malloc_trim_r+0x40>
   1829a:	2100      	movs	r1, #0
   1829c:	0030      	movs	r0, r6
   1829e:	f001 fb8f 	bl	199c0 <_sbrk_r>
   182a2:	68ba      	ldr	r2, [r7, #8]
   182a4:	1a83      	subs	r3, r0, r2
   182a6:	2b0f      	cmp	r3, #15
   182a8:	ddde      	ble.n	18268 <_malloc_trim_r+0x38>
   182aa:	4908      	ldr	r1, [pc, #32]	; (182cc <_malloc_trim_r+0x9c>)
   182ac:	6809      	ldr	r1, [r1, #0]
   182ae:	1a40      	subs	r0, r0, r1
   182b0:	4905      	ldr	r1, [pc, #20]	; (182c8 <_malloc_trim_r+0x98>)
   182b2:	6008      	str	r0, [r1, #0]
   182b4:	2101      	movs	r1, #1
   182b6:	430b      	orrs	r3, r1
   182b8:	6053      	str	r3, [r2, #4]
   182ba:	e7d5      	b.n	18268 <_malloc_trim_r+0x38>
   182bc:	2000046c 	.word	0x2000046c
   182c0:	00000fef 	.word	0x00000fef
   182c4:	00000fff 	.word	0x00000fff
   182c8:	20000f50 	.word	0x20000f50
   182cc:	20000874 	.word	0x20000874

000182d0 <_free_r>:
   182d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182d2:	0004      	movs	r4, r0
   182d4:	1e0d      	subs	r5, r1, #0
   182d6:	d03c      	beq.n	18352 <_free_r+0x82>
   182d8:	f000 fe5c 	bl	18f94 <__malloc_lock>
   182dc:	0029      	movs	r1, r5
   182de:	3908      	subs	r1, #8
   182e0:	6848      	ldr	r0, [r1, #4]
   182e2:	2301      	movs	r3, #1
   182e4:	0005      	movs	r5, r0
   182e6:	2603      	movs	r6, #3
   182e8:	439d      	bics	r5, r3
   182ea:	194a      	adds	r2, r1, r5
   182ec:	469c      	mov	ip, r3
   182ee:	4f61      	ldr	r7, [pc, #388]	; (18474 <_free_r+0x1a4>)
   182f0:	6853      	ldr	r3, [r2, #4]
   182f2:	43b3      	bics	r3, r6
   182f4:	68be      	ldr	r6, [r7, #8]
   182f6:	42b2      	cmp	r2, r6
   182f8:	d056      	beq.n	183a8 <_free_r+0xd8>
   182fa:	4666      	mov	r6, ip
   182fc:	6053      	str	r3, [r2, #4]
   182fe:	4206      	tst	r6, r0
   18300:	d10a      	bne.n	18318 <_free_r+0x48>
   18302:	003e      	movs	r6, r7
   18304:	6808      	ldr	r0, [r1, #0]
   18306:	3608      	adds	r6, #8
   18308:	1a09      	subs	r1, r1, r0
   1830a:	182d      	adds	r5, r5, r0
   1830c:	6888      	ldr	r0, [r1, #8]
   1830e:	42b0      	cmp	r0, r6
   18310:	d065      	beq.n	183de <_free_r+0x10e>
   18312:	68ce      	ldr	r6, [r1, #12]
   18314:	60c6      	str	r6, [r0, #12]
   18316:	60b0      	str	r0, [r6, #8]
   18318:	2001      	movs	r0, #1
   1831a:	18d6      	adds	r6, r2, r3
   1831c:	6876      	ldr	r6, [r6, #4]
   1831e:	4206      	tst	r6, r0
   18320:	d033      	beq.n	1838a <_free_r+0xba>
   18322:	4b55      	ldr	r3, [pc, #340]	; (18478 <_free_r+0x1a8>)
   18324:	4328      	orrs	r0, r5
   18326:	6048      	str	r0, [r1, #4]
   18328:	514d      	str	r5, [r1, r5]
   1832a:	429d      	cmp	r5, r3
   1832c:	d812      	bhi.n	18354 <_free_r+0x84>
   1832e:	08ed      	lsrs	r5, r5, #3
   18330:	3bff      	subs	r3, #255	; 0xff
   18332:	10aa      	asrs	r2, r5, #2
   18334:	3bff      	subs	r3, #255	; 0xff
   18336:	4093      	lsls	r3, r2
   18338:	687a      	ldr	r2, [r7, #4]
   1833a:	00ed      	lsls	r5, r5, #3
   1833c:	4313      	orrs	r3, r2
   1833e:	607b      	str	r3, [r7, #4]
   18340:	19ef      	adds	r7, r5, r7
   18342:	68bb      	ldr	r3, [r7, #8]
   18344:	60cf      	str	r7, [r1, #12]
   18346:	608b      	str	r3, [r1, #8]
   18348:	60b9      	str	r1, [r7, #8]
   1834a:	60d9      	str	r1, [r3, #12]
   1834c:	0020      	movs	r0, r4
   1834e:	f000 fe29 	bl	18fa4 <__malloc_unlock>
   18352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18354:	0a68      	lsrs	r0, r5, #9
   18356:	2804      	cmp	r0, #4
   18358:	d850      	bhi.n	183fc <_free_r+0x12c>
   1835a:	09a8      	lsrs	r0, r5, #6
   1835c:	0002      	movs	r2, r0
   1835e:	3039      	adds	r0, #57	; 0x39
   18360:	3238      	adds	r2, #56	; 0x38
   18362:	00c0      	lsls	r0, r0, #3
   18364:	1838      	adds	r0, r7, r0
   18366:	3808      	subs	r0, #8
   18368:	6883      	ldr	r3, [r0, #8]
   1836a:	2603      	movs	r6, #3
   1836c:	4298      	cmp	r0, r3
   1836e:	d04c      	beq.n	1840a <_free_r+0x13a>
   18370:	685a      	ldr	r2, [r3, #4]
   18372:	43b2      	bics	r2, r6
   18374:	4295      	cmp	r5, r2
   18376:	d230      	bcs.n	183da <_free_r+0x10a>
   18378:	689b      	ldr	r3, [r3, #8]
   1837a:	4298      	cmp	r0, r3
   1837c:	d1f8      	bne.n	18370 <_free_r+0xa0>
   1837e:	68c3      	ldr	r3, [r0, #12]
   18380:	60cb      	str	r3, [r1, #12]
   18382:	6088      	str	r0, [r1, #8]
   18384:	6099      	str	r1, [r3, #8]
   18386:	60c1      	str	r1, [r0, #12]
   18388:	e7e0      	b.n	1834c <_free_r+0x7c>
   1838a:	18ed      	adds	r5, r5, r3
   1838c:	4e3b      	ldr	r6, [pc, #236]	; (1847c <_free_r+0x1ac>)
   1838e:	6893      	ldr	r3, [r2, #8]
   18390:	42b3      	cmp	r3, r6
   18392:	d042      	beq.n	1841a <_free_r+0x14a>
   18394:	68d2      	ldr	r2, [r2, #12]
   18396:	4328      	orrs	r0, r5
   18398:	60da      	str	r2, [r3, #12]
   1839a:	6093      	str	r3, [r2, #8]
   1839c:	4b36      	ldr	r3, [pc, #216]	; (18478 <_free_r+0x1a8>)
   1839e:	6048      	str	r0, [r1, #4]
   183a0:	514d      	str	r5, [r1, r5]
   183a2:	429d      	cmp	r5, r3
   183a4:	d8d6      	bhi.n	18354 <_free_r+0x84>
   183a6:	e7c2      	b.n	1832e <_free_r+0x5e>
   183a8:	4662      	mov	r2, ip
   183aa:	18eb      	adds	r3, r5, r3
   183ac:	4202      	tst	r2, r0
   183ae:	d106      	bne.n	183be <_free_r+0xee>
   183b0:	680a      	ldr	r2, [r1, #0]
   183b2:	1a89      	subs	r1, r1, r2
   183b4:	6888      	ldr	r0, [r1, #8]
   183b6:	189b      	adds	r3, r3, r2
   183b8:	68ca      	ldr	r2, [r1, #12]
   183ba:	60c2      	str	r2, [r0, #12]
   183bc:	6090      	str	r0, [r2, #8]
   183be:	2201      	movs	r2, #1
   183c0:	431a      	orrs	r2, r3
   183c2:	604a      	str	r2, [r1, #4]
   183c4:	4a2e      	ldr	r2, [pc, #184]	; (18480 <_free_r+0x1b0>)
   183c6:	60b9      	str	r1, [r7, #8]
   183c8:	6812      	ldr	r2, [r2, #0]
   183ca:	4293      	cmp	r3, r2
   183cc:	d3be      	bcc.n	1834c <_free_r+0x7c>
   183ce:	4b2d      	ldr	r3, [pc, #180]	; (18484 <_free_r+0x1b4>)
   183d0:	0020      	movs	r0, r4
   183d2:	6819      	ldr	r1, [r3, #0]
   183d4:	f7ff ff2c 	bl	18230 <_malloc_trim_r>
   183d8:	e7b8      	b.n	1834c <_free_r+0x7c>
   183da:	0018      	movs	r0, r3
   183dc:	e7cf      	b.n	1837e <_free_r+0xae>
   183de:	4666      	mov	r6, ip
   183e0:	18d0      	adds	r0, r2, r3
   183e2:	6840      	ldr	r0, [r0, #4]
   183e4:	4230      	tst	r0, r6
   183e6:	d13f      	bne.n	18468 <_free_r+0x198>
   183e8:	6890      	ldr	r0, [r2, #8]
   183ea:	195d      	adds	r5, r3, r5
   183ec:	68d3      	ldr	r3, [r2, #12]
   183ee:	60c3      	str	r3, [r0, #12]
   183f0:	6098      	str	r0, [r3, #8]
   183f2:	4663      	mov	r3, ip
   183f4:	432b      	orrs	r3, r5
   183f6:	604b      	str	r3, [r1, #4]
   183f8:	514d      	str	r5, [r1, r5]
   183fa:	e7a7      	b.n	1834c <_free_r+0x7c>
   183fc:	2814      	cmp	r0, #20
   183fe:	d814      	bhi.n	1842a <_free_r+0x15a>
   18400:	0002      	movs	r2, r0
   18402:	305c      	adds	r0, #92	; 0x5c
   18404:	325b      	adds	r2, #91	; 0x5b
   18406:	00c0      	lsls	r0, r0, #3
   18408:	e7ac      	b.n	18364 <_free_r+0x94>
   1840a:	2301      	movs	r3, #1
   1840c:	1092      	asrs	r2, r2, #2
   1840e:	4093      	lsls	r3, r2
   18410:	687a      	ldr	r2, [r7, #4]
   18412:	4313      	orrs	r3, r2
   18414:	607b      	str	r3, [r7, #4]
   18416:	0003      	movs	r3, r0
   18418:	e7b2      	b.n	18380 <_free_r+0xb0>
   1841a:	4328      	orrs	r0, r5
   1841c:	60d9      	str	r1, [r3, #12]
   1841e:	6099      	str	r1, [r3, #8]
   18420:	60cb      	str	r3, [r1, #12]
   18422:	608b      	str	r3, [r1, #8]
   18424:	6048      	str	r0, [r1, #4]
   18426:	514d      	str	r5, [r1, r5]
   18428:	e790      	b.n	1834c <_free_r+0x7c>
   1842a:	2854      	cmp	r0, #84	; 0x54
   1842c:	d805      	bhi.n	1843a <_free_r+0x16a>
   1842e:	0b28      	lsrs	r0, r5, #12
   18430:	0002      	movs	r2, r0
   18432:	306f      	adds	r0, #111	; 0x6f
   18434:	326e      	adds	r2, #110	; 0x6e
   18436:	00c0      	lsls	r0, r0, #3
   18438:	e794      	b.n	18364 <_free_r+0x94>
   1843a:	22aa      	movs	r2, #170	; 0xaa
   1843c:	0052      	lsls	r2, r2, #1
   1843e:	4290      	cmp	r0, r2
   18440:	d805      	bhi.n	1844e <_free_r+0x17e>
   18442:	0be8      	lsrs	r0, r5, #15
   18444:	0002      	movs	r2, r0
   18446:	3078      	adds	r0, #120	; 0x78
   18448:	3277      	adds	r2, #119	; 0x77
   1844a:	00c0      	lsls	r0, r0, #3
   1844c:	e78a      	b.n	18364 <_free_r+0x94>
   1844e:	4a0e      	ldr	r2, [pc, #56]	; (18488 <_free_r+0x1b8>)
   18450:	4290      	cmp	r0, r2
   18452:	d805      	bhi.n	18460 <_free_r+0x190>
   18454:	0ca8      	lsrs	r0, r5, #18
   18456:	0002      	movs	r2, r0
   18458:	307d      	adds	r0, #125	; 0x7d
   1845a:	327c      	adds	r2, #124	; 0x7c
   1845c:	00c0      	lsls	r0, r0, #3
   1845e:	e781      	b.n	18364 <_free_r+0x94>
   18460:	20fe      	movs	r0, #254	; 0xfe
   18462:	227e      	movs	r2, #126	; 0x7e
   18464:	0080      	lsls	r0, r0, #2
   18466:	e77d      	b.n	18364 <_free_r+0x94>
   18468:	4663      	mov	r3, ip
   1846a:	432b      	orrs	r3, r5
   1846c:	604b      	str	r3, [r1, #4]
   1846e:	6015      	str	r5, [r2, #0]
   18470:	e76c      	b.n	1834c <_free_r+0x7c>
   18472:	46c0      	nop			; (mov r8, r8)
   18474:	2000046c 	.word	0x2000046c
   18478:	000001ff 	.word	0x000001ff
   1847c:	20000474 	.word	0x20000474
   18480:	20000878 	.word	0x20000878
   18484:	20000f80 	.word	0x20000f80
   18488:	00000554 	.word	0x00000554

0001848c <__sfvwrite_r>:
   1848c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1848e:	464e      	mov	r6, r9
   18490:	46de      	mov	lr, fp
   18492:	4657      	mov	r7, sl
   18494:	4645      	mov	r5, r8
   18496:	b5e0      	push	{r5, r6, r7, lr}
   18498:	6893      	ldr	r3, [r2, #8]
   1849a:	b083      	sub	sp, #12
   1849c:	9000      	str	r0, [sp, #0]
   1849e:	000c      	movs	r4, r1
   184a0:	0016      	movs	r6, r2
   184a2:	2b00      	cmp	r3, #0
   184a4:	d025      	beq.n	184f2 <__sfvwrite_r+0x66>
   184a6:	898b      	ldrh	r3, [r1, #12]
   184a8:	071a      	lsls	r2, r3, #28
   184aa:	d52a      	bpl.n	18502 <__sfvwrite_r+0x76>
   184ac:	690a      	ldr	r2, [r1, #16]
   184ae:	2a00      	cmp	r2, #0
   184b0:	d027      	beq.n	18502 <__sfvwrite_r+0x76>
   184b2:	6832      	ldr	r2, [r6, #0]
   184b4:	4693      	mov	fp, r2
   184b6:	079a      	lsls	r2, r3, #30
   184b8:	d52f      	bpl.n	1851a <__sfvwrite_r+0x8e>
   184ba:	4bb2      	ldr	r3, [pc, #712]	; (18784 <__sfvwrite_r+0x2f8>)
   184bc:	2700      	movs	r7, #0
   184be:	2500      	movs	r5, #0
   184c0:	4698      	mov	r8, r3
   184c2:	46b1      	mov	r9, r6
   184c4:	2d00      	cmp	r5, #0
   184c6:	d100      	bne.n	184ca <__sfvwrite_r+0x3e>
   184c8:	e072      	b.n	185b0 <__sfvwrite_r+0x124>
   184ca:	002b      	movs	r3, r5
   184cc:	4545      	cmp	r5, r8
   184ce:	d900      	bls.n	184d2 <__sfvwrite_r+0x46>
   184d0:	4bac      	ldr	r3, [pc, #688]	; (18784 <__sfvwrite_r+0x2f8>)
   184d2:	003a      	movs	r2, r7
   184d4:	69e1      	ldr	r1, [r4, #28]
   184d6:	9800      	ldr	r0, [sp, #0]
   184d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   184da:	47b0      	blx	r6
   184dc:	2800      	cmp	r0, #0
   184de:	dc00      	bgt.n	184e2 <__sfvwrite_r+0x56>
   184e0:	e073      	b.n	185ca <__sfvwrite_r+0x13e>
   184e2:	464b      	mov	r3, r9
   184e4:	689b      	ldr	r3, [r3, #8]
   184e6:	183f      	adds	r7, r7, r0
   184e8:	1a2d      	subs	r5, r5, r0
   184ea:	1a18      	subs	r0, r3, r0
   184ec:	464b      	mov	r3, r9
   184ee:	6098      	str	r0, [r3, #8]
   184f0:	d1e8      	bne.n	184c4 <__sfvwrite_r+0x38>
   184f2:	2000      	movs	r0, #0
   184f4:	b003      	add	sp, #12
   184f6:	bc3c      	pop	{r2, r3, r4, r5}
   184f8:	4690      	mov	r8, r2
   184fa:	4699      	mov	r9, r3
   184fc:	46a2      	mov	sl, r4
   184fe:	46ab      	mov	fp, r5
   18500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18502:	0021      	movs	r1, r4
   18504:	9800      	ldr	r0, [sp, #0]
   18506:	f7fe fc4b 	bl	16da0 <__swsetup_r>
   1850a:	2800      	cmp	r0, #0
   1850c:	d000      	beq.n	18510 <__sfvwrite_r+0x84>
   1850e:	e130      	b.n	18772 <__sfvwrite_r+0x2e6>
   18510:	6832      	ldr	r2, [r6, #0]
   18512:	89a3      	ldrh	r3, [r4, #12]
   18514:	4693      	mov	fp, r2
   18516:	079a      	lsls	r2, r3, #30
   18518:	d4cf      	bmi.n	184ba <__sfvwrite_r+0x2e>
   1851a:	07da      	lsls	r2, r3, #31
   1851c:	d55d      	bpl.n	185da <__sfvwrite_r+0x14e>
   1851e:	2300      	movs	r3, #0
   18520:	2000      	movs	r0, #0
   18522:	469a      	mov	sl, r3
   18524:	2700      	movs	r7, #0
   18526:	001d      	movs	r5, r3
   18528:	46b1      	mov	r9, r6
   1852a:	e029      	b.n	18580 <__sfvwrite_r+0xf4>
   1852c:	2800      	cmp	r0, #0
   1852e:	d033      	beq.n	18598 <__sfvwrite_r+0x10c>
   18530:	46a8      	mov	r8, r5
   18532:	42bd      	cmp	r5, r7
   18534:	d900      	bls.n	18538 <__sfvwrite_r+0xac>
   18536:	46b8      	mov	r8, r7
   18538:	6820      	ldr	r0, [r4, #0]
   1853a:	6922      	ldr	r2, [r4, #16]
   1853c:	4646      	mov	r6, r8
   1853e:	6963      	ldr	r3, [r4, #20]
   18540:	4290      	cmp	r0, r2
   18542:	d907      	bls.n	18554 <__sfvwrite_r+0xc8>
   18544:	68a2      	ldr	r2, [r4, #8]
   18546:	4694      	mov	ip, r2
   18548:	449c      	add	ip, r3
   1854a:	4662      	mov	r2, ip
   1854c:	9201      	str	r2, [sp, #4]
   1854e:	45e0      	cmp	r8, ip
   18550:	dd00      	ble.n	18554 <__sfvwrite_r+0xc8>
   18552:	e0e9      	b.n	18728 <__sfvwrite_r+0x29c>
   18554:	4598      	cmp	r8, r3
   18556:	da00      	bge.n	1855a <__sfvwrite_r+0xce>
   18558:	e08f      	b.n	1867a <__sfvwrite_r+0x1ee>
   1855a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1855c:	4652      	mov	r2, sl
   1855e:	69e1      	ldr	r1, [r4, #28]
   18560:	9800      	ldr	r0, [sp, #0]
   18562:	47b0      	blx	r6
   18564:	1e06      	subs	r6, r0, #0
   18566:	dd30      	ble.n	185ca <__sfvwrite_r+0x13e>
   18568:	1bad      	subs	r5, r5, r6
   1856a:	2001      	movs	r0, #1
   1856c:	2d00      	cmp	r5, #0
   1856e:	d026      	beq.n	185be <__sfvwrite_r+0x132>
   18570:	464b      	mov	r3, r9
   18572:	689b      	ldr	r3, [r3, #8]
   18574:	44b2      	add	sl, r6
   18576:	1bbf      	subs	r7, r7, r6
   18578:	1b9e      	subs	r6, r3, r6
   1857a:	464b      	mov	r3, r9
   1857c:	609e      	str	r6, [r3, #8]
   1857e:	d0b8      	beq.n	184f2 <__sfvwrite_r+0x66>
   18580:	2f00      	cmp	r7, #0
   18582:	d1d3      	bne.n	1852c <__sfvwrite_r+0xa0>
   18584:	465b      	mov	r3, fp
   18586:	681b      	ldr	r3, [r3, #0]
   18588:	469a      	mov	sl, r3
   1858a:	465b      	mov	r3, fp
   1858c:	685f      	ldr	r7, [r3, #4]
   1858e:	2308      	movs	r3, #8
   18590:	469c      	mov	ip, r3
   18592:	44e3      	add	fp, ip
   18594:	2f00      	cmp	r7, #0
   18596:	d0f5      	beq.n	18584 <__sfvwrite_r+0xf8>
   18598:	003a      	movs	r2, r7
   1859a:	210a      	movs	r1, #10
   1859c:	4650      	mov	r0, sl
   1859e:	f000 fc69 	bl	18e74 <memchr>
   185a2:	2800      	cmp	r0, #0
   185a4:	d100      	bne.n	185a8 <__sfvwrite_r+0x11c>
   185a6:	e0e2      	b.n	1876e <__sfvwrite_r+0x2e2>
   185a8:	4653      	mov	r3, sl
   185aa:	3001      	adds	r0, #1
   185ac:	1ac5      	subs	r5, r0, r3
   185ae:	e7bf      	b.n	18530 <__sfvwrite_r+0xa4>
   185b0:	465b      	mov	r3, fp
   185b2:	681f      	ldr	r7, [r3, #0]
   185b4:	685d      	ldr	r5, [r3, #4]
   185b6:	2308      	movs	r3, #8
   185b8:	469c      	mov	ip, r3
   185ba:	44e3      	add	fp, ip
   185bc:	e782      	b.n	184c4 <__sfvwrite_r+0x38>
   185be:	0021      	movs	r1, r4
   185c0:	9800      	ldr	r0, [sp, #0]
   185c2:	f7ff fd81 	bl	180c8 <_fflush_r>
   185c6:	2800      	cmp	r0, #0
   185c8:	d0d2      	beq.n	18570 <__sfvwrite_r+0xe4>
   185ca:	220c      	movs	r2, #12
   185cc:	5ea3      	ldrsh	r3, [r4, r2]
   185ce:	2240      	movs	r2, #64	; 0x40
   185d0:	2001      	movs	r0, #1
   185d2:	4313      	orrs	r3, r2
   185d4:	81a3      	strh	r3, [r4, #12]
   185d6:	4240      	negs	r0, r0
   185d8:	e78c      	b.n	184f4 <__sfvwrite_r+0x68>
   185da:	2200      	movs	r2, #0
   185dc:	4691      	mov	r9, r2
   185de:	464d      	mov	r5, r9
   185e0:	2d00      	cmp	r5, #0
   185e2:	d023      	beq.n	1862c <__sfvwrite_r+0x1a0>
   185e4:	68a2      	ldr	r2, [r4, #8]
   185e6:	4690      	mov	r8, r2
   185e8:	2280      	movs	r2, #128	; 0x80
   185ea:	0092      	lsls	r2, r2, #2
   185ec:	4213      	tst	r3, r2
   185ee:	d026      	beq.n	1863e <__sfvwrite_r+0x1b2>
   185f0:	46c2      	mov	sl, r8
   185f2:	4545      	cmp	r5, r8
   185f4:	d34d      	bcc.n	18692 <__sfvwrite_r+0x206>
   185f6:	2290      	movs	r2, #144	; 0x90
   185f8:	00d2      	lsls	r2, r2, #3
   185fa:	4213      	tst	r3, r2
   185fc:	d14e      	bne.n	1869c <__sfvwrite_r+0x210>
   185fe:	002f      	movs	r7, r5
   18600:	6820      	ldr	r0, [r4, #0]
   18602:	4652      	mov	r2, sl
   18604:	4649      	mov	r1, r9
   18606:	f000 fc75 	bl	18ef4 <memmove>
   1860a:	4642      	mov	r2, r8
   1860c:	68a3      	ldr	r3, [r4, #8]
   1860e:	1a98      	subs	r0, r3, r2
   18610:	6823      	ldr	r3, [r4, #0]
   18612:	60a0      	str	r0, [r4, #8]
   18614:	4453      	add	r3, sl
   18616:	6023      	str	r3, [r4, #0]
   18618:	68b3      	ldr	r3, [r6, #8]
   1861a:	44b9      	add	r9, r7
   1861c:	1bed      	subs	r5, r5, r7
   1861e:	1bdf      	subs	r7, r3, r7
   18620:	60b7      	str	r7, [r6, #8]
   18622:	d100      	bne.n	18626 <__sfvwrite_r+0x19a>
   18624:	e765      	b.n	184f2 <__sfvwrite_r+0x66>
   18626:	89a3      	ldrh	r3, [r4, #12]
   18628:	2d00      	cmp	r5, #0
   1862a:	d1db      	bne.n	185e4 <__sfvwrite_r+0x158>
   1862c:	465a      	mov	r2, fp
   1862e:	6812      	ldr	r2, [r2, #0]
   18630:	4691      	mov	r9, r2
   18632:	465a      	mov	r2, fp
   18634:	6855      	ldr	r5, [r2, #4]
   18636:	2208      	movs	r2, #8
   18638:	4694      	mov	ip, r2
   1863a:	44e3      	add	fp, ip
   1863c:	e7d0      	b.n	185e0 <__sfvwrite_r+0x154>
   1863e:	6820      	ldr	r0, [r4, #0]
   18640:	6923      	ldr	r3, [r4, #16]
   18642:	4298      	cmp	r0, r3
   18644:	d802      	bhi.n	1864c <__sfvwrite_r+0x1c0>
   18646:	6967      	ldr	r7, [r4, #20]
   18648:	42bd      	cmp	r5, r7
   1864a:	d259      	bcs.n	18700 <__sfvwrite_r+0x274>
   1864c:	4647      	mov	r7, r8
   1864e:	42af      	cmp	r7, r5
   18650:	d900      	bls.n	18654 <__sfvwrite_r+0x1c8>
   18652:	002f      	movs	r7, r5
   18654:	003a      	movs	r2, r7
   18656:	4649      	mov	r1, r9
   18658:	f000 fc4c 	bl	18ef4 <memmove>
   1865c:	68a3      	ldr	r3, [r4, #8]
   1865e:	6822      	ldr	r2, [r4, #0]
   18660:	1bdb      	subs	r3, r3, r7
   18662:	19d2      	adds	r2, r2, r7
   18664:	60a3      	str	r3, [r4, #8]
   18666:	6022      	str	r2, [r4, #0]
   18668:	2b00      	cmp	r3, #0
   1866a:	d1d5      	bne.n	18618 <__sfvwrite_r+0x18c>
   1866c:	0021      	movs	r1, r4
   1866e:	9800      	ldr	r0, [sp, #0]
   18670:	f7ff fd2a 	bl	180c8 <_fflush_r>
   18674:	2800      	cmp	r0, #0
   18676:	d0cf      	beq.n	18618 <__sfvwrite_r+0x18c>
   18678:	e7a7      	b.n	185ca <__sfvwrite_r+0x13e>
   1867a:	4642      	mov	r2, r8
   1867c:	4651      	mov	r1, sl
   1867e:	f000 fc39 	bl	18ef4 <memmove>
   18682:	4642      	mov	r2, r8
   18684:	68a3      	ldr	r3, [r4, #8]
   18686:	1a9b      	subs	r3, r3, r2
   18688:	60a3      	str	r3, [r4, #8]
   1868a:	6823      	ldr	r3, [r4, #0]
   1868c:	4443      	add	r3, r8
   1868e:	6023      	str	r3, [r4, #0]
   18690:	e76a      	b.n	18568 <__sfvwrite_r+0xdc>
   18692:	46a8      	mov	r8, r5
   18694:	6820      	ldr	r0, [r4, #0]
   18696:	002f      	movs	r7, r5
   18698:	46aa      	mov	sl, r5
   1869a:	e7b2      	b.n	18602 <__sfvwrite_r+0x176>
   1869c:	6921      	ldr	r1, [r4, #16]
   1869e:	6822      	ldr	r2, [r4, #0]
   186a0:	1a52      	subs	r2, r2, r1
   186a2:	4692      	mov	sl, r2
   186a4:	6962      	ldr	r2, [r4, #20]
   186a6:	0057      	lsls	r7, r2, #1
   186a8:	18bf      	adds	r7, r7, r2
   186aa:	0ffa      	lsrs	r2, r7, #31
   186ac:	19d7      	adds	r7, r2, r7
   186ae:	4652      	mov	r2, sl
   186b0:	1c50      	adds	r0, r2, #1
   186b2:	107f      	asrs	r7, r7, #1
   186b4:	1940      	adds	r0, r0, r5
   186b6:	003a      	movs	r2, r7
   186b8:	42b8      	cmp	r0, r7
   186ba:	d901      	bls.n	186c0 <__sfvwrite_r+0x234>
   186bc:	0007      	movs	r7, r0
   186be:	0002      	movs	r2, r0
   186c0:	055b      	lsls	r3, r3, #21
   186c2:	d542      	bpl.n	1874a <__sfvwrite_r+0x2be>
   186c4:	0011      	movs	r1, r2
   186c6:	9800      	ldr	r0, [sp, #0]
   186c8:	f000 f920 	bl	1890c <_malloc_r>
   186cc:	4680      	mov	r8, r0
   186ce:	1e03      	subs	r3, r0, #0
   186d0:	d052      	beq.n	18778 <__sfvwrite_r+0x2ec>
   186d2:	4652      	mov	r2, sl
   186d4:	6921      	ldr	r1, [r4, #16]
   186d6:	f7fb fa65 	bl	13ba4 <memcpy>
   186da:	89a3      	ldrh	r3, [r4, #12]
   186dc:	4a2a      	ldr	r2, [pc, #168]	; (18788 <__sfvwrite_r+0x2fc>)
   186de:	4013      	ands	r3, r2
   186e0:	2280      	movs	r2, #128	; 0x80
   186e2:	4313      	orrs	r3, r2
   186e4:	81a3      	strh	r3, [r4, #12]
   186e6:	4643      	mov	r3, r8
   186e8:	4640      	mov	r0, r8
   186ea:	6123      	str	r3, [r4, #16]
   186ec:	4653      	mov	r3, sl
   186ee:	4450      	add	r0, sl
   186f0:	6167      	str	r7, [r4, #20]
   186f2:	1aff      	subs	r7, r7, r3
   186f4:	60a7      	str	r7, [r4, #8]
   186f6:	6020      	str	r0, [r4, #0]
   186f8:	46a8      	mov	r8, r5
   186fa:	002f      	movs	r7, r5
   186fc:	46aa      	mov	sl, r5
   186fe:	e780      	b.n	18602 <__sfvwrite_r+0x176>
   18700:	4b22      	ldr	r3, [pc, #136]	; (1878c <__sfvwrite_r+0x300>)
   18702:	0028      	movs	r0, r5
   18704:	429d      	cmp	r5, r3
   18706:	d900      	bls.n	1870a <__sfvwrite_r+0x27e>
   18708:	0018      	movs	r0, r3
   1870a:	0039      	movs	r1, r7
   1870c:	f7f8 f9e0 	bl	10ad0 <__divsi3>
   18710:	003b      	movs	r3, r7
   18712:	464a      	mov	r2, r9
   18714:	4343      	muls	r3, r0
   18716:	69e1      	ldr	r1, [r4, #28]
   18718:	9800      	ldr	r0, [sp, #0]
   1871a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1871c:	47b8      	blx	r7
   1871e:	2800      	cmp	r0, #0
   18720:	dc00      	bgt.n	18724 <__sfvwrite_r+0x298>
   18722:	e752      	b.n	185ca <__sfvwrite_r+0x13e>
   18724:	0007      	movs	r7, r0
   18726:	e777      	b.n	18618 <__sfvwrite_r+0x18c>
   18728:	4666      	mov	r6, ip
   1872a:	4651      	mov	r1, sl
   1872c:	f000 fbe2 	bl	18ef4 <memmove>
   18730:	46b4      	mov	ip, r6
   18732:	6823      	ldr	r3, [r4, #0]
   18734:	0021      	movs	r1, r4
   18736:	4463      	add	r3, ip
   18738:	6023      	str	r3, [r4, #0]
   1873a:	9800      	ldr	r0, [sp, #0]
   1873c:	f7ff fcc4 	bl	180c8 <_fflush_r>
   18740:	2800      	cmp	r0, #0
   18742:	d000      	beq.n	18746 <__sfvwrite_r+0x2ba>
   18744:	e741      	b.n	185ca <__sfvwrite_r+0x13e>
   18746:	9e01      	ldr	r6, [sp, #4]
   18748:	e70e      	b.n	18568 <__sfvwrite_r+0xdc>
   1874a:	9800      	ldr	r0, [sp, #0]
   1874c:	f000 ff7a 	bl	19644 <_realloc_r>
   18750:	4680      	mov	r8, r0
   18752:	2800      	cmp	r0, #0
   18754:	d1c7      	bne.n	186e6 <__sfvwrite_r+0x25a>
   18756:	9d00      	ldr	r5, [sp, #0]
   18758:	6921      	ldr	r1, [r4, #16]
   1875a:	0028      	movs	r0, r5
   1875c:	f7ff fdb8 	bl	182d0 <_free_r>
   18760:	2280      	movs	r2, #128	; 0x80
   18762:	89a3      	ldrh	r3, [r4, #12]
   18764:	4393      	bics	r3, r2
   18766:	3a74      	subs	r2, #116	; 0x74
   18768:	b21b      	sxth	r3, r3
   1876a:	602a      	str	r2, [r5, #0]
   1876c:	e72f      	b.n	185ce <__sfvwrite_r+0x142>
   1876e:	1c7d      	adds	r5, r7, #1
   18770:	e6de      	b.n	18530 <__sfvwrite_r+0xa4>
   18772:	2001      	movs	r0, #1
   18774:	4240      	negs	r0, r0
   18776:	e6bd      	b.n	184f4 <__sfvwrite_r+0x68>
   18778:	9a00      	ldr	r2, [sp, #0]
   1877a:	330c      	adds	r3, #12
   1877c:	6013      	str	r3, [r2, #0]
   1877e:	220c      	movs	r2, #12
   18780:	5ea3      	ldrsh	r3, [r4, r2]
   18782:	e724      	b.n	185ce <__sfvwrite_r+0x142>
   18784:	7ffffc00 	.word	0x7ffffc00
   18788:	fffffb7f 	.word	0xfffffb7f
   1878c:	7fffffff 	.word	0x7fffffff

00018790 <_fwalk_reent>:
   18790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18792:	4647      	mov	r7, r8
   18794:	46ce      	mov	lr, r9
   18796:	b580      	push	{r7, lr}
   18798:	27b8      	movs	r7, #184	; 0xb8
   1879a:	4680      	mov	r8, r0
   1879c:	00bf      	lsls	r7, r7, #2
   1879e:	4447      	add	r7, r8
   187a0:	4689      	mov	r9, r1
   187a2:	2600      	movs	r6, #0
   187a4:	2f00      	cmp	r7, #0
   187a6:	d014      	beq.n	187d2 <_fwalk_reent+0x42>
   187a8:	687b      	ldr	r3, [r7, #4]
   187aa:	68bc      	ldr	r4, [r7, #8]
   187ac:	1e5d      	subs	r5, r3, #1
   187ae:	d40d      	bmi.n	187cc <_fwalk_reent+0x3c>
   187b0:	89a3      	ldrh	r3, [r4, #12]
   187b2:	2b01      	cmp	r3, #1
   187b4:	d907      	bls.n	187c6 <_fwalk_reent+0x36>
   187b6:	220e      	movs	r2, #14
   187b8:	5ea3      	ldrsh	r3, [r4, r2]
   187ba:	3301      	adds	r3, #1
   187bc:	d003      	beq.n	187c6 <_fwalk_reent+0x36>
   187be:	0021      	movs	r1, r4
   187c0:	4640      	mov	r0, r8
   187c2:	47c8      	blx	r9
   187c4:	4306      	orrs	r6, r0
   187c6:	3468      	adds	r4, #104	; 0x68
   187c8:	3d01      	subs	r5, #1
   187ca:	d2f1      	bcs.n	187b0 <_fwalk_reent+0x20>
   187cc:	683f      	ldr	r7, [r7, #0]
   187ce:	2f00      	cmp	r7, #0
   187d0:	d1ea      	bne.n	187a8 <_fwalk_reent+0x18>
   187d2:	0030      	movs	r0, r6
   187d4:	bc0c      	pop	{r2, r3}
   187d6:	4690      	mov	r8, r2
   187d8:	4699      	mov	r9, r3
   187da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000187dc <_localeconv_r>:
   187dc:	4b04      	ldr	r3, [pc, #16]	; (187f0 <_localeconv_r+0x14>)
   187de:	681b      	ldr	r3, [r3, #0]
   187e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   187e2:	2800      	cmp	r0, #0
   187e4:	d001      	beq.n	187ea <_localeconv_r+0xe>
   187e6:	30f0      	adds	r0, #240	; 0xf0
   187e8:	4770      	bx	lr
   187ea:	4802      	ldr	r0, [pc, #8]	; (187f4 <_localeconv_r+0x18>)
   187ec:	e7fb      	b.n	187e6 <_localeconv_r+0xa>
   187ee:	46c0      	nop			; (mov r8, r8)
   187f0:	20000038 	.word	0x20000038
   187f4:	2000087c 	.word	0x2000087c

000187f8 <__retarget_lock_init_recursive>:
   187f8:	4770      	bx	lr
   187fa:	46c0      	nop			; (mov r8, r8)

000187fc <__retarget_lock_close_recursive>:
   187fc:	4770      	bx	lr
   187fe:	46c0      	nop			; (mov r8, r8)

00018800 <__retarget_lock_acquire_recursive>:
   18800:	4770      	bx	lr
   18802:	46c0      	nop			; (mov r8, r8)

00018804 <__retarget_lock_release_recursive>:
   18804:	4770      	bx	lr
   18806:	46c0      	nop			; (mov r8, r8)

00018808 <__swhatbuf_r>:
   18808:	b570      	push	{r4, r5, r6, lr}
   1880a:	000c      	movs	r4, r1
   1880c:	001e      	movs	r6, r3
   1880e:	230e      	movs	r3, #14
   18810:	5ec9      	ldrsh	r1, [r1, r3]
   18812:	b090      	sub	sp, #64	; 0x40
   18814:	0015      	movs	r5, r2
   18816:	2900      	cmp	r1, #0
   18818:	db15      	blt.n	18846 <__swhatbuf_r+0x3e>
   1881a:	aa01      	add	r2, sp, #4
   1881c:	f001 fbb8 	bl	19f90 <_fstat_r>
   18820:	2800      	cmp	r0, #0
   18822:	db10      	blt.n	18846 <__swhatbuf_r+0x3e>
   18824:	22f0      	movs	r2, #240	; 0xf0
   18826:	9b02      	ldr	r3, [sp, #8]
   18828:	0212      	lsls	r2, r2, #8
   1882a:	4013      	ands	r3, r2
   1882c:	4a0d      	ldr	r2, [pc, #52]	; (18864 <__swhatbuf_r+0x5c>)
   1882e:	2080      	movs	r0, #128	; 0x80
   18830:	4694      	mov	ip, r2
   18832:	4463      	add	r3, ip
   18834:	425a      	negs	r2, r3
   18836:	4153      	adcs	r3, r2
   18838:	6033      	str	r3, [r6, #0]
   1883a:	2380      	movs	r3, #128	; 0x80
   1883c:	00db      	lsls	r3, r3, #3
   1883e:	602b      	str	r3, [r5, #0]
   18840:	0100      	lsls	r0, r0, #4
   18842:	b010      	add	sp, #64	; 0x40
   18844:	bd70      	pop	{r4, r5, r6, pc}
   18846:	2300      	movs	r3, #0
   18848:	6033      	str	r3, [r6, #0]
   1884a:	89a3      	ldrh	r3, [r4, #12]
   1884c:	061b      	lsls	r3, r3, #24
   1884e:	d503      	bpl.n	18858 <__swhatbuf_r+0x50>
   18850:	2340      	movs	r3, #64	; 0x40
   18852:	2000      	movs	r0, #0
   18854:	602b      	str	r3, [r5, #0]
   18856:	e7f4      	b.n	18842 <__swhatbuf_r+0x3a>
   18858:	2380      	movs	r3, #128	; 0x80
   1885a:	00db      	lsls	r3, r3, #3
   1885c:	602b      	str	r3, [r5, #0]
   1885e:	2000      	movs	r0, #0
   18860:	e7ef      	b.n	18842 <__swhatbuf_r+0x3a>
   18862:	46c0      	nop			; (mov r8, r8)
   18864:	ffffe000 	.word	0xffffe000

00018868 <__smakebuf_r>:
   18868:	b570      	push	{r4, r5, r6, lr}
   1886a:	898b      	ldrh	r3, [r1, #12]
   1886c:	b082      	sub	sp, #8
   1886e:	0006      	movs	r6, r0
   18870:	000c      	movs	r4, r1
   18872:	079b      	lsls	r3, r3, #30
   18874:	d507      	bpl.n	18886 <__smakebuf_r+0x1e>
   18876:	0023      	movs	r3, r4
   18878:	3343      	adds	r3, #67	; 0x43
   1887a:	6023      	str	r3, [r4, #0]
   1887c:	6123      	str	r3, [r4, #16]
   1887e:	2301      	movs	r3, #1
   18880:	6163      	str	r3, [r4, #20]
   18882:	b002      	add	sp, #8
   18884:	bd70      	pop	{r4, r5, r6, pc}
   18886:	ab01      	add	r3, sp, #4
   18888:	466a      	mov	r2, sp
   1888a:	f7ff ffbd 	bl	18808 <__swhatbuf_r>
   1888e:	9900      	ldr	r1, [sp, #0]
   18890:	0005      	movs	r5, r0
   18892:	0030      	movs	r0, r6
   18894:	f000 f83a 	bl	1890c <_malloc_r>
   18898:	2800      	cmp	r0, #0
   1889a:	d01e      	beq.n	188da <__smakebuf_r+0x72>
   1889c:	2280      	movs	r2, #128	; 0x80
   1889e:	4b15      	ldr	r3, [pc, #84]	; (188f4 <__smakebuf_r+0x8c>)
   188a0:	63f3      	str	r3, [r6, #60]	; 0x3c
   188a2:	89a3      	ldrh	r3, [r4, #12]
   188a4:	6020      	str	r0, [r4, #0]
   188a6:	4313      	orrs	r3, r2
   188a8:	9a00      	ldr	r2, [sp, #0]
   188aa:	b21b      	sxth	r3, r3
   188ac:	6162      	str	r2, [r4, #20]
   188ae:	9a01      	ldr	r2, [sp, #4]
   188b0:	81a3      	strh	r3, [r4, #12]
   188b2:	6120      	str	r0, [r4, #16]
   188b4:	2a00      	cmp	r2, #0
   188b6:	d102      	bne.n	188be <__smakebuf_r+0x56>
   188b8:	432b      	orrs	r3, r5
   188ba:	81a3      	strh	r3, [r4, #12]
   188bc:	e7e1      	b.n	18882 <__smakebuf_r+0x1a>
   188be:	230e      	movs	r3, #14
   188c0:	5ee1      	ldrsh	r1, [r4, r3]
   188c2:	0030      	movs	r0, r6
   188c4:	f001 fb78 	bl	19fb8 <_isatty_r>
   188c8:	2800      	cmp	r0, #0
   188ca:	d010      	beq.n	188ee <__smakebuf_r+0x86>
   188cc:	2203      	movs	r2, #3
   188ce:	89a3      	ldrh	r3, [r4, #12]
   188d0:	4393      	bics	r3, r2
   188d2:	2201      	movs	r2, #1
   188d4:	4313      	orrs	r3, r2
   188d6:	b21b      	sxth	r3, r3
   188d8:	e7ee      	b.n	188b8 <__smakebuf_r+0x50>
   188da:	220c      	movs	r2, #12
   188dc:	5ea3      	ldrsh	r3, [r4, r2]
   188de:	059a      	lsls	r2, r3, #22
   188e0:	d4cf      	bmi.n	18882 <__smakebuf_r+0x1a>
   188e2:	2203      	movs	r2, #3
   188e4:	4393      	bics	r3, r2
   188e6:	2202      	movs	r2, #2
   188e8:	4313      	orrs	r3, r2
   188ea:	81a3      	strh	r3, [r4, #12]
   188ec:	e7c3      	b.n	18876 <__smakebuf_r+0xe>
   188ee:	220c      	movs	r2, #12
   188f0:	5ea3      	ldrsh	r3, [r4, r2]
   188f2:	e7e1      	b.n	188b8 <__smakebuf_r+0x50>
   188f4:	0001811d 	.word	0x0001811d

000188f8 <malloc>:
   188f8:	b510      	push	{r4, lr}
   188fa:	4b03      	ldr	r3, [pc, #12]	; (18908 <malloc+0x10>)
   188fc:	0001      	movs	r1, r0
   188fe:	6818      	ldr	r0, [r3, #0]
   18900:	f000 f804 	bl	1890c <_malloc_r>
   18904:	bd10      	pop	{r4, pc}
   18906:	46c0      	nop			; (mov r8, r8)
   18908:	20000038 	.word	0x20000038

0001890c <_malloc_r>:
   1890c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1890e:	4657      	mov	r7, sl
   18910:	4645      	mov	r5, r8
   18912:	46de      	mov	lr, fp
   18914:	464e      	mov	r6, r9
   18916:	b5e0      	push	{r5, r6, r7, lr}
   18918:	000d      	movs	r5, r1
   1891a:	350b      	adds	r5, #11
   1891c:	b083      	sub	sp, #12
   1891e:	0007      	movs	r7, r0
   18920:	2d16      	cmp	r5, #22
   18922:	d800      	bhi.n	18926 <_malloc_r+0x1a>
   18924:	e09f      	b.n	18a66 <_malloc_r+0x15a>
   18926:	2307      	movs	r3, #7
   18928:	439d      	bics	r5, r3
   1892a:	d500      	bpl.n	1892e <_malloc_r+0x22>
   1892c:	e0c4      	b.n	18ab8 <_malloc_r+0x1ac>
   1892e:	42a9      	cmp	r1, r5
   18930:	d900      	bls.n	18934 <_malloc_r+0x28>
   18932:	e0c1      	b.n	18ab8 <_malloc_r+0x1ac>
   18934:	f000 fb2e 	bl	18f94 <__malloc_lock>
   18938:	23f8      	movs	r3, #248	; 0xf8
   1893a:	33ff      	adds	r3, #255	; 0xff
   1893c:	429d      	cmp	r5, r3
   1893e:	d800      	bhi.n	18942 <_malloc_r+0x36>
   18940:	e28f      	b.n	18e62 <_malloc_r+0x556>
   18942:	0a68      	lsrs	r0, r5, #9
   18944:	d100      	bne.n	18948 <_malloc_r+0x3c>
   18946:	e0bb      	b.n	18ac0 <_malloc_r+0x1b4>
   18948:	2804      	cmp	r0, #4
   1894a:	d900      	bls.n	1894e <_malloc_r+0x42>
   1894c:	e162      	b.n	18c14 <_malloc_r+0x308>
   1894e:	2338      	movs	r3, #56	; 0x38
   18950:	4698      	mov	r8, r3
   18952:	09a8      	lsrs	r0, r5, #6
   18954:	4480      	add	r8, r0
   18956:	3039      	adds	r0, #57	; 0x39
   18958:	00c1      	lsls	r1, r0, #3
   1895a:	4ed2      	ldr	r6, [pc, #840]	; (18ca4 <_malloc_r+0x398>)
   1895c:	1871      	adds	r1, r6, r1
   1895e:	3908      	subs	r1, #8
   18960:	68cc      	ldr	r4, [r1, #12]
   18962:	42a1      	cmp	r1, r4
   18964:	d019      	beq.n	1899a <_malloc_r+0x8e>
   18966:	2303      	movs	r3, #3
   18968:	6862      	ldr	r2, [r4, #4]
   1896a:	439a      	bics	r2, r3
   1896c:	0013      	movs	r3, r2
   1896e:	1b52      	subs	r2, r2, r5
   18970:	2a0f      	cmp	r2, #15
   18972:	dd00      	ble.n	18976 <_malloc_r+0x6a>
   18974:	e0aa      	b.n	18acc <_malloc_r+0x1c0>
   18976:	2a00      	cmp	r2, #0
   18978:	db00      	blt.n	1897c <_malloc_r+0x70>
   1897a:	e088      	b.n	18a8e <_malloc_r+0x182>
   1897c:	2303      	movs	r3, #3
   1897e:	469c      	mov	ip, r3
   18980:	e008      	b.n	18994 <_malloc_r+0x88>
   18982:	4662      	mov	r2, ip
   18984:	6863      	ldr	r3, [r4, #4]
   18986:	4393      	bics	r3, r2
   18988:	1b5a      	subs	r2, r3, r5
   1898a:	2a0f      	cmp	r2, #15
   1898c:	dd00      	ble.n	18990 <_malloc_r+0x84>
   1898e:	e09d      	b.n	18acc <_malloc_r+0x1c0>
   18990:	2a00      	cmp	r2, #0
   18992:	da7c      	bge.n	18a8e <_malloc_r+0x182>
   18994:	68e4      	ldr	r4, [r4, #12]
   18996:	42a1      	cmp	r1, r4
   18998:	d1f3      	bne.n	18982 <_malloc_r+0x76>
   1899a:	0032      	movs	r2, r6
   1899c:	6934      	ldr	r4, [r6, #16]
   1899e:	3208      	adds	r2, #8
   189a0:	4294      	cmp	r4, r2
   189a2:	d100      	bne.n	189a6 <_malloc_r+0x9a>
   189a4:	e190      	b.n	18cc8 <_malloc_r+0x3bc>
   189a6:	2303      	movs	r3, #3
   189a8:	6861      	ldr	r1, [r4, #4]
   189aa:	4399      	bics	r1, r3
   189ac:	4689      	mov	r9, r1
   189ae:	1b49      	subs	r1, r1, r5
   189b0:	290f      	cmp	r1, #15
   189b2:	dd00      	ble.n	189b6 <_malloc_r+0xaa>
   189b4:	e162      	b.n	18c7c <_malloc_r+0x370>
   189b6:	6172      	str	r2, [r6, #20]
   189b8:	6132      	str	r2, [r6, #16]
   189ba:	2900      	cmp	r1, #0
   189bc:	db00      	blt.n	189c0 <_malloc_r+0xb4>
   189be:	e087      	b.n	18ad0 <_malloc_r+0x1c4>
   189c0:	4ab9      	ldr	r2, [pc, #740]	; (18ca8 <_malloc_r+0x39c>)
   189c2:	464b      	mov	r3, r9
   189c4:	4591      	cmp	r9, r2
   189c6:	d900      	bls.n	189ca <_malloc_r+0xbe>
   189c8:	e130      	b.n	18c2c <_malloc_r+0x320>
   189ca:	08db      	lsrs	r3, r3, #3
   189cc:	3aff      	subs	r2, #255	; 0xff
   189ce:	1099      	asrs	r1, r3, #2
   189d0:	3aff      	subs	r2, #255	; 0xff
   189d2:	408a      	lsls	r2, r1
   189d4:	00db      	lsls	r3, r3, #3
   189d6:	6871      	ldr	r1, [r6, #4]
   189d8:	199b      	adds	r3, r3, r6
   189da:	430a      	orrs	r2, r1
   189dc:	6899      	ldr	r1, [r3, #8]
   189de:	6072      	str	r2, [r6, #4]
   189e0:	60e3      	str	r3, [r4, #12]
   189e2:	60a1      	str	r1, [r4, #8]
   189e4:	609c      	str	r4, [r3, #8]
   189e6:	0013      	movs	r3, r2
   189e8:	60cc      	str	r4, [r1, #12]
   189ea:	2101      	movs	r1, #1
   189ec:	1082      	asrs	r2, r0, #2
   189ee:	4091      	lsls	r1, r2
   189f0:	4299      	cmp	r1, r3
   189f2:	d86f      	bhi.n	18ad4 <_malloc_r+0x1c8>
   189f4:	420b      	tst	r3, r1
   189f6:	d105      	bne.n	18a04 <_malloc_r+0xf8>
   189f8:	2203      	movs	r2, #3
   189fa:	4390      	bics	r0, r2
   189fc:	0049      	lsls	r1, r1, #1
   189fe:	3004      	adds	r0, #4
   18a00:	420b      	tst	r3, r1
   18a02:	d0fb      	beq.n	189fc <_malloc_r+0xf0>
   18a04:	2303      	movs	r3, #3
   18a06:	4698      	mov	r8, r3
   18a08:	00c3      	lsls	r3, r0, #3
   18a0a:	4699      	mov	r9, r3
   18a0c:	44b1      	add	r9, r6
   18a0e:	46cc      	mov	ip, r9
   18a10:	4682      	mov	sl, r0
   18a12:	4663      	mov	r3, ip
   18a14:	68dc      	ldr	r4, [r3, #12]
   18a16:	45a4      	cmp	ip, r4
   18a18:	d107      	bne.n	18a2a <_malloc_r+0x11e>
   18a1a:	e157      	b.n	18ccc <_malloc_r+0x3c0>
   18a1c:	2a00      	cmp	r2, #0
   18a1e:	db00      	blt.n	18a22 <_malloc_r+0x116>
   18a20:	e166      	b.n	18cf0 <_malloc_r+0x3e4>
   18a22:	68e4      	ldr	r4, [r4, #12]
   18a24:	45a4      	cmp	ip, r4
   18a26:	d100      	bne.n	18a2a <_malloc_r+0x11e>
   18a28:	e150      	b.n	18ccc <_malloc_r+0x3c0>
   18a2a:	4642      	mov	r2, r8
   18a2c:	6863      	ldr	r3, [r4, #4]
   18a2e:	4393      	bics	r3, r2
   18a30:	1b5a      	subs	r2, r3, r5
   18a32:	2a0f      	cmp	r2, #15
   18a34:	ddf2      	ble.n	18a1c <_malloc_r+0x110>
   18a36:	2001      	movs	r0, #1
   18a38:	4680      	mov	r8, r0
   18a3a:	1961      	adds	r1, r4, r5
   18a3c:	4305      	orrs	r5, r0
   18a3e:	6065      	str	r5, [r4, #4]
   18a40:	68a0      	ldr	r0, [r4, #8]
   18a42:	68e5      	ldr	r5, [r4, #12]
   18a44:	3608      	adds	r6, #8
   18a46:	60c5      	str	r5, [r0, #12]
   18a48:	60a8      	str	r0, [r5, #8]
   18a4a:	4640      	mov	r0, r8
   18a4c:	60f1      	str	r1, [r6, #12]
   18a4e:	60b1      	str	r1, [r6, #8]
   18a50:	4310      	orrs	r0, r2
   18a52:	6048      	str	r0, [r1, #4]
   18a54:	60ce      	str	r6, [r1, #12]
   18a56:	608e      	str	r6, [r1, #8]
   18a58:	0038      	movs	r0, r7
   18a5a:	50e2      	str	r2, [r4, r3]
   18a5c:	f000 faa2 	bl	18fa4 <__malloc_unlock>
   18a60:	0020      	movs	r0, r4
   18a62:	3008      	adds	r0, #8
   18a64:	e021      	b.n	18aaa <_malloc_r+0x19e>
   18a66:	2910      	cmp	r1, #16
   18a68:	d826      	bhi.n	18ab8 <_malloc_r+0x1ac>
   18a6a:	0038      	movs	r0, r7
   18a6c:	f000 fa92 	bl	18f94 <__malloc_lock>
   18a70:	2510      	movs	r5, #16
   18a72:	2318      	movs	r3, #24
   18a74:	2002      	movs	r0, #2
   18a76:	4e8b      	ldr	r6, [pc, #556]	; (18ca4 <_malloc_r+0x398>)
   18a78:	18f3      	adds	r3, r6, r3
   18a7a:	001a      	movs	r2, r3
   18a7c:	685c      	ldr	r4, [r3, #4]
   18a7e:	3a08      	subs	r2, #8
   18a80:	4294      	cmp	r4, r2
   18a82:	d100      	bne.n	18a86 <_malloc_r+0x17a>
   18a84:	e12e      	b.n	18ce4 <_malloc_r+0x3d8>
   18a86:	2303      	movs	r3, #3
   18a88:	6862      	ldr	r2, [r4, #4]
   18a8a:	439a      	bics	r2, r3
   18a8c:	0013      	movs	r3, r2
   18a8e:	68e2      	ldr	r2, [r4, #12]
   18a90:	68a1      	ldr	r1, [r4, #8]
   18a92:	60ca      	str	r2, [r1, #12]
   18a94:	6091      	str	r1, [r2, #8]
   18a96:	2201      	movs	r2, #1
   18a98:	18e3      	adds	r3, r4, r3
   18a9a:	6859      	ldr	r1, [r3, #4]
   18a9c:	0038      	movs	r0, r7
   18a9e:	430a      	orrs	r2, r1
   18aa0:	605a      	str	r2, [r3, #4]
   18aa2:	f000 fa7f 	bl	18fa4 <__malloc_unlock>
   18aa6:	0020      	movs	r0, r4
   18aa8:	3008      	adds	r0, #8
   18aaa:	b003      	add	sp, #12
   18aac:	bc3c      	pop	{r2, r3, r4, r5}
   18aae:	4690      	mov	r8, r2
   18ab0:	4699      	mov	r9, r3
   18ab2:	46a2      	mov	sl, r4
   18ab4:	46ab      	mov	fp, r5
   18ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ab8:	230c      	movs	r3, #12
   18aba:	2000      	movs	r0, #0
   18abc:	603b      	str	r3, [r7, #0]
   18abe:	e7f4      	b.n	18aaa <_malloc_r+0x19e>
   18ac0:	2180      	movs	r1, #128	; 0x80
   18ac2:	233f      	movs	r3, #63	; 0x3f
   18ac4:	2040      	movs	r0, #64	; 0x40
   18ac6:	0089      	lsls	r1, r1, #2
   18ac8:	4698      	mov	r8, r3
   18aca:	e746      	b.n	1895a <_malloc_r+0x4e>
   18acc:	4640      	mov	r0, r8
   18ace:	e764      	b.n	1899a <_malloc_r+0x8e>
   18ad0:	464b      	mov	r3, r9
   18ad2:	e7e0      	b.n	18a96 <_malloc_r+0x18a>
   18ad4:	2303      	movs	r3, #3
   18ad6:	68b4      	ldr	r4, [r6, #8]
   18ad8:	6862      	ldr	r2, [r4, #4]
   18ada:	439a      	bics	r2, r3
   18adc:	4690      	mov	r8, r2
   18ade:	42aa      	cmp	r2, r5
   18ae0:	d303      	bcc.n	18aea <_malloc_r+0x1de>
   18ae2:	1b53      	subs	r3, r2, r5
   18ae4:	2b0f      	cmp	r3, #15
   18ae6:	dd00      	ble.n	18aea <_malloc_r+0x1de>
   18ae8:	e086      	b.n	18bf8 <_malloc_r+0x2ec>
   18aea:	0023      	movs	r3, r4
   18aec:	4443      	add	r3, r8
   18aee:	4a6f      	ldr	r2, [pc, #444]	; (18cac <_malloc_r+0x3a0>)
   18af0:	9301      	str	r3, [sp, #4]
   18af2:	4b6f      	ldr	r3, [pc, #444]	; (18cb0 <_malloc_r+0x3a4>)
   18af4:	4693      	mov	fp, r2
   18af6:	681b      	ldr	r3, [r3, #0]
   18af8:	6812      	ldr	r2, [r2, #0]
   18afa:	18eb      	adds	r3, r5, r3
   18afc:	3201      	adds	r2, #1
   18afe:	d100      	bne.n	18b02 <_malloc_r+0x1f6>
   18b00:	e168      	b.n	18dd4 <_malloc_r+0x4c8>
   18b02:	4a6c      	ldr	r2, [pc, #432]	; (18cb4 <_malloc_r+0x3a8>)
   18b04:	4694      	mov	ip, r2
   18b06:	4463      	add	r3, ip
   18b08:	0b1b      	lsrs	r3, r3, #12
   18b0a:	031b      	lsls	r3, r3, #12
   18b0c:	9300      	str	r3, [sp, #0]
   18b0e:	9900      	ldr	r1, [sp, #0]
   18b10:	0038      	movs	r0, r7
   18b12:	f000 ff55 	bl	199c0 <_sbrk_r>
   18b16:	0003      	movs	r3, r0
   18b18:	4681      	mov	r9, r0
   18b1a:	3301      	adds	r3, #1
   18b1c:	d061      	beq.n	18be2 <_malloc_r+0x2d6>
   18b1e:	9b01      	ldr	r3, [sp, #4]
   18b20:	4283      	cmp	r3, r0
   18b22:	d900      	bls.n	18b26 <_malloc_r+0x21a>
   18b24:	e0ff      	b.n	18d26 <_malloc_r+0x41a>
   18b26:	4b64      	ldr	r3, [pc, #400]	; (18cb8 <_malloc_r+0x3ac>)
   18b28:	9a00      	ldr	r2, [sp, #0]
   18b2a:	469a      	mov	sl, r3
   18b2c:	681b      	ldr	r3, [r3, #0]
   18b2e:	469c      	mov	ip, r3
   18b30:	4653      	mov	r3, sl
   18b32:	4462      	add	r2, ip
   18b34:	601a      	str	r2, [r3, #0]
   18b36:	9b01      	ldr	r3, [sp, #4]
   18b38:	0011      	movs	r1, r2
   18b3a:	4283      	cmp	r3, r0
   18b3c:	d100      	bne.n	18b40 <_malloc_r+0x234>
   18b3e:	e155      	b.n	18dec <_malloc_r+0x4e0>
   18b40:	465b      	mov	r3, fp
   18b42:	681b      	ldr	r3, [r3, #0]
   18b44:	3301      	adds	r3, #1
   18b46:	d100      	bne.n	18b4a <_malloc_r+0x23e>
   18b48:	e16c      	b.n	18e24 <_malloc_r+0x518>
   18b4a:	464b      	mov	r3, r9
   18b4c:	9a01      	ldr	r2, [sp, #4]
   18b4e:	1a9b      	subs	r3, r3, r2
   18b50:	1859      	adds	r1, r3, r1
   18b52:	4653      	mov	r3, sl
   18b54:	6019      	str	r1, [r3, #0]
   18b56:	2307      	movs	r3, #7
   18b58:	464a      	mov	r2, r9
   18b5a:	4013      	ands	r3, r2
   18b5c:	d100      	bne.n	18b60 <_malloc_r+0x254>
   18b5e:	e124      	b.n	18daa <_malloc_r+0x49e>
   18b60:	2108      	movs	r1, #8
   18b62:	4689      	mov	r9, r1
   18b64:	4955      	ldr	r1, [pc, #340]	; (18cbc <_malloc_r+0x3b0>)
   18b66:	1ad2      	subs	r2, r2, r3
   18b68:	4491      	add	r9, r2
   18b6a:	1acb      	subs	r3, r1, r3
   18b6c:	9a00      	ldr	r2, [sp, #0]
   18b6e:	0038      	movs	r0, r7
   18b70:	444a      	add	r2, r9
   18b72:	0511      	lsls	r1, r2, #20
   18b74:	0d09      	lsrs	r1, r1, #20
   18b76:	1a5b      	subs	r3, r3, r1
   18b78:	0019      	movs	r1, r3
   18b7a:	469b      	mov	fp, r3
   18b7c:	f000 ff20 	bl	199c0 <_sbrk_r>
   18b80:	1c43      	adds	r3, r0, #1
   18b82:	d100      	bne.n	18b86 <_malloc_r+0x27a>
   18b84:	e142      	b.n	18e0c <_malloc_r+0x500>
   18b86:	464b      	mov	r3, r9
   18b88:	1ac0      	subs	r0, r0, r3
   18b8a:	2301      	movs	r3, #1
   18b8c:	4458      	add	r0, fp
   18b8e:	4318      	orrs	r0, r3
   18b90:	4653      	mov	r3, sl
   18b92:	681b      	ldr	r3, [r3, #0]
   18b94:	445b      	add	r3, fp
   18b96:	0019      	movs	r1, r3
   18b98:	4653      	mov	r3, sl
   18b9a:	6019      	str	r1, [r3, #0]
   18b9c:	464b      	mov	r3, r9
   18b9e:	60b3      	str	r3, [r6, #8]
   18ba0:	6058      	str	r0, [r3, #4]
   18ba2:	42b4      	cmp	r4, r6
   18ba4:	d013      	beq.n	18bce <_malloc_r+0x2c2>
   18ba6:	4643      	mov	r3, r8
   18ba8:	2b0f      	cmp	r3, #15
   18baa:	d800      	bhi.n	18bae <_malloc_r+0x2a2>
   18bac:	e0e8      	b.n	18d80 <_malloc_r+0x474>
   18bae:	4643      	mov	r3, r8
   18bb0:	2207      	movs	r2, #7
   18bb2:	6860      	ldr	r0, [r4, #4]
   18bb4:	3b0c      	subs	r3, #12
   18bb6:	4393      	bics	r3, r2
   18bb8:	3a06      	subs	r2, #6
   18bba:	4002      	ands	r2, r0
   18bbc:	2005      	movs	r0, #5
   18bbe:	431a      	orrs	r2, r3
   18bc0:	6062      	str	r2, [r4, #4]
   18bc2:	18e2      	adds	r2, r4, r3
   18bc4:	6050      	str	r0, [r2, #4]
   18bc6:	6090      	str	r0, [r2, #8]
   18bc8:	2b0f      	cmp	r3, #15
   18bca:	d900      	bls.n	18bce <_malloc_r+0x2c2>
   18bcc:	e122      	b.n	18e14 <_malloc_r+0x508>
   18bce:	4b3c      	ldr	r3, [pc, #240]	; (18cc0 <_malloc_r+0x3b4>)
   18bd0:	681a      	ldr	r2, [r3, #0]
   18bd2:	4291      	cmp	r1, r2
   18bd4:	d900      	bls.n	18bd8 <_malloc_r+0x2cc>
   18bd6:	6019      	str	r1, [r3, #0]
   18bd8:	4b3a      	ldr	r3, [pc, #232]	; (18cc4 <_malloc_r+0x3b8>)
   18bda:	681a      	ldr	r2, [r3, #0]
   18bdc:	4291      	cmp	r1, r2
   18bde:	d900      	bls.n	18be2 <_malloc_r+0x2d6>
   18be0:	6019      	str	r1, [r3, #0]
   18be2:	2303      	movs	r3, #3
   18be4:	68b4      	ldr	r4, [r6, #8]
   18be6:	6862      	ldr	r2, [r4, #4]
   18be8:	439a      	bics	r2, r3
   18bea:	1b53      	subs	r3, r2, r5
   18bec:	4295      	cmp	r5, r2
   18bee:	d900      	bls.n	18bf2 <_malloc_r+0x2e6>
   18bf0:	e0c9      	b.n	18d86 <_malloc_r+0x47a>
   18bf2:	2b0f      	cmp	r3, #15
   18bf4:	dc00      	bgt.n	18bf8 <_malloc_r+0x2ec>
   18bf6:	e0c6      	b.n	18d86 <_malloc_r+0x47a>
   18bf8:	2201      	movs	r2, #1
   18bfa:	0029      	movs	r1, r5
   18bfc:	4313      	orrs	r3, r2
   18bfe:	4311      	orrs	r1, r2
   18c00:	1965      	adds	r5, r4, r5
   18c02:	6061      	str	r1, [r4, #4]
   18c04:	0038      	movs	r0, r7
   18c06:	60b5      	str	r5, [r6, #8]
   18c08:	606b      	str	r3, [r5, #4]
   18c0a:	f000 f9cb 	bl	18fa4 <__malloc_unlock>
   18c0e:	0020      	movs	r0, r4
   18c10:	3008      	adds	r0, #8
   18c12:	e74a      	b.n	18aaa <_malloc_r+0x19e>
   18c14:	2814      	cmp	r0, #20
   18c16:	d97a      	bls.n	18d0e <_malloc_r+0x402>
   18c18:	2854      	cmp	r0, #84	; 0x54
   18c1a:	d900      	bls.n	18c1e <_malloc_r+0x312>
   18c1c:	e0ba      	b.n	18d94 <_malloc_r+0x488>
   18c1e:	236e      	movs	r3, #110	; 0x6e
   18c20:	4698      	mov	r8, r3
   18c22:	0b28      	lsrs	r0, r5, #12
   18c24:	4480      	add	r8, r0
   18c26:	306f      	adds	r0, #111	; 0x6f
   18c28:	00c1      	lsls	r1, r0, #3
   18c2a:	e696      	b.n	1895a <_malloc_r+0x4e>
   18c2c:	0a5a      	lsrs	r2, r3, #9
   18c2e:	2a04      	cmp	r2, #4
   18c30:	d973      	bls.n	18d1a <_malloc_r+0x40e>
   18c32:	2a14      	cmp	r2, #20
   18c34:	d900      	bls.n	18c38 <_malloc_r+0x32c>
   18c36:	e0d0      	b.n	18dda <_malloc_r+0x4ce>
   18c38:	0011      	movs	r1, r2
   18c3a:	325c      	adds	r2, #92	; 0x5c
   18c3c:	315b      	adds	r1, #91	; 0x5b
   18c3e:	00d2      	lsls	r2, r2, #3
   18c40:	2308      	movs	r3, #8
   18c42:	425b      	negs	r3, r3
   18c44:	469c      	mov	ip, r3
   18c46:	18b2      	adds	r2, r6, r2
   18c48:	4494      	add	ip, r2
   18c4a:	4663      	mov	r3, ip
   18c4c:	689a      	ldr	r2, [r3, #8]
   18c4e:	2303      	movs	r3, #3
   18c50:	4698      	mov	r8, r3
   18c52:	4594      	cmp	ip, r2
   18c54:	d100      	bne.n	18c58 <_malloc_r+0x34c>
   18c56:	e0ab      	b.n	18db0 <_malloc_r+0x4a4>
   18c58:	4643      	mov	r3, r8
   18c5a:	6851      	ldr	r1, [r2, #4]
   18c5c:	4399      	bics	r1, r3
   18c5e:	4589      	cmp	r9, r1
   18c60:	d300      	bcc.n	18c64 <_malloc_r+0x358>
   18c62:	e095      	b.n	18d90 <_malloc_r+0x484>
   18c64:	6892      	ldr	r2, [r2, #8]
   18c66:	4594      	cmp	ip, r2
   18c68:	d1f6      	bne.n	18c58 <_malloc_r+0x34c>
   18c6a:	4663      	mov	r3, ip
   18c6c:	68da      	ldr	r2, [r3, #12]
   18c6e:	6873      	ldr	r3, [r6, #4]
   18c70:	4661      	mov	r1, ip
   18c72:	60e2      	str	r2, [r4, #12]
   18c74:	60a1      	str	r1, [r4, #8]
   18c76:	6094      	str	r4, [r2, #8]
   18c78:	60cc      	str	r4, [r1, #12]
   18c7a:	e6b6      	b.n	189ea <_malloc_r+0xde>
   18c7c:	2301      	movs	r3, #1
   18c7e:	1960      	adds	r0, r4, r5
   18c80:	431d      	orrs	r5, r3
   18c82:	6065      	str	r5, [r4, #4]
   18c84:	6170      	str	r0, [r6, #20]
   18c86:	6130      	str	r0, [r6, #16]
   18c88:	60c2      	str	r2, [r0, #12]
   18c8a:	6082      	str	r2, [r0, #8]
   18c8c:	001a      	movs	r2, r3
   18c8e:	464b      	mov	r3, r9
   18c90:	430a      	orrs	r2, r1
   18c92:	6042      	str	r2, [r0, #4]
   18c94:	0038      	movs	r0, r7
   18c96:	50e1      	str	r1, [r4, r3]
   18c98:	f000 f984 	bl	18fa4 <__malloc_unlock>
   18c9c:	0020      	movs	r0, r4
   18c9e:	3008      	adds	r0, #8
   18ca0:	e703      	b.n	18aaa <_malloc_r+0x19e>
   18ca2:	46c0      	nop			; (mov r8, r8)
   18ca4:	2000046c 	.word	0x2000046c
   18ca8:	000001ff 	.word	0x000001ff
   18cac:	20000874 	.word	0x20000874
   18cb0:	20000f80 	.word	0x20000f80
   18cb4:	0000100f 	.word	0x0000100f
   18cb8:	20000f50 	.word	0x20000f50
   18cbc:	00001008 	.word	0x00001008
   18cc0:	20000f78 	.word	0x20000f78
   18cc4:	20000f7c 	.word	0x20000f7c
   18cc8:	6873      	ldr	r3, [r6, #4]
   18cca:	e68e      	b.n	189ea <_malloc_r+0xde>
   18ccc:	2308      	movs	r3, #8
   18cce:	469b      	mov	fp, r3
   18cd0:	3b07      	subs	r3, #7
   18cd2:	44dc      	add	ip, fp
   18cd4:	469b      	mov	fp, r3
   18cd6:	44da      	add	sl, fp
   18cd8:	4643      	mov	r3, r8
   18cda:	4652      	mov	r2, sl
   18cdc:	4213      	tst	r3, r2
   18cde:	d000      	beq.n	18ce2 <_malloc_r+0x3d6>
   18ce0:	e697      	b.n	18a12 <_malloc_r+0x106>
   18ce2:	e037      	b.n	18d54 <_malloc_r+0x448>
   18ce4:	68dc      	ldr	r4, [r3, #12]
   18ce6:	3002      	adds	r0, #2
   18ce8:	42a3      	cmp	r3, r4
   18cea:	d100      	bne.n	18cee <_malloc_r+0x3e2>
   18cec:	e655      	b.n	1899a <_malloc_r+0x8e>
   18cee:	e6ca      	b.n	18a86 <_malloc_r+0x17a>
   18cf0:	2201      	movs	r2, #1
   18cf2:	18e3      	adds	r3, r4, r3
   18cf4:	6859      	ldr	r1, [r3, #4]
   18cf6:	0038      	movs	r0, r7
   18cf8:	430a      	orrs	r2, r1
   18cfa:	605a      	str	r2, [r3, #4]
   18cfc:	68e3      	ldr	r3, [r4, #12]
   18cfe:	68a2      	ldr	r2, [r4, #8]
   18d00:	60d3      	str	r3, [r2, #12]
   18d02:	609a      	str	r2, [r3, #8]
   18d04:	f000 f94e 	bl	18fa4 <__malloc_unlock>
   18d08:	0020      	movs	r0, r4
   18d0a:	3008      	adds	r0, #8
   18d0c:	e6cd      	b.n	18aaa <_malloc_r+0x19e>
   18d0e:	235b      	movs	r3, #91	; 0x5b
   18d10:	4698      	mov	r8, r3
   18d12:	4480      	add	r8, r0
   18d14:	305c      	adds	r0, #92	; 0x5c
   18d16:	00c1      	lsls	r1, r0, #3
   18d18:	e61f      	b.n	1895a <_malloc_r+0x4e>
   18d1a:	099a      	lsrs	r2, r3, #6
   18d1c:	0011      	movs	r1, r2
   18d1e:	3239      	adds	r2, #57	; 0x39
   18d20:	3138      	adds	r1, #56	; 0x38
   18d22:	00d2      	lsls	r2, r2, #3
   18d24:	e78c      	b.n	18c40 <_malloc_r+0x334>
   18d26:	42b4      	cmp	r4, r6
   18d28:	d000      	beq.n	18d2c <_malloc_r+0x420>
   18d2a:	e75a      	b.n	18be2 <_malloc_r+0x2d6>
   18d2c:	4b4f      	ldr	r3, [pc, #316]	; (18e6c <_malloc_r+0x560>)
   18d2e:	9a00      	ldr	r2, [sp, #0]
   18d30:	469a      	mov	sl, r3
   18d32:	681b      	ldr	r3, [r3, #0]
   18d34:	469c      	mov	ip, r3
   18d36:	4653      	mov	r3, sl
   18d38:	4462      	add	r2, ip
   18d3a:	0011      	movs	r1, r2
   18d3c:	601a      	str	r2, [r3, #0]
   18d3e:	e6ff      	b.n	18b40 <_malloc_r+0x234>
   18d40:	2308      	movs	r3, #8
   18d42:	425b      	negs	r3, r3
   18d44:	469c      	mov	ip, r3
   18d46:	44e1      	add	r9, ip
   18d48:	464b      	mov	r3, r9
   18d4a:	689b      	ldr	r3, [r3, #8]
   18d4c:	3801      	subs	r0, #1
   18d4e:	4599      	cmp	r9, r3
   18d50:	d000      	beq.n	18d54 <_malloc_r+0x448>
   18d52:	e084      	b.n	18e5e <_malloc_r+0x552>
   18d54:	4643      	mov	r3, r8
   18d56:	4203      	tst	r3, r0
   18d58:	d1f2      	bne.n	18d40 <_malloc_r+0x434>
   18d5a:	6873      	ldr	r3, [r6, #4]
   18d5c:	438b      	bics	r3, r1
   18d5e:	6073      	str	r3, [r6, #4]
   18d60:	0049      	lsls	r1, r1, #1
   18d62:	4299      	cmp	r1, r3
   18d64:	d900      	bls.n	18d68 <_malloc_r+0x45c>
   18d66:	e6b5      	b.n	18ad4 <_malloc_r+0x1c8>
   18d68:	2900      	cmp	r1, #0
   18d6a:	d100      	bne.n	18d6e <_malloc_r+0x462>
   18d6c:	e6b2      	b.n	18ad4 <_malloc_r+0x1c8>
   18d6e:	4650      	mov	r0, sl
   18d70:	420b      	tst	r3, r1
   18d72:	d000      	beq.n	18d76 <_malloc_r+0x46a>
   18d74:	e648      	b.n	18a08 <_malloc_r+0xfc>
   18d76:	0049      	lsls	r1, r1, #1
   18d78:	3004      	adds	r0, #4
   18d7a:	420b      	tst	r3, r1
   18d7c:	d0fb      	beq.n	18d76 <_malloc_r+0x46a>
   18d7e:	e643      	b.n	18a08 <_malloc_r+0xfc>
   18d80:	2301      	movs	r3, #1
   18d82:	464a      	mov	r2, r9
   18d84:	6053      	str	r3, [r2, #4]
   18d86:	0038      	movs	r0, r7
   18d88:	f000 f90c 	bl	18fa4 <__malloc_unlock>
   18d8c:	2000      	movs	r0, #0
   18d8e:	e68c      	b.n	18aaa <_malloc_r+0x19e>
   18d90:	4694      	mov	ip, r2
   18d92:	e76a      	b.n	18c6a <_malloc_r+0x35e>
   18d94:	23aa      	movs	r3, #170	; 0xaa
   18d96:	005b      	lsls	r3, r3, #1
   18d98:	4298      	cmp	r0, r3
   18d9a:	d811      	bhi.n	18dc0 <_malloc_r+0x4b4>
   18d9c:	3bdd      	subs	r3, #221	; 0xdd
   18d9e:	4698      	mov	r8, r3
   18da0:	0be8      	lsrs	r0, r5, #15
   18da2:	4480      	add	r8, r0
   18da4:	3078      	adds	r0, #120	; 0x78
   18da6:	00c1      	lsls	r1, r0, #3
   18da8:	e5d7      	b.n	1895a <_malloc_r+0x4e>
   18daa:	2380      	movs	r3, #128	; 0x80
   18dac:	015b      	lsls	r3, r3, #5
   18dae:	e6dd      	b.n	18b6c <_malloc_r+0x260>
   18db0:	1089      	asrs	r1, r1, #2
   18db2:	3b02      	subs	r3, #2
   18db4:	408b      	lsls	r3, r1
   18db6:	6872      	ldr	r2, [r6, #4]
   18db8:	4313      	orrs	r3, r2
   18dba:	6073      	str	r3, [r6, #4]
   18dbc:	4662      	mov	r2, ip
   18dbe:	e757      	b.n	18c70 <_malloc_r+0x364>
   18dc0:	4b2b      	ldr	r3, [pc, #172]	; (18e70 <_malloc_r+0x564>)
   18dc2:	4298      	cmp	r0, r3
   18dc4:	d81c      	bhi.n	18e00 <_malloc_r+0x4f4>
   18dc6:	237c      	movs	r3, #124	; 0x7c
   18dc8:	4698      	mov	r8, r3
   18dca:	0ca8      	lsrs	r0, r5, #18
   18dcc:	4480      	add	r8, r0
   18dce:	307d      	adds	r0, #125	; 0x7d
   18dd0:	00c1      	lsls	r1, r0, #3
   18dd2:	e5c2      	b.n	1895a <_malloc_r+0x4e>
   18dd4:	3310      	adds	r3, #16
   18dd6:	9300      	str	r3, [sp, #0]
   18dd8:	e699      	b.n	18b0e <_malloc_r+0x202>
   18dda:	2a54      	cmp	r2, #84	; 0x54
   18ddc:	d826      	bhi.n	18e2c <_malloc_r+0x520>
   18dde:	464b      	mov	r3, r9
   18de0:	0b1a      	lsrs	r2, r3, #12
   18de2:	0011      	movs	r1, r2
   18de4:	326f      	adds	r2, #111	; 0x6f
   18de6:	316e      	adds	r1, #110	; 0x6e
   18de8:	00d2      	lsls	r2, r2, #3
   18dea:	e729      	b.n	18c40 <_malloc_r+0x334>
   18dec:	051b      	lsls	r3, r3, #20
   18dee:	d000      	beq.n	18df2 <_malloc_r+0x4e6>
   18df0:	e6a6      	b.n	18b40 <_malloc_r+0x234>
   18df2:	2001      	movs	r0, #1
   18df4:	9b00      	ldr	r3, [sp, #0]
   18df6:	68b2      	ldr	r2, [r6, #8]
   18df8:	4443      	add	r3, r8
   18dfa:	4303      	orrs	r3, r0
   18dfc:	6053      	str	r3, [r2, #4]
   18dfe:	e6e6      	b.n	18bce <_malloc_r+0x2c2>
   18e00:	21fe      	movs	r1, #254	; 0xfe
   18e02:	237e      	movs	r3, #126	; 0x7e
   18e04:	207f      	movs	r0, #127	; 0x7f
   18e06:	0089      	lsls	r1, r1, #2
   18e08:	4698      	mov	r8, r3
   18e0a:	e5a6      	b.n	1895a <_malloc_r+0x4e>
   18e0c:	2300      	movs	r3, #0
   18e0e:	2001      	movs	r0, #1
   18e10:	469b      	mov	fp, r3
   18e12:	e6bd      	b.n	18b90 <_malloc_r+0x284>
   18e14:	0021      	movs	r1, r4
   18e16:	0038      	movs	r0, r7
   18e18:	3108      	adds	r1, #8
   18e1a:	f7ff fa59 	bl	182d0 <_free_r>
   18e1e:	4653      	mov	r3, sl
   18e20:	6819      	ldr	r1, [r3, #0]
   18e22:	e6d4      	b.n	18bce <_malloc_r+0x2c2>
   18e24:	465b      	mov	r3, fp
   18e26:	464a      	mov	r2, r9
   18e28:	601a      	str	r2, [r3, #0]
   18e2a:	e694      	b.n	18b56 <_malloc_r+0x24a>
   18e2c:	21aa      	movs	r1, #170	; 0xaa
   18e2e:	0049      	lsls	r1, r1, #1
   18e30:	428a      	cmp	r2, r1
   18e32:	d806      	bhi.n	18e42 <_malloc_r+0x536>
   18e34:	464b      	mov	r3, r9
   18e36:	0bda      	lsrs	r2, r3, #15
   18e38:	0011      	movs	r1, r2
   18e3a:	3278      	adds	r2, #120	; 0x78
   18e3c:	3177      	adds	r1, #119	; 0x77
   18e3e:	00d2      	lsls	r2, r2, #3
   18e40:	e6fe      	b.n	18c40 <_malloc_r+0x334>
   18e42:	490b      	ldr	r1, [pc, #44]	; (18e70 <_malloc_r+0x564>)
   18e44:	428a      	cmp	r2, r1
   18e46:	d806      	bhi.n	18e56 <_malloc_r+0x54a>
   18e48:	464b      	mov	r3, r9
   18e4a:	0c9a      	lsrs	r2, r3, #18
   18e4c:	0011      	movs	r1, r2
   18e4e:	327d      	adds	r2, #125	; 0x7d
   18e50:	317c      	adds	r1, #124	; 0x7c
   18e52:	00d2      	lsls	r2, r2, #3
   18e54:	e6f4      	b.n	18c40 <_malloc_r+0x334>
   18e56:	22fe      	movs	r2, #254	; 0xfe
   18e58:	217e      	movs	r1, #126	; 0x7e
   18e5a:	0092      	lsls	r2, r2, #2
   18e5c:	e6f0      	b.n	18c40 <_malloc_r+0x334>
   18e5e:	6873      	ldr	r3, [r6, #4]
   18e60:	e77e      	b.n	18d60 <_malloc_r+0x454>
   18e62:	002b      	movs	r3, r5
   18e64:	08e8      	lsrs	r0, r5, #3
   18e66:	3308      	adds	r3, #8
   18e68:	e605      	b.n	18a76 <_malloc_r+0x16a>
   18e6a:	46c0      	nop			; (mov r8, r8)
   18e6c:	20000f50 	.word	0x20000f50
   18e70:	00000554 	.word	0x00000554

00018e74 <memchr>:
   18e74:	b570      	push	{r4, r5, r6, lr}
   18e76:	b2cd      	uxtb	r5, r1
   18e78:	0783      	lsls	r3, r0, #30
   18e7a:	d034      	beq.n	18ee6 <memchr+0x72>
   18e7c:	1e54      	subs	r4, r2, #1
   18e7e:	2a00      	cmp	r2, #0
   18e80:	d01b      	beq.n	18eba <memchr+0x46>
   18e82:	7803      	ldrb	r3, [r0, #0]
   18e84:	42ab      	cmp	r3, r5
   18e86:	d019      	beq.n	18ebc <memchr+0x48>
   18e88:	2203      	movs	r2, #3
   18e8a:	e004      	b.n	18e96 <memchr+0x22>
   18e8c:	3c01      	subs	r4, #1
   18e8e:	d314      	bcc.n	18eba <memchr+0x46>
   18e90:	7803      	ldrb	r3, [r0, #0]
   18e92:	42ab      	cmp	r3, r5
   18e94:	d012      	beq.n	18ebc <memchr+0x48>
   18e96:	3001      	adds	r0, #1
   18e98:	4210      	tst	r0, r2
   18e9a:	d1f7      	bne.n	18e8c <memchr+0x18>
   18e9c:	2c03      	cmp	r4, #3
   18e9e:	d80e      	bhi.n	18ebe <memchr+0x4a>
   18ea0:	2c00      	cmp	r4, #0
   18ea2:	d00a      	beq.n	18eba <memchr+0x46>
   18ea4:	7803      	ldrb	r3, [r0, #0]
   18ea6:	42ab      	cmp	r3, r5
   18ea8:	d008      	beq.n	18ebc <memchr+0x48>
   18eaa:	1904      	adds	r4, r0, r4
   18eac:	e002      	b.n	18eb4 <memchr+0x40>
   18eae:	7803      	ldrb	r3, [r0, #0]
   18eb0:	42ab      	cmp	r3, r5
   18eb2:	d003      	beq.n	18ebc <memchr+0x48>
   18eb4:	3001      	adds	r0, #1
   18eb6:	4284      	cmp	r4, r0
   18eb8:	d1f9      	bne.n	18eae <memchr+0x3a>
   18eba:	2000      	movs	r0, #0
   18ebc:	bd70      	pop	{r4, r5, r6, pc}
   18ebe:	22ff      	movs	r2, #255	; 0xff
   18ec0:	060b      	lsls	r3, r1, #24
   18ec2:	0c1b      	lsrs	r3, r3, #16
   18ec4:	4011      	ands	r1, r2
   18ec6:	4319      	orrs	r1, r3
   18ec8:	040b      	lsls	r3, r1, #16
   18eca:	4e08      	ldr	r6, [pc, #32]	; (18eec <memchr+0x78>)
   18ecc:	4319      	orrs	r1, r3
   18ece:	6803      	ldr	r3, [r0, #0]
   18ed0:	4a07      	ldr	r2, [pc, #28]	; (18ef0 <memchr+0x7c>)
   18ed2:	404b      	eors	r3, r1
   18ed4:	189a      	adds	r2, r3, r2
   18ed6:	439a      	bics	r2, r3
   18ed8:	4232      	tst	r2, r6
   18eda:	d1e3      	bne.n	18ea4 <memchr+0x30>
   18edc:	3c04      	subs	r4, #4
   18ede:	3004      	adds	r0, #4
   18ee0:	2c03      	cmp	r4, #3
   18ee2:	d8f4      	bhi.n	18ece <memchr+0x5a>
   18ee4:	e7dc      	b.n	18ea0 <memchr+0x2c>
   18ee6:	0014      	movs	r4, r2
   18ee8:	e7d8      	b.n	18e9c <memchr+0x28>
   18eea:	46c0      	nop			; (mov r8, r8)
   18eec:	80808080 	.word	0x80808080
   18ef0:	fefefeff 	.word	0xfefefeff

00018ef4 <memmove>:
   18ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ef6:	4288      	cmp	r0, r1
   18ef8:	d90a      	bls.n	18f10 <memmove+0x1c>
   18efa:	188b      	adds	r3, r1, r2
   18efc:	4298      	cmp	r0, r3
   18efe:	d207      	bcs.n	18f10 <memmove+0x1c>
   18f00:	1e53      	subs	r3, r2, #1
   18f02:	2a00      	cmp	r2, #0
   18f04:	d003      	beq.n	18f0e <memmove+0x1a>
   18f06:	5cca      	ldrb	r2, [r1, r3]
   18f08:	54c2      	strb	r2, [r0, r3]
   18f0a:	3b01      	subs	r3, #1
   18f0c:	d2fb      	bcs.n	18f06 <memmove+0x12>
   18f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f10:	0005      	movs	r5, r0
   18f12:	2a0f      	cmp	r2, #15
   18f14:	d808      	bhi.n	18f28 <memmove+0x34>
   18f16:	2a00      	cmp	r2, #0
   18f18:	d0f9      	beq.n	18f0e <memmove+0x1a>
   18f1a:	2300      	movs	r3, #0
   18f1c:	5ccc      	ldrb	r4, [r1, r3]
   18f1e:	54ec      	strb	r4, [r5, r3]
   18f20:	3301      	adds	r3, #1
   18f22:	4293      	cmp	r3, r2
   18f24:	d1fa      	bne.n	18f1c <memmove+0x28>
   18f26:	e7f2      	b.n	18f0e <memmove+0x1a>
   18f28:	000b      	movs	r3, r1
   18f2a:	4303      	orrs	r3, r0
   18f2c:	079b      	lsls	r3, r3, #30
   18f2e:	d12d      	bne.n	18f8c <memmove+0x98>
   18f30:	0015      	movs	r5, r2
   18f32:	000c      	movs	r4, r1
   18f34:	0003      	movs	r3, r0
   18f36:	3d10      	subs	r5, #16
   18f38:	092f      	lsrs	r7, r5, #4
   18f3a:	3701      	adds	r7, #1
   18f3c:	013f      	lsls	r7, r7, #4
   18f3e:	19c7      	adds	r7, r0, r7
   18f40:	6826      	ldr	r6, [r4, #0]
   18f42:	601e      	str	r6, [r3, #0]
   18f44:	6866      	ldr	r6, [r4, #4]
   18f46:	605e      	str	r6, [r3, #4]
   18f48:	68a6      	ldr	r6, [r4, #8]
   18f4a:	609e      	str	r6, [r3, #8]
   18f4c:	68e6      	ldr	r6, [r4, #12]
   18f4e:	3410      	adds	r4, #16
   18f50:	60de      	str	r6, [r3, #12]
   18f52:	3310      	adds	r3, #16
   18f54:	429f      	cmp	r7, r3
   18f56:	d1f3      	bne.n	18f40 <memmove+0x4c>
   18f58:	240f      	movs	r4, #15
   18f5a:	43a5      	bics	r5, r4
   18f5c:	3510      	adds	r5, #16
   18f5e:	1949      	adds	r1, r1, r5
   18f60:	4014      	ands	r4, r2
   18f62:	1945      	adds	r5, r0, r5
   18f64:	2c03      	cmp	r4, #3
   18f66:	d913      	bls.n	18f90 <memmove+0x9c>
   18f68:	2300      	movs	r3, #0
   18f6a:	1f27      	subs	r7, r4, #4
   18f6c:	08be      	lsrs	r6, r7, #2
   18f6e:	3601      	adds	r6, #1
   18f70:	00b6      	lsls	r6, r6, #2
   18f72:	58cc      	ldr	r4, [r1, r3]
   18f74:	50ec      	str	r4, [r5, r3]
   18f76:	3304      	adds	r3, #4
   18f78:	42b3      	cmp	r3, r6
   18f7a:	d1fa      	bne.n	18f72 <memmove+0x7e>
   18f7c:	2603      	movs	r6, #3
   18f7e:	43b7      	bics	r7, r6
   18f80:	1d3c      	adds	r4, r7, #4
   18f82:	1909      	adds	r1, r1, r4
   18f84:	192d      	adds	r5, r5, r4
   18f86:	4032      	ands	r2, r6
   18f88:	d1c7      	bne.n	18f1a <memmove+0x26>
   18f8a:	e7c0      	b.n	18f0e <memmove+0x1a>
   18f8c:	0005      	movs	r5, r0
   18f8e:	e7c4      	b.n	18f1a <memmove+0x26>
   18f90:	0022      	movs	r2, r4
   18f92:	e7c0      	b.n	18f16 <memmove+0x22>

00018f94 <__malloc_lock>:
   18f94:	b510      	push	{r4, lr}
   18f96:	4802      	ldr	r0, [pc, #8]	; (18fa0 <__malloc_lock+0xc>)
   18f98:	f7ff fc32 	bl	18800 <__retarget_lock_acquire_recursive>
   18f9c:	bd10      	pop	{r4, pc}
   18f9e:	46c0      	nop			; (mov r8, r8)
   18fa0:	20001c74 	.word	0x20001c74

00018fa4 <__malloc_unlock>:
   18fa4:	b510      	push	{r4, lr}
   18fa6:	4802      	ldr	r0, [pc, #8]	; (18fb0 <__malloc_unlock+0xc>)
   18fa8:	f7ff fc2c 	bl	18804 <__retarget_lock_release_recursive>
   18fac:	bd10      	pop	{r4, pc}
   18fae:	46c0      	nop			; (mov r8, r8)
   18fb0:	20001c74 	.word	0x20001c74

00018fb4 <_Balloc>:
   18fb4:	b570      	push	{r4, r5, r6, lr}
   18fb6:	0004      	movs	r4, r0
   18fb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   18fba:	000d      	movs	r5, r1
   18fbc:	2800      	cmp	r0, #0
   18fbe:	d00a      	beq.n	18fd6 <_Balloc+0x22>
   18fc0:	00ab      	lsls	r3, r5, #2
   18fc2:	18c3      	adds	r3, r0, r3
   18fc4:	6818      	ldr	r0, [r3, #0]
   18fc6:	2800      	cmp	r0, #0
   18fc8:	d00f      	beq.n	18fea <_Balloc+0x36>
   18fca:	6802      	ldr	r2, [r0, #0]
   18fcc:	601a      	str	r2, [r3, #0]
   18fce:	2300      	movs	r3, #0
   18fd0:	6103      	str	r3, [r0, #16]
   18fd2:	60c3      	str	r3, [r0, #12]
   18fd4:	bd70      	pop	{r4, r5, r6, pc}
   18fd6:	2221      	movs	r2, #33	; 0x21
   18fd8:	2104      	movs	r1, #4
   18fda:	0020      	movs	r0, r4
   18fdc:	f000 feba 	bl	19d54 <_calloc_r>
   18fe0:	64e0      	str	r0, [r4, #76]	; 0x4c
   18fe2:	2800      	cmp	r0, #0
   18fe4:	d1ec      	bne.n	18fc0 <_Balloc+0xc>
   18fe6:	2000      	movs	r0, #0
   18fe8:	e7f4      	b.n	18fd4 <_Balloc+0x20>
   18fea:	2601      	movs	r6, #1
   18fec:	40ae      	lsls	r6, r5
   18fee:	1d72      	adds	r2, r6, #5
   18ff0:	0092      	lsls	r2, r2, #2
   18ff2:	2101      	movs	r1, #1
   18ff4:	0020      	movs	r0, r4
   18ff6:	f000 fead 	bl	19d54 <_calloc_r>
   18ffa:	2800      	cmp	r0, #0
   18ffc:	d0f3      	beq.n	18fe6 <_Balloc+0x32>
   18ffe:	6045      	str	r5, [r0, #4]
   19000:	6086      	str	r6, [r0, #8]
   19002:	e7e4      	b.n	18fce <_Balloc+0x1a>

00019004 <_Bfree>:
   19004:	2900      	cmp	r1, #0
   19006:	d006      	beq.n	19016 <_Bfree+0x12>
   19008:	684b      	ldr	r3, [r1, #4]
   1900a:	009a      	lsls	r2, r3, #2
   1900c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1900e:	189b      	adds	r3, r3, r2
   19010:	681a      	ldr	r2, [r3, #0]
   19012:	600a      	str	r2, [r1, #0]
   19014:	6019      	str	r1, [r3, #0]
   19016:	4770      	bx	lr

00019018 <__multadd>:
   19018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1901a:	46ce      	mov	lr, r9
   1901c:	4647      	mov	r7, r8
   1901e:	4681      	mov	r9, r0
   19020:	0008      	movs	r0, r1
   19022:	b580      	push	{r7, lr}
   19024:	000d      	movs	r5, r1
   19026:	690c      	ldr	r4, [r1, #16]
   19028:	001f      	movs	r7, r3
   1902a:	2100      	movs	r1, #0
   1902c:	3014      	adds	r0, #20
   1902e:	6803      	ldr	r3, [r0, #0]
   19030:	3101      	adds	r1, #1
   19032:	041e      	lsls	r6, r3, #16
   19034:	0c36      	lsrs	r6, r6, #16
   19036:	4356      	muls	r6, r2
   19038:	0c1b      	lsrs	r3, r3, #16
   1903a:	4353      	muls	r3, r2
   1903c:	19f6      	adds	r6, r6, r7
   1903e:	0c37      	lsrs	r7, r6, #16
   19040:	19db      	adds	r3, r3, r7
   19042:	0436      	lsls	r6, r6, #16
   19044:	0c1f      	lsrs	r7, r3, #16
   19046:	0c36      	lsrs	r6, r6, #16
   19048:	041b      	lsls	r3, r3, #16
   1904a:	199b      	adds	r3, r3, r6
   1904c:	c008      	stmia	r0!, {r3}
   1904e:	428c      	cmp	r4, r1
   19050:	dced      	bgt.n	1902e <__multadd+0x16>
   19052:	2f00      	cmp	r7, #0
   19054:	d008      	beq.n	19068 <__multadd+0x50>
   19056:	68ab      	ldr	r3, [r5, #8]
   19058:	429c      	cmp	r4, r3
   1905a:	da0a      	bge.n	19072 <__multadd+0x5a>
   1905c:	1d23      	adds	r3, r4, #4
   1905e:	009b      	lsls	r3, r3, #2
   19060:	18eb      	adds	r3, r5, r3
   19062:	3401      	adds	r4, #1
   19064:	605f      	str	r7, [r3, #4]
   19066:	612c      	str	r4, [r5, #16]
   19068:	0028      	movs	r0, r5
   1906a:	bc0c      	pop	{r2, r3}
   1906c:	4690      	mov	r8, r2
   1906e:	4699      	mov	r9, r3
   19070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19072:	686b      	ldr	r3, [r5, #4]
   19074:	4648      	mov	r0, r9
   19076:	1c59      	adds	r1, r3, #1
   19078:	f7ff ff9c 	bl	18fb4 <_Balloc>
   1907c:	0029      	movs	r1, r5
   1907e:	692b      	ldr	r3, [r5, #16]
   19080:	4680      	mov	r8, r0
   19082:	1c9a      	adds	r2, r3, #2
   19084:	0092      	lsls	r2, r2, #2
   19086:	310c      	adds	r1, #12
   19088:	300c      	adds	r0, #12
   1908a:	f7fa fd8b 	bl	13ba4 <memcpy>
   1908e:	686b      	ldr	r3, [r5, #4]
   19090:	009a      	lsls	r2, r3, #2
   19092:	464b      	mov	r3, r9
   19094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19096:	189b      	adds	r3, r3, r2
   19098:	681a      	ldr	r2, [r3, #0]
   1909a:	602a      	str	r2, [r5, #0]
   1909c:	601d      	str	r5, [r3, #0]
   1909e:	4645      	mov	r5, r8
   190a0:	e7dc      	b.n	1905c <__multadd+0x44>
   190a2:	46c0      	nop			; (mov r8, r8)

000190a4 <__hi0bits>:
   190a4:	0003      	movs	r3, r0
   190a6:	0c02      	lsrs	r2, r0, #16
   190a8:	2000      	movs	r0, #0
   190aa:	2a00      	cmp	r2, #0
   190ac:	d101      	bne.n	190b2 <__hi0bits+0xe>
   190ae:	041b      	lsls	r3, r3, #16
   190b0:	3010      	adds	r0, #16
   190b2:	0e1a      	lsrs	r2, r3, #24
   190b4:	d101      	bne.n	190ba <__hi0bits+0x16>
   190b6:	3008      	adds	r0, #8
   190b8:	021b      	lsls	r3, r3, #8
   190ba:	0f1a      	lsrs	r2, r3, #28
   190bc:	d101      	bne.n	190c2 <__hi0bits+0x1e>
   190be:	3004      	adds	r0, #4
   190c0:	011b      	lsls	r3, r3, #4
   190c2:	0f9a      	lsrs	r2, r3, #30
   190c4:	d101      	bne.n	190ca <__hi0bits+0x26>
   190c6:	3002      	adds	r0, #2
   190c8:	009b      	lsls	r3, r3, #2
   190ca:	2b00      	cmp	r3, #0
   190cc:	db03      	blt.n	190d6 <__hi0bits+0x32>
   190ce:	3001      	adds	r0, #1
   190d0:	005b      	lsls	r3, r3, #1
   190d2:	d400      	bmi.n	190d6 <__hi0bits+0x32>
   190d4:	2020      	movs	r0, #32
   190d6:	4770      	bx	lr

000190d8 <__lo0bits>:
   190d8:	6803      	ldr	r3, [r0, #0]
   190da:	075a      	lsls	r2, r3, #29
   190dc:	d009      	beq.n	190f2 <__lo0bits+0x1a>
   190de:	2200      	movs	r2, #0
   190e0:	07d9      	lsls	r1, r3, #31
   190e2:	d404      	bmi.n	190ee <__lo0bits+0x16>
   190e4:	079a      	lsls	r2, r3, #30
   190e6:	d420      	bmi.n	1912a <__lo0bits+0x52>
   190e8:	2202      	movs	r2, #2
   190ea:	089b      	lsrs	r3, r3, #2
   190ec:	6003      	str	r3, [r0, #0]
   190ee:	0010      	movs	r0, r2
   190f0:	4770      	bx	lr
   190f2:	0419      	lsls	r1, r3, #16
   190f4:	2200      	movs	r2, #0
   190f6:	2900      	cmp	r1, #0
   190f8:	d101      	bne.n	190fe <__lo0bits+0x26>
   190fa:	0c1b      	lsrs	r3, r3, #16
   190fc:	3210      	adds	r2, #16
   190fe:	21ff      	movs	r1, #255	; 0xff
   19100:	4219      	tst	r1, r3
   19102:	d101      	bne.n	19108 <__lo0bits+0x30>
   19104:	3208      	adds	r2, #8
   19106:	0a1b      	lsrs	r3, r3, #8
   19108:	0719      	lsls	r1, r3, #28
   1910a:	d101      	bne.n	19110 <__lo0bits+0x38>
   1910c:	3204      	adds	r2, #4
   1910e:	091b      	lsrs	r3, r3, #4
   19110:	0799      	lsls	r1, r3, #30
   19112:	d101      	bne.n	19118 <__lo0bits+0x40>
   19114:	3202      	adds	r2, #2
   19116:	089b      	lsrs	r3, r3, #2
   19118:	07d9      	lsls	r1, r3, #31
   1911a:	d404      	bmi.n	19126 <__lo0bits+0x4e>
   1911c:	085b      	lsrs	r3, r3, #1
   1911e:	d101      	bne.n	19124 <__lo0bits+0x4c>
   19120:	2220      	movs	r2, #32
   19122:	e7e4      	b.n	190ee <__lo0bits+0x16>
   19124:	3201      	adds	r2, #1
   19126:	6003      	str	r3, [r0, #0]
   19128:	e7e1      	b.n	190ee <__lo0bits+0x16>
   1912a:	085b      	lsrs	r3, r3, #1
   1912c:	6003      	str	r3, [r0, #0]
   1912e:	2201      	movs	r2, #1
   19130:	e7dd      	b.n	190ee <__lo0bits+0x16>
   19132:	46c0      	nop			; (mov r8, r8)

00019134 <__i2b>:
   19134:	b510      	push	{r4, lr}
   19136:	000c      	movs	r4, r1
   19138:	2101      	movs	r1, #1
   1913a:	f7ff ff3b 	bl	18fb4 <_Balloc>
   1913e:	2301      	movs	r3, #1
   19140:	6144      	str	r4, [r0, #20]
   19142:	6103      	str	r3, [r0, #16]
   19144:	bd10      	pop	{r4, pc}
   19146:	46c0      	nop			; (mov r8, r8)

00019148 <__multiply>:
   19148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1914a:	4657      	mov	r7, sl
   1914c:	464e      	mov	r6, r9
   1914e:	4645      	mov	r5, r8
   19150:	46de      	mov	lr, fp
   19152:	b5e0      	push	{r5, r6, r7, lr}
   19154:	6914      	ldr	r4, [r2, #16]
   19156:	690e      	ldr	r6, [r1, #16]
   19158:	b085      	sub	sp, #20
   1915a:	000f      	movs	r7, r1
   1915c:	0015      	movs	r5, r2
   1915e:	42a6      	cmp	r6, r4
   19160:	da04      	bge.n	1916c <__multiply+0x24>
   19162:	0033      	movs	r3, r6
   19164:	0017      	movs	r7, r2
   19166:	0026      	movs	r6, r4
   19168:	000d      	movs	r5, r1
   1916a:	001c      	movs	r4, r3
   1916c:	1933      	adds	r3, r6, r4
   1916e:	4698      	mov	r8, r3
   19170:	68bb      	ldr	r3, [r7, #8]
   19172:	6879      	ldr	r1, [r7, #4]
   19174:	4598      	cmp	r8, r3
   19176:	dd00      	ble.n	1917a <__multiply+0x32>
   19178:	3101      	adds	r1, #1
   1917a:	f7ff ff1b 	bl	18fb4 <_Balloc>
   1917e:	2214      	movs	r2, #20
   19180:	0003      	movs	r3, r0
   19182:	4694      	mov	ip, r2
   19184:	4463      	add	r3, ip
   19186:	469b      	mov	fp, r3
   19188:	4643      	mov	r3, r8
   1918a:	009b      	lsls	r3, r3, #2
   1918c:	445b      	add	r3, fp
   1918e:	0019      	movs	r1, r3
   19190:	9302      	str	r3, [sp, #8]
   19192:	9003      	str	r0, [sp, #12]
   19194:	465b      	mov	r3, fp
   19196:	2200      	movs	r2, #0
   19198:	458b      	cmp	fp, r1
   1919a:	d203      	bcs.n	191a4 <__multiply+0x5c>
   1919c:	9902      	ldr	r1, [sp, #8]
   1919e:	c304      	stmia	r3!, {r2}
   191a0:	4299      	cmp	r1, r3
   191a2:	d8fc      	bhi.n	1919e <__multiply+0x56>
   191a4:	2314      	movs	r3, #20
   191a6:	00a4      	lsls	r4, r4, #2
   191a8:	469a      	mov	sl, r3
   191aa:	3714      	adds	r7, #20
   191ac:	0023      	movs	r3, r4
   191ae:	46bc      	mov	ip, r7
   191b0:	44aa      	add	sl, r5
   191b2:	00b6      	lsls	r6, r6, #2
   191b4:	4453      	add	r3, sl
   191b6:	9700      	str	r7, [sp, #0]
   191b8:	44b4      	add	ip, r6
   191ba:	9301      	str	r3, [sp, #4]
   191bc:	459a      	cmp	sl, r3
   191be:	d24f      	bcs.n	19260 <__multiply+0x118>
   191c0:	4653      	mov	r3, sl
   191c2:	681b      	ldr	r3, [r3, #0]
   191c4:	041e      	lsls	r6, r3, #16
   191c6:	0c36      	lsrs	r6, r6, #16
   191c8:	d020      	beq.n	1920c <__multiply+0xc4>
   191ca:	465c      	mov	r4, fp
   191cc:	2700      	movs	r7, #0
   191ce:	9d00      	ldr	r5, [sp, #0]
   191d0:	0021      	movs	r1, r4
   191d2:	cc08      	ldmia	r4!, {r3}
   191d4:	cd04      	ldmia	r5!, {r2}
   191d6:	4699      	mov	r9, r3
   191d8:	4648      	mov	r0, r9
   191da:	0413      	lsls	r3, r2, #16
   191dc:	0c1b      	lsrs	r3, r3, #16
   191de:	4373      	muls	r3, r6
   191e0:	0400      	lsls	r0, r0, #16
   191e2:	0c00      	lsrs	r0, r0, #16
   191e4:	181b      	adds	r3, r3, r0
   191e6:	19d8      	adds	r0, r3, r7
   191e8:	0c13      	lsrs	r3, r2, #16
   191ea:	464a      	mov	r2, r9
   191ec:	4373      	muls	r3, r6
   191ee:	0c12      	lsrs	r2, r2, #16
   191f0:	189b      	adds	r3, r3, r2
   191f2:	0c02      	lsrs	r2, r0, #16
   191f4:	189b      	adds	r3, r3, r2
   191f6:	0402      	lsls	r2, r0, #16
   191f8:	0c1f      	lsrs	r7, r3, #16
   191fa:	0c12      	lsrs	r2, r2, #16
   191fc:	041b      	lsls	r3, r3, #16
   191fe:	4313      	orrs	r3, r2
   19200:	600b      	str	r3, [r1, #0]
   19202:	45ac      	cmp	ip, r5
   19204:	d8e4      	bhi.n	191d0 <__multiply+0x88>
   19206:	4653      	mov	r3, sl
   19208:	6027      	str	r7, [r4, #0]
   1920a:	681b      	ldr	r3, [r3, #0]
   1920c:	0c1e      	lsrs	r6, r3, #16
   1920e:	d020      	beq.n	19252 <__multiply+0x10a>
   19210:	465b      	mov	r3, fp
   19212:	2100      	movs	r1, #0
   19214:	681b      	ldr	r3, [r3, #0]
   19216:	465c      	mov	r4, fp
   19218:	0018      	movs	r0, r3
   1921a:	000f      	movs	r7, r1
   1921c:	4662      	mov	r2, ip
   1921e:	9d00      	ldr	r5, [sp, #0]
   19220:	8829      	ldrh	r1, [r5, #0]
   19222:	0c00      	lsrs	r0, r0, #16
   19224:	4371      	muls	r1, r6
   19226:	1809      	adds	r1, r1, r0
   19228:	19c9      	adds	r1, r1, r7
   1922a:	041b      	lsls	r3, r3, #16
   1922c:	0408      	lsls	r0, r1, #16
   1922e:	0c1b      	lsrs	r3, r3, #16
   19230:	4303      	orrs	r3, r0
   19232:	6023      	str	r3, [r4, #0]
   19234:	cd08      	ldmia	r5!, {r3}
   19236:	6860      	ldr	r0, [r4, #4]
   19238:	0c1b      	lsrs	r3, r3, #16
   1923a:	4373      	muls	r3, r6
   1923c:	0407      	lsls	r7, r0, #16
   1923e:	0c3f      	lsrs	r7, r7, #16
   19240:	19db      	adds	r3, r3, r7
   19242:	0c09      	lsrs	r1, r1, #16
   19244:	185b      	adds	r3, r3, r1
   19246:	0c1f      	lsrs	r7, r3, #16
   19248:	3404      	adds	r4, #4
   1924a:	42aa      	cmp	r2, r5
   1924c:	d8e8      	bhi.n	19220 <__multiply+0xd8>
   1924e:	4694      	mov	ip, r2
   19250:	6023      	str	r3, [r4, #0]
   19252:	2304      	movs	r3, #4
   19254:	4699      	mov	r9, r3
   19256:	9b01      	ldr	r3, [sp, #4]
   19258:	44ca      	add	sl, r9
   1925a:	44cb      	add	fp, r9
   1925c:	4553      	cmp	r3, sl
   1925e:	d8af      	bhi.n	191c0 <__multiply+0x78>
   19260:	4643      	mov	r3, r8
   19262:	2b00      	cmp	r3, #0
   19264:	dd0e      	ble.n	19284 <__multiply+0x13c>
   19266:	9b02      	ldr	r3, [sp, #8]
   19268:	3b04      	subs	r3, #4
   1926a:	681a      	ldr	r2, [r3, #0]
   1926c:	2a00      	cmp	r2, #0
   1926e:	d109      	bne.n	19284 <__multiply+0x13c>
   19270:	4642      	mov	r2, r8
   19272:	e003      	b.n	1927c <__multiply+0x134>
   19274:	3b04      	subs	r3, #4
   19276:	6819      	ldr	r1, [r3, #0]
   19278:	2900      	cmp	r1, #0
   1927a:	d102      	bne.n	19282 <__multiply+0x13a>
   1927c:	3a01      	subs	r2, #1
   1927e:	2a00      	cmp	r2, #0
   19280:	d1f8      	bne.n	19274 <__multiply+0x12c>
   19282:	4690      	mov	r8, r2
   19284:	9b03      	ldr	r3, [sp, #12]
   19286:	4642      	mov	r2, r8
   19288:	0018      	movs	r0, r3
   1928a:	611a      	str	r2, [r3, #16]
   1928c:	b005      	add	sp, #20
   1928e:	bc3c      	pop	{r2, r3, r4, r5}
   19290:	4690      	mov	r8, r2
   19292:	4699      	mov	r9, r3
   19294:	46a2      	mov	sl, r4
   19296:	46ab      	mov	fp, r5
   19298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1929a:	46c0      	nop			; (mov r8, r8)

0001929c <__pow5mult>:
   1929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1929e:	4647      	mov	r7, r8
   192a0:	46ce      	mov	lr, r9
   192a2:	2303      	movs	r3, #3
   192a4:	b580      	push	{r7, lr}
   192a6:	4680      	mov	r8, r0
   192a8:	000f      	movs	r7, r1
   192aa:	0014      	movs	r4, r2
   192ac:	4013      	ands	r3, r2
   192ae:	d13a      	bne.n	19326 <__pow5mult+0x8a>
   192b0:	10a4      	asrs	r4, r4, #2
   192b2:	003e      	movs	r6, r7
   192b4:	2c00      	cmp	r4, #0
   192b6:	d025      	beq.n	19304 <__pow5mult+0x68>
   192b8:	4643      	mov	r3, r8
   192ba:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   192bc:	2d00      	cmp	r5, #0
   192be:	d03b      	beq.n	19338 <__pow5mult+0x9c>
   192c0:	003e      	movs	r6, r7
   192c2:	2300      	movs	r3, #0
   192c4:	2701      	movs	r7, #1
   192c6:	4699      	mov	r9, r3
   192c8:	4227      	tst	r7, r4
   192ca:	d107      	bne.n	192dc <__pow5mult+0x40>
   192cc:	1064      	asrs	r4, r4, #1
   192ce:	d019      	beq.n	19304 <__pow5mult+0x68>
   192d0:	6828      	ldr	r0, [r5, #0]
   192d2:	2800      	cmp	r0, #0
   192d4:	d01b      	beq.n	1930e <__pow5mult+0x72>
   192d6:	0005      	movs	r5, r0
   192d8:	4227      	tst	r7, r4
   192da:	d0f7      	beq.n	192cc <__pow5mult+0x30>
   192dc:	002a      	movs	r2, r5
   192de:	0031      	movs	r1, r6
   192e0:	4640      	mov	r0, r8
   192e2:	f7ff ff31 	bl	19148 <__multiply>
   192e6:	2e00      	cmp	r6, #0
   192e8:	d01b      	beq.n	19322 <__pow5mult+0x86>
   192ea:	4642      	mov	r2, r8
   192ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   192ee:	6873      	ldr	r3, [r6, #4]
   192f0:	4694      	mov	ip, r2
   192f2:	009b      	lsls	r3, r3, #2
   192f4:	4463      	add	r3, ip
   192f6:	681a      	ldr	r2, [r3, #0]
   192f8:	1064      	asrs	r4, r4, #1
   192fa:	6032      	str	r2, [r6, #0]
   192fc:	601e      	str	r6, [r3, #0]
   192fe:	0006      	movs	r6, r0
   19300:	2c00      	cmp	r4, #0
   19302:	d1e5      	bne.n	192d0 <__pow5mult+0x34>
   19304:	0030      	movs	r0, r6
   19306:	bc0c      	pop	{r2, r3}
   19308:	4690      	mov	r8, r2
   1930a:	4699      	mov	r9, r3
   1930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1930e:	002a      	movs	r2, r5
   19310:	0029      	movs	r1, r5
   19312:	4640      	mov	r0, r8
   19314:	f7ff ff18 	bl	19148 <__multiply>
   19318:	464b      	mov	r3, r9
   1931a:	6028      	str	r0, [r5, #0]
   1931c:	6003      	str	r3, [r0, #0]
   1931e:	0005      	movs	r5, r0
   19320:	e7da      	b.n	192d8 <__pow5mult+0x3c>
   19322:	0006      	movs	r6, r0
   19324:	e7d2      	b.n	192cc <__pow5mult+0x30>
   19326:	4a0b      	ldr	r2, [pc, #44]	; (19354 <__pow5mult+0xb8>)
   19328:	3b01      	subs	r3, #1
   1932a:	009b      	lsls	r3, r3, #2
   1932c:	589a      	ldr	r2, [r3, r2]
   1932e:	2300      	movs	r3, #0
   19330:	f7ff fe72 	bl	19018 <__multadd>
   19334:	0007      	movs	r7, r0
   19336:	e7bb      	b.n	192b0 <__pow5mult+0x14>
   19338:	2101      	movs	r1, #1
   1933a:	4640      	mov	r0, r8
   1933c:	f7ff fe3a 	bl	18fb4 <_Balloc>
   19340:	4b05      	ldr	r3, [pc, #20]	; (19358 <__pow5mult+0xbc>)
   19342:	0005      	movs	r5, r0
   19344:	6143      	str	r3, [r0, #20]
   19346:	2301      	movs	r3, #1
   19348:	6103      	str	r3, [r0, #16]
   1934a:	4643      	mov	r3, r8
   1934c:	6498      	str	r0, [r3, #72]	; 0x48
   1934e:	2300      	movs	r3, #0
   19350:	6003      	str	r3, [r0, #0]
   19352:	e7b5      	b.n	192c0 <__pow5mult+0x24>
   19354:	0001b418 	.word	0x0001b418
   19358:	00000271 	.word	0x00000271

0001935c <__lshift>:
   1935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1935e:	464e      	mov	r6, r9
   19360:	4645      	mov	r5, r8
   19362:	46de      	mov	lr, fp
   19364:	4657      	mov	r7, sl
   19366:	b5e0      	push	{r5, r6, r7, lr}
   19368:	000e      	movs	r6, r1
   1936a:	6933      	ldr	r3, [r6, #16]
   1936c:	1154      	asrs	r4, r2, #5
   1936e:	4698      	mov	r8, r3
   19370:	44a0      	add	r8, r4
   19372:	4643      	mov	r3, r8
   19374:	1c5d      	adds	r5, r3, #1
   19376:	68b3      	ldr	r3, [r6, #8]
   19378:	4683      	mov	fp, r0
   1937a:	4691      	mov	r9, r2
   1937c:	6849      	ldr	r1, [r1, #4]
   1937e:	429d      	cmp	r5, r3
   19380:	dd03      	ble.n	1938a <__lshift+0x2e>
   19382:	3101      	adds	r1, #1
   19384:	005b      	lsls	r3, r3, #1
   19386:	429d      	cmp	r5, r3
   19388:	dcfb      	bgt.n	19382 <__lshift+0x26>
   1938a:	4658      	mov	r0, fp
   1938c:	f7ff fe12 	bl	18fb4 <_Balloc>
   19390:	0003      	movs	r3, r0
   19392:	4684      	mov	ip, r0
   19394:	3314      	adds	r3, #20
   19396:	2c00      	cmp	r4, #0
   19398:	dd06      	ble.n	193a8 <__lshift+0x4c>
   1939a:	2100      	movs	r1, #0
   1939c:	00a4      	lsls	r4, r4, #2
   1939e:	001a      	movs	r2, r3
   193a0:	191b      	adds	r3, r3, r4
   193a2:	c202      	stmia	r2!, {r1}
   193a4:	4293      	cmp	r3, r2
   193a6:	d1fc      	bne.n	193a2 <__lshift+0x46>
   193a8:	6932      	ldr	r2, [r6, #16]
   193aa:	4648      	mov	r0, r9
   193ac:	0097      	lsls	r7, r2, #2
   193ae:	0031      	movs	r1, r6
   193b0:	221f      	movs	r2, #31
   193b2:	3114      	adds	r1, #20
   193b4:	4010      	ands	r0, r2
   193b6:	19cf      	adds	r7, r1, r7
   193b8:	4681      	mov	r9, r0
   193ba:	2800      	cmp	r0, #0
   193bc:	d025      	beq.n	1940a <__lshift+0xae>
   193be:	2220      	movs	r2, #32
   193c0:	1a12      	subs	r2, r2, r0
   193c2:	4692      	mov	sl, r2
   193c4:	2200      	movs	r2, #0
   193c6:	4648      	mov	r0, r9
   193c8:	680c      	ldr	r4, [r1, #0]
   193ca:	4084      	lsls	r4, r0
   193cc:	4650      	mov	r0, sl
   193ce:	4314      	orrs	r4, r2
   193d0:	601c      	str	r4, [r3, #0]
   193d2:	c904      	ldmia	r1!, {r2}
   193d4:	3304      	adds	r3, #4
   193d6:	40c2      	lsrs	r2, r0
   193d8:	428f      	cmp	r7, r1
   193da:	d8f4      	bhi.n	193c6 <__lshift+0x6a>
   193dc:	601a      	str	r2, [r3, #0]
   193de:	2a00      	cmp	r2, #0
   193e0:	d001      	beq.n	193e6 <__lshift+0x8a>
   193e2:	4645      	mov	r5, r8
   193e4:	3502      	adds	r5, #2
   193e6:	4663      	mov	r3, ip
   193e8:	3d01      	subs	r5, #1
   193ea:	611d      	str	r5, [r3, #16]
   193ec:	6873      	ldr	r3, [r6, #4]
   193ee:	4660      	mov	r0, ip
   193f0:	009a      	lsls	r2, r3, #2
   193f2:	465b      	mov	r3, fp
   193f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   193f6:	189b      	adds	r3, r3, r2
   193f8:	681a      	ldr	r2, [r3, #0]
   193fa:	6032      	str	r2, [r6, #0]
   193fc:	601e      	str	r6, [r3, #0]
   193fe:	bc3c      	pop	{r2, r3, r4, r5}
   19400:	4690      	mov	r8, r2
   19402:	4699      	mov	r9, r3
   19404:	46a2      	mov	sl, r4
   19406:	46ab      	mov	fp, r5
   19408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1940a:	c904      	ldmia	r1!, {r2}
   1940c:	c304      	stmia	r3!, {r2}
   1940e:	428f      	cmp	r7, r1
   19410:	d9e9      	bls.n	193e6 <__lshift+0x8a>
   19412:	c904      	ldmia	r1!, {r2}
   19414:	c304      	stmia	r3!, {r2}
   19416:	428f      	cmp	r7, r1
   19418:	d8f7      	bhi.n	1940a <__lshift+0xae>
   1941a:	e7e4      	b.n	193e6 <__lshift+0x8a>

0001941c <__mcmp>:
   1941c:	690a      	ldr	r2, [r1, #16]
   1941e:	6903      	ldr	r3, [r0, #16]
   19420:	b530      	push	{r4, r5, lr}
   19422:	0005      	movs	r5, r0
   19424:	1a98      	subs	r0, r3, r2
   19426:	d111      	bne.n	1944c <__mcmp+0x30>
   19428:	0092      	lsls	r2, r2, #2
   1942a:	3514      	adds	r5, #20
   1942c:	3114      	adds	r1, #20
   1942e:	18ab      	adds	r3, r5, r2
   19430:	1889      	adds	r1, r1, r2
   19432:	e001      	b.n	19438 <__mcmp+0x1c>
   19434:	429d      	cmp	r5, r3
   19436:	d209      	bcs.n	1944c <__mcmp+0x30>
   19438:	3b04      	subs	r3, #4
   1943a:	3904      	subs	r1, #4
   1943c:	681c      	ldr	r4, [r3, #0]
   1943e:	680a      	ldr	r2, [r1, #0]
   19440:	4294      	cmp	r4, r2
   19442:	d0f7      	beq.n	19434 <__mcmp+0x18>
   19444:	4294      	cmp	r4, r2
   19446:	4180      	sbcs	r0, r0
   19448:	2201      	movs	r2, #1
   1944a:	4310      	orrs	r0, r2
   1944c:	bd30      	pop	{r4, r5, pc}
   1944e:	46c0      	nop			; (mov r8, r8)

00019450 <__mdiff>:
   19450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19452:	4645      	mov	r5, r8
   19454:	46de      	mov	lr, fp
   19456:	4657      	mov	r7, sl
   19458:	464e      	mov	r6, r9
   1945a:	0014      	movs	r4, r2
   1945c:	690b      	ldr	r3, [r1, #16]
   1945e:	6912      	ldr	r2, [r2, #16]
   19460:	b5e0      	push	{r5, r6, r7, lr}
   19462:	4688      	mov	r8, r1
   19464:	1a9d      	subs	r5, r3, r2
   19466:	d11a      	bne.n	1949e <__mdiff+0x4e>
   19468:	000f      	movs	r7, r1
   1946a:	2114      	movs	r1, #20
   1946c:	468c      	mov	ip, r1
   1946e:	0092      	lsls	r2, r2, #2
   19470:	3714      	adds	r7, #20
   19472:	44a4      	add	ip, r4
   19474:	18bb      	adds	r3, r7, r2
   19476:	4462      	add	r2, ip
   19478:	e002      	b.n	19480 <__mdiff+0x30>
   1947a:	429f      	cmp	r7, r3
   1947c:	d300      	bcc.n	19480 <__mdiff+0x30>
   1947e:	e070      	b.n	19562 <__mdiff+0x112>
   19480:	3b04      	subs	r3, #4
   19482:	3a04      	subs	r2, #4
   19484:	681e      	ldr	r6, [r3, #0]
   19486:	6811      	ldr	r1, [r2, #0]
   19488:	428e      	cmp	r6, r1
   1948a:	d0f6      	beq.n	1947a <__mdiff+0x2a>
   1948c:	d300      	bcc.n	19490 <__mdiff+0x40>
   1948e:	e071      	b.n	19574 <__mdiff+0x124>
   19490:	4643      	mov	r3, r8
   19492:	003e      	movs	r6, r7
   19494:	46a0      	mov	r8, r4
   19496:	4667      	mov	r7, ip
   19498:	001c      	movs	r4, r3
   1949a:	2501      	movs	r5, #1
   1949c:	e006      	b.n	194ac <__mdiff+0x5c>
   1949e:	2d00      	cmp	r5, #0
   194a0:	db6a      	blt.n	19578 <__mdiff+0x128>
   194a2:	4647      	mov	r7, r8
   194a4:	0026      	movs	r6, r4
   194a6:	2500      	movs	r5, #0
   194a8:	3714      	adds	r7, #20
   194aa:	3614      	adds	r6, #20
   194ac:	4643      	mov	r3, r8
   194ae:	6859      	ldr	r1, [r3, #4]
   194b0:	f7ff fd80 	bl	18fb4 <_Balloc>
   194b4:	4643      	mov	r3, r8
   194b6:	4681      	mov	r9, r0
   194b8:	60c5      	str	r5, [r0, #12]
   194ba:	6918      	ldr	r0, [r3, #16]
   194bc:	464d      	mov	r5, r9
   194be:	0083      	lsls	r3, r0, #2
   194c0:	469c      	mov	ip, r3
   194c2:	6923      	ldr	r3, [r4, #16]
   194c4:	44bc      	add	ip, r7
   194c6:	009b      	lsls	r3, r3, #2
   194c8:	4698      	mov	r8, r3
   194ca:	2300      	movs	r3, #0
   194cc:	44b0      	add	r8, r6
   194ce:	3514      	adds	r5, #20
   194d0:	469a      	mov	sl, r3
   194d2:	e000      	b.n	194d6 <__mdiff+0x86>
   194d4:	0027      	movs	r7, r4
   194d6:	ce04      	ldmia	r6!, {r2}
   194d8:	003c      	movs	r4, r7
   194da:	4693      	mov	fp, r2
   194dc:	4659      	mov	r1, fp
   194de:	cc08      	ldmia	r4!, {r3}
   194e0:	0409      	lsls	r1, r1, #16
   194e2:	041a      	lsls	r2, r3, #16
   194e4:	0c12      	lsrs	r2, r2, #16
   194e6:	4452      	add	r2, sl
   194e8:	0c09      	lsrs	r1, r1, #16
   194ea:	1a52      	subs	r2, r2, r1
   194ec:	0c19      	lsrs	r1, r3, #16
   194ee:	465b      	mov	r3, fp
   194f0:	0c1b      	lsrs	r3, r3, #16
   194f2:	1acb      	subs	r3, r1, r3
   194f4:	1411      	asrs	r1, r2, #16
   194f6:	185b      	adds	r3, r3, r1
   194f8:	0412      	lsls	r2, r2, #16
   194fa:	1419      	asrs	r1, r3, #16
   194fc:	0c12      	lsrs	r2, r2, #16
   194fe:	041b      	lsls	r3, r3, #16
   19500:	468a      	mov	sl, r1
   19502:	4313      	orrs	r3, r2
   19504:	1d29      	adds	r1, r5, #4
   19506:	602b      	str	r3, [r5, #0]
   19508:	000d      	movs	r5, r1
   1950a:	45b0      	cmp	r8, r6
   1950c:	d8e2      	bhi.n	194d4 <__mdiff+0x84>
   1950e:	45a4      	cmp	ip, r4
   19510:	d916      	bls.n	19540 <__mdiff+0xf0>
   19512:	cc08      	ldmia	r4!, {r3}
   19514:	041a      	lsls	r2, r3, #16
   19516:	0c12      	lsrs	r2, r2, #16
   19518:	4452      	add	r2, sl
   1951a:	1416      	asrs	r6, r2, #16
   1951c:	0c1b      	lsrs	r3, r3, #16
   1951e:	199b      	adds	r3, r3, r6
   19520:	0412      	lsls	r2, r2, #16
   19522:	141e      	asrs	r6, r3, #16
   19524:	0c12      	lsrs	r2, r2, #16
   19526:	041b      	lsls	r3, r3, #16
   19528:	4313      	orrs	r3, r2
   1952a:	46b2      	mov	sl, r6
   1952c:	c508      	stmia	r5!, {r3}
   1952e:	45a4      	cmp	ip, r4
   19530:	d8ef      	bhi.n	19512 <__mdiff+0xc2>
   19532:	4662      	mov	r2, ip
   19534:	2403      	movs	r4, #3
   19536:	1bd2      	subs	r2, r2, r7
   19538:	3a05      	subs	r2, #5
   1953a:	43a2      	bics	r2, r4
   1953c:	3204      	adds	r2, #4
   1953e:	1889      	adds	r1, r1, r2
   19540:	3904      	subs	r1, #4
   19542:	2b00      	cmp	r3, #0
   19544:	d104      	bne.n	19550 <__mdiff+0x100>
   19546:	3904      	subs	r1, #4
   19548:	680b      	ldr	r3, [r1, #0]
   1954a:	3801      	subs	r0, #1
   1954c:	2b00      	cmp	r3, #0
   1954e:	d0fa      	beq.n	19546 <__mdiff+0xf6>
   19550:	464b      	mov	r3, r9
   19552:	6118      	str	r0, [r3, #16]
   19554:	4648      	mov	r0, r9
   19556:	bc3c      	pop	{r2, r3, r4, r5}
   19558:	4690      	mov	r8, r2
   1955a:	4699      	mov	r9, r3
   1955c:	46a2      	mov	sl, r4
   1955e:	46ab      	mov	fp, r5
   19560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19562:	2100      	movs	r1, #0
   19564:	f7ff fd26 	bl	18fb4 <_Balloc>
   19568:	2301      	movs	r3, #1
   1956a:	6103      	str	r3, [r0, #16]
   1956c:	2300      	movs	r3, #0
   1956e:	4681      	mov	r9, r0
   19570:	6143      	str	r3, [r0, #20]
   19572:	e7ef      	b.n	19554 <__mdiff+0x104>
   19574:	4666      	mov	r6, ip
   19576:	e799      	b.n	194ac <__mdiff+0x5c>
   19578:	0027      	movs	r7, r4
   1957a:	000e      	movs	r6, r1
   1957c:	46a0      	mov	r8, r4
   1957e:	3714      	adds	r7, #20
   19580:	3614      	adds	r6, #20
   19582:	000c      	movs	r4, r1
   19584:	2501      	movs	r5, #1
   19586:	e791      	b.n	194ac <__mdiff+0x5c>

00019588 <__d2b>:
   19588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1958a:	2101      	movs	r1, #1
   1958c:	001c      	movs	r4, r3
   1958e:	b083      	sub	sp, #12
   19590:	9e08      	ldr	r6, [sp, #32]
   19592:	0015      	movs	r5, r2
   19594:	f7ff fd0e 	bl	18fb4 <_Balloc>
   19598:	0323      	lsls	r3, r4, #12
   1959a:	0064      	lsls	r4, r4, #1
   1959c:	0007      	movs	r7, r0
   1959e:	0b1b      	lsrs	r3, r3, #12
   195a0:	0d64      	lsrs	r4, r4, #21
   195a2:	d002      	beq.n	195aa <__d2b+0x22>
   195a4:	2280      	movs	r2, #128	; 0x80
   195a6:	0352      	lsls	r2, r2, #13
   195a8:	4313      	orrs	r3, r2
   195aa:	9301      	str	r3, [sp, #4]
   195ac:	2d00      	cmp	r5, #0
   195ae:	d019      	beq.n	195e4 <__d2b+0x5c>
   195b0:	4668      	mov	r0, sp
   195b2:	9500      	str	r5, [sp, #0]
   195b4:	f7ff fd90 	bl	190d8 <__lo0bits>
   195b8:	2800      	cmp	r0, #0
   195ba:	d130      	bne.n	1961e <__d2b+0x96>
   195bc:	9b00      	ldr	r3, [sp, #0]
   195be:	617b      	str	r3, [r7, #20]
   195c0:	9b01      	ldr	r3, [sp, #4]
   195c2:	61bb      	str	r3, [r7, #24]
   195c4:	1e5a      	subs	r2, r3, #1
   195c6:	4193      	sbcs	r3, r2
   195c8:	1c5d      	adds	r5, r3, #1
   195ca:	613d      	str	r5, [r7, #16]
   195cc:	2c00      	cmp	r4, #0
   195ce:	d014      	beq.n	195fa <__d2b+0x72>
   195d0:	4b19      	ldr	r3, [pc, #100]	; (19638 <__d2b+0xb0>)
   195d2:	469c      	mov	ip, r3
   195d4:	2335      	movs	r3, #53	; 0x35
   195d6:	4464      	add	r4, ip
   195d8:	1824      	adds	r4, r4, r0
   195da:	1a18      	subs	r0, r3, r0
   195dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195de:	6034      	str	r4, [r6, #0]
   195e0:	6018      	str	r0, [r3, #0]
   195e2:	e019      	b.n	19618 <__d2b+0x90>
   195e4:	a801      	add	r0, sp, #4
   195e6:	f7ff fd77 	bl	190d8 <__lo0bits>
   195ea:	9b01      	ldr	r3, [sp, #4]
   195ec:	3020      	adds	r0, #32
   195ee:	617b      	str	r3, [r7, #20]
   195f0:	2301      	movs	r3, #1
   195f2:	2501      	movs	r5, #1
   195f4:	613b      	str	r3, [r7, #16]
   195f6:	2c00      	cmp	r4, #0
   195f8:	d1ea      	bne.n	195d0 <__d2b+0x48>
   195fa:	4b10      	ldr	r3, [pc, #64]	; (1963c <__d2b+0xb4>)
   195fc:	469c      	mov	ip, r3
   195fe:	4b10      	ldr	r3, [pc, #64]	; (19640 <__d2b+0xb8>)
   19600:	4460      	add	r0, ip
   19602:	18eb      	adds	r3, r5, r3
   19604:	009b      	lsls	r3, r3, #2
   19606:	18fb      	adds	r3, r7, r3
   19608:	6030      	str	r0, [r6, #0]
   1960a:	6958      	ldr	r0, [r3, #20]
   1960c:	f7ff fd4a 	bl	190a4 <__hi0bits>
   19610:	016b      	lsls	r3, r5, #5
   19612:	1a18      	subs	r0, r3, r0
   19614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19616:	6018      	str	r0, [r3, #0]
   19618:	0038      	movs	r0, r7
   1961a:	b003      	add	sp, #12
   1961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1961e:	9b01      	ldr	r3, [sp, #4]
   19620:	2220      	movs	r2, #32
   19622:	0019      	movs	r1, r3
   19624:	1a12      	subs	r2, r2, r0
   19626:	4091      	lsls	r1, r2
   19628:	000a      	movs	r2, r1
   1962a:	40c3      	lsrs	r3, r0
   1962c:	9900      	ldr	r1, [sp, #0]
   1962e:	9301      	str	r3, [sp, #4]
   19630:	430a      	orrs	r2, r1
   19632:	617a      	str	r2, [r7, #20]
   19634:	e7c5      	b.n	195c2 <__d2b+0x3a>
   19636:	46c0      	nop			; (mov r8, r8)
   19638:	fffffbcd 	.word	0xfffffbcd
   1963c:	fffffbce 	.word	0xfffffbce
   19640:	3fffffff 	.word	0x3fffffff

00019644 <_realloc_r>:
   19644:	b5f0      	push	{r4, r5, r6, r7, lr}
   19646:	464e      	mov	r6, r9
   19648:	4645      	mov	r5, r8
   1964a:	46de      	mov	lr, fp
   1964c:	4657      	mov	r7, sl
   1964e:	b5e0      	push	{r5, r6, r7, lr}
   19650:	b085      	sub	sp, #20
   19652:	9001      	str	r0, [sp, #4]
   19654:	000e      	movs	r6, r1
   19656:	0015      	movs	r5, r2
   19658:	2900      	cmp	r1, #0
   1965a:	d100      	bne.n	1965e <_realloc_r+0x1a>
   1965c:	e09e      	b.n	1979c <_realloc_r+0x158>
   1965e:	0037      	movs	r7, r6
   19660:	9801      	ldr	r0, [sp, #4]
   19662:	3f08      	subs	r7, #8
   19664:	f7ff fc96 	bl	18f94 <__malloc_lock>
   19668:	687a      	ldr	r2, [r7, #4]
   1966a:	2303      	movs	r3, #3
   1966c:	0014      	movs	r4, r2
   1966e:	439c      	bics	r4, r3
   19670:	002b      	movs	r3, r5
   19672:	330b      	adds	r3, #11
   19674:	46b9      	mov	r9, r7
   19676:	2b16      	cmp	r3, #22
   19678:	d847      	bhi.n	1970a <_realloc_r+0xc6>
   1967a:	2110      	movs	r1, #16
   1967c:	2310      	movs	r3, #16
   1967e:	4688      	mov	r8, r1
   19680:	4545      	cmp	r5, r8
   19682:	d846      	bhi.n	19712 <_realloc_r+0xce>
   19684:	429c      	cmp	r4, r3
   19686:	da49      	bge.n	1971c <_realloc_r+0xd8>
   19688:	49cc      	ldr	r1, [pc, #816]	; (199bc <_realloc_r+0x378>)
   1968a:	1938      	adds	r0, r7, r4
   1968c:	468b      	mov	fp, r1
   1968e:	6889      	ldr	r1, [r1, #8]
   19690:	9002      	str	r0, [sp, #8]
   19692:	4288      	cmp	r0, r1
   19694:	d100      	bne.n	19698 <_realloc_r+0x54>
   19696:	e0c2      	b.n	1981e <_realloc_r+0x1da>
   19698:	2101      	movs	r1, #1
   1969a:	468a      	mov	sl, r1
   1969c:	6840      	ldr	r0, [r0, #4]
   1969e:	0001      	movs	r1, r0
   196a0:	9003      	str	r0, [sp, #12]
   196a2:	4650      	mov	r0, sl
   196a4:	4381      	bics	r1, r0
   196a6:	468c      	mov	ip, r1
   196a8:	9902      	ldr	r1, [sp, #8]
   196aa:	468b      	mov	fp, r1
   196ac:	44dc      	add	ip, fp
   196ae:	4661      	mov	r1, ip
   196b0:	6849      	ldr	r1, [r1, #4]
   196b2:	4201      	tst	r1, r0
   196b4:	d04d      	beq.n	19752 <_realloc_r+0x10e>
   196b6:	4210      	tst	r0, r2
   196b8:	d100      	bne.n	196bc <_realloc_r+0x78>
   196ba:	e0a2      	b.n	19802 <_realloc_r+0x1be>
   196bc:	0029      	movs	r1, r5
   196be:	9801      	ldr	r0, [sp, #4]
   196c0:	f7ff f924 	bl	1890c <_malloc_r>
   196c4:	1e05      	subs	r5, r0, #0
   196c6:	d039      	beq.n	1973c <_realloc_r+0xf8>
   196c8:	2301      	movs	r3, #1
   196ca:	0002      	movs	r2, r0
   196cc:	6879      	ldr	r1, [r7, #4]
   196ce:	3a08      	subs	r2, #8
   196d0:	4399      	bics	r1, r3
   196d2:	187f      	adds	r7, r7, r1
   196d4:	42ba      	cmp	r2, r7
   196d6:	d100      	bne.n	196da <_realloc_r+0x96>
   196d8:	e12e      	b.n	19938 <_realloc_r+0x2f4>
   196da:	1f22      	subs	r2, r4, #4
   196dc:	2a24      	cmp	r2, #36	; 0x24
   196de:	d900      	bls.n	196e2 <_realloc_r+0x9e>
   196e0:	e114      	b.n	1990c <_realloc_r+0x2c8>
   196e2:	2a13      	cmp	r2, #19
   196e4:	d900      	bls.n	196e8 <_realloc_r+0xa4>
   196e6:	e0e8      	b.n	198ba <_realloc_r+0x276>
   196e8:	0003      	movs	r3, r0
   196ea:	0032      	movs	r2, r6
   196ec:	6811      	ldr	r1, [r2, #0]
   196ee:	6019      	str	r1, [r3, #0]
   196f0:	6851      	ldr	r1, [r2, #4]
   196f2:	6059      	str	r1, [r3, #4]
   196f4:	6892      	ldr	r2, [r2, #8]
   196f6:	609a      	str	r2, [r3, #8]
   196f8:	9c01      	ldr	r4, [sp, #4]
   196fa:	0031      	movs	r1, r6
   196fc:	0020      	movs	r0, r4
   196fe:	f7fe fde7 	bl	182d0 <_free_r>
   19702:	0020      	movs	r0, r4
   19704:	f7ff fc4e 	bl	18fa4 <__malloc_unlock>
   19708:	e01b      	b.n	19742 <_realloc_r+0xfe>
   1970a:	2107      	movs	r1, #7
   1970c:	438b      	bics	r3, r1
   1970e:	4698      	mov	r8, r3
   19710:	d5b6      	bpl.n	19680 <_realloc_r+0x3c>
   19712:	230c      	movs	r3, #12
   19714:	9a01      	ldr	r2, [sp, #4]
   19716:	2500      	movs	r5, #0
   19718:	6013      	str	r3, [r2, #0]
   1971a:	e012      	b.n	19742 <_realloc_r+0xfe>
   1971c:	0035      	movs	r5, r6
   1971e:	4643      	mov	r3, r8
   19720:	1ae3      	subs	r3, r4, r3
   19722:	2b0f      	cmp	r3, #15
   19724:	d825      	bhi.n	19772 <_realloc_r+0x12e>
   19726:	464b      	mov	r3, r9
   19728:	2201      	movs	r2, #1
   1972a:	4649      	mov	r1, r9
   1972c:	685b      	ldr	r3, [r3, #4]
   1972e:	4013      	ands	r3, r2
   19730:	4323      	orrs	r3, r4
   19732:	604b      	str	r3, [r1, #4]
   19734:	444c      	add	r4, r9
   19736:	6863      	ldr	r3, [r4, #4]
   19738:	431a      	orrs	r2, r3
   1973a:	6062      	str	r2, [r4, #4]
   1973c:	9801      	ldr	r0, [sp, #4]
   1973e:	f7ff fc31 	bl	18fa4 <__malloc_unlock>
   19742:	0028      	movs	r0, r5
   19744:	b005      	add	sp, #20
   19746:	bc3c      	pop	{r2, r3, r4, r5}
   19748:	4690      	mov	r8, r2
   1974a:	4699      	mov	r9, r3
   1974c:	46a2      	mov	sl, r4
   1974e:	46ab      	mov	fp, r5
   19750:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19752:	2103      	movs	r1, #3
   19754:	9803      	ldr	r0, [sp, #12]
   19756:	468c      	mov	ip, r1
   19758:	4388      	bics	r0, r1
   1975a:	1821      	adds	r1, r4, r0
   1975c:	468b      	mov	fp, r1
   1975e:	4299      	cmp	r1, r3
   19760:	db21      	blt.n	197a6 <_realloc_r+0x162>
   19762:	9a02      	ldr	r2, [sp, #8]
   19764:	0035      	movs	r5, r6
   19766:	68d3      	ldr	r3, [r2, #12]
   19768:	6892      	ldr	r2, [r2, #8]
   1976a:	465c      	mov	r4, fp
   1976c:	60d3      	str	r3, [r2, #12]
   1976e:	609a      	str	r2, [r3, #8]
   19770:	e7d5      	b.n	1971e <_realloc_r+0xda>
   19772:	464a      	mov	r2, r9
   19774:	2001      	movs	r0, #1
   19776:	4646      	mov	r6, r8
   19778:	6852      	ldr	r2, [r2, #4]
   1977a:	4649      	mov	r1, r9
   1977c:	4002      	ands	r2, r0
   1977e:	4332      	orrs	r2, r6
   19780:	464e      	mov	r6, r9
   19782:	4441      	add	r1, r8
   19784:	4303      	orrs	r3, r0
   19786:	6072      	str	r2, [r6, #4]
   19788:	444c      	add	r4, r9
   1978a:	604b      	str	r3, [r1, #4]
   1978c:	6863      	ldr	r3, [r4, #4]
   1978e:	3108      	adds	r1, #8
   19790:	4318      	orrs	r0, r3
   19792:	6060      	str	r0, [r4, #4]
   19794:	9801      	ldr	r0, [sp, #4]
   19796:	f7fe fd9b 	bl	182d0 <_free_r>
   1979a:	e7cf      	b.n	1973c <_realloc_r+0xf8>
   1979c:	0011      	movs	r1, r2
   1979e:	f7ff f8b5 	bl	1890c <_malloc_r>
   197a2:	0005      	movs	r5, r0
   197a4:	e7cd      	b.n	19742 <_realloc_r+0xfe>
   197a6:	4651      	mov	r1, sl
   197a8:	4211      	tst	r1, r2
   197aa:	d000      	beq.n	197ae <_realloc_r+0x16a>
   197ac:	e786      	b.n	196bc <_realloc_r+0x78>
   197ae:	4661      	mov	r1, ip
   197b0:	683a      	ldr	r2, [r7, #0]
   197b2:	1aba      	subs	r2, r7, r2
   197b4:	4692      	mov	sl, r2
   197b6:	6852      	ldr	r2, [r2, #4]
   197b8:	438a      	bics	r2, r1
   197ba:	1880      	adds	r0, r0, r2
   197bc:	4683      	mov	fp, r0
   197be:	44a3      	add	fp, r4
   197c0:	459b      	cmp	fp, r3
   197c2:	db26      	blt.n	19812 <_realloc_r+0x1ce>
   197c4:	9a02      	ldr	r2, [sp, #8]
   197c6:	68d3      	ldr	r3, [r2, #12]
   197c8:	6892      	ldr	r2, [r2, #8]
   197ca:	60d3      	str	r3, [r2, #12]
   197cc:	609a      	str	r2, [r3, #8]
   197ce:	4653      	mov	r3, sl
   197d0:	4652      	mov	r2, sl
   197d2:	4655      	mov	r5, sl
   197d4:	6892      	ldr	r2, [r2, #8]
   197d6:	68db      	ldr	r3, [r3, #12]
   197d8:	3508      	adds	r5, #8
   197da:	60d3      	str	r3, [r2, #12]
   197dc:	609a      	str	r2, [r3, #8]
   197de:	1f22      	subs	r2, r4, #4
   197e0:	2a24      	cmp	r2, #36	; 0x24
   197e2:	d900      	bls.n	197e6 <_realloc_r+0x1a2>
   197e4:	e096      	b.n	19914 <_realloc_r+0x2d0>
   197e6:	2a13      	cmp	r2, #19
   197e8:	d972      	bls.n	198d0 <_realloc_r+0x28c>
   197ea:	4653      	mov	r3, sl
   197ec:	6831      	ldr	r1, [r6, #0]
   197ee:	6099      	str	r1, [r3, #8]
   197f0:	6871      	ldr	r1, [r6, #4]
   197f2:	60d9      	str	r1, [r3, #12]
   197f4:	2a1b      	cmp	r2, #27
   197f6:	d900      	bls.n	197fa <_realloc_r+0x1b6>
   197f8:	e0a4      	b.n	19944 <_realloc_r+0x300>
   197fa:	0032      	movs	r2, r6
   197fc:	3310      	adds	r3, #16
   197fe:	3208      	adds	r2, #8
   19800:	e068      	b.n	198d4 <_realloc_r+0x290>
   19802:	683a      	ldr	r2, [r7, #0]
   19804:	1aba      	subs	r2, r7, r2
   19806:	4692      	mov	sl, r2
   19808:	4651      	mov	r1, sl
   1980a:	2203      	movs	r2, #3
   1980c:	6849      	ldr	r1, [r1, #4]
   1980e:	4391      	bics	r1, r2
   19810:	000a      	movs	r2, r1
   19812:	4693      	mov	fp, r2
   19814:	44a3      	add	fp, r4
   19816:	459b      	cmp	fp, r3
   19818:	da00      	bge.n	1981c <_realloc_r+0x1d8>
   1981a:	e74f      	b.n	196bc <_realloc_r+0x78>
   1981c:	e7d7      	b.n	197ce <_realloc_r+0x18a>
   1981e:	2003      	movs	r0, #3
   19820:	9902      	ldr	r1, [sp, #8]
   19822:	4684      	mov	ip, r0
   19824:	6849      	ldr	r1, [r1, #4]
   19826:	4381      	bics	r1, r0
   19828:	4640      	mov	r0, r8
   1982a:	1909      	adds	r1, r1, r4
   1982c:	3010      	adds	r0, #16
   1982e:	9002      	str	r0, [sp, #8]
   19830:	4281      	cmp	r1, r0
   19832:	da58      	bge.n	198e6 <_realloc_r+0x2a2>
   19834:	07d2      	lsls	r2, r2, #31
   19836:	d500      	bpl.n	1983a <_realloc_r+0x1f6>
   19838:	e740      	b.n	196bc <_realloc_r+0x78>
   1983a:	4660      	mov	r0, ip
   1983c:	683a      	ldr	r2, [r7, #0]
   1983e:	1aba      	subs	r2, r7, r2
   19840:	4692      	mov	sl, r2
   19842:	6852      	ldr	r2, [r2, #4]
   19844:	4382      	bics	r2, r0
   19846:	9802      	ldr	r0, [sp, #8]
   19848:	1851      	adds	r1, r2, r1
   1984a:	9103      	str	r1, [sp, #12]
   1984c:	4288      	cmp	r0, r1
   1984e:	dce0      	bgt.n	19812 <_realloc_r+0x1ce>
   19850:	4653      	mov	r3, sl
   19852:	4652      	mov	r2, sl
   19854:	4655      	mov	r5, sl
   19856:	6892      	ldr	r2, [r2, #8]
   19858:	68db      	ldr	r3, [r3, #12]
   1985a:	3508      	adds	r5, #8
   1985c:	60d3      	str	r3, [r2, #12]
   1985e:	609a      	str	r2, [r3, #8]
   19860:	1f22      	subs	r2, r4, #4
   19862:	2a24      	cmp	r2, #36	; 0x24
   19864:	d900      	bls.n	19868 <_realloc_r+0x224>
   19866:	e08e      	b.n	19986 <_realloc_r+0x342>
   19868:	2a13      	cmp	r2, #19
   1986a:	d800      	bhi.n	1986e <_realloc_r+0x22a>
   1986c:	e088      	b.n	19980 <_realloc_r+0x33c>
   1986e:	4653      	mov	r3, sl
   19870:	6831      	ldr	r1, [r6, #0]
   19872:	6099      	str	r1, [r3, #8]
   19874:	6871      	ldr	r1, [r6, #4]
   19876:	60d9      	str	r1, [r3, #12]
   19878:	2a1b      	cmp	r2, #27
   1987a:	d900      	bls.n	1987e <_realloc_r+0x23a>
   1987c:	e088      	b.n	19990 <_realloc_r+0x34c>
   1987e:	0032      	movs	r2, r6
   19880:	3310      	adds	r3, #16
   19882:	3208      	adds	r2, #8
   19884:	6811      	ldr	r1, [r2, #0]
   19886:	6019      	str	r1, [r3, #0]
   19888:	6851      	ldr	r1, [r2, #4]
   1988a:	6059      	str	r1, [r3, #4]
   1988c:	6892      	ldr	r2, [r2, #8]
   1988e:	609a      	str	r2, [r3, #8]
   19890:	4651      	mov	r1, sl
   19892:	465b      	mov	r3, fp
   19894:	4642      	mov	r2, r8
   19896:	4441      	add	r1, r8
   19898:	6099      	str	r1, [r3, #8]
   1989a:	9b03      	ldr	r3, [sp, #12]
   1989c:	9801      	ldr	r0, [sp, #4]
   1989e:	1a9a      	subs	r2, r3, r2
   198a0:	2301      	movs	r3, #1
   198a2:	431a      	orrs	r2, r3
   198a4:	604a      	str	r2, [r1, #4]
   198a6:	4652      	mov	r2, sl
   198a8:	6852      	ldr	r2, [r2, #4]
   198aa:	4013      	ands	r3, r2
   198ac:	4642      	mov	r2, r8
   198ae:	4313      	orrs	r3, r2
   198b0:	4652      	mov	r2, sl
   198b2:	6053      	str	r3, [r2, #4]
   198b4:	f7ff fb76 	bl	18fa4 <__malloc_unlock>
   198b8:	e743      	b.n	19742 <_realloc_r+0xfe>
   198ba:	6833      	ldr	r3, [r6, #0]
   198bc:	6003      	str	r3, [r0, #0]
   198be:	6873      	ldr	r3, [r6, #4]
   198c0:	6043      	str	r3, [r0, #4]
   198c2:	2a1b      	cmp	r2, #27
   198c4:	d82d      	bhi.n	19922 <_realloc_r+0x2de>
   198c6:	0003      	movs	r3, r0
   198c8:	0032      	movs	r2, r6
   198ca:	3308      	adds	r3, #8
   198cc:	3208      	adds	r2, #8
   198ce:	e70d      	b.n	196ec <_realloc_r+0xa8>
   198d0:	002b      	movs	r3, r5
   198d2:	0032      	movs	r2, r6
   198d4:	6811      	ldr	r1, [r2, #0]
   198d6:	465c      	mov	r4, fp
   198d8:	6019      	str	r1, [r3, #0]
   198da:	6851      	ldr	r1, [r2, #4]
   198dc:	46d1      	mov	r9, sl
   198de:	6059      	str	r1, [r3, #4]
   198e0:	6892      	ldr	r2, [r2, #8]
   198e2:	609a      	str	r2, [r3, #8]
   198e4:	e71b      	b.n	1971e <_realloc_r+0xda>
   198e6:	4643      	mov	r3, r8
   198e8:	18fa      	adds	r2, r7, r3
   198ea:	465b      	mov	r3, fp
   198ec:	609a      	str	r2, [r3, #8]
   198ee:	4643      	mov	r3, r8
   198f0:	1ac9      	subs	r1, r1, r3
   198f2:	2301      	movs	r3, #1
   198f4:	4319      	orrs	r1, r3
   198f6:	6051      	str	r1, [r2, #4]
   198f8:	687a      	ldr	r2, [r7, #4]
   198fa:	9801      	ldr	r0, [sp, #4]
   198fc:	4013      	ands	r3, r2
   198fe:	4642      	mov	r2, r8
   19900:	4313      	orrs	r3, r2
   19902:	607b      	str	r3, [r7, #4]
   19904:	f7ff fb4e 	bl	18fa4 <__malloc_unlock>
   19908:	0035      	movs	r5, r6
   1990a:	e71a      	b.n	19742 <_realloc_r+0xfe>
   1990c:	0031      	movs	r1, r6
   1990e:	f7ff faf1 	bl	18ef4 <memmove>
   19912:	e6f1      	b.n	196f8 <_realloc_r+0xb4>
   19914:	0031      	movs	r1, r6
   19916:	0028      	movs	r0, r5
   19918:	f7ff faec 	bl	18ef4 <memmove>
   1991c:	465c      	mov	r4, fp
   1991e:	46d1      	mov	r9, sl
   19920:	e6fd      	b.n	1971e <_realloc_r+0xda>
   19922:	68b3      	ldr	r3, [r6, #8]
   19924:	6083      	str	r3, [r0, #8]
   19926:	68f3      	ldr	r3, [r6, #12]
   19928:	60c3      	str	r3, [r0, #12]
   1992a:	2a24      	cmp	r2, #36	; 0x24
   1992c:	d015      	beq.n	1995a <_realloc_r+0x316>
   1992e:	0003      	movs	r3, r0
   19930:	0032      	movs	r2, r6
   19932:	3310      	adds	r3, #16
   19934:	3210      	adds	r2, #16
   19936:	e6d9      	b.n	196ec <_realloc_r+0xa8>
   19938:	6853      	ldr	r3, [r2, #4]
   1993a:	2203      	movs	r2, #3
   1993c:	4393      	bics	r3, r2
   1993e:	18e4      	adds	r4, r4, r3
   19940:	0035      	movs	r5, r6
   19942:	e6ec      	b.n	1971e <_realloc_r+0xda>
   19944:	4653      	mov	r3, sl
   19946:	68b1      	ldr	r1, [r6, #8]
   19948:	6119      	str	r1, [r3, #16]
   1994a:	68f1      	ldr	r1, [r6, #12]
   1994c:	6159      	str	r1, [r3, #20]
   1994e:	2a24      	cmp	r2, #36	; 0x24
   19950:	d00c      	beq.n	1996c <_realloc_r+0x328>
   19952:	0032      	movs	r2, r6
   19954:	3318      	adds	r3, #24
   19956:	3210      	adds	r2, #16
   19958:	e7bc      	b.n	198d4 <_realloc_r+0x290>
   1995a:	6933      	ldr	r3, [r6, #16]
   1995c:	0032      	movs	r2, r6
   1995e:	6103      	str	r3, [r0, #16]
   19960:	0003      	movs	r3, r0
   19962:	6971      	ldr	r1, [r6, #20]
   19964:	3318      	adds	r3, #24
   19966:	3218      	adds	r2, #24
   19968:	6141      	str	r1, [r0, #20]
   1996a:	e6bf      	b.n	196ec <_realloc_r+0xa8>
   1996c:	4653      	mov	r3, sl
   1996e:	6932      	ldr	r2, [r6, #16]
   19970:	4651      	mov	r1, sl
   19972:	619a      	str	r2, [r3, #24]
   19974:	0032      	movs	r2, r6
   19976:	6970      	ldr	r0, [r6, #20]
   19978:	3320      	adds	r3, #32
   1997a:	3218      	adds	r2, #24
   1997c:	61c8      	str	r0, [r1, #28]
   1997e:	e7a9      	b.n	198d4 <_realloc_r+0x290>
   19980:	002b      	movs	r3, r5
   19982:	0032      	movs	r2, r6
   19984:	e77e      	b.n	19884 <_realloc_r+0x240>
   19986:	0031      	movs	r1, r6
   19988:	0028      	movs	r0, r5
   1998a:	f7ff fab3 	bl	18ef4 <memmove>
   1998e:	e77f      	b.n	19890 <_realloc_r+0x24c>
   19990:	4653      	mov	r3, sl
   19992:	68b1      	ldr	r1, [r6, #8]
   19994:	6119      	str	r1, [r3, #16]
   19996:	68f1      	ldr	r1, [r6, #12]
   19998:	6159      	str	r1, [r3, #20]
   1999a:	2a24      	cmp	r2, #36	; 0x24
   1999c:	d003      	beq.n	199a6 <_realloc_r+0x362>
   1999e:	0032      	movs	r2, r6
   199a0:	3318      	adds	r3, #24
   199a2:	3210      	adds	r2, #16
   199a4:	e76e      	b.n	19884 <_realloc_r+0x240>
   199a6:	4653      	mov	r3, sl
   199a8:	6932      	ldr	r2, [r6, #16]
   199aa:	4651      	mov	r1, sl
   199ac:	619a      	str	r2, [r3, #24]
   199ae:	0032      	movs	r2, r6
   199b0:	6970      	ldr	r0, [r6, #20]
   199b2:	3320      	adds	r3, #32
   199b4:	3218      	adds	r2, #24
   199b6:	61c8      	str	r0, [r1, #28]
   199b8:	e764      	b.n	19884 <_realloc_r+0x240>
   199ba:	46c0      	nop			; (mov r8, r8)
   199bc:	2000046c 	.word	0x2000046c

000199c0 <_sbrk_r>:
   199c0:	2300      	movs	r3, #0
   199c2:	b570      	push	{r4, r5, r6, lr}
   199c4:	4c06      	ldr	r4, [pc, #24]	; (199e0 <_sbrk_r+0x20>)
   199c6:	0005      	movs	r5, r0
   199c8:	0008      	movs	r0, r1
   199ca:	6023      	str	r3, [r4, #0]
   199cc:	f7ea f81a 	bl	3a04 <_sbrk>
   199d0:	1c43      	adds	r3, r0, #1
   199d2:	d000      	beq.n	199d6 <_sbrk_r+0x16>
   199d4:	bd70      	pop	{r4, r5, r6, pc}
   199d6:	6823      	ldr	r3, [r4, #0]
   199d8:	2b00      	cmp	r3, #0
   199da:	d0fb      	beq.n	199d4 <_sbrk_r+0x14>
   199dc:	602b      	str	r3, [r5, #0]
   199de:	e7f9      	b.n	199d4 <_sbrk_r+0x14>
   199e0:	20001c88 	.word	0x20001c88

000199e4 <__sread>:
   199e4:	b570      	push	{r4, r5, r6, lr}
   199e6:	000c      	movs	r4, r1
   199e8:	250e      	movs	r5, #14
   199ea:	5f49      	ldrsh	r1, [r1, r5]
   199ec:	f000 fb30 	bl	1a050 <_read_r>
   199f0:	2800      	cmp	r0, #0
   199f2:	db03      	blt.n	199fc <__sread+0x18>
   199f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   199f6:	181b      	adds	r3, r3, r0
   199f8:	6523      	str	r3, [r4, #80]	; 0x50
   199fa:	bd70      	pop	{r4, r5, r6, pc}
   199fc:	89a3      	ldrh	r3, [r4, #12]
   199fe:	4a02      	ldr	r2, [pc, #8]	; (19a08 <__sread+0x24>)
   19a00:	4013      	ands	r3, r2
   19a02:	81a3      	strh	r3, [r4, #12]
   19a04:	e7f9      	b.n	199fa <__sread+0x16>
   19a06:	46c0      	nop			; (mov r8, r8)
   19a08:	ffffefff 	.word	0xffffefff

00019a0c <__swrite>:
   19a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a0e:	0016      	movs	r6, r2
   19a10:	001f      	movs	r7, r3
   19a12:	220c      	movs	r2, #12
   19a14:	5e8b      	ldrsh	r3, [r1, r2]
   19a16:	0005      	movs	r5, r0
   19a18:	000c      	movs	r4, r1
   19a1a:	05da      	lsls	r2, r3, #23
   19a1c:	d507      	bpl.n	19a2e <__swrite+0x22>
   19a1e:	230e      	movs	r3, #14
   19a20:	5ec9      	ldrsh	r1, [r1, r3]
   19a22:	2200      	movs	r2, #0
   19a24:	2302      	movs	r3, #2
   19a26:	f000 fae9 	bl	19ffc <_lseek_r>
   19a2a:	220c      	movs	r2, #12
   19a2c:	5ea3      	ldrsh	r3, [r4, r2]
   19a2e:	4a05      	ldr	r2, [pc, #20]	; (19a44 <__swrite+0x38>)
   19a30:	0028      	movs	r0, r5
   19a32:	4013      	ands	r3, r2
   19a34:	81a3      	strh	r3, [r4, #12]
   19a36:	0032      	movs	r2, r6
   19a38:	230e      	movs	r3, #14
   19a3a:	5ee1      	ldrsh	r1, [r4, r3]
   19a3c:	003b      	movs	r3, r7
   19a3e:	f000 f8fb 	bl	19c38 <_write_r>
   19a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a44:	ffffefff 	.word	0xffffefff

00019a48 <__sseek>:
   19a48:	b570      	push	{r4, r5, r6, lr}
   19a4a:	000c      	movs	r4, r1
   19a4c:	250e      	movs	r5, #14
   19a4e:	5f49      	ldrsh	r1, [r1, r5]
   19a50:	f000 fad4 	bl	19ffc <_lseek_r>
   19a54:	1c43      	adds	r3, r0, #1
   19a56:	d006      	beq.n	19a66 <__sseek+0x1e>
   19a58:	2380      	movs	r3, #128	; 0x80
   19a5a:	89a2      	ldrh	r2, [r4, #12]
   19a5c:	015b      	lsls	r3, r3, #5
   19a5e:	4313      	orrs	r3, r2
   19a60:	81a3      	strh	r3, [r4, #12]
   19a62:	6520      	str	r0, [r4, #80]	; 0x50
   19a64:	bd70      	pop	{r4, r5, r6, pc}
   19a66:	89a3      	ldrh	r3, [r4, #12]
   19a68:	4a01      	ldr	r2, [pc, #4]	; (19a70 <__sseek+0x28>)
   19a6a:	4013      	ands	r3, r2
   19a6c:	81a3      	strh	r3, [r4, #12]
   19a6e:	e7f9      	b.n	19a64 <__sseek+0x1c>
   19a70:	ffffefff 	.word	0xffffefff

00019a74 <__sclose>:
   19a74:	b510      	push	{r4, lr}
   19a76:	230e      	movs	r3, #14
   19a78:	5ec9      	ldrsh	r1, [r1, r3]
   19a7a:	f000 f997 	bl	19dac <_close_r>
   19a7e:	bd10      	pop	{r4, pc}

00019a80 <__ssprint_r>:
   19a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a82:	4657      	mov	r7, sl
   19a84:	464e      	mov	r6, r9
   19a86:	46de      	mov	lr, fp
   19a88:	4645      	mov	r5, r8
   19a8a:	b5e0      	push	{r5, r6, r7, lr}
   19a8c:	6893      	ldr	r3, [r2, #8]
   19a8e:	b083      	sub	sp, #12
   19a90:	9001      	str	r0, [sp, #4]
   19a92:	000e      	movs	r6, r1
   19a94:	4692      	mov	sl, r2
   19a96:	2b00      	cmp	r3, #0
   19a98:	d070      	beq.n	19b7c <__ssprint_r+0xfc>
   19a9a:	688d      	ldr	r5, [r1, #8]
   19a9c:	6813      	ldr	r3, [r2, #0]
   19a9e:	002c      	movs	r4, r5
   19aa0:	6808      	ldr	r0, [r1, #0]
   19aa2:	001d      	movs	r5, r3
   19aa4:	e046      	b.n	19b34 <__ssprint_r+0xb4>
   19aa6:	2290      	movs	r2, #144	; 0x90
   19aa8:	89b3      	ldrh	r3, [r6, #12]
   19aaa:	00d2      	lsls	r2, r2, #3
   19aac:	4213      	tst	r3, r2
   19aae:	d030      	beq.n	19b12 <__ssprint_r+0x92>
   19ab0:	6931      	ldr	r1, [r6, #16]
   19ab2:	1a42      	subs	r2, r0, r1
   19ab4:	4693      	mov	fp, r2
   19ab6:	6970      	ldr	r0, [r6, #20]
   19ab8:	0042      	lsls	r2, r0, #1
   19aba:	1812      	adds	r2, r2, r0
   19abc:	0fd0      	lsrs	r0, r2, #31
   19abe:	1882      	adds	r2, r0, r2
   19ac0:	1052      	asrs	r2, r2, #1
   19ac2:	4690      	mov	r8, r2
   19ac4:	465a      	mov	r2, fp
   19ac6:	1c50      	adds	r0, r2, #1
   19ac8:	19c0      	adds	r0, r0, r7
   19aca:	4642      	mov	r2, r8
   19acc:	4540      	cmp	r0, r8
   19ace:	d901      	bls.n	19ad4 <__ssprint_r+0x54>
   19ad0:	4680      	mov	r8, r0
   19ad2:	0002      	movs	r2, r0
   19ad4:	2080      	movs	r0, #128	; 0x80
   19ad6:	00c0      	lsls	r0, r0, #3
   19ad8:	4203      	tst	r3, r0
   19ada:	d038      	beq.n	19b4e <__ssprint_r+0xce>
   19adc:	0011      	movs	r1, r2
   19ade:	9801      	ldr	r0, [sp, #4]
   19ae0:	f7fe ff14 	bl	1890c <_malloc_r>
   19ae4:	1e04      	subs	r4, r0, #0
   19ae6:	d054      	beq.n	19b92 <__ssprint_r+0x112>
   19ae8:	465a      	mov	r2, fp
   19aea:	6931      	ldr	r1, [r6, #16]
   19aec:	f7fa f85a 	bl	13ba4 <memcpy>
   19af0:	89b3      	ldrh	r3, [r6, #12]
   19af2:	4a2a      	ldr	r2, [pc, #168]	; (19b9c <__ssprint_r+0x11c>)
   19af4:	4013      	ands	r3, r2
   19af6:	2280      	movs	r2, #128	; 0x80
   19af8:	4313      	orrs	r3, r2
   19afa:	81b3      	strh	r3, [r6, #12]
   19afc:	4643      	mov	r3, r8
   19afe:	0020      	movs	r0, r4
   19b00:	465a      	mov	r2, fp
   19b02:	6134      	str	r4, [r6, #16]
   19b04:	46b8      	mov	r8, r7
   19b06:	003c      	movs	r4, r7
   19b08:	4458      	add	r0, fp
   19b0a:	6173      	str	r3, [r6, #20]
   19b0c:	1a9b      	subs	r3, r3, r2
   19b0e:	6030      	str	r0, [r6, #0]
   19b10:	60b3      	str	r3, [r6, #8]
   19b12:	4642      	mov	r2, r8
   19b14:	4649      	mov	r1, r9
   19b16:	f7ff f9ed 	bl	18ef4 <memmove>
   19b1a:	68b3      	ldr	r3, [r6, #8]
   19b1c:	1b1c      	subs	r4, r3, r4
   19b1e:	6833      	ldr	r3, [r6, #0]
   19b20:	60b4      	str	r4, [r6, #8]
   19b22:	4443      	add	r3, r8
   19b24:	6033      	str	r3, [r6, #0]
   19b26:	0018      	movs	r0, r3
   19b28:	4653      	mov	r3, sl
   19b2a:	689b      	ldr	r3, [r3, #8]
   19b2c:	1bdf      	subs	r7, r3, r7
   19b2e:	4653      	mov	r3, sl
   19b30:	609f      	str	r7, [r3, #8]
   19b32:	d023      	beq.n	19b7c <__ssprint_r+0xfc>
   19b34:	686f      	ldr	r7, [r5, #4]
   19b36:	002b      	movs	r3, r5
   19b38:	3508      	adds	r5, #8
   19b3a:	2f00      	cmp	r7, #0
   19b3c:	d0fa      	beq.n	19b34 <__ssprint_r+0xb4>
   19b3e:	681b      	ldr	r3, [r3, #0]
   19b40:	46a0      	mov	r8, r4
   19b42:	4699      	mov	r9, r3
   19b44:	42a7      	cmp	r7, r4
   19b46:	d2ae      	bcs.n	19aa6 <__ssprint_r+0x26>
   19b48:	003c      	movs	r4, r7
   19b4a:	46b8      	mov	r8, r7
   19b4c:	e7e1      	b.n	19b12 <__ssprint_r+0x92>
   19b4e:	9801      	ldr	r0, [sp, #4]
   19b50:	f7ff fd78 	bl	19644 <_realloc_r>
   19b54:	1e04      	subs	r4, r0, #0
   19b56:	d1d1      	bne.n	19afc <__ssprint_r+0x7c>
   19b58:	9c01      	ldr	r4, [sp, #4]
   19b5a:	6931      	ldr	r1, [r6, #16]
   19b5c:	0020      	movs	r0, r4
   19b5e:	f7fe fbb7 	bl	182d0 <_free_r>
   19b62:	230c      	movs	r3, #12
   19b64:	6023      	str	r3, [r4, #0]
   19b66:	2240      	movs	r2, #64	; 0x40
   19b68:	89b3      	ldrh	r3, [r6, #12]
   19b6a:	2001      	movs	r0, #1
   19b6c:	4313      	orrs	r3, r2
   19b6e:	81b3      	strh	r3, [r6, #12]
   19b70:	4652      	mov	r2, sl
   19b72:	2300      	movs	r3, #0
   19b74:	4240      	negs	r0, r0
   19b76:	6093      	str	r3, [r2, #8]
   19b78:	6053      	str	r3, [r2, #4]
   19b7a:	e003      	b.n	19b84 <__ssprint_r+0x104>
   19b7c:	2300      	movs	r3, #0
   19b7e:	4652      	mov	r2, sl
   19b80:	2000      	movs	r0, #0
   19b82:	6053      	str	r3, [r2, #4]
   19b84:	b003      	add	sp, #12
   19b86:	bc3c      	pop	{r2, r3, r4, r5}
   19b88:	4690      	mov	r8, r2
   19b8a:	4699      	mov	r9, r3
   19b8c:	46a2      	mov	sl, r4
   19b8e:	46ab      	mov	fp, r5
   19b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b92:	230c      	movs	r3, #12
   19b94:	9a01      	ldr	r2, [sp, #4]
   19b96:	6013      	str	r3, [r2, #0]
   19b98:	e7e5      	b.n	19b66 <__ssprint_r+0xe6>
   19b9a:	46c0      	nop			; (mov r8, r8)
   19b9c:	fffffb7f 	.word	0xfffffb7f

00019ba0 <__sprint_r.part.0>:
   19ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ba2:	464e      	mov	r6, r9
   19ba4:	4645      	mov	r5, r8
   19ba6:	46de      	mov	lr, fp
   19ba8:	4657      	mov	r7, sl
   19baa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   19bac:	b5e0      	push	{r5, r6, r7, lr}
   19bae:	4680      	mov	r8, r0
   19bb0:	000e      	movs	r6, r1
   19bb2:	4691      	mov	r9, r2
   19bb4:	049b      	lsls	r3, r3, #18
   19bb6:	d531      	bpl.n	19c1c <__sprint_r.part.0+0x7c>
   19bb8:	6813      	ldr	r3, [r2, #0]
   19bba:	469a      	mov	sl, r3
   19bbc:	6893      	ldr	r3, [r2, #8]
   19bbe:	2b00      	cmp	r3, #0
   19bc0:	d02a      	beq.n	19c18 <__sprint_r.part.0+0x78>
   19bc2:	4652      	mov	r2, sl
   19bc4:	6852      	ldr	r2, [r2, #4]
   19bc6:	2500      	movs	r5, #0
   19bc8:	4693      	mov	fp, r2
   19bca:	0897      	lsrs	r7, r2, #2
   19bcc:	4652      	mov	r2, sl
   19bce:	6814      	ldr	r4, [r2, #0]
   19bd0:	d104      	bne.n	19bdc <__sprint_r.part.0+0x3c>
   19bd2:	e016      	b.n	19c02 <__sprint_r.part.0+0x62>
   19bd4:	3501      	adds	r5, #1
   19bd6:	3404      	adds	r4, #4
   19bd8:	42af      	cmp	r7, r5
   19bda:	d010      	beq.n	19bfe <__sprint_r.part.0+0x5e>
   19bdc:	0032      	movs	r2, r6
   19bde:	6821      	ldr	r1, [r4, #0]
   19be0:	4640      	mov	r0, r8
   19be2:	f000 f9a7 	bl	19f34 <_fputwc_r>
   19be6:	1c43      	adds	r3, r0, #1
   19be8:	d1f4      	bne.n	19bd4 <__sprint_r.part.0+0x34>
   19bea:	464a      	mov	r2, r9
   19bec:	2300      	movs	r3, #0
   19bee:	6093      	str	r3, [r2, #8]
   19bf0:	6053      	str	r3, [r2, #4]
   19bf2:	bc3c      	pop	{r2, r3, r4, r5}
   19bf4:	4690      	mov	r8, r2
   19bf6:	4699      	mov	r9, r3
   19bf8:	46a2      	mov	sl, r4
   19bfa:	46ab      	mov	fp, r5
   19bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19bfe:	464b      	mov	r3, r9
   19c00:	689b      	ldr	r3, [r3, #8]
   19c02:	465a      	mov	r2, fp
   19c04:	2103      	movs	r1, #3
   19c06:	438a      	bics	r2, r1
   19c08:	1a9b      	subs	r3, r3, r2
   19c0a:	464a      	mov	r2, r9
   19c0c:	6093      	str	r3, [r2, #8]
   19c0e:	2208      	movs	r2, #8
   19c10:	4694      	mov	ip, r2
   19c12:	44e2      	add	sl, ip
   19c14:	2b00      	cmp	r3, #0
   19c16:	d1d4      	bne.n	19bc2 <__sprint_r.part.0+0x22>
   19c18:	2000      	movs	r0, #0
   19c1a:	e7e6      	b.n	19bea <__sprint_r.part.0+0x4a>
   19c1c:	f7fe fc36 	bl	1848c <__sfvwrite_r>
   19c20:	e7e3      	b.n	19bea <__sprint_r.part.0+0x4a>
   19c22:	46c0      	nop			; (mov r8, r8)

00019c24 <__sprint_r>:
   19c24:	6893      	ldr	r3, [r2, #8]
   19c26:	b510      	push	{r4, lr}
   19c28:	2b00      	cmp	r3, #0
   19c2a:	d002      	beq.n	19c32 <__sprint_r+0xe>
   19c2c:	f7ff ffb8 	bl	19ba0 <__sprint_r.part.0>
   19c30:	bd10      	pop	{r4, pc}
   19c32:	6053      	str	r3, [r2, #4]
   19c34:	2000      	movs	r0, #0
   19c36:	e7fb      	b.n	19c30 <__sprint_r+0xc>

00019c38 <_write_r>:
   19c38:	b570      	push	{r4, r5, r6, lr}
   19c3a:	0005      	movs	r5, r0
   19c3c:	0008      	movs	r0, r1
   19c3e:	0011      	movs	r1, r2
   19c40:	2200      	movs	r2, #0
   19c42:	4c06      	ldr	r4, [pc, #24]	; (19c5c <_write_r+0x24>)
   19c44:	6022      	str	r2, [r4, #0]
   19c46:	001a      	movs	r2, r3
   19c48:	f7e9 feb4 	bl	39b4 <_write>
   19c4c:	1c43      	adds	r3, r0, #1
   19c4e:	d000      	beq.n	19c52 <_write_r+0x1a>
   19c50:	bd70      	pop	{r4, r5, r6, pc}
   19c52:	6823      	ldr	r3, [r4, #0]
   19c54:	2b00      	cmp	r3, #0
   19c56:	d0fb      	beq.n	19c50 <_write_r+0x18>
   19c58:	602b      	str	r3, [r5, #0]
   19c5a:	e7f9      	b.n	19c50 <_write_r+0x18>
   19c5c:	20001c88 	.word	0x20001c88

00019c60 <__register_exitproc>:
   19c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c62:	464e      	mov	r6, r9
   19c64:	4645      	mov	r5, r8
   19c66:	46de      	mov	lr, fp
   19c68:	4657      	mov	r7, sl
   19c6a:	b5e0      	push	{r5, r6, r7, lr}
   19c6c:	4d36      	ldr	r5, [pc, #216]	; (19d48 <__register_exitproc+0xe8>)
   19c6e:	b083      	sub	sp, #12
   19c70:	0006      	movs	r6, r0
   19c72:	6828      	ldr	r0, [r5, #0]
   19c74:	4698      	mov	r8, r3
   19c76:	000f      	movs	r7, r1
   19c78:	4691      	mov	r9, r2
   19c7a:	f7fe fdc1 	bl	18800 <__retarget_lock_acquire_recursive>
   19c7e:	4b33      	ldr	r3, [pc, #204]	; (19d4c <__register_exitproc+0xec>)
   19c80:	681c      	ldr	r4, [r3, #0]
   19c82:	23a4      	movs	r3, #164	; 0xa4
   19c84:	005b      	lsls	r3, r3, #1
   19c86:	58e0      	ldr	r0, [r4, r3]
   19c88:	2800      	cmp	r0, #0
   19c8a:	d052      	beq.n	19d32 <__register_exitproc+0xd2>
   19c8c:	6843      	ldr	r3, [r0, #4]
   19c8e:	2b1f      	cmp	r3, #31
   19c90:	dc13      	bgt.n	19cba <__register_exitproc+0x5a>
   19c92:	1c5a      	adds	r2, r3, #1
   19c94:	9201      	str	r2, [sp, #4]
   19c96:	2e00      	cmp	r6, #0
   19c98:	d128      	bne.n	19cec <__register_exitproc+0x8c>
   19c9a:	9a01      	ldr	r2, [sp, #4]
   19c9c:	3302      	adds	r3, #2
   19c9e:	009b      	lsls	r3, r3, #2
   19ca0:	6042      	str	r2, [r0, #4]
   19ca2:	501f      	str	r7, [r3, r0]
   19ca4:	6828      	ldr	r0, [r5, #0]
   19ca6:	f7fe fdad 	bl	18804 <__retarget_lock_release_recursive>
   19caa:	2000      	movs	r0, #0
   19cac:	b003      	add	sp, #12
   19cae:	bc3c      	pop	{r2, r3, r4, r5}
   19cb0:	4690      	mov	r8, r2
   19cb2:	4699      	mov	r9, r3
   19cb4:	46a2      	mov	sl, r4
   19cb6:	46ab      	mov	fp, r5
   19cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cba:	4b25      	ldr	r3, [pc, #148]	; (19d50 <__register_exitproc+0xf0>)
   19cbc:	2b00      	cmp	r3, #0
   19cbe:	d03d      	beq.n	19d3c <__register_exitproc+0xdc>
   19cc0:	20c8      	movs	r0, #200	; 0xc8
   19cc2:	0040      	lsls	r0, r0, #1
   19cc4:	f7fe fe18 	bl	188f8 <malloc>
   19cc8:	2800      	cmp	r0, #0
   19cca:	d037      	beq.n	19d3c <__register_exitproc+0xdc>
   19ccc:	22a4      	movs	r2, #164	; 0xa4
   19cce:	2300      	movs	r3, #0
   19cd0:	0052      	lsls	r2, r2, #1
   19cd2:	58a1      	ldr	r1, [r4, r2]
   19cd4:	6043      	str	r3, [r0, #4]
   19cd6:	6001      	str	r1, [r0, #0]
   19cd8:	50a0      	str	r0, [r4, r2]
   19cda:	3240      	adds	r2, #64	; 0x40
   19cdc:	5083      	str	r3, [r0, r2]
   19cde:	3204      	adds	r2, #4
   19ce0:	5083      	str	r3, [r0, r2]
   19ce2:	3301      	adds	r3, #1
   19ce4:	9301      	str	r3, [sp, #4]
   19ce6:	2300      	movs	r3, #0
   19ce8:	2e00      	cmp	r6, #0
   19cea:	d0d6      	beq.n	19c9a <__register_exitproc+0x3a>
   19cec:	009a      	lsls	r2, r3, #2
   19cee:	4692      	mov	sl, r2
   19cf0:	4482      	add	sl, r0
   19cf2:	464a      	mov	r2, r9
   19cf4:	2188      	movs	r1, #136	; 0x88
   19cf6:	4654      	mov	r4, sl
   19cf8:	5062      	str	r2, [r4, r1]
   19cfa:	22c4      	movs	r2, #196	; 0xc4
   19cfc:	0052      	lsls	r2, r2, #1
   19cfe:	4691      	mov	r9, r2
   19d00:	4481      	add	r9, r0
   19d02:	464a      	mov	r2, r9
   19d04:	3987      	subs	r1, #135	; 0x87
   19d06:	4099      	lsls	r1, r3
   19d08:	6812      	ldr	r2, [r2, #0]
   19d0a:	468b      	mov	fp, r1
   19d0c:	430a      	orrs	r2, r1
   19d0e:	4694      	mov	ip, r2
   19d10:	464a      	mov	r2, r9
   19d12:	4661      	mov	r1, ip
   19d14:	6011      	str	r1, [r2, #0]
   19d16:	2284      	movs	r2, #132	; 0x84
   19d18:	4641      	mov	r1, r8
   19d1a:	0052      	lsls	r2, r2, #1
   19d1c:	50a1      	str	r1, [r4, r2]
   19d1e:	2e02      	cmp	r6, #2
   19d20:	d1bb      	bne.n	19c9a <__register_exitproc+0x3a>
   19d22:	0002      	movs	r2, r0
   19d24:	465c      	mov	r4, fp
   19d26:	328d      	adds	r2, #141	; 0x8d
   19d28:	32ff      	adds	r2, #255	; 0xff
   19d2a:	6811      	ldr	r1, [r2, #0]
   19d2c:	430c      	orrs	r4, r1
   19d2e:	6014      	str	r4, [r2, #0]
   19d30:	e7b3      	b.n	19c9a <__register_exitproc+0x3a>
   19d32:	0020      	movs	r0, r4
   19d34:	304d      	adds	r0, #77	; 0x4d
   19d36:	30ff      	adds	r0, #255	; 0xff
   19d38:	50e0      	str	r0, [r4, r3]
   19d3a:	e7a7      	b.n	19c8c <__register_exitproc+0x2c>
   19d3c:	6828      	ldr	r0, [r5, #0]
   19d3e:	f7fe fd61 	bl	18804 <__retarget_lock_release_recursive>
   19d42:	2001      	movs	r0, #1
   19d44:	4240      	negs	r0, r0
   19d46:	e7b1      	b.n	19cac <__register_exitproc+0x4c>
   19d48:	20000468 	.word	0x20000468
   19d4c:	0001afc4 	.word	0x0001afc4
   19d50:	000188f9 	.word	0x000188f9

00019d54 <_calloc_r>:
   19d54:	b510      	push	{r4, lr}
   19d56:	4351      	muls	r1, r2
   19d58:	f7fe fdd8 	bl	1890c <_malloc_r>
   19d5c:	1e04      	subs	r4, r0, #0
   19d5e:	d01c      	beq.n	19d9a <_calloc_r+0x46>
   19d60:	0003      	movs	r3, r0
   19d62:	3b08      	subs	r3, #8
   19d64:	685a      	ldr	r2, [r3, #4]
   19d66:	2303      	movs	r3, #3
   19d68:	439a      	bics	r2, r3
   19d6a:	3a04      	subs	r2, #4
   19d6c:	2a24      	cmp	r2, #36	; 0x24
   19d6e:	d816      	bhi.n	19d9e <_calloc_r+0x4a>
   19d70:	0003      	movs	r3, r0
   19d72:	2a13      	cmp	r2, #19
   19d74:	d90d      	bls.n	19d92 <_calloc_r+0x3e>
   19d76:	2100      	movs	r1, #0
   19d78:	3308      	adds	r3, #8
   19d7a:	6001      	str	r1, [r0, #0]
   19d7c:	6041      	str	r1, [r0, #4]
   19d7e:	2a1b      	cmp	r2, #27
   19d80:	d907      	bls.n	19d92 <_calloc_r+0x3e>
   19d82:	6081      	str	r1, [r0, #8]
   19d84:	60c1      	str	r1, [r0, #12]
   19d86:	2a24      	cmp	r2, #36	; 0x24
   19d88:	d10d      	bne.n	19da6 <_calloc_r+0x52>
   19d8a:	0003      	movs	r3, r0
   19d8c:	6101      	str	r1, [r0, #16]
   19d8e:	3318      	adds	r3, #24
   19d90:	6141      	str	r1, [r0, #20]
   19d92:	2200      	movs	r2, #0
   19d94:	601a      	str	r2, [r3, #0]
   19d96:	605a      	str	r2, [r3, #4]
   19d98:	609a      	str	r2, [r3, #8]
   19d9a:	0020      	movs	r0, r4
   19d9c:	bd10      	pop	{r4, pc}
   19d9e:	2100      	movs	r1, #0
   19da0:	f7f9 ff42 	bl	13c28 <memset>
   19da4:	e7f9      	b.n	19d9a <_calloc_r+0x46>
   19da6:	0003      	movs	r3, r0
   19da8:	3310      	adds	r3, #16
   19daa:	e7f2      	b.n	19d92 <_calloc_r+0x3e>

00019dac <_close_r>:
   19dac:	2300      	movs	r3, #0
   19dae:	b570      	push	{r4, r5, r6, lr}
   19db0:	4c06      	ldr	r4, [pc, #24]	; (19dcc <_close_r+0x20>)
   19db2:	0005      	movs	r5, r0
   19db4:	0008      	movs	r0, r1
   19db6:	6023      	str	r3, [r4, #0]
   19db8:	f7e9 fe36 	bl	3a28 <_close>
   19dbc:	1c43      	adds	r3, r0, #1
   19dbe:	d000      	beq.n	19dc2 <_close_r+0x16>
   19dc0:	bd70      	pop	{r4, r5, r6, pc}
   19dc2:	6823      	ldr	r3, [r4, #0]
   19dc4:	2b00      	cmp	r3, #0
   19dc6:	d0fb      	beq.n	19dc0 <_close_r+0x14>
   19dc8:	602b      	str	r3, [r5, #0]
   19dca:	e7f9      	b.n	19dc0 <_close_r+0x14>
   19dcc:	20001c88 	.word	0x20001c88

00019dd0 <_fclose_r>:
   19dd0:	b570      	push	{r4, r5, r6, lr}
   19dd2:	0005      	movs	r5, r0
   19dd4:	1e0c      	subs	r4, r1, #0
   19dd6:	d040      	beq.n	19e5a <_fclose_r+0x8a>
   19dd8:	2800      	cmp	r0, #0
   19dda:	d002      	beq.n	19de2 <_fclose_r+0x12>
   19ddc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19dde:	2b00      	cmp	r3, #0
   19de0:	d03e      	beq.n	19e60 <_fclose_r+0x90>
   19de2:	2601      	movs	r6, #1
   19de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19de6:	4233      	tst	r3, r6
   19de8:	d133      	bne.n	19e52 <_fclose_r+0x82>
   19dea:	89a3      	ldrh	r3, [r4, #12]
   19dec:	059b      	lsls	r3, r3, #22
   19dee:	d543      	bpl.n	19e78 <_fclose_r+0xa8>
   19df0:	0021      	movs	r1, r4
   19df2:	0028      	movs	r0, r5
   19df4:	f7fe f8c0 	bl	17f78 <__sflush_r>
   19df8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19dfa:	0006      	movs	r6, r0
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	d004      	beq.n	19e0a <_fclose_r+0x3a>
   19e00:	69e1      	ldr	r1, [r4, #28]
   19e02:	0028      	movs	r0, r5
   19e04:	4798      	blx	r3
   19e06:	2800      	cmp	r0, #0
   19e08:	db44      	blt.n	19e94 <_fclose_r+0xc4>
   19e0a:	89a3      	ldrh	r3, [r4, #12]
   19e0c:	061b      	lsls	r3, r3, #24
   19e0e:	d42a      	bmi.n	19e66 <_fclose_r+0x96>
   19e10:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19e12:	2900      	cmp	r1, #0
   19e14:	d008      	beq.n	19e28 <_fclose_r+0x58>
   19e16:	0023      	movs	r3, r4
   19e18:	3340      	adds	r3, #64	; 0x40
   19e1a:	4299      	cmp	r1, r3
   19e1c:	d002      	beq.n	19e24 <_fclose_r+0x54>
   19e1e:	0028      	movs	r0, r5
   19e20:	f7fe fa56 	bl	182d0 <_free_r>
   19e24:	2300      	movs	r3, #0
   19e26:	6323      	str	r3, [r4, #48]	; 0x30
   19e28:	6c61      	ldr	r1, [r4, #68]	; 0x44
   19e2a:	2900      	cmp	r1, #0
   19e2c:	d004      	beq.n	19e38 <_fclose_r+0x68>
   19e2e:	0028      	movs	r0, r5
   19e30:	f7fe fa4e 	bl	182d0 <_free_r>
   19e34:	2300      	movs	r3, #0
   19e36:	6463      	str	r3, [r4, #68]	; 0x44
   19e38:	f7fe f9d0 	bl	181dc <__sfp_lock_acquire>
   19e3c:	2300      	movs	r3, #0
   19e3e:	81a3      	strh	r3, [r4, #12]
   19e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19e42:	07db      	lsls	r3, r3, #31
   19e44:	d514      	bpl.n	19e70 <_fclose_r+0xa0>
   19e46:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19e48:	f7fe fcd8 	bl	187fc <__retarget_lock_close_recursive>
   19e4c:	f7fe f9ce 	bl	181ec <__sfp_lock_release>
   19e50:	e004      	b.n	19e5c <_fclose_r+0x8c>
   19e52:	220c      	movs	r2, #12
   19e54:	5ea3      	ldrsh	r3, [r4, r2]
   19e56:	2b00      	cmp	r3, #0
   19e58:	d1ca      	bne.n	19df0 <_fclose_r+0x20>
   19e5a:	2600      	movs	r6, #0
   19e5c:	0030      	movs	r0, r6
   19e5e:	bd70      	pop	{r4, r5, r6, pc}
   19e60:	f7fe f98c 	bl	1817c <__sinit>
   19e64:	e7bd      	b.n	19de2 <_fclose_r+0x12>
   19e66:	6921      	ldr	r1, [r4, #16]
   19e68:	0028      	movs	r0, r5
   19e6a:	f7fe fa31 	bl	182d0 <_free_r>
   19e6e:	e7cf      	b.n	19e10 <_fclose_r+0x40>
   19e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19e72:	f7fe fcc7 	bl	18804 <__retarget_lock_release_recursive>
   19e76:	e7e6      	b.n	19e46 <_fclose_r+0x76>
   19e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19e7a:	f7fe fcc1 	bl	18800 <__retarget_lock_acquire_recursive>
   19e7e:	220c      	movs	r2, #12
   19e80:	5ea3      	ldrsh	r3, [r4, r2]
   19e82:	2b00      	cmp	r3, #0
   19e84:	d1b4      	bne.n	19df0 <_fclose_r+0x20>
   19e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19e88:	401e      	ands	r6, r3
   19e8a:	d1e6      	bne.n	19e5a <_fclose_r+0x8a>
   19e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19e8e:	f7fe fcb9 	bl	18804 <__retarget_lock_release_recursive>
   19e92:	e7e3      	b.n	19e5c <_fclose_r+0x8c>
   19e94:	2601      	movs	r6, #1
   19e96:	4276      	negs	r6, r6
   19e98:	e7b7      	b.n	19e0a <_fclose_r+0x3a>
   19e9a:	46c0      	nop			; (mov r8, r8)

00019e9c <__fputwc>:
   19e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e9e:	46ce      	mov	lr, r9
   19ea0:	4647      	mov	r7, r8
   19ea2:	b580      	push	{r7, lr}
   19ea4:	b085      	sub	sp, #20
   19ea6:	4680      	mov	r8, r0
   19ea8:	4689      	mov	r9, r1
   19eaa:	0014      	movs	r4, r2
   19eac:	f000 f896 	bl	19fdc <__locale_mb_cur_max>
   19eb0:	2801      	cmp	r0, #1
   19eb2:	d031      	beq.n	19f18 <__fputwc+0x7c>
   19eb4:	0023      	movs	r3, r4
   19eb6:	af03      	add	r7, sp, #12
   19eb8:	335c      	adds	r3, #92	; 0x5c
   19eba:	464a      	mov	r2, r9
   19ebc:	0039      	movs	r1, r7
   19ebe:	4640      	mov	r0, r8
   19ec0:	f000 f938 	bl	1a134 <_wcrtomb_r>
   19ec4:	0006      	movs	r6, r0
   19ec6:	1c43      	adds	r3, r0, #1
   19ec8:	d021      	beq.n	19f0e <__fputwc+0x72>
   19eca:	2800      	cmp	r0, #0
   19ecc:	d030      	beq.n	19f30 <__fputwc+0x94>
   19ece:	7839      	ldrb	r1, [r7, #0]
   19ed0:	2500      	movs	r5, #0
   19ed2:	e007      	b.n	19ee4 <__fputwc+0x48>
   19ed4:	6823      	ldr	r3, [r4, #0]
   19ed6:	1c5a      	adds	r2, r3, #1
   19ed8:	6022      	str	r2, [r4, #0]
   19eda:	7019      	strb	r1, [r3, #0]
   19edc:	3501      	adds	r5, #1
   19ede:	42b5      	cmp	r5, r6
   19ee0:	d226      	bcs.n	19f30 <__fputwc+0x94>
   19ee2:	5d79      	ldrb	r1, [r7, r5]
   19ee4:	68a3      	ldr	r3, [r4, #8]
   19ee6:	3b01      	subs	r3, #1
   19ee8:	60a3      	str	r3, [r4, #8]
   19eea:	2b00      	cmp	r3, #0
   19eec:	daf2      	bge.n	19ed4 <__fputwc+0x38>
   19eee:	69a2      	ldr	r2, [r4, #24]
   19ef0:	4293      	cmp	r3, r2
   19ef2:	db01      	blt.n	19ef8 <__fputwc+0x5c>
   19ef4:	290a      	cmp	r1, #10
   19ef6:	d1ed      	bne.n	19ed4 <__fputwc+0x38>
   19ef8:	0022      	movs	r2, r4
   19efa:	4640      	mov	r0, r8
   19efc:	f000 f8bc 	bl	1a078 <__swbuf_r>
   19f00:	1c43      	adds	r3, r0, #1
   19f02:	d1eb      	bne.n	19edc <__fputwc+0x40>
   19f04:	b005      	add	sp, #20
   19f06:	bc0c      	pop	{r2, r3}
   19f08:	4690      	mov	r8, r2
   19f0a:	4699      	mov	r9, r3
   19f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f0e:	2240      	movs	r2, #64	; 0x40
   19f10:	89a3      	ldrh	r3, [r4, #12]
   19f12:	4313      	orrs	r3, r2
   19f14:	81a3      	strh	r3, [r4, #12]
   19f16:	e7f5      	b.n	19f04 <__fputwc+0x68>
   19f18:	464b      	mov	r3, r9
   19f1a:	3b01      	subs	r3, #1
   19f1c:	2bfe      	cmp	r3, #254	; 0xfe
   19f1e:	d8c9      	bhi.n	19eb4 <__fputwc+0x18>
   19f20:	466a      	mov	r2, sp
   19f22:	464b      	mov	r3, r9
   19f24:	71d3      	strb	r3, [r2, #7]
   19f26:	79d1      	ldrb	r1, [r2, #7]
   19f28:	af03      	add	r7, sp, #12
   19f2a:	7039      	strb	r1, [r7, #0]
   19f2c:	2601      	movs	r6, #1
   19f2e:	e7cf      	b.n	19ed0 <__fputwc+0x34>
   19f30:	4648      	mov	r0, r9
   19f32:	e7e7      	b.n	19f04 <__fputwc+0x68>

00019f34 <_fputwc_r>:
   19f34:	6e53      	ldr	r3, [r2, #100]	; 0x64
   19f36:	b570      	push	{r4, r5, r6, lr}
   19f38:	0005      	movs	r5, r0
   19f3a:	000e      	movs	r6, r1
   19f3c:	0014      	movs	r4, r2
   19f3e:	07db      	lsls	r3, r3, #31
   19f40:	d41e      	bmi.n	19f80 <_fputwc_r+0x4c>
   19f42:	230c      	movs	r3, #12
   19f44:	5ed2      	ldrsh	r2, [r2, r3]
   19f46:	b291      	uxth	r1, r2
   19f48:	058b      	lsls	r3, r1, #22
   19f4a:	d516      	bpl.n	19f7a <_fputwc_r+0x46>
   19f4c:	2380      	movs	r3, #128	; 0x80
   19f4e:	019b      	lsls	r3, r3, #6
   19f50:	4219      	tst	r1, r3
   19f52:	d104      	bne.n	19f5e <_fputwc_r+0x2a>
   19f54:	431a      	orrs	r2, r3
   19f56:	81a2      	strh	r2, [r4, #12]
   19f58:	6e62      	ldr	r2, [r4, #100]	; 0x64
   19f5a:	4313      	orrs	r3, r2
   19f5c:	6663      	str	r3, [r4, #100]	; 0x64
   19f5e:	0028      	movs	r0, r5
   19f60:	0022      	movs	r2, r4
   19f62:	0031      	movs	r1, r6
   19f64:	f7ff ff9a 	bl	19e9c <__fputwc>
   19f68:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19f6a:	0005      	movs	r5, r0
   19f6c:	07db      	lsls	r3, r3, #31
   19f6e:	d402      	bmi.n	19f76 <_fputwc_r+0x42>
   19f70:	89a3      	ldrh	r3, [r4, #12]
   19f72:	059b      	lsls	r3, r3, #22
   19f74:	d508      	bpl.n	19f88 <_fputwc_r+0x54>
   19f76:	0028      	movs	r0, r5
   19f78:	bd70      	pop	{r4, r5, r6, pc}
   19f7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19f7c:	f7fe fc40 	bl	18800 <__retarget_lock_acquire_recursive>
   19f80:	230c      	movs	r3, #12
   19f82:	5ee2      	ldrsh	r2, [r4, r3]
   19f84:	b291      	uxth	r1, r2
   19f86:	e7e1      	b.n	19f4c <_fputwc_r+0x18>
   19f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19f8a:	f7fe fc3b 	bl	18804 <__retarget_lock_release_recursive>
   19f8e:	e7f2      	b.n	19f76 <_fputwc_r+0x42>

00019f90 <_fstat_r>:
   19f90:	2300      	movs	r3, #0
   19f92:	b570      	push	{r4, r5, r6, lr}
   19f94:	4c07      	ldr	r4, [pc, #28]	; (19fb4 <_fstat_r+0x24>)
   19f96:	0005      	movs	r5, r0
   19f98:	0008      	movs	r0, r1
   19f9a:	0011      	movs	r1, r2
   19f9c:	6023      	str	r3, [r4, #0]
   19f9e:	f7e9 fd46 	bl	3a2e <_fstat>
   19fa2:	1c43      	adds	r3, r0, #1
   19fa4:	d000      	beq.n	19fa8 <_fstat_r+0x18>
   19fa6:	bd70      	pop	{r4, r5, r6, pc}
   19fa8:	6823      	ldr	r3, [r4, #0]
   19faa:	2b00      	cmp	r3, #0
   19fac:	d0fb      	beq.n	19fa6 <_fstat_r+0x16>
   19fae:	602b      	str	r3, [r5, #0]
   19fb0:	e7f9      	b.n	19fa6 <_fstat_r+0x16>
   19fb2:	46c0      	nop			; (mov r8, r8)
   19fb4:	20001c88 	.word	0x20001c88

00019fb8 <_isatty_r>:
   19fb8:	2300      	movs	r3, #0
   19fba:	b570      	push	{r4, r5, r6, lr}
   19fbc:	4c06      	ldr	r4, [pc, #24]	; (19fd8 <_isatty_r+0x20>)
   19fbe:	0005      	movs	r5, r0
   19fc0:	0008      	movs	r0, r1
   19fc2:	6023      	str	r3, [r4, #0]
   19fc4:	f7e9 fd38 	bl	3a38 <_isatty>
   19fc8:	1c43      	adds	r3, r0, #1
   19fca:	d000      	beq.n	19fce <_isatty_r+0x16>
   19fcc:	bd70      	pop	{r4, r5, r6, pc}
   19fce:	6823      	ldr	r3, [r4, #0]
   19fd0:	2b00      	cmp	r3, #0
   19fd2:	d0fb      	beq.n	19fcc <_isatty_r+0x14>
   19fd4:	602b      	str	r3, [r5, #0]
   19fd6:	e7f9      	b.n	19fcc <_isatty_r+0x14>
   19fd8:	20001c88 	.word	0x20001c88

00019fdc <__locale_mb_cur_max>:
   19fdc:	4b05      	ldr	r3, [pc, #20]	; (19ff4 <__locale_mb_cur_max+0x18>)
   19fde:	681b      	ldr	r3, [r3, #0]
   19fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   19fe2:	2b00      	cmp	r3, #0
   19fe4:	d003      	beq.n	19fee <__locale_mb_cur_max+0x12>
   19fe6:	2294      	movs	r2, #148	; 0x94
   19fe8:	0052      	lsls	r2, r2, #1
   19fea:	5c98      	ldrb	r0, [r3, r2]
   19fec:	4770      	bx	lr
   19fee:	4b02      	ldr	r3, [pc, #8]	; (19ff8 <__locale_mb_cur_max+0x1c>)
   19ff0:	e7f9      	b.n	19fe6 <__locale_mb_cur_max+0xa>
   19ff2:	46c0      	nop			; (mov r8, r8)
   19ff4:	20000038 	.word	0x20000038
   19ff8:	2000087c 	.word	0x2000087c

00019ffc <_lseek_r>:
   19ffc:	b570      	push	{r4, r5, r6, lr}
   19ffe:	0005      	movs	r5, r0
   1a000:	0008      	movs	r0, r1
   1a002:	0011      	movs	r1, r2
   1a004:	2200      	movs	r2, #0
   1a006:	4c06      	ldr	r4, [pc, #24]	; (1a020 <_lseek_r+0x24>)
   1a008:	6022      	str	r2, [r4, #0]
   1a00a:	001a      	movs	r2, r3
   1a00c:	f7e9 fd16 	bl	3a3c <_lseek>
   1a010:	1c43      	adds	r3, r0, #1
   1a012:	d000      	beq.n	1a016 <_lseek_r+0x1a>
   1a014:	bd70      	pop	{r4, r5, r6, pc}
   1a016:	6823      	ldr	r3, [r4, #0]
   1a018:	2b00      	cmp	r3, #0
   1a01a:	d0fb      	beq.n	1a014 <_lseek_r+0x18>
   1a01c:	602b      	str	r3, [r5, #0]
   1a01e:	e7f9      	b.n	1a014 <_lseek_r+0x18>
   1a020:	20001c88 	.word	0x20001c88

0001a024 <__ascii_mbtowc>:
   1a024:	b082      	sub	sp, #8
   1a026:	2900      	cmp	r1, #0
   1a028:	d00a      	beq.n	1a040 <__ascii_mbtowc+0x1c>
   1a02a:	2a00      	cmp	r2, #0
   1a02c:	d00b      	beq.n	1a046 <__ascii_mbtowc+0x22>
   1a02e:	2b00      	cmp	r3, #0
   1a030:	d00b      	beq.n	1a04a <__ascii_mbtowc+0x26>
   1a032:	7813      	ldrb	r3, [r2, #0]
   1a034:	600b      	str	r3, [r1, #0]
   1a036:	7810      	ldrb	r0, [r2, #0]
   1a038:	1e43      	subs	r3, r0, #1
   1a03a:	4198      	sbcs	r0, r3
   1a03c:	b002      	add	sp, #8
   1a03e:	4770      	bx	lr
   1a040:	a901      	add	r1, sp, #4
   1a042:	2a00      	cmp	r2, #0
   1a044:	d1f3      	bne.n	1a02e <__ascii_mbtowc+0xa>
   1a046:	2000      	movs	r0, #0
   1a048:	e7f8      	b.n	1a03c <__ascii_mbtowc+0x18>
   1a04a:	2002      	movs	r0, #2
   1a04c:	4240      	negs	r0, r0
   1a04e:	e7f5      	b.n	1a03c <__ascii_mbtowc+0x18>

0001a050 <_read_r>:
   1a050:	b570      	push	{r4, r5, r6, lr}
   1a052:	0005      	movs	r5, r0
   1a054:	0008      	movs	r0, r1
   1a056:	0011      	movs	r1, r2
   1a058:	2200      	movs	r2, #0
   1a05a:	4c06      	ldr	r4, [pc, #24]	; (1a074 <_read_r+0x24>)
   1a05c:	6022      	str	r2, [r4, #0]
   1a05e:	001a      	movs	r2, r3
   1a060:	f7e9 fc86 	bl	3970 <_read>
   1a064:	1c43      	adds	r3, r0, #1
   1a066:	d000      	beq.n	1a06a <_read_r+0x1a>
   1a068:	bd70      	pop	{r4, r5, r6, pc}
   1a06a:	6823      	ldr	r3, [r4, #0]
   1a06c:	2b00      	cmp	r3, #0
   1a06e:	d0fb      	beq.n	1a068 <_read_r+0x18>
   1a070:	602b      	str	r3, [r5, #0]
   1a072:	e7f9      	b.n	1a068 <_read_r+0x18>
   1a074:	20001c88 	.word	0x20001c88

0001a078 <__swbuf_r>:
   1a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a07a:	0006      	movs	r6, r0
   1a07c:	000d      	movs	r5, r1
   1a07e:	0014      	movs	r4, r2
   1a080:	2800      	cmp	r0, #0
   1a082:	d002      	beq.n	1a08a <__swbuf_r+0x12>
   1a084:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a086:	2b00      	cmp	r3, #0
   1a088:	d04e      	beq.n	1a128 <__swbuf_r+0xb0>
   1a08a:	69a3      	ldr	r3, [r4, #24]
   1a08c:	60a3      	str	r3, [r4, #8]
   1a08e:	230c      	movs	r3, #12
   1a090:	5ee0      	ldrsh	r0, [r4, r3]
   1a092:	b281      	uxth	r1, r0
   1a094:	070b      	lsls	r3, r1, #28
   1a096:	d53c      	bpl.n	1a112 <__swbuf_r+0x9a>
   1a098:	6923      	ldr	r3, [r4, #16]
   1a09a:	2b00      	cmp	r3, #0
   1a09c:	d039      	beq.n	1a112 <__swbuf_r+0x9a>
   1a09e:	22ff      	movs	r2, #255	; 0xff
   1a0a0:	b2ef      	uxtb	r7, r5
   1a0a2:	4015      	ands	r5, r2
   1a0a4:	2280      	movs	r2, #128	; 0x80
   1a0a6:	0192      	lsls	r2, r2, #6
   1a0a8:	4211      	tst	r1, r2
   1a0aa:	d015      	beq.n	1a0d8 <__swbuf_r+0x60>
   1a0ac:	6822      	ldr	r2, [r4, #0]
   1a0ae:	6961      	ldr	r1, [r4, #20]
   1a0b0:	1ad3      	subs	r3, r2, r3
   1a0b2:	428b      	cmp	r3, r1
   1a0b4:	da1b      	bge.n	1a0ee <__swbuf_r+0x76>
   1a0b6:	3301      	adds	r3, #1
   1a0b8:	68a1      	ldr	r1, [r4, #8]
   1a0ba:	3901      	subs	r1, #1
   1a0bc:	60a1      	str	r1, [r4, #8]
   1a0be:	1c51      	adds	r1, r2, #1
   1a0c0:	6021      	str	r1, [r4, #0]
   1a0c2:	7017      	strb	r7, [r2, #0]
   1a0c4:	6962      	ldr	r2, [r4, #20]
   1a0c6:	429a      	cmp	r2, r3
   1a0c8:	d01a      	beq.n	1a100 <__swbuf_r+0x88>
   1a0ca:	89a3      	ldrh	r3, [r4, #12]
   1a0cc:	07db      	lsls	r3, r3, #31
   1a0ce:	d501      	bpl.n	1a0d4 <__swbuf_r+0x5c>
   1a0d0:	2d0a      	cmp	r5, #10
   1a0d2:	d015      	beq.n	1a100 <__swbuf_r+0x88>
   1a0d4:	0028      	movs	r0, r5
   1a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0d8:	4302      	orrs	r2, r0
   1a0da:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a0dc:	81a2      	strh	r2, [r4, #12]
   1a0de:	4a14      	ldr	r2, [pc, #80]	; (1a130 <__swbuf_r+0xb8>)
   1a0e0:	400a      	ands	r2, r1
   1a0e2:	6662      	str	r2, [r4, #100]	; 0x64
   1a0e4:	6961      	ldr	r1, [r4, #20]
   1a0e6:	6822      	ldr	r2, [r4, #0]
   1a0e8:	1ad3      	subs	r3, r2, r3
   1a0ea:	428b      	cmp	r3, r1
   1a0ec:	dbe3      	blt.n	1a0b6 <__swbuf_r+0x3e>
   1a0ee:	0021      	movs	r1, r4
   1a0f0:	0030      	movs	r0, r6
   1a0f2:	f7fd ffe9 	bl	180c8 <_fflush_r>
   1a0f6:	2800      	cmp	r0, #0
   1a0f8:	d108      	bne.n	1a10c <__swbuf_r+0x94>
   1a0fa:	6822      	ldr	r2, [r4, #0]
   1a0fc:	2301      	movs	r3, #1
   1a0fe:	e7db      	b.n	1a0b8 <__swbuf_r+0x40>
   1a100:	0021      	movs	r1, r4
   1a102:	0030      	movs	r0, r6
   1a104:	f7fd ffe0 	bl	180c8 <_fflush_r>
   1a108:	2800      	cmp	r0, #0
   1a10a:	d0e3      	beq.n	1a0d4 <__swbuf_r+0x5c>
   1a10c:	2501      	movs	r5, #1
   1a10e:	426d      	negs	r5, r5
   1a110:	e7e0      	b.n	1a0d4 <__swbuf_r+0x5c>
   1a112:	0021      	movs	r1, r4
   1a114:	0030      	movs	r0, r6
   1a116:	f7fc fe43 	bl	16da0 <__swsetup_r>
   1a11a:	2800      	cmp	r0, #0
   1a11c:	d1f6      	bne.n	1a10c <__swbuf_r+0x94>
   1a11e:	230c      	movs	r3, #12
   1a120:	5ee0      	ldrsh	r0, [r4, r3]
   1a122:	6923      	ldr	r3, [r4, #16]
   1a124:	b281      	uxth	r1, r0
   1a126:	e7ba      	b.n	1a09e <__swbuf_r+0x26>
   1a128:	f7fe f828 	bl	1817c <__sinit>
   1a12c:	e7ad      	b.n	1a08a <__swbuf_r+0x12>
   1a12e:	46c0      	nop			; (mov r8, r8)
   1a130:	ffffdfff 	.word	0xffffdfff

0001a134 <_wcrtomb_r>:
   1a134:	b570      	push	{r4, r5, r6, lr}
   1a136:	001d      	movs	r5, r3
   1a138:	4b11      	ldr	r3, [pc, #68]	; (1a180 <_wcrtomb_r+0x4c>)
   1a13a:	b084      	sub	sp, #16
   1a13c:	681b      	ldr	r3, [r3, #0]
   1a13e:	0004      	movs	r4, r0
   1a140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1a142:	2900      	cmp	r1, #0
   1a144:	d00e      	beq.n	1a164 <_wcrtomb_r+0x30>
   1a146:	2b00      	cmp	r3, #0
   1a148:	d016      	beq.n	1a178 <_wcrtomb_r+0x44>
   1a14a:	20e0      	movs	r0, #224	; 0xe0
   1a14c:	581e      	ldr	r6, [r3, r0]
   1a14e:	002b      	movs	r3, r5
   1a150:	0020      	movs	r0, r4
   1a152:	47b0      	blx	r6
   1a154:	1c43      	adds	r3, r0, #1
   1a156:	d103      	bne.n	1a160 <_wcrtomb_r+0x2c>
   1a158:	2300      	movs	r3, #0
   1a15a:	602b      	str	r3, [r5, #0]
   1a15c:	338a      	adds	r3, #138	; 0x8a
   1a15e:	6023      	str	r3, [r4, #0]
   1a160:	b004      	add	sp, #16
   1a162:	bd70      	pop	{r4, r5, r6, pc}
   1a164:	2b00      	cmp	r3, #0
   1a166:	d009      	beq.n	1a17c <_wcrtomb_r+0x48>
   1a168:	22e0      	movs	r2, #224	; 0xe0
   1a16a:	a901      	add	r1, sp, #4
   1a16c:	589e      	ldr	r6, [r3, r2]
   1a16e:	0020      	movs	r0, r4
   1a170:	002b      	movs	r3, r5
   1a172:	2200      	movs	r2, #0
   1a174:	47b0      	blx	r6
   1a176:	e7ed      	b.n	1a154 <_wcrtomb_r+0x20>
   1a178:	4b02      	ldr	r3, [pc, #8]	; (1a184 <_wcrtomb_r+0x50>)
   1a17a:	e7e6      	b.n	1a14a <_wcrtomb_r+0x16>
   1a17c:	4b01      	ldr	r3, [pc, #4]	; (1a184 <_wcrtomb_r+0x50>)
   1a17e:	e7f3      	b.n	1a168 <_wcrtomb_r+0x34>
   1a180:	20000038 	.word	0x20000038
   1a184:	2000087c 	.word	0x2000087c

0001a188 <__ascii_wctomb>:
   1a188:	2900      	cmp	r1, #0
   1a18a:	d004      	beq.n	1a196 <__ascii_wctomb+0xe>
   1a18c:	2aff      	cmp	r2, #255	; 0xff
   1a18e:	d804      	bhi.n	1a19a <__ascii_wctomb+0x12>
   1a190:	2001      	movs	r0, #1
   1a192:	700a      	strb	r2, [r1, #0]
   1a194:	4770      	bx	lr
   1a196:	2000      	movs	r0, #0
   1a198:	e7fc      	b.n	1a194 <__ascii_wctomb+0xc>
   1a19a:	238a      	movs	r3, #138	; 0x8a
   1a19c:	6003      	str	r3, [r0, #0]
   1a19e:	2001      	movs	r0, #1
   1a1a0:	4240      	negs	r0, r0
   1a1a2:	e7f7      	b.n	1a194 <__ascii_wctomb+0xc>

0001a1a4 <__aeabi_dcmpun>:
   1a1a4:	b570      	push	{r4, r5, r6, lr}
   1a1a6:	4e0e      	ldr	r6, [pc, #56]	; (1a1e0 <__aeabi_dcmpun+0x3c>)
   1a1a8:	030d      	lsls	r5, r1, #12
   1a1aa:	031c      	lsls	r4, r3, #12
   1a1ac:	0049      	lsls	r1, r1, #1
   1a1ae:	005b      	lsls	r3, r3, #1
   1a1b0:	0b2d      	lsrs	r5, r5, #12
   1a1b2:	0d49      	lsrs	r1, r1, #21
   1a1b4:	0b24      	lsrs	r4, r4, #12
   1a1b6:	0d5b      	lsrs	r3, r3, #21
   1a1b8:	42b1      	cmp	r1, r6
   1a1ba:	d004      	beq.n	1a1c6 <__aeabi_dcmpun+0x22>
   1a1bc:	4908      	ldr	r1, [pc, #32]	; (1a1e0 <__aeabi_dcmpun+0x3c>)
   1a1be:	2000      	movs	r0, #0
   1a1c0:	428b      	cmp	r3, r1
   1a1c2:	d008      	beq.n	1a1d6 <__aeabi_dcmpun+0x32>
   1a1c4:	bd70      	pop	{r4, r5, r6, pc}
   1a1c6:	4305      	orrs	r5, r0
   1a1c8:	2001      	movs	r0, #1
   1a1ca:	2d00      	cmp	r5, #0
   1a1cc:	d1fa      	bne.n	1a1c4 <__aeabi_dcmpun+0x20>
   1a1ce:	4904      	ldr	r1, [pc, #16]	; (1a1e0 <__aeabi_dcmpun+0x3c>)
   1a1d0:	2000      	movs	r0, #0
   1a1d2:	428b      	cmp	r3, r1
   1a1d4:	d1f6      	bne.n	1a1c4 <__aeabi_dcmpun+0x20>
   1a1d6:	4314      	orrs	r4, r2
   1a1d8:	0020      	movs	r0, r4
   1a1da:	1e44      	subs	r4, r0, #1
   1a1dc:	41a0      	sbcs	r0, r4
   1a1de:	e7f1      	b.n	1a1c4 <__aeabi_dcmpun+0x20>
   1a1e0:	000007ff 	.word	0x000007ff
   1a1e4:	0000060c 	.word	0x0000060c
   1a1e8:	00000856 	.word	0x00000856
   1a1ec:	00000856 	.word	0x00000856
   1a1f0:	00000856 	.word	0x00000856
   1a1f4:	00000856 	.word	0x00000856
   1a1f8:	00000856 	.word	0x00000856
   1a1fc:	00000856 	.word	0x00000856
   1a200:	00000856 	.word	0x00000856
   1a204:	00000856 	.word	0x00000856
   1a208:	00000856 	.word	0x00000856
   1a20c:	00000856 	.word	0x00000856
   1a210:	00000856 	.word	0x00000856
   1a214:	00000856 	.word	0x00000856
   1a218:	00000856 	.word	0x00000856
   1a21c:	00000856 	.word	0x00000856
   1a220:	00000856 	.word	0x00000856
   1a224:	000005f4 	.word	0x000005f4
   1a228:	00000856 	.word	0x00000856
   1a22c:	00000856 	.word	0x00000856
   1a230:	00000856 	.word	0x00000856
   1a234:	00000856 	.word	0x00000856
   1a238:	00000856 	.word	0x00000856
   1a23c:	00000856 	.word	0x00000856
   1a240:	00000856 	.word	0x00000856
   1a244:	00000856 	.word	0x00000856
   1a248:	00000856 	.word	0x00000856
   1a24c:	00000856 	.word	0x00000856
   1a250:	00000856 	.word	0x00000856
   1a254:	00000856 	.word	0x00000856
   1a258:	00000856 	.word	0x00000856
   1a25c:	00000856 	.word	0x00000856
   1a260:	00000856 	.word	0x00000856
   1a264:	00000604 	.word	0x00000604
   1a268:	00000856 	.word	0x00000856
   1a26c:	00000856 	.word	0x00000856
   1a270:	00000856 	.word	0x00000856
   1a274:	00000856 	.word	0x00000856
   1a278:	00000856 	.word	0x00000856
   1a27c:	00000856 	.word	0x00000856
   1a280:	00000856 	.word	0x00000856
   1a284:	00000856 	.word	0x00000856
   1a288:	00000856 	.word	0x00000856
   1a28c:	00000856 	.word	0x00000856
   1a290:	00000856 	.word	0x00000856
   1a294:	00000856 	.word	0x00000856
   1a298:	00000856 	.word	0x00000856
   1a29c:	00000856 	.word	0x00000856
   1a2a0:	00000856 	.word	0x00000856
   1a2a4:	000005fc 	.word	0x000005fc
   1a2a8:	00000614 	.word	0x00000614
   1a2ac:	000005dc 	.word	0x000005dc
   1a2b0:	000005ec 	.word	0x000005ec
   1a2b4:	000005e4 	.word	0x000005e4
   1a2b8:	0000ffff 	.word	0x0000ffff
   1a2bc:	0000ffff 	.word	0x0000ffff
   1a2c0:	00000004 	.word	0x00000004
   1a2c4:	00000005 	.word	0x00000005
   1a2c8:	00000006 	.word	0x00000006
   1a2cc:	00000007 	.word	0x00000007
   1a2d0:	00000020 	.word	0x00000020
   1a2d4:	0000ffff 	.word	0x0000ffff
   1a2d8:	00000022 	.word	0x00000022
   1a2dc:	00000023 	.word	0x00000023
   1a2e0:	0000ffff 	.word	0x0000ffff
   1a2e4:	0000ffff 	.word	0x0000ffff
   1a2e8:	0000ffff 	.word	0x0000ffff
   1a2ec:	0000ffff 	.word	0x0000ffff
   1a2f0:	00000008 	.word	0x00000008
   1a2f4:	00000009 	.word	0x00000009
   1a2f8:	0000000a 	.word	0x0000000a
   1a2fc:	0000000b 	.word	0x0000000b
   1a300:	0000ffff 	.word	0x0000ffff
   1a304:	0000ffff 	.word	0x0000ffff
   1a308:	0000ffff 	.word	0x0000ffff
   1a30c:	0000ffff 	.word	0x0000ffff
   1a310:	00000dca 	.word	0x00000dca
   1a314:	00000dca 	.word	0x00000dca
   1a318:	00000da6 	.word	0x00000da6
   1a31c:	00000dca 	.word	0x00000dca
   1a320:	00000da6 	.word	0x00000da6
   1a324:	00000d8c 	.word	0x00000d8c
   1a328:	00000d8c 	.word	0x00000d8c
   1a32c:	00000dca 	.word	0x00000dca
   1a330:	00000dca 	.word	0x00000dca
   1a334:	00000dca 	.word	0x00000dca
   1a338:	00000dca 	.word	0x00000dca
   1a33c:	00000dca 	.word	0x00000dca
   1a340:	00000dca 	.word	0x00000dca
   1a344:	00000dca 	.word	0x00000dca
   1a348:	00000dca 	.word	0x00000dca
   1a34c:	00000dca 	.word	0x00000dca
   1a350:	00000dca 	.word	0x00000dca
   1a354:	00000dca 	.word	0x00000dca
   1a358:	00000dca 	.word	0x00000dca
   1a35c:	00000dca 	.word	0x00000dca
   1a360:	00000dca 	.word	0x00000dca
   1a364:	00000dca 	.word	0x00000dca
   1a368:	00000dca 	.word	0x00000dca
   1a36c:	00000dca 	.word	0x00000dca
   1a370:	00000dca 	.word	0x00000dca
   1a374:	00000dca 	.word	0x00000dca
   1a378:	00000da6 	.word	0x00000da6
   1a37c:	00000dca 	.word	0x00000dca
   1a380:	00000da6 	.word	0x00000da6
   1a384:	00000dca 	.word	0x00000dca
   1a388:	00000dca 	.word	0x00000dca
   1a38c:	00000dca 	.word	0x00000dca
   1a390:	00000dca 	.word	0x00000dca
   1a394:	00000dca 	.word	0x00000dca
   1a398:	00000dca 	.word	0x00000dca
   1a39c:	00000dca 	.word	0x00000dca
   1a3a0:	00000dca 	.word	0x00000dca
   1a3a4:	00000dca 	.word	0x00000dca
   1a3a8:	00000dca 	.word	0x00000dca
   1a3ac:	00000dca 	.word	0x00000dca
   1a3b0:	00000dca 	.word	0x00000dca
   1a3b4:	00000dca 	.word	0x00000dca
   1a3b8:	00000dca 	.word	0x00000dca
   1a3bc:	00000dca 	.word	0x00000dca
   1a3c0:	00000dca 	.word	0x00000dca
   1a3c4:	00000dca 	.word	0x00000dca
   1a3c8:	00000dca 	.word	0x00000dca
   1a3cc:	00000dca 	.word	0x00000dca
   1a3d0:	00000dca 	.word	0x00000dca
   1a3d4:	00000dca 	.word	0x00000dca
   1a3d8:	00000dca 	.word	0x00000dca
   1a3dc:	00000dca 	.word	0x00000dca
   1a3e0:	00000dca 	.word	0x00000dca
   1a3e4:	00000dca 	.word	0x00000dca
   1a3e8:	00000dca 	.word	0x00000dca
   1a3ec:	00000dca 	.word	0x00000dca
   1a3f0:	00000dca 	.word	0x00000dca
   1a3f4:	00000dca 	.word	0x00000dca
   1a3f8:	00000dca 	.word	0x00000dca
   1a3fc:	00000dca 	.word	0x00000dca
   1a400:	00000dca 	.word	0x00000dca
   1a404:	00000dca 	.word	0x00000dca
   1a408:	00000dca 	.word	0x00000dca
   1a40c:	00000dca 	.word	0x00000dca
   1a410:	00000da6 	.word	0x00000da6
   1a414:	00000da6 	.word	0x00000da6
   1a418:	00000dae 	.word	0x00000dae
   1a41c:	00000dae 	.word	0x00000dae
   1a420:	00000dae 	.word	0x00000dae
   1a424:	00000dae 	.word	0x00000dae
   1a428:	42000000 	.word	0x42000000
   1a42c:	42000400 	.word	0x42000400
   1a430:	42000800 	.word	0x42000800
   1a434:	42000c00 	.word	0x42000c00
   1a438:	42001000 	.word	0x42001000
   1a43c:	43000400 	.word	0x43000400
   1a440:	00002b66 	.word	0x00002b66
   1a444:	00002b62 	.word	0x00002b62
   1a448:	00002b62 	.word	0x00002b62
   1a44c:	00002bc8 	.word	0x00002bc8
   1a450:	00002bc8 	.word	0x00002bc8
   1a454:	00002b7c 	.word	0x00002b7c
   1a458:	00002b6c 	.word	0x00002b6c
   1a45c:	00002b82 	.word	0x00002b82
   1a460:	00002bb6 	.word	0x00002bb6
   1a464:	00002d6c 	.word	0x00002d6c
   1a468:	00002d4c 	.word	0x00002d4c
   1a46c:	00002d4c 	.word	0x00002d4c
   1a470:	00002de6 	.word	0x00002de6
   1a474:	00002d5e 	.word	0x00002d5e
   1a478:	00002d7a 	.word	0x00002d7a
   1a47c:	00002d50 	.word	0x00002d50
   1a480:	00002d88 	.word	0x00002d88
   1a484:	00002dca 	.word	0x00002dca
   1a488:	00002e24 	.word	0x00002e24
   1a48c:	00002e66 	.word	0x00002e66
   1a490:	00002e66 	.word	0x00002e66
   1a494:	00002e66 	.word	0x00002e66
   1a498:	00002e16 	.word	0x00002e16
   1a49c:	00002e32 	.word	0x00002e32
   1a4a0:	00002e08 	.word	0x00002e08
   1a4a4:	00002e40 	.word	0x00002e40
   1a4a8:	00002e56 	.word	0x00002e56
   1a4ac:	0000360e 	.word	0x0000360e
   1a4b0:	00003704 	.word	0x00003704
   1a4b4:	0000370e 	.word	0x0000370e
   1a4b8:	00003718 	.word	0x00003718
   1a4bc:	00003722 	.word	0x00003722
   1a4c0:	00003754 	.word	0x00003754
   1a4c4:	0000375e 	.word	0x0000375e
   1a4c8:	00003768 	.word	0x00003768
   1a4cc:	00003772 	.word	0x00003772
   1a4d0:	0000377c 	.word	0x0000377c
   1a4d4:	42002000 	.word	0x42002000
   1a4d8:	42002400 	.word	0x42002400
   1a4dc:	42002800 	.word	0x42002800
   1a4e0:	42002c00 	.word	0x42002c00
   1a4e4:	43000800 	.word	0x43000800
   1a4e8:	00000002 	.word	0x00000002
   1a4ec:	00000100 	.word	0x00000100
   1a4f0:	00000002 	.word	0x00000002
   1a4f4:	00000200 	.word	0x00000200
   1a4f8:	00000002 	.word	0x00000002
   1a4fc:	00000400 	.word	0x00000400
   1a500:	00000002 	.word	0x00000002
   1a504:	00000800 	.word	0x00000800
   1a508:	00000003 	.word	0x00000003
   1a50c:	00000004 	.word	0x00000004

0001a510 <AdvChannels923>:
   1a510:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1a520:	3709f740 ff100100                       @..7....

0001a528 <DefaultChannels923>:
   1a528:	50015001                                .P.P

0001a52c <DefaultDrParamsAS>:
   1a52c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a53c:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1a54c:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1a55c:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001a56c <SubBandDutyCycle923>:
   1a56c:	00000064                                d...

0001a570 <SubBandParams923>:
   1a570:	35c36d80 37502800 00000000              .m.5.(P7....

0001a57c <pds_reg_as_item_list>:
   1a57c:	200012fc 00200004 2000131c 25c00104     ... .. .... ...%
   1a58c:	200012b6 ea010204                       ... ....

0001a594 <DefaultChannels915AU>:
   1a594:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5a4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5b4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5c4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5d4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5e4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a5f4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a604:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1a614:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001a624 <DefaultDrParamsAU>:
   1a624:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1a634:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1a644:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1a654:	00f2003d 010908be 00000000 010a0000     =...............
   1a664:	00350007 01090c0c 00810005 01090b06     ..5.............
   1a674:	00f20007 01090a01 00f2000c 010909fe     ................
   1a684:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001a694 <pds_reg_au_item_list>:
   1a694:	200013cf 00010008 2000132c 06900108     ... ....,.. ....

0001a6a4 <AdvChannels433>:
   1a6a4:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1a6b4:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1a6c4:	ff0c0101                                ....

0001a6c8 <AdvChannels868>:
   1a6c8:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1a6d8:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1a6e8:	ff100101                                ....

0001a6ec <DefaultChannels433>:
   1a6ec:	50015001 00005001                       .P.P.P..

0001a6f4 <DefaultChannels868>:
   1a6f4:	50015001 00005001                       .P.P.P..

0001a6fc <DefaultDrparamsEU>:
   1a6fc:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1a70c:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1a71c:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1a72c:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001a73c <SubBandDutyCycle868>:
   1a73c:	006403e8 03e80064 0064000a              ..d.d.....d.

0001a748 <SubBandParams433>:
   1a748:	19cf0e40 19ea8580 00000000              @...........

0001a754 <SubBandParams868>:
   1a754:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1a764:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1a774:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1a784:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1a794:	33db2580 00000000                       .%.3....

0001a79c <pds_reg_eu868_fid1_item_list>:
   1a79c:	200012fc 00200003                       ... .. .

0001a7a4 <pds_reg_eu868_fid2_item_list>:
   1a7a4:	2000131c 00c0000b                       ... ....

0001a7ac <AdvChannels865>:
   1a7ac:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1a7bc:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1a7cc:	ff1e0100                                ....

0001a7d0 <DefaultChannels865>:
   1a7d0:	50015001 00005001                       .P.P.P..

0001a7d8 <DefaultDrParamsIN>:
   1a7d8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a7e8:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1a7f8:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1a808:	00000000 010a0000 00f20008 000a00fe     ................

0001a818 <pds_reg_ind_item_list>:
   1a818:	200012fc 00200006 2000131c 25c00106     ... .. .... ...%

0001a828 <AdvChannels923JP>:
   1a828:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1a838:	3709f740 ff100100                       @..7....

0001a840 <DefaultChannels923JP>:
   1a840:	50015001                                .P.P

0001a844 <DefaultDrParamsJP>:
   1a844:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a854:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1a864:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1a874:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001a884 <SubBandDutyCycleJP923>:
   1a884:	00000064                                d...

0001a888 <SubBandParamsJP923>:
   1a888:	36d61600 37502800 00000000              ...6.(P7....

0001a894 <pds_reg_jpn_fid1_item_list>:
   1a894:	200012fc 00200007 2000131c 25c00107     ... .. .... ...%

0001a8a4 <AdvChannels920KR>:
   1a8a4:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1a8b4:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1a8c4:	ff0e0100                                ....

0001a8c8 <DefaultChannels920KR>:
   1a8c8:	50015001 00005001                       .P.P.P..

0001a8d0 <DefaultDrParamsKR>:
   1a8d0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1a8e0:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1a8f0:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001a900 <pds_reg_kr_fid1_item_list>:
   1a900:	200012fc 00200005 2000131c 25c00105     ... .. .... ...%

0001a910 <DefaultChannels915>:
   1a910:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a920:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a930:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a940:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a950:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a960:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a970:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a980:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1a990:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0001a9a0 <DefaultDrParamsNA>:
   1a9a0:	000b0012 01070ac6 00350005 01070906     ..........5.....
   1a9b0:	007d0007 01070801 00f2000c 010707fe     ..}.............
   1a9c0:	00f20016 010908fc 00000000 010a0000     ................
   1a9d0:	00000000 010a0000 00000000 010a0000     ................
   1a9e0:	00350010 01090cbf 00810007 01090b06     ..5.............
   1a9f0:	00f20007 01090a01 00f2000c 010909fe     ................
   1aa00:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001aa10 <pds_reg_na_item_list>:
   1aa10:	200013cf 00010002 2000132c 06900102     ... ....,.. ....
   1aa20:	00006104 00006104 00006104 00006104     .a...a...a...a..
   1aa30:	0000616a 000061d0 00006182 0000616a     ja...a...a..ja..

0001aa40 <taskHandlers>:
   1aa40:	00009be9 0000f8ed 0000eee5 0000924d     ............M...
   1aa50:	0000a949                                I...

0001aa54 <tc_interrupt_vectors.13444>:
   1aa54:	14131211 00000015 20707041 656d6974     ........App time
   1aa64:	78652072 65726970 000d2064 6e696f4a     r expired ..Join
   1aa74:	71655220 74736575 6e655320 6f742074      Request Sent to
   1aa84:	65687420 74654e20 6b726f77 72655320      the Network Ser
   1aa94:	0d726576 00000000 6c70550a 206b6e69     ver......Uplink 
   1aaa4:	7373656d 20656761 746e6573 0000000d     message sent....
   1aab4:	314f490a 72705820 694c206f 20746867     .IO1 Xpro Light 
   1aac4:	736e6573 7620726f 65756c61 6425203a     sensor value: %d
   1aad4:	00000000 314f490a 72705820 6554206f     .....IO1 Xpro Te
   1aae4:	7265706d 72757461 00203a65 66312e25     mperature: .%.1f
   1aaf4:	2f4320f8 66312e25 0a4620f8 0000000d     . C/%.1f. F.....
   1ab04:	66312e25 00000000 6e654c0a 6425203a     %.1f.....Len: %d
   1ab14:	00000000 6c730a0d 5f706565 25206b6f     ......sleep_ok %
   1ab24:	6d20646c 000a0d73 202a2a2a 65636552     ld ms...*** Rece
   1ab34:	64657669 204c4420 61746144 2a2a2a20     ived DL Data ***
   1ab44:	00000d0a 6172460a 5220656d 69656365     .....Frame Recei
   1ab54:	20646576 70207461 2074726f 0d0a6425     ved at port %d..
   1ab64:	00000000 6172460a 4c20656d 74676e65     .....Frame Lengt
   1ab74:	202d2068 0d0a6425 00000000 7961500a     h - %d.......Pay
   1ab84:	64616f6c 0000203a 00783025 2a2a0a0d     load: ..%0x...**
   1ab94:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1aba4:	2a2a2a2a 0d2a2a2a 00000000 65636552     *******.....Rece
   1abb4:	64657669 4b434120 726f6620 6e6f4320     ived ACK for Con
   1abc4:	6d726966 64206465 0d617461 00000000     firmed data.....
   1abd4:	6e617254 74636173 206e6f69 706d6f43     Transaction Comp
   1abe4:	6574656c 53202d20 75746174 25203a73     lete - Status: %
   1abf4:	000a0d64 6e617254 73696d73 6e6f6973     d...Transmission
   1ac04:	63755320 73736563 0000000d 4f4e0d0a      Success......NO
   1ac14:	4148435f 4c454e4e 4f465f53 0a444e55     _CHANNELS_FOUND.
   1ac24:	0000000d 55420d0a 0d0a5953 00000000     ......BUSY......
   1ac34:	73490d0a 0d657573 00000000 696f4a0a     ..Issue......Joi
   1ac44:	7553206e 73656363 6c756673 00000d21     n Successful!...
   1ac54:	62616e55 7420656c 7473206f 20747261     Unable to start 
   1ac64:	20656874 6c707061 74616369 206e6f69     the application 
   1ac74:	656d6974 00000d72 696f4a0a 6544206e     timer....Join De
   1ac84:	6465696e 00000d21 7972540a 206f7420     nied!....Try to 
   1ac94:	6e696f6a 61676120 2e206e69 000d2e2e     join again .....
   1aca4:	696f4a0a 6552206e 73657571 65732074     .Join Request se
   1acb4:	7420746e 6874206f 656e2065 726f7774     nt to the networ
   1acc4:	6573206b 72657672 0000000d 2d2d0a0d     k server......--
   1acd4:	53544120 33524d41 6f4c2034 41576152      ATSAMR34 LoRaWA
   1ace4:	7041204e 63696c70 6f697461 2d2d206e     N Application --
   1acf4:	0000000d 7665440a 20495545 0000203a     .....DevEUI : ..
   1ad04:	7070410a 20495545 0000203a 7070410a     .AppEUI : ...App
   1ad14:	2079654b 0000203a 78323025 c194c100              Key : ..%02x.

0001ad21 <FskSyncWordBuff>:
   1ad21:	01c194c1                                         ...

0001ad24 <macEndDevCmdReplyLen>:
   1ad24:	02010201 01010203 0c0a0802                       .........

0001ad2d <maxEIRPTable>:
   1ad2d:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1ad3d:	d2000000                                         ...

0001ad40 <pds_mac_fid1_item_list>:
   1ad40:	200019d2 00010000 200019d0 06010100     ... ....... ....
   1ad50:	20001964 0c040200 200019d3 15010300     d.. ....... ....
   1ad60:	200019d4 1b040400 20001a24 24040500     ... ....$.. ...$
   1ad70:	20001a00 2d040600 20001a14 36100700     ... ...-... ...6
   1ad80:	20001a04 4b100800 200019ee 60040900     ... ...K... ...`
   1ad90:	200019bd 69010b00 2000196c 6f010a00     ... ...il.. ...o
   1ada0:	200019a4 75020c00 200019a6 7c020d00     ... ...u... ...|
   1adb0:	200019a8 83020e00 200019aa 8a020f00     ... ....... ....
   1adc0:	200019ac 91021000 200019ae 98021100     ... ....... ....
   1add0:	200019b0 9f011200 200019b1 a5011300     ... ....... ....
   1ade0:	200019b6 b1011500 200019b5 ab011400     ... ....... ....
   1adf0:	2000195c b7041600                       \.. ....

0001adf8 <pds_mac_fid2_item_list>:
   1adf8:	20001952 00050001 200019ca 0a010101     R.. ....... ....
   1ae08:	20001908 10010201 20001909 16040301     ... ....... ....
   1ae18:	2000190d 1f100401 2000191d 34100501     ... ....... ...4
   1ae28:	2000192d 49100601 2000193d 5e080701     -.. ...I=.. ...^
   1ae38:	20001945 6b080801 200019b2 78020901     E.. ...k... ...x
   1ae48:	20001960 7f040a01 20001958 88040b01     `.. ....X.. ....
   1ae58:	200019bb 91010c01                       ... ....

0001ae60 <lorawanHandlers>:
   1ae60:	0000edc9 0000ecdd 0000ee6d 000000fd     ........m.......

0001ae70 <radioTaskHandlers>:
   1ae70:	0001040d 0001050d 00010031 0000fb8d     ........1.......
   1ae80:	0001082d 00011450 00011420 00011432     -...P... ...2...
   1ae90:	00011374 00011432 00011416 00011432     t...2.......2...
   1aea0:	00011374 00011420 00011420 00011416     t... ... .......
   1aeb0:	00011374 0001137c 0001137c 0001137c     t...|...|...|...
   1aec0:	00011438 00011420 00011420 000113f4     8... ... .......
   1aed0:	000114d8 000113f4 00011416 000113f4     ................
   1aee0:	000114d8 00011420 00011420 00011416     .... ... .......
   1aef0:	000114d8 0001137c 0001137c 0001137c     ....|...|...|...
   1af00:	000114e2 000117d0 00011720 00011720     ........ ... ...
   1af10:	0001171e 000117c2 000117c2 000117b8     ................
   1af20:	0001171e 000117c2 000117b8 000117c2     ................
   1af30:	0001171e 000117c8 000117c8 000117c8     ................
   1af40:	00011858 000125a0 00012582 0001253c     X....%...%..<%..
   1af50:	0001245a 0001253c 00012574 0001253c     Z$..<%..t%..<%..
   1af60:	0001245a 00012582 00012582 00012574     Z$...%...%..t%..
   1af70:	0001245a 00012452 00012452 00012452     Z$..R$..R$..R$..
   1af80:	000127b8 00012c00 00012ac0 00012ac0     .'...,...*...*..
   1af90:	00012abc 00012bd8 00012bd8 00012bca     .*...+...+...+..
   1afa0:	00012abc 00012bd8 00012bca 00012bd8     .*...+...+...+..
   1afb0:	00012abc 00012be0 00012be0 00012be0     .*...+...+...+..
   1afc0:	00012de4                                .-..

0001afc4 <_global_impure_ptr>:
   1afc4:	20000040 0000000a 00014694 00014708     @.. .....F...G..
   1afd4:	00014708 00014678 00014708 00014708     .G..xF...G...G..
   1afe4:	00014708 00014708 00014708 00014708     .G...G...G...G..
   1aff4:	00014680 00014162 00014708 0001411c     .F..bA...G...A..
   1b004:	0001416c 00014708 000141b8 000143a2     lA...G...A...C..
   1b014:	000143a2 000143a2 000143a2 000143a2     .C...C...C...C..
   1b024:	000143a2 000143a2 000143a2 000143a2     .C...C...C...C..
   1b034:	00014708 00014708 00014708 00014708     .G...G...G...G..
   1b044:	00014708 00014708 00014708 00014708     .G...G...G...G..
   1b054:	00014708 00014708 000141c0 00014308     .G...G...A...C..
   1b064:	00014708 00014308 00014708 00014708     .G...C...G...G..
   1b074:	00014708 00014708 000143d2 00014708     .G...G...C...G..
   1b084:	00014708 000143da 00014708 00014708     .G...C...G...G..
   1b094:	00014708 00014708 00014708 0001447c     .G...G...G..|D..
   1b0a4:	00014708 00014708 000144ae 00014708     .G...G...D...G..
   1b0b4:	00014708 00014708 00014708 00014708     .G...G...G...G..
   1b0c4:	00014708 00014708 00014708 00014708     .G...G...G...G..
   1b0d4:	00014708 000145a8 000145dc 00014308     .G...E...E...C..
   1b0e4:	00014308 00014308 000145ee 000145dc     .C...C...E...E..
   1b0f4:	00014708 00014708 000145f6 00014708     .G...G...E...G..
   1b104:	00014510 000146d6 0001464c 00014546     .E...F..LF..FE..
   1b114:	00014708 0001454e 00014708 000146a4     .G..NE...G...F..
   1b124:	00014708 00014708 00014606 00464e49     .G...G...F..INF.
   1b134:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   1b144:	37363534 42413938 46454443 00000000     456789ABCDEF....
   1b154:	33323130 37363534 62613938 66656463     0123456789abcdef
   1b164:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

0001b174 <blanks.7223>:
   1b174:	20202020 20202020 20202020 20202020                     

0001b184 <zeroes.7224>:
   1b184:	30303030 30303030 30303030 30303030     0000000000000000
   1b194:	00015c5e 00015d32 00015d32 00015c4a     ^\..2]..2]..J\..
   1b1a4:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b1b4:	00015d32 00015d32 00015d04 00015816     2]..2]...]...X..
   1b1c4:	00015d32 0001580c 00015820 00015d32     2]...X.. X..2]..
   1b1d4:	00015c54 000159e0 000159e0 000159e0     T\...Y...Y...Y..
   1b1e4:	000159e0 000159e0 000159e0 000159e0     .Y...Y...Y...Y..
   1b1f4:	000159e0 000159e0 00015d32 00015d32     .Y...Y..2]..2]..
   1b204:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b214:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b224:	00015d1a 00015c6e 00015d32 00015c6e     .]..n\..2]..n\..
   1b234:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b244:	00015bd4 00015d32 00015d32 00015bde     .[..2]..2]...[..
   1b254:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b264:	00015d32 00015c0c 00015d32 00015d32     2]...\..2]..2]..
   1b274:	00015c3a 00015d32 00015d32 00015d32     :\..2]..2]..2]..
   1b284:	00015d32 00015d32 00015d32 00015d32     2]..2]..2]..2]..
   1b294:	00015d32 00015d32 00015d32 00015a20     2]..2]..2].. Z..
   1b2a4:	00015a56 00015c6e 00015c6e 00015c6e     VZ..n\..n\..n\..
   1b2b4:	00015afe 00015a56 00015d32 00015d32     .Z..VZ..2]..2]..
   1b2c4:	00015b08 00015d32 00015b1a 00015d2e     .[..2]...[...]..
   1b2d4:	00015b48 00015b72 00015d32 00015b7c     H[..r[..2]..|[..
   1b2e4:	00015d32 00015d2a 00015d32 00015d32     2]..*]..2]..2]..
   1b2f4:	0001586e                                nX..

0001b2f8 <blanks.7238>:
   1b2f8:	20202020 20202020 20202020 20202020                     

0001b308 <zeroes.7239>:
   1b308:	30303030 30303030 30303030 30303030     0000000000000000
   1b318:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0001b328 <__mprec_bigtens>:
   1b328:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1b338:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1b348:	7f73bf3c 75154fdd                       <.s..O.u

0001b350 <__mprec_tens>:
   1b350:	00000000 3ff00000 00000000 40240000     .......?......$@
   1b360:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1b370:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1b380:	00000000 412e8480 00000000 416312d0     .......A......cA
   1b390:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1b3a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1b3b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1b3c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1b3d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1b3e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1b3f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1b400:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1b410:	79d99db4 44ea7843                       ...yCx.D

0001b418 <p05.6055>:
   1b418:	00000005 00000019 0000007d 00000043     ........}...C...
   1b428:	49534f50 00000058 0000002e              POSIX.......

0001b434 <_ctype_>:
   1b434:	20202000 20202020 28282020 20282828     .         ((((( 
   1b444:	20202020 20202020 20202020 20202020                     
   1b454:	10108820 10101010 10101010 10101010      ...............
   1b464:	04040410 04040404 10040404 10101010     ................
   1b474:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1b484:	01010101 01010101 01010101 10101010     ................
   1b494:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1b4a4:	02020202 02020202 02020202 10101010     ................
   1b4b4:	00000020 00000000 00000000 00000000      ...............
	...

0001b538 <_init>:
   1b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b53a:	46c0      	nop			; (mov r8, r8)
   1b53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b53e:	bc08      	pop	{r3}
   1b540:	469e      	mov	lr, r3
   1b542:	4770      	bx	lr

0001b544 <__init_array_start>:
   1b544:	00016e75 	.word	0x00016e75

0001b548 <__frame_dummy_init_array_entry>:
   1b548:	000000dd                                ....

0001b54c <_fini>:
   1b54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b54e:	46c0      	nop			; (mov r8, r8)
   1b550:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b552:	bc08      	pop	{r3}
   1b554:	469e      	mov	lr, r3
   1b556:	4770      	bx	lr

0001b558 <__fini_array_start>:
   1b558:	000000b5 	.word	0x000000b5
